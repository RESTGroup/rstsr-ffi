#![allow(non_camel_case_types)]

use core::ffi::{c_char, c_void};

#[cfg(not(feature = "ilp64"))]
pub type blas_int = i32;
#[cfg(feature = "ilp64")]
pub type blas_int = i32;

/* automatically generated by rust-bindgen 0.71.1 */

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CBLAS_LAYOUT {
    CblasRowMajor = 101,
    CblasColMajor = 102,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CBLAS_TRANSPOSE {
    CblasNoTrans = 111,
    CblasTrans = 112,
    CblasConjTrans = 113,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CBLAS_UPLO {
    CblasUpper = 121,
    CblasLower = 122,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CBLAS_DIAG {
    CblasNonUnit = 131,
    CblasUnit = 132,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CBLAS_SIDE {
    CblasLeft = 141,
    CblasRight = 142,
}
unsafe extern "C" {
    pub fn cblas_dcabs1(z: *const c_void) -> f64;
    pub fn cblas_scabs1(c: *const c_void) -> f32;
    pub fn cblas_sdsdot(
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
    ) -> f32;
    pub fn cblas_dsdot(
        N: blas_int,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
    ) -> f64;
    pub fn cblas_sdot(
        N: blas_int,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
    ) -> f32;
    pub fn cblas_ddot(
        N: blas_int,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
    ) -> f64;
    pub fn cblas_cdotu_sub(
        N: blas_int,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        dotu: *mut c_void,
    );
    pub fn cblas_cdotc_sub(
        N: blas_int,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        dotc: *mut c_void,
    );
    pub fn cblas_zdotu_sub(
        N: blas_int,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        dotu: *mut c_void,
    );
    pub fn cblas_zdotc_sub(
        N: blas_int,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        dotc: *mut c_void,
    );
    pub fn cblas_snrm2(N: blas_int, X: *const f32, incX: blas_int) -> f32;
    pub fn cblas_sasum(N: blas_int, X: *const f32, incX: blas_int) -> f32;
    pub fn cblas_dnrm2(N: blas_int, X: *const f64, incX: blas_int) -> f64;
    pub fn cblas_dasum(N: blas_int, X: *const f64, incX: blas_int) -> f64;
    pub fn cblas_scnrm2(N: blas_int, X: *const c_void, incX: blas_int) -> f32;
    pub fn cblas_scasum(N: blas_int, X: *const c_void, incX: blas_int) -> f32;
    pub fn cblas_dznrm2(N: blas_int, X: *const c_void, incX: blas_int) -> f64;
    pub fn cblas_dzasum(N: blas_int, X: *const c_void, incX: blas_int) -> f64;
    pub fn cblas_isamax(N: blas_int, X: *const f32, incX: blas_int) -> usize;
    pub fn cblas_idamax(N: blas_int, X: *const f64, incX: blas_int) -> usize;
    pub fn cblas_icamax(N: blas_int, X: *const c_void, incX: blas_int) -> usize;
    pub fn cblas_izamax(N: blas_int, X: *const c_void, incX: blas_int) -> usize;
    pub fn cblas_sswap(N: blas_int, X: *mut f32, incX: blas_int, Y: *mut f32, incY: blas_int);
    pub fn cblas_scopy(N: blas_int, X: *const f32, incX: blas_int, Y: *mut f32, incY: blas_int);
    pub fn cblas_saxpy(
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_dswap(N: blas_int, X: *mut f64, incX: blas_int, Y: *mut f64, incY: blas_int);
    pub fn cblas_dcopy(N: blas_int, X: *const f64, incX: blas_int, Y: *mut f64, incY: blas_int);
    pub fn cblas_daxpy(
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_cswap(N: blas_int, X: *mut c_void, incX: blas_int, Y: *mut c_void, incY: blas_int);
    pub fn cblas_ccopy(
        N: blas_int,
        X: *const c_void,
        incX: blas_int,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_caxpy(
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zswap(N: blas_int, X: *mut c_void, incX: blas_int, Y: *mut c_void, incY: blas_int);
    pub fn cblas_zcopy(
        N: blas_int,
        X: *const c_void,
        incX: blas_int,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zaxpy(
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_srotmg(d1: *mut f32, d2: *mut f32, b1: *mut f32, b2: f32, P: *mut f32);
    pub fn cblas_srotm(
        N: blas_int,
        X: *mut f32,
        incX: blas_int,
        Y: *mut f32,
        incY: blas_int,
        P: *const f32,
    );
    pub fn cblas_drotmg(d1: *mut f64, d2: *mut f64, b1: *mut f64, b2: f64, P: *mut f64);
    pub fn cblas_drotm(
        N: blas_int,
        X: *mut f64,
        incX: blas_int,
        Y: *mut f64,
        incY: blas_int,
        P: *const f64,
    );
    pub fn cblas_sscal(N: blas_int, alpha: f32, X: *mut f32, incX: blas_int);
    pub fn cblas_dscal(N: blas_int, alpha: f64, X: *mut f64, incX: blas_int);
    pub fn cblas_cscal(N: blas_int, alpha: *const c_void, X: *mut c_void, incX: blas_int);
    pub fn cblas_zscal(N: blas_int, alpha: *const c_void, X: *mut c_void, incX: blas_int);
    pub fn cblas_csscal(N: blas_int, alpha: f32, X: *mut c_void, incX: blas_int);
    pub fn cblas_zdscal(N: blas_int, alpha: f64, X: *mut c_void, incX: blas_int);
    pub fn cblas_srotg(a: *mut f32, b: *mut f32, c: *mut f32, s: *mut f32);
    pub fn cblas_drotg(a: *mut f64, b: *mut f64, c: *mut f64, s: *mut f64);
    pub fn cblas_crotg(a: *mut c_void, b: *mut c_void, c: *mut f32, s: *mut c_void);
    pub fn cblas_zrotg(a: *mut c_void, b: *mut c_void, c: *mut f64, s: *mut c_void);
    pub fn cblas_srot(
        N: blas_int,
        X: *mut f32,
        incX: blas_int,
        Y: *mut f32,
        incY: blas_int,
        c: f32,
        s: f32,
    );
    pub fn cblas_drot(
        N: blas_int,
        X: *mut f64,
        incX: blas_int,
        Y: *mut f64,
        incY: blas_int,
        c: f64,
        s: f64,
    );
    pub fn cblas_csrot(
        N: blas_int,
        X: *mut c_void,
        incX: blas_int,
        Y: *mut c_void,
        incY: blas_int,
        c: f32,
        s: f32,
    );
    pub fn cblas_zdrot(
        N: blas_int,
        X: *mut c_void,
        incX: blas_int,
        Y: *mut c_void,
        incY: blas_int,
        c: f64,
        s: f64,
    );
    pub fn cblas_sgemv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_sgbmv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_strmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_stbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_stpmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f32,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_strsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_stbsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_stpsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f32,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dgemv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_dgbmv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_dtrmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_dtbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_dtpmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f64,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_dtrsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_dtbsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_dtpsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f64,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_cgemv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_cgbmv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_ctrmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ctbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ctpmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ctrsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ctbsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ctpsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_zgemv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zgbmv(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_ztrmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztpmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztrsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztbsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztpsv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ssymv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_ssbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_sspmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        Ap: *const f32,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_sger(
        layout: CBLAS_LAYOUT,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
        A: *mut f32,
        lda: blas_int,
    );
    pub fn cblas_ssyr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        A: *mut f32,
        lda: blas_int,
    );
    pub fn cblas_sspr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Ap: *mut f32,
    );
    pub fn cblas_ssyr2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
        A: *mut f32,
        lda: blas_int,
    );
    pub fn cblas_sspr2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
        A: *mut f32,
    );
    pub fn cblas_dsymv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_dsbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_dspmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        Ap: *const f64,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_dger(
        layout: CBLAS_LAYOUT,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
        A: *mut f64,
        lda: blas_int,
    );
    pub fn cblas_dsyr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        A: *mut f64,
        lda: blas_int,
    );
    pub fn cblas_dspr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Ap: *mut f64,
    );
    pub fn cblas_dsyr2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
        A: *mut f64,
        lda: blas_int,
    );
    pub fn cblas_dspr2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
        A: *mut f64,
    );
    pub fn cblas_chemv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_chbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_chpmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_cgeru(
        layout: CBLAS_LAYOUT,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_cgerc(
        layout: CBLAS_LAYOUT,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_cher(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_chpr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
    );
    pub fn cblas_cher2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_chpr2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        Ap: *mut c_void,
    );
    pub fn cblas_zhemv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zhbmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zhpmv(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zgeru(
        layout: CBLAS_LAYOUT,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zgerc(
        layout: CBLAS_LAYOUT,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zher(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zhpr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
    );
    pub fn cblas_zher2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zhpr2(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        Ap: *mut c_void,
    );
    pub fn cblas_sgemm(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *const f32,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_sgemmtr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *const f32,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_ssymm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *const f32,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_ssyrk(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_ssyr2k(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *const f32,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_strmm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_strsm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dgemm(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *const f64,
        ldb: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_dgemmtr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *const f64,
        ldb: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_dsymm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *const f64,
        ldb: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_dsyrk(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_dsyr2k(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *const f64,
        ldb: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_dtrmm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_dtrsm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_cgemm(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_cgemmtr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_csymm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_csyrk(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_csyr2k(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_ctrmm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_ctrsm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_zgemm(
        layout: CBLAS_LAYOUT,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zgemmtr(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zsymm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zsyrk(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zsyr2k(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_ztrmm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_ztrsm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_chemm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_cherk(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const c_void,
        lda: blas_int,
        beta: f32,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_cher2k(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: f32,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zhemm(
        layout: CBLAS_LAYOUT,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zherk(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const c_void,
        lda: blas_int,
        beta: f64,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zher2k(
        layout: CBLAS_LAYOUT,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: f64,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_xerbla(p: blas_int, rout: *const c_char, form: *const c_char, ...);
}
