//! Base of current FFI.
//!
//! Declaration of types, enums, cargo feature controls, etc.
//!
//! This file is generated automatically.

pub(crate) use core::ffi::c_char;

#[cfg(not(feature = "ilp64"))]
pub type lapack_int = i32;
#[cfg(feature = "ilp64")]
pub type lapack_int = i64;

/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}

pub type lapack_float_return = f32;
pub type LAPACK_S_SELECT2 = Option<extern "C" fn(arg1: *const f32, arg2: *const f32) -> lapack_int>;
pub type LAPACK_S_SELECT3 =
    Option<extern "C" fn(arg1: *const f32, arg2: *const f32, arg3: *const f32) -> lapack_int>;
pub type LAPACK_D_SELECT2 = Option<extern "C" fn(arg1: *const f64, arg2: *const f64) -> lapack_int>;
pub type LAPACK_D_SELECT3 =
    Option<extern "C" fn(arg1: *const f64, arg2: *const f64, arg3: *const f64) -> lapack_int>;
pub type LAPACK_C_SELECT1 = Option<extern "C" fn(arg1: *const __BindgenComplex<f32>) -> lapack_int>;
pub type LAPACK_C_SELECT2 = Option<
    extern "C" fn(
        arg1: *const __BindgenComplex<f32>,
        arg2: *const __BindgenComplex<f32>,
    ) -> lapack_int,
>;
pub type LAPACK_Z_SELECT1 = Option<extern "C" fn(arg1: *const __BindgenComplex<f64>) -> lapack_int>;
pub type LAPACK_Z_SELECT2 = Option<
    extern "C" fn(
        arg1: *const __BindgenComplex<f64>,
        arg2: *const __BindgenComplex<f64>,
    ) -> lapack_int,
>;
