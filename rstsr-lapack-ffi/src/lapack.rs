#![allow(non_camel_case_types)]

use core::ffi::c_char;

#[cfg(not(feature = "ilp64"))]
pub type lapack_int = i32;
#[cfg(feature = "ilp64")]
pub type lapack_int = i64;

/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}

pub type lapack_float_return = f32;
pub type LAPACK_S_SELECT2 =
    Option<unsafe extern "C" fn(arg1: *const f32, arg2: *const f32) -> lapack_int>;
pub type LAPACK_S_SELECT3 = Option<
    unsafe extern "C" fn(arg1: *const f32, arg2: *const f32, arg3: *const f32) -> lapack_int,
>;
pub type LAPACK_D_SELECT2 =
    Option<unsafe extern "C" fn(arg1: *const f64, arg2: *const f64) -> lapack_int>;
pub type LAPACK_D_SELECT3 = Option<
    unsafe extern "C" fn(arg1: *const f64, arg2: *const f64, arg3: *const f64) -> lapack_int,
>;
pub type LAPACK_C_SELECT1 =
    Option<unsafe extern "C" fn(arg1: *const __BindgenComplex<f32>) -> lapack_int>;
pub type LAPACK_C_SELECT2 = Option<
    unsafe extern "C" fn(
        arg1: *const __BindgenComplex<f32>,
        arg2: *const __BindgenComplex<f32>,
    ) -> lapack_int,
>;
pub type LAPACK_Z_SELECT1 =
    Option<unsafe extern "C" fn(arg1: *const __BindgenComplex<f64>) -> lapack_int>;
pub type LAPACK_Z_SELECT2 = Option<
    unsafe extern "C" fn(
        arg1: *const __BindgenComplex<f64>,
        arg2: *const __BindgenComplex<f64>,
    ) -> lapack_int,
>;
unsafe extern "C" {
    pub fn lsame_(ca: *const c_char, cb: *const c_char, arg1: usize, arg2: usize) -> lapack_int;
    pub fn cbbcsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        theta: *mut f32,
        phi: *mut f32,
        U1: *mut __BindgenComplex<f32>,
        ldu1: *const lapack_int,
        U2: *mut __BindgenComplex<f32>,
        ldu2: *const lapack_int,
        V1T: *mut __BindgenComplex<f32>,
        ldv1t: *const lapack_int,
        V2T: *mut __BindgenComplex<f32>,
        ldv2t: *const lapack_int,
        B11D: *mut f32,
        B11E: *mut f32,
        B12D: *mut f32,
        B12E: *mut f32,
        B21D: *mut f32,
        B21E: *mut f32,
        B22D: *mut f32,
        B22E: *mut f32,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn dbbcsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        theta: *mut f64,
        phi: *mut f64,
        U1: *mut f64,
        ldu1: *const lapack_int,
        U2: *mut f64,
        ldu2: *const lapack_int,
        V1T: *mut f64,
        ldv1t: *const lapack_int,
        V2T: *mut f64,
        ldv2t: *const lapack_int,
        B11D: *mut f64,
        B11E: *mut f64,
        B12D: *mut f64,
        B12E: *mut f64,
        b21d: *mut f64,
        b21e: *mut f64,
        b22d: *mut f64,
        b22e: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn sbbcsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        theta: *mut f32,
        phi: *mut f32,
        U1: *mut f32,
        ldu1: *const lapack_int,
        U2: *mut f32,
        ldu2: *const lapack_int,
        V1T: *mut f32,
        ldv1t: *const lapack_int,
        V2T: *mut f32,
        ldv2t: *const lapack_int,
        B11D: *mut f32,
        B11E: *mut f32,
        B12D: *mut f32,
        B12E: *mut f32,
        B21D: *mut f32,
        B21E: *mut f32,
        B22D: *mut f32,
        B22E: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn zbbcsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        theta: *mut f64,
        phi: *mut f64,
        U1: *mut __BindgenComplex<f64>,
        ldu1: *const lapack_int,
        U2: *mut __BindgenComplex<f64>,
        ldu2: *const lapack_int,
        V1T: *mut __BindgenComplex<f64>,
        ldv1t: *const lapack_int,
        V2T: *mut __BindgenComplex<f64>,
        ldv2t: *const lapack_int,
        B11D: *mut f64,
        B11E: *mut f64,
        B12D: *mut f64,
        B12E: *mut f64,
        B21D: *mut f64,
        B21E: *mut f64,
        B22D: *mut f64,
        B22E: *mut f64,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn dbdsdc_(
        uplo: *const c_char,
        compq: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        VT: *mut f64,
        ldvt: *const lapack_int,
        Q: *mut f64,
        IQ: *mut lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sbdsdc_(
        uplo: *const c_char,
        compq: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        VT: *mut f32,
        ldvt: *const lapack_int,
        Q: *mut f32,
        IQ: *mut lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cbdsqr_(
        uplo: *const c_char,
        n: *const lapack_int,
        ncvt: *const lapack_int,
        nru: *const lapack_int,
        ncc: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        VT: *mut __BindgenComplex<f32>,
        ldvt: *const lapack_int,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dbdsqr_(
        uplo: *const c_char,
        n: *const lapack_int,
        ncvt: *const lapack_int,
        nru: *const lapack_int,
        ncc: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        VT: *mut f64,
        ldvt: *const lapack_int,
        U: *mut f64,
        ldu: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sbdsqr_(
        uplo: *const c_char,
        n: *const lapack_int,
        ncvt: *const lapack_int,
        nru: *const lapack_int,
        ncc: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        VT: *mut f32,
        ldvt: *const lapack_int,
        U: *mut f32,
        ldu: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zbdsqr_(
        uplo: *const c_char,
        n: *const lapack_int,
        ncvt: *const lapack_int,
        nru: *const lapack_int,
        ncc: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        VT: *mut __BindgenComplex<f64>,
        ldvt: *const lapack_int,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dbdsvdx_(
        uplo: *const c_char,
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *const f64,
        E: *const f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        ns: *mut lapack_int,
        S: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sbdsvdx_(
        uplo: *const c_char,
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *const f32,
        E: *const f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        ns: *mut lapack_int,
        S: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ddisna_(
        job: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        D: *const f64,
        SEP: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sdisna_(
        job: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        D: *const f32,
        SEP: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgbbrd_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ncc: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        PT: *mut __BindgenComplex<f32>,
        ldpt: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgbbrd_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ncc: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Q: *mut f64,
        ldq: *const lapack_int,
        PT: *mut f64,
        ldpt: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgbbrd_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ncc: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Q: *mut f32,
        ldq: *const lapack_int,
        PT: *mut f32,
        ldpt: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgbbrd_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ncc: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        PT: *mut __BindgenComplex<f64>,
        ldpt: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgbcon_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgbcon_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgbcon_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgbcon_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgbequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgbequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgbequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgbequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgbequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgbequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgbequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgbequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgbrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        AFB: *const __BindgenComplex<f32>,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgbrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        AFB: *const f64,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgbrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        AFB: *const f32,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgbrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        AFB: *const __BindgenComplex<f64>,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgbrfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        AFB: *const __BindgenComplex<f32>,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f32,
        C: *const f32,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgbrfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        AFB: *const f64,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f64,
        C: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgbrfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        AFB: *const f32,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f32,
        C: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgbrfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        AFB: *const __BindgenComplex<f64>,
        ldafb: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f64,
        C: *const f64,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgbsv_(
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgbsv_(
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgbsv_(
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgbsv_(
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgbsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        AFB: *mut __BindgenComplex<f32>,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgbsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        AFB: *mut f64,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgbsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        AFB: *mut f32,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgbsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        AFB: *mut __BindgenComplex<f64>,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgbsvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        AFB: *mut __BindgenComplex<f32>,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgbsvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        AFB: *mut f64,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgbsvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        AFB: *mut f32,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgbsvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        AFB: *mut __BindgenComplex<f64>,
        ldafb: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgbtrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgbtrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgbtrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgbtrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgbtrs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgbtrs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgbtrs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgbtrs_(
        trans: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgebak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        scale: *const f32,
        m: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgebak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        scale: *const f64,
        m: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgebak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        scale: *const f32,
        m: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgebak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        scale: *const f64,
        m: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgebal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgebal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgebal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgebal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgebrd_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        tauq: *mut __BindgenComplex<f32>,
        taup: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgebrd_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        tauq: *mut f64,
        taup: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgebrd_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        tauq: *mut f32,
        taup: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgebrd_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        tauq: *mut __BindgenComplex<f64>,
        taup: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgecon_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgecon_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgecon_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgecon_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgeequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgeequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgeequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgeequ_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgeequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgeequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgeequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        R: *mut f32,
        C: *mut f32,
        rowcnd: *mut f32,
        colcnd: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgeequb_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        R: *mut f64,
        C: *mut f64,
        rowcnd: *mut f64,
        colcnd: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgees_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_C_SELECT1,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        W: *mut __BindgenComplex<f32>,
        VS: *mut __BindgenComplex<f32>,
        ldvs: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgees_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_D_SELECT2,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        WR: *mut f64,
        WI: *mut f64,
        VS: *mut f64,
        ldvs: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgees_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_S_SELECT2,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        WR: *mut f32,
        WI: *mut f32,
        VS: *mut f32,
        ldvs: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgees_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_Z_SELECT1,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        W: *mut __BindgenComplex<f64>,
        VS: *mut __BindgenComplex<f64>,
        ldvs: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgeesx_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_C_SELECT1,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        W: *mut __BindgenComplex<f32>,
        VS: *mut __BindgenComplex<f32>,
        ldvs: *const lapack_int,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgeesx_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_D_SELECT2,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        WR: *mut f64,
        WI: *mut f64,
        VS: *mut f64,
        ldvs: *const lapack_int,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgeesx_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_S_SELECT2,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        WR: *mut f32,
        WI: *mut f32,
        VS: *mut f32,
        ldvs: *const lapack_int,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgeesx_(
        jobvs: *const c_char,
        sort: *const c_char,
        select: LAPACK_Z_SELECT1,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        sdim: *mut lapack_int,
        W: *mut __BindgenComplex<f64>,
        VS: *mut __BindgenComplex<f64>,
        ldvs: *const lapack_int,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgeev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        W: *mut __BindgenComplex<f32>,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgeev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        WR: *mut f64,
        WI: *mut f64,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgeev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        WR: *mut f32,
        WI: *mut f32,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgeev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        W: *mut __BindgenComplex<f64>,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgeevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        W: *mut __BindgenComplex<f32>,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f32,
        abnrm: *mut f32,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn dgeevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        WR: *mut f64,
        WI: *mut f64,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f64,
        abnrm: *mut f64,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn sgeevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        WR: *mut f32,
        WI: *mut f32,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f32,
        abnrm: *mut f32,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn zgeevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        W: *mut __BindgenComplex<f64>,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        scale: *mut f64,
        abnrm: *mut f64,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn cgehrd_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgehrd_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgehrd_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgehrd_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgejsv_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        jobr: *const c_char,
        jobt: *const c_char,
        jobp: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        SVA: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        cwork: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn dgejsv_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        jobr: *const c_char,
        jobt: *const c_char,
        jobp: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        SVA: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn sgejsv_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        jobr: *const c_char,
        jobt: *const c_char,
        jobp: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        SVA: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn zgejsv_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        jobr: *const c_char,
        jobt: *const c_char,
        jobp: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        SVA: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        cwork: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn cgelq_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        tsize: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgelq_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        tsize: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgelq_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        tsize: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgelq_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        tsize: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgelq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dgelq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgelq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgelq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cgelqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgelqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgelqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgelqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgels_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgels_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgels_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgels_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgelsd_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        S: *mut f32,
        rcond: *const f32,
        rank: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgelsd_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        S: *mut f64,
        rcond: *const f64,
        rank: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgelsd_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        S: *mut f32,
        rcond: *const f32,
        rank: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgelsd_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        S: *mut f64,
        rcond: *const f64,
        rank: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgelss_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        S: *mut f32,
        rcond: *const f32,
        rank: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgelss_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        S: *mut f64,
        rcond: *const f64,
        rank: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgelss_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        S: *mut f32,
        rcond: *const f32,
        rank: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgelss_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        S: *mut f64,
        rcond: *const f64,
        rank: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgelsy_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        JPVT: *mut lapack_int,
        rcond: *const f32,
        rank: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgelsy_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        JPVT: *mut lapack_int,
        rcond: *const f64,
        rank: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgelsy_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        JPVT: *mut lapack_int,
        rcond: *const f32,
        rank: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgelsy_(
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        JPVT: *mut lapack_int,
        rcond: *const f64,
        rank: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgemlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        tsize: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgemlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        T: *const f64,
        tsize: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgemlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        T: *const f32,
        tsize: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgemlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        tsize: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgemqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        tsize: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgemqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        T: *const f64,
        tsize: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgemqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        T: *const f32,
        tsize: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgemqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        tsize: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgemqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        nb: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgemqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        nb: *const lapack_int,
        V: *const f64,
        ldv: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgemqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        nb: *const lapack_int,
        V: *const f32,
        ldv: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgemqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        nb: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgeql2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dgeql2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgeql2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgeql2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cgeqlf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgeqlf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqlf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqlf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqpf_(
        m: *mut lapack_int,
        n: *mut lapack_int,
        a: *mut f32,
        lda: *mut lapack_int,
        jpvt: *mut lapack_int,
        tau: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgeqpf_(
        m: *mut lapack_int,
        n: *mut lapack_int,
        a: *mut f64,
        lda: *mut lapack_int,
        jpvt: *mut lapack_int,
        tau: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgeqpf_(
        m: *mut lapack_int,
        n: *mut lapack_int,
        a: *mut __BindgenComplex<f32>,
        lda: *mut lapack_int,
        jpvt: *mut lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgeqpf_(
        m: *mut lapack_int,
        n: *mut lapack_int,
        a: *mut __BindgenComplex<f64>,
        lda: *mut lapack_int,
        jpvt: *mut lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgeqp3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        JPVT: *mut lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dgeqp3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        JPVT: *mut lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqp3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        JPVT: *mut lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqp3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        JPVT: *mut lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cgeqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        tsize: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgeqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        tsize: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        tsize: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        tsize: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgeqr2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dgeqr2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgeqr2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgeqr2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cgeqrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgeqrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgeqrfp_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgeqrfp_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqrfp_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqrfp_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgeqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dgeqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgeqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgeqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cgeqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgeqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgeqrt3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgeqrt3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgeqrt3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgeqrt3_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgerfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgerfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *const f64,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgerfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *const f32,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgerfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgerfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f32,
        C: *const f32,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgerfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *const f64,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f64,
        C: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgerfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *const f32,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f32,
        C: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgerfsx_(
        trans: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        R: *const f64,
        C: *const f64,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgerq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dgerq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sgerq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zgerq2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cgerqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgerqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgerqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgerqf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgesdd_(
        jobz: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        VT: *mut __BindgenComplex<f32>,
        ldvt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgesdd_(
        jobz: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        S: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        VT: *mut f64,
        ldvt: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgesdd_(
        jobz: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        S: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        VT: *mut f32,
        ldvt: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgesdd_(
        jobz: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        VT: *mut __BindgenComplex<f64>,
        ldvt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgedmd_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        x: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        y: *mut __BindgenComplex<f32>,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f32,
        k: *mut lapack_int,
        eigs: *mut __BindgenComplex<f32>,
        z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        res: *mut f32,
        b: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        w: *mut __BindgenComplex<f32>,
        ldw: *const lapack_int,
        s: *mut __BindgenComplex<f32>,
        lds: *const lapack_int,
        zwork: *mut __BindgenComplex<f32>,
        lzwork: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn dgedmd_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        x: *mut f64,
        ldx: *const lapack_int,
        y: *mut f64,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f64,
        k: *mut lapack_int,
        reig: *mut f64,
        imeig: *mut f64,
        z: *mut f64,
        ldz: *const lapack_int,
        res: *mut f64,
        b: *mut f64,
        ldb: *const lapack_int,
        w: *mut f64,
        ldw: *const lapack_int,
        s: *mut f64,
        lds: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn sgedmd_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        x: *mut f32,
        ldx: *const lapack_int,
        y: *mut f32,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f32,
        k: *mut lapack_int,
        reig: *mut f32,
        imeig: *mut f32,
        z: *mut f32,
        ldz: *const lapack_int,
        res: *mut f32,
        b: *mut f32,
        ldb: *const lapack_int,
        w: *mut f32,
        ldw: *const lapack_int,
        s: *mut f32,
        lds: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn zgedmd_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        x: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        y: *mut __BindgenComplex<f64>,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f64,
        k: *mut lapack_int,
        eigs: *mut __BindgenComplex<f64>,
        z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        res: *mut f64,
        b: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        w: *mut __BindgenComplex<f64>,
        ldw: *const lapack_int,
        s: *mut __BindgenComplex<f64>,
        lds: *const lapack_int,
        zwork: *mut __BindgenComplex<f64>,
        lzwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn cgedmdq_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobq: *const c_char,
        jobt: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        f: *mut __BindgenComplex<f32>,
        ldf: *const lapack_int,
        x: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        y: *mut __BindgenComplex<f32>,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f32,
        k: *const lapack_int,
        eigs: *mut __BindgenComplex<f32>,
        z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        res: *mut f32,
        b: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        v: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        s: *mut __BindgenComplex<f32>,
        lds: *const lapack_int,
        zwork: *mut __BindgenComplex<f32>,
        lzwork: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn dgedmdq_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobq: *const c_char,
        jobt: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        f: *mut f64,
        ldf: *const lapack_int,
        x: *mut f64,
        ldx: *const lapack_int,
        y: *mut f64,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f64,
        k: *mut lapack_int,
        reig: *mut f64,
        imeig: *mut f64,
        z: *mut f64,
        ldz: *const lapack_int,
        res: *mut f64,
        b: *mut f64,
        ldb: *const lapack_int,
        v: *mut f64,
        ldv: *const lapack_int,
        s: *mut f64,
        lds: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn sgedmdq_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobq: *const c_char,
        jobt: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        f: *mut f32,
        ldf: *const lapack_int,
        x: *mut f32,
        ldx: *const lapack_int,
        y: *mut f32,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f32,
        k: *const lapack_int,
        reig: *mut f32,
        imeig: *mut f32,
        z: *mut f32,
        ldz: *const lapack_int,
        res: *mut f32,
        b: *mut f32,
        ldb: *const lapack_int,
        v: *mut f32,
        ldv: *const lapack_int,
        s: *mut f32,
        lds: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn zgedmdq_(
        jobs: *const c_char,
        jobz: *const c_char,
        jobr: *const c_char,
        jobq: *const c_char,
        jobt: *const c_char,
        jobf: *const c_char,
        whtsvd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        f: *mut __BindgenComplex<f64>,
        ldf: *const lapack_int,
        x: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        y: *mut __BindgenComplex<f64>,
        ldy: *const lapack_int,
        nrnk: *const lapack_int,
        tol: *const f64,
        k: *const lapack_int,
        eigs: *mut __BindgenComplex<f64>,
        z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        res: *mut f64,
        b: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        v: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        s: *mut __BindgenComplex<f64>,
        lds: *const lapack_int,
        zwork: *mut __BindgenComplex<f64>,
        lzwork: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn cgesv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgesv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgesv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgesv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dsgesv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        work: *mut f64,
        swork: *mut f32,
        iter: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zcgesv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        swork: *mut __BindgenComplex<f32>,
        rwork: *mut f64,
        iter: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgesvd_(
        jobu: *const c_char,
        jobvt: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        VT: *mut __BindgenComplex<f32>,
        ldvt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgesvd_(
        jobu: *const c_char,
        jobvt: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        S: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        VT: *mut f64,
        ldvt: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgesvd_(
        jobu: *const c_char,
        jobvt: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        S: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        VT: *mut f32,
        ldvt: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgesvd_(
        jobu: *const c_char,
        jobvt: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        VT: *mut __BindgenComplex<f64>,
        ldvt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgesvdq_(
        joba: *const c_char,
        jobp: *const c_char,
        jobr: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        numrank: *mut lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        cwork: *mut __BindgenComplex<f32>,
        lcwork: *mut lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn dgesvdq_(
        joba: *const c_char,
        jobp: *const c_char,
        jobr: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        S: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        numrank: *mut lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        work: *mut f64,
        lwork: *mut lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn sgesvdq_(
        joba: *const c_char,
        jobp: *const c_char,
        jobr: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        S: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        numrank: *mut lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        work: *mut f32,
        lwork: *mut lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn zgesvdq_(
        joba: *const c_char,
        jobp: *const c_char,
        jobr: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        numrank: *mut lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        cwork: *mut __BindgenComplex<f64>,
        lcwork: *mut lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn cgesvdx_(
        jobu: *const c_char,
        jobvt: *const c_char,
        range: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        ns: *mut lapack_int,
        S: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        VT: *mut __BindgenComplex<f32>,
        ldvt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgesvdx_(
        jobu: *const c_char,
        jobvt: *const c_char,
        range: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        ns: *mut lapack_int,
        S: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        VT: *mut f64,
        ldvt: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgesvdx_(
        jobu: *const c_char,
        jobvt: *const c_char,
        range: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        ns: *mut lapack_int,
        S: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        VT: *mut f32,
        ldvt: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgesvdx_(
        jobu: *const c_char,
        jobvt: *const c_char,
        range: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        ns: *mut lapack_int,
        S: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        VT: *mut __BindgenComplex<f64>,
        ldvt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgesvj_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        SVA: *mut f32,
        mv: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        cwork: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgesvj_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        SVA: *mut f64,
        mv: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgesvj_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        SVA: *mut f32,
        mv: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgesvj_(
        joba: *const c_char,
        jobu: *const c_char,
        jobv: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        SVA: *mut f64,
        mv: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        cwork: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgesvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgesvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        AF: *mut f64,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgesvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        AF: *mut f32,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgesvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgesvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgesvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        AF: *mut f64,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgesvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        AF: *mut f32,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f32,
        C: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgesvxx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        R: *mut f64,
        C: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgetf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgetf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgetf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgetf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgetrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgetrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgetrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgetrf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgetrf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgetrf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgetrf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgetrf2_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgetri_(
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgetri_(
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgetri_(
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgetri_(
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgetrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgetrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgetrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgetrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgetsls_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgetsls_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgetsls_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgetsls_(
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgetsqrhrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb1: *const lapack_int,
        nb1: *const lapack_int,
        nb2: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgetsqrhrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb1: *const lapack_int,
        nb1: *const lapack_int,
        nb2: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgetsqrhrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb1: *const lapack_int,
        nb1: *const lapack_int,
        nb2: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgetsqrhrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb1: *const lapack_int,
        nb1: *const lapack_int,
        nb2: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cggbak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        lscale: *const f32,
        rscale: *const f32,
        m: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dggbak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        lscale: *const f64,
        rscale: *const f64,
        m: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sggbak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        lscale: *const f32,
        rscale: *const f32,
        m: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zggbak_(
        job: *const c_char,
        side: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        lscale: *const f64,
        rscale: *const f64,
        m: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cggbal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f32,
        rscale: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dggbal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f64,
        rscale: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sggbal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f32,
        rscale: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zggbal_(
        job: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f64,
        rscale: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgges_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_C_SELECT2,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        VSL: *mut __BindgenComplex<f32>,
        ldvsl: *const lapack_int,
        VSR: *mut __BindgenComplex<f32>,
        ldvsr: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgges_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_D_SELECT3,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        VSL: *mut f64,
        ldvsl: *const lapack_int,
        VSR: *mut f64,
        ldvsr: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgges_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_S_SELECT3,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        VSL: *mut f32,
        ldvsl: *const lapack_int,
        VSR: *mut f32,
        ldvsr: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgges_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_Z_SELECT2,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        VSL: *mut __BindgenComplex<f64>,
        ldvsl: *const lapack_int,
        VSR: *mut __BindgenComplex<f64>,
        ldvsr: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgges3_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_C_SELECT2,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        VSL: *mut __BindgenComplex<f32>,
        ldvsl: *const lapack_int,
        VSR: *mut __BindgenComplex<f32>,
        ldvsr: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dgges3_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_D_SELECT3,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        VSL: *mut f64,
        ldvsl: *const lapack_int,
        VSR: *mut f64,
        ldvsr: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sgges3_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_S_SELECT3,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        VSL: *mut f32,
        ldvsl: *const lapack_int,
        VSR: *mut f32,
        ldvsr: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zgges3_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_Z_SELECT2,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        VSL: *mut __BindgenComplex<f64>,
        ldvsl: *const lapack_int,
        VSR: *mut __BindgenComplex<f64>,
        ldvsr: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cggesx_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_C_SELECT2,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        VSL: *mut __BindgenComplex<f32>,
        ldvsl: *const lapack_int,
        VSR: *mut __BindgenComplex<f32>,
        ldvsr: *const lapack_int,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn dggesx_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_D_SELECT3,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        VSL: *mut f64,
        ldvsl: *const lapack_int,
        VSR: *mut f64,
        ldvsr: *const lapack_int,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn sggesx_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_S_SELECT3,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        VSL: *mut f32,
        ldvsl: *const lapack_int,
        VSR: *mut f32,
        ldvsr: *const lapack_int,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn zggesx_(
        jobvsl: *const c_char,
        jobvsr: *const c_char,
        sort: *const c_char,
        selctg: LAPACK_Z_SELECT2,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        sdim: *mut lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        VSL: *mut __BindgenComplex<f64>,
        ldvsl: *const lapack_int,
        VSR: *mut __BindgenComplex<f64>,
        ldvsr: *const lapack_int,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn cggev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dggev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sggev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zggev_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cggev3_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dggev3_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sggev3_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zggev3_(
        jobvl: *const c_char,
        jobvr: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cggevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f32,
        rscale: *mut f32,
        abnrm: *mut f32,
        bbnrm: *mut f32,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn dggevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f64,
        rscale: *mut f64,
        abnrm: *mut f64,
        bbnrm: *mut f64,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn sggevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f32,
        rscale: *mut f32,
        abnrm: *mut f32,
        bbnrm: *mut f32,
        rconde: *mut f32,
        rcondv: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn zggevx_(
        balanc: *const c_char,
        jobvl: *const c_char,
        jobvr: *const c_char,
        sense: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        ilo: *mut lapack_int,
        ihi: *mut lapack_int,
        lscale: *mut f64,
        rscale: *mut f64,
        abnrm: *mut f64,
        bbnrm: *mut f64,
        rconde: *mut f64,
        rcondv: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        BWORK: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn cggglm_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        D: *mut __BindgenComplex<f32>,
        X: *mut __BindgenComplex<f32>,
        Y: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dggglm_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        D: *mut f64,
        X: *mut f64,
        Y: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sggglm_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        D: *mut f32,
        X: *mut f32,
        Y: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zggglm_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        D: *mut __BindgenComplex<f64>,
        X: *mut __BindgenComplex<f64>,
        Y: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgghd3_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgghd3_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgghd3_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgghd3_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgghrd_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgghrd_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        Z: *mut f64,
        ldz: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgghrd_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        Z: *mut f32,
        ldz: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgghrd_(
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgglse_(
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        D: *mut __BindgenComplex<f32>,
        X: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgglse_(
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        C: *mut f64,
        D: *mut f64,
        X: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgglse_(
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        C: *mut f32,
        D: *mut f32,
        X: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgglse_(
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        D: *mut __BindgenComplex<f64>,
        X: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cggqrf_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        taua: *mut __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        taub: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dggqrf_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        taua: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        taub: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sggqrf_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        taua: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        taub: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zggqrf_(
        n: *const lapack_int,
        m: *const lapack_int,
        p: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        taua: *mut __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        taub: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cggrqf_(
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        taua: *mut __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        taub: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dggrqf_(
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        taua: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        taub: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sggrqf_(
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        taua: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        taub: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zggrqf_(
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        taua: *mut __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        taub: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cggsvd_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        a: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        b: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        alpha: *mut f32,
        beta: *mut f32,
        u: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        v: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn sggsvd_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        a: *mut f32,
        lda: *const lapack_int,
        b: *mut f32,
        ldb: *const lapack_int,
        alpha: *mut f32,
        beta: *mut f32,
        u: *mut f32,
        ldu: *const lapack_int,
        v: *mut f32,
        ldv: *const lapack_int,
        q: *mut f32,
        ldq: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn dggsvd_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        a: *mut f64,
        lda: *const lapack_int,
        b: *mut f64,
        ldb: *const lapack_int,
        alpha: *mut f64,
        beta: *mut f64,
        u: *mut f64,
        ldu: *const lapack_int,
        v: *mut f64,
        ldv: *const lapack_int,
        q: *mut f64,
        ldq: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn zggsvd_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        a: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        b: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        alpha: *mut f64,
        beta: *mut f64,
        u: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        v: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn cggsvd3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        alpha: *mut f32,
        beta: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dggsvd3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        alpha: *mut f64,
        beta: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sggsvd3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        alpha: *mut f32,
        beta: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zggsvd3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        p: *const lapack_int,
        k: *mut lapack_int,
        l: *mut lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        alpha: *mut f64,
        beta: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sggsvp_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        a: *mut f32,
        lda: *const lapack_int,
        b: *mut f32,
        ldb: *const lapack_int,
        tola: *mut f32,
        tolb: *mut f32,
        k: *mut lapack_int,
        l: *mut lapack_int,
        u: *mut f32,
        ldu: *const lapack_int,
        v: *mut f32,
        ldv: *const lapack_int,
        q: *mut f32,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        tau: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn dggsvp_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        a: *mut f64,
        lda: *const lapack_int,
        b: *mut f64,
        ldb: *const lapack_int,
        tola: *mut f64,
        tolb: *mut f64,
        k: *mut lapack_int,
        l: *mut lapack_int,
        u: *mut f64,
        ldu: *const lapack_int,
        v: *mut f64,
        ldv: *const lapack_int,
        q: *mut f64,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        tau: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn cggsvp_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        a: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        b: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        tola: *mut f32,
        tolb: *mut f32,
        k: *mut lapack_int,
        l: *mut lapack_int,
        u: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        v: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        rwork: *mut f32,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn zggsvp_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        a: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        b: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        tola: *mut f64,
        tolb: *mut f64,
        k: *mut lapack_int,
        l: *mut lapack_int,
        u: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        v: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        rwork: *mut f64,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_int;
    pub fn cggsvp3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        tola: *const f32,
        tolb: *const f32,
        k: *mut lapack_int,
        l: *mut lapack_int,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        rwork: *mut f32,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dggsvp3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        tola: *const f64,
        tolb: *const f64,
        k: *mut lapack_int,
        l: *mut lapack_int,
        U: *mut f64,
        ldu: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sggsvp3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        tola: *const f32,
        tolb: *const f32,
        k: *mut lapack_int,
        l: *mut lapack_int,
        U: *mut f32,
        ldu: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zggsvp3_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        tola: *const f64,
        tolb: *const f64,
        k: *mut lapack_int,
        l: *mut lapack_int,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        iwork: *mut lapack_int,
        rwork: *mut f64,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cgtcon_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const __BindgenComplex<f32>,
        D: *const __BindgenComplex<f32>,
        DU: *const __BindgenComplex<f32>,
        DU2: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgtcon_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const f64,
        D: *const f64,
        DU: *const f64,
        DU2: *const f64,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgtcon_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const f32,
        D: *const f32,
        DU: *const f32,
        DU2: *const f32,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgtcon_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const __BindgenComplex<f64>,
        D: *const __BindgenComplex<f64>,
        DU: *const __BindgenComplex<f64>,
        DU2: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgtrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const __BindgenComplex<f32>,
        D: *const __BindgenComplex<f32>,
        DU: *const __BindgenComplex<f32>,
        DLF: *const __BindgenComplex<f32>,
        DF: *const __BindgenComplex<f32>,
        DUF: *const __BindgenComplex<f32>,
        DU2: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgtrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const f64,
        D: *const f64,
        DU: *const f64,
        DLF: *const f64,
        DF: *const f64,
        DUF: *const f64,
        DU2: *const f64,
        ipiv: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgtrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const f32,
        D: *const f32,
        DU: *const f32,
        DLF: *const f32,
        DF: *const f32,
        DUF: *const f32,
        DU2: *const f32,
        ipiv: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgtrfs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const __BindgenComplex<f64>,
        D: *const __BindgenComplex<f64>,
        DU: *const __BindgenComplex<f64>,
        DLF: *const __BindgenComplex<f64>,
        DF: *const __BindgenComplex<f64>,
        DUF: *const __BindgenComplex<f64>,
        DU2: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cgtsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *mut __BindgenComplex<f32>,
        D: *mut __BindgenComplex<f32>,
        DU: *mut __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgtsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *mut f64,
        D: *mut f64,
        DU: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgtsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *mut f32,
        D: *mut f32,
        DU: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgtsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *mut __BindgenComplex<f64>,
        D: *mut __BindgenComplex<f64>,
        DU: *mut __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgtsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const __BindgenComplex<f32>,
        D: *const __BindgenComplex<f32>,
        DU: *const __BindgenComplex<f32>,
        DLF: *mut __BindgenComplex<f32>,
        DF: *mut __BindgenComplex<f32>,
        DUF: *mut __BindgenComplex<f32>,
        DU2: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dgtsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const f64,
        D: *const f64,
        DU: *const f64,
        DLF: *mut f64,
        DF: *mut f64,
        DUF: *mut f64,
        DU2: *mut f64,
        ipiv: *mut lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sgtsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const f32,
        D: *const f32,
        DU: *const f32,
        DLF: *mut f32,
        DF: *mut f32,
        DUF: *mut f32,
        DU2: *mut f32,
        ipiv: *mut lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zgtsvx_(
        fact: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const __BindgenComplex<f64>,
        D: *const __BindgenComplex<f64>,
        DU: *const __BindgenComplex<f64>,
        DLF: *mut __BindgenComplex<f64>,
        DF: *mut __BindgenComplex<f64>,
        DUF: *mut __BindgenComplex<f64>,
        DU2: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cgttrf_(
        n: *const lapack_int,
        DL: *mut __BindgenComplex<f32>,
        D: *mut __BindgenComplex<f32>,
        DU: *mut __BindgenComplex<f32>,
        DU2: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dgttrf_(
        n: *const lapack_int,
        DL: *mut f64,
        D: *mut f64,
        DU: *mut f64,
        DU2: *mut f64,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sgttrf_(
        n: *const lapack_int,
        DL: *mut f32,
        D: *mut f32,
        DU: *mut f32,
        DU2: *mut f32,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zgttrf_(
        n: *const lapack_int,
        DL: *mut __BindgenComplex<f64>,
        D: *mut __BindgenComplex<f64>,
        DU: *mut __BindgenComplex<f64>,
        DU2: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cgttrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const __BindgenComplex<f32>,
        D: *const __BindgenComplex<f32>,
        DU: *const __BindgenComplex<f32>,
        DU2: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dgttrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const f64,
        D: *const f64,
        DU: *const f64,
        DU2: *const f64,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sgttrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const f32,
        D: *const f32,
        DU: *const f32,
        DU2: *const f32,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zgttrs_(
        trans: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        DL: *const __BindgenComplex<f64>,
        D: *const __BindgenComplex<f64>,
        DU: *const __BindgenComplex<f64>,
        DU2: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chbev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhbevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chbevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhbevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chbgst_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        BB: *const __BindgenComplex<f32>,
        ldbb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbgst_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        BB: *const __BindgenComplex<f64>,
        ldbb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbgv_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        BB: *mut __BindgenComplex<f32>,
        ldbb: *const lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbgv_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        BB: *mut __BindgenComplex<f64>,
        ldbb: *const lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbgvd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        BB: *mut __BindgenComplex<f32>,
        ldbb: *const lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbgvd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        BB: *mut __BindgenComplex<f64>,
        ldbb: *const lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chbgvx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        BB: *mut __BindgenComplex<f32>,
        ldbb: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhbgvx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        BB: *mut __BindgenComplex<f64>,
        ldbb: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chbtrd_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhbtrd_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn checon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhecon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn checon_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhecon_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cheequb_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zheequb_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cheev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zheev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cheev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zheev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cheevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zheevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cheevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zheevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cheevr_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zheevr_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cheevr_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zheevr_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cheevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zheevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cheevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zheevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chegst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhegst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chegv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhegv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chegv_2stage_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhegv_2stage_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chegvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        W: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhegvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        W: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chegvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhegvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cherfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zherfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cherfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        S: *const f32,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zherfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        S: *const f64,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chesv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhesv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chesv_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhesv_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chesv_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f32>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhesv_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f64>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chesv_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhesv_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chesv_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhesv_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chesvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhesvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chesvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhesvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cheswapr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        i1: *const lapack_int,
        i2: *const lapack_int,
        arg1: usize,
    );
    pub fn zheswapr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        i1: *const lapack_int,
        i2: *const lapack_int,
        arg1: usize,
    );
    pub fn chetrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrd_2stage_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        tau: *mut __BindgenComplex<f32>,
        HOUS2: *mut __BindgenComplex<f32>,
        lhous2: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhetrd_2stage_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        tau: *mut __BindgenComplex<f64>,
        HOUS2: *mut __BindgenComplex<f64>,
        lhous2: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chetrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrf_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrf_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrf_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f32>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrf_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f64>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrf_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrf_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrf_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrf_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetri2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetri2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetri2x_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        nb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetri2x_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        nb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetri_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetri_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrs2_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrs2_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrs_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrs_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrs_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrs_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrs_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f32>,
        ltb: *const lapack_int,
        ipiv: *const lapack_int,
        ipiv2: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrs_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f64>,
        ltb: *const lapack_int,
        ipiv: *const lapack_int,
        ipiv2: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chetrs_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhetrs_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chfrk_(
        transr: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        alpha: *const f32,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        beta: *const f32,
        C: *mut __BindgenComplex<f32>,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhfrk_(
        transr: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        alpha: *const f64,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        beta: *const f64,
        C: *mut __BindgenComplex<f64>,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chgeqz_(
        job: *const c_char,
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut __BindgenComplex<f32>,
        ldh: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dhgeqz_(
        job: *const c_char,
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut f64,
        ldh: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        Q: *mut f64,
        ldq: *const lapack_int,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn shgeqz_(
        job: *const c_char,
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut f32,
        ldh: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        Q: *mut f32,
        ldq: *const lapack_int,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhgeqz_(
        job: *const c_char,
        compq: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut __BindgenComplex<f64>,
        ldh: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chpcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhpcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chpev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhpev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chpevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhpevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chpevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhpevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chpgst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        BP: *const __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhpgst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        BP: *const __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chpgv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        BP: *mut __BindgenComplex<f32>,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhpgv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        BP: *mut __BindgenComplex<f64>,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chpgvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        BP: *mut __BindgenComplex<f32>,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhpgvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        BP: *mut __BindgenComplex<f64>,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chpgvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        BP: *mut __BindgenComplex<f32>,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhpgvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        BP: *mut __BindgenComplex<f64>,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        AFP: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        AFP: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chpsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhpsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chpsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        AFP: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhpsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        AFP: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn chptrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        D: *mut f32,
        E: *mut f32,
        tau: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhptrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        D: *mut f64,
        E: *mut f64,
        tau: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zhptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn chsein_(
        side: *const c_char,
        eigsrc: *const c_char,
        initv: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        H: *const __BindgenComplex<f32>,
        ldh: *const lapack_int,
        W: *mut __BindgenComplex<f32>,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        IFAILL: *mut lapack_int,
        IFAILR: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dhsein_(
        side: *const c_char,
        eigsrc: *const c_char,
        initv: *const c_char,
        select: *mut lapack_int,
        n: *const lapack_int,
        H: *const f64,
        ldh: *const lapack_int,
        WR: *mut f64,
        WI: *const f64,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f64,
        IFAILL: *mut lapack_int,
        IFAILR: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn shsein_(
        side: *const c_char,
        eigsrc: *const c_char,
        initv: *const c_char,
        select: *mut lapack_int,
        n: *const lapack_int,
        H: *const f32,
        ldh: *const lapack_int,
        WR: *mut f32,
        WI: *const f32,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f32,
        IFAILL: *mut lapack_int,
        IFAILR: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zhsein_(
        side: *const c_char,
        eigsrc: *const c_char,
        initv: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        H: *const __BindgenComplex<f64>,
        ldh: *const lapack_int,
        W: *mut __BindgenComplex<f64>,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        IFAILL: *mut lapack_int,
        IFAILR: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn chseqr_(
        job: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut __BindgenComplex<f32>,
        ldh: *const lapack_int,
        W: *mut __BindgenComplex<f32>,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dhseqr_(
        job: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut f64,
        ldh: *const lapack_int,
        WR: *mut f64,
        WI: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn shseqr_(
        job: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut f32,
        ldh: *const lapack_int,
        WR: *mut f32,
        WI: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zhseqr_(
        job: *const c_char,
        compz: *const c_char,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        H: *mut __BindgenComplex<f64>,
        ldh: *const lapack_int,
        W: *mut __BindgenComplex<f64>,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn clacgv_(n: *const lapack_int, X: *mut __BindgenComplex<f32>, incx: *const lapack_int);
    pub fn zlacgv_(n: *const lapack_int, X: *mut __BindgenComplex<f64>, incx: *const lapack_int);
    pub fn clacn2_(
        n: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        X: *mut __BindgenComplex<f32>,
        est: *mut f32,
        kase: *mut lapack_int,
        ISAVE: *mut lapack_int,
    );
    pub fn dlacn2_(
        n: *const lapack_int,
        V: *mut f64,
        X: *mut f64,
        ISGN: *mut lapack_int,
        est: *mut f64,
        kase: *mut lapack_int,
        ISAVE: *mut lapack_int,
    );
    pub fn slacn2_(
        n: *const lapack_int,
        V: *mut f32,
        X: *mut f32,
        ISGN: *mut lapack_int,
        est: *mut f32,
        kase: *mut lapack_int,
        ISAVE: *mut lapack_int,
    );
    pub fn zlacn2_(
        n: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        X: *mut __BindgenComplex<f64>,
        est: *mut f64,
        kase: *mut lapack_int,
        ISAVE: *mut lapack_int,
    );
    pub fn clacp2_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        arg1: usize,
    );
    pub fn zlacp2_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        arg1: usize,
    );
    pub fn clacpy_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        arg1: usize,
    );
    pub fn dlacpy_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        arg1: usize,
    );
    pub fn slacpy_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        arg1: usize,
    );
    pub fn zlacpy_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        arg1: usize,
    );
    pub fn clacrm_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        rwork: *mut f32,
    );
    pub fn zlacrm_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        rwork: *mut f64,
    );
    pub fn zlag2c_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        SA: *mut __BindgenComplex<f32>,
        ldsa: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn slag2d_(
        m: *const lapack_int,
        n: *const lapack_int,
        SA: *const f32,
        ldsa: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dlag2s_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        SA: *mut f32,
        ldsa: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn clag2z_(
        m: *const lapack_int,
        n: *const lapack_int,
        SA: *const __BindgenComplex<f32>,
        ldsa: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn clagge_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        D: *const f32,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dlagge_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        D: *const f64,
        A: *mut f64,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn slagge_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        D: *const f32,
        A: *mut f32,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zlagge_(
        m: *const lapack_int,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        D: *const f64,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn claghe_(
        n: *const lapack_int,
        k: *const lapack_int,
        D: *const f32,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn zlaghe_(
        n: *const lapack_int,
        k: *const lapack_int,
        D: *const f64,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn clagsy_(
        n: *const lapack_int,
        k: *const lapack_int,
        D: *const f32,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dlagsy_(
        n: *const lapack_int,
        k: *const lapack_int,
        D: *const f64,
        A: *mut f64,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn slagsy_(
        n: *const lapack_int,
        k: *const lapack_int,
        D: *const f32,
        A: *mut f32,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zlagsy_(
        n: *const lapack_int,
        k: *const lapack_int,
        D: *const f64,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        iseed: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn dlamch_(cmach: *const c_char, arg1: usize) -> f64;
    pub fn slamch_(cmach: *const c_char, arg1: usize) -> lapack_float_return;
    pub fn clangb_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn dlangb_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    ) -> f64;
    pub fn slangb_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn zlangb_(
        norm: *const c_char,
        n: *const lapack_int,
        kl: *const lapack_int,
        ku: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    ) -> f64;
    pub fn clange_(
        norm: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn dlange_(
        norm: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    ) -> f64;
    pub fn slange_(
        norm: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn zlange_(
        norm: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    ) -> f64;
    pub fn clangt_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const __BindgenComplex<f32>,
        D: *const __BindgenComplex<f32>,
        DU: *const __BindgenComplex<f32>,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn dlangt_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const f64,
        D: *const f64,
        DU: *const f64,
        arg1: usize,
    ) -> f64;
    pub fn slangt_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const f32,
        D: *const f32,
        DU: *const f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn zlangt_(
        norm: *const c_char,
        n: *const lapack_int,
        DL: *const __BindgenComplex<f64>,
        D: *const __BindgenComplex<f64>,
        DU: *const __BindgenComplex<f64>,
        arg1: usize,
    ) -> f64;
    pub fn clanhb_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn zlanhb_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn clanhe_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn zlanhe_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn clanhp_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn zlanhp_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn clanhs_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn dlanhs_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    ) -> f64;
    pub fn slanhs_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn zlanhs_(
        norm: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    ) -> f64;
    pub fn clanht_(
        norm: *const c_char,
        n: *const lapack_int,
        D: *const f32,
        E: *const __BindgenComplex<f32>,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn zlanht_(
        norm: *const c_char,
        n: *const lapack_int,
        D: *const f64,
        E: *const __BindgenComplex<f64>,
        arg1: usize,
    ) -> f64;
    pub fn clansb_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn dlansb_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn slansb_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn zlansb_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn clansp_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn dlansp_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn slansp_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn zlansp_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn dlanst_(
        norm: *const c_char,
        n: *const lapack_int,
        D: *const f64,
        E: *const f64,
        arg1: usize,
    ) -> f64;
    pub fn slanst_(
        norm: *const c_char,
        n: *const lapack_int,
        D: *const f32,
        E: *const f32,
        arg1: usize,
    ) -> lapack_float_return;
    pub fn clansy_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn dlansy_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn slansy_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
    ) -> lapack_float_return;
    pub fn zlansy_(
        norm: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
    ) -> f64;
    pub fn clantb_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_float_return;
    pub fn dlantb_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> f64;
    pub fn slantb_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_float_return;
    pub fn zlantb_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> f64;
    pub fn clantp_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_float_return;
    pub fn dlantp_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> f64;
    pub fn slantp_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_float_return;
    pub fn zlantp_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> f64;
    pub fn clantr_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_float_return;
    pub fn dlantr_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> f64;
    pub fn slantr_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        work: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> lapack_float_return;
    pub fn zlantr_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        work: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    ) -> f64;
    pub fn clapmr_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn dlapmr_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn slapmr_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn zlapmr_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn clapmt_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn dlapmt_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn slapmt_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn zlapmt_(
        forwrd: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        K: *mut lapack_int,
    );
    pub fn dlapy2_(x: *const f64, y: *const f64) -> f64;
    pub fn slapy2_(x: *const f32, y: *const f32) -> lapack_float_return;
    pub fn dlapy3_(x: *const f64, y: *const f64, z: *const f64) -> f64;
    pub fn slapy3_(x: *const f32, y: *const f32, z: *const f32) -> lapack_float_return;
    pub fn clarcm_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        rwork: *mut f32,
    );
    pub fn zlarcm_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        rwork: *mut f64,
    );
    pub fn clarf_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        incv: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        arg1: usize,
    );
    pub fn dlarf_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const f64,
        incv: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    );
    pub fn slarf_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const f32,
        incv: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    );
    pub fn zlarf_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        incv: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        arg1: usize,
    );
    pub fn clarfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn dlarfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const f64,
        ldv: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn slarfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const f32,
        ldv: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn zlarfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn clarfg_(
        n: *const lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        X: *mut __BindgenComplex<f32>,
        incx: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
    );
    pub fn dlarfg_(
        n: *const lapack_int,
        alpha: *mut f64,
        X: *mut f64,
        incx: *const lapack_int,
        tau: *mut f64,
    );
    pub fn slarfg_(
        n: *const lapack_int,
        alpha: *mut f32,
        X: *mut f32,
        incx: *const lapack_int,
        tau: *mut f32,
    );
    pub fn zlarfg_(
        n: *const lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        X: *mut __BindgenComplex<f64>,
        incx: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
    );
    pub fn clarft_(
        direct: *const c_char,
        storev: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        ldv: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dlarft_(
        direct: *const c_char,
        storev: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const f64,
        ldv: *const lapack_int,
        tau: *const f64,
        T: *mut f64,
        ldt: *const lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn slarft_(
        direct: *const c_char,
        storev: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const f32,
        ldv: *const lapack_int,
        tau: *const f32,
        T: *mut f32,
        ldt: *const lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zlarft_(
        direct: *const c_char,
        storev: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        ldv: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn clarfx_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        arg1: usize,
    );
    pub fn dlarfx_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const f64,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        arg1: usize,
    );
    pub fn slarfx_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const f32,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        arg1: usize,
    );
    pub fn zlarfx_(
        side: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        arg1: usize,
    );
    pub fn clarnv_(
        idist: *const lapack_int,
        iseed: *mut lapack_int,
        n: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
    );
    pub fn dlarnv_(
        idist: *const lapack_int,
        iseed: *mut lapack_int,
        n: *const lapack_int,
        X: *mut f64,
    );
    pub fn slarnv_(
        idist: *const lapack_int,
        iseed: *mut lapack_int,
        n: *const lapack_int,
        X: *mut f32,
    );
    pub fn zlarnv_(
        idist: *const lapack_int,
        iseed: *mut lapack_int,
        n: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
    );
    pub fn dlartgp_(f: *const f64, g: *const f64, cs: *mut f64, sn: *mut f64, r: *mut f64);
    pub fn slartgp_(f: *const f32, g: *const f32, cs: *mut f32, sn: *mut f32, r: *mut f32);
    pub fn dlartgs_(x: *const f64, y: *const f64, sigma: *const f64, cs: *mut f64, sn: *mut f64);
    pub fn slartgs_(x: *const f32, y: *const f32, sigma: *const f32, cs: *mut f32, sn: *mut f32);
    pub fn clascl_(
        type_: *const c_char,
        kl: *const lapack_int,
        ku: *const lapack_int,
        cfrom: *const f32,
        cto: *const f32,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dlascl_(
        type_: *const c_char,
        kl: *const lapack_int,
        ku: *const lapack_int,
        cfrom: *const f64,
        cto: *const f64,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn slascl_(
        type_: *const c_char,
        kl: *const lapack_int,
        ku: *const lapack_int,
        cfrom: *const f32,
        cto: *const f32,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zlascl_(
        type_: *const c_char,
        kl: *const lapack_int,
        ku: *const lapack_int,
        cfrom: *const f64,
        cto: *const f64,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn claset_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const __BindgenComplex<f32>,
        beta: *const __BindgenComplex<f32>,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        arg1: usize,
    );
    pub fn dlaset_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const f64,
        beta: *const f64,
        A: *mut f64,
        lda: *const lapack_int,
        arg1: usize,
    );
    pub fn slaset_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const f32,
        beta: *const f32,
        A: *mut f32,
        lda: *const lapack_int,
        arg1: usize,
    );
    pub fn zlaset_(
        uplo: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const __BindgenComplex<f64>,
        beta: *const __BindgenComplex<f64>,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        arg1: usize,
    );
    pub fn dlasrt_(
        id: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn slasrt_(
        id: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn classq_(
        n: *const lapack_int,
        X: *const __BindgenComplex<f32>,
        incx: *const lapack_int,
        scale: *mut f32,
        sumsq: *mut f32,
    );
    pub fn dlassq_(
        n: *const lapack_int,
        X: *const f64,
        incx: *const lapack_int,
        scale: *mut f64,
        sumsq: *mut f64,
    );
    pub fn slassq_(
        n: *const lapack_int,
        X: *const f32,
        incx: *const lapack_int,
        scale: *mut f32,
        sumsq: *mut f32,
    );
    pub fn zlassq_(
        n: *const lapack_int,
        X: *const __BindgenComplex<f64>,
        incx: *const lapack_int,
        scale: *mut f64,
        sumsq: *mut f64,
    );
    pub fn claswp_(
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        k1: *const lapack_int,
        k2: *const lapack_int,
        ipiv: *const lapack_int,
        incx: *const lapack_int,
    );
    pub fn dlaswp_(
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        k1: *const lapack_int,
        k2: *const lapack_int,
        ipiv: *const lapack_int,
        incx: *const lapack_int,
    );
    pub fn slaswp_(
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        k1: *const lapack_int,
        k2: *const lapack_int,
        ipiv: *const lapack_int,
        incx: *const lapack_int,
    );
    pub fn zlaswp_(
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        k1: *const lapack_int,
        k2: *const lapack_int,
        ipiv: *const lapack_int,
        incx: *const lapack_int,
    );
    pub fn clatms_(
        m: *const lapack_int,
        n: *const lapack_int,
        dist: *const c_char,
        iseed: *mut lapack_int,
        sym: *const c_char,
        D: *mut f32,
        mode: *const lapack_int,
        cond: *const f32,
        dmax: *const f32,
        kl: *const lapack_int,
        ku: *const lapack_int,
        pack: *const c_char,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dlatms_(
        m: *const lapack_int,
        n: *const lapack_int,
        dist: *const c_char,
        iseed: *mut lapack_int,
        sym: *const c_char,
        D: *mut f64,
        mode: *const lapack_int,
        cond: *const f64,
        dmax: *const f64,
        kl: *const lapack_int,
        ku: *const lapack_int,
        pack: *const c_char,
        A: *mut f64,
        lda: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn slatms_(
        m: *const lapack_int,
        n: *const lapack_int,
        dist: *const c_char,
        iseed: *mut lapack_int,
        sym: *const c_char,
        D: *mut f32,
        mode: *const lapack_int,
        cond: *const f32,
        dmax: *const f32,
        kl: *const lapack_int,
        ku: *const lapack_int,
        pack: *const c_char,
        A: *mut f32,
        lda: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zlatms_(
        m: *const lapack_int,
        n: *const lapack_int,
        dist: *const c_char,
        iseed: *mut lapack_int,
        sym: *const c_char,
        D: *mut f64,
        mode: *const lapack_int,
        cond: *const f64,
        dmax: *const f64,
        kl: *const lapack_int,
        ku: *const lapack_int,
        pack: *const c_char,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn clauum_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dlauum_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn slauum_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zlauum_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ilaver_(
        vers_major: *mut lapack_int,
        vers_minor: *mut lapack_int,
        vers_patch: *mut lapack_int,
    );
    pub fn dopgtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        tau: *const f64,
        Q: *mut f64,
        ldq: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sopgtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        tau: *const f32,
        Q: *mut f32,
        ldq: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dopmtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        AP: *const f64,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sopmtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        AP: *const f32,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dorbdb_(
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut f64,
        ldx11: *const lapack_int,
        X12: *mut f64,
        ldx12: *const lapack_int,
        X21: *mut f64,
        ldx21: *const lapack_int,
        X22: *mut f64,
        ldx22: *const lapack_int,
        theta: *mut f64,
        phi: *mut f64,
        TAUP1: *mut f64,
        TAUP2: *mut f64,
        TAUQ1: *mut f64,
        TAUQ2: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sorbdb_(
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut f32,
        ldx11: *const lapack_int,
        X12: *mut f32,
        ldx12: *const lapack_int,
        X21: *mut f32,
        ldx21: *const lapack_int,
        X22: *mut f32,
        ldx22: *const lapack_int,
        theta: *mut f32,
        phi: *mut f32,
        TAUP1: *mut f32,
        TAUP2: *mut f32,
        TAUQ1: *mut f32,
        TAUQ2: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dorcsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut f64,
        ldx11: *const lapack_int,
        X12: *mut f64,
        ldx12: *const lapack_int,
        X21: *mut f64,
        ldx21: *const lapack_int,
        X22: *mut f64,
        ldx22: *const lapack_int,
        theta: *mut f64,
        U1: *mut f64,
        ldu1: *const lapack_int,
        U2: *mut f64,
        ldu2: *const lapack_int,
        V1T: *mut f64,
        ldv1t: *const lapack_int,
        V2T: *mut f64,
        ldv2t: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn sorcsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut f32,
        ldx11: *const lapack_int,
        X12: *mut f32,
        ldx12: *const lapack_int,
        X21: *mut f32,
        ldx21: *const lapack_int,
        X22: *mut f32,
        ldx22: *const lapack_int,
        theta: *mut f32,
        U1: *mut f32,
        ldu1: *const lapack_int,
        U2: *mut f32,
        ldu2: *const lapack_int,
        V1T: *mut f32,
        ldv1t: *const lapack_int,
        V2T: *mut f32,
        ldv2t: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn dorcsd2by1_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut f64,
        ldx11: *const lapack_int,
        X21: *mut f64,
        ldx21: *const lapack_int,
        theta: *mut f64,
        U1: *mut f64,
        ldu1: *const lapack_int,
        U2: *mut f64,
        ldu2: *const lapack_int,
        V1T: *mut f64,
        ldv1t: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sorcsd2by1_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut f32,
        ldx11: *const lapack_int,
        X21: *mut f32,
        ldx21: *const lapack_int,
        theta: *mut f32,
        U1: *mut f32,
        ldu1: *const lapack_int,
        U2: *mut f32,
        ldu2: *const lapack_int,
        V1T: *mut f32,
        ldv1t: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dorgbr_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sorgbr_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dorghr_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sorghr_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dorglq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sorglq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dorgql_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sorgql_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dorgqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sorgqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dorgrq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sorgrq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dorgtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *const f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sorgtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *const f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dorgtsqr_row_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sorgtsqr_row_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dorhr_col_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        D: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sorhr_col_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        D: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dormbr_(
        vect: *const c_char,
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sormbr_(
        vect: *const c_char,
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dormhr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sormhr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dormlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sormlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dormql_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sormql_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dormqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sormqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dormrq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sormrq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dormrz_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sormrz_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dormtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        tau: *const f64,
        C: *mut f64,
        ldc: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sormtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        tau: *const f32,
        C: *mut f32,
        ldc: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cpbcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpbequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpbrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        AFB: *const __BindgenComplex<f32>,
        ldafb: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        AFB: *const f64,
        ldafb: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        AFB: *const f32,
        ldafb: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        AFB: *const __BindgenComplex<f64>,
        ldafb: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpbstf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbstf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbstf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbstf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpbsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpbsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        AFB: *mut __BindgenComplex<f32>,
        ldafb: *const lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dpbsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        AFB: *mut f64,
        ldafb: *const lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn spbsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        AFB: *mut f32,
        ldafb: *const lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zpbsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        AFB: *mut __BindgenComplex<f64>,
        ldafb: *const lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cpbtrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f32>,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbtrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbtrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbtrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut __BindgenComplex<f64>,
        ldab: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpbtrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpbtrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spbtrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpbtrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpftrf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dpftrf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn spftrf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zpftrf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cpftri_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dpftri_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn spftri_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zpftri_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cpftrs_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dpftrs_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn spftrs_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zpftrs_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cpocon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpocon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spocon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpocon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpoequ_(
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dpoequ_(
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn spoequ_(
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zpoequ_(
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cpoequb_(
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dpoequb_(
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn spoequb_(
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zpoequb_(
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cporfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dporfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *const f64,
        ldaf: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sporfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *const f32,
        ldaf: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zporfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cporfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        S: *const f32,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dporfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *const f64,
        ldaf: *const lapack_int,
        S: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sporfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *const f32,
        ldaf: *const lapack_int,
        S: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zporfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        S: *const f64,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cposv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dposv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sposv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zposv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsposv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        work: *mut f64,
        swork: *mut f32,
        iter: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zcposv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        swork: *mut __BindgenComplex<f32>,
        rwork: *mut f64,
        iter: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cposvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dposvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        AF: *mut f64,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sposvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        AF: *mut f32,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zposvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cposvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dposvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        AF: *mut f64,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sposvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        AF: *mut f32,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zposvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cpotf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpotf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spotf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpotf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpotrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpotrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spotrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpotrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpotrf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpotrf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spotrf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpotrf2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpotri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpotri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spotri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpotri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpotrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpotrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spotrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpotrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cppcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dppcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sppcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zppcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cppequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dppequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sppequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zppequ_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        AFP: *const __BindgenComplex<f32>,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        AFP: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        AFP: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        AFP: *const __BindgenComplex<f64>,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cppsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dppsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sppsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zppsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cppsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        AFP: *mut __BindgenComplex<f32>,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dppsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut f64,
        AFP: *mut f64,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sppsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut f32,
        AFP: *mut f32,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zppsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        AFP: *mut __BindgenComplex<f64>,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cpptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpstrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        piv: *mut lapack_int,
        rank: *mut lapack_int,
        tol: *const f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpstrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        piv: *mut lapack_int,
        rank: *mut lapack_int,
        tol: *const f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spstrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        piv: *mut lapack_int,
        rank: *mut lapack_int,
        tol: *const f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpstrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        piv: *mut lapack_int,
        rank: *mut lapack_int,
        tol: *const f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cptcon_(
        n: *const lapack_int,
        D: *const f32,
        E: *const __BindgenComplex<f32>,
        anorm: *const f32,
        rcond: *mut f32,
        rwork: *mut f32,
        info: *mut lapack_int,
    );
    pub fn dptcon_(
        n: *const lapack_int,
        D: *const f64,
        E: *const f64,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sptcon_(
        n: *const lapack_int,
        D: *const f32,
        E: *const f32,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zptcon_(
        n: *const lapack_int,
        D: *const f64,
        E: *const __BindgenComplex<f64>,
        anorm: *const f64,
        rcond: *mut f64,
        rwork: *mut f64,
        info: *mut lapack_int,
    );
    pub fn cpteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn spteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zpteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cptrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f32,
        E: *const __BindgenComplex<f32>,
        DF: *const f32,
        EF: *const __BindgenComplex<f32>,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dptrfs_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f64,
        E: *const f64,
        DF: *const f64,
        EF: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn sptrfs_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f32,
        E: *const f32,
        DF: *const f32,
        EF: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn zptrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f64,
        E: *const __BindgenComplex<f64>,
        DF: *const f64,
        EF: *const __BindgenComplex<f64>,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cptsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *mut f32,
        E: *mut __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dptsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn sptsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zptsv_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *mut f64,
        E: *mut __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cptsvx_(
        fact: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f32,
        E: *const __BindgenComplex<f32>,
        DF: *mut f32,
        EF: *mut __BindgenComplex<f32>,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dptsvx_(
        fact: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f64,
        E: *const f64,
        DF: *mut f64,
        EF: *mut f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sptsvx_(
        fact: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f32,
        E: *const f32,
        DF: *mut f32,
        EF: *mut f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zptsvx_(
        fact: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f64,
        E: *const __BindgenComplex<f64>,
        DF: *mut f64,
        EF: *mut __BindgenComplex<f64>,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cpttrf_(
        n: *const lapack_int,
        D: *mut f32,
        E: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dpttrf_(n: *const lapack_int, D: *mut f64, E: *mut f64, info: *mut lapack_int);
    pub fn spttrf_(n: *const lapack_int, D: *mut f32, E: *mut f32, info: *mut lapack_int);
    pub fn zpttrf_(
        n: *const lapack_int,
        D: *mut f64,
        E: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cpttrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f32,
        E: *const __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dpttrs_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f64,
        E: *const f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn spttrs_(
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f32,
        E: *const f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zpttrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        D: *const f64,
        E: *const __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsbev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssbevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsbevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssbevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsbgst_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        BB: *const f64,
        ldbb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbgst_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        BB: *const f32,
        ldbb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbgv_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        BB: *mut f64,
        ldbb: *const lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbgv_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        BB: *mut f32,
        ldbb: *const lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbgvd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        BB: *mut f64,
        ldbb: *const lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbgvd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        BB: *mut f32,
        ldbb: *const lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsbgvx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        BB: *mut f64,
        ldbb: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssbgvx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ka: *const lapack_int,
        kb: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        BB: *mut f32,
        ldbb: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsbtrd_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f64,
        ldab: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Q: *mut f64,
        ldq: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssbtrd_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *mut f32,
        ldab: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Q: *mut f32,
        ldq: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsfrk_(
        transr: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        alpha: *const f64,
        A: *const f64,
        lda: *const lapack_int,
        beta: *const f64,
        C: *mut f64,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssfrk_(
        transr: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        n: *const lapack_int,
        k: *const lapack_int,
        alpha: *const f32,
        A: *const f32,
        lda: *const lapack_int,
        beta: *const f32,
        C: *mut f32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cspcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dspcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sspcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zspcon_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dspev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sspev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dspevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sspevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dspevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sspevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dspgst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        BP: *const f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sspgst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        BP: *const f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dspgv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        BP: *mut f64,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sspgv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        BP: *mut f32,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dspgvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        BP: *mut f64,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sspgvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        BP: *mut f32,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dspgvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        BP: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn sspgvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        BP: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn csprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        AFP: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        AFP: *const f64,
        ipiv: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        AFP: *const f32,
        ipiv: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsprfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        AFP: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cspsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dspsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut f64,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sspsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut f32,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zspsv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cspsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        AFP: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dspsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        AFP: *mut f64,
        ipiv: *mut lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sspsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        AFP: *mut f32,
        ipiv: *mut lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zspsvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        AFP: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsptrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        D: *mut f64,
        E: *mut f64,
        tau: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssptrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        D: *mut f32,
        E: *mut f32,
        tau: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsptrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        ipiv: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        ipiv: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsptri_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsptrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dstebz_(
        range: *const c_char,
        order: *const c_char,
        n: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        D: *const f64,
        E: *const f64,
        m: *mut lapack_int,
        nsplit: *mut lapack_int,
        W: *mut f64,
        IBLOCK: *mut lapack_int,
        ISPLIT: *mut lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sstebz_(
        range: *const c_char,
        order: *const c_char,
        n: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        D: *const f32,
        E: *const f32,
        m: *mut lapack_int,
        nsplit: *mut lapack_int,
        W: *mut f32,
        IBLOCK: *mut lapack_int,
        ISPLIT: *mut lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cstedc_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dstedc_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sstedc_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zstedc_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cstegr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dstegr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sstegr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zstegr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cstein_(
        n: *const lapack_int,
        D: *const f32,
        E: *const f32,
        m: *const lapack_int,
        W: *const f32,
        IBLOCK: *const lapack_int,
        ISPLIT: *const lapack_int,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dstein_(
        n: *const lapack_int,
        D: *const f64,
        E: *const f64,
        m: *const lapack_int,
        W: *const f64,
        IBLOCK: *const lapack_int,
        ISPLIT: *const lapack_int,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn sstein_(
        n: *const lapack_int,
        D: *const f32,
        E: *const f32,
        m: *const lapack_int,
        W: *const f32,
        IBLOCK: *const lapack_int,
        ISPLIT: *const lapack_int,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn zstein_(
        n: *const lapack_int,
        D: *const f64,
        E: *const f64,
        m: *const lapack_int,
        W: *const f64,
        IBLOCK: *const lapack_int,
        ISPLIT: *const lapack_int,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn cstemr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        nzc: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        tryrac: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dstemr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        nzc: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        tryrac: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sstemr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        nzc: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        tryrac: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zstemr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        nzc: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        tryrac: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn csteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsteqr_(
        compz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsterf_(n: *const lapack_int, D: *mut f64, E: *mut f64, info: *mut lapack_int);
    pub fn ssterf_(n: *const lapack_int, D: *mut f32, E: *mut f32, info: *mut lapack_int);
    pub fn dstev_(
        jobz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sstev_(
        jobz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dstevd_(
        jobz: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn sstevd_(
        jobz: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dstevr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sstevr_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dstevx_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn sstevx_(
        jobz: *const c_char,
        range: *const c_char,
        n: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn csycon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsycon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssycon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsycon_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csycon_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsycon_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        E: *const f64,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssycon_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        E: *const f32,
        ipiv: *const lapack_int,
        anorm: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsycon_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        anorm: *const f64,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csyconv_(
        uplo: *const c_char,
        way: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        E: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsyconv_(
        uplo: *const c_char,
        way: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        E: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssyconv_(
        uplo: *const c_char,
        way: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        E: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zsyconv_(
        uplo: *const c_char,
        way: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        E: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn csyequb_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsyequb_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssyequb_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        S: *mut f32,
        scond: *mut f32,
        amax: *mut f32,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsyequb_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        S: *mut f64,
        scond: *mut f64,
        amax: *mut f64,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsyev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssyev_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsyev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssyev_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsyevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssyevd_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsyevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssyevd_2stage_(
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsyevr_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssyevr_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsyevr_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssyevr_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        ISUPPZ: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsyevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssyevx_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsyevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssyevx_2stage_(
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsygst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssygst_(
        itype: *const lapack_int,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsygv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssygv_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsygv_2stage_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssygv_2stage_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsygvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        W: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssygvd_(
        itype: *const lapack_int,
        jobz: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        W: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsygvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        vl: *const f64,
        vu: *const f64,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f64,
        m: *mut lapack_int,
        W: *mut f64,
        Z: *mut f64,
        ldz: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssygvx_(
        itype: *const lapack_int,
        jobz: *const c_char,
        range: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        vl: *const f32,
        vu: *const f32,
        il: *const lapack_int,
        iu: *const lapack_int,
        abstol: *const f32,
        m: *mut lapack_int,
        W: *mut f32,
        Z: *mut f32,
        ldz: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        IFAIL: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn csyr_(
        uplo: *const c_char,
        n: *const lapack_int,
        alpha: *const __BindgenComplex<f32>,
        X: *const __BindgenComplex<f32>,
        incx: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        arg1: usize,
    );
    pub fn zsyr_(
        uplo: *const c_char,
        n: *const lapack_int,
        alpha: *const __BindgenComplex<f64>,
        X: *const __BindgenComplex<f64>,
        incx: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        arg1: usize,
    );
    pub fn csyrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsyrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *const f64,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssyrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *const f32,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsyrfs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csyrfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        S: *const f32,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsyrfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *const f64,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        S: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssyrfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *const f32,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        S: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zsyrfsx_(
        uplo: *const c_char,
        equed: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *const __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *const lapack_int,
        S: *const f64,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn csysv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsysv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssysv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsysv_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csysv_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsysv_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssysv_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsysv_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csysv_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f32>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsysv_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        TB: *mut f64,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssysv_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        TB: *mut f32,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsysv_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f64>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csysv_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsysv_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        E: *mut f64,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssysv_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        E: *mut f32,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsysv_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csysv_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsysv_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssysv_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsysv_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csysvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dsysvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AF: *mut f64,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssysvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AF: *mut f32,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zsysvx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn csysvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f32>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f32>,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dsysvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        AF: *mut f64,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut f64,
        ldb: *const lapack_int,
        X: *mut f64,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ssysvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        AF: *mut f32,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        S: *mut f32,
        B: *mut f32,
        ldb: *const lapack_int,
        X: *mut f32,
        ldx: *const lapack_int,
        rcond: *mut f32,
        rpvgrw: *mut f32,
        berr: *mut f32,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f32,
        err_bnds_comp: *mut f32,
        nparams: *const lapack_int,
        params: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zsysvxx_(
        fact: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        AF: *mut __BindgenComplex<f64>,
        ldaf: *const lapack_int,
        ipiv: *mut lapack_int,
        equed: *mut c_char,
        S: *mut f64,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *mut __BindgenComplex<f64>,
        ldx: *const lapack_int,
        rcond: *mut f64,
        rpvgrw: *mut f64,
        berr: *mut f64,
        n_err_bnds: *const lapack_int,
        err_bnds_norm: *mut f64,
        err_bnds_comp: *mut f64,
        nparams: *const lapack_int,
        params: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn csyswapr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        i1: *const lapack_int,
        i2: *const lapack_int,
        arg1: usize,
    );
    pub fn dsyswapr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        i1: *const lapack_int,
        i2: *const lapack_int,
        arg1: usize,
    );
    pub fn ssyswapr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        i1: *const lapack_int,
        i2: *const lapack_int,
        arg1: usize,
    );
    pub fn zsyswapr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        i1: *const lapack_int,
        i2: *const lapack_int,
        arg1: usize,
    );
    pub fn dsytrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrd_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrd_2stage_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        D: *mut f64,
        E: *mut f64,
        tau: *mut f64,
        HOUS2: *mut f64,
        lhous2: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ssytrd_2stage_(
        vect: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        D: *mut f32,
        E: *mut f32,
        tau: *mut f32,
        HOUS2: *mut f32,
        lhous2: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn csytrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrf_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrf_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrf_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrf_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrf_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrf_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f32>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrf_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        TB: *mut f64,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrf_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        TB: *mut f32,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrf_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f64>,
        ltb: *const lapack_int,
        ipiv: *mut lapack_int,
        ipiv2: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrf_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f32>,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrf_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        E: *mut f64,
        ipiv: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrf_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        E: *mut f32,
        ipiv: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrf_rk_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *mut __BindgenComplex<f64>,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrf_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrf_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrf_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrf_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytri_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytri2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytri2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytri2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytri2_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytri2x_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        nb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytri2x_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f64,
        nb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytri2x_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut f32,
        nb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytri2x_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        nb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytri_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytri_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        E: *const f64,
        ipiv: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytri_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        E: *const f32,
        ipiv: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytri_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrs_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrs2_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrs2_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrs2_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrs2_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrs_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrs_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        E: *const f64,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrs_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        E: *const f32,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrs_3_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrs_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrs_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrs_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrs_aa_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrs_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f32>,
        ltb: *const lapack_int,
        ipiv: *const lapack_int,
        ipiv2: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrs_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        TB: *mut f64,
        ltb: *const lapack_int,
        ipiv: *const lapack_int,
        ipiv2: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrs_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        TB: *mut f32,
        ltb: *const lapack_int,
        ipiv: *const lapack_int,
        ipiv2: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrs_aa_2stage_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        TB: *mut __BindgenComplex<f64>,
        ltb: *const lapack_int,
        ipiv: *const lapack_int,
        ipiv2: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn csytrs_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dsytrs_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ssytrs_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zsytrs_rook_(
        uplo: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ipiv: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ctbcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtbcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stbcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztbcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctbrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *const __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtbrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *const f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stbrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *const f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztbrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *const __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctbtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f32>,
        ldab: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtbtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f64,
        ldab: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stbtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const f32,
        ldab: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztbtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        kd: *const lapack_int,
        nrhs: *const lapack_int,
        AB: *const __BindgenComplex<f64>,
        ldab: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctfsm_(
        transr: *const c_char,
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const __BindgenComplex<f32>,
        A: *const __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn dtfsm_(
        transr: *const c_char,
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const f64,
        A: *const f64,
        B: *mut f64,
        ldb: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn stfsm_(
        transr: *const c_char,
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const f32,
        A: *const f32,
        B: *mut f32,
        ldb: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn ztfsm_(
        transr: *const c_char,
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        alpha: *const __BindgenComplex<f64>,
        A: *const __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
    );
    pub fn ctftri_(
        transr: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtftri_(
        transr: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stftri_(
        transr: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztftri_(
        transr: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctfttp_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const __BindgenComplex<f32>,
        AP: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtfttp_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const f64,
        AP: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stfttp_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const f32,
        AP: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztfttp_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const __BindgenComplex<f64>,
        AP: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctfttr_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const __BindgenComplex<f32>,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtfttr_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const f64,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stfttr_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const f32,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztfttr_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        ARF: *const __BindgenComplex<f64>,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctgevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        S: *const __BindgenComplex<f32>,
        lds: *const lapack_int,
        P: *const __BindgenComplex<f32>,
        ldp: *const lapack_int,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtgevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        S: *const f64,
        lds: *const lapack_int,
        P: *const f64,
        ldp: *const lapack_int,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stgevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        S: *const f32,
        lds: *const lapack_int,
        P: *const f32,
        ldp: *const lapack_int,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztgevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        S: *const __BindgenComplex<f64>,
        lds: *const lapack_int,
        P: *const __BindgenComplex<f64>,
        ldp: *const lapack_int,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctgexc_(
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        ifst: *const lapack_int,
        ilst: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn dtgexc_(
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        Z: *mut f64,
        ldz: *const lapack_int,
        ifst: *mut lapack_int,
        ilst: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn stgexc_(
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        Z: *mut f32,
        ldz: *const lapack_int,
        ifst: *mut lapack_int,
        ilst: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ztgexc_(
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        ifst: *const lapack_int,
        ilst: *mut lapack_int,
        info: *mut lapack_int,
    );
    pub fn ctgsen_(
        ijob: *const lapack_int,
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f32>,
        beta: *mut __BindgenComplex<f32>,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f32>,
        ldz: *const lapack_int,
        m: *mut lapack_int,
        pl: *mut f32,
        pr: *mut f32,
        DIF: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dtgsen_(
        ijob: *const lapack_int,
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        alphar: *mut f64,
        alphai: *mut f64,
        beta: *mut f64,
        Q: *mut f64,
        ldq: *const lapack_int,
        Z: *mut f64,
        ldz: *const lapack_int,
        m: *mut lapack_int,
        pl: *mut f64,
        pr: *mut f64,
        DIF: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn stgsen_(
        ijob: *const lapack_int,
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        alphar: *mut f32,
        alphai: *mut f32,
        beta: *mut f32,
        Q: *mut f32,
        ldq: *const lapack_int,
        Z: *mut f32,
        ldz: *const lapack_int,
        m: *mut lapack_int,
        pl: *mut f32,
        pr: *mut f32,
        DIF: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ztgsen_(
        ijob: *const lapack_int,
        wantq: *const lapack_int,
        wantz: *const lapack_int,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        alpha: *mut __BindgenComplex<f64>,
        beta: *mut __BindgenComplex<f64>,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        Z: *mut __BindgenComplex<f64>,
        ldz: *const lapack_int,
        m: *mut lapack_int,
        pl: *mut f64,
        pr: *mut f64,
        DIF: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ctgsja_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        tola: *const f32,
        tolb: *const f32,
        alpha: *mut f32,
        beta: *mut f32,
        U: *mut __BindgenComplex<f32>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f32>,
        ldv: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        ncycle: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtgsja_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        tola: *const f64,
        tolb: *const f64,
        alpha: *mut f64,
        beta: *mut f64,
        U: *mut f64,
        ldu: *const lapack_int,
        V: *mut f64,
        ldv: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        work: *mut f64,
        ncycle: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stgsja_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        tola: *const f32,
        tolb: *const f32,
        alpha: *mut f32,
        beta: *mut f32,
        U: *mut f32,
        ldu: *const lapack_int,
        V: *mut f32,
        ldv: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        work: *mut f32,
        ncycle: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztgsja_(
        jobu: *const c_char,
        jobv: *const c_char,
        jobq: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        tola: *const f64,
        tolb: *const f64,
        alpha: *mut f64,
        beta: *mut f64,
        U: *mut __BindgenComplex<f64>,
        ldu: *const lapack_int,
        V: *mut __BindgenComplex<f64>,
        ldv: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        ncycle: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctgsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        VL: *const __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *const __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        S: *mut f32,
        DIF: *mut f32,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtgsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        VL: *const f64,
        ldvl: *const lapack_int,
        VR: *const f64,
        ldvr: *const lapack_int,
        S: *mut f64,
        DIF: *mut f64,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stgsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        VL: *const f32,
        ldvl: *const lapack_int,
        VR: *const f32,
        ldvr: *const lapack_int,
        S: *mut f32,
        DIF: *mut f32,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztgsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        VL: *const __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *const __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        S: *mut f64,
        DIF: *mut f64,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctgsyl_(
        trans: *const c_char,
        ijob: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        D: *const __BindgenComplex<f32>,
        ldd: *const lapack_int,
        E: *const __BindgenComplex<f32>,
        lde: *const lapack_int,
        F: *mut __BindgenComplex<f32>,
        ldf: *const lapack_int,
        dif: *mut f32,
        scale: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dtgsyl_(
        trans: *const c_char,
        ijob: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        D: *const f64,
        ldd: *const lapack_int,
        E: *const f64,
        lde: *const lapack_int,
        F: *mut f64,
        ldf: *const lapack_int,
        dif: *mut f64,
        scale: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn stgsyl_(
        trans: *const c_char,
        ijob: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        D: *const f32,
        ldd: *const lapack_int,
        E: *const f32,
        lde: *const lapack_int,
        F: *mut f32,
        ldf: *const lapack_int,
        dif: *mut f32,
        scale: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ztgsyl_(
        trans: *const c_char,
        ijob: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        D: *const __BindgenComplex<f64>,
        ldd: *const lapack_int,
        E: *const __BindgenComplex<f64>,
        lde: *const lapack_int,
        F: *mut __BindgenComplex<f64>,
        ldf: *const lapack_int,
        dif: *mut f64,
        scale: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ctpcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtpcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stpcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztpcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctplqt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dtplqt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn stplqt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn ztplqt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn ctplqt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dtplqt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn stplqt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ztplqt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ctpmlqt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtpmlqt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        V: *const f64,
        ldv: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stpmlqt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        V: *const f32,
        ldv: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztpmlqt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        mb: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctpmqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtpmqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        V: *const f64,
        ldv: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stpmqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        V: *const f32,
        ldv: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztpmqrt_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctpqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn dtpqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
    );
    pub fn stpqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
    );
    pub fn ztpqrt_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn ctpqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dtpqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn stpqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ztpqrt2_(
        m: *const lapack_int,
        n: *const lapack_int,
        l: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ctprfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        V: *const __BindgenComplex<f32>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn dtprfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        V: *const f64,
        ldv: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        work: *mut f64,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn stprfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        V: *const f32,
        ldv: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        work: *mut f32,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn ztprfb_(
        side: *const c_char,
        trans: *const c_char,
        direct: *const c_char,
        storev: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        V: *const __BindgenComplex<f64>,
        ldv: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        ldwork: *const lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    );
    pub fn ctprfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *const __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtprfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        B: *const f64,
        ldb: *const lapack_int,
        X: *const f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stprfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        B: *const f32,
        ldb: *const lapack_int,
        X: *const f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztprfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *const __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctptri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtptri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stptri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztptri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctptrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtptrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f64,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn stptrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const f32,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztptrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctpttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        ARF: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtpttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        ARF: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn stpttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        ARF: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztpttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        ARF: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctpttr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dtpttr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f64,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn stpttr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const f32,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ztpttr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ctrcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        rcond: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtrcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        rcond: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn strcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        rcond: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztrcon_(
        norm: *const c_char,
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        rcond: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctrevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *mut lapack_int,
        n: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *mut lapack_int,
        n: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrevc_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrevc3_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        VL: *mut __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrevc3_(
        side: *const c_char,
        howmny: *const c_char,
        select: *mut lapack_int,
        n: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        VL: *mut f64,
        ldvl: *const lapack_int,
        VR: *mut f64,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strevc3_(
        side: *const c_char,
        howmny: *const c_char,
        select: *mut lapack_int,
        n: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        VL: *mut f32,
        ldvl: *const lapack_int,
        VR: *mut f32,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrevc3_(
        side: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        VL: *mut __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *mut __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrexc_(
        compq: *const c_char,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        ifst: *const lapack_int,
        ilst: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dtrexc_(
        compq: *const c_char,
        n: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        ifst: *mut lapack_int,
        ilst: *mut lapack_int,
        work: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn strexc_(
        compq: *const c_char,
        n: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        ifst: *mut lapack_int,
        ilst: *mut lapack_int,
        work: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ztrexc_(
        compq: *const c_char,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        ifst: *const lapack_int,
        ilst: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ctrrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        X: *const __BindgenComplex<f32>,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut __BindgenComplex<f32>,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtrrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        X: *const f64,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut f64,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn strrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        X: *const f32,
        ldx: *const lapack_int,
        ferr: *mut f32,
        berr: *mut f32,
        work: *mut f32,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztrrfs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        X: *const __BindgenComplex<f64>,
        ldx: *const lapack_int,
        ferr: *mut f64,
        berr: *mut f64,
        work: *mut __BindgenComplex<f64>,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctrsen_(
        job: *const c_char,
        compq: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        W: *mut __BindgenComplex<f32>,
        m: *mut lapack_int,
        s: *mut f32,
        sep: *mut f32,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrsen_(
        job: *const c_char,
        compq: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut f64,
        ldt: *const lapack_int,
        Q: *mut f64,
        ldq: *const lapack_int,
        WR: *mut f64,
        WI: *mut f64,
        m: *mut lapack_int,
        s: *mut f64,
        sep: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strsen_(
        job: *const c_char,
        compq: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut f32,
        ldt: *const lapack_int,
        Q: *mut f32,
        ldq: *const lapack_int,
        WR: *mut f32,
        WI: *mut f32,
        m: *mut lapack_int,
        s: *mut f32,
        sep: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrsen_(
        job: *const c_char,
        compq: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        W: *mut __BindgenComplex<f64>,
        m: *mut lapack_int,
        s: *mut f64,
        sep: *mut f64,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        VL: *const __BindgenComplex<f32>,
        ldvl: *const lapack_int,
        VR: *const __BindgenComplex<f32>,
        ldvr: *const lapack_int,
        S: *mut f32,
        SEP: *mut f32,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f32>,
        ldwork: *const lapack_int,
        rwork: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *const f64,
        ldt: *const lapack_int,
        VL: *const f64,
        ldvl: *const lapack_int,
        VR: *const f64,
        ldvr: *const lapack_int,
        S: *mut f64,
        SEP: *mut f64,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f64,
        ldwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *const f32,
        ldt: *const lapack_int,
        VL: *const f32,
        ldvl: *const lapack_int,
        VR: *const f32,
        ldvr: *const lapack_int,
        S: *mut f32,
        SEP: *mut f32,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut f32,
        ldwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrsna_(
        job: *const c_char,
        howmny: *const c_char,
        select: *const lapack_int,
        n: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        VL: *const __BindgenComplex<f64>,
        ldvl: *const lapack_int,
        VR: *const __BindgenComplex<f64>,
        ldvr: *const lapack_int,
        S: *mut f64,
        SEP: *mut f64,
        mm: *const lapack_int,
        m: *mut lapack_int,
        work: *mut __BindgenComplex<f64>,
        ldwork: *const lapack_int,
        rwork: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrsyl_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        scale: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrsyl_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        scale: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strsyl_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        scale: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrsyl_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        scale: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrsyl3_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f32>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        scale: *mut f32,
        swork: *mut f32,
        ldswork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrsyl3_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *const f64,
        ldb: *const lapack_int,
        C: *mut f64,
        ldc: *const lapack_int,
        scale: *mut f64,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        swork: *mut f64,
        ldswork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strsyl3_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *const f32,
        ldb: *const lapack_int,
        C: *mut f32,
        ldc: *const lapack_int,
        scale: *mut f32,
        iwork: *mut lapack_int,
        liwork: *const lapack_int,
        swork: *mut f32,
        ldswork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrsyl3_(
        trana: *const c_char,
        tranb: *const c_char,
        isgn: *const lapack_int,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *const __BindgenComplex<f64>,
        ldb: *const lapack_int,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        scale: *mut f64,
        swork: *mut f64,
        ldswork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrtri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrtri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strtri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrtri_(
        uplo: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f32>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn dtrtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        B: *mut f64,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn strtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        B: *mut f32,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ztrtrs_(
        uplo: *const c_char,
        trans: *const c_char,
        diag: *const c_char,
        n: *const lapack_int,
        nrhs: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        B: *mut __BindgenComplex<f64>,
        ldb: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn ctrttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        ARF: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn dtrttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        ARF: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn strttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        ARF: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ztrttf_(
        transr: *const c_char,
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        ARF: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn ctrttp_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        AP: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn dtrttp_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f64,
        lda: *const lapack_int,
        AP: *mut f64,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn strttp_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const f32,
        lda: *const lapack_int,
        AP: *mut f32,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ztrttp_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        AP: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn ctzrzf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn dtzrzf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f64,
        lda: *const lapack_int,
        tau: *mut f64,
        work: *mut f64,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn stzrzf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut f32,
        lda: *const lapack_int,
        tau: *mut f32,
        work: *mut f32,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn ztzrzf_(
        m: *const lapack_int,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cunbdb_(
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut __BindgenComplex<f32>,
        ldx11: *const lapack_int,
        X12: *mut __BindgenComplex<f32>,
        ldx12: *const lapack_int,
        X21: *mut __BindgenComplex<f32>,
        ldx21: *const lapack_int,
        X22: *mut __BindgenComplex<f32>,
        ldx22: *const lapack_int,
        theta: *mut f32,
        phi: *mut f32,
        TAUP1: *mut __BindgenComplex<f32>,
        TAUP2: *mut __BindgenComplex<f32>,
        TAUQ1: *mut __BindgenComplex<f32>,
        TAUQ2: *mut __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunbdb_(
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut __BindgenComplex<f64>,
        ldx11: *const lapack_int,
        X12: *mut __BindgenComplex<f64>,
        ldx12: *const lapack_int,
        X21: *mut __BindgenComplex<f64>,
        ldx21: *const lapack_int,
        X22: *mut __BindgenComplex<f64>,
        ldx22: *const lapack_int,
        theta: *mut f64,
        phi: *mut f64,
        TAUP1: *mut __BindgenComplex<f64>,
        TAUP2: *mut __BindgenComplex<f64>,
        TAUQ1: *mut __BindgenComplex<f64>,
        TAUQ2: *mut __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cuncsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut __BindgenComplex<f32>,
        ldx11: *const lapack_int,
        X12: *mut __BindgenComplex<f32>,
        ldx12: *const lapack_int,
        X21: *mut __BindgenComplex<f32>,
        ldx21: *const lapack_int,
        X22: *mut __BindgenComplex<f32>,
        ldx22: *const lapack_int,
        theta: *mut f32,
        U1: *mut __BindgenComplex<f32>,
        ldu1: *const lapack_int,
        U2: *mut __BindgenComplex<f32>,
        ldu2: *const lapack_int,
        V1T: *mut __BindgenComplex<f32>,
        ldv1t: *const lapack_int,
        V2T: *mut __BindgenComplex<f32>,
        ldv2t: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn zuncsd_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        jobv2t: *const c_char,
        trans: *const c_char,
        signs: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut __BindgenComplex<f64>,
        ldx11: *const lapack_int,
        X12: *mut __BindgenComplex<f64>,
        ldx12: *const lapack_int,
        X21: *mut __BindgenComplex<f64>,
        ldx21: *const lapack_int,
        X22: *mut __BindgenComplex<f64>,
        ldx22: *const lapack_int,
        theta: *mut f64,
        U1: *mut __BindgenComplex<f64>,
        ldu1: *const lapack_int,
        U2: *mut __BindgenComplex<f64>,
        ldu2: *const lapack_int,
        V1T: *mut __BindgenComplex<f64>,
        ldv1t: *const lapack_int,
        V2T: *mut __BindgenComplex<f64>,
        ldv2t: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
        arg5: usize,
        arg6: usize,
    );
    pub fn cuncsd2by1_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut __BindgenComplex<f32>,
        ldx11: *const lapack_int,
        X21: *mut __BindgenComplex<f32>,
        ldx21: *const lapack_int,
        theta: *mut f32,
        U1: *mut __BindgenComplex<f32>,
        ldu1: *const lapack_int,
        U2: *mut __BindgenComplex<f32>,
        ldu2: *const lapack_int,
        V1T: *mut __BindgenComplex<f32>,
        ldv1t: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        rwork: *mut f32,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zuncsd2by1_(
        jobu1: *const c_char,
        jobu2: *const c_char,
        jobv1t: *const c_char,
        m: *const lapack_int,
        p: *const lapack_int,
        q: *const lapack_int,
        X11: *mut __BindgenComplex<f64>,
        ldx11: *const lapack_int,
        X21: *mut __BindgenComplex<f64>,
        ldx21: *const lapack_int,
        theta: *mut f64,
        U1: *mut __BindgenComplex<f64>,
        ldu1: *const lapack_int,
        U2: *mut __BindgenComplex<f64>,
        ldu2: *const lapack_int,
        V1T: *mut __BindgenComplex<f64>,
        ldv1t: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        rwork: *mut f64,
        lrwork: *const lapack_int,
        iwork: *mut lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cungbr_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zungbr_(
        vect: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cunghr_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zunghr_(
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cunglq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zunglq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cungql_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zungql_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cungqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zungqr_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cungrq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zungrq_(
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cungtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zungtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cungtsqr_row_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *const __BindgenComplex<f32>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn zungtsqr_row_(
        m: *const lapack_int,
        n: *const lapack_int,
        mb: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *const __BindgenComplex<f64>,
        ldt: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
    );
    pub fn cunhr_col_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f32>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f32>,
        ldt: *const lapack_int,
        D: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
    );
    pub fn zunhr_col_(
        m: *const lapack_int,
        n: *const lapack_int,
        nb: *const lapack_int,
        A: *mut __BindgenComplex<f64>,
        lda: *const lapack_int,
        T: *mut __BindgenComplex<f64>,
        ldt: *const lapack_int,
        D: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
    );
    pub fn cunmbr_(
        vect: *const c_char,
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zunmbr_(
        vect: *const c_char,
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cunmhr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunmhr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        ilo: *const lapack_int,
        ihi: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cunmlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunmlq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cunmql_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunmql_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cunmqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunmqr_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cunmrq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunmrq_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cunmrz_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn zunmrz_(
        side: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        k: *const lapack_int,
        l: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
    );
    pub fn cunmtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f32>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zunmtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        A: *const __BindgenComplex<f64>,
        lda: *const lapack_int,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        lwork: *const lapack_int,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn cupgtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        tau: *const __BindgenComplex<f32>,
        Q: *mut __BindgenComplex<f32>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn zupgtr_(
        uplo: *const c_char,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        tau: *const __BindgenComplex<f64>,
        Q: *mut __BindgenComplex<f64>,
        ldq: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
    );
    pub fn cupmtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f32>,
        tau: *const __BindgenComplex<f32>,
        C: *mut __BindgenComplex<f32>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f32>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
    pub fn zupmtr_(
        side: *const c_char,
        uplo: *const c_char,
        trans: *const c_char,
        m: *const lapack_int,
        n: *const lapack_int,
        AP: *const __BindgenComplex<f64>,
        tau: *const __BindgenComplex<f64>,
        C: *mut __BindgenComplex<f64>,
        ldc: *const lapack_int,
        work: *mut __BindgenComplex<f64>,
        info: *mut lapack_int,
        arg1: usize,
        arg2: usize,
        arg3: usize,
    );
}
