//! Compatible implementation for dynamic-loading.
//!
//! This requires custom `dyload_lib` definition in mod.rs, or visible from
//! current layer of module.
//!
//! This file is generated automatically.

use super::*;

pub unsafe fn LAPACKE_dlamch(cmach: c_char) -> f64 {
    dyload_lib().LAPACKE_dlamch.unwrap()(cmach)
}

pub unsafe fn LAPACKE_dlamch_work(cmach: c_char) -> f64 {
    dyload_lib().LAPACKE_dlamch_work.unwrap()(cmach)
}

pub unsafe fn LAPACKE_dlangb(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_dlangb.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab)
}

pub unsafe fn LAPACKE_dlangb_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_dlangb_work.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab, work)
}

pub unsafe fn LAPACKE_dlange(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_dlange.unwrap()(matrix_layout, norm, m, n, a, lda)
}

pub unsafe fn LAPACKE_dlange_work(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_dlange_work.unwrap()(matrix_layout, norm, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_dlansy(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_dlansy.unwrap()(matrix_layout, norm, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dlansy_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_dlansy_work.unwrap()(matrix_layout, norm, uplo, n, a, lda, work)
}

pub unsafe fn LAPACKE_dlantr(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_dlantr.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda)
}

pub unsafe fn LAPACKE_dlantr_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_dlantr_work.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_dlapy2(x: f64, y: f64) -> f64 {
    dyload_lib().LAPACKE_dlapy2.unwrap()(x, y)
}

pub unsafe fn LAPACKE_dlapy2_work(x: f64, y: f64) -> f64 {
    dyload_lib().LAPACKE_dlapy2_work.unwrap()(x, y)
}

pub unsafe fn LAPACKE_dlapy3(x: f64, y: f64, z: f64) -> f64 {
    dyload_lib().LAPACKE_dlapy3.unwrap()(x, y, z)
}

pub unsafe fn LAPACKE_dlapy3_work(x: f64, y: f64, z: f64) -> f64 {
    dyload_lib().LAPACKE_dlapy3_work.unwrap()(x, y, z)
}

pub unsafe fn LAPACKE_zlangb(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_zlangb.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab)
}

pub unsafe fn LAPACKE_zlangb_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_zlangb_work.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab, work)
}

pub unsafe fn LAPACKE_zlange(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_zlange.unwrap()(matrix_layout, norm, m, n, a, lda)
}

pub unsafe fn LAPACKE_zlange_work(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_zlange_work.unwrap()(matrix_layout, norm, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_zlanhe(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_zlanhe.unwrap()(matrix_layout, norm, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zlanhe_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_zlanhe_work.unwrap()(matrix_layout, norm, uplo, n, a, lda, work)
}

pub unsafe fn LAPACKE_zlarcm(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarcm.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc)
}

pub unsafe fn LAPACKE_zlarcm_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarcm_work.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc, work)
}

pub unsafe fn LAPACKE_zlacrm(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacrm.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc)
}

pub unsafe fn LAPACKE_zlacrm_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacrm_work.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc, work)
}

pub unsafe fn LAPACKE_zlansy(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_zlansy.unwrap()(matrix_layout, norm, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zlansy_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_zlansy_work.unwrap()(matrix_layout, norm, uplo, n, a, lda, work)
}

pub unsafe fn LAPACKE_zlantr(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
) -> f64 {
    dyload_lib().LAPACKE_zlantr.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda)
}

pub unsafe fn LAPACKE_zlantr_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    work: *mut f64,
) -> f64 {
    dyload_lib().LAPACKE_zlantr_work.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_clangb(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_clangb.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab)
}

pub unsafe fn LAPACKE_clangb_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_clangb_work.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab, work)
}

pub unsafe fn LAPACKE_clange(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_clange.unwrap()(matrix_layout, norm, m, n, a, lda)
}

pub unsafe fn LAPACKE_clange_work(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_clange_work.unwrap()(matrix_layout, norm, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_clanhe(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_clanhe.unwrap()(matrix_layout, norm, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_clanhe_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_clanhe_work.unwrap()(matrix_layout, norm, uplo, n, a, lda, work)
}

pub unsafe fn LAPACKE_clarcm(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarcm.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc)
}

pub unsafe fn LAPACKE_clarcm_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarcm_work.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc, rwork)
}

pub unsafe fn LAPACKE_clacrm(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacrm.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc)
}

pub unsafe fn LAPACKE_clacrm_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacrm_work.unwrap()(matrix_layout, m, n, a, lda, b, ldb, c, ldc, rwork)
}

pub unsafe fn LAPACKE_clansy(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_clansy.unwrap()(matrix_layout, norm, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_clansy_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_clansy_work.unwrap()(matrix_layout, norm, uplo, n, a, lda, work)
}

pub unsafe fn LAPACKE_clantr(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_clantr.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda)
}

pub unsafe fn LAPACKE_clantr_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_clantr_work.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_slamch(cmach: c_char) -> f32 {
    dyload_lib().LAPACKE_slamch.unwrap()(cmach)
}

pub unsafe fn LAPACKE_slamch_work(cmach: c_char) -> f32 {
    dyload_lib().LAPACKE_slamch_work.unwrap()(cmach)
}

pub unsafe fn LAPACKE_slangb(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_slangb.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab)
}

pub unsafe fn LAPACKE_slangb_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_slangb_work.unwrap()(matrix_layout, norm, n, kl, ku, ab, ldab, work)
}

pub unsafe fn LAPACKE_slange(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_slange.unwrap()(matrix_layout, norm, m, n, a, lda)
}

pub unsafe fn LAPACKE_slange_work(
    matrix_layout: c_int,
    norm: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_slange_work.unwrap()(matrix_layout, norm, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_slansy(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_slansy.unwrap()(matrix_layout, norm, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_slansy_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_slansy_work.unwrap()(matrix_layout, norm, uplo, n, a, lda, work)
}

pub unsafe fn LAPACKE_slantr(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
) -> f32 {
    dyload_lib().LAPACKE_slantr.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda)
}

pub unsafe fn LAPACKE_slantr_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    work: *mut f32,
) -> f32 {
    dyload_lib().LAPACKE_slantr_work.unwrap()(matrix_layout, norm, uplo, diag, m, n, a, lda, work)
}

pub unsafe fn LAPACKE_slapy2(x: f32, y: f32) -> f32 {
    dyload_lib().LAPACKE_slapy2.unwrap()(x, y)
}

pub unsafe fn LAPACKE_slapy2_work(x: f32, y: f32) -> f32 {
    dyload_lib().LAPACKE_slapy2_work.unwrap()(x, y)
}

pub unsafe fn LAPACKE_slapy3(x: f32, y: f32, z: f32) -> f32 {
    dyload_lib().LAPACKE_slapy3.unwrap()(x, y, z)
}

pub unsafe fn LAPACKE_slapy3_work(x: f32, y: f32, z: f32) -> f32 {
    dyload_lib().LAPACKE_slapy3_work.unwrap()(x, y, z)
}

pub unsafe fn LAPACKE_cbbcsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    u1: *mut MKL_Complex8,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex8,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex8,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex8,
    ldv2t: MKL_INT,
    b11d: *mut f32,
    b11e: *mut f32,
    b12d: *mut f32,
    b12e: *mut f32,
    b21d: *mut f32,
    b21e: *mut f32,
    b22d: *mut f32,
    b22e: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cbbcsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
    )
}

pub unsafe fn LAPACKE_cbbcsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    u1: *mut MKL_Complex8,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex8,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex8,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex8,
    ldv2t: MKL_INT,
    b11d: *mut f32,
    b11e: *mut f32,
    b12d: *mut f32,
    b12e: *mut f32,
    b21d: *mut f32,
    b21e: *mut f32,
    b22d: *mut f32,
    b22e: *mut f32,
    rwork: *mut f32,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cbbcsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_cbdsqr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cbdsqr.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cbdsqr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cbdsqr_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_cgbbrd(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    pt: *mut MKL_Complex8,
    ldpt: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbbrd.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cgbbrd_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    pt: *mut MKL_Complex8,
    ldpt: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbbrd_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgbcon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbcon.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
    )
}

pub unsafe fn LAPACKE_cgbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbcon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgbequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbequ.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_cgbequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_cgbequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbequb.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_cgbequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_cgbrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    afb: *const MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cgbrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    afb: *const MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgbrfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    afb: *const MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbrfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cgbrfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    afb: *const MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbrfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgbsv(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbsv.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cgbsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbsv_work.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cgbsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    afb: *mut MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    rpivot: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_cgbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    afb: *mut MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgbsvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    afb: *mut MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbsvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cgbsvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    afb: *mut MKL_Complex8,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbsvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgbtrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbtrf.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_cgbtrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbtrf_work.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_cgbtrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbtrs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_cgbtrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgbtrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_cgebak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f32,
    m: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgebak.unwrap()(matrix_layout, job, side, n, ilo, ihi, scale, m, v, ldv)
}

pub unsafe fn LAPACKE_cgebak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f32,
    m: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgebak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        scale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_cgebal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgebal.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_cgebal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgebal_work.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_cgebrd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut MKL_Complex8,
    taup: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgebrd.unwrap()(matrix_layout, m, n, a, lda, d, e, tauq, taup)
}

pub unsafe fn LAPACKE_cgebrd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut MKL_Complex8,
    taup: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgebrd_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        d,
        e,
        tauq,
        taup,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgecon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgecon.unwrap()(matrix_layout, norm, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_cgecon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgecon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgedmd(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    y: *mut MKL_Complex8,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    eigs: *mut MKL_Complex8,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut MKL_Complex8,
    ldw: MKL_INT,
    s: *mut MKL_Complex8,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgedmd.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_cgedmd_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    y: *mut MKL_Complex8,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    eigs: *mut MKL_Complex8,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut MKL_Complex8,
    ldw: MKL_INT,
    s: *mut MKL_Complex8,
    lds: MKL_INT,
    zwork: *mut MKL_Complex8,
    lzwork: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgedmd_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
        zwork,
        lzwork,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cgedmdq(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut MKL_Complex8,
    ldf: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    y: *mut MKL_Complex8,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    eigs: *mut MKL_Complex8,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    s: *mut MKL_Complex8,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgedmdq.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_cgedmdq_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut MKL_Complex8,
    ldf: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    y: *mut MKL_Complex8,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    eigs: *mut MKL_Complex8,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    s: *mut MKL_Complex8,
    lds: MKL_INT,
    zwork: *mut MKL_Complex8,
    lzwork: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgedmdq_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
        zwork,
        lzwork,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cgeequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeequ.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_cgeequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_cgeequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeequb.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_cgeequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_cgees(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_C_SELECT1,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex8,
    vs: *mut MKL_Complex8,
    ldvs: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgees.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
    )
}

pub unsafe fn LAPACKE_cgees_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_C_SELECT1,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex8,
    vs: *mut MKL_Complex8,
    ldvs: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgees_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_cgeesx(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_C_SELECT1,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex8,
    vs: *mut MKL_Complex8,
    ldvs: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeesx.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_cgeesx_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_C_SELECT1,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex8,
    vs: *mut MKL_Complex8,
    ldvs: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeesx_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_cgeev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_cgeev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgeevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
    abnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_cgeevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
    abnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgehrd(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgehrd.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_cgehrd_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgehrd_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cgejsv(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sva: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    stat: *mut f32,
    istat: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgejsv.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        stat,
        istat,
    )
}

pub unsafe fn LAPACKE_cgejsv_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sva: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    cwork: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgejsv_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        cwork,
        lwork,
        rwork,
        lrwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cgelq2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelq2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgelq2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelq2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_cgelqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgelqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cgels(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgels.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_cgels_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgels_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgelsd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelsd.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_cgelsd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelsd_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cgelss(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelss.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_cgelss_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelss_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgelsy(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f32,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelsy.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
    )
}

pub unsafe fn LAPACKE_cgelsy_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f32,
    rank: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelsy_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgemqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgemqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cgemqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgemqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_cgeqlf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqlf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgeqlf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqlf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cgeqp3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqp3.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_cgeqp3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqp3_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        jpvt,
        tau,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgeqpf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqpf.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_cgeqpf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqpf_work.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau, work, rwork)
}

pub unsafe fn LAPACKE_cgeqr2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqr2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgeqr2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqr2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_cgeqrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgeqrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cgeqrfp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrfp.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgeqrfp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrfp_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cgeqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrt.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cgeqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrt2.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cgeqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrt2_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cgeqrt3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrt3.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cgeqrt3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrt3_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cgeqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqrt_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, work)
}

pub unsafe fn LAPACKE_cgerfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgerfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cgerfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgerfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgerfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgerfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cgerfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgerfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgerqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgerqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cgerqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgerqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cgesdd(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesdd.unwrap()(matrix_layout, jobz, m, n, a, lda, s, u, ldu, vt, ldvt)
}

pub unsafe fn LAPACKE_cgesdd_work(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesdd_work.unwrap()(
        matrix_layout,
        jobz,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cgesv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesv.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cgesv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesv_work.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cgesvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    superb: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvd.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_cgesvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgesvdx(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    superb: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvdx.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_cgesvdx_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    vt: *mut MKL_Complex8,
    ldvt: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvdx_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cgesvj(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sva: *mut f32,
    mv: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    stat: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvj.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        stat,
    )
}

pub unsafe fn LAPACKE_cgesvj_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    sva: *mut f32,
    mv: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    cwork: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvj_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        cwork,
        lwork,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_cgesvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    rpivot: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_cgesvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgesvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cgesvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgetf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetrf.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetrf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetrf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetrf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetrf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetrf_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetri(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetri.unwrap()(matrix_layout, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_cgetri_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetri_work.unwrap()(matrix_layout, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_cgetrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetrs.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cgetrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetrs_work.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cggbak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f32,
    rscale: *const f32,
    m: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggbak.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_cggbak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f32,
    rscale: *const f32,
    m: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggbak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_cggbal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggbal.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
    )
}

pub unsafe fn LAPACKE_cggbal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggbal_work.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
        work,
    )
}

pub unsafe fn LAPACKE_cgges(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_C_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vsl: *mut MKL_Complex8,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex8,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgges.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_cgges3(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_C_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vsl: *mut MKL_Complex8,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex8,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgges3.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_cgges3_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_C_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vsl: *mut MKL_Complex8,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex8,
    ldvsr: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgges3_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_cgges_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_C_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vsl: *mut MKL_Complex8,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex8,
    ldvsr: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgges_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_cggesx(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_C_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vsl: *mut MKL_Complex8,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex8,
    ldvsr: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggesx.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_cggesx_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_C_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vsl: *mut MKL_Complex8,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex8,
    ldvsr: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggesx_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
        iwork,
        liwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_cggev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_cggev3(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggev3.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_cggev3_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggev3_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cggev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cggevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
    abnrm: *mut f32,
    bbnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_cggevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
    abnrm: *mut f32,
    bbnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
        iwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_cggglm(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    d: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    y: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggglm.unwrap()(matrix_layout, n, m, p, a, lda, b, ldb, d, x, y)
}

pub unsafe fn LAPACKE_cggglm_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    d: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    y: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggglm_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        b,
        ldb,
        d,
        x,
        y,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgghd3(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgghd3.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_cgghd3_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgghd3_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgghrd(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgghrd.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_cgghrd_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgghrd_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_cgglse(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    d: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgglse.unwrap()(matrix_layout, m, n, p, a, lda, b, ldb, c, d, x)
}

pub unsafe fn LAPACKE_cgglse_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    d: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgglse_work.unwrap()(
        matrix_layout,
        m,
        n,
        p,
        a,
        lda,
        b,
        ldb,
        c,
        d,
        x,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cggqrf(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    taua: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    taub: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggqrf.unwrap()(matrix_layout, n, m, p, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_cggqrf_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    taua: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    taub: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggqrf_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cggrqf(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    taua: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    taub: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggrqf.unwrap()(matrix_layout, m, p, n, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_cggrqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    taua: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    taub: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggrqf_work.unwrap()(
        matrix_layout,
        m,
        p,
        n,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cggsvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvd.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_cggsvd3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvd3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_cggsvd3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvd3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cggsvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cggsvp(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvp.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_cggsvp3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvp3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_cggsvp3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    rwork: *mut f32,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvp3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        rwork,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cggsvp_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    rwork: *mut f32,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cggsvp_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        rwork,
        tau,
        work,
    )
}

pub unsafe fn LAPACKE_cgtcon(
    norm: c_char,
    n: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    du2: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtcon.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_cgtcon_work(
    norm: c_char,
    n: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    du2: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtcon_work.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work)
}

pub unsafe fn LAPACKE_cgtrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    dlf: *const MKL_Complex8,
    df: *const MKL_Complex8,
    duf: *const MKL_Complex8,
    du2: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cgtrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    dlf: *const MKL_Complex8,
    df: *const MKL_Complex8,
    duf: *const MKL_Complex8,
    du2: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgtsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut MKL_Complex8,
    d: *mut MKL_Complex8,
    du: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtsv.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_cgtsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut MKL_Complex8,
    d: *mut MKL_Complex8,
    du: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtsv_work.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_cgtsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    dlf: *mut MKL_Complex8,
    df: *mut MKL_Complex8,
    duf: *mut MKL_Complex8,
    du2: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cgtsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    dlf: *mut MKL_Complex8,
    df: *mut MKL_Complex8,
    duf: *mut MKL_Complex8,
    du2: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgtsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cgttrf(
    n: MKL_INT,
    dl: *mut MKL_Complex8,
    d: *mut MKL_Complex8,
    du: *mut MKL_Complex8,
    du2: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgttrf.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_cgttrf_work(
    n: MKL_INT,
    dl: *mut MKL_Complex8,
    d: *mut MKL_Complex8,
    du: *mut MKL_Complex8,
    du2: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgttrf_work.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_cgttrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    du2: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgttrs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_cgttrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex8,
    d: *const MKL_Complex8,
    du: *const MKL_Complex8,
    du2: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgttrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_chbev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbev.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_chbev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chbevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevd.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_chbevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_chbevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_chbevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_chbgst(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *const MKL_Complex8,
    ldbb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgst.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
    )
}

pub unsafe fn LAPACKE_chbgst_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *const MKL_Complex8,
    ldbb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgst_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chbgv(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgv.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_chbgv_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgv_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chbgvd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgvd.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_chbgvd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgvd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_chbgvx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgvx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_chbgvx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbgvx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_chbtrd(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbtrd.unwrap()(matrix_layout, vect, uplo, n, kd, ab, ldab, d, e, q, ldq)
}

pub unsafe fn LAPACKE_chbtrd_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbtrd_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        kd,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        work,
    )
}

pub unsafe fn LAPACKE_checon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_checon.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_checon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_checon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_cheequb(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheequb.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_cheequb_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheequb_work.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax, work)
}

pub unsafe fn LAPACKE_cheev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheev.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_cheev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cheevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevd.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_cheevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cheevr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevr.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_cheevr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cheevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_cheevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_chegst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegst.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_chegst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegst_work.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_chegv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegv.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_chegv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_chegvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegvd.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_chegvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_chegvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_chegvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_cherfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cherfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cherfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cherfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cherfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cherfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cherfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cherfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chesv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chesv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chesvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_chesvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_chesvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_chesvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cheswapr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheswapr.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_cheswapr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheswapr_work.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_chetrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrd.unwrap()(matrix_layout, uplo, n, a, lda, d, e, tau)
}

pub unsafe fn LAPACKE_chetrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrd_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        d,
        e,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_chetrf_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_rook.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_chetrf_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_chetri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_chetri2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri2.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_chetri2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri2_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_chetri2x(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri2x.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, nb)
}

pub unsafe fn LAPACKE_chetri2x_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri2x_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, nb)
}

pub unsafe fn LAPACKE_chetri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work)
}

pub unsafe fn LAPACKE_chetrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chetrs2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs2.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chetrs2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs2_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_chetrs_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chetrs_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_chetrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chfrk(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f32,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    beta: f32,
    c: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chfrk.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_chfrk_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f32,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    beta: f32,
    c: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chfrk_work.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_chgeqz(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex8,
    ldh: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chgeqz.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_chgeqz_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex8,
    ldh: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chgeqz_work.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_chpcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpcon.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_chpcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpcon_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond, work)
}

pub unsafe fn LAPACKE_chpev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpev.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_chpev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ap,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chpevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpevd.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_chpevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ap,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_chpevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_chpevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_chpgst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgst.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_chpgst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgst_work.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_chpgv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgv.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_chpgv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chpgvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgvd.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_chpgvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *mut MKL_Complex8,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_chpgvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *mut MKL_Complex8,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_chpgvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    bp: *mut MKL_Complex8,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpgvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_chprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_chprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chpsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chpsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chpsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_chpsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chpsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_chptrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    d: *mut f32,
    e: *mut f32,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptrd.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_chptrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    d: *mut f32,
    e: *mut f32,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptrd_work.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_chptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptrf.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_chptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptrf_work.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_chptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptri.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_chptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptri_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, work)
}

pub unsafe fn LAPACKE_chptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chsein(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    h: *const MKL_Complex8,
    ldh: MKL_INT,
    w: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chsein.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_chsein_work(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    h: *const MKL_Complex8,
    ldh: MKL_INT,
    w: *mut MKL_Complex8,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chsein_work.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        rwork,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_chseqr(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex8,
    ldh: MKL_INT,
    w: *mut MKL_Complex8,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chseqr.unwrap()(matrix_layout, job, compz, n, ilo, ihi, h, ldh, w, z, ldz)
}

pub unsafe fn LAPACKE_chseqr_work(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex8,
    ldh: MKL_INT,
    w: *mut MKL_Complex8,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chseqr_work.unwrap()(
        matrix_layout,
        job,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        w,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_clacgv(n: MKL_INT, x: *mut MKL_Complex8, incx: MKL_INT) -> MKL_INT {
    dyload_lib().LAPACKE_clacgv.unwrap()(n, x, incx)
}

pub unsafe fn LAPACKE_clacgv_work(n: MKL_INT, x: *mut MKL_Complex8, incx: MKL_INT) -> MKL_INT {
    dyload_lib().LAPACKE_clacgv_work.unwrap()(n, x, incx)
}

pub unsafe fn LAPACKE_clacn2(
    n: MKL_INT,
    v: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    est: *mut f32,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacn2.unwrap()(n, v, x, est, kase, isave)
}

pub unsafe fn LAPACKE_clacn2_work(
    n: MKL_INT,
    v: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    est: *mut f32,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacn2_work.unwrap()(n, v, x, est, kase, isave)
}

pub unsafe fn LAPACKE_clacp2(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacp2.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_clacp2_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacp2_work.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_clacpy(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacpy.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_clacpy_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clacpy_work.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_clag2z(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    sa: *const MKL_Complex8,
    ldsa: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clag2z.unwrap()(matrix_layout, m, n, sa, ldsa, a, lda)
}

pub unsafe fn LAPACKE_clag2z_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    sa: *const MKL_Complex8,
    ldsa: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clag2z_work.unwrap()(matrix_layout, m, n, sa, ldsa, a, lda)
}

pub unsafe fn LAPACKE_clagge(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f32,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clagge.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_clagge_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f32,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clagge_work.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_claghe(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f32,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_claghe.unwrap()(matrix_layout, n, k, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_claghe_work(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f32,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_claghe_work.unwrap()(matrix_layout, n, k, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_clagsy(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f32,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clagsy.unwrap()(matrix_layout, n, k, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_clagsy_work(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f32,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clagsy_work.unwrap()(matrix_layout, n, k, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_clapmr(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clapmr.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_clapmr_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clapmr_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_clapmt(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clapmt.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_clapmt_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clapmt_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_clarfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_clarfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_clarfg(
    n: MKL_INT,
    alpha: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    incx: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarfg.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_clarfg_work(
    n: MKL_INT,
    alpha: *mut MKL_Complex8,
    x: *mut MKL_Complex8,
    incx: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarfg_work.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_clarft(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    tau: *const MKL_Complex8,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarft.unwrap()(matrix_layout, direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn LAPACKE_clarft_work(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    tau: *const MKL_Complex8,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarft_work.unwrap()(
        matrix_layout,
        direct,
        storev,
        n,
        k,
        v,
        ldv,
        tau,
        t,
        ldt,
    )
}

pub unsafe fn LAPACKE_clarfx(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const MKL_Complex8,
    tau: MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarfx.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_clarfx_work(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const MKL_Complex8,
    tau: MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarfx_work.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_clarnv(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarnv.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_clarnv_work(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clarnv_work.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_clascl(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f32,
    cto: f32,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clascl.unwrap()(matrix_layout, type_, kl, ku, cfrom, cto, m, n, a, lda)
}

pub unsafe fn LAPACKE_clascl_work(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f32,
    cto: f32,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clascl_work.unwrap()(
        matrix_layout,
        type_,
        kl,
        ku,
        cfrom,
        cto,
        m,
        n,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_claset(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex8,
    beta: MKL_Complex8,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_claset.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_claset_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex8,
    beta: MKL_Complex8,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_claset_work.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_claswp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_claswp.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_claswp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_claswp_work.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_clatms(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f32,
    mode: MKL_INT,
    cond: f32,
    dmax: f32,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clatms.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_clatms_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f32,
    mode: MKL_INT,
    cond: f32,
    dmax: f32,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_clatms_work.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
        work,
    )
}

pub unsafe fn LAPACKE_clauum(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clauum.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_clauum_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_clauum_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpbcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbcon.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, anorm, rcond)
}

pub unsafe fn LAPACKE_cpbcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbcon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        ab,
        ldab,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpbequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbequ.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_cpbequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbequ_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_cpbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    afb: *const MKL_Complex8,
    ldafb: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cpbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    afb: *const MKL_Complex8,
    ldafb: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpbstf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbstf.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_cpbstf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut MKL_Complex8,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbstf_work.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_cpbsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbsv.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_cpbsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbsv_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_cpbsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    afb: *mut MKL_Complex8,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cpbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    afb: *mut MKL_Complex8,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpbtrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbtrf.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_cpbtrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbtrf_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_cpbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbtrs.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_cpbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpbtrs_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_cpftrf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpftrf.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_cpftrf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpftrf_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_cpftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpftri.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_cpftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpftri_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_cpftrs(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpftrs.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_cpftrs_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpftrs_work.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_cpocon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpocon.unwrap()(matrix_layout, uplo, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_cpocon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpocon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpoequ(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpoequ.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_cpoequ_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpoequ_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_cpoequb(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpoequb.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_cpoequb_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpoequb_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_cporfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cporfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cporfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cporfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cporfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    s: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cporfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cporfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    s: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cporfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cposv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cposv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_cposv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cposv_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_cposvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cposvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cposvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cposvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cposvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cposvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_cposvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cposvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpotrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotrf.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpotrf2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotrf2.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpotrf2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotrf2_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpotrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotrf_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpotri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotri.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpotri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotri_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_cpotrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_cpotrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpotrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_cppcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppcon.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond)
}

pub unsafe fn LAPACKE_cppcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppcon_work.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond, work, rwork)
}

pub unsafe fn LAPACKE_cppequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppequ.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_cppequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppequ_work.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_cpprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *const MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cpprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *const MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cppsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_cppsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_cppsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    afp: *mut MKL_Complex8,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cppsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    afp: *mut MKL_Complex8,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cppsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpptrf.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_cpptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpptrf_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_cpptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpptri.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_cpptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpptri_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_cpptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_cpptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_cpstrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpstrf.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol)
}

pub unsafe fn LAPACKE_cpstrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpstrf_work.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol, work)
}

pub unsafe fn LAPACKE_cptcon(
    n: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptcon.unwrap()(n, d, e, anorm, rcond)
}

pub unsafe fn LAPACKE_cptcon_work(
    n: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptcon_work.unwrap()(n, d, e, anorm, rcond, work)
}

pub unsafe fn LAPACKE_cpteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_cpteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_cptrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    df: *const f32,
    ef: *const MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cptrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    df: *const f32,
    ef: *const MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cptsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f32,
    e: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptsv.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_cptsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f32,
    e: *mut MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptsv_work.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_cptsvx(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    df: *mut f32,
    ef: *mut MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptsvx.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cptsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    df: *mut f32,
    ef: *mut MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cptsvx_work.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cpttrf(n: MKL_INT, d: *mut f32, e: *mut MKL_Complex8) -> MKL_INT {
    dyload_lib().LAPACKE_cpttrf.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_cpttrf_work(n: MKL_INT, d: *mut f32, e: *mut MKL_Complex8) -> MKL_INT {
    dyload_lib().LAPACKE_cpttrf_work.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_cpttrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpttrs.unwrap()(matrix_layout, uplo, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_cpttrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cpttrs_work.unwrap()(matrix_layout, uplo, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_cspcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cspcon.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_cspcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cspcon_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond, work)
}

pub unsafe fn LAPACKE_csprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_csprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_cspsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cspsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cspsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cspsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cspsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cspsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_cspsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    afp: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cspsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_csptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csptrf.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_csptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csptrf_work.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_csptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csptri.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_csptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csptri_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, work)
}

pub unsafe fn LAPACKE_csptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_cstedc(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstedc.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_cstedc_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstedc_work.unwrap()(
        matrix_layout,
        compz,
        n,
        d,
        e,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cstegr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstegr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_cstegr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstegr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cstein(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f32,
    e: *const f32,
    m: MKL_INT,
    w: *const f32,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstein.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        ifailv,
    )
}

pub unsafe fn LAPACKE_cstein_work(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f32,
    e: *const f32,
    m: MKL_INT,
    w: *const f32,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstein_work.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        work,
        iwork,
        ifailv,
    )
}

pub unsafe fn LAPACKE_cstemr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstemr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
    )
}

pub unsafe fn LAPACKE_cstemr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cstemr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_csteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_csteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_csycon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csycon.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_csycon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csycon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_csyconv(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyconv.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_csyconv_work(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyconv_work.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_csyequb(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyequb.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_csyequb_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyequb_work.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax, work)
}

pub unsafe fn LAPACKE_csyr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    alpha: MKL_Complex8,
    x: *const MKL_Complex8,
    incx: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyr.unwrap()(matrix_layout, uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn LAPACKE_csyr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    alpha: MKL_Complex8,
    x: *const MKL_Complex8,
    incx: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyr_work.unwrap()(matrix_layout, uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn LAPACKE_csyrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_csyrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_csyrfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyrfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_csyrfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *const MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f32,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyrfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_csysv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csysv_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csysv_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csysv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csysvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_csysvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_csysvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_csysvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    af: *mut MKL_Complex8,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    x: *mut MKL_Complex8,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_csyswapr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyswapr.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_csyswapr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csyswapr_work.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_csytrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_csytrf_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_rook.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_csytrf_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csytrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_csytri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_csytri2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri2.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_csytri2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri2_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_csytri2x(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri2x.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, nb)
}

pub unsafe fn LAPACKE_csytri2x_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri2x_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, nb)
}

pub unsafe fn LAPACKE_csytri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work)
}

pub unsafe fn LAPACKE_csytrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csytrs2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs2.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csytrs2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs2_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_csytrs_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csytrs_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_csytrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ctbcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctbcon.unwrap()(matrix_layout, norm, uplo, diag, n, kd, ab, ldab, rcond)
}

pub unsafe fn LAPACKE_ctbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctbcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        kd,
        ab,
        ldab,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *const MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctbrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ctbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *const MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctbtrs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex8,
    ldab: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctbtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctfsm(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex8,
    a: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctfsm.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctfsm_work(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex8,
    a: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctfsm_work.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctftri.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_ctftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctftri_work.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_ctfttp(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex8,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctfttp.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_ctfttp_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex8,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctfttp_work.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_ctfttr(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex8,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctfttr.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_ctfttr_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex8,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctfttr_work.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_ctgevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const MKL_Complex8,
    lds: MKL_INT,
    p: *const MKL_Complex8,
    ldp: MKL_INT,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ctgevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const MKL_Complex8,
    lds: MKL_INT,
    p: *const MKL_Complex8,
    ldp: MKL_INT,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctgexc(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgexc.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
    )
}

pub unsafe fn LAPACKE_ctgexc_work(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgexc_work.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
    )
}

pub unsafe fn LAPACKE_ctgsen(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f32,
    pr: *mut f32,
    dif: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsen.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
    )
}

pub unsafe fn LAPACKE_ctgsen_work(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex8,
    beta: *mut MKL_Complex8,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f32,
    pr: *mut f32,
    dif: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsen_work.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ctgsja(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsja.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        ncycle,
    )
}

pub unsafe fn LAPACKE_ctgsja_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    work: *mut MKL_Complex8,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsja_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        ncycle,
    )
}

pub unsafe fn LAPACKE_ctgsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    vl: *const MKL_Complex8,
    ldvl: MKL_INT,
    vr: *const MKL_Complex8,
    ldvr: MKL_INT,
    s: *mut f32,
    dif: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ctgsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    vl: *const MKL_Complex8,
    ldvl: MKL_INT,
    vr: *const MKL_Complex8,
    ldvr: MKL_INT,
    s: *mut f32,
    dif: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_ctgsyl(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    d: *const MKL_Complex8,
    ldd: MKL_INT,
    e: *const MKL_Complex8,
    lde: MKL_INT,
    f: *mut MKL_Complex8,
    ldf: MKL_INT,
    scale: *mut f32,
    dif: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsyl.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
    )
}

pub unsafe fn LAPACKE_ctgsyl_work(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    d: *const MKL_Complex8,
    ldd: MKL_INT,
    e: *const MKL_Complex8,
    lde: MKL_INT,
    f: *mut MKL_Complex8,
    ldf: MKL_INT,
    scale: *mut f32,
    dif: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctgsyl_work.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_ctpcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpcon.unwrap()(matrix_layout, norm, uplo, diag, n, ap, rcond)
}

pub unsafe fn LAPACKE_ctpcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        ap,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctpmqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpmqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctpmqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpmqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_ctpqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpqrt.unwrap()(matrix_layout, m, n, l, nb, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_ctpqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpqrt2.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_ctpqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpqrt2_work.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_ctpqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpqrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        l,
        nb,
        a,
        lda,
        b,
        ldb,
        t,
        ldt,
        work,
    )
}

pub unsafe fn LAPACKE_ctprfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctprfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctprfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const MKL_Complex8,
    ldv: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctprfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_ctprfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *const MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctprfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ctprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *const MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctprfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctptri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctptri.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_ctptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctptri_work.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_ctptrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctptrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_ctptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex8,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctptrs_work.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_ctpttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    arf: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpttf.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_ctpttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    arf: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpttf_work.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_ctpttr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpttr.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_ctpttr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctpttr_work.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_ctrcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrcon.unwrap()(matrix_layout, norm, uplo, diag, n, a, lda, rcond)
}

pub unsafe fn LAPACKE_ctrcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        a,
        lda,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctrevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ctrevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    vl: *mut MKL_Complex8,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex8,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctrexc(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrexc.unwrap()(matrix_layout, compq, n, t, ldt, q, ldq, ifst, ilst)
}

pub unsafe fn LAPACKE_ctrexc_work(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrexc_work.unwrap()(matrix_layout, compq, n, t, ldt, q, ldq, ifst, ilst)
}

pub unsafe fn LAPACKE_ctrrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *const MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ctrrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    x: *const MKL_Complex8,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut MKL_Complex8,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctrsen(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    w: *mut MKL_Complex8,
    m: *mut MKL_INT,
    s: *mut f32,
    sep: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsen.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        w,
        m,
        s,
        sep,
    )
}

pub unsafe fn LAPACKE_ctrsen_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    w: *mut MKL_Complex8,
    m: *mut MKL_INT,
    s: *mut f32,
    sep: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsen_work.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        w,
        m,
        s,
        sep,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ctrsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    vl: *const MKL_Complex8,
    ldvl: MKL_INT,
    vr: *const MKL_Complex8,
    ldvr: MKL_INT,
    s: *mut f32,
    sep: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ctrsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const MKL_Complex8,
    ldt: MKL_INT,
    vl: *const MKL_Complex8,
    ldvl: MKL_INT,
    vr: *const MKL_Complex8,
    ldvr: MKL_INT,
    s: *mut f32,
    sep: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex8,
    ldwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
        work,
        ldwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_ctrsyl(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsyl.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_ctrsyl_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsyl_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_ctrsyl3(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsyl3.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_ctrsyl3_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *const MKL_Complex8,
    ldb: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    scale: *mut f32,
    swork: *mut f32,
    ldswork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrsyl3_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
        swork,
        ldswork,
    )
}

pub unsafe fn LAPACKE_ctrtri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrtri.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_ctrtri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrtri_work.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_ctrtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrtrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_ctrtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ctrttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    arf: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrttf.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_ctrttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    arf: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrttf_work.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_ctrttp(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrttp.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_ctrttp_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ap: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctrttp_work.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_ctzrzf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctzrzf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_ctzrzf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ctzrzf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cunbdb(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex8,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex8,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex8,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex8,
    ldx22: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    taup1: *mut MKL_Complex8,
    taup2: *mut MKL_Complex8,
    tauq1: *mut MKL_Complex8,
    tauq2: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunbdb.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
    )
}

pub unsafe fn LAPACKE_cunbdb_work(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex8,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex8,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex8,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex8,
    ldx22: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    taup1: *mut MKL_Complex8,
    taup2: *mut MKL_Complex8,
    tauq1: *mut MKL_Complex8,
    tauq2: *mut MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunbdb_work.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cuncsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex8,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex8,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex8,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex8,
    ldx22: MKL_INT,
    theta: *mut f32,
    u1: *mut MKL_Complex8,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex8,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex8,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex8,
    ldv2t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cuncsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
    )
}

pub unsafe fn LAPACKE_cuncsd2by1(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex8,
    ldx11: MKL_INT,
    x21: *mut MKL_Complex8,
    ldx21: MKL_INT,
    theta: *mut f32,
    u1: *mut MKL_Complex8,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex8,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex8,
    ldv1t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cuncsd2by1.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
    )
}

pub unsafe fn LAPACKE_cuncsd2by1_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex8,
    ldx11: MKL_INT,
    x21: *mut MKL_Complex8,
    ldx21: MKL_INT,
    theta: *mut f32,
    u1: *mut MKL_Complex8,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex8,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex8,
    ldv1t: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cuncsd2by1_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cuncsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex8,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex8,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex8,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex8,
    ldx22: MKL_INT,
    theta: *mut f32,
    u1: *mut MKL_Complex8,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex8,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex8,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex8,
    ldv2t: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cuncsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_cungbr(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungbr.unwrap()(matrix_layout, vect, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_cungbr_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungbr_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        k,
        a,
        lda,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunghr(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunghr.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_cunghr_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunghr_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cunglq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunglq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_cunglq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunglq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cungql(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungql.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_cungql_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungql_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cungqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungqr.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_cungqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungqr_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cungrq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungrq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_cungrq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungrq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cungtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungtr.unwrap()(matrix_layout, uplo, n, a, lda, tau)
}

pub unsafe fn LAPACKE_cungtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungtr_work.unwrap()(matrix_layout, uplo, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_cunmbr(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmbr.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cunmbr_work(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmbr_work.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmhr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmhr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cunmhr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmhr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmlq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_cunmlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmql(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmql.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_cunmql_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmql_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmqr.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_cunmqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmrq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmrq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_cunmrq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmrq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmrz(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmrz.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cunmrz_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmrz_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cunmtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmtr.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cunmtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunmtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cupgtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    tau: *const MKL_Complex8,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cupgtr.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq)
}

pub unsafe fn LAPACKE_cupgtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    tau: *const MKL_Complex8,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cupgtr_work.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq, work)
}

pub unsafe fn LAPACKE_cupmtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cupmtr.unwrap()(matrix_layout, side, uplo, trans, m, n, ap, tau, c, ldc)
}

pub unsafe fn LAPACKE_cupmtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    tau: *const MKL_Complex8,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cupmtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        ap,
        tau,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_dbbcsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    u1: *mut f64,
    ldu1: MKL_INT,
    u2: *mut f64,
    ldu2: MKL_INT,
    v1t: *mut f64,
    ldv1t: MKL_INT,
    v2t: *mut f64,
    ldv2t: MKL_INT,
    b11d: *mut f64,
    b11e: *mut f64,
    b12d: *mut f64,
    b12e: *mut f64,
    b21d: *mut f64,
    b21e: *mut f64,
    b22d: *mut f64,
    b22e: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbbcsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
    )
}

pub unsafe fn LAPACKE_dbbcsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    u1: *mut f64,
    ldu1: MKL_INT,
    u2: *mut f64,
    ldu2: MKL_INT,
    v1t: *mut f64,
    ldv1t: MKL_INT,
    v2t: *mut f64,
    ldv2t: MKL_INT,
    b11d: *mut f64,
    b11e: *mut f64,
    b12d: *mut f64,
    b12e: *mut f64,
    b21d: *mut f64,
    b21e: *mut f64,
    b22d: *mut f64,
    b22e: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbbcsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dbdsdc(
    matrix_layout: c_int,
    uplo: c_char,
    compq: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    q: *mut f64,
    iq: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbdsdc.unwrap()(
        matrix_layout,
        uplo,
        compq,
        n,
        d,
        e,
        u,
        ldu,
        vt,
        ldvt,
        q,
        iq,
    )
}

pub unsafe fn LAPACKE_dbdsdc_work(
    matrix_layout: c_int,
    uplo: c_char,
    compq: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    q: *mut f64,
    iq: *mut MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbdsdc_work.unwrap()(
        matrix_layout,
        uplo,
        compq,
        n,
        d,
        e,
        u,
        ldu,
        vt,
        ldvt,
        q,
        iq,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dbdsqr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vt: *mut f64,
    ldvt: MKL_INT,
    u: *mut f64,
    ldu: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbdsqr.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dbdsqr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vt: *mut f64,
    ldvt: MKL_INT,
    u: *mut f64,
    ldu: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbdsqr_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_dbdsvdx(
    matrix_layout: c_int,
    uplo: c_char,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    superb: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbdsvdx.unwrap()(
        matrix_layout,
        uplo,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        z,
        ldz,
        superb,
    )
}

pub unsafe fn LAPACKE_dbdsvdx_work(
    matrix_layout: c_int,
    uplo: c_char,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dbdsvdx_work.unwrap()(
        matrix_layout,
        uplo,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        z,
        ldz,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ddisna(
    job: c_char,
    m: MKL_INT,
    n: MKL_INT,
    d: *const f64,
    sep: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ddisna.unwrap()(job, m, n, d, sep)
}

pub unsafe fn LAPACKE_ddisna_work(
    job: c_char,
    m: MKL_INT,
    n: MKL_INT,
    d: *const f64,
    sep: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ddisna_work.unwrap()(job, m, n, d, sep)
}

pub unsafe fn LAPACKE_dgbbrd(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    pt: *mut f64,
    ldpt: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbbrd.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dgbbrd_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    pt: *mut f64,
    ldpt: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbbrd_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_dgbcon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbcon.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
    )
}

pub unsafe fn LAPACKE_dgbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbcon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgbequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbequ.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_dgbequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_dgbequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbequb.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_dgbequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_dgbrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    afb: *const f64,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dgbrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    afb: *const f64,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgbrfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    afb: *const f64,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbrfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dgbrfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    afb: *const f64,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbrfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgbsv(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbsv.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dgbsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbsv_work.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dgbsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    afb: *mut f64,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    rpivot: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_dgbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    afb: *mut f64,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgbsvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    afb: *mut f64,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbsvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dgbsvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    afb: *mut f64,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbsvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgbtrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbtrf.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_dgbtrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbtrf_work.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_dgbtrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbtrs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dgbtrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgbtrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dgebak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f64,
    m: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgebak.unwrap()(matrix_layout, job, side, n, ilo, ihi, scale, m, v, ldv)
}

pub unsafe fn LAPACKE_dgebak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f64,
    m: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgebak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        scale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_dgebal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgebal.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_dgebal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgebal_work.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_dgebrd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut f64,
    taup: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgebrd.unwrap()(matrix_layout, m, n, a, lda, d, e, tauq, taup)
}

pub unsafe fn LAPACKE_dgebrd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut f64,
    taup: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgebrd_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        d,
        e,
        tauq,
        taup,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgecon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgecon.unwrap()(matrix_layout, norm, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_dgecon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgecon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgedmd(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    y: *mut f64,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    reig: *mut f64,
    imeig: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
    ldw: MKL_INT,
    s: *mut f64,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgedmd.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_dgedmd_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    y: *mut f64,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    reig: *mut f64,
    imeig: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
    ldw: MKL_INT,
    s: *mut f64,
    lds: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgedmd_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dgedmdq(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut f64,
    ldf: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    y: *mut f64,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    reig: *mut f64,
    imeig: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    s: *mut f64,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgedmdq.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_dgedmdq_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut f64,
    ldf: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    y: *mut f64,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    reig: *mut f64,
    imeig: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    s: *mut f64,
    lds: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgedmdq_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dgeequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeequ.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_dgeequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_dgeequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeequb.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_dgeequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_dgees(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_D_SELECT2,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vs: *mut f64,
    ldvs: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgees.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
    )
}

pub unsafe fn LAPACKE_dgees_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_D_SELECT2,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vs: *mut f64,
    ldvs: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgees_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
        work,
        lwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_dgeesx(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_D_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vs: *mut f64,
    ldvs: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeesx.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_dgeesx_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_D_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vs: *mut f64,
    ldvs: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeesx_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
        liwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_dgeev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_dgeev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgeevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
    abnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_dgeevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
    abnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgehrd(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgehrd.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_dgehrd_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgehrd_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgejsv(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sva: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    stat: *mut f64,
    istat: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgejsv.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        stat,
        istat,
    )
}

pub unsafe fn LAPACKE_dgejsv_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sva: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgejsv_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgelq2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelq2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgelq2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelq2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_dgelqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgelqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgels(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgels.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dgels_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgels_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgelsd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelsd.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_dgelsd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelsd_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgelss(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelss.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_dgelss_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelss_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgelsy(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f64,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelsy.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
    )
}

pub unsafe fn LAPACKE_dgelsy_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f64,
    rank: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelsy_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgemqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgemqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dgemqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgemqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_dgeqlf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqlf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgeqlf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqlf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgeqp3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqp3.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_dgeqp3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqp3_work.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgeqpf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqpf.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_dgeqpf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqpf_work.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau, work)
}

pub unsafe fn LAPACKE_dgeqr2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqr2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgeqr2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqr2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_dgeqrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgeqrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgeqrfp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrfp.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgeqrfp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrfp_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgeqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrt.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dgeqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrt2.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dgeqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrt2_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dgeqrt3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrt3.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dgeqrt3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrt3_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dgeqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqrt_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, work)
}

pub unsafe fn LAPACKE_dgerfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgerfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dgerfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgerfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgerfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgerfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dgerfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgerfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgerqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgerqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dgerqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgerqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dgesdd(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesdd.unwrap()(matrix_layout, jobz, m, n, a, lda, s, u, ldu, vt, ldvt)
}

pub unsafe fn LAPACKE_dgesdd_work(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesdd_work.unwrap()(
        matrix_layout,
        jobz,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgesv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesv.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dgesv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesv_work.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dgesvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    superb: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvd.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_dgesvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgesvdx(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    superb: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvdx.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_dgesvdx_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    vt: *mut f64,
    ldvt: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvdx_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgesvj(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sva: *mut f64,
    mv: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    stat: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvj.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        stat,
    )
}

pub unsafe fn LAPACKE_dgesvj_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    sva: *mut f64,
    mv: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvj_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgesvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    rpivot: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_dgesvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgesvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dgesvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgetf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetrf.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetrf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetrf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetrf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetrf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetrf_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetri(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetri.unwrap()(matrix_layout, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dgetri_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetri_work.unwrap()(matrix_layout, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_dgetrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetrs.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dgetrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetrs_work.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dggbak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f64,
    rscale: *const f64,
    m: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggbak.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_dggbak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f64,
    rscale: *const f64,
    m: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggbak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_dggbal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggbal.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
    )
}

pub unsafe fn LAPACKE_dggbal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggbal_work.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
        work,
    )
}

pub unsafe fn LAPACKE_dgges(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_D_SELECT3,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vsl: *mut f64,
    ldvsl: MKL_INT,
    vsr: *mut f64,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgges.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_dgges3(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_D_SELECT3,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vsl: *mut f64,
    ldvsl: MKL_INT,
    vsr: *mut f64,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgges3.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_dgges3_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_D_SELECT3,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vsl: *mut f64,
    ldvsl: MKL_INT,
    vsr: *mut f64,
    ldvsr: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgges3_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_dgges_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_D_SELECT3,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vsl: *mut f64,
    ldvsl: MKL_INT,
    vsr: *mut f64,
    ldvsr: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgges_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_dggesx(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_D_SELECT3,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vsl: *mut f64,
    ldvsl: MKL_INT,
    vsr: *mut f64,
    ldvsr: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggesx.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_dggesx_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_D_SELECT3,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vsl: *mut f64,
    ldvsl: MKL_INT,
    vsr: *mut f64,
    ldvsr: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggesx_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
        liwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_dggev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_dggev3(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggev3.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_dggev3_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggev3_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dggev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dggevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
    abnrm: *mut f64,
    bbnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_dggevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
    abnrm: *mut f64,
    bbnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_dggglm(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    d: *mut f64,
    x: *mut f64,
    y: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggglm.unwrap()(matrix_layout, n, m, p, a, lda, b, ldb, d, x, y)
}

pub unsafe fn LAPACKE_dggglm_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    d: *mut f64,
    x: *mut f64,
    y: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggglm_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        b,
        ldb,
        d,
        x,
        y,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgghd3(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgghd3.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dgghd3_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgghd3_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgghrd(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgghrd.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dgghrd_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgghrd_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dgglse(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    c: *mut f64,
    d: *mut f64,
    x: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgglse.unwrap()(matrix_layout, m, n, p, a, lda, b, ldb, c, d, x)
}

pub unsafe fn LAPACKE_dgglse_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    c: *mut f64,
    d: *mut f64,
    x: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgglse_work.unwrap()(
        matrix_layout,
        m,
        n,
        p,
        a,
        lda,
        b,
        ldb,
        c,
        d,
        x,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dggqrf(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    taua: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    taub: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggqrf.unwrap()(matrix_layout, n, m, p, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_dggqrf_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    taua: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    taub: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggqrf_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dggrqf(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    taua: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    taub: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggrqf.unwrap()(matrix_layout, m, p, n, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_dggrqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    taua: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    taub: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggrqf_work.unwrap()(
        matrix_layout,
        m,
        p,
        n,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dggsvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvd.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_dggsvd3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvd3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_dggsvd3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvd3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dggsvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dggsvp(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvp.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_dggsvp3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvp3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_dggsvp3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvp3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dggsvp_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    tau: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dggsvp_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        tau,
        work,
    )
}

pub unsafe fn LAPACKE_dgtcon(
    norm: c_char,
    n: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    du2: *const f64,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtcon.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_dgtcon_work(
    norm: c_char,
    n: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    du2: *const f64,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtcon_work.unwrap()(
        norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork,
    )
}

pub unsafe fn LAPACKE_dgtrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    dlf: *const f64,
    df: *const f64,
    duf: *const f64,
    du2: *const f64,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dgtrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    dlf: *const f64,
    df: *const f64,
    duf: *const f64,
    du2: *const f64,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgtsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut f64,
    d: *mut f64,
    du: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtsv.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_dgtsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut f64,
    d: *mut f64,
    du: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtsv_work.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_dgtsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    dlf: *mut f64,
    df: *mut f64,
    duf: *mut f64,
    du2: *mut f64,
    ipiv: *mut MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dgtsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    dlf: *mut f64,
    df: *mut f64,
    duf: *mut f64,
    du2: *mut f64,
    ipiv: *mut MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgtsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dgttrf(
    n: MKL_INT,
    dl: *mut f64,
    d: *mut f64,
    du: *mut f64,
    du2: *mut f64,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgttrf.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_dgttrf_work(
    n: MKL_INT,
    dl: *mut f64,
    d: *mut f64,
    du: *mut f64,
    du2: *mut f64,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgttrf_work.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_dgttrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    du2: *const f64,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgttrs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dgttrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    du2: *const f64,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgttrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dhgeqz(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f64,
    ldh: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dhgeqz.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dhgeqz_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f64,
    ldh: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dhgeqz_work.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dhsein(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    h: *const f64,
    ldh: MKL_INT,
    wr: *mut f64,
    wi: *const f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dhsein.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_dhsein_work(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    h: *const f64,
    ldh: MKL_INT,
    wr: *mut f64,
    wi: *const f64,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f64,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dhsein_work.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_dhseqr(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f64,
    ldh: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dhseqr.unwrap()(
        matrix_layout,
        job,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        wr,
        wi,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dhseqr_work(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f64,
    ldh: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dhseqr_work.unwrap()(
        matrix_layout,
        job,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        wr,
        wi,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dlacn2(
    n: MKL_INT,
    v: *mut f64,
    x: *mut f64,
    isgn: *mut MKL_INT,
    est: *mut f64,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlacn2.unwrap()(n, v, x, isgn, est, kase, isave)
}

pub unsafe fn LAPACKE_dlacn2_work(
    n: MKL_INT,
    v: *mut f64,
    x: *mut f64,
    isgn: *mut MKL_INT,
    est: *mut f64,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlacn2_work.unwrap()(n, v, x, isgn, est, kase, isave)
}

pub unsafe fn LAPACKE_dlacpy(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlacpy.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dlacpy_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlacpy_work.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dlag2s(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    sa: *mut f32,
    ldsa: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlag2s.unwrap()(matrix_layout, m, n, a, lda, sa, ldsa)
}

pub unsafe fn LAPACKE_dlag2s_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    sa: *mut f32,
    ldsa: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlag2s_work.unwrap()(matrix_layout, m, n, a, lda, sa, ldsa)
}

pub unsafe fn LAPACKE_dlagge(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f64,
    a: *mut f64,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlagge.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_dlagge_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f64,
    a: *mut f64,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlagge_work.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_dlagsy(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f64,
    a: *mut f64,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlagsy.unwrap()(matrix_layout, n, k, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_dlagsy_work(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f64,
    a: *mut f64,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlagsy_work.unwrap()(matrix_layout, n, k, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_dlapmr(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlapmr.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_dlapmr_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlapmr_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_dlapmt(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlapmt.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_dlapmt_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlapmt_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_dlarfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dlarfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_dlarfg(
    n: MKL_INT,
    alpha: *mut f64,
    x: *mut f64,
    incx: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarfg.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_dlarfg_work(
    n: MKL_INT,
    alpha: *mut f64,
    x: *mut f64,
    incx: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarfg_work.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_dlarft(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    tau: *const f64,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarft.unwrap()(matrix_layout, direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn LAPACKE_dlarft_work(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    tau: *const f64,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarft_work.unwrap()(
        matrix_layout,
        direct,
        storev,
        n,
        k,
        v,
        ldv,
        tau,
        t,
        ldt,
    )
}

pub unsafe fn LAPACKE_dlarfx(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const f64,
    tau: f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarfx.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_dlarfx_work(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const f64,
    tau: f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarfx_work.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_dlarnv(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarnv.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_dlarnv_work(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlarnv_work.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_dlartgp(f: f64, g: f64, cs: *mut f64, sn: *mut f64, r: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dlartgp.unwrap()(f, g, cs, sn, r)
}

pub unsafe fn LAPACKE_dlartgp_work(
    f: f64,
    g: f64,
    cs: *mut f64,
    sn: *mut f64,
    r: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlartgp_work.unwrap()(f, g, cs, sn, r)
}

pub unsafe fn LAPACKE_dlartgs(x: f64, y: f64, sigma: f64, cs: *mut f64, sn: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dlartgs.unwrap()(x, y, sigma, cs, sn)
}

pub unsafe fn LAPACKE_dlartgs_work(
    x: f64,
    y: f64,
    sigma: f64,
    cs: *mut f64,
    sn: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlartgs_work.unwrap()(x, y, sigma, cs, sn)
}

pub unsafe fn LAPACKE_dlascl(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f64,
    cto: f64,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlascl.unwrap()(matrix_layout, type_, kl, ku, cfrom, cto, m, n, a, lda)
}

pub unsafe fn LAPACKE_dlascl_work(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f64,
    cto: f64,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlascl_work.unwrap()(
        matrix_layout,
        type_,
        kl,
        ku,
        cfrom,
        cto,
        m,
        n,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_dlaset(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f64,
    beta: f64,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlaset.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_dlaset_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f64,
    beta: f64,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlaset_work.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_dlasrt(id: c_char, n: MKL_INT, d: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dlasrt.unwrap()(id, n, d)
}

pub unsafe fn LAPACKE_dlasrt_work(id: c_char, n: MKL_INT, d: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dlasrt_work.unwrap()(id, n, d)
}

pub unsafe fn LAPACKE_dlaswp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlaswp.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_dlaswp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlaswp_work.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_dlatms(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f64,
    mode: MKL_INT,
    cond: f64,
    dmax: f64,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlatms.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_dlatms_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f64,
    mode: MKL_INT,
    cond: f64,
    dmax: f64,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut f64,
    lda: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlatms_work.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
        work,
    )
}

pub unsafe fn LAPACKE_dlauum(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlauum.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dlauum_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dlauum_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dopgtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    tau: *const f64,
    q: *mut f64,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dopgtr.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq)
}

pub unsafe fn LAPACKE_dopgtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    tau: *const f64,
    q: *mut f64,
    ldq: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dopgtr_work.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq, work)
}

pub unsafe fn LAPACKE_dopmtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const f64,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dopmtr.unwrap()(matrix_layout, side, uplo, trans, m, n, ap, tau, c, ldc)
}

pub unsafe fn LAPACKE_dopmtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const f64,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dopmtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        ap,
        tau,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_dorbdb(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f64,
    ldx11: MKL_INT,
    x12: *mut f64,
    ldx12: MKL_INT,
    x21: *mut f64,
    ldx21: MKL_INT,
    x22: *mut f64,
    ldx22: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    taup1: *mut f64,
    taup2: *mut f64,
    tauq1: *mut f64,
    tauq2: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorbdb.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
    )
}

pub unsafe fn LAPACKE_dorbdb_work(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f64,
    ldx11: MKL_INT,
    x12: *mut f64,
    ldx12: MKL_INT,
    x21: *mut f64,
    ldx21: MKL_INT,
    x22: *mut f64,
    ldx22: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    taup1: *mut f64,
    taup2: *mut f64,
    tauq1: *mut f64,
    tauq2: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorbdb_work.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dorcsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f64,
    ldx11: MKL_INT,
    x12: *mut f64,
    ldx12: MKL_INT,
    x21: *mut f64,
    ldx21: MKL_INT,
    x22: *mut f64,
    ldx22: MKL_INT,
    theta: *mut f64,
    u1: *mut f64,
    ldu1: MKL_INT,
    u2: *mut f64,
    ldu2: MKL_INT,
    v1t: *mut f64,
    ldv1t: MKL_INT,
    v2t: *mut f64,
    ldv2t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorcsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
    )
}

pub unsafe fn LAPACKE_dorcsd2by1(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f64,
    ldx11: MKL_INT,
    x21: *mut f64,
    ldx21: MKL_INT,
    theta: *mut f64,
    u1: *mut f64,
    ldu1: MKL_INT,
    u2: *mut f64,
    ldu2: MKL_INT,
    v1t: *mut f64,
    ldv1t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorcsd2by1.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
    )
}

pub unsafe fn LAPACKE_dorcsd2by1_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f64,
    ldx11: MKL_INT,
    x21: *mut f64,
    ldx21: MKL_INT,
    theta: *mut f64,
    u1: *mut f64,
    ldu1: MKL_INT,
    u2: *mut f64,
    ldu2: MKL_INT,
    v1t: *mut f64,
    ldv1t: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorcsd2by1_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dorcsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f64,
    ldx11: MKL_INT,
    x12: *mut f64,
    ldx12: MKL_INT,
    x21: *mut f64,
    ldx21: MKL_INT,
    x22: *mut f64,
    ldx22: MKL_INT,
    theta: *mut f64,
    u1: *mut f64,
    ldu1: MKL_INT,
    u2: *mut f64,
    ldu2: MKL_INT,
    v1t: *mut f64,
    ldv1t: MKL_INT,
    v2t: *mut f64,
    ldv2t: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorcsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dorgbr(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgbr.unwrap()(matrix_layout, vect, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_dorgbr_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgbr_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        k,
        a,
        lda,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dorghr(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorghr.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_dorghr_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorghr_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dorglq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorglq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_dorglq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorglq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dorgql(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgql.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_dorgql_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgql_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dorgqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgqr.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_dorgqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgqr_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dorgrq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgrq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_dorgrq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgrq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dorgtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgtr.unwrap()(matrix_layout, uplo, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dorgtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *const f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgtr_work.unwrap()(matrix_layout, uplo, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_dormbr(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormbr.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dormbr_work(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormbr_work.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormhr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormhr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dormhr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormhr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormlq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_dormlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormql(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormql.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_dormql_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormql_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormqr.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_dormqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormrq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormrq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_dormrq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormrq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormrz(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormrz.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dormrz_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormrz_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dormtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormtr.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dormtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    tau: *const f64,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dormtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dpbcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbcon.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, anorm, rcond)
}

pub unsafe fn LAPACKE_dpbcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbcon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        ab,
        ldab,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dpbequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbequ.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_dpbequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbequ_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_dpbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    afb: *const f64,
    ldafb: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dpbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    afb: *const f64,
    ldafb: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dpbstf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbstf.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_dpbstf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbstf_work.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_dpbsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbsv.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_dpbsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbsv_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_dpbsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    afb: *mut f64,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dpbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    afb: *mut f64,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dpbtrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbtrf.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_dpbtrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbtrf_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_dpbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbtrs.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_dpbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpbtrs_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_dpftrf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpftrf.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_dpftrf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpftrf_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_dpftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpftri.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_dpftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpftri_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_dpftrs(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpftrs.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_dpftrs_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpftrs_work.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_dpocon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpocon.unwrap()(matrix_layout, uplo, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_dpocon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpocon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dpoequ(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpoequ.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_dpoequ_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpoequ_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_dpoequb(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpoequb.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_dpoequb_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpoequb_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_dporfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dporfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dporfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dporfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dporfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    s: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dporfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dporfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    s: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dporfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dposv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dposv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dposv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dposv_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dposvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dposvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dposvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dposvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dposvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dposvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dposvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dposvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dpotrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotrf.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dpotrf2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotrf2.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dpotrf2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotrf2_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dpotrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotrf_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dpotri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotri.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dpotri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotri_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_dpotrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dpotrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpotrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dppcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppcon.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond)
}

pub unsafe fn LAPACKE_dppcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppcon_work.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond, work, iwork)
}

pub unsafe fn LAPACKE_dppequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppequ.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_dppequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppequ_work.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_dpprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    afp: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dpprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    afp: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dppsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_dppsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_dppsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f64,
    afp: *mut f64,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dppsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f64,
    afp: *mut f64,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dppsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dpptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpptrf.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_dpptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpptrf_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_dpptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpptri.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_dpptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpptri_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_dpptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_dpptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_dpstrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpstrf.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol)
}

pub unsafe fn LAPACKE_dpstrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpstrf_work.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol, work)
}

pub unsafe fn LAPACKE_dptcon(
    n: MKL_INT,
    d: *const f64,
    e: *const f64,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptcon.unwrap()(n, d, e, anorm, rcond)
}

pub unsafe fn LAPACKE_dptcon_work(
    n: MKL_INT,
    d: *const f64,
    e: *const f64,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptcon_work.unwrap()(n, d, e, anorm, rcond, work)
}

pub unsafe fn LAPACKE_dpteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_dpteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_dptrfs(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const f64,
    df: *const f64,
    ef: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptrfs.unwrap()(
        matrix_layout,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dptrfs_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const f64,
    df: *const f64,
    ef: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptrfs_work.unwrap()(
        matrix_layout,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
    )
}

pub unsafe fn LAPACKE_dptsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptsv.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_dptsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptsv_work.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_dptsvx(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const f64,
    df: *mut f64,
    ef: *mut f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptsvx.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dptsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const f64,
    df: *mut f64,
    ef: *mut f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dptsvx_work.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
    )
}

pub unsafe fn LAPACKE_dpttrf(n: MKL_INT, d: *mut f64, e: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dpttrf.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_dpttrf_work(n: MKL_INT, d: *mut f64, e: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dpttrf_work.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_dpttrs(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpttrs.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_dpttrs_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dpttrs_work.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_dsbev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbev.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_dsbev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
    )
}

pub unsafe fn LAPACKE_dsbevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevd.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_dsbevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsbevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsbevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsbgst(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *const f64,
    ldbb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgst.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
    )
}

pub unsafe fn LAPACKE_dsbgst_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *const f64,
    ldbb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgst_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
        work,
    )
}

pub unsafe fn LAPACKE_dsbgv(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgv.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dsbgv_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgv_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
    )
}

pub unsafe fn LAPACKE_dsbgvd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgvd.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dsbgvd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgvd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsbgvx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgvx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsbgvx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    bb: *mut f64,
    ldbb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbgvx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsbtrd(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbtrd.unwrap()(matrix_layout, vect, uplo, n, kd, ab, ldab, d, e, q, ldq)
}

pub unsafe fn LAPACKE_dsbtrd_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbtrd_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        kd,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        work,
    )
}

pub unsafe fn LAPACKE_dsfrk(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f64,
    a: *const f64,
    lda: MKL_INT,
    beta: f64,
    c: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsfrk.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_dsfrk_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f64,
    a: *const f64,
    lda: MKL_INT,
    beta: f64,
    c: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsfrk_work.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_dsgesv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsgesv.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb, x, ldx, iter)
}

pub unsafe fn LAPACKE_dsgesv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    work: *mut f64,
    swork: *mut f32,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsgesv_work.unwrap()(
        matrix_layout,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        work,
        swork,
        iter,
    )
}

pub unsafe fn LAPACKE_dspcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspcon.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_dspcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspcon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        ap,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dspev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspev.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_dspev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspev_work.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz, work)
}

pub unsafe fn LAPACKE_dspevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspevd.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_dspevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ap,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dspevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dspevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dspgst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgst.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_dspgst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *const f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgst_work.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_dspgv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgv.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_dspgv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
    )
}

pub unsafe fn LAPACKE_dspgvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgvd.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_dspgvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *mut f64,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dspgvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dspgvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    bp: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspgvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsposv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsposv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb, x, ldx, iter)
}

pub unsafe fn LAPACKE_dsposv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    work: *mut f64,
    swork: *mut f32,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsposv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        work,
        swork,
        iter,
    )
}

pub unsafe fn LAPACKE_dsprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    afp: *const f64,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dsprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    afp: *const f64,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dspsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f64,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dspsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f64,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dspsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    afp: *mut f64,
    ipiv: *mut MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dspsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    afp: *mut f64,
    ipiv: *mut MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dspsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsptrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    d: *mut f64,
    e: *mut f64,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptrd.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_dsptrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    d: *mut f64,
    e: *mut f64,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptrd_work.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_dsptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptrf.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_dsptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptrf_work.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_dsptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptri.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_dsptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f64,
    ipiv: *const MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptri_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, work)
}

pub unsafe fn LAPACKE_dsptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dstebz(
    range: c_char,
    order: c_char,
    n: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    d: *const f64,
    e: *const f64,
    m: *mut MKL_INT,
    nsplit: *mut MKL_INT,
    w: *mut f64,
    iblock: *mut MKL_INT,
    isplit: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstebz.unwrap()(
        range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit,
    )
}

pub unsafe fn LAPACKE_dstebz_work(
    range: c_char,
    order: c_char,
    n: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    d: *const f64,
    e: *const f64,
    m: *mut MKL_INT,
    nsplit: *mut MKL_INT,
    w: *mut f64,
    iblock: *mut MKL_INT,
    isplit: *mut MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstebz_work.unwrap()(
        range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork,
    )
}

pub unsafe fn LAPACKE_dstedc(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstedc.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_dstedc_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstedc_work.unwrap()(
        matrix_layout,
        compz,
        n,
        d,
        e,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dstegr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstegr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_dstegr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstegr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dstein(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f64,
    e: *const f64,
    m: MKL_INT,
    w: *const f64,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstein.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        ifailv,
    )
}

pub unsafe fn LAPACKE_dstein_work(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f64,
    e: *const f64,
    m: MKL_INT,
    w: *const f64,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstein_work.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        work,
        iwork,
        ifailv,
    )
}

pub unsafe fn LAPACKE_dstemr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstemr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
    )
}

pub unsafe fn LAPACKE_dstemr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstemr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_dsteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_dsterf(n: MKL_INT, d: *mut f64, e: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dsterf.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_dsterf_work(n: MKL_INT, d: *mut f64, e: *mut f64) -> MKL_INT {
    dyload_lib().LAPACKE_dsterf_work.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_dstev(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstev.unwrap()(matrix_layout, jobz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_dstev_work(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstev_work.unwrap()(matrix_layout, jobz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_dstevd(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstevd.unwrap()(matrix_layout, jobz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_dstevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstevd_work.unwrap()(
        matrix_layout,
        jobz,
        n,
        d,
        e,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dstevr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstevr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_dstevr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstevr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dstevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dstevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dstevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsycon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsycon.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_dsycon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsycon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsyconv(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyconv.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_dsyconv_work(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyconv_work.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_dsyequb(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyequb.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_dsyequb_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyequb_work.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax, work)
}

pub unsafe fn LAPACKE_dsyev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyev.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_dsyev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyev_work.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork)
}

pub unsafe fn LAPACKE_dsyevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevd.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_dsyevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsyevr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevr.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_dsyevr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsyevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsyevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsygst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygst.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dsygst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygst_work.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dsygv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygv.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_dsygv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsygvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygvd.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_dsygvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsygvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsygvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsyrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dsyrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsyrfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyrfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dsyrfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *const f64,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyrfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsysv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsysv_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsysv_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsysv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsysvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dsysvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsysvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_dsysvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    af: *mut f64,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut f64,
    ldb: MKL_INT,
    x: *mut f64,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsyswapr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyswapr.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_dsyswapr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyswapr_work.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_dsytrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrd.unwrap()(matrix_layout, uplo, n, a, lda, d, e, tau)
}

pub unsafe fn LAPACKE_dsytrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrd_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        d,
        e,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dsytrf_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_rook.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dsytrf_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_dsytri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dsytri2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri2.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dsytri2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri2_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_dsytri2x(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri2x.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, nb)
}

pub unsafe fn LAPACKE_dsytri2x_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f64,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri2x_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, nb)
}

pub unsafe fn LAPACKE_dsytri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work)
}

pub unsafe fn LAPACKE_dsytrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsytrs2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs2.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsytrs2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs2_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_dsytrs_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsytrs_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dsytrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dtbcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtbcon.unwrap()(matrix_layout, norm, uplo, diag, n, kd, ab, ldab, rcond)
}

pub unsafe fn LAPACKE_dtbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtbcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        kd,
        ab,
        ldab,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *const f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtbrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dtbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *const f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtbtrs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f64,
    ldab: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtbtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtfsm(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f64,
    a: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtfsm.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtfsm_work(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f64,
    a: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtfsm_work.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtftri.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_dtftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtftri_work.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_dtfttp(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f64,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtfttp.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_dtfttp_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f64,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtfttp_work.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_dtfttr(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f64,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtfttr.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_dtfttr_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f64,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtfttr_work.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_dtgevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const f64,
    lds: MKL_INT,
    p: *const f64,
    ldp: MKL_INT,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_dtgevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const f64,
    lds: MKL_INT,
    p: *const f64,
    ldp: MKL_INT,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
    )
}

pub unsafe fn LAPACKE_dtgexc(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgexc.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
    )
}

pub unsafe fn LAPACKE_dtgexc_work(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgexc_work.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dtgsen(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f64,
    pr: *mut f64,
    dif: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsen.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
    )
}

pub unsafe fn LAPACKE_dtgsen_work(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    alphar: *mut f64,
    alphai: *mut f64,
    beta: *mut f64,
    q: *mut f64,
    ldq: MKL_INT,
    z: *mut f64,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f64,
    pr: *mut f64,
    dif: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsen_work.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dtgsja(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsja.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        ncycle,
    )
}

pub unsafe fn LAPACKE_dtgsja_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    work: *mut f64,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsja_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        ncycle,
    )
}

pub unsafe fn LAPACKE_dtgsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    vl: *const f64,
    ldvl: MKL_INT,
    vr: *const f64,
    ldvr: MKL_INT,
    s: *mut f64,
    dif: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_dtgsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    vl: *const f64,
    ldvl: MKL_INT,
    vr: *const f64,
    ldvr: MKL_INT,
    s: *mut f64,
    dif: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtgsyl(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    d: *const f64,
    ldd: MKL_INT,
    e: *const f64,
    lde: MKL_INT,
    f: *mut f64,
    ldf: MKL_INT,
    scale: *mut f64,
    dif: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsyl.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
    )
}

pub unsafe fn LAPACKE_dtgsyl_work(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    d: *const f64,
    ldd: MKL_INT,
    e: *const f64,
    lde: MKL_INT,
    f: *mut f64,
    ldf: MKL_INT,
    scale: *mut f64,
    dif: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtgsyl_work.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtpcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpcon.unwrap()(matrix_layout, norm, uplo, diag, n, ap, rcond)
}

pub unsafe fn LAPACKE_dtpcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        ap,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtpmqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpmqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtpmqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpmqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_dtpqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpqrt.unwrap()(matrix_layout, m, n, l, nb, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_dtpqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpqrt2.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_dtpqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpqrt2_work.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_dtpqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpqrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        l,
        nb,
        a,
        lda,
        b,
        ldb,
        t,
        ldt,
        work,
    )
}

pub unsafe fn LAPACKE_dtprfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtprfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtprfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const f64,
    ldv: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtprfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_dtprfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *const f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtprfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dtprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    b: *const f64,
    ldb: MKL_INT,
    x: *const f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtprfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtptri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtptri.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_dtptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtptri_work.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_dtptrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtptrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_dtptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f64,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtptrs_work.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_dtpttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    arf: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpttf.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_dtpttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    arf: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpttf_work.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_dtpttr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpttr.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_dtpttr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f64,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtpttr_work.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_dtrcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrcon.unwrap()(matrix_layout, norm, uplo, diag, n, a, lda, rcond)
}

pub unsafe fn LAPACKE_dtrcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        a,
        lda,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtrevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_dtrevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    vl: *mut f64,
    ldvl: MKL_INT,
    vr: *mut f64,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
    )
}

pub unsafe fn LAPACKE_dtrexc(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrexc.unwrap()(matrix_layout, compq, n, t, ldt, q, ldq, ifst, ilst)
}

pub unsafe fn LAPACKE_dtrexc_work(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrexc_work.unwrap()(
        matrix_layout,
        compq,
        n,
        t,
        ldt,
        q,
        ldq,
        ifst,
        ilst,
        work,
    )
}

pub unsafe fn LAPACKE_dtrrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *const f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_dtrrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    x: *const f64,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtrsen(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    m: *mut MKL_INT,
    s: *mut f64,
    sep: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsen.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        wr,
        wi,
        m,
        s,
        sep,
    )
}

pub unsafe fn LAPACKE_dtrsen_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    wr: *mut f64,
    wi: *mut f64,
    m: *mut MKL_INT,
    s: *mut f64,
    sep: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsen_work.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        wr,
        wi,
        m,
        s,
        sep,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dtrsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    vl: *const f64,
    ldvl: MKL_INT,
    vr: *const f64,
    ldvr: MKL_INT,
    s: *mut f64,
    sep: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_dtrsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const f64,
    ldt: MKL_INT,
    vl: *const f64,
    ldvl: MKL_INT,
    vr: *const f64,
    ldvr: MKL_INT,
    s: *mut f64,
    sep: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f64,
    ldwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
        work,
        ldwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_dtrsyl(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsyl.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_dtrsyl_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsyl_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_dtrsyl3(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsyl3.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_dtrsyl3_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *const f64,
    ldb: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    scale: *mut f64,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    swork: *mut f64,
    ldswork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrsyl3_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
        iwork,
        liwork,
        swork,
        ldswork,
    )
}

pub unsafe fn LAPACKE_dtrtri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrtri.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_dtrtri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrtri_work.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_dtrtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrtrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dtrtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dtrttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    arf: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrttf.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_dtrttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    arf: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrttf_work.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_dtrttp(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrttp.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_dtrttp_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ap: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtrttp_work.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_dtzrzf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtzrzf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_dtzrzf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tau: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dtzrzf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_mkl_cgetrfnpi(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_cgetrfnpi.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_cgetrfnpi_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_cgetrfnpi_work.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_ctppack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ctppack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_ctppack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex8,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ctppack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_ctpunpack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ctpunpack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_ctpunpack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex8,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ctpunpack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_dgetrfnpi(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dgetrfnpi.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_dgetrfnpi_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dgetrfnpi_work.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_dtppack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut f64,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dtppack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_dtppack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut f64,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dtppack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_dtpunpack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const f64,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dtpunpack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_dtpunpack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const f64,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dtpunpack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_sgetrfnpi(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_sgetrfnpi.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_sgetrfnpi_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_sgetrfnpi_work.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_stppack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut f32,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_stppack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_stppack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut f32,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_stppack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_stpunpack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const f32,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_stpunpack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_stpunpack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const f32,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_stpunpack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_zgetrfnpi(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_zgetrfnpi.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_zgetrfnpi_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nfact: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_zgetrfnpi_work.unwrap()(matrix_layout, m, n, nfact, a, lda)
}

pub unsafe fn LAPACKE_mkl_ztppack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ztppack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_ztppack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ztppack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_ztpunpack(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ztpunpack.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_mkl_ztpunpack_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    i: MKL_INT,
    j: MKL_INT,
    rows: MKL_INT,
    cols: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_ztpunpack_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        n,
        ap,
        i,
        j,
        rows,
        cols,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_sbbcsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    u1: *mut f32,
    ldu1: MKL_INT,
    u2: *mut f32,
    ldu2: MKL_INT,
    v1t: *mut f32,
    ldv1t: MKL_INT,
    v2t: *mut f32,
    ldv2t: MKL_INT,
    b11d: *mut f32,
    b11e: *mut f32,
    b12d: *mut f32,
    b12e: *mut f32,
    b21d: *mut f32,
    b21e: *mut f32,
    b22d: *mut f32,
    b22e: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbbcsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
    )
}

pub unsafe fn LAPACKE_sbbcsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    u1: *mut f32,
    ldu1: MKL_INT,
    u2: *mut f32,
    ldu2: MKL_INT,
    v1t: *mut f32,
    ldv1t: MKL_INT,
    v2t: *mut f32,
    ldv2t: MKL_INT,
    b11d: *mut f32,
    b11e: *mut f32,
    b12d: *mut f32,
    b12e: *mut f32,
    b21d: *mut f32,
    b21e: *mut f32,
    b22d: *mut f32,
    b22e: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbbcsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sbdsdc(
    matrix_layout: c_int,
    uplo: c_char,
    compq: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    q: *mut f32,
    iq: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbdsdc.unwrap()(
        matrix_layout,
        uplo,
        compq,
        n,
        d,
        e,
        u,
        ldu,
        vt,
        ldvt,
        q,
        iq,
    )
}

pub unsafe fn LAPACKE_sbdsdc_work(
    matrix_layout: c_int,
    uplo: c_char,
    compq: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    q: *mut f32,
    iq: *mut MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbdsdc_work.unwrap()(
        matrix_layout,
        uplo,
        compq,
        n,
        d,
        e,
        u,
        ldu,
        vt,
        ldvt,
        q,
        iq,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sbdsqr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vt: *mut f32,
    ldvt: MKL_INT,
    u: *mut f32,
    ldu: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbdsqr.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sbdsqr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vt: *mut f32,
    ldvt: MKL_INT,
    u: *mut f32,
    ldu: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbdsqr_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_sbdsvdx(
    matrix_layout: c_int,
    uplo: c_char,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    superb: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbdsvdx.unwrap()(
        matrix_layout,
        uplo,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        z,
        ldz,
        superb,
    )
}

pub unsafe fn LAPACKE_sbdsvdx_work(
    matrix_layout: c_int,
    uplo: c_char,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sbdsvdx_work.unwrap()(
        matrix_layout,
        uplo,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        z,
        ldz,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sdisna(
    job: c_char,
    m: MKL_INT,
    n: MKL_INT,
    d: *const f32,
    sep: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sdisna.unwrap()(job, m, n, d, sep)
}

pub unsafe fn LAPACKE_sdisna_work(
    job: c_char,
    m: MKL_INT,
    n: MKL_INT,
    d: *const f32,
    sep: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sdisna_work.unwrap()(job, m, n, d, sep)
}

pub unsafe fn LAPACKE_sgbbrd(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    pt: *mut f32,
    ldpt: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbbrd.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sgbbrd_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    pt: *mut f32,
    ldpt: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbbrd_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_sgbcon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbcon.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
    )
}

pub unsafe fn LAPACKE_sgbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbcon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgbequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbequ.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_sgbequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_sgbequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbequb.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_sgbequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_sgbrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    afb: *const f32,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sgbrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    afb: *const f32,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgbrfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    afb: *const f32,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbrfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_sgbrfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    afb: *const f32,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbrfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgbsv(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbsv.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sgbsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbsv_work.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sgbsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    afb: *mut f32,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    rpivot: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_sgbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    afb: *mut f32,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgbsvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    afb: *mut f32,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbsvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_sgbsvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    afb: *mut f32,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbsvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgbtrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbtrf.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_sgbtrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbtrf_work.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_sgbtrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbtrs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_sgbtrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgbtrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_sgebak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f32,
    m: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgebak.unwrap()(matrix_layout, job, side, n, ilo, ihi, scale, m, v, ldv)
}

pub unsafe fn LAPACKE_sgebak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f32,
    m: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgebak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        scale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_sgebal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgebal.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_sgebal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgebal_work.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_sgebrd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut f32,
    taup: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgebrd.unwrap()(matrix_layout, m, n, a, lda, d, e, tauq, taup)
}

pub unsafe fn LAPACKE_sgebrd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut f32,
    taup: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgebrd_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        d,
        e,
        tauq,
        taup,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgecon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgecon.unwrap()(matrix_layout, norm, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_sgecon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgecon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgedmd(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    y: *mut f32,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    reig: *mut f32,
    imeig: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
    ldw: MKL_INT,
    s: *mut f32,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgedmd.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_sgedmd_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    y: *mut f32,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    reig: *mut f32,
    imeig: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
    ldw: MKL_INT,
    s: *mut f32,
    lds: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgedmd_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sgedmdq(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut f32,
    ldf: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    y: *mut f32,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    reig: *mut f32,
    imeig: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    s: *mut f32,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgedmdq.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_sgedmdq_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut f32,
    ldf: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    y: *mut f32,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f32,
    k: MKL_INT,
    reig: *mut f32,
    imeig: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    res: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    s: *mut f32,
    lds: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgedmdq_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        reig,
        imeig,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sgeequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeequ.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_sgeequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_sgeequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeequb.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_sgeequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    r: *mut f32,
    c: *mut f32,
    rowcnd: *mut f32,
    colcnd: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_sgees(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_S_SELECT2,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vs: *mut f32,
    ldvs: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgees.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
    )
}

pub unsafe fn LAPACKE_sgees_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_S_SELECT2,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vs: *mut f32,
    ldvs: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgees_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
        work,
        lwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_sgeesx(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_S_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vs: *mut f32,
    ldvs: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeesx.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_sgeesx_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_S_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vs: *mut f32,
    ldvs: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeesx_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        wr,
        wi,
        vs,
        ldvs,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
        liwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_sgeev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_sgeev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgeevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
    abnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_sgeevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f32,
    abnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgehrd(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgehrd.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_sgehrd_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgehrd_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgejsv(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sva: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    stat: *mut f32,
    istat: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgejsv.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        stat,
        istat,
    )
}

pub unsafe fn LAPACKE_sgejsv_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sva: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgejsv_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgelq2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelq2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgelq2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelq2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_sgelqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgelqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgels(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgels.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_sgels_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgels_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgelsd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelsd.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_sgelsd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelsd_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgelss(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelss.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_sgelss_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    s: *mut f32,
    rcond: f32,
    rank: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelss_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgelsy(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f32,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelsy.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
    )
}

pub unsafe fn LAPACKE_sgelsy_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f32,
    rank: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelsy_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgemqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgemqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sgemqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgemqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_sgeqlf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqlf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgeqlf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqlf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgeqp3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqp3.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_sgeqp3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqp3_work.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgeqpf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqpf.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_sgeqpf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqpf_work.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau, work)
}

pub unsafe fn LAPACKE_sgeqr2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqr2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgeqr2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqr2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_sgeqrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgeqrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgeqrfp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrfp.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgeqrfp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrfp_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgeqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrt.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sgeqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrt2.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sgeqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrt2_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sgeqrt3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrt3.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sgeqrt3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrt3_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sgeqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqrt_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, work)
}

pub unsafe fn LAPACKE_sgerfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgerfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sgerfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgerfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgerfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgerfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_sgerfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f32,
    c: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgerfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgerqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgerqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sgerqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgerqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sgesdd(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesdd.unwrap()(matrix_layout, jobz, m, n, a, lda, s, u, ldu, vt, ldvt)
}

pub unsafe fn LAPACKE_sgesdd_work(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesdd_work.unwrap()(
        matrix_layout,
        jobz,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgesv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesv.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sgesv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesv_work.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sgesvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    superb: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvd.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_sgesvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgesvdx(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    superb: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvdx.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_sgesvdx_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    vt: *mut f32,
    ldvt: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvdx_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgesvj(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sva: *mut f32,
    mv: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    stat: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvj.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        stat,
    )
}

pub unsafe fn LAPACKE_sgesvj_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    sva: *mut f32,
    mv: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvj_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgesvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    rpivot: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_sgesvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgesvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_sgesvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f32,
    c: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgetf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetrf.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetrf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetrf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetrf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetrf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetrf_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetri(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetri.unwrap()(matrix_layout, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_sgetri_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetri_work.unwrap()(matrix_layout, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_sgetrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetrs.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sgetrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetrs_work.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sggbak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f32,
    rscale: *const f32,
    m: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggbak.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_sggbak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f32,
    rscale: *const f32,
    m: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggbak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_sggbal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggbal.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
    )
}

pub unsafe fn LAPACKE_sggbal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggbal_work.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
        work,
    )
}

pub unsafe fn LAPACKE_sgges(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_S_SELECT3,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vsl: *mut f32,
    ldvsl: MKL_INT,
    vsr: *mut f32,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgges.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_sgges3(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_S_SELECT3,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vsl: *mut f32,
    ldvsl: MKL_INT,
    vsr: *mut f32,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgges3.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_sgges3_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_S_SELECT3,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vsl: *mut f32,
    ldvsl: MKL_INT,
    vsr: *mut f32,
    ldvsr: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgges3_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_sgges_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_S_SELECT3,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vsl: *mut f32,
    ldvsl: MKL_INT,
    vsr: *mut f32,
    ldvsr: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgges_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_sggesx(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_S_SELECT3,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vsl: *mut f32,
    ldvsl: MKL_INT,
    vsr: *mut f32,
    ldvsr: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggesx.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_sggesx_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_S_SELECT3,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vsl: *mut f32,
    ldvsl: MKL_INT,
    vsr: *mut f32,
    ldvsr: MKL_INT,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggesx_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alphar,
        alphai,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
        liwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_sggev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_sggev3(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggev3.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_sggev3_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggev3_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sggev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sggevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
    abnrm: *mut f32,
    bbnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_sggevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f32,
    rscale: *mut f32,
    abnrm: *mut f32,
    bbnrm: *mut f32,
    rconde: *mut f32,
    rcondv: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
        work,
        lwork,
        iwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_sggglm(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    d: *mut f32,
    x: *mut f32,
    y: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggglm.unwrap()(matrix_layout, n, m, p, a, lda, b, ldb, d, x, y)
}

pub unsafe fn LAPACKE_sggglm_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    d: *mut f32,
    x: *mut f32,
    y: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggglm_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        b,
        ldb,
        d,
        x,
        y,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgghd3(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgghd3.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_sgghd3_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgghd3_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgghrd(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgghrd.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_sgghrd_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgghrd_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_sgglse(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    c: *mut f32,
    d: *mut f32,
    x: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgglse.unwrap()(matrix_layout, m, n, p, a, lda, b, ldb, c, d, x)
}

pub unsafe fn LAPACKE_sgglse_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    c: *mut f32,
    d: *mut f32,
    x: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgglse_work.unwrap()(
        matrix_layout,
        m,
        n,
        p,
        a,
        lda,
        b,
        ldb,
        c,
        d,
        x,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sggqrf(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    taua: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    taub: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggqrf.unwrap()(matrix_layout, n, m, p, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_sggqrf_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    taua: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    taub: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggqrf_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sggrqf(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    taua: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    taub: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggrqf.unwrap()(matrix_layout, m, p, n, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_sggrqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    taua: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    taub: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggrqf_work.unwrap()(
        matrix_layout,
        m,
        p,
        n,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sggsvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvd.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_sggsvd3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvd3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_sggsvd3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvd3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sggsvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sggsvp(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvp.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_sggsvp3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvp3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_sggsvp3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvp3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sggsvp_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    tau: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sggsvp_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        tau,
        work,
    )
}

pub unsafe fn LAPACKE_sgtcon(
    norm: c_char,
    n: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    du2: *const f32,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtcon.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_sgtcon_work(
    norm: c_char,
    n: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    du2: *const f32,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtcon_work.unwrap()(
        norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork,
    )
}

pub unsafe fn LAPACKE_sgtrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    dlf: *const f32,
    df: *const f32,
    duf: *const f32,
    du2: *const f32,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sgtrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    dlf: *const f32,
    df: *const f32,
    duf: *const f32,
    du2: *const f32,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgtsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut f32,
    d: *mut f32,
    du: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtsv.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_sgtsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut f32,
    d: *mut f32,
    du: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtsv_work.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_sgtsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    dlf: *mut f32,
    df: *mut f32,
    duf: *mut f32,
    du2: *mut f32,
    ipiv: *mut MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sgtsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    dlf: *mut f32,
    df: *mut f32,
    duf: *mut f32,
    du2: *mut f32,
    ipiv: *mut MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgtsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sgttrf(
    n: MKL_INT,
    dl: *mut f32,
    d: *mut f32,
    du: *mut f32,
    du2: *mut f32,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgttrf.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_sgttrf_work(
    n: MKL_INT,
    dl: *mut f32,
    d: *mut f32,
    du: *mut f32,
    du2: *mut f32,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgttrf_work.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_sgttrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    du2: *const f32,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgttrs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_sgttrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    du2: *const f32,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgttrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_shgeqz(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f32,
    ldh: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_shgeqz.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_shgeqz_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f32,
    ldh: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_shgeqz_work.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_shsein(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    h: *const f32,
    ldh: MKL_INT,
    wr: *mut f32,
    wi: *const f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_shsein.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_shsein_work(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    h: *const f32,
    ldh: MKL_INT,
    wr: *mut f32,
    wi: *const f32,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f32,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_shsein_work.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        wr,
        wi,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_shseqr(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f32,
    ldh: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_shseqr.unwrap()(
        matrix_layout,
        job,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        wr,
        wi,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_shseqr_work(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut f32,
    ldh: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_shseqr_work.unwrap()(
        matrix_layout,
        job,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        wr,
        wi,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_slacn2(
    n: MKL_INT,
    v: *mut f32,
    x: *mut f32,
    isgn: *mut MKL_INT,
    est: *mut f32,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slacn2.unwrap()(n, v, x, isgn, est, kase, isave)
}

pub unsafe fn LAPACKE_slacn2_work(
    n: MKL_INT,
    v: *mut f32,
    x: *mut f32,
    isgn: *mut MKL_INT,
    est: *mut f32,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slacn2_work.unwrap()(n, v, x, isgn, est, kase, isave)
}

pub unsafe fn LAPACKE_slacpy(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slacpy.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_slacpy_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slacpy_work.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_slag2d(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    sa: *const f32,
    ldsa: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slag2d.unwrap()(matrix_layout, m, n, sa, ldsa, a, lda)
}

pub unsafe fn LAPACKE_slag2d_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    sa: *const f32,
    ldsa: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slag2d_work.unwrap()(matrix_layout, m, n, sa, ldsa, a, lda)
}

pub unsafe fn LAPACKE_slagge(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f32,
    a: *mut f32,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slagge.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_slagge_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f32,
    a: *mut f32,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slagge_work.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_slagsy(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f32,
    a: *mut f32,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slagsy.unwrap()(matrix_layout, n, k, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_slagsy_work(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f32,
    a: *mut f32,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slagsy_work.unwrap()(matrix_layout, n, k, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_slapmr(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slapmr.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_slapmr_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slapmr_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_slapmt(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slapmt.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_slapmt_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slapmt_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_slarfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_slarfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_slarfg(
    n: MKL_INT,
    alpha: *mut f32,
    x: *mut f32,
    incx: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarfg.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_slarfg_work(
    n: MKL_INT,
    alpha: *mut f32,
    x: *mut f32,
    incx: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarfg_work.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_slarft(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    tau: *const f32,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarft.unwrap()(matrix_layout, direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn LAPACKE_slarft_work(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    tau: *const f32,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarft_work.unwrap()(
        matrix_layout,
        direct,
        storev,
        n,
        k,
        v,
        ldv,
        tau,
        t,
        ldt,
    )
}

pub unsafe fn LAPACKE_slarfx(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const f32,
    tau: f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarfx.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_slarfx_work(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const f32,
    tau: f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarfx_work.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_slarnv(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarnv.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_slarnv_work(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slarnv_work.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_slartgp(f: f32, g: f32, cs: *mut f32, sn: *mut f32, r: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_slartgp.unwrap()(f, g, cs, sn, r)
}

pub unsafe fn LAPACKE_slartgp_work(
    f: f32,
    g: f32,
    cs: *mut f32,
    sn: *mut f32,
    r: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slartgp_work.unwrap()(f, g, cs, sn, r)
}

pub unsafe fn LAPACKE_slartgs(x: f32, y: f32, sigma: f32, cs: *mut f32, sn: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_slartgs.unwrap()(x, y, sigma, cs, sn)
}

pub unsafe fn LAPACKE_slartgs_work(
    x: f32,
    y: f32,
    sigma: f32,
    cs: *mut f32,
    sn: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slartgs_work.unwrap()(x, y, sigma, cs, sn)
}

pub unsafe fn LAPACKE_slascl(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f32,
    cto: f32,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slascl.unwrap()(matrix_layout, type_, kl, ku, cfrom, cto, m, n, a, lda)
}

pub unsafe fn LAPACKE_slascl_work(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f32,
    cto: f32,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slascl_work.unwrap()(
        matrix_layout,
        type_,
        kl,
        ku,
        cfrom,
        cto,
        m,
        n,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_slaset(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f32,
    beta: f32,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slaset.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_slaset_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f32,
    beta: f32,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slaset_work.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_slasrt(id: c_char, n: MKL_INT, d: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_slasrt.unwrap()(id, n, d)
}

pub unsafe fn LAPACKE_slasrt_work(id: c_char, n: MKL_INT, d: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_slasrt_work.unwrap()(id, n, d)
}

pub unsafe fn LAPACKE_slaswp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slaswp.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_slaswp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slaswp_work.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_slatms(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f32,
    mode: MKL_INT,
    cond: f32,
    dmax: f32,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slatms.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_slatms_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f32,
    mode: MKL_INT,
    cond: f32,
    dmax: f32,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut f32,
    lda: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_slatms_work.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
        work,
    )
}

pub unsafe fn LAPACKE_slauum(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slauum.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_slauum_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_slauum_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_sopgtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    tau: *const f32,
    q: *mut f32,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sopgtr.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq)
}

pub unsafe fn LAPACKE_sopgtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    tau: *const f32,
    q: *mut f32,
    ldq: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sopgtr_work.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq, work)
}

pub unsafe fn LAPACKE_sopmtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const f32,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sopmtr.unwrap()(matrix_layout, side, uplo, trans, m, n, ap, tau, c, ldc)
}

pub unsafe fn LAPACKE_sopmtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const f32,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sopmtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        ap,
        tau,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_sorbdb(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f32,
    ldx11: MKL_INT,
    x12: *mut f32,
    ldx12: MKL_INT,
    x21: *mut f32,
    ldx21: MKL_INT,
    x22: *mut f32,
    ldx22: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    taup1: *mut f32,
    taup2: *mut f32,
    tauq1: *mut f32,
    tauq2: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorbdb.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
    )
}

pub unsafe fn LAPACKE_sorbdb_work(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f32,
    ldx11: MKL_INT,
    x12: *mut f32,
    ldx12: MKL_INT,
    x21: *mut f32,
    ldx21: MKL_INT,
    x22: *mut f32,
    ldx22: MKL_INT,
    theta: *mut f32,
    phi: *mut f32,
    taup1: *mut f32,
    taup2: *mut f32,
    tauq1: *mut f32,
    tauq2: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorbdb_work.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sorcsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f32,
    ldx11: MKL_INT,
    x12: *mut f32,
    ldx12: MKL_INT,
    x21: *mut f32,
    ldx21: MKL_INT,
    x22: *mut f32,
    ldx22: MKL_INT,
    theta: *mut f32,
    u1: *mut f32,
    ldu1: MKL_INT,
    u2: *mut f32,
    ldu2: MKL_INT,
    v1t: *mut f32,
    ldv1t: MKL_INT,
    v2t: *mut f32,
    ldv2t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorcsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
    )
}

pub unsafe fn LAPACKE_sorcsd2by1(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f32,
    ldx11: MKL_INT,
    x21: *mut f32,
    ldx21: MKL_INT,
    theta: *mut f32,
    u1: *mut f32,
    ldu1: MKL_INT,
    u2: *mut f32,
    ldu2: MKL_INT,
    v1t: *mut f32,
    ldv1t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorcsd2by1.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
    )
}

pub unsafe fn LAPACKE_sorcsd2by1_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f32,
    ldx11: MKL_INT,
    x21: *mut f32,
    ldx21: MKL_INT,
    theta: *mut f32,
    u1: *mut f32,
    ldu1: MKL_INT,
    u2: *mut f32,
    ldu2: MKL_INT,
    v1t: *mut f32,
    ldv1t: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorcsd2by1_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sorcsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut f32,
    ldx11: MKL_INT,
    x12: *mut f32,
    ldx12: MKL_INT,
    x21: *mut f32,
    ldx21: MKL_INT,
    x22: *mut f32,
    ldx22: MKL_INT,
    theta: *mut f32,
    u1: *mut f32,
    ldu1: MKL_INT,
    u2: *mut f32,
    ldu2: MKL_INT,
    v1t: *mut f32,
    ldv1t: MKL_INT,
    v2t: *mut f32,
    ldv2t: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorcsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_sorgbr(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgbr.unwrap()(matrix_layout, vect, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_sorgbr_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgbr_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        k,
        a,
        lda,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sorghr(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorghr.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_sorghr_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorghr_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sorglq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorglq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_sorglq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorglq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sorgql(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgql.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_sorgql_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgql_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sorgqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgqr.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_sorgqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgqr_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sorgrq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgrq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_sorgrq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgrq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sorgtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgtr.unwrap()(matrix_layout, uplo, n, a, lda, tau)
}

pub unsafe fn LAPACKE_sorgtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *const f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgtr_work.unwrap()(matrix_layout, uplo, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_sormbr(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormbr.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sormbr_work(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormbr_work.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormhr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormhr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sormhr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormhr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormlq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_sormlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormql(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormql.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_sormql_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormql_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormqr.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_sormqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormrq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormrq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_sormrq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormrq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormrz(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormrz.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sormrz_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormrz_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sormtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormtr.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sormtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    tau: *const f32,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sormtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_spbcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbcon.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, anorm, rcond)
}

pub unsafe fn LAPACKE_spbcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbcon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        ab,
        ldab,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_spbequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbequ.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_spbequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbequ_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_spbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    afb: *const f32,
    ldafb: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_spbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    afb: *const f32,
    ldafb: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_spbstf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbstf.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_spbstf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbstf_work.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_spbsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbsv.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_spbsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbsv_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_spbsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    afb: *mut f32,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_spbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    afb: *mut f32,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_spbtrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbtrf.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_spbtrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbtrf_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_spbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbtrs.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_spbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spbtrs_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_spftrf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spftrf.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_spftrf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spftrf_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_spftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spftri.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_spftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spftri_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_spftrs(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spftrs.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_spftrs_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spftrs_work.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_spocon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spocon.unwrap()(matrix_layout, uplo, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_spocon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spocon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_spoequ(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spoequ.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_spoequ_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spoequ_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_spoequb(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spoequb.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_spoequb_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spoequb_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_sporfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sporfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sporfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sporfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sporfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    s: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sporfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_sporfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    s: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sporfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sposv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sposv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_sposv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sposv_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_sposvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sposvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sposvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sposvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sposvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sposvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_sposvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sposvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_spotrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotrf.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_spotrf2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotrf2.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_spotrf2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotrf2_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_spotrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotrf_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_spotri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotri.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_spotri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotri_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_spotrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_spotrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spotrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_sppcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppcon.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond)
}

pub unsafe fn LAPACKE_sppcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppcon_work.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond, work, iwork)
}

pub unsafe fn LAPACKE_sppequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppequ.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_sppequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppequ_work.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_spprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    afp: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_spprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    afp: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sppsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_sppsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_sppsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f32,
    afp: *mut f32,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sppsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f32,
    afp: *mut f32,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sppsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_spptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spptrf.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_spptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spptrf_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_spptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spptri.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_spptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spptri_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_spptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_spptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_spstrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spstrf.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol)
}

pub unsafe fn LAPACKE_spstrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spstrf_work.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol, work)
}

pub unsafe fn LAPACKE_sptcon(
    n: MKL_INT,
    d: *const f32,
    e: *const f32,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptcon.unwrap()(n, d, e, anorm, rcond)
}

pub unsafe fn LAPACKE_sptcon_work(
    n: MKL_INT,
    d: *const f32,
    e: *const f32,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptcon_work.unwrap()(n, d, e, anorm, rcond, work)
}

pub unsafe fn LAPACKE_spteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_spteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_spteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_sptrfs(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const f32,
    df: *const f32,
    ef: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptrfs.unwrap()(
        matrix_layout,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sptrfs_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const f32,
    df: *const f32,
    ef: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptrfs_work.unwrap()(
        matrix_layout,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
    )
}

pub unsafe fn LAPACKE_sptsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptsv.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_sptsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptsv_work.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_sptsvx(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const f32,
    df: *mut f32,
    ef: *mut f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptsvx.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sptsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const f32,
    df: *mut f32,
    ef: *mut f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sptsvx_work.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
    )
}

pub unsafe fn LAPACKE_spttrf(n: MKL_INT, d: *mut f32, e: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_spttrf.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_spttrf_work(n: MKL_INT, d: *mut f32, e: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_spttrf_work.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_spttrs(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spttrs.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_spttrs_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f32,
    e: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_spttrs_work.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_ssbev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbev.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_ssbev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
    )
}

pub unsafe fn LAPACKE_ssbevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevd.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_ssbevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssbevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssbevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssbgst(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *const f32,
    ldbb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgst.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
    )
}

pub unsafe fn LAPACKE_ssbgst_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *const f32,
    ldbb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgst_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
        work,
    )
}

pub unsafe fn LAPACKE_ssbgv(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgv.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_ssbgv_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgv_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
    )
}

pub unsafe fn LAPACKE_ssbgvd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgvd.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_ssbgvd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgvd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssbgvx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgvx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssbgvx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    bb: *mut f32,
    ldbb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbgvx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssbtrd(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbtrd.unwrap()(matrix_layout, vect, uplo, n, kd, ab, ldab, d, e, q, ldq)
}

pub unsafe fn LAPACKE_ssbtrd_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbtrd_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        kd,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        work,
    )
}

pub unsafe fn LAPACKE_ssfrk(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f32,
    a: *const f32,
    lda: MKL_INT,
    beta: f32,
    c: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssfrk.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_ssfrk_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f32,
    a: *const f32,
    lda: MKL_INT,
    beta: f32,
    c: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssfrk_work.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_sspcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspcon.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_sspcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspcon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        ap,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sspev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspev.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_sspev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspev_work.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz, work)
}

pub unsafe fn LAPACKE_sspevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspevd.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_sspevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ap,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sspevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_sspevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_sspgst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgst.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_sspgst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *const f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgst_work.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_sspgv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgv.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_sspgv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
    )
}

pub unsafe fn LAPACKE_sspgvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgvd.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_sspgvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *mut f32,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sspgvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_sspgvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    bp: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspgvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    afp: *const f32,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ssprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    afp: *const f32,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_sspsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f32,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sspsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut f32,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sspsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    afp: *mut f32,
    ipiv: *mut MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_sspsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    afp: *mut f32,
    ipiv: *mut MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sspsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssptrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    d: *mut f32,
    e: *mut f32,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptrd.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_ssptrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    d: *mut f32,
    e: *mut f32,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptrd_work.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_ssptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptrf.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_ssptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptrf_work.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_ssptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptri.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_ssptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut f32,
    ipiv: *const MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptri_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, work)
}

pub unsafe fn LAPACKE_ssptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_sstebz(
    range: c_char,
    order: c_char,
    n: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    d: *const f32,
    e: *const f32,
    m: *mut MKL_INT,
    nsplit: *mut MKL_INT,
    w: *mut f32,
    iblock: *mut MKL_INT,
    isplit: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstebz.unwrap()(
        range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit,
    )
}

pub unsafe fn LAPACKE_sstebz_work(
    range: c_char,
    order: c_char,
    n: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    d: *const f32,
    e: *const f32,
    m: *mut MKL_INT,
    nsplit: *mut MKL_INT,
    w: *mut f32,
    iblock: *mut MKL_INT,
    isplit: *mut MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstebz_work.unwrap()(
        range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork,
    )
}

pub unsafe fn LAPACKE_sstedc(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstedc.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_sstedc_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstedc_work.unwrap()(
        matrix_layout,
        compz,
        n,
        d,
        e,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sstegr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstegr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_sstegr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstegr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sstein(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f32,
    e: *const f32,
    m: MKL_INT,
    w: *const f32,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstein.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        ifailv,
    )
}

pub unsafe fn LAPACKE_sstein_work(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f32,
    e: *const f32,
    m: MKL_INT,
    w: *const f32,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstein_work.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        work,
        iwork,
        ifailv,
    )
}

pub unsafe fn LAPACKE_sstemr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstemr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
    )
}

pub unsafe fn LAPACKE_sstemr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstemr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_ssteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_ssterf(n: MKL_INT, d: *mut f32, e: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_ssterf.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_ssterf_work(n: MKL_INT, d: *mut f32, e: *mut f32) -> MKL_INT {
    dyload_lib().LAPACKE_ssterf_work.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_sstev(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstev.unwrap()(matrix_layout, jobz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_sstev_work(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstev_work.unwrap()(matrix_layout, jobz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_sstevd(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstevd.unwrap()(matrix_layout, jobz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_sstevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstevd_work.unwrap()(
        matrix_layout,
        jobz,
        n,
        d,
        e,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sstevr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstevr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_sstevr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstevr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_sstevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_sstevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sstevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssycon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssycon.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_ssycon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssycon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssyconv(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyconv.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_ssyconv_work(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyconv_work.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_ssyequb(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyequb.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_ssyequb_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    s: *mut f32,
    scond: *mut f32,
    amax: *mut f32,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyequb_work.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax, work)
}

pub unsafe fn LAPACKE_ssyev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyev.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_ssyev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyev_work.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w, work, lwork)
}

pub unsafe fn LAPACKE_ssyevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevd.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_ssyevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssyevr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevr.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_ssyevr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssyevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssyevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssygst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygst.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_ssygst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygst_work.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_ssygv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygv.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_ssygv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssygvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygvd.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_ssygvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssygvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssygvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssyrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ssyrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssyrfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyrfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_ssyrfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *const f32,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyrfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssysv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssysv_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssysv_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssysv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssysvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ssysvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssysvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_ssysvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    af: *mut f32,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f32,
    b: *mut f32,
    ldb: MKL_INT,
    x: *mut f32,
    ldx: MKL_INT,
    rcond: *mut f32,
    rpvgrw: *mut f32,
    berr: *mut f32,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f32,
    err_bnds_comp: *mut f32,
    nparams: MKL_INT,
    params: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssyswapr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyswapr.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_ssyswapr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyswapr_work.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_ssytrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrd.unwrap()(matrix_layout, uplo, n, a, lda, d, e, tau)
}

pub unsafe fn LAPACKE_ssytrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    d: *mut f32,
    e: *mut f32,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrd_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        d,
        e,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_ssytrf_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_rook.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_ssytrf_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_ssytri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_ssytri2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri2.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_ssytri2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri2_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_ssytri2x(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri2x.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, nb)
}

pub unsafe fn LAPACKE_ssytri2x_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f32,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri2x_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, nb)
}

pub unsafe fn LAPACKE_ssytri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work)
}

pub unsafe fn LAPACKE_ssytrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssytrs2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs2.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssytrs2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs2_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_ssytrs_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssytrs_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ssytrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_stbcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stbcon.unwrap()(matrix_layout, norm, uplo, diag, n, kd, ab, ldab, rcond)
}

pub unsafe fn LAPACKE_stbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stbcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        kd,
        ab,
        ldab,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_stbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *const f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stbrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_stbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *const f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_stbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stbtrs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_stbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const f32,
    ldab: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stbtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_stfsm(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f32,
    a: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stfsm.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_stfsm_work(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: f32,
    a: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stfsm_work.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_stftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stftri.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_stftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stftri_work.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_stfttp(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f32,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stfttp.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_stfttp_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f32,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stfttp_work.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_stfttr(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f32,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stfttr.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_stfttr_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const f32,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stfttr_work.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_stgevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const f32,
    lds: MKL_INT,
    p: *const f32,
    ldp: MKL_INT,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_stgevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const f32,
    lds: MKL_INT,
    p: *const f32,
    ldp: MKL_INT,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
    )
}

pub unsafe fn LAPACKE_stgexc(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgexc.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
    )
}

pub unsafe fn LAPACKE_stgexc_work(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgexc_work.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_stgsen(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f32,
    pr: *mut f32,
    dif: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsen.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
    )
}

pub unsafe fn LAPACKE_stgsen_work(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    alphar: *mut f32,
    alphai: *mut f32,
    beta: *mut f32,
    q: *mut f32,
    ldq: MKL_INT,
    z: *mut f32,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f32,
    pr: *mut f32,
    dif: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsen_work.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alphar,
        alphai,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_stgsja(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsja.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        ncycle,
    )
}

pub unsafe fn LAPACKE_stgsja_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    tola: f32,
    tolb: f32,
    alpha: *mut f32,
    beta: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    work: *mut f32,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsja_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        ncycle,
    )
}

pub unsafe fn LAPACKE_stgsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    vl: *const f32,
    ldvl: MKL_INT,
    vr: *const f32,
    ldvr: MKL_INT,
    s: *mut f32,
    dif: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_stgsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    vl: *const f32,
    ldvl: MKL_INT,
    vr: *const f32,
    ldvr: MKL_INT,
    s: *mut f32,
    dif: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_stgsyl(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    d: *const f32,
    ldd: MKL_INT,
    e: *const f32,
    lde: MKL_INT,
    f: *mut f32,
    ldf: MKL_INT,
    scale: *mut f32,
    dif: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsyl.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
    )
}

pub unsafe fn LAPACKE_stgsyl_work(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    d: *const f32,
    ldd: MKL_INT,
    e: *const f32,
    lde: MKL_INT,
    f: *mut f32,
    ldf: MKL_INT,
    scale: *mut f32,
    dif: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stgsyl_work.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_stpcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpcon.unwrap()(matrix_layout, norm, uplo, diag, n, ap, rcond)
}

pub unsafe fn LAPACKE_stpcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        ap,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_stpmqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpmqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_stpmqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpmqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_stpqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpqrt.unwrap()(matrix_layout, m, n, l, nb, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_stpqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpqrt2.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_stpqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpqrt2_work.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_stpqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpqrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        l,
        nb,
        a,
        lda,
        b,
        ldb,
        t,
        ldt,
        work,
    )
}

pub unsafe fn LAPACKE_stprfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stprfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_stprfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const f32,
    ldv: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stprfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_stprfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *const f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stprfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_stprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    b: *const f32,
    ldb: MKL_INT,
    x: *const f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stprfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_stptri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stptri.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_stptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stptri_work.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_stptrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stptrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_stptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const f32,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stptrs_work.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_stpttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    arf: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpttf.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_stpttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    arf: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpttf_work.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_stpttr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpttr.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_stpttr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const f32,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stpttr_work.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_strcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strcon.unwrap()(matrix_layout, norm, uplo, diag, n, a, lda, rcond)
}

pub unsafe fn LAPACKE_strcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        a,
        lda,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_strevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_strevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *mut MKL_INT,
    n: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    vl: *mut f32,
    ldvl: MKL_INT,
    vr: *mut f32,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
    )
}

pub unsafe fn LAPACKE_strexc(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strexc.unwrap()(matrix_layout, compq, n, t, ldt, q, ldq, ifst, ilst)
}

pub unsafe fn LAPACKE_strexc_work(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    ifst: *mut MKL_INT,
    ilst: *mut MKL_INT,
    work: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strexc_work.unwrap()(
        matrix_layout,
        compq,
        n,
        t,
        ldt,
        q,
        ldq,
        ifst,
        ilst,
        work,
    )
}

pub unsafe fn LAPACKE_strrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *const f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_strrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    x: *const f32,
    ldx: MKL_INT,
    ferr: *mut f32,
    berr: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_strsen(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    m: *mut MKL_INT,
    s: *mut f32,
    sep: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsen.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        wr,
        wi,
        m,
        s,
        sep,
    )
}

pub unsafe fn LAPACKE_strsen_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    wr: *mut f32,
    wi: *mut f32,
    m: *mut MKL_INT,
    s: *mut f32,
    sep: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsen_work.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        wr,
        wi,
        m,
        s,
        sep,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_strsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    vl: *const f32,
    ldvl: MKL_INT,
    vr: *const f32,
    ldvr: MKL_INT,
    s: *mut f32,
    sep: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_strsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const f32,
    ldt: MKL_INT,
    vl: *const f32,
    ldvl: MKL_INT,
    vr: *const f32,
    ldvr: MKL_INT,
    s: *mut f32,
    sep: *mut f32,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut f32,
    ldwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
        work,
        ldwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_strsyl(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsyl.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_strsyl_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsyl_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_strsyl3(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    scale: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsyl3.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_strsyl3_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *const f32,
    ldb: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    scale: *mut f32,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    swork: *mut f32,
    ldswork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strsyl3_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
        iwork,
        liwork,
        swork,
        ldswork,
    )
}

pub unsafe fn LAPACKE_strtri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strtri.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_strtri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strtri_work.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_strtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strtrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_strtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_strtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_strttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    arf: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strttf.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_strttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    arf: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strttf_work.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_strttp(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strttp.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_strttp_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ap: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_strttp_work.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_stzrzf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_stzrzf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_stzrzf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tau: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_stzrzf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zbbcsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    u1: *mut MKL_Complex16,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex16,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex16,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex16,
    ldv2t: MKL_INT,
    b11d: *mut f64,
    b11e: *mut f64,
    b12d: *mut f64,
    b12e: *mut f64,
    b21d: *mut f64,
    b21e: *mut f64,
    b22d: *mut f64,
    b22e: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zbbcsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
    )
}

pub unsafe fn LAPACKE_zbbcsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    u1: *mut MKL_Complex16,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex16,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex16,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex16,
    ldv2t: MKL_INT,
    b11d: *mut f64,
    b11e: *mut f64,
    b12d: *mut f64,
    b12e: *mut f64,
    b21d: *mut f64,
    b21e: *mut f64,
    b22d: *mut f64,
    b22e: *mut f64,
    rwork: *mut f64,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zbbcsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        m,
        p,
        q,
        theta,
        phi,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        b11d,
        b11e,
        b12d,
        b12e,
        b21d,
        b21e,
        b22d,
        b22e,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_zbdsqr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zbdsqr.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zbdsqr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ncvt: MKL_INT,
    nru: MKL_INT,
    ncc: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zbdsqr_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        ncvt,
        nru,
        ncc,
        d,
        e,
        vt,
        ldvt,
        u,
        ldu,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_zcgesv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zcgesv.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb, x, ldx, iter)
}

pub unsafe fn LAPACKE_zcgesv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    work: *mut MKL_Complex16,
    swork: *mut MKL_Complex8,
    rwork: *mut f64,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zcgesv_work.unwrap()(
        matrix_layout,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        work,
        swork,
        rwork,
        iter,
    )
}

pub unsafe fn LAPACKE_zcposv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zcposv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb, x, ldx, iter)
}

pub unsafe fn LAPACKE_zcposv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    work: *mut MKL_Complex16,
    swork: *mut MKL_Complex8,
    rwork: *mut f64,
    iter: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zcposv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        work,
        swork,
        rwork,
        iter,
    )
}

pub unsafe fn LAPACKE_zgbbrd(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    pt: *mut MKL_Complex16,
    ldpt: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbbrd.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zgbbrd_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ncc: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    pt: *mut MKL_Complex16,
    ldpt: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbbrd_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        ncc,
        kl,
        ku,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        pt,
        ldpt,
        c,
        ldc,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgbcon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbcon.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
    )
}

pub unsafe fn LAPACKE_zgbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbcon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        kl,
        ku,
        ab,
        ldab,
        ipiv,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgbequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbequ.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_zgbequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_zgbequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbequb.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_zgbequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        kl,
        ku,
        ab,
        ldab,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_zgbrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    afb: *const MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zgbrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    afb: *const MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgbrfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    afb: *const MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbrfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zgbrfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    afb: *const MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbrfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgbsv(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbsv.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zgbsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbsv_work.unwrap()(matrix_layout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zgbsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    afb: *mut MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    rpivot: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_zgbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    afb: *mut MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgbsvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    afb: *mut MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbsvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zgbsvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    afb: *mut MKL_Complex16,
    ldafb: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbsvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgbtrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbtrf.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_zgbtrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbtrf_work.unwrap()(matrix_layout, m, n, kl, ku, ab, ldab, ipiv)
}

pub unsafe fn LAPACKE_zgbtrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbtrs.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zgbtrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgbtrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        kl,
        ku,
        nrhs,
        ab,
        ldab,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zgebak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f64,
    m: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgebak.unwrap()(matrix_layout, job, side, n, ilo, ihi, scale, m, v, ldv)
}

pub unsafe fn LAPACKE_zgebak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    scale: *const f64,
    m: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgebak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        scale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_zgebal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgebal.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_zgebal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgebal_work.unwrap()(matrix_layout, job, n, a, lda, ilo, ihi, scale)
}

pub unsafe fn LAPACKE_zgebrd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut MKL_Complex16,
    taup: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgebrd.unwrap()(matrix_layout, m, n, a, lda, d, e, tauq, taup)
}

pub unsafe fn LAPACKE_zgebrd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut MKL_Complex16,
    taup: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgebrd_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        d,
        e,
        tauq,
        taup,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgecon(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgecon.unwrap()(matrix_layout, norm, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_zgecon_work(
    matrix_layout: c_int,
    norm: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgecon_work.unwrap()(
        matrix_layout,
        norm,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgedmd(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    y: *mut MKL_Complex16,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    eigs: *mut MKL_Complex16,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    zw: *mut MKL_Complex16,
    lzw: MKL_INT,
    w: *mut MKL_Complex16,
    ldw: MKL_INT,
    s: *mut MKL_Complex16,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgedmd.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        zw,
        lzw,
        w,
        ldw,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_zgedmd_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    y: *mut MKL_Complex16,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    eigs: *mut MKL_Complex16,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut MKL_Complex16,
    ldw: MKL_INT,
    s: *mut MKL_Complex16,
    lds: MKL_INT,
    zwork: *mut MKL_Complex16,
    lzwork: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgedmd_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobf,
        whtsvd,
        m,
        n,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        w,
        ldw,
        s,
        lds,
        zwork,
        lzwork,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zgedmdq(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut MKL_Complex16,
    ldf: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    y: *mut MKL_Complex16,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    eigs: *mut MKL_Complex16,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    s: *mut MKL_Complex16,
    lds: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgedmdq.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
    )
}

pub unsafe fn LAPACKE_zgedmdq_work(
    matrix_layout: c_int,
    jobs: c_char,
    jobz: c_char,
    jobr: c_char,
    jobq: c_char,
    jobt: c_char,
    jobf: c_char,
    whtsvd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    f: *mut MKL_Complex16,
    ldf: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    y: *mut MKL_Complex16,
    ldy: MKL_INT,
    nrnk: MKL_INT,
    tol: *mut f64,
    k: MKL_INT,
    eigs: *mut MKL_Complex16,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    res: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    s: *mut MKL_Complex16,
    lds: MKL_INT,
    zwork: *mut MKL_Complex16,
    lzwork: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgedmdq_work.unwrap()(
        matrix_layout,
        jobs,
        jobz,
        jobr,
        jobq,
        jobt,
        jobf,
        whtsvd,
        m,
        n,
        f,
        ldf,
        x,
        ldx,
        y,
        ldy,
        nrnk,
        tol,
        k,
        eigs,
        z,
        ldz,
        res,
        b,
        ldb,
        v,
        ldv,
        s,
        lds,
        zwork,
        lzwork,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zgeequ(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeequ.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_zgeequ_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeequ_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_zgeequb(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeequb.unwrap()(matrix_layout, m, n, a, lda, r, c, rowcnd, colcnd, amax)
}

pub unsafe fn LAPACKE_zgeequb_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    r: *mut f64,
    c: *mut f64,
    rowcnd: *mut f64,
    colcnd: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeequb_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        r,
        c,
        rowcnd,
        colcnd,
        amax,
    )
}

pub unsafe fn LAPACKE_zgees(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_Z_SELECT1,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex16,
    vs: *mut MKL_Complex16,
    ldvs: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgees.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
    )
}

pub unsafe fn LAPACKE_zgees_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_Z_SELECT1,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex16,
    vs: *mut MKL_Complex16,
    ldvs: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgees_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_zgeesx(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_Z_SELECT1,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex16,
    vs: *mut MKL_Complex16,
    ldvs: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeesx.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_zgeesx_work(
    matrix_layout: c_int,
    jobvs: c_char,
    sort: c_char,
    select: LAPACK_Z_SELECT1,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sdim: *mut MKL_INT,
    w: *mut MKL_Complex16,
    vs: *mut MKL_Complex16,
    ldvs: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeesx_work.unwrap()(
        matrix_layout,
        jobvs,
        sort,
        select,
        sense,
        n,
        a,
        lda,
        sdim,
        w,
        vs,
        ldvs,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_zgeev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_zgeev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgeevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
    abnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_zgeevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    scale: *mut f64,
    abnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        scale,
        abnrm,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgehrd(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgehrd.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_zgehrd_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgehrd_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zgejsv(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sva: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    stat: *mut f64,
    istat: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgejsv.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        stat,
        istat,
    )
}

pub unsafe fn LAPACKE_zgejsv_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    jobr: c_char,
    jobt: c_char,
    jobp: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sva: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    cwork: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgejsv_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        jobr,
        jobt,
        jobp,
        m,
        n,
        a,
        lda,
        sva,
        u,
        ldu,
        v,
        ldv,
        cwork,
        lwork,
        rwork,
        lrwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zgelq2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelq2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgelq2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelq2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_zgelqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgelqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zgels(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgels.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zgels_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgels_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgelsd(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelsd.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_zgelsd_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelsd_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zgelss(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelss.unwrap()(matrix_layout, m, n, nrhs, a, lda, b, ldb, s, rcond, rank)
}

pub unsafe fn LAPACKE_zgelss_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    s: *mut f64,
    rcond: f64,
    rank: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelss_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        s,
        rcond,
        rank,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgelsy(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f64,
    rank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelsy.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
    )
}

pub unsafe fn LAPACKE_zgelsy_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    jpvt: *mut MKL_INT,
    rcond: f64,
    rank: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelsy_work.unwrap()(
        matrix_layout,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        jpvt,
        rcond,
        rank,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgemqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgemqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zgemqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgemqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        nb,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_zgeqlf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqlf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgeqlf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqlf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zgeqp3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqp3.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_zgeqp3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqp3_work.unwrap()(
        matrix_layout,
        m,
        n,
        a,
        lda,
        jpvt,
        tau,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgeqpf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqpf.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau)
}

pub unsafe fn LAPACKE_zgeqpf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    jpvt: *mut MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqpf_work.unwrap()(matrix_layout, m, n, a, lda, jpvt, tau, work, rwork)
}

pub unsafe fn LAPACKE_zgeqr2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqr2.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgeqr2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqr2_work.unwrap()(matrix_layout, m, n, a, lda, tau, work)
}

pub unsafe fn LAPACKE_zgeqrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgeqrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zgeqrfp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrfp.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgeqrfp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrfp_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zgeqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrt.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zgeqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrt2.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zgeqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrt2_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zgeqrt3(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrt3.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zgeqrt3_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrt3_work.unwrap()(matrix_layout, m, n, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zgeqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqrt_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, work)
}

pub unsafe fn LAPACKE_zgerfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgerfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zgerfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgerfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgerfsx(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgerfsx.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zgerfsx_work(
    matrix_layout: c_int,
    trans: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    r: *const f64,
    c: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgerfsx_work.unwrap()(
        matrix_layout,
        trans,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgerqf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgerqf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zgerqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgerqf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zgesdd(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesdd.unwrap()(matrix_layout, jobz, m, n, a, lda, s, u, ldu, vt, ldvt)
}

pub unsafe fn LAPACKE_zgesdd_work(
    matrix_layout: c_int,
    jobz: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesdd_work.unwrap()(
        matrix_layout,
        jobz,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zgesv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesv.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zgesv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesv_work.unwrap()(matrix_layout, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zgesvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    superb: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvd.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_zgesvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgesvdx(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    superb: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvdx.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        superb,
    )
}

pub unsafe fn LAPACKE_zgesvdx_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobvt: c_char,
    range: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    ns: *mut MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    vt: *mut MKL_Complex16,
    ldvt: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvdx_work.unwrap()(
        matrix_layout,
        jobu,
        jobvt,
        range,
        m,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        ns,
        s,
        u,
        ldu,
        vt,
        ldvt,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zgesvj(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sva: *mut f64,
    mv: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    stat: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvj.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        stat,
    )
}

pub unsafe fn LAPACKE_zgesvj_work(
    matrix_layout: c_int,
    joba: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    sva: *mut f64,
    mv: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    cwork: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvj_work.unwrap()(
        matrix_layout,
        joba,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        sva,
        mv,
        v,
        ldv,
        cwork,
        lwork,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_zgesvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    rpivot: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        rpivot,
    )
}

pub unsafe fn LAPACKE_zgesvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgesvxx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvxx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zgesvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    r: *mut f64,
    c: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvxx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        r,
        c,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgetf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetrf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetrf.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetrf2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetrf2.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetrf2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetrf2_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetrf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetrf_work.unwrap()(matrix_layout, m, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetri(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetri.unwrap()(matrix_layout, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zgetri_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetri_work.unwrap()(matrix_layout, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zgetrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetrs.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zgetrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetrs_work.unwrap()(matrix_layout, trans, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zggbak(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f64,
    rscale: *const f64,
    m: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggbak.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_zggbak_work(
    matrix_layout: c_int,
    job: c_char,
    side: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    lscale: *const f64,
    rscale: *const f64,
    m: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggbak_work.unwrap()(
        matrix_layout,
        job,
        side,
        n,
        ilo,
        ihi,
        lscale,
        rscale,
        m,
        v,
        ldv,
    )
}

pub unsafe fn LAPACKE_zggbal(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggbal.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
    )
}

pub unsafe fn LAPACKE_zggbal_work(
    matrix_layout: c_int,
    job: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggbal_work.unwrap()(
        matrix_layout,
        job,
        n,
        a,
        lda,
        b,
        ldb,
        ilo,
        ihi,
        lscale,
        rscale,
        work,
    )
}

pub unsafe fn LAPACKE_zgges(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_Z_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vsl: *mut MKL_Complex16,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex16,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgges.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_zgges3(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_Z_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vsl: *mut MKL_Complex16,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex16,
    ldvsr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgges3.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
    )
}

pub unsafe fn LAPACKE_zgges3_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_Z_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vsl: *mut MKL_Complex16,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex16,
    ldvsr: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgges3_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_zgges_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_Z_SELECT2,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vsl: *mut MKL_Complex16,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex16,
    ldvsr: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgges_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        work,
        lwork,
        rwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_zggesx(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_Z_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vsl: *mut MKL_Complex16,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex16,
    ldvsr: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggesx.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_zggesx_work(
    matrix_layout: c_int,
    jobvsl: c_char,
    jobvsr: c_char,
    sort: c_char,
    selctg: LAPACK_Z_SELECT2,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    sdim: *mut MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vsl: *mut MKL_Complex16,
    ldvsl: MKL_INT,
    vsr: *mut MKL_Complex16,
    ldvsr: MKL_INT,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggesx_work.unwrap()(
        matrix_layout,
        jobvsl,
        jobvsr,
        sort,
        selctg,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        sdim,
        alpha,
        beta,
        vsl,
        ldvsl,
        vsr,
        ldvsr,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
        iwork,
        liwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_zggev(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggev.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_zggev3(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggev3.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
    )
}

pub unsafe fn LAPACKE_zggev3_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggev3_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zggev_work(
    matrix_layout: c_int,
    jobvl: c_char,
    jobvr: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggev_work.unwrap()(
        matrix_layout,
        jobvl,
        jobvr,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zggevx(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
    abnrm: *mut f64,
    bbnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggevx.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
    )
}

pub unsafe fn LAPACKE_zggevx_work(
    matrix_layout: c_int,
    balanc: c_char,
    jobvl: c_char,
    jobvr: c_char,
    sense: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    ilo: *mut MKL_INT,
    ihi: *mut MKL_INT,
    lscale: *mut f64,
    rscale: *mut f64,
    abnrm: *mut f64,
    bbnrm: *mut f64,
    rconde: *mut f64,
    rcondv: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    bwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggevx_work.unwrap()(
        matrix_layout,
        balanc,
        jobvl,
        jobvr,
        sense,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        vl,
        ldvl,
        vr,
        ldvr,
        ilo,
        ihi,
        lscale,
        rscale,
        abnrm,
        bbnrm,
        rconde,
        rcondv,
        work,
        lwork,
        rwork,
        iwork,
        bwork,
    )
}

pub unsafe fn LAPACKE_zggglm(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    d: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    y: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggglm.unwrap()(matrix_layout, n, m, p, a, lda, b, ldb, d, x, y)
}

pub unsafe fn LAPACKE_zggglm_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    d: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    y: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggglm_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        b,
        ldb,
        d,
        x,
        y,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgghd3(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgghd3.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zgghd3_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgghd3_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgghrd(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgghrd.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zgghrd_work(
    matrix_layout: c_int,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgghrd_work.unwrap()(
        matrix_layout,
        compq,
        compz,
        n,
        ilo,
        ihi,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zgglse(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    d: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgglse.unwrap()(matrix_layout, m, n, p, a, lda, b, ldb, c, d, x)
}

pub unsafe fn LAPACKE_zgglse_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    d: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgglse_work.unwrap()(
        matrix_layout,
        m,
        n,
        p,
        a,
        lda,
        b,
        ldb,
        c,
        d,
        x,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zggqrf(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    taua: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    taub: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggqrf.unwrap()(matrix_layout, n, m, p, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_zggqrf_work(
    matrix_layout: c_int,
    n: MKL_INT,
    m: MKL_INT,
    p: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    taua: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    taub: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggqrf_work.unwrap()(
        matrix_layout,
        n,
        m,
        p,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zggrqf(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    taua: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    taub: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggrqf.unwrap()(matrix_layout, m, p, n, a, lda, taua, b, ldb, taub)
}

pub unsafe fn LAPACKE_zggrqf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    taua: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    taub: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggrqf_work.unwrap()(
        matrix_layout,
        m,
        p,
        n,
        a,
        lda,
        taua,
        b,
        ldb,
        taub,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zggsvd(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvd.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_zggsvd3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvd3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
    )
}

pub unsafe fn LAPACKE_zggsvd3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvd3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        lwork,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zggsvd_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    n: MKL_INT,
    p: MKL_INT,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvd_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        n,
        p,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        rwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zggsvp(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvp.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_zggsvp3(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvp3.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
    )
}

pub unsafe fn LAPACKE_zggsvp3_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    rwork: *mut f64,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvp3_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        rwork,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zggsvp_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    k: *mut MKL_INT,
    l: *mut MKL_INT,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    iwork: *mut MKL_INT,
    rwork: *mut f64,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zggsvp_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        k,
        l,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        iwork,
        rwork,
        tau,
        work,
    )
}

pub unsafe fn LAPACKE_zgtcon(
    norm: c_char,
    n: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    du2: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtcon.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zgtcon_work(
    norm: c_char,
    n: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    du2: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtcon_work.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work)
}

pub unsafe fn LAPACKE_zgtrfs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    dlf: *const MKL_Complex16,
    df: *const MKL_Complex16,
    duf: *const MKL_Complex16,
    du2: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtrfs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zgtrfs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    dlf: *const MKL_Complex16,
    df: *const MKL_Complex16,
    duf: *const MKL_Complex16,
    du2: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtrfs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgtsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut MKL_Complex16,
    d: *mut MKL_Complex16,
    du: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtsv.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_zgtsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *mut MKL_Complex16,
    d: *mut MKL_Complex16,
    du: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtsv_work.unwrap()(matrix_layout, n, nrhs, dl, d, du, b, ldb)
}

pub unsafe fn LAPACKE_zgtsvx(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    dlf: *mut MKL_Complex16,
    df: *mut MKL_Complex16,
    duf: *mut MKL_Complex16,
    du2: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtsvx.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zgtsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    dlf: *mut MKL_Complex16,
    df: *mut MKL_Complex16,
    duf: *mut MKL_Complex16,
    du2: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgtsvx_work.unwrap()(
        matrix_layout,
        fact,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        dlf,
        df,
        duf,
        du2,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zgttrf(
    n: MKL_INT,
    dl: *mut MKL_Complex16,
    d: *mut MKL_Complex16,
    du: *mut MKL_Complex16,
    du2: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgttrf.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_zgttrf_work(
    n: MKL_INT,
    dl: *mut MKL_Complex16,
    d: *mut MKL_Complex16,
    du: *mut MKL_Complex16,
    du2: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgttrf_work.unwrap()(n, dl, d, du, du2, ipiv)
}

pub unsafe fn LAPACKE_zgttrs(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    du2: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgttrs.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zgttrs_work(
    matrix_layout: c_int,
    trans: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    dl: *const MKL_Complex16,
    d: *const MKL_Complex16,
    du: *const MKL_Complex16,
    du2: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgttrs_work.unwrap()(
        matrix_layout,
        trans,
        n,
        nrhs,
        dl,
        d,
        du,
        du2,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zhbev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbev.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_zhbev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhbevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevd.unwrap()(matrix_layout, jobz, uplo, n, kd, ab, ldab, w, z, ldz)
}

pub unsafe fn LAPACKE_zhbevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zhbevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhbevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhbgst(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *const MKL_Complex16,
    ldbb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgst.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
    )
}

pub unsafe fn LAPACKE_zhbgst_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *const MKL_Complex16,
    ldbb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgst_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        x,
        ldx,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhbgv(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgv.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zhbgv_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgv_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhbgvd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgvd.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zhbgvd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgvd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zhbgvx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgvx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhbgvx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ka: MKL_INT,
    kb: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbgvx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ka,
        kb,
        ab,
        ldab,
        bb,
        ldbb,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhbtrd(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbtrd.unwrap()(matrix_layout, vect, uplo, n, kd, ab, ldab, d, e, q, ldq)
}

pub unsafe fn LAPACKE_zhbtrd_work(
    matrix_layout: c_int,
    vect: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbtrd_work.unwrap()(
        matrix_layout,
        vect,
        uplo,
        n,
        kd,
        ab,
        ldab,
        d,
        e,
        q,
        ldq,
        work,
    )
}

pub unsafe fn LAPACKE_zhecon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhecon.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zhecon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhecon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_zheequb(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheequb.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_zheequb_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheequb_work.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax, work)
}

pub unsafe fn LAPACKE_zheev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheev.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_zheev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zheevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevd.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_zheevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zheevr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevr.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_zheevr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zheevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zheevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhegst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegst.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zhegst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegst_work.unwrap()(matrix_layout, itype, uplo, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zhegv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegv.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_zhegv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhegvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegvd.unwrap()(matrix_layout, itype, jobz, uplo, n, a, lda, b, ldb, w)
}

pub unsafe fn LAPACKE_zhegvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zhegvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhegvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zherfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zherfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zherfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zherfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zherfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zherfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zherfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zherfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhesv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhesv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhesvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zhesvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhesvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zhesvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zheswapr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheswapr.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_zheswapr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheswapr_work.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_zhetrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrd.unwrap()(matrix_layout, uplo, n, a, lda, d, e, tau)
}

pub unsafe fn LAPACKE_zhetrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrd_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        d,
        e,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zhetrf_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_rook.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zhetrf_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zhetri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zhetri2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri2.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zhetri2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri2_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zhetri2x(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri2x.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, nb)
}

pub unsafe fn LAPACKE_zhetri2x_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri2x_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, nb)
}

pub unsafe fn LAPACKE_zhetri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work)
}

pub unsafe fn LAPACKE_zhetrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhetrs2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs2.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhetrs2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs2_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_zhetrs_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhetrs_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zhetrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhfrk(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f64,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    beta: f64,
    c: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhfrk.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_zhfrk_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    trans: c_char,
    n: MKL_INT,
    k: MKL_INT,
    alpha: f64,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    beta: f64,
    c: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhfrk_work.unwrap()(
        matrix_layout,
        transr,
        uplo,
        trans,
        n,
        k,
        alpha,
        a,
        lda,
        beta,
        c,
    )
}

pub unsafe fn LAPACKE_zhgeqz(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex16,
    ldh: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhgeqz.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zhgeqz_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex16,
    ldh: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhgeqz_work.unwrap()(
        matrix_layout,
        job,
        compq,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        t,
        ldt,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhpcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpcon.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zhpcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpcon_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond, work)
}

pub unsafe fn LAPACKE_zhpev(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpev.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_zhpev_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpev_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ap,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhpevd(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpevd.unwrap()(matrix_layout, jobz, uplo, n, ap, w, z, ldz)
}

pub unsafe fn LAPACKE_zhpevd_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpevd_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        ap,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zhpevx(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpevx.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhpevx_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpevx_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        ap,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhpgst(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgst.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_zhpgst_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgst_work.unwrap()(matrix_layout, itype, uplo, n, ap, bp)
}

pub unsafe fn LAPACKE_zhpgv(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgv.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_zhpgv_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgv_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhpgvd(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgvd.unwrap()(matrix_layout, itype, jobz, uplo, n, ap, bp, w, z, ldz)
}

pub unsafe fn LAPACKE_zhpgvd_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *mut MKL_Complex16,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgvd_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        ap,
        bp,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zhpgvx(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *mut MKL_Complex16,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgvx.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhpgvx_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    bp: *mut MKL_Complex16,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpgvx_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        range,
        uplo,
        n,
        ap,
        bp,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zhprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhpsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhpsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhpsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zhpsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhpsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhptrd(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    d: *mut f64,
    e: *mut f64,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptrd.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_zhptrd_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    d: *mut f64,
    e: *mut f64,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptrd_work.unwrap()(matrix_layout, uplo, n, ap, d, e, tau)
}

pub unsafe fn LAPACKE_zhptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptrf.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_zhptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptrf_work.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_zhptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptri.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_zhptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptri_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, work)
}

pub unsafe fn LAPACKE_zhptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhsein(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    h: *const MKL_Complex16,
    ldh: MKL_INT,
    w: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhsein.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_zhsein_work(
    matrix_layout: c_int,
    job: c_char,
    eigsrc: c_char,
    initv: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    h: *const MKL_Complex16,
    ldh: MKL_INT,
    w: *mut MKL_Complex16,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
    ifaill: *mut MKL_INT,
    ifailr: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhsein_work.unwrap()(
        matrix_layout,
        job,
        eigsrc,
        initv,
        select,
        n,
        h,
        ldh,
        w,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        rwork,
        ifaill,
        ifailr,
    )
}

pub unsafe fn LAPACKE_zhseqr(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex16,
    ldh: MKL_INT,
    w: *mut MKL_Complex16,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhseqr.unwrap()(matrix_layout, job, compz, n, ilo, ihi, h, ldh, w, z, ldz)
}

pub unsafe fn LAPACKE_zhseqr_work(
    matrix_layout: c_int,
    job: c_char,
    compz: c_char,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    h: *mut MKL_Complex16,
    ldh: MKL_INT,
    w: *mut MKL_Complex16,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhseqr_work.unwrap()(
        matrix_layout,
        job,
        compz,
        n,
        ilo,
        ihi,
        h,
        ldh,
        w,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zlacgv(n: MKL_INT, x: *mut MKL_Complex16, incx: MKL_INT) -> MKL_INT {
    dyload_lib().LAPACKE_zlacgv.unwrap()(n, x, incx)
}

pub unsafe fn LAPACKE_zlacgv_work(n: MKL_INT, x: *mut MKL_Complex16, incx: MKL_INT) -> MKL_INT {
    dyload_lib().LAPACKE_zlacgv_work.unwrap()(n, x, incx)
}

pub unsafe fn LAPACKE_zlacn2(
    n: MKL_INT,
    v: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    est: *mut f64,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacn2.unwrap()(n, v, x, est, kase, isave)
}

pub unsafe fn LAPACKE_zlacn2_work(
    n: MKL_INT,
    v: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    est: *mut f64,
    kase: *mut MKL_INT,
    isave: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacn2_work.unwrap()(n, v, x, est, kase, isave)
}

pub unsafe fn LAPACKE_zlacp2(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacp2.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zlacp2_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacp2_work.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zlacpy(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacpy.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zlacpy_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlacpy_work.unwrap()(matrix_layout, uplo, m, n, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zlag2c(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    sa: *mut MKL_Complex8,
    ldsa: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlag2c.unwrap()(matrix_layout, m, n, a, lda, sa, ldsa)
}

pub unsafe fn LAPACKE_zlag2c_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    sa: *mut MKL_Complex8,
    ldsa: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlag2c_work.unwrap()(matrix_layout, m, n, a, lda, sa, ldsa)
}

pub unsafe fn LAPACKE_zlagge(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f64,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlagge.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_zlagge_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    kl: MKL_INT,
    ku: MKL_INT,
    d: *const f64,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlagge_work.unwrap()(matrix_layout, m, n, kl, ku, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_zlaghe(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f64,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlaghe.unwrap()(matrix_layout, n, k, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_zlaghe_work(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f64,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlaghe_work.unwrap()(matrix_layout, n, k, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_zlagsy(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f64,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlagsy.unwrap()(matrix_layout, n, k, d, a, lda, iseed)
}

pub unsafe fn LAPACKE_zlagsy_work(
    matrix_layout: c_int,
    n: MKL_INT,
    k: MKL_INT,
    d: *const f64,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    iseed: *mut MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlagsy_work.unwrap()(matrix_layout, n, k, d, a, lda, iseed, work)
}

pub unsafe fn LAPACKE_zlapmr(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlapmr.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_zlapmr_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlapmr_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_zlapmt(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlapmt.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_zlapmt_work(
    matrix_layout: c_int,
    forwrd: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    k: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlapmt_work.unwrap()(matrix_layout, forwrd, m, n, x, ldx, k)
}

pub unsafe fn LAPACKE_zlarfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zlarfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        v,
        ldv,
        t,
        ldt,
        c,
        ldc,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_zlarfg(
    n: MKL_INT,
    alpha: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    incx: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarfg.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_zlarfg_work(
    n: MKL_INT,
    alpha: *mut MKL_Complex16,
    x: *mut MKL_Complex16,
    incx: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarfg_work.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn LAPACKE_zlarft(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    tau: *const MKL_Complex16,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarft.unwrap()(matrix_layout, direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn LAPACKE_zlarft_work(
    matrix_layout: c_int,
    direct: c_char,
    storev: c_char,
    n: MKL_INT,
    k: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    tau: *const MKL_Complex16,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarft_work.unwrap()(
        matrix_layout,
        direct,
        storev,
        n,
        k,
        v,
        ldv,
        tau,
        t,
        ldt,
    )
}

pub unsafe fn LAPACKE_zlarfx(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const MKL_Complex16,
    tau: MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarfx.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_zlarfx_work(
    matrix_layout: c_int,
    side: c_char,
    m: MKL_INT,
    n: MKL_INT,
    v: *const MKL_Complex16,
    tau: MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarfx_work.unwrap()(matrix_layout, side, m, n, v, tau, c, ldc, work)
}

pub unsafe fn LAPACKE_zlarnv(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarnv.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_zlarnv_work(
    idist: MKL_INT,
    iseed: *mut MKL_INT,
    n: MKL_INT,
    x: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlarnv_work.unwrap()(idist, iseed, n, x)
}

pub unsafe fn LAPACKE_zlascl(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f64,
    cto: f64,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlascl.unwrap()(matrix_layout, type_, kl, ku, cfrom, cto, m, n, a, lda)
}

pub unsafe fn LAPACKE_zlascl_work(
    matrix_layout: c_int,
    type_: c_char,
    kl: MKL_INT,
    ku: MKL_INT,
    cfrom: f64,
    cto: f64,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlascl_work.unwrap()(
        matrix_layout,
        type_,
        kl,
        ku,
        cfrom,
        cto,
        m,
        n,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_zlaset(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex16,
    beta: MKL_Complex16,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlaset.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_zlaset_work(
    matrix_layout: c_int,
    uplo: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex16,
    beta: MKL_Complex16,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlaset_work.unwrap()(matrix_layout, uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn LAPACKE_zlaswp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlaswp.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_zlaswp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    k1: MKL_INT,
    k2: MKL_INT,
    ipiv: *const MKL_INT,
    incx: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlaswp_work.unwrap()(matrix_layout, n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn LAPACKE_zlatms(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f64,
    mode: MKL_INT,
    cond: f64,
    dmax: f64,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlatms.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
    )
}

pub unsafe fn LAPACKE_zlatms_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    dist: c_char,
    iseed: *mut MKL_INT,
    sym: c_char,
    d: *mut f64,
    mode: MKL_INT,
    cond: f64,
    dmax: f64,
    kl: MKL_INT,
    ku: MKL_INT,
    pack: c_char,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlatms_work.unwrap()(
        matrix_layout,
        m,
        n,
        dist,
        iseed,
        sym,
        d,
        mode,
        cond,
        dmax,
        kl,
        ku,
        pack,
        a,
        lda,
        work,
    )
}

pub unsafe fn LAPACKE_zlauum(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlauum.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zlauum_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zlauum_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpbcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbcon.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, anorm, rcond)
}

pub unsafe fn LAPACKE_zpbcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbcon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        ab,
        ldab,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpbequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbequ.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_zpbequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbequ_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab, s, scond, amax)
}

pub unsafe fn LAPACKE_zpbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    afb: *const MKL_Complex16,
    ldafb: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zpbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    afb: *const MKL_Complex16,
    ldafb: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpbstf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbstf.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_zpbstf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kb: MKL_INT,
    bb: *mut MKL_Complex16,
    ldbb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbstf_work.unwrap()(matrix_layout, uplo, n, kb, bb, ldbb)
}

pub unsafe fn LAPACKE_zpbsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbsv.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_zpbsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbsv_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_zpbsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    afb: *mut MKL_Complex16,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zpbsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    afb: *mut MKL_Complex16,
    ldafb: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        afb,
        ldafb,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpbtrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbtrf.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_zpbtrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbtrf_work.unwrap()(matrix_layout, uplo, n, kd, ab, ldab)
}

pub unsafe fn LAPACKE_zpbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbtrs.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_zpbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpbtrs_work.unwrap()(matrix_layout, uplo, n, kd, nrhs, ab, ldab, b, ldb)
}

pub unsafe fn LAPACKE_zpftrf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpftrf.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_zpftrf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpftrf_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_zpftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpftri.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_zpftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpftri_work.unwrap()(matrix_layout, transr, uplo, n, a)
}

pub unsafe fn LAPACKE_zpftrs(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpftrs.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_zpftrs_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpftrs_work.unwrap()(matrix_layout, transr, uplo, n, nrhs, a, b, ldb)
}

pub unsafe fn LAPACKE_zpocon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpocon.unwrap()(matrix_layout, uplo, n, a, lda, anorm, rcond)
}

pub unsafe fn LAPACKE_zpocon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpocon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        anorm,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpoequ(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpoequ.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_zpoequ_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpoequ_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_zpoequb(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpoequb.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_zpoequb_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpoequb_work.unwrap()(matrix_layout, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_zporfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zporfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zporfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zporfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zporfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    s: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zporfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zporfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    s: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zporfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zposv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zposv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zposv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zposv_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zposvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zposvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zposvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zposvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zposvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zposvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zposvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zposvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpotrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotrf.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpotrf2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotrf2.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpotrf2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotrf2_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpotrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotrf_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpotri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotri.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpotri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotri_work.unwrap()(matrix_layout, uplo, n, a, lda)
}

pub unsafe fn LAPACKE_zpotrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zpotrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpotrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zppcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppcon.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond)
}

pub unsafe fn LAPACKE_zppcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppcon_work.unwrap()(matrix_layout, uplo, n, ap, anorm, rcond, work, rwork)
}

pub unsafe fn LAPACKE_zppequ(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppequ.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_zppequ_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppequ_work.unwrap()(matrix_layout, uplo, n, ap, s, scond, amax)
}

pub unsafe fn LAPACKE_zpprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *const MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zpprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *const MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zppsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_zppsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_zppsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    afp: *mut MKL_Complex16,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zppsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    afp: *mut MKL_Complex16,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zppsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpptrf.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_zpptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpptrf_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_zpptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpptri.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_zpptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpptri_work.unwrap()(matrix_layout, uplo, n, ap)
}

pub unsafe fn LAPACKE_zpptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_zpptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_zpstrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpstrf.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol)
}

pub unsafe fn LAPACKE_zpstrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    piv: *mut MKL_INT,
    rank: *mut MKL_INT,
    tol: f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpstrf_work.unwrap()(matrix_layout, uplo, n, a, lda, piv, rank, tol, work)
}

pub unsafe fn LAPACKE_zptcon(
    n: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptcon.unwrap()(n, d, e, anorm, rcond)
}

pub unsafe fn LAPACKE_zptcon_work(
    n: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptcon_work.unwrap()(n, d, e, anorm, rcond, work)
}

pub unsafe fn LAPACKE_zpteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_zpteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_zptrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    df: *const f64,
    ef: *const MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zptrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    df: *const f64,
    ef: *const MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zptsv(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f64,
    e: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptsv.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_zptsv_work(
    matrix_layout: c_int,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *mut f64,
    e: *mut MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptsv_work.unwrap()(matrix_layout, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_zptsvx(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    df: *mut f64,
    ef: *mut MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptsvx.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zptsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    df: *mut f64,
    ef: *mut MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zptsvx_work.unwrap()(
        matrix_layout,
        fact,
        n,
        nrhs,
        d,
        e,
        df,
        ef,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zpttrf(n: MKL_INT, d: *mut f64, e: *mut MKL_Complex16) -> MKL_INT {
    dyload_lib().LAPACKE_zpttrf.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_zpttrf_work(n: MKL_INT, d: *mut f64, e: *mut MKL_Complex16) -> MKL_INT {
    dyload_lib().LAPACKE_zpttrf_work.unwrap()(n, d, e)
}

pub unsafe fn LAPACKE_zpttrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpttrs.unwrap()(matrix_layout, uplo, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_zpttrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    d: *const f64,
    e: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zpttrs_work.unwrap()(matrix_layout, uplo, n, nrhs, d, e, b, ldb)
}

pub unsafe fn LAPACKE_zspcon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zspcon.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zspcon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zspcon_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, anorm, rcond, work)
}

pub unsafe fn LAPACKE_zsprfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsprfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zsprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsprfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zspsv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zspsv.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zspsv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zspsv_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zspsvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zspsvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zspsvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    afp: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zspsvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        ap,
        afp,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zsptrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsptrf.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_zsptrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsptrf_work.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_zsptri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsptri.unwrap()(matrix_layout, uplo, n, ap, ipiv)
}

pub unsafe fn LAPACKE_zsptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsptri_work.unwrap()(matrix_layout, uplo, n, ap, ipiv, work)
}

pub unsafe fn LAPACKE_zsptrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsptrs.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsptrs_work.unwrap()(matrix_layout, uplo, n, nrhs, ap, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zstedc(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstedc.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_zstedc_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstedc_work.unwrap()(
        matrix_layout,
        compz,
        n,
        d,
        e,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zstegr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstegr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_zstegr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstegr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zstein(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f64,
    e: *const f64,
    m: MKL_INT,
    w: *const f64,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstein.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        ifailv,
    )
}

pub unsafe fn LAPACKE_zstein_work(
    matrix_layout: c_int,
    n: MKL_INT,
    d: *const f64,
    e: *const f64,
    m: MKL_INT,
    w: *const f64,
    iblock: *const MKL_INT,
    isplit: *const MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut f64,
    iwork: *mut MKL_INT,
    ifailv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstein_work.unwrap()(
        matrix_layout,
        n,
        d,
        e,
        m,
        w,
        iblock,
        isplit,
        z,
        ldz,
        work,
        iwork,
        ifailv,
    )
}

pub unsafe fn LAPACKE_zstemr(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstemr.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
    )
}

pub unsafe fn LAPACKE_zstemr_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    nzc: MKL_INT,
    isuppz: *mut MKL_INT,
    tryrac: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zstemr_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        n,
        d,
        e,
        vl,
        vu,
        il,
        iu,
        m,
        w,
        z,
        ldz,
        nzc,
        isuppz,
        tryrac,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zsteqr(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsteqr.unwrap()(matrix_layout, compz, n, d, e, z, ldz)
}

pub unsafe fn LAPACKE_zsteqr_work(
    matrix_layout: c_int,
    compz: c_char,
    n: MKL_INT,
    d: *mut f64,
    e: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsteqr_work.unwrap()(matrix_layout, compz, n, d, e, z, ldz, work)
}

pub unsafe fn LAPACKE_zsycon(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsycon.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zsycon_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsycon_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_zsyconv(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyconv.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_zsyconv_work(
    matrix_layout: c_int,
    uplo: c_char,
    way: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    e: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyconv_work.unwrap()(matrix_layout, uplo, way, n, a, lda, ipiv, e)
}

pub unsafe fn LAPACKE_zsyequb(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyequb.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax)
}

pub unsafe fn LAPACKE_zsyequb_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    scond: *mut f64,
    amax: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyequb_work.unwrap()(matrix_layout, uplo, n, a, lda, s, scond, amax, work)
}

pub unsafe fn LAPACKE_zsyr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    alpha: MKL_Complex16,
    x: *const MKL_Complex16,
    incx: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyr.unwrap()(matrix_layout, uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn LAPACKE_zsyr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    alpha: MKL_Complex16,
    x: *const MKL_Complex16,
    incx: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyr_work.unwrap()(matrix_layout, uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn LAPACKE_zsyrfs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyrfs.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zsyrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyrfs_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zsyrfsx(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyrfsx.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zsyrfsx_work(
    matrix_layout: c_int,
    uplo: c_char,
    equed: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *const MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *const MKL_INT,
    s: *const f64,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyrfsx_work.unwrap()(
        matrix_layout,
        uplo,
        equed,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zsysv(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsysv_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsysv_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsysv_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsysvx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysvx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_zsysvx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysvx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        b,
        ldb,
        x,
        ldx,
        rcond,
        ferr,
        berr,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zsysvxx(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysvxx.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
    )
}

pub unsafe fn LAPACKE_zsysvxx_work(
    matrix_layout: c_int,
    fact: c_char,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    af: *mut MKL_Complex16,
    ldaf: MKL_INT,
    ipiv: *mut MKL_INT,
    equed: *mut c_char,
    s: *mut f64,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    x: *mut MKL_Complex16,
    ldx: MKL_INT,
    rcond: *mut f64,
    rpvgrw: *mut f64,
    berr: *mut f64,
    n_err_bnds: MKL_INT,
    err_bnds_norm: *mut f64,
    err_bnds_comp: *mut f64,
    nparams: MKL_INT,
    params: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysvxx_work.unwrap()(
        matrix_layout,
        fact,
        uplo,
        n,
        nrhs,
        a,
        lda,
        af,
        ldaf,
        ipiv,
        equed,
        s,
        b,
        ldb,
        x,
        ldx,
        rcond,
        rpvgrw,
        berr,
        n_err_bnds,
        err_bnds_norm,
        err_bnds_comp,
        nparams,
        params,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_zsyswapr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyswapr.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_zsyswapr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    i1: MKL_INT,
    i2: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsyswapr_work.unwrap()(matrix_layout, uplo, n, a, lda, i1, i2)
}

pub unsafe fn LAPACKE_zsytrf(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zsytrf_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_rook.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zsytrf_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsytrf_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zsytri(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zsytri2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri2.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zsytri2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri2_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zsytri2x(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri2x.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, nb)
}

pub unsafe fn LAPACKE_zsytri2x_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    nb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri2x_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, nb)
}

pub unsafe fn LAPACKE_zsytri_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work)
}

pub unsafe fn LAPACKE_zsytrs(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsytrs2(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs2.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsytrs2_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs2_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_zsytrs_rook(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_rook.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsytrs_rook_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_rook_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zsytrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_work.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ztbcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztbcon.unwrap()(matrix_layout, norm, uplo, diag, n, kd, ab, ldab, rcond)
}

pub unsafe fn LAPACKE_ztbcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztbcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        kd,
        ab,
        ldab,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztbrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *const MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztbrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ztbrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *const MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztbrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztbtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztbtrs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztbtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    nrhs: MKL_INT,
    ab: *const MKL_Complex16,
    ldab: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztbtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        kd,
        nrhs,
        ab,
        ldab,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztfsm(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex16,
    a: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztfsm.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztfsm_work(
    matrix_layout: c_int,
    transr: c_char,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    m: MKL_INT,
    n: MKL_INT,
    alpha: MKL_Complex16,
    a: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztfsm_work.unwrap()(
        matrix_layout,
        transr,
        side,
        uplo,
        trans,
        diag,
        m,
        n,
        alpha,
        a,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztftri(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztftri.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_ztftri_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztftri_work.unwrap()(matrix_layout, transr, uplo, diag, n, a)
}

pub unsafe fn LAPACKE_ztfttp(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex16,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztfttp.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_ztfttp_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex16,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztfttp_work.unwrap()(matrix_layout, transr, uplo, n, arf, ap)
}

pub unsafe fn LAPACKE_ztfttr(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex16,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztfttr.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_ztfttr_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    arf: *const MKL_Complex16,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztfttr_work.unwrap()(matrix_layout, transr, uplo, n, arf, a, lda)
}

pub unsafe fn LAPACKE_ztgevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const MKL_Complex16,
    lds: MKL_INT,
    p: *const MKL_Complex16,
    ldp: MKL_INT,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ztgevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    s: *const MKL_Complex16,
    lds: MKL_INT,
    p: *const MKL_Complex16,
    ldp: MKL_INT,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        s,
        lds,
        p,
        ldp,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztgexc(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgexc.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
    )
}

pub unsafe fn LAPACKE_ztgexc_work(
    matrix_layout: c_int,
    wantq: MKL_INT,
    wantz: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgexc_work.unwrap()(
        matrix_layout,
        wantq,
        wantz,
        n,
        a,
        lda,
        b,
        ldb,
        q,
        ldq,
        z,
        ldz,
        ifst,
        ilst,
    )
}

pub unsafe fn LAPACKE_ztgsen(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f64,
    pr: *mut f64,
    dif: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsen.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
    )
}

pub unsafe fn LAPACKE_ztgsen_work(
    matrix_layout: c_int,
    ijob: MKL_INT,
    wantq: MKL_INT,
    wantz: MKL_INT,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    alpha: *mut MKL_Complex16,
    beta: *mut MKL_Complex16,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    m: *mut MKL_INT,
    pl: *mut f64,
    pr: *mut f64,
    dif: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsen_work.unwrap()(
        matrix_layout,
        ijob,
        wantq,
        wantz,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        alpha,
        beta,
        q,
        ldq,
        z,
        ldz,
        m,
        pl,
        pr,
        dif,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ztgsja(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsja.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        ncycle,
    )
}

pub unsafe fn LAPACKE_ztgsja_work(
    matrix_layout: c_int,
    jobu: c_char,
    jobv: c_char,
    jobq: c_char,
    m: MKL_INT,
    p: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    tola: f64,
    tolb: f64,
    alpha: *mut f64,
    beta: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    work: *mut MKL_Complex16,
    ncycle: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsja_work.unwrap()(
        matrix_layout,
        jobu,
        jobv,
        jobq,
        m,
        p,
        n,
        k,
        l,
        a,
        lda,
        b,
        ldb,
        tola,
        tolb,
        alpha,
        beta,
        u,
        ldu,
        v,
        ldv,
        q,
        ldq,
        work,
        ncycle,
    )
}

pub unsafe fn LAPACKE_ztgsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    vl: *const MKL_Complex16,
    ldvl: MKL_INT,
    vr: *const MKL_Complex16,
    ldvr: MKL_INT,
    s: *mut f64,
    dif: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ztgsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    vl: *const MKL_Complex16,
    ldvl: MKL_INT,
    vr: *const MKL_Complex16,
    ldvr: MKL_INT,
    s: *mut f64,
    dif: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        a,
        lda,
        b,
        ldb,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        dif,
        mm,
        m,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_ztgsyl(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    d: *const MKL_Complex16,
    ldd: MKL_INT,
    e: *const MKL_Complex16,
    lde: MKL_INT,
    f: *mut MKL_Complex16,
    ldf: MKL_INT,
    scale: *mut f64,
    dif: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsyl.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
    )
}

pub unsafe fn LAPACKE_ztgsyl_work(
    matrix_layout: c_int,
    trans: c_char,
    ijob: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    d: *const MKL_Complex16,
    ldd: MKL_INT,
    e: *const MKL_Complex16,
    lde: MKL_INT,
    f: *mut MKL_Complex16,
    ldf: MKL_INT,
    scale: *mut f64,
    dif: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztgsyl_work.unwrap()(
        matrix_layout,
        trans,
        ijob,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        d,
        ldd,
        e,
        lde,
        f,
        ldf,
        scale,
        dif,
        work,
        lwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_ztpcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpcon.unwrap()(matrix_layout, norm, uplo, diag, n, ap, rcond)
}

pub unsafe fn LAPACKE_ztpcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        ap,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztpmqrt(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpmqrt.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztpmqrt_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpmqrt_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        nb,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
    )
}

pub unsafe fn LAPACKE_ztpqrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpqrt.unwrap()(matrix_layout, m, n, l, nb, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_ztpqrt2(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpqrt2.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_ztpqrt2_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpqrt2_work.unwrap()(matrix_layout, m, n, l, a, lda, b, ldb, t, ldt)
}

pub unsafe fn LAPACKE_ztpqrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    l: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpqrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        l,
        nb,
        a,
        lda,
        b,
        ldb,
        t,
        ldt,
        work,
    )
}

pub unsafe fn LAPACKE_ztprfb(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztprfb.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztprfb_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    direct: c_char,
    storev: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    v: *const MKL_Complex16,
    ldv: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    ldwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztprfb_work.unwrap()(
        matrix_layout,
        side,
        trans,
        direct,
        storev,
        m,
        n,
        k,
        l,
        v,
        ldv,
        t,
        ldt,
        a,
        lda,
        b,
        ldb,
        work,
        ldwork,
    )
}

pub unsafe fn LAPACKE_ztprfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *const MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztprfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ztprfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *const MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztprfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        ap,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztptri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztptri.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_ztptri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztptri_work.unwrap()(matrix_layout, uplo, diag, n, ap)
}

pub unsafe fn LAPACKE_ztptrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztptrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_ztptrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    ap: *const MKL_Complex16,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztptrs_work.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, ap, b, ldb)
}

pub unsafe fn LAPACKE_ztpttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    arf: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpttf.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_ztpttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    arf: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpttf_work.unwrap()(matrix_layout, transr, uplo, n, ap, arf)
}

pub unsafe fn LAPACKE_ztpttr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpttr.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_ztpttr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztpttr_work.unwrap()(matrix_layout, uplo, n, ap, a, lda)
}

pub unsafe fn LAPACKE_ztrcon(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrcon.unwrap()(matrix_layout, norm, uplo, diag, n, a, lda, rcond)
}

pub unsafe fn LAPACKE_ztrcon_work(
    matrix_layout: c_int,
    norm: c_char,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrcon_work.unwrap()(
        matrix_layout,
        norm,
        uplo,
        diag,
        n,
        a,
        lda,
        rcond,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztrevc(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrevc.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ztrevc_work(
    matrix_layout: c_int,
    side: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    vl: *mut MKL_Complex16,
    ldvl: MKL_INT,
    vr: *mut MKL_Complex16,
    ldvr: MKL_INT,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrevc_work.unwrap()(
        matrix_layout,
        side,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        mm,
        m,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztrexc(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrexc.unwrap()(matrix_layout, compq, n, t, ldt, q, ldq, ifst, ilst)
}

pub unsafe fn LAPACKE_ztrexc_work(
    matrix_layout: c_int,
    compq: c_char,
    n: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    ifst: MKL_INT,
    ilst: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrexc_work.unwrap()(matrix_layout, compq, n, t, ldt, q, ldq, ifst, ilst)
}

pub unsafe fn LAPACKE_ztrrfs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *const MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrrfs.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
    )
}

pub unsafe fn LAPACKE_ztrrfs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    x: *const MKL_Complex16,
    ldx: MKL_INT,
    ferr: *mut f64,
    berr: *mut f64,
    work: *mut MKL_Complex16,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrrfs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        x,
        ldx,
        ferr,
        berr,
        work,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztrsen(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    w: *mut MKL_Complex16,
    m: *mut MKL_INT,
    s: *mut f64,
    sep: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsen.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        w,
        m,
        s,
        sep,
    )
}

pub unsafe fn LAPACKE_ztrsen_work(
    matrix_layout: c_int,
    job: c_char,
    compq: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    w: *mut MKL_Complex16,
    m: *mut MKL_INT,
    s: *mut f64,
    sep: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsen_work.unwrap()(
        matrix_layout,
        job,
        compq,
        select,
        n,
        t,
        ldt,
        q,
        ldq,
        w,
        m,
        s,
        sep,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ztrsna(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    vl: *const MKL_Complex16,
    ldvl: MKL_INT,
    vr: *const MKL_Complex16,
    ldvr: MKL_INT,
    s: *mut f64,
    sep: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsna.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
    )
}

pub unsafe fn LAPACKE_ztrsna_work(
    matrix_layout: c_int,
    job: c_char,
    howmny: c_char,
    select: *const MKL_INT,
    n: MKL_INT,
    t: *const MKL_Complex16,
    ldt: MKL_INT,
    vl: *const MKL_Complex16,
    ldvl: MKL_INT,
    vr: *const MKL_Complex16,
    ldvr: MKL_INT,
    s: *mut f64,
    sep: *mut f64,
    mm: MKL_INT,
    m: *mut MKL_INT,
    work: *mut MKL_Complex16,
    ldwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsna_work.unwrap()(
        matrix_layout,
        job,
        howmny,
        select,
        n,
        t,
        ldt,
        vl,
        ldvl,
        vr,
        ldvr,
        s,
        sep,
        mm,
        m,
        work,
        ldwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_ztrsyl(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsyl.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_ztrsyl_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsyl_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_ztrsyl3(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    scale: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsyl3.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
    )
}

pub unsafe fn LAPACKE_ztrsyl3_work(
    matrix_layout: c_int,
    trana: c_char,
    tranb: c_char,
    isgn: MKL_INT,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *const MKL_Complex16,
    ldb: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    scale: *mut f64,
    swork: *mut f64,
    ldswork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrsyl3_work.unwrap()(
        matrix_layout,
        trana,
        tranb,
        isgn,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        c,
        ldc,
        scale,
        swork,
        ldswork,
    )
}

pub unsafe fn LAPACKE_ztrtri(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrtri.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_ztrtri_work(
    matrix_layout: c_int,
    uplo: c_char,
    diag: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrtri_work.unwrap()(matrix_layout, uplo, diag, n, a, lda)
}

pub unsafe fn LAPACKE_ztrtrs(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrtrs.unwrap()(matrix_layout, uplo, trans, diag, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_ztrtrs_work(
    matrix_layout: c_int,
    uplo: c_char,
    trans: c_char,
    diag: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrtrs_work.unwrap()(
        matrix_layout,
        uplo,
        trans,
        diag,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ztrttf(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    arf: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrttf.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_ztrttf_work(
    matrix_layout: c_int,
    transr: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    arf: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrttf_work.unwrap()(matrix_layout, transr, uplo, n, a, lda, arf)
}

pub unsafe fn LAPACKE_ztrttp(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrttp.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_ztrttp_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ap: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztrttp_work.unwrap()(matrix_layout, uplo, n, a, lda, ap)
}

pub unsafe fn LAPACKE_ztzrzf(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztzrzf.unwrap()(matrix_layout, m, n, a, lda, tau)
}

pub unsafe fn LAPACKE_ztzrzf_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ztzrzf_work.unwrap()(matrix_layout, m, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zunbdb(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex16,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex16,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex16,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex16,
    ldx22: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    taup1: *mut MKL_Complex16,
    taup2: *mut MKL_Complex16,
    tauq1: *mut MKL_Complex16,
    tauq2: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunbdb.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
    )
}

pub unsafe fn LAPACKE_zunbdb_work(
    matrix_layout: c_int,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex16,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex16,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex16,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex16,
    ldx22: MKL_INT,
    theta: *mut f64,
    phi: *mut f64,
    taup1: *mut MKL_Complex16,
    taup2: *mut MKL_Complex16,
    tauq1: *mut MKL_Complex16,
    tauq2: *mut MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunbdb_work.unwrap()(
        matrix_layout,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        phi,
        taup1,
        taup2,
        tauq1,
        tauq2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zuncsd(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex16,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex16,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex16,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex16,
    ldx22: MKL_INT,
    theta: *mut f64,
    u1: *mut MKL_Complex16,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex16,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex16,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex16,
    ldv2t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zuncsd.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
    )
}

pub unsafe fn LAPACKE_zuncsd2by1(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex16,
    ldx11: MKL_INT,
    x21: *mut MKL_Complex16,
    ldx21: MKL_INT,
    theta: *mut f64,
    u1: *mut MKL_Complex16,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex16,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex16,
    ldv1t: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zuncsd2by1.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
    )
}

pub unsafe fn LAPACKE_zuncsd2by1_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex16,
    ldx11: MKL_INT,
    x21: *mut MKL_Complex16,
    ldx21: MKL_INT,
    theta: *mut f64,
    u1: *mut MKL_Complex16,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex16,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex16,
    ldv1t: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zuncsd2by1_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        m,
        p,
        q,
        x11,
        ldx11,
        x21,
        ldx21,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zuncsd_work(
    matrix_layout: c_int,
    jobu1: c_char,
    jobu2: c_char,
    jobv1t: c_char,
    jobv2t: c_char,
    trans: c_char,
    signs: c_char,
    m: MKL_INT,
    p: MKL_INT,
    q: MKL_INT,
    x11: *mut MKL_Complex16,
    ldx11: MKL_INT,
    x12: *mut MKL_Complex16,
    ldx12: MKL_INT,
    x21: *mut MKL_Complex16,
    ldx21: MKL_INT,
    x22: *mut MKL_Complex16,
    ldx22: MKL_INT,
    theta: *mut f64,
    u1: *mut MKL_Complex16,
    ldu1: MKL_INT,
    u2: *mut MKL_Complex16,
    ldu2: MKL_INT,
    v1t: *mut MKL_Complex16,
    ldv1t: MKL_INT,
    v2t: *mut MKL_Complex16,
    ldv2t: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zuncsd_work.unwrap()(
        matrix_layout,
        jobu1,
        jobu2,
        jobv1t,
        jobv2t,
        trans,
        signs,
        m,
        p,
        q,
        x11,
        ldx11,
        x12,
        ldx12,
        x21,
        ldx21,
        x22,
        ldx22,
        theta,
        u1,
        ldu1,
        u2,
        ldu2,
        v1t,
        ldv1t,
        v2t,
        ldv2t,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
    )
}

pub unsafe fn LAPACKE_zungbr(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungbr.unwrap()(matrix_layout, vect, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_zungbr_work(
    matrix_layout: c_int,
    vect: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungbr_work.unwrap()(
        matrix_layout,
        vect,
        m,
        n,
        k,
        a,
        lda,
        tau,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunghr(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunghr.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau)
}

pub unsafe fn LAPACKE_zunghr_work(
    matrix_layout: c_int,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunghr_work.unwrap()(matrix_layout, n, ilo, ihi, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zunglq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunglq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_zunglq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunglq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zungql(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungql.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_zungql_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungql_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zungqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungqr.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_zungqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungqr_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zungrq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungrq.unwrap()(matrix_layout, m, n, k, a, lda, tau)
}

pub unsafe fn LAPACKE_zungrq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungrq_work.unwrap()(matrix_layout, m, n, k, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zungtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungtr.unwrap()(matrix_layout, uplo, n, a, lda, tau)
}

pub unsafe fn LAPACKE_zungtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungtr_work.unwrap()(matrix_layout, uplo, n, a, lda, tau, work, lwork)
}

pub unsafe fn LAPACKE_zunmbr(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmbr.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zunmbr_work(
    matrix_layout: c_int,
    vect: c_char,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmbr_work.unwrap()(
        matrix_layout,
        vect,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmhr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmhr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zunmhr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ilo: MKL_INT,
    ihi: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmhr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        ilo,
        ihi,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmlq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_zunmlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmql(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmql.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_zunmql_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmql_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmqr.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_zunmqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmrq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmrq.unwrap()(matrix_layout, side, trans, m, n, k, a, lda, tau, c, ldc)
}

pub unsafe fn LAPACKE_zunmrq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmrq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmrz(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmrz.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zunmrz_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    l: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmrz_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        l,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zunmtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmtr.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zunmtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunmtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        a,
        lda,
        tau,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zupgtr(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    tau: *const MKL_Complex16,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zupgtr.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq)
}

pub unsafe fn LAPACKE_zupgtr_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    tau: *const MKL_Complex16,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zupgtr_work.unwrap()(matrix_layout, uplo, n, ap, tau, q, ldq, work)
}

pub unsafe fn LAPACKE_zupmtr(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zupmtr.unwrap()(matrix_layout, side, uplo, trans, m, n, ap, tau, c, ldc)
}

pub unsafe fn LAPACKE_zupmtr_work(
    matrix_layout: c_int,
    side: c_char,
    uplo: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    ap: *const MKL_Complex16,
    tau: *const MKL_Complex16,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zupmtr_work.unwrap()(
        matrix_layout,
        side,
        uplo,
        trans,
        m,
        n,
        ap,
        tau,
        c,
        ldc,
        work,
    )
}

pub unsafe fn LAPACKE_ilaver(
    vers_major: *mut MKL_INT,
    vers_minor: *mut MKL_INT,
    vers_patch: *mut MKL_INT,
) {
    dyload_lib().LAPACKE_ilaver.unwrap()(vers_major, vers_minor, vers_patch)
}

pub unsafe fn LAPACKE_xerbla(name: *const c_char, info: MKL_INT) {
    dyload_lib().LAPACKE_xerbla.unwrap()(name, info)
}

pub unsafe fn LAPACKE_chesv_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chesv_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrf_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_aa.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_chetrf_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_aa_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_chetrs_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chetrs_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsysv_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsysv_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrf_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_aa.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_dsytrf_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_aa_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_dsytrs_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsytrs_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssysv_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssysv_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrf_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_aa.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_ssytrf_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_aa_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_ssytrs_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssytrs_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhesv_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhesv_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrf_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_aa.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zhetrf_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_aa_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zhetrs_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhetrs_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgemqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    t: *const MKL_Complex8,
    tsize: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgemqr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cgemqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    t: *const MKL_Complex8,
    tsize: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgemqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgeqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqr.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_cgeqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    tsize: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgeqr_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_dgemqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    t: *const f64,
    tsize: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgemqr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dgemqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    t: *const f64,
    tsize: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgemqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgeqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqr.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_dgeqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    tsize: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgeqr_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_sgemqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    t: *const f32,
    tsize: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgemqr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sgemqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    t: *const f32,
    tsize: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgemqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgeqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqr.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_sgeqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    tsize: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgeqr_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_zgemqr(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    t: *const MKL_Complex16,
    tsize: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgemqr.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zgemqr_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    t: *const MKL_Complex16,
    tsize: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgemqr_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgeqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqr.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_zgeqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    tsize: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgeqr_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_cgelq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelq.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_cgelq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    tsize: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgelq_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_cgemlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    t: *const MKL_Complex8,
    tsize: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgemlq.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_cgemlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    t: *const MKL_Complex8,
    tsize: MKL_INT,
    c: *mut MKL_Complex8,
    ldc: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgemlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgelq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelq.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_dgelq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    tsize: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgelq_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_dgemlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    t: *const f64,
    tsize: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgemlq.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_dgemlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    t: *const f64,
    tsize: MKL_INT,
    c: *mut f64,
    ldc: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgemlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgelq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelq.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_sgelq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    tsize: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgelq_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_sgemlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    t: *const f32,
    tsize: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgemlq.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_sgemlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    t: *const f32,
    tsize: MKL_INT,
    c: *mut f32,
    ldc: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgemlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgelq(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    tsize: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelq.unwrap()(matrix_layout, m, n, a, lda, t, tsize)
}

pub unsafe fn LAPACKE_zgelq_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    tsize: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgelq_work.unwrap()(matrix_layout, m, n, a, lda, t, tsize, work, lwork)
}

pub unsafe fn LAPACKE_zgemlq(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    t: *const MKL_Complex16,
    tsize: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgemlq.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
    )
}

pub unsafe fn LAPACKE_zgemlq_work(
    matrix_layout: c_int,
    side: c_char,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    k: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    t: *const MKL_Complex16,
    tsize: MKL_INT,
    c: *mut MKL_Complex16,
    ldc: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgemlq_work.unwrap()(
        matrix_layout,
        side,
        trans,
        m,
        n,
        k,
        a,
        lda,
        t,
        tsize,
        c,
        ldc,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgetsls(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetsls.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_cgetsls_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetsls_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgetsls(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetsls.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_dgetsls_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetsls_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgetsls(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetsls.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_sgetsls_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetsls_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgetsls(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetsls.unwrap()(matrix_layout, trans, m, n, nrhs, a, lda, b, ldb)
}

pub unsafe fn LAPACKE_zgetsls_work(
    matrix_layout: c_int,
    trans: c_char,
    m: MKL_INT,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetsls_work.unwrap()(
        matrix_layout,
        trans,
        m,
        n,
        nrhs,
        a,
        lda,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_checon_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_checon_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_checon_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_checon_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_chesv_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_rk.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chesv_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrf_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_rk.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_chetrf_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetri_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_chetri_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetri_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrs_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_3.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_chetrs_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_csycon_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_csycon_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_csycon_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_csycon_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_csysv_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csysv_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csysv_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_rk.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csysv_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csytrf_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_aa.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_csytrf_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_aa_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_csytrf_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_rk.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_csytrf_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *mut MKL_Complex8,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csytri_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_csytri_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytri_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csytrs_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_3.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csytrs_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    e: *const MKL_Complex8,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_csytrs_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_csytrs_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex8,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsycon_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    e: *const f64,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsycon_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_dsycon_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    e: *const f64,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut f64,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsycon_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_dsysv_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    e: *mut f64,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_rk.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsysv_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    e: *mut f64,
    ipiv: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrf_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    e: *mut f64,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_rk.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_dsytrf_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    e: *mut f64,
    ipiv: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytri_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    e: *const f64,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_dsytri_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    e: *const f64,
    ipiv: *const MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytri_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrs_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    e: *const f64,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_3.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_dsytrs_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f64,
    lda: MKL_INT,
    e: *const f64,
    ipiv: *const MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ssycon_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    e: *const f32,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssycon_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_ssycon_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    e: *const f32,
    ipiv: *const MKL_INT,
    anorm: f32,
    rcond: *mut f32,
    work: *mut f32,
    iwork: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssycon_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        anorm,
        rcond,
        work,
        iwork,
    )
}

pub unsafe fn LAPACKE_ssysv_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    e: *mut f32,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_rk.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssysv_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    e: *mut f32,
    ipiv: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrf_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    e: *mut f32,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_rk.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_ssytrf_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    e: *mut f32,
    ipiv: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytri_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    e: *const f32,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_ssytri_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    e: *const f32,
    ipiv: *const MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytri_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrs_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    e: *const f32,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_3.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_ssytrs_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const f32,
    lda: MKL_INT,
    e: *const f32,
    ipiv: *const MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zhecon_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhecon_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zhecon_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhecon_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_zhesv_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_rk.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhesv_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrf_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_rk.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_zhetrf_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetri_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_zhetri_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetri_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrs_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_3.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zhetrs_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zsycon_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsycon_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv, anorm, rcond)
}

pub unsafe fn LAPACKE_zsycon_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    anorm: f64,
    rcond: *mut f64,
    work: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsycon_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        anorm,
        rcond,
        work,
    )
}

pub unsafe fn LAPACKE_zsysv_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsysv_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsysv_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_rk.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsysv_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsytrf_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_aa.unwrap()(matrix_layout, uplo, n, a, lda, ipiv)
}

pub unsafe fn LAPACKE_zsytrf_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_aa_work.unwrap()(matrix_layout, uplo, n, a, lda, ipiv, work, lwork)
}

pub unsafe fn LAPACKE_zsytrf_rk(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_rk.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_zsytrf_rk_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *mut MKL_Complex16,
    ipiv: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_rk_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsytri_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri_3.unwrap()(matrix_layout, uplo, n, a, lda, e, ipiv)
}

pub unsafe fn LAPACKE_zsytri_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytri_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        e,
        ipiv,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsytrs_3(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_3.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, e, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsytrs_3_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    e: *const MKL_Complex16,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_3_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        e,
        ipiv,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zsytrs_aa(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_aa.unwrap()(matrix_layout, uplo, n, nrhs, a, lda, ipiv, b, ldb)
}

pub unsafe fn LAPACKE_zsytrs_aa_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *const MKL_Complex16,
    lda: MKL_INT,
    ipiv: *const MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_aa_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        ipiv,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chbev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbev_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_chbev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_chbevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevd_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_chbevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_chbevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_chbevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex8,
    ldab: MKL_INT,
    q: *mut MKL_Complex8,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chbevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_cheev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheev_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_cheev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_cheevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevd_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_cheevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cheevr_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevr_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_cheevr_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevr_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_cheevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_cheevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut MKL_Complex8,
    ldz: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cheevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_chegv_2stage(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegv_2stage.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
    )
}

pub unsafe fn LAPACKE_chegv_2stage_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    w: *mut f32,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
    rwork: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_chegv_2stage_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_dsbev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbev_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dsbev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsbevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevd_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_dsbevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsbevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsbevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f64,
    ldab: MKL_INT,
    q: *mut f64,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsbevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsyev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyev_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_dsyev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsyevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevd_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_dsyevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsyevr_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevr_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_dsyevr_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevr_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_dsyevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsyevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut f64,
    ldz: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsyevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_dsygv_2stage(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygv_2stage.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
    )
}

pub unsafe fn LAPACKE_dsygv_2stage_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    w: *mut f64,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsygv_2stage_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssbev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbev_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_ssbev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssbevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevd_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_ssbevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssbevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssbevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut f32,
    ldab: MKL_INT,
    q: *mut f32,
    ldq: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssbevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssyev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyev_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_ssyev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssyevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevd_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_ssyevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssyevr_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevr_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_ssyevr_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevr_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_ssyevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssyevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    vl: f32,
    vu: f32,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f32,
    m: *mut MKL_INT,
    w: *mut f32,
    z: *mut f32,
    ldz: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssyevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_ssygv_2stage(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygv_2stage.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
    )
}

pub unsafe fn LAPACKE_ssygv_2stage_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    w: *mut f32,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssygv_2stage_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhbev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbev_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zhbev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zhbevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevd_2stage.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
    )
}

pub unsafe fn LAPACKE_zhbevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        kd,
        ab,
        ldab,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zhbevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhbevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    kd: MKL_INT,
    ab: *mut MKL_Complex16,
    ldab: MKL_INT,
    q: *mut MKL_Complex16,
    ldq: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhbevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        kd,
        ab,
        ldab,
        q,
        ldq,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zheev_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheev_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_zheev_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheev_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_zheevd_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevd_2stage.unwrap()(matrix_layout, jobz, uplo, n, a, lda, w)
}

pub unsafe fn LAPACKE_zheevd_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevd_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        uplo,
        n,
        a,
        lda,
        w,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zheevr_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevr_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
    )
}

pub unsafe fn LAPACKE_zheevr_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    isuppz: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevr_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        isuppz,
        work,
        lwork,
        rwork,
        lrwork,
        iwork,
        liwork,
    )
}

pub unsafe fn LAPACKE_zheevx_2stage(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevx_2stage.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        ifail,
    )
}

pub unsafe fn LAPACKE_zheevx_2stage_work(
    matrix_layout: c_int,
    jobz: c_char,
    range: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    vl: f64,
    vu: f64,
    il: MKL_INT,
    iu: MKL_INT,
    abstol: f64,
    m: *mut MKL_INT,
    w: *mut f64,
    z: *mut MKL_Complex16,
    ldz: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
    iwork: *mut MKL_INT,
    ifail: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zheevx_2stage_work.unwrap()(
        matrix_layout,
        jobz,
        range,
        uplo,
        n,
        a,
        lda,
        vl,
        vu,
        il,
        iu,
        abstol,
        m,
        w,
        z,
        ldz,
        work,
        lwork,
        rwork,
        iwork,
        ifail,
    )
}

pub unsafe fn LAPACKE_zhegv_2stage(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegv_2stage.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
    )
}

pub unsafe fn LAPACKE_zhegv_2stage_work(
    matrix_layout: c_int,
    itype: MKL_INT,
    jobz: c_char,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    w: *mut f64,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
    rwork: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhegv_2stage_work.unwrap()(
        matrix_layout,
        itype,
        jobz,
        uplo,
        n,
        a,
        lda,
        b,
        ldb,
        w,
        work,
        lwork,
        rwork,
    )
}

pub unsafe fn LAPACKE_mkl_cgetrfnp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_cgetrfnp.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_cgetrfnp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_cgetrfnp_work.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_dgetrfnp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dgetrfnp.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_dgetrfnp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dgetrfnp_work.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_sgetrfnp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_sgetrfnp.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_sgetrfnp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_sgetrfnp_work.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_zgetrfnp(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_zgetrfnp.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_zgetrfnp_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_zgetrfnp_work.unwrap()(matrix_layout, m, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_cgetrinp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_cgetrinp.unwrap()(matrix_layout, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_cgetrinp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_cgetrinp_work.unwrap()(matrix_layout, n, a, lda, work, lwork)
}

pub unsafe fn LAPACKE_mkl_dgetrinp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dgetrinp.unwrap()(matrix_layout, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_dgetrinp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_dgetrinp_work.unwrap()(matrix_layout, n, a, lda, work, lwork)
}

pub unsafe fn LAPACKE_mkl_sgetrinp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_sgetrinp.unwrap()(matrix_layout, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_sgetrinp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_sgetrinp_work.unwrap()(matrix_layout, n, a, lda, work, lwork)
}

pub unsafe fn LAPACKE_mkl_zgetrinp(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_zgetrinp.unwrap()(matrix_layout, n, a, lda)
}

pub unsafe fn LAPACKE_mkl_zgetrinp_work(
    matrix_layout: c_int,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_mkl_zgetrinp_work.unwrap()(matrix_layout, n, a, lda, work, lwork)
}

pub unsafe fn LAPACKE_set_nancheck(flag: c_int) {
    dyload_lib().LAPACKE_set_nancheck.unwrap()(flag)
}

pub unsafe fn LAPACKE_get_nancheck() -> c_int {
    dyload_lib().LAPACKE_get_nancheck.unwrap()()
}

pub unsafe fn LAPACKE_chesv_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_chetrf_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
    )
}

pub unsafe fn LAPACKE_chesv_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chesv_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrf_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrf_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_chetrs_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_chetrs_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_chetrs_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_csysv_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_csysv_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csysv_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csytrf_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
    )
}

pub unsafe fn LAPACKE_csytrf_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrf_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_csytrs_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_csytrs_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    tb: *mut MKL_Complex8,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex8,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_csytrs_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dsysv_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tb: *mut f64,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dsysv_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tb: *mut f64,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsysv_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrf_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tb: *mut f64,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
    )
}

pub unsafe fn LAPACKE_dsytrf_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tb: *mut f64,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrf_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dsytrs_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tb: *mut f64,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_dsytrs_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    tb: *mut f64,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f64,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dsytrs_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zsysv_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zsysv_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsysv_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsytrf_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
    )
}

pub unsafe fn LAPACKE_zsytrf_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrf_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zsytrs_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zsytrs_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zsytrs_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ssysv_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tb: *mut f32,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ssysv_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tb: *mut f32,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssysv_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrf_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tb: *mut f32,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
    )
}

pub unsafe fn LAPACKE_ssytrf_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tb: *mut f32,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrf_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_ssytrs_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tb: *mut f32,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_ssytrs_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    tb: *mut f32,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut f32,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_ssytrs_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zhesv_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zhesv_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhesv_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrf_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zhetrf_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrf_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
    )
}

pub unsafe fn LAPACKE_zhetrs_aa_2stage(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_aa_2stage.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_zhetrs_aa_2stage_work(
    matrix_layout: c_int,
    uplo: c_char,
    n: MKL_INT,
    nrhs: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    tb: *mut MKL_Complex16,
    ltb: MKL_INT,
    ipiv: *mut MKL_INT,
    ipiv2: *mut MKL_INT,
    b: *mut MKL_Complex16,
    ldb: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zhetrs_aa_2stage_work.unwrap()(
        matrix_layout,
        uplo,
        n,
        nrhs,
        a,
        lda,
        tb,
        ltb,
        ipiv,
        ipiv2,
        b,
        ldb,
    )
}

pub unsafe fn LAPACKE_sgesvdq(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvdq.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
    )
}

pub unsafe fn LAPACKE_sgesvdq_work(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut f32,
    ldu: MKL_INT,
    v: *mut f32,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgesvdq_work.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
        iwork,
        liwork,
        work,
        lwork,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_dgesvdq(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvdq.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
    )
}

pub unsafe fn LAPACKE_dgesvdq_work(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut f64,
    ldu: MKL_INT,
    v: *mut f64,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgesvdq_work.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
        iwork,
        liwork,
        work,
        lwork,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_cgesvdq(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvdq.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
    )
}

pub unsafe fn LAPACKE_cgesvdq_work(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    s: *mut f32,
    u: *mut MKL_Complex8,
    ldu: MKL_INT,
    v: *mut MKL_Complex8,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    cwork: *mut MKL_Complex8,
    lcwork: MKL_INT,
    rwork: *mut f32,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgesvdq_work.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
        iwork,
        liwork,
        cwork,
        lcwork,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_zgesvdq(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvdq.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
    )
}

pub unsafe fn LAPACKE_zgesvdq_work(
    matrix_layout: c_int,
    joba: c_char,
    jobp: c_char,
    jobr: c_char,
    jobu: c_char,
    jobv: c_char,
    m: MKL_INT,
    n: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    s: *mut f64,
    u: *mut MKL_Complex16,
    ldu: MKL_INT,
    v: *mut MKL_Complex16,
    ldv: MKL_INT,
    numrank: *mut MKL_INT,
    iwork: *mut MKL_INT,
    liwork: MKL_INT,
    cwork: *mut MKL_Complex16,
    lcwork: MKL_INT,
    rwork: *mut f64,
    lrwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgesvdq_work.unwrap()(
        matrix_layout,
        joba,
        jobp,
        jobr,
        jobu,
        jobv,
        m,
        n,
        a,
        lda,
        s,
        u,
        ldu,
        v,
        ldv,
        numrank,
        iwork,
        liwork,
        cwork,
        lcwork,
        rwork,
        lrwork,
    )
}

pub unsafe fn LAPACKE_sorhr_col(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    d: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorhr_col.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_sorhr_col_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    d: *mut f32,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorhr_col_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_dorhr_col(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    d: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorhr_col.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_dorhr_col_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    d: *mut f64,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorhr_col_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_cunhr_col(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    d: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunhr_col.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_cunhr_col_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    d: *mut MKL_Complex8,
) -> MKL_INT {
    dyload_lib().LAPACKE_cunhr_col_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_zunhr_col(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    d: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunhr_col.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_zunhr_col_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    d: *mut MKL_Complex16,
) -> MKL_INT {
    dyload_lib().LAPACKE_zunhr_col_work.unwrap()(matrix_layout, m, n, nb, a, lda, t, ldt, d)
}

pub unsafe fn LAPACKE_sorgtsqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgtsqr.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sorgtsqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgtsqr_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dorgtsqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgtsqr.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dorgtsqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgtsqr_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cungtsqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungtsqr.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cungtsqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungtsqr_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zungtsqr(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungtsqr.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zungtsqr_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungtsqr_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sgetsqrhrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetsqrhrt.unwrap()(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sgetsqrhrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sgetsqrhrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb1,
        nb1,
        nb2,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dgetsqrhrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetsqrhrt.unwrap()(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dgetsqrhrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dgetsqrhrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb1,
        nb1,
        nb2,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cgetsqrhrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetsqrhrt.unwrap()(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cgetsqrhrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cgetsqrhrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb1,
        nb1,
        nb2,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zgetsqrhrt(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetsqrhrt.unwrap()(matrix_layout, m, n, mb1, nb1, nb2, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zgetsqrhrt_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb1: MKL_INT,
    nb1: MKL_INT,
    nb2: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zgetsqrhrt_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb1,
        nb1,
        nb2,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_sorgtsqr_row(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgtsqr_row.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_sorgtsqr_row_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f32,
    lda: MKL_INT,
    t: *mut f32,
    ldt: MKL_INT,
    work: *mut f32,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_sorgtsqr_row_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_dorgtsqr_row(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgtsqr_row.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_dorgtsqr_row_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut f64,
    lda: MKL_INT,
    t: *mut f64,
    ldt: MKL_INT,
    work: *mut f64,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_dorgtsqr_row_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_cungtsqr_row(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungtsqr_row.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_cungtsqr_row_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex8,
    lda: MKL_INT,
    t: *mut MKL_Complex8,
    ldt: MKL_INT,
    work: *mut MKL_Complex8,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_cungtsqr_row_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}

pub unsafe fn LAPACKE_zungtsqr_row(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungtsqr_row.unwrap()(matrix_layout, m, n, mb, nb, a, lda, t, ldt)
}

pub unsafe fn LAPACKE_zungtsqr_row_work(
    matrix_layout: c_int,
    m: MKL_INT,
    n: MKL_INT,
    mb: MKL_INT,
    nb: MKL_INT,
    a: *mut MKL_Complex16,
    lda: MKL_INT,
    t: *mut MKL_Complex16,
    ldt: MKL_INT,
    work: *mut MKL_Complex16,
    lwork: MKL_INT,
) -> MKL_INT {
    dyload_lib().LAPACKE_zungtsqr_row_work.unwrap()(
        matrix_layout,
        m,
        n,
        mb,
        nb,
        a,
        lda,
        t,
        ldt,
        work,
        lwork,
    )
}
