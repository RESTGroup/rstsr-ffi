//! Compatible implementation for dynamic-loading.
//!
//! This requires custom `dyload_lib` definition in mod.rs, or visible from
//! current layer of module.
//!
//! This file is generated automatically.

use super::*;

pub unsafe fn bl1_s2() -> f32 {
    dyload_lib().bl1_s2.unwrap()()
}

pub unsafe fn bl1_d2() -> f64 {
    dyload_lib().bl1_d2.unwrap()()
}

pub unsafe fn bl1_c2() -> scomplex {
    dyload_lib().bl1_c2.unwrap()()
}

pub unsafe fn bl1_z2() -> dcomplex {
    dyload_lib().bl1_z2.unwrap()()
}

pub unsafe fn bl1_s1() -> f32 {
    dyload_lib().bl1_s1.unwrap()()
}

pub unsafe fn bl1_d1() -> f64 {
    dyload_lib().bl1_d1.unwrap()()
}

pub unsafe fn bl1_c1() -> scomplex {
    dyload_lib().bl1_c1.unwrap()()
}

pub unsafe fn bl1_z1() -> dcomplex {
    dyload_lib().bl1_z1.unwrap()()
}

pub unsafe fn bl1_s1h() -> f32 {
    dyload_lib().bl1_s1h.unwrap()()
}

pub unsafe fn bl1_d1h() -> f64 {
    dyload_lib().bl1_d1h.unwrap()()
}

pub unsafe fn bl1_c1h() -> scomplex {
    dyload_lib().bl1_c1h.unwrap()()
}

pub unsafe fn bl1_z1h() -> dcomplex {
    dyload_lib().bl1_z1h.unwrap()()
}

pub unsafe fn bl1_s0() -> f32 {
    dyload_lib().bl1_s0.unwrap()()
}

pub unsafe fn bl1_d0() -> f64 {
    dyload_lib().bl1_d0.unwrap()()
}

pub unsafe fn bl1_c0() -> scomplex {
    dyload_lib().bl1_c0.unwrap()()
}

pub unsafe fn bl1_z0() -> dcomplex {
    dyload_lib().bl1_z0.unwrap()()
}

pub unsafe fn bl1_sm1h() -> f32 {
    dyload_lib().bl1_sm1h.unwrap()()
}

pub unsafe fn bl1_dm1h() -> f64 {
    dyload_lib().bl1_dm1h.unwrap()()
}

pub unsafe fn bl1_cm1h() -> scomplex {
    dyload_lib().bl1_cm1h.unwrap()()
}

pub unsafe fn bl1_zm1h() -> dcomplex {
    dyload_lib().bl1_zm1h.unwrap()()
}

pub unsafe fn bl1_sm1() -> f32 {
    dyload_lib().bl1_sm1.unwrap()()
}

pub unsafe fn bl1_dm1() -> f64 {
    dyload_lib().bl1_dm1.unwrap()()
}

pub unsafe fn bl1_cm1() -> scomplex {
    dyload_lib().bl1_cm1.unwrap()()
}

pub unsafe fn bl1_zm1() -> dcomplex {
    dyload_lib().bl1_zm1.unwrap()()
}

pub unsafe fn bl1_sm2() -> f32 {
    dyload_lib().bl1_sm2.unwrap()()
}

pub unsafe fn bl1_dm2() -> f64 {
    dyload_lib().bl1_dm2.unwrap()()
}

pub unsafe fn bl1_cm2() -> scomplex {
    dyload_lib().bl1_cm2.unwrap()()
}

pub unsafe fn bl1_zm2() -> dcomplex {
    dyload_lib().bl1_zm2.unwrap()()
}

pub unsafe fn bl1_vallocv(n_elem: c_uint, elem_size: c_uint) -> *mut c_void {
    dyload_lib().bl1_vallocv.unwrap()(n_elem, elem_size)
}

pub unsafe fn bl1_iallocv(n_elem: c_uint) -> *mut c_int {
    dyload_lib().bl1_iallocv.unwrap()(n_elem)
}

pub unsafe fn bl1_sallocv(n_elem: c_uint) -> *mut f32 {
    dyload_lib().bl1_sallocv.unwrap()(n_elem)
}

pub unsafe fn bl1_dallocv(n_elem: c_uint) -> *mut f64 {
    dyload_lib().bl1_dallocv.unwrap()(n_elem)
}

pub unsafe fn bl1_callocv(n_elem: c_uint) -> *mut scomplex {
    dyload_lib().bl1_callocv.unwrap()(n_elem)
}

pub unsafe fn bl1_zallocv(n_elem: c_uint) -> *mut dcomplex {
    dyload_lib().bl1_zallocv.unwrap()(n_elem)
}

pub unsafe fn bl1_vallocm(m: c_uint, n: c_uint, elem_size: c_uint) -> *mut c_void {
    dyload_lib().bl1_vallocm.unwrap()(m, n, elem_size)
}

pub unsafe fn bl1_iallocm(m: c_uint, n: c_uint) -> *mut c_int {
    dyload_lib().bl1_iallocm.unwrap()(m, n)
}

pub unsafe fn bl1_sallocm(m: c_uint, n: c_uint) -> *mut f32 {
    dyload_lib().bl1_sallocm.unwrap()(m, n)
}

pub unsafe fn bl1_dallocm(m: c_uint, n: c_uint) -> *mut f64 {
    dyload_lib().bl1_dallocm.unwrap()(m, n)
}

pub unsafe fn bl1_callocm(m: c_uint, n: c_uint) -> *mut scomplex {
    dyload_lib().bl1_callocm.unwrap()(m, n)
}

pub unsafe fn bl1_zallocm(m: c_uint, n: c_uint) -> *mut dcomplex {
    dyload_lib().bl1_zallocm.unwrap()(m, n)
}

pub unsafe fn bl1_sapdiagmv(
    side: side1_t,
    conj: conj1_t,
    m: c_int,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_dapdiagmv(
    side: side1_t,
    conj: conj1_t,
    m: c_int,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_csapdiagmv(
    side: side1_t,
    conj: conj1_t,
    m: c_int,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_capdiagmv(
    side: side1_t,
    conj: conj1_t,
    m: c_int,
    n: c_int,
    x: *mut scomplex,
    incx: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_capdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_zdapdiagmv(
    side: side1_t,
    conj: conj1_t,
    m: c_int,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zdapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_zapdiagmv(
    side: side1_t,
    conj: conj1_t,
    m: c_int,
    n: c_int,
    x: *mut dcomplex,
    incx: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_screate_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_screate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_dcreate_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dcreate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_ccreate_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_ccreate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_zcreate_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zcreate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_screate_contigmt(
    trans_dims: trans1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_screate_contigmt.unwrap()(
        trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_dcreate_contigmt(
    trans_dims: trans1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dcreate_contigmt.unwrap()(
        trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_ccreate_contigmt(
    trans_dims: trans1_t,
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_ccreate_contigmt.unwrap()(
        trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_zcreate_contigmt(
    trans_dims: trans1_t,
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zcreate_contigmt.unwrap()(
        trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_screate_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_screate_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_dcreate_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dcreate_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_ccreate_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_ccreate_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_zcreate_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zcreate_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_screate_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_screate_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_dcreate_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dcreate_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_ccreate_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_ccreate_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_zcreate_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zcreate_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_sfree_contigm(
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_sfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_dfree_contigm(
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_cfree_contigm(
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_cfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_zfree_contigm(
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_sfree_saved_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_sfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_dfree_saved_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_cfree_saved_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_cfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_zfree_saved_contigm(
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
}

pub unsafe fn bl1_sfree_saved_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_sfree_saved_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_dfree_saved_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dfree_saved_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_cfree_saved_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_cfree_saved_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_zfree_saved_contigmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zfree_saved_contigmr.unwrap()(
        uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_sfree_saved_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f32,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f32,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_sfree_saved_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_dfree_saved_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut f64,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut f64,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_dfree_saved_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_cfree_saved_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut scomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut scomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_cfree_saved_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_zfree_saved_contigmsr(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a_save: *mut dcomplex,
    a_rs_save: c_int,
    a_cs_save: c_int,
    a: *mut *mut dcomplex,
    a_rs: *mut c_int,
    a_cs: *mut c_int,
) {
    dyload_lib().bl1_zfree_saved_contigmsr.unwrap()(
        side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs,
    )
}

pub unsafe fn bl1_sewinvscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_sewinvscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_dewinvscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dewinvscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_csewinvscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_csewinvscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_cewinvscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_cewinvscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_zdewinvscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zdewinvscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_zewinvscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zewinvscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_sewinvscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dewinvscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_csewinvscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_csewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cewinvscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zdewinvscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zdewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zewinvscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sewscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_sewscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_dewscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dewscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_csewscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_csewscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_cewscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_cewscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_zdewscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zdewscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_zewscalv(
    conj: conj1_t,
    n: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zewscalv.unwrap()(conj, n, x, incx, y, incy)
}

pub unsafe fn bl1_sewscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dewscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_csewscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_csewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cewscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zdewscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zdewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zewscalmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_vfree(p: *mut c_void) {
    dyload_lib().bl1_vfree.unwrap()(p)
}

pub unsafe fn bl1_ifree(p: *mut c_int) {
    dyload_lib().bl1_ifree.unwrap()(p)
}

pub unsafe fn bl1_sfree(p: *mut f32) {
    dyload_lib().bl1_sfree.unwrap()(p)
}

pub unsafe fn bl1_dfree(p: *mut f64) {
    dyload_lib().bl1_dfree.unwrap()(p)
}

pub unsafe fn bl1_cfree(p: *mut scomplex) {
    dyload_lib().bl1_cfree.unwrap()(p)
}

pub unsafe fn bl1_zfree(p: *mut dcomplex) {
    dyload_lib().bl1_zfree.unwrap()(p)
}

pub unsafe fn bl1_sinverts(conj: conj1_t, alpha: *mut f32) {
    dyload_lib().bl1_sinverts.unwrap()(conj, alpha)
}

pub unsafe fn bl1_dinverts(conj: conj1_t, alpha: *mut f64) {
    dyload_lib().bl1_dinverts.unwrap()(conj, alpha)
}

pub unsafe fn bl1_cinverts(conj: conj1_t, alpha: *mut scomplex) {
    dyload_lib().bl1_cinverts.unwrap()(conj, alpha)
}

pub unsafe fn bl1_zinverts(conj: conj1_t, alpha: *mut dcomplex) {
    dyload_lib().bl1_zinverts.unwrap()(conj, alpha)
}

pub unsafe fn bl1_sinvert2s(conj: conj1_t, alpha: *mut f32, beta: *mut f32) {
    dyload_lib().bl1_sinvert2s.unwrap()(conj, alpha, beta)
}

pub unsafe fn bl1_dinvert2s(conj: conj1_t, alpha: *mut f64, beta: *mut f64) {
    dyload_lib().bl1_dinvert2s.unwrap()(conj, alpha, beta)
}

pub unsafe fn bl1_cinvert2s(conj: conj1_t, alpha: *mut scomplex, beta: *mut scomplex) {
    dyload_lib().bl1_cinvert2s.unwrap()(conj, alpha, beta)
}

pub unsafe fn bl1_zinvert2s(conj: conj1_t, alpha: *mut dcomplex, beta: *mut dcomplex) {
    dyload_lib().bl1_zinvert2s.unwrap()(conj, alpha, beta)
}

pub unsafe fn bl1_sinvertv(conj: conj1_t, n: c_int, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_sinvertv.unwrap()(conj, n, x, incx)
}

pub unsafe fn bl1_dinvertv(conj: conj1_t, n: c_int, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_dinvertv.unwrap()(conj, n, x, incx)
}

pub unsafe fn bl1_cinvertv(conj: conj1_t, n: c_int, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_cinvertv.unwrap()(conj, n, x, incx)
}

pub unsafe fn bl1_zinvertv(conj: conj1_t, n: c_int, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zinvertv.unwrap()(conj, n, x, incx)
}

pub unsafe fn bl1_sident(m: c_int, a: *mut f32, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_sident.unwrap()(m, a, a_rs, a_cs)
}

pub unsafe fn bl1_dident(m: c_int, a: *mut f64, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_dident.unwrap()(m, a, a_rs, a_cs)
}

pub unsafe fn bl1_cident(m: c_int, a: *mut scomplex, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_cident.unwrap()(m, a, a_rs, a_cs)
}

pub unsafe fn bl1_zident(m: c_int, a: *mut dcomplex, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_zident.unwrap()(m, a, a_rs, a_cs)
}

pub unsafe fn bl1_smaxabsv(n: c_int, x: *mut f32, incx: c_int, maxabs: *mut f32) {
    dyload_lib().bl1_smaxabsv.unwrap()(n, x, incx, maxabs)
}

pub unsafe fn bl1_dmaxabsv(n: c_int, x: *mut f64, incx: c_int, maxabs: *mut f64) {
    dyload_lib().bl1_dmaxabsv.unwrap()(n, x, incx, maxabs)
}

pub unsafe fn bl1_cmaxabsv(n: c_int, x: *mut scomplex, incx: c_int, maxabs: *mut f32) {
    dyload_lib().bl1_cmaxabsv.unwrap()(n, x, incx, maxabs)
}

pub unsafe fn bl1_zmaxabsv(n: c_int, x: *mut dcomplex, incx: c_int, maxabs: *mut f64) {
    dyload_lib().bl1_zmaxabsv.unwrap()(n, x, incx, maxabs)
}

pub unsafe fn bl1_smaxabsm(
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f32,
) {
    dyload_lib().bl1_smaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_dmaxabsm(
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f64,
) {
    dyload_lib().bl1_dmaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_cmaxabsm(
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f32,
) {
    dyload_lib().bl1_cmaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_zmaxabsm(
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f64,
) {
    dyload_lib().bl1_zmaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_smaxabsmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f32,
) {
    dyload_lib().bl1_smaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_dmaxabsmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f64,
) {
    dyload_lib().bl1_dmaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_cmaxabsmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f32,
) {
    dyload_lib().bl1_cmaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_zmaxabsmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    maxabs: *mut f64,
) {
    dyload_lib().bl1_zmaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
}

pub unsafe fn bl1_srands(alpha: *mut f32) {
    dyload_lib().bl1_srands.unwrap()(alpha)
}

pub unsafe fn bl1_drands(alpha: *mut f64) {
    dyload_lib().bl1_drands.unwrap()(alpha)
}

pub unsafe fn bl1_crands(alpha: *mut scomplex) {
    dyload_lib().bl1_crands.unwrap()(alpha)
}

pub unsafe fn bl1_zrands(alpha: *mut dcomplex) {
    dyload_lib().bl1_zrands.unwrap()(alpha)
}

pub unsafe fn bl1_srandv(n: c_int, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_srandv.unwrap()(n, x, incx)
}

pub unsafe fn bl1_drandv(n: c_int, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_drandv.unwrap()(n, x, incx)
}

pub unsafe fn bl1_crandv(n: c_int, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_crandv.unwrap()(n, x, incx)
}

pub unsafe fn bl1_zrandv(n: c_int, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zrandv.unwrap()(n, x, incx)
}

pub unsafe fn bl1_srandm(m: c_int, n: c_int, a: *mut f32, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_srandm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_drandm(m: c_int, n: c_int, a: *mut f64, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_drandm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_crandm(m: c_int, n: c_int, a: *mut scomplex, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_crandm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_zrandm(m: c_int, n: c_int, a: *mut dcomplex, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_zrandm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_srandmr(
    uplo: uplo1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_srandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_drandmr(
    uplo: uplo1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_drandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_crandmr(
    uplo: uplo1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_crandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_zrandmr(
    uplo: uplo1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zrandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_set_contig_strides(m: c_int, n: c_int, rs: *mut c_int, cs: *mut c_int) {
    dyload_lib().bl1_set_contig_strides.unwrap()(m, n, rs, cs)
}

pub unsafe fn bl1_set_dim_with_side(side: side1_t, m: c_int, n: c_int, dim_new: *mut c_int) {
    dyload_lib().bl1_set_dim_with_side.unwrap()(side, m, n, dim_new)
}

pub unsafe fn bl1_set_dims_with_trans(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    m_new: *mut c_int,
    n_new: *mut c_int,
) {
    dyload_lib().bl1_set_dims_with_trans.unwrap()(trans, m, n, m_new, n_new)
}

pub unsafe fn bl1_isetv(m: c_int, sigma: *mut c_int, x: *mut c_int, incx: c_int) {
    dyload_lib().bl1_isetv.unwrap()(m, sigma, x, incx)
}

pub unsafe fn bl1_ssetv(m: c_int, sigma: *mut f32, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_ssetv.unwrap()(m, sigma, x, incx)
}

pub unsafe fn bl1_dsetv(m: c_int, sigma: *mut f64, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_dsetv.unwrap()(m, sigma, x, incx)
}

pub unsafe fn bl1_csetv(m: c_int, sigma: *mut scomplex, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_csetv.unwrap()(m, sigma, x, incx)
}

pub unsafe fn bl1_zsetv(m: c_int, sigma: *mut dcomplex, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zsetv.unwrap()(m, sigma, x, incx)
}

pub unsafe fn bl1_isetm(
    m: c_int,
    n: c_int,
    sigma: *mut c_int,
    a: *mut c_int,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_isetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_ssetm(
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_ssetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_dsetm(
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dsetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_csetm(
    m: c_int,
    n: c_int,
    sigma: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zsetm(
    m: c_int,
    n: c_int,
    sigma: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zsetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_ssetmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_ssetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_dsetmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dsetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_csetmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    sigma: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zsetmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    sigma: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zsetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_isetdiag(
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut c_int,
    a: *mut c_int,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_isetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_ssetdiag(
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_ssetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_dsetdiag(
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dsetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_csetdiag(
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zsetdiag(
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zsetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_sscalediag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_dscalediag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_cscalediag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zscalediag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_csscalediag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zdscalediag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zdscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_sshiftdiag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_dshiftdiag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_cshiftdiag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zshiftdiag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_csshiftdiag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f32,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_zdshiftdiag(
    conj: conj1_t,
    offset: c_int,
    m: c_int,
    n: c_int,
    sigma: *mut f64,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zdshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
}

pub unsafe fn bl1_ssymmize(
    conj: conj1_t,
    uplo: uplo1_t,
    m: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_ssymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
}

pub unsafe fn bl1_dsymmize(
    conj: conj1_t,
    uplo: uplo1_t,
    m: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dsymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
}

pub unsafe fn bl1_csymmize(
    conj: conj1_t,
    uplo: uplo1_t,
    m: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
}

pub unsafe fn bl1_zsymmize(
    conj: conj1_t,
    uplo: uplo1_t,
    m: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zsymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
}

pub unsafe fn bl1_does_trans(trans: trans1_t) -> c_int {
    dyload_lib().bl1_does_trans.unwrap()(trans)
}

pub unsafe fn bl1_does_notrans(trans: trans1_t) -> c_int {
    dyload_lib().bl1_does_notrans.unwrap()(trans)
}

pub unsafe fn bl1_does_conj(trans: trans1_t) -> c_int {
    dyload_lib().bl1_does_conj.unwrap()(trans)
}

pub unsafe fn bl1_is_notrans(trans: trans1_t) -> c_int {
    dyload_lib().bl1_is_notrans.unwrap()(trans)
}

pub unsafe fn bl1_is_trans(trans: trans1_t) -> c_int {
    dyload_lib().bl1_is_trans.unwrap()(trans)
}

pub unsafe fn bl1_is_conjnotrans(trans: trans1_t) -> c_int {
    dyload_lib().bl1_is_conjnotrans.unwrap()(trans)
}

pub unsafe fn bl1_is_conjtrans(trans: trans1_t) -> c_int {
    dyload_lib().bl1_is_conjtrans.unwrap()(trans)
}

pub unsafe fn bl1_is_noconj(conj: conj1_t) -> c_int {
    dyload_lib().bl1_is_noconj.unwrap()(conj)
}

pub unsafe fn bl1_is_conj(conj: conj1_t) -> c_int {
    dyload_lib().bl1_is_conj.unwrap()(conj)
}

pub unsafe fn bl1_is_lower(uplo: uplo1_t) -> c_int {
    dyload_lib().bl1_is_lower.unwrap()(uplo)
}

pub unsafe fn bl1_is_upper(uplo: uplo1_t) -> c_int {
    dyload_lib().bl1_is_upper.unwrap()(uplo)
}

pub unsafe fn bl1_is_left(side: side1_t) -> c_int {
    dyload_lib().bl1_is_left.unwrap()(side)
}

pub unsafe fn bl1_is_right(side: side1_t) -> c_int {
    dyload_lib().bl1_is_right.unwrap()(side)
}

pub unsafe fn bl1_is_nonunit_diag(diag: diag1_t) -> c_int {
    dyload_lib().bl1_is_nonunit_diag.unwrap()(diag)
}

pub unsafe fn bl1_is_unit_diag(diag: diag1_t) -> c_int {
    dyload_lib().bl1_is_unit_diag.unwrap()(diag)
}

pub unsafe fn bl1_is_zero_diag(diag: diag1_t) -> c_int {
    dyload_lib().bl1_is_zero_diag.unwrap()(diag)
}

pub unsafe fn bl1_proj_trans1_to_conj(trans: trans1_t) -> conj1_t {
    dyload_lib().bl1_proj_trans1_to_conj.unwrap()(trans)
}

pub unsafe fn bl1_check_storage_3m(
    a_rs: c_int,
    a_cs: c_int,
    b_rs: c_int,
    b_cs: c_int,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_check_storage_3m.unwrap()(a_rs, a_cs, b_rs, b_cs, c_rs, c_cs)
}

pub unsafe fn bl1_check_storage_2m(a_rs: c_int, a_cs: c_int, b_rs: c_int, b_cs: c_int) {
    dyload_lib().bl1_check_storage_2m.unwrap()(a_rs, a_cs, b_rs, b_cs)
}

pub unsafe fn bl1_is_row_or_col_storage(rs: c_int, cs: c_int) -> c_int {
    dyload_lib().bl1_is_row_or_col_storage.unwrap()(rs, cs)
}

pub unsafe fn bl1_is_row_storage(rs: c_int, cs: c_int) -> c_int {
    dyload_lib().bl1_is_row_storage.unwrap()(rs, cs)
}

pub unsafe fn bl1_is_col_storage(rs: c_int, cs: c_int) -> c_int {
    dyload_lib().bl1_is_col_storage.unwrap()(rs, cs)
}

pub unsafe fn bl1_is_gen_storage(rs: c_int, cs: c_int) -> c_int {
    dyload_lib().bl1_is_gen_storage.unwrap()(rs, cs)
}

pub unsafe fn bl1_is_vector(m: c_int, n: c_int) -> c_int {
    dyload_lib().bl1_is_vector.unwrap()(m, n)
}

pub unsafe fn bl1_vector_dim(m: c_int, n: c_int) -> c_int {
    dyload_lib().bl1_vector_dim.unwrap()(m, n)
}

pub unsafe fn bl1_vector_inc(trans: trans1_t, m: c_int, n: c_int, rs: c_int, cs: c_int) -> c_int {
    dyload_lib().bl1_vector_inc.unwrap()(trans, m, n, rs, cs)
}

pub unsafe fn bl1_zero_dim1(m: c_int) -> c_int {
    dyload_lib().bl1_zero_dim1.unwrap()(m)
}

pub unsafe fn bl1_zero_dim2(m: c_int, n: c_int) -> c_int {
    dyload_lib().bl1_zero_dim2.unwrap()(m, n)
}

pub unsafe fn bl1_zero_dim3(m: c_int, k: c_int, n: c_int) -> c_int {
    dyload_lib().bl1_zero_dim3.unwrap()(m, k, n)
}

pub unsafe fn bl1_abort() {
    dyload_lib().bl1_abort.unwrap()()
}

pub unsafe fn bl1_abort_msg(message: *mut c_char) {
    dyload_lib().bl1_abort_msg.unwrap()(message)
}

pub unsafe fn bl1_param_map_to_netlib_trans(blis_trans: trans1_t, blas_trans: *mut c_void) {
    dyload_lib().bl1_param_map_to_netlib_trans.unwrap()(blis_trans, blas_trans)
}

pub unsafe fn bl1_param_map_to_netlib_uplo(blis_uplo: uplo1_t, blas_uplo: *mut c_void) {
    dyload_lib().bl1_param_map_to_netlib_uplo.unwrap()(blis_uplo, blas_uplo)
}

pub unsafe fn bl1_param_map_to_netlib_side(blis_side: side1_t, blas_side: *mut c_void) {
    dyload_lib().bl1_param_map_to_netlib_side.unwrap()(blis_side, blas_side)
}

pub unsafe fn bl1_param_map_to_netlib_diag(blis_diag: diag1_t, blas_diag: *mut c_void) {
    dyload_lib().bl1_param_map_to_netlib_diag.unwrap()(blis_diag, blas_diag)
}

pub unsafe fn bl1_samax(n: c_int, x: *mut f32, incx: c_int, index: *mut c_int) {
    dyload_lib().bl1_samax.unwrap()(n, x, incx, index)
}

pub unsafe fn bl1_damax(n: c_int, x: *mut f64, incx: c_int, index: *mut c_int) {
    dyload_lib().bl1_damax.unwrap()(n, x, incx, index)
}

pub unsafe fn bl1_camax(n: c_int, x: *mut scomplex, incx: c_int, index: *mut c_int) {
    dyload_lib().bl1_camax.unwrap()(n, x, incx, index)
}

pub unsafe fn bl1_zamax(n: c_int, x: *mut dcomplex, incx: c_int, index: *mut c_int) {
    dyload_lib().bl1_zamax.unwrap()(n, x, incx, index)
}

pub unsafe fn bl1_sasum(n: c_int, x: *mut f32, incx: c_int, norm: *mut f32) {
    dyload_lib().bl1_sasum.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_dasum(n: c_int, x: *mut f64, incx: c_int, norm: *mut f64) {
    dyload_lib().bl1_dasum.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_casum(n: c_int, x: *mut scomplex, incx: c_int, norm: *mut f32) {
    dyload_lib().bl1_casum.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_zasum(n: c_int, x: *mut dcomplex, incx: c_int, norm: *mut f64) {
    dyload_lib().bl1_zasum.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_saxpy(
    n: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_saxpy.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_daxpy(
    n: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_daxpy.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_caxpy(
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_caxpy.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_zaxpy(
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zaxpy.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_saxpyv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_saxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_daxpyv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_daxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_caxpyv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_caxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_zaxpyv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zaxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
}

pub unsafe fn bl1_saxpymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_saxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_daxpymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_daxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_caxpymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_caxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zaxpymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zaxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_saxpymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_saxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_daxpymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_daxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_caxpymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_caxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zaxpymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zaxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_saxpysv(
    n: c_int,
    alpha0: *mut f32,
    alpha1: *mut f32,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_saxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
}

pub unsafe fn bl1_daxpysv(
    n: c_int,
    alpha0: *mut f64,
    alpha1: *mut f64,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_daxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
}

pub unsafe fn bl1_caxpysv(
    n: c_int,
    alpha0: *mut scomplex,
    alpha1: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_caxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
}

pub unsafe fn bl1_zaxpysv(
    n: c_int,
    alpha0: *mut dcomplex,
    alpha1: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zaxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
}

pub unsafe fn bl1_saxpysmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha0: *mut f32,
    alpha1: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f32,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_saxpysmt.unwrap()(
        trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_daxpysmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha0: *mut f64,
    alpha1: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f64,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_daxpysmt.unwrap()(
        trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_caxpysmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha0: *mut scomplex,
    alpha1: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut scomplex,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_caxpysmt.unwrap()(
        trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_zaxpysmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    alpha0: *mut dcomplex,
    alpha1: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut dcomplex,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zaxpysmt.unwrap()(
        trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_sconjv(m: c_int, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_sconjv.unwrap()(m, x, incx)
}

pub unsafe fn bl1_dconjv(m: c_int, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_dconjv.unwrap()(m, x, incx)
}

pub unsafe fn bl1_cconjv(m: c_int, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_cconjv.unwrap()(m, x, incx)
}

pub unsafe fn bl1_zconjv(m: c_int, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zconjv.unwrap()(m, x, incx)
}

pub unsafe fn bl1_sconjm(m: c_int, n: c_int, a: *mut f32, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_sconjm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_dconjm(m: c_int, n: c_int, a: *mut f64, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_dconjm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_cconjm(m: c_int, n: c_int, a: *mut scomplex, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_cconjm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_zconjm(m: c_int, n: c_int, a: *mut dcomplex, a_rs: c_int, a_cs: c_int) {
    dyload_lib().bl1_zconjm.unwrap()(m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_sconjmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_dconjmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_cconjmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_zconjmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
}

pub unsafe fn bl1_scopy(m: c_int, x: *mut f32, incx: c_int, y: *mut f32, incy: c_int) {
    dyload_lib().bl1_scopy.unwrap()(m, x, incx, y, incy)
}

pub unsafe fn bl1_dcopy(m: c_int, x: *mut f64, incx: c_int, y: *mut f64, incy: c_int) {
    dyload_lib().bl1_dcopy.unwrap()(m, x, incx, y, incy)
}

pub unsafe fn bl1_ccopy(m: c_int, x: *mut scomplex, incx: c_int, y: *mut scomplex, incy: c_int) {
    dyload_lib().bl1_ccopy.unwrap()(m, x, incx, y, incy)
}

pub unsafe fn bl1_zcopy(m: c_int, x: *mut dcomplex, incx: c_int, y: *mut dcomplex, incy: c_int) {
    dyload_lib().bl1_zcopy.unwrap()(m, x, incx, y, incy)
}

pub unsafe fn bl1_icopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut c_int,
    incx: c_int,
    y: *mut c_int,
    incy: c_int,
) {
    dyload_lib().bl1_icopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_scopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_scopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_dcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_ccopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_ccopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_zcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_sdcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_sdcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_dscopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_dscopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_sccopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_sccopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_cscopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_cscopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_szcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_szcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_zscopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_zscopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_dccopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_dccopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_cdcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_cdcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_dzcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_dzcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_zdcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_zdcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_czcopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_czcopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_zccopyv(
    conj: conj1_t,
    m: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zccopyv.unwrap()(conj, m, x, incx, y, incy)
}

pub unsafe fn bl1_scopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_scopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_ccopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sscopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sdcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sdcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dscopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sccopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cscopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_szcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_szcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zscopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_ddcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ddcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dccopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cdcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cdcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dzcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dzcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zdcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zdcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cccopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_czcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_czcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zccopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zzcopymr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zzcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_scopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_scopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_ccopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sscopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sdcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sdcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sccopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_szcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_szcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dscopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_ddcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ddcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dccopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dzcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dzcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cscopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cdcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cdcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cccopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_czcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_czcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zscopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zdcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zdcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zccopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zzcopymrt(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zzcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_icopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut c_int,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut c_int,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_icopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_scopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_scopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_ccopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sscopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sdcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sdcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dscopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sccopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cscopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_szcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_szcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zscopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_ddcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ddcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dccopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cdcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cdcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dzcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dzcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zdcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zdcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cccopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_czcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_czcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zccopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zzcopymt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zzcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cdot_in(
    conj: conj1_t,
    n: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    rho: *mut scomplex,
) {
    dyload_lib().bl1_cdot_in.unwrap()(conj, n, x, incx, y, incy, rho)
}

pub unsafe fn bl1_zdot_in(
    conj: conj1_t,
    n: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    rho: *mut dcomplex,
) {
    dyload_lib().bl1_zdot_in.unwrap()(conj, n, x, incx, y, incy, rho)
}

pub unsafe fn bl1_sdot(
    conj: conj1_t,
    n: c_int,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    rho: *mut f32,
) {
    dyload_lib().bl1_sdot.unwrap()(conj, n, x, incx, y, incy, rho)
}

pub unsafe fn bl1_ddot(
    conj: conj1_t,
    n: c_int,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    rho: *mut f64,
) {
    dyload_lib().bl1_ddot.unwrap()(conj, n, x, incx, y, incy, rho)
}

pub unsafe fn bl1_cdot(
    conj: conj1_t,
    n: c_int,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    rho: *mut scomplex,
) {
    dyload_lib().bl1_cdot.unwrap()(conj, n, x, incx, y, incy, rho)
}

pub unsafe fn bl1_zdot(
    conj: conj1_t,
    n: c_int,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    rho: *mut dcomplex,
) {
    dyload_lib().bl1_zdot.unwrap()(conj, n, x, incx, y, incy, rho)
}

pub unsafe fn bl1_sdots(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    beta: *mut f32,
    rho: *mut f32,
) {
    dyload_lib().bl1_sdots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_ddots(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    beta: *mut f64,
    rho: *mut f64,
) {
    dyload_lib().bl1_ddots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_cdots(
    conj: conj1_t,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    beta: *mut scomplex,
    rho: *mut scomplex,
) {
    dyload_lib().bl1_cdots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_zdots(
    conj: conj1_t,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
) {
    dyload_lib().bl1_zdots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_sdot2s(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    beta: *mut f32,
    rho: *mut f32,
) {
    dyload_lib().bl1_sdot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_ddot2s(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    beta: *mut f64,
    rho: *mut f64,
) {
    dyload_lib().bl1_ddot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_cdot2s(
    conj: conj1_t,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    beta: *mut scomplex,
    rho: *mut scomplex,
) {
    dyload_lib().bl1_cdot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_zdot2s(
    conj: conj1_t,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
) {
    dyload_lib().bl1_zdot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bl1_sfnorm(
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    norm: *mut f32,
) {
    dyload_lib().bl1_sfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
}

pub unsafe fn bl1_dfnorm(
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    norm: *mut f64,
) {
    dyload_lib().bl1_dfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
}

pub unsafe fn bl1_cfnorm(
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    norm: *mut f32,
) {
    dyload_lib().bl1_cfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
}

pub unsafe fn bl1_zfnorm(
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    norm: *mut f64,
) {
    dyload_lib().bl1_zfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
}

pub unsafe fn bl1_sinvscalv(conj: conj1_t, n: c_int, alpha: *mut f32, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_sinvscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_dinvscalv(conj: conj1_t, n: c_int, alpha: *mut f64, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_dinvscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_csinvscalv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f32,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_csinvscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_cinvscalv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_cinvscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_zdinvscalv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut f64,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_zdinvscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_zinvscalv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_zinvscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_sinvscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_dinvscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_csinvscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_cinvscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_zdinvscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zdinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_zinvscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_snrm2(n: c_int, x: *mut f32, incx: c_int, norm: *mut f32) {
    dyload_lib().bl1_snrm2.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_dnrm2(n: c_int, x: *mut f64, incx: c_int, norm: *mut f64) {
    dyload_lib().bl1_dnrm2.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_cnrm2(n: c_int, x: *mut scomplex, incx: c_int, norm: *mut f32) {
    dyload_lib().bl1_cnrm2.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_znrm2(n: c_int, x: *mut dcomplex, incx: c_int, norm: *mut f64) {
    dyload_lib().bl1_znrm2.unwrap()(n, x, incx, norm)
}

pub unsafe fn bl1_sscal(n: c_int, alpha: *mut f32, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_sscal.unwrap()(n, alpha, x, incx)
}

pub unsafe fn bl1_dscal(n: c_int, alpha: *mut f64, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_dscal.unwrap()(n, alpha, x, incx)
}

pub unsafe fn bl1_csscal(n: c_int, alpha: *mut f32, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_csscal.unwrap()(n, alpha, x, incx)
}

pub unsafe fn bl1_cscal(n: c_int, alpha: *mut scomplex, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_cscal.unwrap()(n, alpha, x, incx)
}

pub unsafe fn bl1_zdscal(n: c_int, alpha: *mut f64, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zdscal.unwrap()(n, alpha, x, incx)
}

pub unsafe fn bl1_zscal(n: c_int, alpha: *mut dcomplex, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zscal.unwrap()(n, alpha, x, incx)
}

pub unsafe fn bl1_sscalv(conj: conj1_t, n: c_int, alpha: *mut f32, x: *mut f32, incx: c_int) {
    dyload_lib().bl1_sscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_dscalv(conj: conj1_t, n: c_int, alpha: *mut f64, x: *mut f64, incx: c_int) {
    dyload_lib().bl1_dscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_csscalv(conj: conj1_t, n: c_int, alpha: *mut f32, x: *mut scomplex, incx: c_int) {
    dyload_lib().bl1_csscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_cscalv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_cscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_zdscalv(conj: conj1_t, n: c_int, alpha: *mut f64, x: *mut dcomplex, incx: c_int) {
    dyload_lib().bl1_zdscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_zscalv(
    conj: conj1_t,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_zscalv.unwrap()(conj, n, alpha, x, incx)
}

pub unsafe fn bl1_sscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_dscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_csscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_cscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_zdscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zdscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_zscalm(
    conj: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_sscalmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_dscalmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_csscalmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_cscalmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_zdscalmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zdscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_zscalmr(
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
}

pub unsafe fn bl1_sswap(n: c_int, x: *mut f32, incx: c_int, y: *mut f32, incy: c_int) {
    dyload_lib().bl1_sswap.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_dswap(n: c_int, x: *mut f64, incx: c_int, y: *mut f64, incy: c_int) {
    dyload_lib().bl1_dswap.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_cswap(n: c_int, x: *mut scomplex, incx: c_int, y: *mut scomplex, incy: c_int) {
    dyload_lib().bl1_cswap.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_zswap(n: c_int, x: *mut dcomplex, incx: c_int, y: *mut dcomplex, incy: c_int) {
    dyload_lib().bl1_zswap.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_sswapv(n: c_int, x: *mut f32, incx: c_int, y: *mut f32, incy: c_int) {
    dyload_lib().bl1_sswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_dswapv(n: c_int, x: *mut f64, incx: c_int, y: *mut f64, incy: c_int) {
    dyload_lib().bl1_dswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_cswapv(n: c_int, x: *mut scomplex, incx: c_int, y: *mut scomplex, incy: c_int) {
    dyload_lib().bl1_cswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_zswapv(n: c_int, x: *mut dcomplex, incx: c_int, y: *mut dcomplex, incy: c_int) {
    dyload_lib().bl1_zswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bl1_sswapmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_sswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_dswapmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_cswapmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_cswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_zswapmt(
    trans: trans1_t,
    m: c_int,
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_zswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
}

pub unsafe fn bl1_sgemv(
    transa: trans1_t,
    conjx: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_sgemv.unwrap()(
        transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_dgemv(
    transa: trans1_t,
    conjx: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dgemv.unwrap()(
        transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_cgemv(
    transa: trans1_t,
    conjx: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_cgemv.unwrap()(
        transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_zgemv(
    transa: trans1_t,
    conjx: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zgemv.unwrap()(
        transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_sgemv_blas(
    transa: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_sgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_dgemv_blas(
    transa: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_cgemv_blas(
    transa: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_cgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_zgemv_blas(
    transa: trans1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_sger(
    conjx: conj1_t,
    conjy: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_dger(
    conjx: conj1_t,
    conjy: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_cger(
    conjx: conj1_t,
    conjy: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_zger(
    conjx: conj1_t,
    conjy: conj1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_sger_blas(
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    a: *mut f32,
    lda: c_int,
) {
    dyload_lib().bl1_sger_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_dger_blas(
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    a: *mut f64,
    lda: c_int,
) {
    dyload_lib().bl1_dger_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_cgerc_blas(
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    lda: c_int,
) {
    dyload_lib().bl1_cgerc_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_cgeru_blas(
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    lda: c_int,
) {
    dyload_lib().bl1_cgeru_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_zgerc_blas(
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    lda: c_int,
) {
    dyload_lib().bl1_zgerc_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_zgeru_blas(
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    lda: c_int,
) {
    dyload_lib().bl1_zgeru_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_shemv(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_shemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_dhemv(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dhemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_chemv(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_chemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_zhemv(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zhemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_chemv_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_chemv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_zhemv_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zhemv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_sher(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_dher(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_cher(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut scomplex,
    incx: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_zher(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut dcomplex,
    incx: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_cher_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut scomplex,
    incx: c_int,
    a: *mut scomplex,
    lda: c_int,
) {
    dyload_lib().bl1_cher_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
}

pub unsafe fn bl1_zher_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut dcomplex,
    incx: c_int,
    a: *mut dcomplex,
    lda: c_int,
) {
    dyload_lib().bl1_zher_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
}

pub unsafe fn bl1_sher2(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_sher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_dher2(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_cher2(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_cher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_zher2(
    uplo: uplo1_t,
    conj: conj1_t,
    m: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_cher2_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    lda: c_int,
) {
    dyload_lib().bl1_cher2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_zher2_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    lda: c_int,
) {
    dyload_lib().bl1_zher2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_ssymv(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_ssymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_dsymv(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dsymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_csymv(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_csymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_zsymv(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zsymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
}

pub unsafe fn bl1_ssymv_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_ssymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_dsymv_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dsymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_csymv_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_csymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_zsymv_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_zsymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn bl1_ssyr(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_ssyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_dsyr(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dsyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_csyr(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_zsyr(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zsyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
}

pub unsafe fn bl1_ssyr_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    a: *mut f32,
    lda: c_int,
) {
    dyload_lib().bl1_ssyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
}

pub unsafe fn bl1_dsyr_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    a: *mut f64,
    lda: c_int,
) {
    dyload_lib().bl1_dsyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
}

pub unsafe fn bl1_csyr_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    a: *mut scomplex,
    lda: c_int,
) {
    dyload_lib().bl1_csyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
}

pub unsafe fn bl1_zsyr_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    a: *mut dcomplex,
    lda: c_int,
) {
    dyload_lib().bl1_zsyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
}

pub unsafe fn bl1_ssyr2(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_ssyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_dsyr2(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_dsyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_csyr2(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_csyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_zsyr2(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
) {
    dyload_lib().bl1_zsyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
}

pub unsafe fn bl1_ssyr2_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: c_int,
    y: *mut f32,
    incy: c_int,
    a: *mut f32,
    lda: c_int,
) {
    dyload_lib().bl1_ssyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_dsyr2_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: c_int,
    y: *mut f64,
    incy: c_int,
    a: *mut f64,
    lda: c_int,
) {
    dyload_lib().bl1_dsyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_csyr2_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: c_int,
    y: *mut scomplex,
    incy: c_int,
    a: *mut scomplex,
    lda: c_int,
) {
    dyload_lib().bl1_csyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_zsyr2_blas(
    uplo: uplo1_t,
    m: c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: c_int,
    y: *mut dcomplex,
    incy: c_int,
    a: *mut dcomplex,
    lda: c_int,
) {
    dyload_lib().bl1_zsyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn bl1_strmv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
) {
    dyload_lib().bl1_strmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_dtrmv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
) {
    dyload_lib().bl1_dtrmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_ctrmv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ctrmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_ztrmv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ztrmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_strmv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f32,
    lda: c_int,
    x: *mut f32,
    incx: c_int,
) {
    dyload_lib().bl1_strmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_dtrmv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f64,
    lda: c_int,
    x: *mut f64,
    incx: c_int,
) {
    dyload_lib().bl1_dtrmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_ctrmv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut scomplex,
    lda: c_int,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ctrmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_ztrmv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut dcomplex,
    lda: c_int,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ztrmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_strsv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
) {
    dyload_lib().bl1_strsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_dtrsv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
) {
    dyload_lib().bl1_dtrsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_ctrsv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ctrsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_ztrsv(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ztrsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
}

pub unsafe fn bl1_strsv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f32,
    lda: c_int,
    x: *mut f32,
    incx: c_int,
) {
    dyload_lib().bl1_strsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_dtrsv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut f64,
    lda: c_int,
    x: *mut f64,
    incx: c_int,
) {
    dyload_lib().bl1_dtrsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_ctrsv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut scomplex,
    lda: c_int,
    x: *mut scomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ctrsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_ztrsv_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    a: *mut dcomplex,
    lda: c_int,
    x: *mut dcomplex,
    incx: c_int,
) {
    dyload_lib().bl1_ztrsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
}

pub unsafe fn bl1_strmvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_strmvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_dtrmvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dtrmvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_ctrmvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_ctrmvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_ztrmvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_ztrmvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_strsvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f32,
    incx: c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: c_int,
) {
    dyload_lib().bl1_strsvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_dtrsvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut f64,
    incx: c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: c_int,
) {
    dyload_lib().bl1_dtrsvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_ctrsvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut scomplex,
    incx: c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: c_int,
) {
    dyload_lib().bl1_ctrsvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_ztrsvsx(
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    x: *mut dcomplex,
    incx: c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: c_int,
) {
    dyload_lib().bl1_ztrsvsx.unwrap()(
        uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy,
    )
}

pub unsafe fn bl1_sgemm(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    k: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_sgemm.unwrap()(
        transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dgemm(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    k: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dgemm.unwrap()(
        transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_cgemm(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    k: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_cgemm.unwrap()(
        transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_zgemm(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    k: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zgemm.unwrap()(
        transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_sgemm_blas(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    n: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    b: *mut f32,
    ldb: c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: c_int,
) {
    dyload_lib().bl1_sgemm_blas.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn bl1_dgemm_blas(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    n: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    b: *mut f64,
    ldb: c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: c_int,
) {
    dyload_lib().bl1_dgemm_blas.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn bl1_cgemm_blas(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    n: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_cgemm_blas.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn bl1_zgemm_blas(
    transa: trans1_t,
    transb: trans1_t,
    m: c_int,
    n: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zgemm_blas.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn bl1_shemm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_shemm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dhemm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dhemm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_chemm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_chemm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_zhemm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zhemm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_chemm_blas(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_chemm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_zhemm_blas(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zhemm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_sherk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_sherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_dherk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_cherk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f32,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_cherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_zherk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f64,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_cherk_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut scomplex,
    lda: c_int,
    beta: *mut f32,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_cherk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn bl1_zherk_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut dcomplex,
    lda: c_int,
    beta: *mut f64,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zherk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn bl1_sher2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_sher2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dher2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dher2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_cher2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_cher2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_zher2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zher2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_cher2k_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
    beta: *mut f32,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_cher2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_zher2k_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
    beta: *mut f64,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zher2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_ssymm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ssymm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dsymm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dsymm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_csymm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_csymm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_zsymm(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zsymm.unwrap()(
        side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_ssymm_blas(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    b: *mut f32,
    ldb: c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: c_int,
) {
    dyload_lib().bl1_ssymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_dsymm_blas(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    b: *mut f64,
    ldb: c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: c_int,
) {
    dyload_lib().bl1_dsymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_csymm_blas(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_csymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_zsymm_blas(
    side: side1_t,
    uplo: uplo1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zsymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_ssyrk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ssyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_dsyrk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dsyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_csyrk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_csyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_zsyrk(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zsyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
}

pub unsafe fn bl1_ssyrk_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: c_int,
) {
    dyload_lib().bl1_ssyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn bl1_dsyrk_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: c_int,
) {
    dyload_lib().bl1_dsyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn bl1_csyrk_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_csyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn bl1_zsyrk_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zsyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn bl1_ssyr2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ssyr2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dsyr2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dsyr2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_csyr2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_csyr2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_zsyr2k(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_zsyr2k.unwrap()(
        uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_ssyr2k_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    b: *mut f32,
    ldb: c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: c_int,
) {
    dyload_lib().bl1_ssyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_dsyr2k_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    b: *mut f64,
    ldb: c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: c_int,
) {
    dyload_lib().bl1_dsyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_csyr2k_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_csyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_zsyr2k_blas(
    uplo: uplo1_t,
    trans: trans1_t,
    m: c_int,
    k: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: c_int,
) {
    dyload_lib().bl1_zsyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bl1_strmm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_strmm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_dtrmm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dtrmm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_ctrmm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ctrmm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_ztrmm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ztrmm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_strmm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    b: *mut f32,
    ldb: c_int,
) {
    dyload_lib().bl1_strmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_dtrmm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    b: *mut f64,
    ldb: c_int,
) {
    dyload_lib().bl1_dtrmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_ctrmm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
) {
    dyload_lib().bl1_ctrmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_ztrmm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
) {
    dyload_lib().bl1_ztrmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_strsm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_strsm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_dtrsm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_dtrsm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_ctrsm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ctrsm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_ztrsm(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
) {
    dyload_lib().bl1_ztrsm.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs,
    )
}

pub unsafe fn bl1_strsm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: c_int,
    b: *mut f32,
    ldb: c_int,
) {
    dyload_lib().bl1_strsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_dtrsm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: c_int,
    b: *mut f64,
    ldb: c_int,
) {
    dyload_lib().bl1_dtrsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_ctrsm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: c_int,
    b: *mut scomplex,
    ldb: c_int,
) {
    dyload_lib().bl1_ctrsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_ztrsm_blas(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: c_int,
    b: *mut dcomplex,
    ldb: c_int,
) {
    dyload_lib().bl1_ztrsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn bl1_strmmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_strmmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dtrmmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dtrmmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_ctrmmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ctrmmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_ztrmmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ztrmmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_strsmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f32,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f32,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f32,
    c: *mut f32,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_strsmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_dtrsmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut f64,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut f64,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut f64,
    c: *mut f64,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_dtrsmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_ctrsmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut scomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ctrsmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_ztrsmsx(
    side: side1_t,
    uplo: uplo1_t,
    trans: trans1_t,
    diag: diag1_t,
    m: c_int,
    n: c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    b: *mut dcomplex,
    b_rs: c_int,
    b_cs: c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    c_rs: c_int,
    c_cs: c_int,
) {
    dyload_lib().bl1_ztrsmsx.unwrap()(
        side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs,
    )
}

pub unsafe fn bl1_saxmyv2(
    conjx: conj1_t,
    n: c_int,
    alpha: *mut f32,
    beta: *mut f32,
    x: *mut f32,
    inc_x: c_int,
    y: *mut f32,
    inc_y: c_int,
    z: *mut f32,
    inc_z: c_int,
) {
    dyload_lib().bl1_saxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
}

pub unsafe fn bl1_daxmyv2(
    conjx: conj1_t,
    n: c_int,
    alpha: *mut f64,
    beta: *mut f64,
    x: *mut f64,
    inc_x: c_int,
    y: *mut f64,
    inc_y: c_int,
    z: *mut f64,
    inc_z: c_int,
) {
    dyload_lib().bl1_daxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
}

pub unsafe fn bl1_caxmyv2(
    conjx: conj1_t,
    n: c_int,
    alpha: *mut scomplex,
    beta: *mut scomplex,
    x: *mut scomplex,
    inc_x: c_int,
    y: *mut scomplex,
    inc_y: c_int,
    z: *mut scomplex,
    inc_z: c_int,
) {
    dyload_lib().bl1_caxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
}

pub unsafe fn bl1_zaxmyv2(
    conjx: conj1_t,
    n: c_int,
    alpha: *mut dcomplex,
    beta: *mut dcomplex,
    x: *mut dcomplex,
    inc_x: c_int,
    y: *mut dcomplex,
    inc_y: c_int,
    z: *mut dcomplex,
    inc_z: c_int,
) {
    dyload_lib().bl1_zaxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
}

pub unsafe fn bl1_saxpyv2b(
    n: c_int,
    beta1: *mut f32,
    beta2: *mut f32,
    a1: *mut f32,
    inc_a1: c_int,
    a2: *mut f32,
    inc_a2: c_int,
    w: *mut f32,
    inc_w: c_int,
) {
    dyload_lib().bl1_saxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
}

pub unsafe fn bl1_daxpyv2b(
    n: c_int,
    beta1: *mut f64,
    beta2: *mut f64,
    a1: *mut f64,
    inc_a1: c_int,
    a2: *mut f64,
    inc_a2: c_int,
    w: *mut f64,
    inc_w: c_int,
) {
    dyload_lib().bl1_daxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
}

pub unsafe fn bl1_caxpyv2b(
    n: c_int,
    beta1: *mut scomplex,
    beta2: *mut scomplex,
    a1: *mut scomplex,
    inc_a1: c_int,
    a2: *mut scomplex,
    inc_a2: c_int,
    w: *mut scomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_caxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
}

pub unsafe fn bl1_zaxpyv2b(
    n: c_int,
    beta1: *mut dcomplex,
    beta2: *mut dcomplex,
    a1: *mut dcomplex,
    inc_a1: c_int,
    a2: *mut dcomplex,
    inc_a2: c_int,
    w: *mut dcomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_zaxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
}

pub unsafe fn bl1_saxpyv3b(
    n: c_int,
    beta1: *mut f32,
    beta2: *mut f32,
    beta3: *mut f32,
    a1: *mut f32,
    inc_a1: c_int,
    a2: *mut f32,
    inc_a2: c_int,
    a3: *mut f32,
    inc_a3: c_int,
    w: *mut f32,
    inc_w: c_int,
) {
    dyload_lib().bl1_saxpyv3b.unwrap()(
        n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w,
    )
}

pub unsafe fn bl1_daxpyv3b(
    n: c_int,
    beta1: *mut f64,
    beta2: *mut f64,
    beta3: *mut f64,
    a1: *mut f64,
    inc_a1: c_int,
    a2: *mut f64,
    inc_a2: c_int,
    a3: *mut f64,
    inc_a3: c_int,
    w: *mut f64,
    inc_w: c_int,
) {
    dyload_lib().bl1_daxpyv3b.unwrap()(
        n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w,
    )
}

pub unsafe fn bl1_caxpyv3b(
    n: c_int,
    beta1: *mut scomplex,
    beta2: *mut scomplex,
    beta3: *mut scomplex,
    a1: *mut scomplex,
    inc_a1: c_int,
    a2: *mut scomplex,
    inc_a2: c_int,
    a3: *mut scomplex,
    inc_a3: c_int,
    w: *mut scomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_caxpyv3b.unwrap()(
        n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w,
    )
}

pub unsafe fn bl1_zaxpyv3b(
    n: c_int,
    beta1: *mut dcomplex,
    beta2: *mut dcomplex,
    beta3: *mut dcomplex,
    a1: *mut dcomplex,
    inc_a1: c_int,
    a2: *mut dcomplex,
    inc_a2: c_int,
    a3: *mut dcomplex,
    inc_a3: c_int,
    w: *mut dcomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_zaxpyv3b.unwrap()(
        n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w,
    )
}

pub unsafe fn bl1_saxpyv2bdotaxpy(
    n: c_int,
    beta: *mut f32,
    u: *mut f32,
    inc_u: c_int,
    gamma: *mut f32,
    z: *mut f32,
    inc_z: c_int,
    a: *mut f32,
    inc_a: c_int,
    x: *mut f32,
    inc_x: c_int,
    kappa: *mut f32,
    rho: *mut f32,
    w: *mut f32,
    inc_w: c_int,
) {
    dyload_lib().bl1_saxpyv2bdotaxpy.unwrap()(
        n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w,
    )
}

pub unsafe fn bl1_daxpyv2bdotaxpy(
    n: c_int,
    beta: *mut f64,
    u: *mut f64,
    inc_u: c_int,
    gamma: *mut f64,
    z: *mut f64,
    inc_z: c_int,
    a: *mut f64,
    inc_a: c_int,
    x: *mut f64,
    inc_x: c_int,
    kappa: *mut f64,
    rho: *mut f64,
    w: *mut f64,
    inc_w: c_int,
) {
    dyload_lib().bl1_daxpyv2bdotaxpy.unwrap()(
        n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w,
    )
}

pub unsafe fn bl1_caxpyv2bdotaxpy(
    n: c_int,
    beta: *mut scomplex,
    u: *mut scomplex,
    inc_u: c_int,
    gamma: *mut scomplex,
    z: *mut scomplex,
    inc_z: c_int,
    a: *mut scomplex,
    inc_a: c_int,
    x: *mut scomplex,
    inc_x: c_int,
    kappa: *mut scomplex,
    rho: *mut scomplex,
    w: *mut scomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_caxpyv2bdotaxpy.unwrap()(
        n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w,
    )
}

pub unsafe fn bl1_zaxpyv2bdotaxpy(
    n: c_int,
    beta: *mut dcomplex,
    u: *mut dcomplex,
    inc_u: c_int,
    gamma: *mut dcomplex,
    z: *mut dcomplex,
    inc_z: c_int,
    a: *mut dcomplex,
    inc_a: c_int,
    x: *mut dcomplex,
    inc_x: c_int,
    kappa: *mut dcomplex,
    rho: *mut dcomplex,
    w: *mut dcomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_zaxpyv2bdotaxpy.unwrap()(
        n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w,
    )
}

pub unsafe fn bl1_sdotsv2(
    conjxy: conj1_t,
    n: c_int,
    x: *mut f32,
    inc_x: c_int,
    y: *mut f32,
    inc_y: c_int,
    z: *mut f32,
    inc_z: c_int,
    beta: *mut f32,
    rho_xz: *mut f32,
    rho_yz: *mut f32,
) {
    dyload_lib().bl1_sdotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
}

pub unsafe fn bl1_ddotsv2(
    conjxy: conj1_t,
    n: c_int,
    x: *mut f64,
    inc_x: c_int,
    y: *mut f64,
    inc_y: c_int,
    z: *mut f64,
    inc_z: c_int,
    beta: *mut f64,
    rho_xz: *mut f64,
    rho_yz: *mut f64,
) {
    dyload_lib().bl1_ddotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
}

pub unsafe fn bl1_cdotsv2(
    conjxy: conj1_t,
    n: c_int,
    x: *mut scomplex,
    inc_x: c_int,
    y: *mut scomplex,
    inc_y: c_int,
    z: *mut scomplex,
    inc_z: c_int,
    beta: *mut scomplex,
    rho_xz: *mut scomplex,
    rho_yz: *mut scomplex,
) {
    dyload_lib().bl1_cdotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
}

pub unsafe fn bl1_zdotsv2(
    conjxy: conj1_t,
    n: c_int,
    x: *mut dcomplex,
    inc_x: c_int,
    y: *mut dcomplex,
    inc_y: c_int,
    z: *mut dcomplex,
    inc_z: c_int,
    beta: *mut dcomplex,
    rho_xz: *mut dcomplex,
    rho_yz: *mut dcomplex,
) {
    dyload_lib().bl1_zdotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
}

pub unsafe fn bl1_sdotsv3(
    conjxyw: conj1_t,
    n: c_int,
    x: *mut f32,
    inc_x: c_int,
    y: *mut f32,
    inc_y: c_int,
    w: *mut f32,
    inc_w: c_int,
    z: *mut f32,
    inc_z: c_int,
    beta: *mut f32,
    rho_xz: *mut f32,
    rho_yz: *mut f32,
    rho_wz: *mut f32,
) {
    dyload_lib().bl1_sdotsv3.unwrap()(
        conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz,
    )
}

pub unsafe fn bl1_ddotsv3(
    conjxyw: conj1_t,
    n: c_int,
    x: *mut f64,
    inc_x: c_int,
    y: *mut f64,
    inc_y: c_int,
    w: *mut f64,
    inc_w: c_int,
    z: *mut f64,
    inc_z: c_int,
    beta: *mut f64,
    rho_xz: *mut f64,
    rho_yz: *mut f64,
    rho_wz: *mut f64,
) {
    dyload_lib().bl1_ddotsv3.unwrap()(
        conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz,
    )
}

pub unsafe fn bl1_cdotsv3(
    conjxyw: conj1_t,
    n: c_int,
    x: *mut scomplex,
    inc_x: c_int,
    y: *mut scomplex,
    inc_y: c_int,
    w: *mut scomplex,
    inc_w: c_int,
    z: *mut scomplex,
    inc_z: c_int,
    beta: *mut scomplex,
    rho_xz: *mut scomplex,
    rho_yz: *mut scomplex,
    rho_wz: *mut scomplex,
) {
    dyload_lib().bl1_cdotsv3.unwrap()(
        conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz,
    )
}

pub unsafe fn bl1_zdotsv3(
    conjxyw: conj1_t,
    n: c_int,
    x: *mut dcomplex,
    inc_x: c_int,
    y: *mut dcomplex,
    inc_y: c_int,
    w: *mut dcomplex,
    inc_w: c_int,
    z: *mut dcomplex,
    inc_z: c_int,
    beta: *mut dcomplex,
    rho_xz: *mut dcomplex,
    rho_yz: *mut dcomplex,
    rho_wz: *mut dcomplex,
) {
    dyload_lib().bl1_zdotsv3.unwrap()(
        conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz,
    )
}

pub unsafe fn bl1_sdotaxpy(
    n: c_int,
    a: *mut f32,
    inc_a: c_int,
    x: *mut f32,
    inc_x: c_int,
    kappa: *mut f32,
    rho: *mut f32,
    w: *mut f32,
    inc_w: c_int,
) {
    dyload_lib().bl1_sdotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
}

pub unsafe fn bl1_ddotaxpy(
    n: c_int,
    a: *mut f64,
    inc_a: c_int,
    x: *mut f64,
    inc_x: c_int,
    kappa: *mut f64,
    rho: *mut f64,
    w: *mut f64,
    inc_w: c_int,
) {
    dyload_lib().bl1_ddotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
}

pub unsafe fn bl1_cdotaxpy(
    n: c_int,
    a: *mut scomplex,
    inc_a: c_int,
    x: *mut scomplex,
    inc_x: c_int,
    kappa: *mut scomplex,
    rho: *mut scomplex,
    w: *mut scomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_cdotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
}

pub unsafe fn bl1_zdotaxpy(
    n: c_int,
    a: *mut dcomplex,
    inc_a: c_int,
    x: *mut dcomplex,
    inc_x: c_int,
    kappa: *mut dcomplex,
    rho: *mut dcomplex,
    w: *mut dcomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_zdotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
}

pub unsafe fn bl1_sdotaxmyv2(
    n: c_int,
    alpha: *mut f32,
    beta: *mut f32,
    x: *mut f32,
    inc_x: c_int,
    u: *mut f32,
    inc_u: c_int,
    rho: *mut f32,
    y: *mut f32,
    inc_y: c_int,
    z: *mut f32,
    inc_z: c_int,
) {
    dyload_lib().bl1_sdotaxmyv2.unwrap()(
        n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z,
    )
}

pub unsafe fn bl1_ddotaxmyv2(
    n: c_int,
    alpha: *mut f64,
    beta: *mut f64,
    x: *mut f64,
    inc_x: c_int,
    u: *mut f64,
    inc_u: c_int,
    rho: *mut f64,
    y: *mut f64,
    inc_y: c_int,
    z: *mut f64,
    inc_z: c_int,
) {
    dyload_lib().bl1_ddotaxmyv2.unwrap()(
        n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z,
    )
}

pub unsafe fn bl1_cdotaxmyv2(
    n: c_int,
    alpha: *mut scomplex,
    beta: *mut scomplex,
    x: *mut scomplex,
    inc_x: c_int,
    u: *mut scomplex,
    inc_u: c_int,
    rho: *mut scomplex,
    y: *mut scomplex,
    inc_y: c_int,
    z: *mut scomplex,
    inc_z: c_int,
) {
    dyload_lib().bl1_cdotaxmyv2.unwrap()(
        n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z,
    )
}

pub unsafe fn bl1_zdotaxmyv2(
    n: c_int,
    alpha: *mut dcomplex,
    beta: *mut dcomplex,
    x: *mut dcomplex,
    inc_x: c_int,
    u: *mut dcomplex,
    inc_u: c_int,
    rho: *mut dcomplex,
    y: *mut dcomplex,
    inc_y: c_int,
    z: *mut dcomplex,
    inc_z: c_int,
) {
    dyload_lib().bl1_zdotaxmyv2.unwrap()(
        n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z,
    )
}

pub unsafe fn bl1_sdotv2axpyv2b(
    n: c_int,
    a1: *mut f32,
    inc_a1: c_int,
    a2: *mut f32,
    inc_a2: c_int,
    x: *mut f32,
    inc_x: c_int,
    kappa1: *mut f32,
    kappa2: *mut f32,
    rho1: *mut f32,
    rho2: *mut f32,
    w: *mut f32,
    inc_w: c_int,
) {
    dyload_lib().bl1_sdotv2axpyv2b.unwrap()(
        n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w,
    )
}

pub unsafe fn bl1_ddotv2axpyv2b(
    n: c_int,
    a1: *mut f64,
    inc_a1: c_int,
    a2: *mut f64,
    inc_a2: c_int,
    x: *mut f64,
    inc_x: c_int,
    kappa1: *mut f64,
    kappa2: *mut f64,
    rho1: *mut f64,
    rho2: *mut f64,
    w: *mut f64,
    inc_w: c_int,
) {
    dyload_lib().bl1_ddotv2axpyv2b.unwrap()(
        n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w,
    )
}

pub unsafe fn bl1_cdotv2axpyv2b(
    n: c_int,
    a1: *mut scomplex,
    inc_a1: c_int,
    a2: *mut scomplex,
    inc_a2: c_int,
    x: *mut scomplex,
    inc_x: c_int,
    kappa1: *mut scomplex,
    kappa2: *mut scomplex,
    rho1: *mut scomplex,
    rho2: *mut scomplex,
    w: *mut scomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_cdotv2axpyv2b.unwrap()(
        n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w,
    )
}

pub unsafe fn bl1_zdotv2axpyv2b(
    n: c_int,
    a1: *mut dcomplex,
    inc_a1: c_int,
    a2: *mut dcomplex,
    inc_a2: c_int,
    x: *mut dcomplex,
    inc_x: c_int,
    kappa1: *mut dcomplex,
    kappa2: *mut dcomplex,
    rho1: *mut dcomplex,
    rho2: *mut dcomplex,
    w: *mut dcomplex,
    inc_w: c_int,
) {
    dyload_lib().bl1_zdotv2axpyv2b.unwrap()(
        n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w,
    )
}

pub unsafe fn bl1_zaxpyv2bdots(
    n: c_int,
    alpha1: *mut dcomplex,
    alpha2: *mut dcomplex,
    x1: *mut dcomplex,
    inc_x1: c_int,
    x2: *mut dcomplex,
    inc_x2: c_int,
    y: *mut dcomplex,
    inc_y: c_int,
    u: *mut dcomplex,
    inc_u: c_int,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
) {
    dyload_lib().bl1_zaxpyv2bdots.unwrap()(
        n, alpha1, alpha2, x1, inc_x1, x2, inc_x2, y, inc_y, u, inc_u, beta, rho,
    )
}

pub unsafe fn isamax_(n: *mut c_int, x: *mut f32, incx: *mut c_int) -> c_int {
    dyload_lib().isamax_.unwrap()(n, x, incx)
}

pub unsafe fn idamax_(n: *mut c_int, x: *mut f64, incx: *mut c_int) -> c_int {
    dyload_lib().idamax_.unwrap()(n, x, incx)
}

pub unsafe fn icamax_(n: *mut c_int, x: *mut scomplex, incx: *mut c_int) -> c_int {
    dyload_lib().icamax_.unwrap()(n, x, incx)
}

pub unsafe fn izamax_(n: *mut c_int, x: *mut dcomplex, incx: *mut c_int) -> c_int {
    dyload_lib().izamax_.unwrap()(n, x, incx)
}

pub unsafe fn sasum_(n: *mut c_int, x: *mut f32, incx: *mut c_int) -> f32 {
    dyload_lib().sasum_.unwrap()(n, x, incx)
}

pub unsafe fn dasum_(n: *mut c_int, x: *mut f64, incx: *mut c_int) -> f64 {
    dyload_lib().dasum_.unwrap()(n, x, incx)
}

pub unsafe fn scasum_(n: *mut c_int, x: *mut scomplex, incx: *mut c_int) -> f32 {
    dyload_lib().scasum_.unwrap()(n, x, incx)
}

pub unsafe fn dzasum_(n: *mut c_int, x: *mut dcomplex, incx: *mut c_int) -> f64 {
    dyload_lib().dzasum_.unwrap()(n, x, incx)
}

pub unsafe fn saxpy_(
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: *mut c_int,
    y: *mut f32,
    incy: *mut c_int,
) {
    dyload_lib().saxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn daxpy_(
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: *mut c_int,
    y: *mut f64,
    incy: *mut c_int,
) {
    dyload_lib().daxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn caxpy_(
    n: *mut c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().caxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn zaxpy_(
    n: *mut c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().zaxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn scopy_(n: *mut c_int, x: *mut f32, incx: *mut c_int, y: *mut f32, incy: *mut c_int) {
    dyload_lib().scopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dcopy_(n: *mut c_int, x: *mut f64, incx: *mut c_int, y: *mut f64, incy: *mut c_int) {
    dyload_lib().dcopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ccopy_(
    n: *mut c_int,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().ccopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zcopy_(
    n: *mut c_int,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().zcopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn sdot_(
    n: *mut c_int,
    x: *mut f32,
    incx: *mut c_int,
    y: *mut f32,
    incy: *mut c_int,
) -> f32 {
    dyload_lib().sdot_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ddot_(
    n: *mut c_int,
    x: *mut f64,
    incx: *mut c_int,
    y: *mut f64,
    incy: *mut c_int,
) -> f64 {
    dyload_lib().ddot_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotu_(
    n: *mut c_int,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) -> scomplex {
    dyload_lib().cdotu_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotc_(
    n: *mut c_int,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) -> scomplex {
    dyload_lib().cdotc_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotu_(
    n: *mut c_int,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) -> dcomplex {
    dyload_lib().zdotu_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotc_(
    n: *mut c_int,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) -> dcomplex {
    dyload_lib().zdotc_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn snrm2_(n: *mut c_int, x: *mut f32, incx: *mut c_int) -> f32 {
    dyload_lib().snrm2_.unwrap()(n, x, incx)
}

pub unsafe fn dnrm2_(n: *mut c_int, x: *mut f64, incx: *mut c_int) -> f64 {
    dyload_lib().dnrm2_.unwrap()(n, x, incx)
}

pub unsafe fn scnrm2_(n: *mut c_int, x: *mut scomplex, incx: *mut c_int) -> f32 {
    dyload_lib().scnrm2_.unwrap()(n, x, incx)
}

pub unsafe fn dznrm2_(n: *mut c_int, x: *mut dcomplex, incx: *mut c_int) -> f64 {
    dyload_lib().dznrm2_.unwrap()(n, x, incx)
}

pub unsafe fn sscal_(n: *mut c_int, alpha: *mut f32, y: *mut f32, incy: *mut c_int) {
    dyload_lib().sscal_.unwrap()(n, alpha, y, incy)
}

pub unsafe fn dscal_(n: *mut c_int, alpha: *mut f64, y: *mut f64, incy: *mut c_int) {
    dyload_lib().dscal_.unwrap()(n, alpha, y, incy)
}

pub unsafe fn cscal_(n: *mut c_int, alpha: *mut scomplex, y: *mut scomplex, incy: *mut c_int) {
    dyload_lib().cscal_.unwrap()(n, alpha, y, incy)
}

pub unsafe fn csscal_(n: *mut c_int, alpha: *mut f32, y: *mut scomplex, incy: *mut c_int) {
    dyload_lib().csscal_.unwrap()(n, alpha, y, incy)
}

pub unsafe fn zscal_(n: *mut c_int, alpha: *mut dcomplex, y: *mut dcomplex, incy: *mut c_int) {
    dyload_lib().zscal_.unwrap()(n, alpha, y, incy)
}

pub unsafe fn zdscal_(n: *mut c_int, alpha: *mut f64, y: *mut dcomplex, incy: *mut c_int) {
    dyload_lib().zdscal_.unwrap()(n, alpha, y, incy)
}

pub unsafe fn sswap_(n: *mut c_int, x: *mut f32, incx: *mut c_int, y: *mut f32, incy: *mut c_int) {
    dyload_lib().sswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dswap_(n: *mut c_int, x: *mut f64, incx: *mut c_int, y: *mut f64, incy: *mut c_int) {
    dyload_lib().dswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cswap_(
    n: *mut c_int,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().cswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zswap_(
    n: *mut c_int,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().zswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn sgemv_(
    transa: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    x: *mut f32,
    incx: *mut c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: *mut c_int,
) {
    dyload_lib().sgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgemv_(
    transa: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    x: *mut f64,
    incx: *mut c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: *mut c_int,
) {
    dyload_lib().dgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgemv_(
    transa: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    x: *mut scomplex,
    incx: *mut c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().cgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgemv_(
    transa: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    x: *mut dcomplex,
    incx: *mut c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().zgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sger_(
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: *mut c_int,
    y: *mut f32,
    incy: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
) {
    dyload_lib().sger_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dger_(
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: *mut c_int,
    y: *mut f64,
    incy: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
) {
    dyload_lib().dger_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgerc_(
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
) {
    dyload_lib().cgerc_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgeru_(
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
) {
    dyload_lib().cgeru_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgerc_(
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
) {
    dyload_lib().zgerc_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgeru_(
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
) {
    dyload_lib().zgeru_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn chemv_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    x: *mut scomplex,
    incx: *mut c_int,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().chemv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhemv_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    x: *mut dcomplex,
    incx: *mut c_int,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().zhemv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cher_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut scomplex,
    incx: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
) {
    dyload_lib().cher_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn zher_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut dcomplex,
    incx: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
) {
    dyload_lib().zher_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn cher2_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
) {
    dyload_lib().cher2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zher2_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
) {
    dyload_lib().zher2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ssymv_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    x: *mut f32,
    incx: *mut c_int,
    beta: *mut f32,
    y: *mut f32,
    incy: *mut c_int,
) {
    dyload_lib().ssymv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsymv_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    x: *mut f64,
    incx: *mut c_int,
    beta: *mut f64,
    y: *mut f64,
    incy: *mut c_int,
) {
    dyload_lib().dsymv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssyr_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
) {
    dyload_lib().ssyr_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn dsyr_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
) {
    dyload_lib().dsyr_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ssyr2_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: *mut c_int,
    y: *mut f32,
    incy: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
) {
    dyload_lib().ssyr2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dsyr2_(
    uplo: *mut c_char,
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: *mut c_int,
    y: *mut f64,
    incy: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
) {
    dyload_lib().dsyr2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn strmv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    y: *mut f32,
    incy: *mut c_int,
) {
    dyload_lib().strmv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn dtrmv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    y: *mut f64,
    incy: *mut c_int,
) {
    dyload_lib().dtrmv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn ctrmv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().ctrmv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn ztrmv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().ztrmv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn strsv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    y: *mut f32,
    incy: *mut c_int,
) {
    dyload_lib().strsv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn dtrsv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    y: *mut f64,
    incy: *mut c_int,
) {
    dyload_lib().dtrsv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn ctrsv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    y: *mut scomplex,
    incy: *mut c_int,
) {
    dyload_lib().ctrsv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn ztrsv_(
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    y: *mut dcomplex,
    incy: *mut c_int,
) {
    dyload_lib().ztrsv_.unwrap()(uplo, transa, diag, n, a, lda, y, incy)
}

pub unsafe fn sgemm_(
    transa: *mut c_char,
    transb: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
) {
    dyload_lib().sgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemm_(
    transa: *mut c_char,
    transb: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
) {
    dyload_lib().dgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemm_(
    transa: *mut c_char,
    transb: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().cgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemm_(
    transa: *mut c_char,
    transb: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn chemm_(
    side: *mut c_char,
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().chemm_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zhemm_(
    side: *mut c_char,
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zhemm_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cherk_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f32,
    a: *mut scomplex,
    lda: *mut c_int,
    beta: *mut f32,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().cherk_.unwrap()(uplo, transa, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zherk_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f64,
    a: *mut dcomplex,
    lda: *mut c_int,
    beta: *mut f64,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zherk_.unwrap()(uplo, transa, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn cher2k_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    beta: *mut f32,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().cher2k_.unwrap()(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zher2k_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    beta: *mut f64,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zher2k_.unwrap()(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssymm_(
    side: *mut c_char,
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
) {
    dyload_lib().ssymm_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsymm_(
    side: *mut c_char,
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
) {
    dyload_lib().dsymm_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csymm_(
    side: *mut c_char,
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().csymm_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsymm_(
    side: *mut c_char,
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zsymm_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssyrk_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
) {
    dyload_lib().ssyrk_.unwrap()(uplo, transa, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn dsyrk_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
) {
    dyload_lib().dsyrk_.unwrap()(uplo, transa, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn csyrk_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().csyrk_.unwrap()(uplo, transa, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zsyrk_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zsyrk_.unwrap()(uplo, transa, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ssyr2k_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    beta: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
) {
    dyload_lib().ssyr2k_.unwrap()(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsyr2k_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    beta: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
) {
    dyload_lib().dsyr2k_.unwrap()(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csyr2k_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    beta: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
) {
    dyload_lib().csyr2k_.unwrap()(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsyr2k_(
    uplo: *mut c_char,
    transa: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
) {
    dyload_lib().zsyr2k_.unwrap()(uplo, transa, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn strmm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
) {
    dyload_lib().strmm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrmm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
) {
    dyload_lib().dtrmm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrmm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
) {
    dyload_lib().ctrmm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrmm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
) {
    dyload_lib().ztrmm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strsm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
) {
    dyload_lib().strsm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrsm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
) {
    dyload_lib().dtrsm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrsm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
) {
    dyload_lib().ctrsm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrsm_(
    side: *mut c_char,
    uplo: *mut c_char,
    transa: *mut c_char,
    diag: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
) {
    dyload_lib().ztrsm_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn FLA_Cntl_obj_free(cntl: *mut c_void) {
    dyload_lib().FLA_Cntl_obj_free.unwrap()(cntl)
}

pub unsafe fn FLA_Cntl_axpy_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_axpy: *mut fla_axpy_t,
) -> *mut fla_axpy_t {
    dyload_lib().FLA_Cntl_axpy_obj_create.unwrap()(matrix_type, variant, blocksize, sub_axpy)
}

pub unsafe fn FLA_Cntl_axpyt_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_axpyt: *mut fla_axpyt_t,
) -> *mut fla_axpyt_t {
    dyload_lib().FLA_Cntl_axpyt_obj_create.unwrap()(matrix_type, variant, blocksize, sub_axpyt)
}

pub unsafe fn FLA_Cntl_copy_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_copy: *mut fla_copy_t,
) -> *mut fla_copy_t {
    dyload_lib().FLA_Cntl_copy_obj_create.unwrap()(matrix_type, variant, blocksize, sub_copy)
}

pub unsafe fn FLA_Cntl_copyt_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_copyt: *mut fla_copyt_t,
) -> *mut fla_copyt_t {
    dyload_lib().FLA_Cntl_copyt_obj_create.unwrap()(matrix_type, variant, blocksize, sub_copyt)
}

pub unsafe fn FLA_Cntl_copyr_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_copyr: *mut fla_copyr_t,
    sub_copy: *mut fla_copy_t,
) -> *mut fla_copyr_t {
    dyload_lib().FLA_Cntl_copyr_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_copyr,
        sub_copy,
    )
}

pub unsafe fn FLA_Cntl_scal_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
) -> *mut fla_scal_t {
    dyload_lib().FLA_Cntl_scal_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal)
}

pub unsafe fn FLA_Cntl_scalr_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scalr: *mut fla_scalr_t,
    sub_scal: *mut fla_scal_t,
) -> *mut fla_scalr_t {
    dyload_lib().FLA_Cntl_scalr_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scalr,
        sub_scal,
    )
}

pub unsafe fn FLA_Cntl_swap_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_swap: *mut fla_swap_t,
) -> *mut fla_swap_t {
    dyload_lib().FLA_Cntl_swap_obj_create.unwrap()(matrix_type, variant, blocksize, sub_swap)
}

pub unsafe fn FLA_Cntl_tpose_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_trans: *mut fla_tpose_t,
    sub_swap: *mut fla_swap_t,
) -> *mut fla_tpose_t {
    dyload_lib().FLA_Cntl_tpose_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_trans,
        sub_swap,
    )
}

pub unsafe fn FLA_Cntl_gemv_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_gemv: *mut fla_gemv_t,
) -> *mut fla_gemv_t {
    dyload_lib().FLA_Cntl_gemv_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_gemv,
    )
}

pub unsafe fn FLA_Cntl_trsv_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_trsv: *mut fla_trsv_t,
    sub_gemv: *mut fla_gemv_t,
) -> *mut fla_trsv_t {
    dyload_lib().FLA_Cntl_trsv_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_trsv,
        sub_gemv,
    )
}

pub unsafe fn FLA_Cntl_gemm_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_gemm_t {
    dyload_lib().FLA_Cntl_gemm_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_hemm_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_hemm: *mut fla_hemm_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
) -> *mut fla_hemm_t {
    dyload_lib().FLA_Cntl_hemm_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_hemm,
        sub_gemm1,
        sub_gemm2,
    )
}

pub unsafe fn FLA_Cntl_herk_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scalr: *mut fla_scalr_t,
    sub_herk: *mut fla_herk_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_herk_t {
    dyload_lib().FLA_Cntl_herk_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scalr,
        sub_herk,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_her2k_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scalr: *mut fla_scalr_t,
    sub_her2k: *mut fla_her2k_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
) -> *mut fla_her2k_t {
    dyload_lib().FLA_Cntl_her2k_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scalr,
        sub_her2k,
        sub_gemm1,
        sub_gemm2,
    )
}

pub unsafe fn FLA_Cntl_symm_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_symm: *mut fla_symm_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
) -> *mut fla_symm_t {
    dyload_lib().FLA_Cntl_symm_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_symm,
        sub_gemm1,
        sub_gemm2,
    )
}

pub unsafe fn FLA_Cntl_syrk_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scalr: *mut fla_scalr_t,
    sub_syrk: *mut fla_syrk_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_syrk_t {
    dyload_lib().FLA_Cntl_syrk_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scalr,
        sub_syrk,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_syr2k_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scalr: *mut fla_scalr_t,
    sub_syr2k: *mut fla_syr2k_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
) -> *mut fla_syr2k_t {
    dyload_lib().FLA_Cntl_syr2k_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scalr,
        sub_syr2k,
        sub_gemm1,
        sub_gemm2,
    )
}

pub unsafe fn FLA_Cntl_trmm_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_trmm: *mut fla_trmm_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_trmm_t {
    dyload_lib().FLA_Cntl_trmm_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_trmm,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_trsm_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_trsm: *mut fla_trsm_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_trsm_t {
    dyload_lib().FLA_Cntl_trsm_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_trsm,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_chol_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_chol: *mut fla_chol_t,
    sub_herk: *mut fla_herk_t,
    sub_trsm: *mut fla_trsm_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_chol_t {
    dyload_lib().FLA_Cntl_chol_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_chol,
        sub_herk,
        sub_trsm,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_lu_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_lu: *mut fla_lu_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_gemm3: *mut fla_gemm_t,
    sub_trsm1: *mut fla_trsm_t,
    sub_trsm2: *mut fla_trsm_t,
    sub_appiv1: *mut fla_appiv_t,
    sub_appiv2: *mut fla_appiv_t,
) -> *mut fla_lu_t {
    dyload_lib().FLA_Cntl_lu_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_lu,
        sub_gemm1,
        sub_gemm2,
        sub_gemm3,
        sub_trsm1,
        sub_trsm2,
        sub_appiv1,
        sub_appiv2,
    )
}

pub unsafe fn FLA_Cntl_appiv_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_appiv: *mut fla_appiv_t,
) -> *mut fla_appiv_t {
    dyload_lib().FLA_Cntl_appiv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_appiv)
}

pub unsafe fn FLA_Cntl_qrut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_qrut: *mut fla_qrut_t,
    sub_apqut: *mut fla_apqut_t,
) -> *mut fla_qrut_t {
    dyload_lib().FLA_Cntl_qrut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_qrut,
        sub_apqut,
    )
}

pub unsafe fn FLA_Cntl_qr2ut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_qr2ut: *mut fla_qr2ut_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_trsm: *mut fla_trsm_t,
    sub_copy: *mut fla_copy_t,
    sub_axpy: *mut fla_axpy_t,
) -> *mut fla_qr2ut_t {
    dyload_lib().FLA_Cntl_qr2ut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_qr2ut,
        sub_gemm1,
        sub_gemm2,
        sub_trsm,
        sub_copy,
        sub_axpy,
    )
}

pub unsafe fn FLA_Cntl_lqut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_lqut: *mut fla_lqut_t,
    sub_apqut: *mut fla_apqut_t,
) -> *mut fla_lqut_t {
    dyload_lib().FLA_Cntl_lqut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_lqut,
        sub_apqut,
    )
}

pub unsafe fn FLA_Cntl_caqr2ut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_caqr2ut: *mut fla_caqr2ut_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_trmm1: *mut fla_trmm_t,
    sub_trmm2: *mut fla_trmm_t,
    sub_trsm: *mut fla_trsm_t,
    sub_axpy1: *mut fla_axpy_t,
    sub_axpy2: *mut fla_axpy_t,
    sub_axpy3: *mut fla_axpy_t,
    sub_copy: *mut fla_copy_t,
) -> *mut fla_caqr2ut_t {
    dyload_lib().FLA_Cntl_caqr2ut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_caqr2ut,
        sub_gemm1,
        sub_gemm2,
        sub_trmm1,
        sub_trmm2,
        sub_trsm,
        sub_axpy1,
        sub_axpy2,
        sub_axpy3,
        sub_copy,
    )
}

pub unsafe fn FLA_Cntl_hessut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
) -> *mut fla_hessut_t {
    dyload_lib().FLA_Cntl_hessut_obj_create.unwrap()(matrix_type, variant, blocksize)
}

pub unsafe fn FLA_Cntl_tridiagut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
) -> *mut fla_tridiagut_t {
    dyload_lib().FLA_Cntl_tridiagut_obj_create.unwrap()(matrix_type, variant, blocksize)
}

pub unsafe fn FLA_Cntl_bidiagut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
) -> *mut fla_bidiagut_t {
    dyload_lib().FLA_Cntl_bidiagut_obj_create.unwrap()(matrix_type, variant, blocksize)
}

pub unsafe fn FLA_Cntl_trinv_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_trinv: *mut fla_trinv_t,
    sub_trmm: *mut fla_trmm_t,
    sub_trsm1: *mut fla_trsm_t,
    sub_trsm2: *mut fla_trsm_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_trinv_t {
    dyload_lib().FLA_Cntl_trinv_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_trinv,
        sub_trmm,
        sub_trsm1,
        sub_trsm2,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_ttmm_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_ttmm: *mut fla_ttmm_t,
    sub_herk: *mut fla_herk_t,
    sub_trmm: *mut fla_trmm_t,
    sub_gemm: *mut fla_gemm_t,
) -> *mut fla_ttmm_t {
    dyload_lib().FLA_Cntl_ttmm_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_ttmm,
        sub_herk,
        sub_trmm,
        sub_gemm,
    )
}

pub unsafe fn FLA_Cntl_sylv_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_sylv1: *mut fla_sylv_t,
    sub_sylv2: *mut fla_sylv_t,
    sub_sylv3: *mut fla_sylv_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_gemm3: *mut fla_gemm_t,
    sub_gemm4: *mut fla_gemm_t,
    sub_gemm5: *mut fla_gemm_t,
    sub_gemm6: *mut fla_gemm_t,
    sub_gemm7: *mut fla_gemm_t,
    sub_gemm8: *mut fla_gemm_t,
) -> *mut fla_sylv_t {
    dyload_lib().FLA_Cntl_sylv_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_sylv1,
        sub_sylv2,
        sub_sylv3,
        sub_gemm1,
        sub_gemm2,
        sub_gemm3,
        sub_gemm4,
        sub_gemm5,
        sub_gemm6,
        sub_gemm7,
        sub_gemm8,
    )
}

pub unsafe fn FLA_Cntl_lyap_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_scal: *mut fla_scal_t,
    sub_lyap: *mut fla_lyap_t,
    sub_sylv: *mut fla_sylv_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_hemm: *mut fla_hemm_t,
    sub_her2k: *mut fla_her2k_t,
) -> *mut fla_lyap_t {
    dyload_lib().FLA_Cntl_lyap_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_scal,
        sub_lyap,
        sub_sylv,
        sub_gemm1,
        sub_gemm2,
        sub_hemm,
        sub_her2k,
    )
}

pub unsafe fn FLA_Cntl_spdinv_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_chol: *mut fla_chol_t,
    sub_trinv: *mut fla_trinv_t,
    sub_ttmm: *mut fla_ttmm_t,
) -> *mut fla_spdinv_t {
    dyload_lib().FLA_Cntl_spdinv_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_chol,
        sub_trinv,
        sub_ttmm,
    )
}

pub unsafe fn FLA_Cntl_apqut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apqut: *mut fla_apqut_t,
    sub_trmm1: *mut fla_trmm_t,
    sub_trmm2: *mut fla_trmm_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_trsm: *mut fla_trsm_t,
    sub_copyt: *mut fla_copyt_t,
    sub_axpyt: *mut fla_axpyt_t,
) -> *mut fla_apqut_t {
    dyload_lib().FLA_Cntl_apqut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apqut,
        sub_trmm1,
        sub_trmm2,
        sub_gemm1,
        sub_gemm2,
        sub_trsm,
        sub_copyt,
        sub_axpyt,
    )
}

pub unsafe fn FLA_Cntl_apq2ut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apq2ut: *mut fla_apq2ut_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_trsm: *mut fla_trsm_t,
    sub_copyt: *mut fla_copyt_t,
    sub_axpyt: *mut fla_axpyt_t,
) -> *mut fla_apq2ut_t {
    dyload_lib().FLA_Cntl_apq2ut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apq2ut,
        sub_gemm1,
        sub_gemm2,
        sub_trsm,
        sub_copyt,
        sub_axpyt,
    )
}

pub unsafe fn FLA_Cntl_apcaq2ut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apcaq2ut: *mut fla_apcaq2ut_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_trmm1: *mut fla_trmm_t,
    sub_trmm2: *mut fla_trmm_t,
    sub_trsm: *mut fla_trsm_t,
    sub_axpy1: *mut fla_axpy_t,
    sub_axpy2: *mut fla_axpy_t,
    sub_axpy3: *mut fla_axpy_t,
    sub_copy: *mut fla_copy_t,
) -> *mut fla_apcaq2ut_t {
    dyload_lib().FLA_Cntl_apcaq2ut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apcaq2ut,
        sub_gemm1,
        sub_gemm2,
        sub_trmm1,
        sub_trmm2,
        sub_trsm,
        sub_axpy1,
        sub_axpy2,
        sub_axpy3,
        sub_copy,
    )
}

pub unsafe fn FLA_Cntl_qrutinc_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_qrut: *mut fla_qrut_t,
    sub_apqut: *mut fla_apqut_t,
    sub_qr2ut: *mut fla_qr2ut_t,
    sub_apq2ut: *mut fla_apq2ut_t,
) -> *mut fla_qrutinc_t {
    dyload_lib().FLA_Cntl_qrutinc_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_qrut,
        sub_apqut,
        sub_qr2ut,
        sub_apq2ut,
    )
}

pub unsafe fn FLA_Cntl_apqutinc_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apqut: *mut fla_apqut_t,
    sub_apq2ut: *mut fla_apq2ut_t,
) -> *mut fla_apqutinc_t {
    dyload_lib().FLA_Cntl_apqutinc_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apqut,
        sub_apq2ut,
    )
}

pub unsafe fn FLA_Cntl_caqrutinc_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_caqr2ut: *mut fla_caqr2ut_t,
    sub_apcaq2ut: *mut fla_apcaq2ut_t,
) -> *mut fla_caqrutinc_t {
    dyload_lib().FLA_Cntl_caqrutinc_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_caqr2ut,
        sub_apcaq2ut,
    )
}

pub unsafe fn FLA_Cntl_apcaqutinc_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apcaq2ut: *mut fla_apcaq2ut_t,
) -> *mut fla_apcaqutinc_t {
    dyload_lib().FLA_Cntl_apcaqutinc_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apcaq2ut,
    )
}

pub unsafe fn FLA_Cntl_uddateut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_uddateut: *mut fla_uddateut_t,
    sub_apqudut: *mut fla_apqudut_t,
) -> *mut fla_uddateut_t {
    dyload_lib().FLA_Cntl_uddateut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_uddateut,
        sub_apqudut,
    )
}

pub unsafe fn FLA_Cntl_apqudut_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apq2ut: *mut fla_apqudut_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_gemm3: *mut fla_gemm_t,
    sub_gemm4: *mut fla_gemm_t,
    sub_trsm: *mut fla_trsm_t,
    sub_copyt: *mut fla_copyt_t,
    sub_axpyt: *mut fla_axpyt_t,
) -> *mut fla_apqudut_t {
    dyload_lib().FLA_Cntl_apqudut_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apq2ut,
        sub_gemm1,
        sub_gemm2,
        sub_gemm3,
        sub_gemm4,
        sub_trsm,
        sub_copyt,
        sub_axpyt,
    )
}

pub unsafe fn FLA_Cntl_uddateutinc_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_uddateut: *mut fla_uddateut_t,
    sub_apqudut: *mut fla_apqudut_t,
) -> *mut fla_uddateutinc_t {
    dyload_lib().FLA_Cntl_uddateutinc_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_uddateut,
        sub_apqudut,
    )
}

pub unsafe fn FLA_Cntl_apqudutinc_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_apqudut: *mut fla_apqudut_t,
) -> *mut fla_apqudutinc_t {
    dyload_lib().FLA_Cntl_apqudutinc_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_apqudut,
    )
}

pub unsafe fn FLA_Cntl_eig_gest_obj_create(
    matrix_type: FLA_Matrix_type,
    variant: c_int,
    blocksize: *mut fla_blocksize_t,
    sub_eig_gest: *mut fla_eig_gest_t,
    sub_axpy1: *mut fla_axpy_t,
    sub_axpy2: *mut fla_axpy_t,
    sub_gemm1: *mut fla_gemm_t,
    sub_gemm2: *mut fla_gemm_t,
    sub_gemm3: *mut fla_gemm_t,
    sub_hemm: *mut fla_hemm_t,
    sub_her2k: *mut fla_her2k_t,
    sub_trmm1: *mut fla_trmm_t,
    sub_trmm2: *mut fla_trmm_t,
    sub_trsm1: *mut fla_trsm_t,
    sub_trsm2: *mut fla_trsm_t,
) -> *mut fla_eig_gest_t {
    dyload_lib().FLA_Cntl_eig_gest_obj_create.unwrap()(
        matrix_type,
        variant,
        blocksize,
        sub_eig_gest,
        sub_axpy1,
        sub_axpy2,
        sub_gemm1,
        sub_gemm2,
        sub_gemm3,
        sub_hemm,
        sub_her2k,
        sub_trmm1,
        sub_trmm2,
        sub_trsm1,
        sub_trsm2,
    )
}

pub unsafe fn FLA_Cntl_init_flamec() {
    dyload_lib().FLA_Cntl_init_flamec.unwrap()()
}

pub unsafe fn FLA_Cntl_finalize_flamec() {
    dyload_lib().FLA_Cntl_finalize_flamec.unwrap()()
}

pub unsafe fn FLA_Transpose_cntl_init() {
    dyload_lib().FLA_Transpose_cntl_init.unwrap()()
}

pub unsafe fn FLA_Transpose_cntl_finalize() {
    dyload_lib().FLA_Transpose_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Axpy_cntl_init() {
    dyload_lib().FLA_Axpy_cntl_init.unwrap()()
}

pub unsafe fn FLA_Axpyt_cntl_init() {
    dyload_lib().FLA_Axpyt_cntl_init.unwrap()()
}

pub unsafe fn FLA_Copy_cntl_init() {
    dyload_lib().FLA_Copy_cntl_init.unwrap()()
}

pub unsafe fn FLA_Copyt_cntl_init() {
    dyload_lib().FLA_Copyt_cntl_init.unwrap()()
}

pub unsafe fn FLA_Copyr_cntl_init() {
    dyload_lib().FLA_Copyr_cntl_init.unwrap()()
}

pub unsafe fn FLA_Scal_cntl_init() {
    dyload_lib().FLA_Scal_cntl_init.unwrap()()
}

pub unsafe fn FLA_Scalr_cntl_init() {
    dyload_lib().FLA_Scalr_cntl_init.unwrap()()
}

pub unsafe fn FLA_Axpy_cntl_finalize() {
    dyload_lib().FLA_Axpy_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Axpyt_cntl_finalize() {
    dyload_lib().FLA_Axpyt_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Copy_cntl_finalize() {
    dyload_lib().FLA_Copy_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Copyt_cntl_finalize() {
    dyload_lib().FLA_Copyt_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Copyr_cntl_finalize() {
    dyload_lib().FLA_Copyr_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Scal_cntl_finalize() {
    dyload_lib().FLA_Scal_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Scalr_cntl_finalize() {
    dyload_lib().FLA_Scalr_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Gemv_cntl_init() {
    dyload_lib().FLA_Gemv_cntl_init.unwrap()()
}

pub unsafe fn FLA_Trsv_cntl_init() {
    dyload_lib().FLA_Trsv_cntl_init.unwrap()()
}

pub unsafe fn FLA_Gemv_cntl_finalize() {
    dyload_lib().FLA_Gemv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Trsv_cntl_finalize() {
    dyload_lib().FLA_Trsv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Gemm_cntl_init() {
    dyload_lib().FLA_Gemm_cntl_init.unwrap()()
}

pub unsafe fn FLA_Hemm_cntl_init() {
    dyload_lib().FLA_Hemm_cntl_init.unwrap()()
}

pub unsafe fn FLA_Herk_cntl_init() {
    dyload_lib().FLA_Herk_cntl_init.unwrap()()
}

pub unsafe fn FLA_Her2k_cntl_init() {
    dyload_lib().FLA_Her2k_cntl_init.unwrap()()
}

pub unsafe fn FLA_Symm_cntl_init() {
    dyload_lib().FLA_Symm_cntl_init.unwrap()()
}

pub unsafe fn FLA_Syrk_cntl_init() {
    dyload_lib().FLA_Syrk_cntl_init.unwrap()()
}

pub unsafe fn FLA_Syr2k_cntl_init() {
    dyload_lib().FLA_Syr2k_cntl_init.unwrap()()
}

pub unsafe fn FLA_Trmm_cntl_init() {
    dyload_lib().FLA_Trmm_cntl_init.unwrap()()
}

pub unsafe fn FLA_Trsm_cntl_init() {
    dyload_lib().FLA_Trsm_cntl_init.unwrap()()
}

pub unsafe fn FLA_Gemm_cntl_finalize() {
    dyload_lib().FLA_Gemm_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Hemm_cntl_finalize() {
    dyload_lib().FLA_Hemm_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Herk_cntl_finalize() {
    dyload_lib().FLA_Herk_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Her2k_cntl_finalize() {
    dyload_lib().FLA_Her2k_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Symm_cntl_finalize() {
    dyload_lib().FLA_Symm_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Syrk_cntl_finalize() {
    dyload_lib().FLA_Syrk_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Syr2k_cntl_finalize() {
    dyload_lib().FLA_Syr2k_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Trmm_cntl_finalize() {
    dyload_lib().FLA_Trmm_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Trsm_cntl_finalize() {
    dyload_lib().FLA_Trsm_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Apply_pivots_cntl_init() {
    dyload_lib().FLA_Apply_pivots_cntl_init.unwrap()()
}

pub unsafe fn FLA_Chol_cntl_init() {
    dyload_lib().FLA_Chol_cntl_init.unwrap()()
}

pub unsafe fn FLA_LU_piv_cntl_init() {
    dyload_lib().FLA_LU_piv_cntl_init.unwrap()()
}

pub unsafe fn FLA_LU_nopiv_cntl_init() {
    dyload_lib().FLA_LU_nopiv_cntl_init.unwrap()()
}

pub unsafe fn FLA_QR_UT_cntl_init() {
    dyload_lib().FLA_QR_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_QR2_UT_cntl_init() {
    dyload_lib().FLA_QR2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_LQ_UT_cntl_init() {
    dyload_lib().FLA_LQ_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_CAQR2_UT_cntl_init() {
    dyload_lib().FLA_CAQR2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_UDdate_UT_cntl_init() {
    dyload_lib().FLA_UDdate_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Hess_UT_cntl_init() {
    dyload_lib().FLA_Hess_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Tridiag_UT_cntl_init() {
    dyload_lib().FLA_Tridiag_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Bidiag_UT_cntl_init() {
    dyload_lib().FLA_Bidiag_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Trinv_cntl_init() {
    dyload_lib().FLA_Trinv_cntl_init.unwrap()()
}

pub unsafe fn FLA_Ttmm_cntl_init() {
    dyload_lib().FLA_Ttmm_cntl_init.unwrap()()
}

pub unsafe fn FLA_Sylv_cntl_init() {
    dyload_lib().FLA_Sylv_cntl_init.unwrap()()
}

pub unsafe fn FLA_Lyap_cntl_init() {
    dyload_lib().FLA_Lyap_cntl_init.unwrap()()
}

pub unsafe fn FLA_SPDinv_cntl_init() {
    dyload_lib().FLA_SPDinv_cntl_init.unwrap()()
}

pub unsafe fn FLA_Apply_Q_UT_cntl_init() {
    dyload_lib().FLA_Apply_Q_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Apply_Q2_UT_cntl_init() {
    dyload_lib().FLA_Apply_Q2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Apply_CAQ2_UT_cntl_init() {
    dyload_lib().FLA_Apply_CAQ2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Apply_QUD_UT_cntl_init() {
    dyload_lib().FLA_Apply_QUD_UT_cntl_init.unwrap()()
}

pub unsafe fn FLA_Eig_gest_cntl_init() {
    dyload_lib().FLA_Eig_gest_cntl_init.unwrap()()
}

pub unsafe fn FLA_Apply_pivots_cntl_finalize() {
    dyload_lib().FLA_Apply_pivots_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Chol_cntl_finalize() {
    dyload_lib().FLA_Chol_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_LU_piv_cntl_finalize() {
    dyload_lib().FLA_LU_piv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_LU_nopiv_cntl_finalize() {
    dyload_lib().FLA_LU_nopiv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_QR_UT_cntl_finalize() {
    dyload_lib().FLA_QR_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_QR2_UT_cntl_finalize() {
    dyload_lib().FLA_QR2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_LQ_UT_cntl_finalize() {
    dyload_lib().FLA_LQ_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_CAQR2_UT_cntl_finalize() {
    dyload_lib().FLA_CAQR2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_UDdate_UT_cntl_finalize() {
    dyload_lib().FLA_UDdate_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Hess_UT_cntl_finalize() {
    dyload_lib().FLA_Hess_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Tridiag_UT_cntl_finalize() {
    dyload_lib().FLA_Tridiag_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Bidiag_UT_cntl_finalize() {
    dyload_lib().FLA_Bidiag_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Trinv_cntl_finalize() {
    dyload_lib().FLA_Trinv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Ttmm_cntl_finalize() {
    dyload_lib().FLA_Ttmm_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Sylv_cntl_finalize() {
    dyload_lib().FLA_Sylv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Lyap_cntl_finalize() {
    dyload_lib().FLA_Lyap_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_SPDinv_cntl_finalize() {
    dyload_lib().FLA_SPDinv_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Apply_Q_UT_cntl_finalize() {
    dyload_lib().FLA_Apply_Q_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Apply_Q2_UT_cntl_finalize() {
    dyload_lib().FLA_Apply_Q2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Apply_CAQ2_UT_cntl_finalize() {
    dyload_lib().FLA_Apply_CAQ2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Apply_QUD_UT_cntl_finalize() {
    dyload_lib().FLA_Apply_QUD_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Eig_gest_cntl_finalize() {
    dyload_lib().FLA_Eig_gest_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Cntl_init_flash() {
    dyload_lib().FLA_Cntl_init_flash.unwrap()()
}

pub unsafe fn FLA_Cntl_finalize_flash() {
    dyload_lib().FLA_Cntl_finalize_flash.unwrap()()
}

pub unsafe fn FLASH_Transpose_cntl_init() {
    dyload_lib().FLASH_Transpose_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Transpose_cntl_finalize() {
    dyload_lib().FLASH_Transpose_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Axpy_cntl_init() {
    dyload_lib().FLASH_Axpy_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Axpyt_cntl_init() {
    dyload_lib().FLASH_Axpyt_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Copy_cntl_init() {
    dyload_lib().FLASH_Copy_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Copyt_cntl_init() {
    dyload_lib().FLASH_Copyt_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Copyr_cntl_init() {
    dyload_lib().FLASH_Copyr_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Scal_cntl_init() {
    dyload_lib().FLASH_Scal_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Scalr_cntl_init() {
    dyload_lib().FLASH_Scalr_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Axpy_cntl_finalize() {
    dyload_lib().FLASH_Axpy_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Axpyt_cntl_finalize() {
    dyload_lib().FLASH_Axpyt_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Copy_cntl_finalize() {
    dyload_lib().FLASH_Copy_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Copyt_cntl_finalize() {
    dyload_lib().FLASH_Copyt_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Copyr_cntl_finalize() {
    dyload_lib().FLASH_Copyr_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Scal_cntl_finalize() {
    dyload_lib().FLASH_Scal_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Scalr_cntl_finalize() {
    dyload_lib().FLASH_Scalr_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Gemv_cntl_init() {
    dyload_lib().FLASH_Gemv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Trsv_cntl_init() {
    dyload_lib().FLASH_Trsv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Gemv_cntl_finalize() {
    dyload_lib().FLASH_Gemv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Trsv_cntl_finalize() {
    dyload_lib().FLASH_Trsv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Gemm_cntl_init() {
    dyload_lib().FLASH_Gemm_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Hemm_cntl_init() {
    dyload_lib().FLASH_Hemm_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Herk_cntl_init() {
    dyload_lib().FLASH_Herk_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Her2k_cntl_init() {
    dyload_lib().FLASH_Her2k_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Symm_cntl_init() {
    dyload_lib().FLASH_Symm_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Syrk_cntl_init() {
    dyload_lib().FLASH_Syrk_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Syr2k_cntl_init() {
    dyload_lib().FLASH_Syr2k_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Trmm_cntl_init() {
    dyload_lib().FLASH_Trmm_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Trsm_cntl_init() {
    dyload_lib().FLASH_Trsm_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Gemm_cntl_finalize() {
    dyload_lib().FLASH_Gemm_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Hemm_cntl_finalize() {
    dyload_lib().FLASH_Hemm_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Herk_cntl_finalize() {
    dyload_lib().FLASH_Herk_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Her2k_cntl_finalize() {
    dyload_lib().FLASH_Her2k_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Symm_cntl_finalize() {
    dyload_lib().FLASH_Symm_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Syrk_cntl_finalize() {
    dyload_lib().FLASH_Syrk_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Syr2k_cntl_finalize() {
    dyload_lib().FLASH_Syr2k_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Trmm_cntl_finalize() {
    dyload_lib().FLASH_Trmm_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Trsm_cntl_finalize() {
    dyload_lib().FLASH_Trsm_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_pivots_cntl_init() {
    dyload_lib().FLASH_Apply_pivots_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Chol_cntl_init() {
    dyload_lib().FLASH_Chol_cntl_init.unwrap()()
}

pub unsafe fn FLASH_LU_nopiv_cntl_init() {
    dyload_lib().FLASH_LU_nopiv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_LU_piv_cntl_init() {
    dyload_lib().FLASH_LU_piv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_LU_incpiv_cntl_init() {
    dyload_lib().FLASH_LU_incpiv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Trinv_cntl_init() {
    dyload_lib().FLASH_Trinv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Ttmm_cntl_init() {
    dyload_lib().FLASH_Ttmm_cntl_init.unwrap()()
}

pub unsafe fn FLASH_SPDinv_cntl_init() {
    dyload_lib().FLASH_SPDinv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Sylv_cntl_init() {
    dyload_lib().FLASH_Sylv_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Lyap_cntl_init() {
    dyload_lib().FLASH_Lyap_cntl_init.unwrap()()
}

pub unsafe fn FLASH_QR_UT_cntl_init() {
    dyload_lib().FLASH_QR_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_QR2_UT_cntl_init() {
    dyload_lib().FLASH_QR2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_LQ_UT_cntl_init() {
    dyload_lib().FLASH_LQ_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_CAQR2_UT_cntl_init() {
    dyload_lib().FLASH_CAQR2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_UDdate_UT_cntl_init() {
    dyload_lib().FLASH_UDdate_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_QR_UT_inc_cntl_init() {
    dyload_lib().FLASH_QR_UT_inc_cntl_init.unwrap()()
}

pub unsafe fn FLASH_CAQR_UT_inc_cntl_init() {
    dyload_lib().FLASH_CAQR_UT_inc_cntl_init.unwrap()()
}

pub unsafe fn FLASH_UDdate_UT_inc_cntl_init() {
    dyload_lib().FLASH_UDdate_UT_inc_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_Q_UT_cntl_init() {
    dyload_lib().FLASH_Apply_Q_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_Q2_UT_cntl_init() {
    dyload_lib().FLASH_Apply_Q2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_CAQ2_UT_cntl_init() {
    dyload_lib().FLASH_Apply_CAQ2_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_QUD_UT_cntl_init() {
    dyload_lib().FLASH_Apply_QUD_UT_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_Q_UT_inc_cntl_init() {
    dyload_lib().FLASH_Apply_Q_UT_inc_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_CAQ_UT_inc_cntl_init() {
    dyload_lib().FLASH_Apply_CAQ_UT_inc_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_QUD_UT_inc_cntl_init() {
    dyload_lib().FLASH_Apply_QUD_UT_inc_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Eig_gest_cntl_init() {
    dyload_lib().FLASH_Eig_gest_cntl_init.unwrap()()
}

pub unsafe fn FLASH_Apply_pivots_cntl_finalize() {
    dyload_lib().FLASH_Apply_pivots_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Chol_cntl_finalize() {
    dyload_lib().FLASH_Chol_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_LU_nopiv_cntl_finalize() {
    dyload_lib().FLASH_LU_nopiv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_LU_piv_cntl_finalize() {
    dyload_lib().FLASH_LU_piv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_LU_incpiv_cntl_finalize() {
    dyload_lib().FLASH_LU_incpiv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Trinv_cntl_finalize() {
    dyload_lib().FLASH_Trinv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Ttmm_cntl_finalize() {
    dyload_lib().FLASH_Ttmm_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_SPDinv_cntl_finalize() {
    dyload_lib().FLASH_SPDinv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Sylv_cntl_finalize() {
    dyload_lib().FLASH_Sylv_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Lyap_cntl_finalize() {
    dyload_lib().FLASH_Lyap_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_QR_UT_cntl_finalize() {
    dyload_lib().FLASH_QR_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_QR2_UT_cntl_finalize() {
    dyload_lib().FLASH_QR2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_LQ_UT_cntl_finalize() {
    dyload_lib().FLASH_LQ_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_CAQR2_UT_cntl_finalize() {
    dyload_lib().FLASH_CAQR2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_UDdate_UT_cntl_finalize() {
    dyload_lib().FLASH_UDdate_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_QR_UT_inc_cntl_finalize() {
    dyload_lib().FLASH_QR_UT_inc_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_CAQR_UT_inc_cntl_finalize() {
    dyload_lib().FLASH_CAQR_UT_inc_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_UDdate_UT_inc_cntl_finalize() {
    dyload_lib().FLASH_UDdate_UT_inc_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_Q_UT_cntl_finalize() {
    dyload_lib().FLASH_Apply_Q_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_Q2_UT_cntl_finalize() {
    dyload_lib().FLASH_Apply_Q2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_CAQ2_UT_cntl_finalize() {
    dyload_lib().FLASH_Apply_CAQ2_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_QUD_UT_cntl_finalize() {
    dyload_lib().FLASH_Apply_QUD_UT_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_Q_UT_inc_cntl_finalize() {
    dyload_lib().FLASH_Apply_Q_UT_inc_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_CAQ_UT_inc_cntl_finalize() {
    dyload_lib().FLASH_Apply_CAQ_UT_inc_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Apply_QUD_UT_inc_cntl_finalize() {
    dyload_lib().FLASH_Apply_QUD_UT_inc_cntl_finalize.unwrap()()
}

pub unsafe fn FLASH_Eig_gest_cntl_finalize() {
    dyload_lib().FLASH_Eig_gest_cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Cntl_init() {
    dyload_lib().FLA_Cntl_init.unwrap()()
}

pub unsafe fn FLA_Cntl_finalize() {
    dyload_lib().FLA_Cntl_finalize.unwrap()()
}

pub unsafe fn FLA_Blocksize_create(
    b_s: dim_t,
    b_d: dim_t,
    b_c: dim_t,
    b_z: dim_t,
) -> *mut fla_blocksize_t {
    dyload_lib().FLA_Blocksize_create.unwrap()(b_s, b_d, b_c, b_z)
}

pub unsafe fn FLA_Blocksize_create_copy(bp: *mut fla_blocksize_t) -> *mut fla_blocksize_t {
    dyload_lib().FLA_Blocksize_create_copy.unwrap()(bp)
}

pub unsafe fn FLA_Blocksize_set(
    bp: *mut fla_blocksize_t,
    b_s: dim_t,
    b_d: dim_t,
    b_c: dim_t,
    b_z: dim_t,
) {
    dyload_lib().FLA_Blocksize_set.unwrap()(bp, b_s, b_d, b_c, b_z)
}

pub unsafe fn FLA_Blocksize_scale(bp: *mut fla_blocksize_t, factor: f64) {
    dyload_lib().FLA_Blocksize_scale.unwrap()(bp, factor)
}

pub unsafe fn FLA_Blocksize_free(bp: *mut fla_blocksize_t) {
    dyload_lib().FLA_Blocksize_free.unwrap()(bp)
}

pub unsafe fn FLA_Blocksize_extract(dt: FLA_Datatype, bp: *mut fla_blocksize_t) -> dim_t {
    dyload_lib().FLA_Blocksize_extract.unwrap()(dt, bp)
}

pub unsafe fn FLA_Query_blocksizes(dim: FLA_Dimension) -> *mut fla_blocksize_t {
    dyload_lib().FLA_Query_blocksizes.unwrap()(dim)
}

pub unsafe fn FLA_Query_blocksize(dt: FLA_Datatype, dim: FLA_Dimension) -> dim_t {
    dyload_lib().FLA_Query_blocksize.unwrap()(dt, dim)
}

pub unsafe fn FLA_Determine_blocksize(
    A_unproc: FLA_Obj,
    to_dir: FLA_Quadrant,
    cntl_blocksizes: *mut fla_blocksize_t,
) -> dim_t {
    dyload_lib().FLA_Determine_blocksize.unwrap()(A_unproc, to_dir, cntl_blocksizes)
}

pub unsafe fn FLA_determine_matrix_size(A_unproc: FLA_Obj, to_dir: FLA_Quadrant) -> dim_t {
    dyload_lib().FLA_determine_matrix_size.unwrap()(A_unproc, to_dir)
}

pub unsafe fn FLA_Check_error_level() -> c_uint {
    dyload_lib().FLA_Check_error_level.unwrap()()
}

pub unsafe fn FLA_Check_error_level_set(level: c_uint) -> c_uint {
    dyload_lib().FLA_Check_error_level_set.unwrap()(level)
}

pub unsafe fn FLA_Check_error_code_helper(
    code: c_int,
    file: *mut c_char,
    line: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Check_error_code_helper.unwrap()(code, file, line)
}

pub unsafe fn FLA_Check_valid_side(side: FLA_Side) -> FLA_Error {
    dyload_lib().FLA_Check_valid_side.unwrap()(side)
}

pub unsafe fn FLA_Check_valid_uplo(uplo: FLA_Uplo) -> FLA_Error {
    dyload_lib().FLA_Check_valid_uplo.unwrap()(uplo)
}

pub unsafe fn FLA_Check_valid_trans(trans: FLA_Trans) -> FLA_Error {
    dyload_lib().FLA_Check_valid_trans.unwrap()(trans)
}

pub unsafe fn FLA_Check_valid_diag(diag: FLA_Diag) -> FLA_Error {
    dyload_lib().FLA_Check_valid_diag.unwrap()(diag)
}

pub unsafe fn FLA_Check_valid_conj(conj: FLA_Conj) -> FLA_Error {
    dyload_lib().FLA_Check_valid_conj.unwrap()(conj)
}

pub unsafe fn FLA_Check_valid_direct(direct: FLA_Conj) -> FLA_Error {
    dyload_lib().FLA_Check_valid_direct.unwrap()(direct)
}

pub unsafe fn FLA_Check_valid_storev(storev: FLA_Conj) -> FLA_Error {
    dyload_lib().FLA_Check_valid_storev.unwrap()(storev)
}

pub unsafe fn FLA_Check_valid_inverse(inv: FLA_Inv) -> FLA_Error {
    dyload_lib().FLA_Check_valid_inverse.unwrap()(inv)
}

pub unsafe fn FLA_Check_valid_datatype(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Check_valid_datatype.unwrap()(datatype)
}

pub unsafe fn FLA_Check_valid_object_datatype(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_valid_object_datatype.unwrap()(A)
}

pub unsafe fn FLA_Check_valid_evd_type(evd_type: FLA_Evd_type) -> FLA_Error {
    dyload_lib().FLA_Check_valid_evd_type.unwrap()(evd_type)
}

pub unsafe fn FLA_Check_valid_svd_type(svd_type: FLA_Svd_type) -> FLA_Error {
    dyload_lib().FLA_Check_valid_svd_type.unwrap()(svd_type)
}

pub unsafe fn FLA_Check_valid_svd_type_combination(
    svd_type_u: FLA_Svd_type,
    svd_type_v: FLA_Svd_type,
) -> FLA_Error {
    dyload_lib().FLA_Check_valid_svd_type_combination.unwrap()(svd_type_u, svd_type_v)
}

pub unsafe fn FLA_Check_valid_svd_type_and_trans_combination(
    svd_type_u: FLA_Svd_type,
    transu: FLA_Trans,
    svd_type_v: FLA_Svd_type,
    transv: FLA_Trans,
) -> FLA_Error {
    dyload_lib().FLA_Check_valid_svd_type_and_trans_combination.unwrap()(
        svd_type_u, transu, svd_type_v, transv,
    )
}

pub unsafe fn FLA_Check_floating_datatype(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Check_floating_datatype.unwrap()(datatype)
}

pub unsafe fn FLA_Check_int_datatype(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Check_int_datatype.unwrap()(datatype)
}

pub unsafe fn FLA_Check_real_datatype(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Check_real_datatype.unwrap()(datatype)
}

pub unsafe fn FLA_Check_complex_datatype(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Check_complex_datatype.unwrap()(datatype)
}

pub unsafe fn FLA_Check_floating_object(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_floating_object.unwrap()(A)
}

pub unsafe fn FLA_Check_int_object(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_int_object.unwrap()(A)
}

pub unsafe fn FLA_Check_real_object(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_real_object.unwrap()(A)
}

pub unsafe fn FLA_Check_comparable_object(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_comparable_object.unwrap()(A)
}

pub unsafe fn FLA_Check_complex_object(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_complex_object.unwrap()(A)
}

pub unsafe fn FLA_Check_consistent_datatype(datatype: FLA_Datatype, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_consistent_datatype.unwrap()(datatype, A)
}

pub unsafe fn FLA_Check_consistent_object_datatype(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_consistent_object_datatype.unwrap()(A, B)
}

pub unsafe fn FLA_Check_identical_object_precision(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_identical_object_precision.unwrap()(A, B)
}

pub unsafe fn FLA_Check_square(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_square.unwrap()(A)
}

pub unsafe fn FLA_Check_if_scalar(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_if_scalar.unwrap()(A)
}

pub unsafe fn FLA_Check_if_vector(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_if_vector.unwrap()(A)
}

pub unsafe fn FLA_Check_conformal_dims(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_conformal_dims.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Check_matrix_matrix_dims(
    transa: FLA_Trans,
    transb: FLA_Trans,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Check_matrix_matrix_dims.unwrap()(transa, transb, A, B, C)
}

pub unsafe fn FLA_Check_matrix_vector_dims(
    trans: FLA_Trans,
    A: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Check_matrix_vector_dims.unwrap()(trans, A, x, y)
}

pub unsafe fn FLA_Check_equal_vector_dims(x: FLA_Obj, y: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_equal_vector_dims.unwrap()(x, y)
}

pub unsafe fn FLA_Check_conj1_trans_and_datatype(trans: FLA_Trans, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_conj1_trans_and_datatype.unwrap()(trans, A)
}

pub unsafe fn FLA_Check_hess_indices(A: FLA_Obj, ilo: c_int, ihi: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_hess_indices.unwrap()(A, ilo, ihi)
}

pub unsafe fn FLA_Check_null_pointer(ptr: *mut c_void) -> FLA_Error {
    dyload_lib().FLA_Check_null_pointer.unwrap()(ptr)
}

pub unsafe fn FLA_Check_object_dims(trans: FLA_Trans, m: dim_t, n: dim_t, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_object_dims.unwrap()(trans, m, n, A)
}

pub unsafe fn FLA_Check_valid_pivot_type(ptype: FLA_Pivot_type) -> FLA_Error {
    dyload_lib().FLA_Check_valid_pivot_type.unwrap()(ptype)
}

pub unsafe fn FLA_Check_malloc_pointer(ptr: *mut c_void) -> FLA_Error {
    dyload_lib().FLA_Check_malloc_pointer.unwrap()(ptr)
}

pub unsafe fn FLA_Check_base_buffer_mismatch(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_base_buffer_mismatch.unwrap()(A, B)
}

pub unsafe fn FLA_Check_adjacent_objects_2x2(
    A11: FLA_Obj,
    A12: FLA_Obj,
    A21: FLA_Obj,
    A22: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Check_adjacent_objects_2x2.unwrap()(A11, A12, A21, A22)
}

pub unsafe fn FLA_Check_adjacent_objects_2x1(AT: FLA_Obj, AB: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_adjacent_objects_2x1.unwrap()(AT, AB)
}

pub unsafe fn FLA_Check_adjacent_objects_1x2(AL: FLA_Obj, AR: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_adjacent_objects_1x2.unwrap()(AL, AR)
}

pub unsafe fn FLA_Check_blocksize_value(b: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_blocksize_value.unwrap()(b)
}

pub unsafe fn FLA_Check_blocksize_object(
    datatype: FLA_Datatype,
    bp: *mut fla_blocksize_t,
) -> FLA_Error {
    dyload_lib().FLA_Check_blocksize_object.unwrap()(datatype, bp)
}

pub unsafe fn FLA_Check_file_descriptor(fd: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_file_descriptor.unwrap()(fd)
}

pub unsafe fn FLA_Check_lseek_result(requested_offset: c_int, lseek_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_lseek_result.unwrap()(requested_offset, lseek_r_val)
}

pub unsafe fn FLA_Check_close_result(close_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_close_result.unwrap()(close_r_val)
}

pub unsafe fn FLA_Check_unlink_result(unlink_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_unlink_result.unwrap()(unlink_r_val)
}

pub unsafe fn FLA_Check_read_result(requested_size: c_int, read_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_read_result.unwrap()(requested_size, read_r_val)
}

pub unsafe fn FLA_Check_write_result(requested_size: c_int, write_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_write_result.unwrap()(requested_size, write_r_val)
}

pub unsafe fn FLA_Check_valid_quadrant(quad: FLA_Quadrant) -> FLA_Error {
    dyload_lib().FLA_Check_valid_quadrant.unwrap()(quad)
}

pub unsafe fn FLA_Check_vector_dim_min(x: FLA_Obj, min_dim: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_vector_dim_min.unwrap()(x, min_dim)
}

pub unsafe fn FLA_Check_pthread_create_result(pthread_create_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_pthread_create_result.unwrap()(pthread_create_r_val)
}

pub unsafe fn FLA_Check_pthread_join_result(pthread_join_r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_pthread_join_result.unwrap()(pthread_join_r_val)
}

pub unsafe fn FLA_Check_valid_isgn_value(isgn: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_valid_isgn_value.unwrap()(isgn)
}

pub unsafe fn FLA_Check_sylv_matrix_dims(A: FLA_Obj, B: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_sylv_matrix_dims.unwrap()(A, B, C)
}

pub unsafe fn FLA_Check_chol_failure(r_val: FLA_Error) -> FLA_Error {
    dyload_lib().FLA_Check_chol_failure.unwrap()(r_val)
}

pub unsafe fn FLA_Check_valid_elemtype(elemtype: FLA_Elemtype) -> FLA_Error {
    dyload_lib().FLA_Check_valid_elemtype.unwrap()(elemtype)
}

pub unsafe fn FLA_Check_posix_memalign_failure(r_val: c_int) -> FLA_Error {
    dyload_lib().FLA_Check_posix_memalign_failure.unwrap()(r_val)
}

pub unsafe fn FLA_Check_submatrix_dims_and_offset(
    m: dim_t,
    n: dim_t,
    i: dim_t,
    j: dim_t,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Check_submatrix_dims_and_offset.unwrap()(m, n, i, j, A)
}

pub unsafe fn FLA_Check_object_scalar_elemtype(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_object_scalar_elemtype.unwrap()(A)
}

pub unsafe fn FLA_Check_object_matrix_elemtype(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_object_matrix_elemtype.unwrap()(A)
}

pub unsafe fn FLA_Check_num_threads(n_threads: c_uint) -> FLA_Error {
    dyload_lib().FLA_Check_num_threads.unwrap()(n_threads)
}

pub unsafe fn FLA_Check_conj_and_datatype(conj: FLA_Conj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_conj_and_datatype.unwrap()(conj, A)
}

pub unsafe fn FLA_Check_valid_complex_trans(trans: FLA_Trans) -> FLA_Error {
    dyload_lib().FLA_Check_valid_complex_trans.unwrap()(trans)
}

pub unsafe fn FLA_Check_valid_real_trans(trans: FLA_Trans) -> FLA_Error {
    dyload_lib().FLA_Check_valid_real_trans.unwrap()(trans)
}

pub unsafe fn FLA_Check_valid_blas_trans(trans: FLA_Trans) -> FLA_Error {
    dyload_lib().FLA_Check_valid_blas_trans.unwrap()(trans)
}

pub unsafe fn FLA_Check_nonconstant_datatype(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Check_nonconstant_datatype.unwrap()(datatype)
}

pub unsafe fn FLA_Check_nonconstant_object(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_nonconstant_object.unwrap()(A)
}

pub unsafe fn FLA_Check_identical_object_datatype(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_identical_object_datatype.unwrap()(A, B)
}

pub unsafe fn FLA_Check_divide_by_zero(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_divide_by_zero.unwrap()(alpha)
}

pub unsafe fn FLA_Check_identical_object_elemtype(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_identical_object_elemtype.unwrap()(A, B)
}

pub unsafe fn FLA_Check_pivot_index_range(p: FLA_Obj, k1: dim_t, k2: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_pivot_index_range.unwrap()(p, k1, k2)
}

pub unsafe fn FLA_Check_householder_panel_dims(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_householder_panel_dims.unwrap()(A, T)
}

pub unsafe fn FLA_Check_object_length_equals(A: FLA_Obj, m: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_object_length_equals.unwrap()(A, m)
}

pub unsafe fn FLA_Check_object_width_equals(A: FLA_Obj, n: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_object_width_equals.unwrap()(A, n)
}

pub unsafe fn FLA_Check_object_length_min(A: FLA_Obj, m: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_object_length_min.unwrap()(A, m)
}

pub unsafe fn FLA_Check_object_width_min(A: FLA_Obj, n: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_object_width_min.unwrap()(A, n)
}

pub unsafe fn FLA_Check_valid_error_level(level: c_uint) -> FLA_Error {
    dyload_lib().FLA_Check_valid_error_level.unwrap()(level)
}

pub unsafe fn FLA_Check_attempted_repart_2x2(A_quad: FLA_Obj, b_m: dim_t, b_n: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_attempted_repart_2x2.unwrap()(A_quad, b_m, b_n)
}

pub unsafe fn FLA_Check_attempted_repart_2x1(A_side: FLA_Obj, b_m: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_attempted_repart_2x1.unwrap()(A_side, b_m)
}

pub unsafe fn FLA_Check_attempted_repart_1x2(A_side: FLA_Obj, b_n: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_attempted_repart_1x2.unwrap()(A_side, b_n)
}

pub unsafe fn FLA_Check_valid_leftright_side(side: FLA_Side) -> FLA_Error {
    dyload_lib().FLA_Check_valid_leftright_side.unwrap()(side)
}

pub unsafe fn FLA_Check_valid_topbottom_side(side: FLA_Side) -> FLA_Error {
    dyload_lib().FLA_Check_valid_topbottom_side.unwrap()(side)
}

pub unsafe fn FLA_Check_matrix_strides(m: dim_t, n: dim_t, rs: dim_t, cs: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_matrix_strides.unwrap()(m, n, rs, cs)
}

pub unsafe fn FLA_Check_vector_dim(x: FLA_Obj, expected_length: dim_t) -> FLA_Error {
    dyload_lib().FLA_Check_vector_dim.unwrap()(x, expected_length)
}

pub unsafe fn FLA_Check_row_vector(x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_row_vector.unwrap()(x)
}

pub unsafe fn FLA_Check_col_vector(x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_col_vector.unwrap()(x)
}

pub unsafe fn FLA_Check_valid_machval(val: FLA_Machval) -> FLA_Error {
    dyload_lib().FLA_Check_valid_machval.unwrap()(val)
}

pub unsafe fn FLA_Check_valid_diag_offset(A: FLA_Obj, offset: FLA_Diag_off) -> FLA_Error {
    dyload_lib().FLA_Check_valid_diag_offset.unwrap()(A, offset)
}

pub unsafe fn FLA_Check_col_storage(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_col_storage.unwrap()(A)
}

pub unsafe fn FLA_Check_row_storage(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Check_row_storage.unwrap()(A)
}

pub unsafe fn FLA_Error_string_for_code(code: c_int) -> *mut c_char {
    dyload_lib().FLA_Error_string_for_code.unwrap()(code)
}

pub unsafe fn FLA_Error_messages_init() {
    dyload_lib().FLA_Error_messages_init.unwrap()()
}

pub unsafe fn FLA_Print_message(str_: *mut c_char, file: *mut c_char, line: c_int) {
    dyload_lib().FLA_Print_message.unwrap()(str_, file, line)
}

pub unsafe fn FLA_Abort() {
    dyload_lib().FLA_Abort.unwrap()()
}

pub unsafe fn FLA_Init() {
    dyload_lib().FLA_Init.unwrap()()
}

pub unsafe fn FLA_Finalize() {
    dyload_lib().FLA_Finalize.unwrap()()
}

pub unsafe fn FLA_Initialized() -> FLA_Bool {
    dyload_lib().FLA_Initialized.unwrap()()
}

pub unsafe fn FLA_Init_safe(init_result: *mut FLA_Error) {
    dyload_lib().FLA_Init_safe.unwrap()(init_result)
}

pub unsafe fn FLA_Finalize_safe(init_result: FLA_Error) {
    dyload_lib().FLA_Finalize_safe.unwrap()(init_result)
}

pub unsafe fn FLA_Init_constants() {
    dyload_lib().FLA_Init_constants.unwrap()()
}

pub unsafe fn FLA_Finalize_constants() {
    dyload_lib().FLA_Finalize_constants.unwrap()()
}

pub unsafe fn FLA_Init_numerical_constants() {
    dyload_lib().FLA_Init_numerical_constants.unwrap()()
}

pub unsafe fn FLA_Finalize_numerical_constants() {
    dyload_lib().FLA_Finalize_numerical_constants.unwrap()()
}

pub unsafe fn FLA_Lock_init(fla_lock_ptr: *mut FLA_Lock) {
    dyload_lib().FLA_Lock_init.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_Lock_destroy(fla_lock_ptr: *mut FLA_Lock) {
    dyload_lib().FLA_Lock_destroy.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_Lock_acquire(fla_lock_ptr: *mut FLA_Lock) {
    dyload_lib().FLA_Lock_acquire.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_Lock_release(fla_lock_ptr: *mut FLA_Lock) {
    dyload_lib().FLA_Lock_release.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_RWLock_init(fla_lock_ptr: *mut FLA_RWLock) {
    dyload_lib().FLA_RWLock_init.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_RWLock_destroy(fla_lock_ptr: *mut FLA_RWLock) {
    dyload_lib().FLA_RWLock_destroy.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_RWLock_write_acquire(fla_lock_ptr: *mut FLA_RWLock) {
    dyload_lib().FLA_RWLock_write_acquire.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_RWLock_read_acquire(fla_lock_ptr: *mut FLA_RWLock) {
    dyload_lib().FLA_RWLock_read_acquire.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_RWLock_release(fla_lock_ptr: *mut FLA_RWLock) {
    dyload_lib().FLA_RWLock_release.unwrap()(fla_lock_ptr)
}

pub unsafe fn FLA_Memory_leak_counter_init() {
    dyload_lib().FLA_Memory_leak_counter_init.unwrap()()
}

pub unsafe fn FLA_Memory_leak_counter_finalize() {
    dyload_lib().FLA_Memory_leak_counter_finalize.unwrap()()
}

pub unsafe fn FLA_Memory_leak_counter_status() -> FLA_Bool {
    dyload_lib().FLA_Memory_leak_counter_status.unwrap()()
}

pub unsafe fn FLA_Memory_leak_counter_set(new_status: FLA_Bool) -> FLA_Bool {
    dyload_lib().FLA_Memory_leak_counter_set.unwrap()(new_status)
}

pub unsafe fn FLA_malloc(size: usize) -> *mut c_void {
    dyload_lib().FLA_malloc.unwrap()(size)
}

pub unsafe fn FLA_realloc(old_ptr: *mut c_void, size: usize) -> *mut c_void {
    dyload_lib().FLA_realloc.unwrap()(old_ptr, size)
}

pub unsafe fn FLA_buff_malloc(size: usize) -> *mut c_void {
    dyload_lib().FLA_buff_malloc.unwrap()(size)
}

pub unsafe fn FLA_free(ptr: *mut c_void) {
    dyload_lib().FLA_free.unwrap()(ptr)
}

pub unsafe fn FLA_buff_free(ptr: *mut c_void) {
    dyload_lib().FLA_buff_free.unwrap()(ptr)
}

pub unsafe fn FLA_Obj_copy_view(A: FLA_Obj, B: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_copy_view.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_extract_real_scalar(alpha: FLA_Obj, alpha_value: *mut f64) {
    dyload_lib().FLA_Obj_extract_real_scalar.unwrap()(alpha, alpha_value)
}

pub unsafe fn FLA_Obj_extract_complex_scalar(alpha: FLA_Obj, alpha_value: *mut dcomplex) {
    dyload_lib().FLA_Obj_extract_complex_scalar.unwrap()(alpha, alpha_value)
}

pub unsafe fn FLA_Obj_extract_real_part(alpha: FLA_Obj, beta: FLA_Obj) {
    dyload_lib().FLA_Obj_extract_real_part.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_extract_imag_part(alpha: FLA_Obj, beta: FLA_Obj) {
    dyload_lib().FLA_Obj_extract_imag_part.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_set_real_part(alpha: FLA_Obj, beta: FLA_Obj) {
    dyload_lib().FLA_Obj_set_real_part.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_set_imag_part(alpha: FLA_Obj, beta: FLA_Obj) {
    dyload_lib().FLA_Obj_set_imag_part.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_show(
    s1: *mut c_char,
    A: FLA_Obj,
    format: *mut c_char,
    s2: *mut c_char,
) -> FLA_Error {
    dyload_lib().FLA_Obj_show.unwrap()(s1, A, format, s2)
}

pub unsafe fn FLA_Obj_fshow(
    file: *mut FILE,
    s1: *mut c_char,
    A: FLA_Obj,
    format: *mut c_char,
    s2: *mut c_char,
) -> FLA_Error {
    dyload_lib().FLA_Obj_fshow.unwrap()(file, s1, A, format, s2)
}

pub unsafe fn FLA_Obj_copy_view_check(A: FLA_Obj, B: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_copy_view_check.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_extract_real_scalar_check(
    alpha: FLA_Obj,
    alpha_value: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Obj_extract_real_scalar_check.unwrap()(alpha, alpha_value)
}

pub unsafe fn FLA_Obj_extract_complex_scalar_check(
    alpha: FLA_Obj,
    alpha_value: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Obj_extract_complex_scalar_check.unwrap()(alpha, alpha_value)
}

pub unsafe fn FLA_Obj_extract_real_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_extract_real_part_check.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_extract_imag_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_extract_imag_part_check.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_set_real_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_set_real_part_check.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_set_imag_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_set_imag_part_check.unwrap()(alpha, beta)
}

pub unsafe fn FLA_Obj_show_check(
    s1: *mut c_char,
    obj: FLA_Obj,
    format: *mut c_char,
    s2: *mut c_char,
) -> FLA_Error {
    dyload_lib().FLA_Obj_show_check.unwrap()(s1, obj, format, s2)
}

pub unsafe fn FLA_Obj_fshow_check(
    file: *mut FILE,
    s1: *mut c_char,
    obj: FLA_Obj,
    format: *mut c_char,
    s2: *mut c_char,
) -> FLA_Error {
    dyload_lib().FLA_Obj_fshow_check.unwrap()(file, s1, obj, format, s2)
}

pub unsafe fn FLA_Copy_buffer_to_object(
    trans: FLA_Trans,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    i: dim_t,
    j: dim_t,
    obj: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Copy_buffer_to_object.unwrap()(trans, m, n, buffer, rs, cs, i, j, obj)
}

pub unsafe fn FLA_Copy_object_to_buffer(
    trans: FLA_Trans,
    i: dim_t,
    j: dim_t,
    obj: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Copy_object_to_buffer.unwrap()(trans, i, j, obj, m, n, buffer, rs, cs)
}

pub unsafe fn FLA_Copy_buffer_to_object_check(
    trans: FLA_Trans,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    i: dim_t,
    j: dim_t,
    obj: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Copy_buffer_to_object_check.unwrap()(trans, m, n, buffer, rs, cs, i, j, obj)
}

pub unsafe fn FLA_Copy_object_to_buffer_check(
    trans: FLA_Trans,
    i: dim_t,
    j: dim_t,
    obj: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Copy_object_to_buffer_check.unwrap()(trans, i, j, obj, m, n, buffer, rs, cs)
}

pub unsafe fn FLA_Axpy_buffer_to_object(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    i: dim_t,
    j: dim_t,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_buffer_to_object.unwrap()(trans, alpha, m, n, buffer, rs, cs, i, j, C)
}

pub unsafe fn FLA_Axpy_object_to_buffer(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    i: dim_t,
    j: dim_t,
    C: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_object_to_buffer.unwrap()(trans, alpha, i, j, C, m, n, buffer, rs, cs)
}

pub unsafe fn FLA_Axpy_buffer_to_object_check(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    i: dim_t,
    j: dim_t,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_buffer_to_object_check.unwrap()(
        trans, alpha, m, n, buffer, rs, cs, i, j, C,
    )
}

pub unsafe fn FLA_Axpy_object_to_buffer_check(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    i: dim_t,
    j: dim_t,
    C: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_object_to_buffer_check.unwrap()(
        trans, alpha, i, j, C, m, n, buffer, rs, cs,
    )
}

pub unsafe fn FLA_Obj_nullify(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_nullify.unwrap()(obj)
}

pub unsafe fn FLA_Obj_create(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    rs: dim_t,
    cs: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create.unwrap()(datatype, m, n, rs, cs, obj)
}

pub unsafe fn FLA_Obj_create_ext(
    datatype: FLA_Datatype,
    elemtype: FLA_Elemtype,
    m: dim_t,
    n: dim_t,
    m_inner: dim_t,
    n_inner: dim_t,
    rs: dim_t,
    cs: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_ext.unwrap()(
        datatype, elemtype, m, n, m_inner, n_inner, rs, cs, obj,
    )
}

pub unsafe fn FLA_Obj_create_conf_to(
    trans: FLA_Trans,
    old: FLA_Obj,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_conf_to.unwrap()(trans, old, obj)
}

pub unsafe fn FLA_Obj_create_copy_of(
    trans: FLA_Trans,
    old: FLA_Obj,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_copy_of.unwrap()(trans, old, obj)
}

pub unsafe fn FLA_Obj_create_without_buffer(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_without_buffer.unwrap()(datatype, m, n, obj)
}

pub unsafe fn FLA_Obj_create_constant(const_real: f64, obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_create_constant.unwrap()(const_real, obj)
}

pub unsafe fn FLA_Obj_create_constant_ext(
    const_s: f32,
    const_d: f64,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_constant_ext.unwrap()(const_s, const_d, obj)
}

pub unsafe fn FLA_Obj_create_complex_constant(
    const_real: f64,
    const_imag: f64,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_complex_constant.unwrap()(const_real, const_imag, obj)
}

pub unsafe fn FLA_Obj_attach_buffer(
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_attach_buffer.unwrap()(buffer, rs, cs, obj)
}

pub unsafe fn FLA_Obj_create_buffer(rs: dim_t, cs: dim_t, obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_create_buffer.unwrap()(rs, cs, obj)
}

pub unsafe fn FLA_Obj_free(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_free.unwrap()(obj)
}

pub unsafe fn FLA_Obj_free_without_buffer(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_free_without_buffer.unwrap()(obj)
}

pub unsafe fn FLA_Obj_free_buffer(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_free_buffer.unwrap()(obj)
}

pub unsafe fn FLA_align_ldim(ldim: dim_t, elem_size: dim_t) -> dim_t {
    dyload_lib().FLA_align_ldim.unwrap()(ldim, elem_size)
}

pub unsafe fn FLA_compute_num_elem(
    elem_size: dim_t,
    m: dim_t,
    n: dim_t,
    rs: *mut dim_t,
    cs: *mut dim_t,
) -> dim_t {
    dyload_lib().FLA_compute_num_elem.unwrap()(elem_size, m, n, rs, cs)
}

pub unsafe fn FLA_adjust_strides(m: dim_t, n: dim_t, rs: *mut dim_t, cs: *mut dim_t) {
    dyload_lib().FLA_adjust_strides.unwrap()(m, n, rs, cs)
}

pub unsafe fn FLA_Obj_flip_base(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_flip_base.unwrap()(obj)
}

pub unsafe fn FLA_Obj_flip_view(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_flip_view.unwrap()(obj)
}

pub unsafe fn FLA_Obj_create_ext_check(
    datatype: FLA_Datatype,
    elemtype: FLA_Elemtype,
    m: dim_t,
    n: dim_t,
    m_inner: dim_t,
    n_inner: dim_t,
    rs: dim_t,
    cs: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_ext_check.unwrap()(
        datatype, elemtype, m, n, m_inner, n_inner, rs, cs, obj,
    )
}

pub unsafe fn FLA_Obj_create_conf_to_check(
    trans: FLA_Trans,
    obj_old: FLA_Obj,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_conf_to_check.unwrap()(trans, obj_old, obj)
}

pub unsafe fn FLA_Obj_create_without_buffer_check(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_without_buffer_check.unwrap()(datatype, m, n, obj)
}

pub unsafe fn FLA_Obj_create_constant_check(const_real: f64, obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_create_constant_check.unwrap()(const_real, obj)
}

pub unsafe fn FLA_Obj_create_constant_ext_check(
    const_s: f32,
    const_d: f64,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_constant_ext_check.unwrap()(const_s, const_d, obj)
}

pub unsafe fn FLA_Obj_create_complex_constant_check(
    const_real: f64,
    const_imag: f64,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_complex_constant_check.unwrap()(const_real, const_imag, obj)
}

pub unsafe fn FLA_Obj_attach_buffer_check(
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    obj: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Obj_attach_buffer_check.unwrap()(buffer, rs, cs, obj)
}

pub unsafe fn FLA_Obj_create_buffer_check(rs: dim_t, cs: dim_t, obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_create_buffer_check.unwrap()(rs, cs, obj)
}

pub unsafe fn FLA_Obj_free_check(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_free_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_free_without_buffer_check(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_free_without_buffer_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_free_buffer_check(obj: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_free_buffer_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_create_buffer_task(
    rs: dim_t,
    cs: dim_t,
    obj: FLA_Obj,
    cntl: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Obj_create_buffer_task.unwrap()(rs, cs, obj, cntl)
}

pub unsafe fn FLA_Obj_free_buffer_task(obj: FLA_Obj, cntl: *mut c_void) -> FLA_Error {
    dyload_lib().FLA_Obj_free_buffer_task.unwrap()(obj, cntl)
}

pub unsafe fn FLA_Obj_datatype(obj: FLA_Obj) -> FLA_Datatype {
    dyload_lib().FLA_Obj_datatype.unwrap()(obj)
}

pub unsafe fn FLA_Obj_datatype_proj_to_real(A: FLA_Obj) -> FLA_Datatype {
    dyload_lib().FLA_Obj_datatype_proj_to_real.unwrap()(A)
}

pub unsafe fn FLA_Obj_datatype_proj_to_complex(A: FLA_Obj) -> FLA_Datatype {
    dyload_lib().FLA_Obj_datatype_proj_to_complex.unwrap()(A)
}

pub unsafe fn FLA_Obj_elemtype(obj: FLA_Obj) -> FLA_Elemtype {
    dyload_lib().FLA_Obj_elemtype.unwrap()(obj)
}

pub unsafe fn FLA_Obj_datatype_size(datatype: FLA_Datatype) -> dim_t {
    dyload_lib().FLA_Obj_datatype_size.unwrap()(datatype)
}

pub unsafe fn FLA_Obj_elem_size(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_elem_size.unwrap()(obj)
}

pub unsafe fn FLA_Obj_length(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_length.unwrap()(obj)
}

pub unsafe fn FLA_Obj_width(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_width.unwrap()(obj)
}

pub unsafe fn FLA_Obj_structure(obj: FLA_Obj) -> FLA_Uplo {
    dyload_lib().FLA_Obj_structure.unwrap()(obj)
}

pub unsafe fn FLA_Obj_vector_dim(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_vector_dim.unwrap()(obj)
}

pub unsafe fn FLA_Obj_vector_inc(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_vector_inc.unwrap()(obj)
}

pub unsafe fn FLA_Obj_min_dim(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_min_dim.unwrap()(obj)
}

pub unsafe fn FLA_Obj_max_dim(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_max_dim.unwrap()(obj)
}

pub unsafe fn FLA_Obj_row_stride(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_row_stride.unwrap()(obj)
}

pub unsafe fn FLA_Obj_col_stride(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_col_stride.unwrap()(obj)
}

pub unsafe fn FLA_Obj_row_offset(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_row_offset.unwrap()(obj)
}

pub unsafe fn FLA_Obj_col_offset(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_col_offset.unwrap()(obj)
}

pub unsafe fn FLA_Obj_base_length(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_base_length.unwrap()(obj)
}

pub unsafe fn FLA_Obj_base_width(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_base_width.unwrap()(obj)
}

pub unsafe fn FLA_Obj_num_elem_alloc(obj: FLA_Obj) -> dim_t {
    dyload_lib().FLA_Obj_num_elem_alloc.unwrap()(obj)
}

pub unsafe fn FLA_Obj_base_buffer(obj: FLA_Obj) -> *mut c_void {
    dyload_lib().FLA_Obj_base_buffer.unwrap()(obj)
}

pub unsafe fn FLA_Obj_buffer_at_view(obj: FLA_Obj) -> *mut c_void {
    dyload_lib().FLA_Obj_buffer_at_view.unwrap()(obj)
}

pub unsafe fn FLA_Obj_buffer_is_null(obj: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_buffer_is_null.unwrap()(obj)
}

pub unsafe fn FLA_Obj_is_int(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_int.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_floating_point(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_floating_point.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_constant(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_constant.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_real(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_real.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_complex(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_complex.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_single_precision(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_single_precision.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_double_precision(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_double_precision.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_scalar(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_scalar.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_vector(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_vector.unwrap()(A)
}

pub unsafe fn FLA_Obj_has_zero_dim(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_has_zero_dim.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_row_major(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_row_major.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_col_major(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_col_major.unwrap()(A)
}

pub unsafe fn FLA_Obj_is_conformal_to(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_conformal_to.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Obj_is(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_is_identical(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_identical.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_is_overlapped(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_is_overlapped.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_equals(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_equals.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_gt(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_gt.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_ge(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_ge.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_lt(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_lt.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_le(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_le.unwrap()(A, B)
}

pub unsafe fn FLA_Submatrix_at(
    datatype: FLA_Datatype,
    buffer: *mut c_void,
    i: dim_t,
    j: dim_t,
    rs: dim_t,
    cs: dim_t,
) -> *mut c_void {
    dyload_lib().FLA_Submatrix_at.unwrap()(datatype, buffer, i, j, rs, cs)
}

pub unsafe fn FLA_Obj_has_nan(A: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_has_nan.unwrap()(A)
}

pub unsafe fn FLA_Obj_datatype_check(obj: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_datatype_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_datatype_proj_to_real_check(obj: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_datatype_proj_to_real_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_elemtype_check(obj: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_elemtype_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_datatype_size_check(datatype: FLA_Datatype) -> FLA_Error {
    dyload_lib().FLA_Obj_datatype_size_check.unwrap()(datatype)
}

pub unsafe fn FLA_Obj_elem_size_check(obj: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_elem_size_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_buffer_at_view_check(obj: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_buffer_at_view_check.unwrap()(obj)
}

pub unsafe fn FLA_Obj_equals_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_equals_check.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_gt_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_gt_check.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_ge_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_ge_check.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_lt_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_lt_check.unwrap()(A, B)
}

pub unsafe fn FLA_Obj_le_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
    dyload_lib().FLA_Obj_le_check.unwrap()(A, B)
}

pub unsafe fn FLA_Submatrix_at_check(
    datatype: FLA_Datatype,
    buffer: *mut c_void,
    i: dim_t,
    j: dim_t,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Submatrix_at_check.unwrap()(datatype, buffer, i, j, rs, cs)
}

pub unsafe fn FLA_Obj_has_nan_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Obj_has_nan_check.unwrap()(A)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_trans(trans: FLA_Trans, blas_trans: *mut c_void) {
    dyload_lib().FLA_Param_map_flame_to_netlib_trans.unwrap()(trans, blas_trans)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_uplo(uplo: FLA_Uplo, blas_uplo: *mut c_void) {
    dyload_lib().FLA_Param_map_flame_to_netlib_uplo.unwrap()(uplo, blas_uplo)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_side(side: FLA_Uplo, blas_side: *mut c_void) {
    dyload_lib().FLA_Param_map_flame_to_netlib_side.unwrap()(side, blas_side)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_diag(diag: FLA_Diag, blas_diag: *mut c_void) {
    dyload_lib().FLA_Param_map_flame_to_netlib_diag.unwrap()(diag, blas_diag)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_direct(direct: FLA_Direct, lapack_direct: *mut c_void) {
    dyload_lib().FLA_Param_map_flame_to_netlib_direct.unwrap()(direct, lapack_direct)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_storev(storev: FLA_Store, lapack_storev: *mut c_void) {
    dyload_lib().FLA_Param_map_flame_to_netlib_storev.unwrap()(storev, lapack_storev)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_evd_type(
    evd_type: FLA_Evd_type,
    lapack_evd_type: *mut c_void,
) {
    dyload_lib().FLA_Param_map_flame_to_netlib_evd_type.unwrap()(evd_type, lapack_evd_type)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_svd_type(
    svd_type: FLA_Svd_type,
    lapack_svd_type: *mut c_void,
) {
    dyload_lib().FLA_Param_map_flame_to_netlib_svd_type.unwrap()(svd_type, lapack_svd_type)
}

pub unsafe fn FLA_Param_map_flame_to_netlib_machval(
    machval: FLA_Machval,
    blas_machval: *mut c_void,
) {
    dyload_lib().FLA_Param_map_flame_to_netlib_machval.unwrap()(machval, blas_machval)
}

pub unsafe fn FLA_Param_map_flame_to_blis_trans(trans: FLA_Trans, blis_trans: *mut trans1_t) {
    dyload_lib().FLA_Param_map_flame_to_blis_trans.unwrap()(trans, blis_trans)
}

pub unsafe fn FLA_Param_map_flame_to_blis_conj(conj: FLA_Conj, blis_conj: *mut conj1_t) {
    dyload_lib().FLA_Param_map_flame_to_blis_conj.unwrap()(conj, blis_conj)
}

pub unsafe fn FLA_Param_map_flame_to_blis_uplo(uplo: FLA_Uplo, blis_uplo: *mut uplo1_t) {
    dyload_lib().FLA_Param_map_flame_to_blis_uplo.unwrap()(uplo, blis_uplo)
}

pub unsafe fn FLA_Param_map_flame_to_blis_side(side: FLA_Uplo, blis_side: *mut side1_t) {
    dyload_lib().FLA_Param_map_flame_to_blis_side.unwrap()(side, blis_side)
}

pub unsafe fn FLA_Param_map_flame_to_blis_diag(diag: FLA_Diag, blis_diag: *mut diag1_t) {
    dyload_lib().FLA_Param_map_flame_to_blis_diag.unwrap()(diag, blis_diag)
}

pub unsafe fn FLA_Param_map_blis_to_flame_trans(trans: trans1_t, flame_trans: *mut FLA_Trans) {
    dyload_lib().FLA_Param_map_blis_to_flame_trans.unwrap()(trans, flame_trans)
}

pub unsafe fn FLA_Param_map_blis_to_flame_uplo(uplo: uplo1_t, flame_uplo: *mut FLA_Uplo) {
    dyload_lib().FLA_Param_map_blis_to_flame_uplo.unwrap()(uplo, flame_uplo)
}

pub unsafe fn FLA_Param_map_blis_to_flame_side(side: side1_t, flame_side: *mut FLA_Side) {
    dyload_lib().FLA_Param_map_blis_to_flame_side.unwrap()(side, flame_side)
}

pub unsafe fn FLA_Param_map_blis_to_flame_diag(diag: diag1_t, flame_diag: *mut FLA_Diag) {
    dyload_lib().FLA_Param_map_blis_to_flame_diag.unwrap()(diag, flame_diag)
}

pub unsafe fn FLA_Param_map_char_to_flame_trans(trans: *mut c_char, flame_trans: *mut FLA_Trans) {
    dyload_lib().FLA_Param_map_char_to_flame_trans.unwrap()(trans, flame_trans)
}

pub unsafe fn FLA_Param_map_char_to_flame_uplo(uplo: *mut c_char, flame_uplo: *mut FLA_Uplo) {
    dyload_lib().FLA_Param_map_char_to_flame_uplo.unwrap()(uplo, flame_uplo)
}

pub unsafe fn FLA_Param_map_char_to_flame_side(side: *mut c_char, flame_side: *mut FLA_Side) {
    dyload_lib().FLA_Param_map_char_to_flame_side.unwrap()(side, flame_side)
}

pub unsafe fn FLA_Param_map_char_to_flame_diag(diag: *mut c_char, flame_diag: *mut FLA_Diag) {
    dyload_lib().FLA_Param_map_char_to_flame_diag.unwrap()(diag, flame_diag)
}

pub unsafe fn FLA_Param_map_char_to_flame_storev(
    storev: *mut c_char,
    flame_storev: *mut FLA_Direct,
) {
    dyload_lib().FLA_Param_map_char_to_flame_storev.unwrap()(storev, flame_storev)
}

pub unsafe fn FLA_Param_map_char_to_flame_direct(
    direct: *mut c_char,
    flame_direct: *mut FLA_Direct,
) {
    dyload_lib().FLA_Param_map_char_to_flame_direct.unwrap()(direct, flame_direct)
}

pub unsafe fn FLA_Param_map_char_to_flame_inv(inv: *mut c_char, flame_inv: *mut FLA_Inv) {
    dyload_lib().FLA_Param_map_char_to_flame_inv.unwrap()(inv, flame_inv)
}

pub unsafe fn FLA_Param_map_netlib_to_flame_trans(trans: *mut c_char, flame_trans: *mut FLA_Trans) {
    dyload_lib().FLA_Param_map_netlib_to_flame_trans.unwrap()(trans, flame_trans)
}

pub unsafe fn FLA_Param_map_netlib_to_flame_uplo(uplo: *mut c_char, flame_uplo: *mut FLA_Uplo) {
    dyload_lib().FLA_Param_map_netlib_to_flame_uplo.unwrap()(uplo, flame_uplo)
}

pub unsafe fn FLA_Param_map_netlib_to_flame_side(side: *mut c_char, flame_side: *mut FLA_Side) {
    dyload_lib().FLA_Param_map_netlib_to_flame_side.unwrap()(side, flame_side)
}

pub unsafe fn FLA_Param_map_netlib_to_flame_diag(diag: *mut c_char, flame_diag: *mut FLA_Diag) {
    dyload_lib().FLA_Param_map_netlib_to_flame_diag.unwrap()(diag, flame_diag)
}

pub unsafe fn FLA_Param_map_netlib_to_flame_inv(itype: *mut c_int, flame_inv: *mut FLA_Inv) {
    dyload_lib().FLA_Param_map_netlib_to_flame_inv.unwrap()(itype, flame_inv)
}

pub unsafe fn FLA_Param_map_netlib_to_flame_svd_type(
    svd: *mut c_char,
    flame_svd: *mut FLA_Svd_type,
) {
    dyload_lib().FLA_Param_map_netlib_to_flame_svd_type.unwrap()(svd, flame_svd)
}

pub unsafe fn FLA_Part_2x2(
    A: FLA_Obj,
    A11: *mut FLA_Obj,
    A12: *mut FLA_Obj,
    A21: *mut FLA_Obj,
    A22: *mut FLA_Obj,
    mb: dim_t,
    nb: dim_t,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Part_2x2.unwrap()(A, A11, A12, A21, A22, mb, nb, quadrant)
}

pub unsafe fn FLA_Part_2x1(
    A: FLA_Obj,
    A1: *mut FLA_Obj,
    A2: *mut FLA_Obj,
    mb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Part_2x1.unwrap()(A, A1, A2, mb, side)
}

pub unsafe fn FLA_Part_1x2(
    A: FLA_Obj,
    A1: *mut FLA_Obj,
    A2: *mut FLA_Obj,
    nb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Part_1x2.unwrap()(A, A1, A2, nb, side)
}

pub unsafe fn FLA_Merge_2x2(
    A11: FLA_Obj,
    A12: FLA_Obj,
    A21: FLA_Obj,
    A22: FLA_Obj,
    A: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Merge_2x2.unwrap()(A11, A12, A21, A22, A)
}

pub unsafe fn FLA_Merge_2x1(AT: FLA_Obj, AB: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Merge_2x1.unwrap()(AT, AB, A)
}

pub unsafe fn FLA_Merge_1x2(AL: FLA_Obj, AR: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Merge_1x2.unwrap()(AL, AR, A)
}

pub unsafe fn FLA_Repart_2x2_to_3x3(
    ATL: FLA_Obj,
    ATR: FLA_Obj,
    A00: *mut FLA_Obj,
    A01: *mut FLA_Obj,
    A02: *mut FLA_Obj,
    A10: *mut FLA_Obj,
    A11: *mut FLA_Obj,
    A12: *mut FLA_Obj,
    ABL: FLA_Obj,
    ABR: FLA_Obj,
    A20: *mut FLA_Obj,
    A21: *mut FLA_Obj,
    A22: *mut FLA_Obj,
    mb: dim_t,
    nb: dim_t,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Repart_2x2_to_3x3.unwrap()(
        ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, mb, nb, quadrant,
    )
}

pub unsafe fn FLA_Repart_2x1_to_3x1(
    AT: FLA_Obj,
    A0: *mut FLA_Obj,
    A1: *mut FLA_Obj,
    AB: FLA_Obj,
    A2: *mut FLA_Obj,
    mb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Repart_2x1_to_3x1.unwrap()(AT, A0, A1, AB, A2, mb, side)
}

pub unsafe fn FLA_Repart_1x2_to_1x3(
    AL: FLA_Obj,
    AR: FLA_Obj,
    A0: *mut FLA_Obj,
    A1: *mut FLA_Obj,
    A2: *mut FLA_Obj,
    nb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Repart_1x2_to_1x3.unwrap()(AL, AR, A0, A1, A2, nb, side)
}

pub unsafe fn FLA_Cont_with_3x3_to_2x2(
    ATL: *mut FLA_Obj,
    ATR: *mut FLA_Obj,
    A00: FLA_Obj,
    A01: FLA_Obj,
    A02: FLA_Obj,
    A10: FLA_Obj,
    A11: FLA_Obj,
    A12: FLA_Obj,
    ABL: *mut FLA_Obj,
    ABR: *mut FLA_Obj,
    A20: FLA_Obj,
    A21: FLA_Obj,
    A22: FLA_Obj,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_3x3_to_2x2.unwrap()(
        ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, quadrant,
    )
}

pub unsafe fn FLA_Cont_with_3x1_to_2x1(
    AT: *mut FLA_Obj,
    A0: FLA_Obj,
    A1: FLA_Obj,
    AB: *mut FLA_Obj,
    A2: FLA_Obj,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_3x1_to_2x1.unwrap()(AT, A0, A1, AB, A2, side)
}

pub unsafe fn FLA_Cont_with_1x3_to_1x2(
    AL: *mut FLA_Obj,
    AR: *mut FLA_Obj,
    A0: FLA_Obj,
    A1: FLA_Obj,
    A2: FLA_Obj,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_1x3_to_1x2.unwrap()(AL, AR, A0, A1, A2, side)
}

pub unsafe fn FLA_Repart_3x3_to_5x5(
    ATL: FLA_Obj,
    ATM: FLA_Obj,
    ATR: FLA_Obj,
    AML: FLA_Obj,
    AMM: FLA_Obj,
    AMR: FLA_Obj,
    ABL: FLA_Obj,
    ABM: FLA_Obj,
    ABR: FLA_Obj,
    A00: *mut FLA_Obj,
    A01: *mut FLA_Obj,
    A02: *mut FLA_Obj,
    A03: *mut FLA_Obj,
    A04: *mut FLA_Obj,
    A10: *mut FLA_Obj,
    A11: *mut FLA_Obj,
    A12: *mut FLA_Obj,
    A13: *mut FLA_Obj,
    A14: *mut FLA_Obj,
    A20: *mut FLA_Obj,
    A21: *mut FLA_Obj,
    A22: *mut FLA_Obj,
    A23: *mut FLA_Obj,
    A24: *mut FLA_Obj,
    A30: *mut FLA_Obj,
    A31: *mut FLA_Obj,
    A32: *mut FLA_Obj,
    A33: *mut FLA_Obj,
    A34: *mut FLA_Obj,
    A40: *mut FLA_Obj,
    A41: *mut FLA_Obj,
    A42: *mut FLA_Obj,
    A43: *mut FLA_Obj,
    A44: *mut FLA_Obj,
    b: dim_t,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Repart_3x3_to_5x5.unwrap()(
        ATL, ATM, ATR, AML, AMM, AMR, ABL, ABM, ABR, A00, A01, A02, A03, A04, A10, A11, A12, A13,
        A14, A20, A21, A22, A23, A24, A30, A31, A32, A33, A34, A40, A41, A42, A43, A44, b,
        quadrant,
    )
}

pub unsafe fn FLA_Cont_with_5x5_to_3x3(
    ATL: *mut FLA_Obj,
    ATM: *mut FLA_Obj,
    ATR: *mut FLA_Obj,
    AML: *mut FLA_Obj,
    AMM: *mut FLA_Obj,
    AMR: *mut FLA_Obj,
    ABL: *mut FLA_Obj,
    ABM: *mut FLA_Obj,
    ABR: *mut FLA_Obj,
    A00: FLA_Obj,
    A01: FLA_Obj,
    A02: FLA_Obj,
    A03: FLA_Obj,
    A04: FLA_Obj,
    A10: FLA_Obj,
    A11: FLA_Obj,
    A12: FLA_Obj,
    A13: FLA_Obj,
    A14: FLA_Obj,
    A20: FLA_Obj,
    A21: FLA_Obj,
    A22: FLA_Obj,
    A23: FLA_Obj,
    A24: FLA_Obj,
    A30: FLA_Obj,
    A31: FLA_Obj,
    A32: FLA_Obj,
    A33: FLA_Obj,
    A34: FLA_Obj,
    A40: FLA_Obj,
    A41: FLA_Obj,
    A42: FLA_Obj,
    A43: FLA_Obj,
    A44: FLA_Obj,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_5x5_to_3x3.unwrap()(
        ATL, ATM, ATR, AML, AMM, AMR, ABL, ABM, ABR, A00, A01, A02, A03, A04, A10, A11, A12, A13,
        A14, A20, A21, A22, A23, A24, A30, A31, A32, A33, A34, A40, A41, A42, A43, A44, quadrant,
    )
}

pub unsafe fn FLA_Part_2x2_check(
    A: FLA_Obj,
    A11: *mut FLA_Obj,
    A12: *mut FLA_Obj,
    A21: *mut FLA_Obj,
    A22: *mut FLA_Obj,
    mb: dim_t,
    nb: dim_t,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Part_2x2_check.unwrap()(A, A11, A12, A21, A22, mb, nb, quadrant)
}

pub unsafe fn FLA_Part_2x1_check(
    A: FLA_Obj,
    A1: *mut FLA_Obj,
    A2: *mut FLA_Obj,
    mb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Part_2x1_check.unwrap()(A, A1, A2, mb, side)
}

pub unsafe fn FLA_Part_1x2_check(
    A: FLA_Obj,
    A1: *mut FLA_Obj,
    A2: *mut FLA_Obj,
    nb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Part_1x2_check.unwrap()(A, A1, A2, nb, side)
}

pub unsafe fn FLA_Merge_2x2_check(
    A11: FLA_Obj,
    A12: FLA_Obj,
    A21: FLA_Obj,
    A22: FLA_Obj,
    A: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Merge_2x2_check.unwrap()(A11, A12, A21, A22, A)
}

pub unsafe fn FLA_Merge_2x1_check(AT: FLA_Obj, AB: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Merge_2x1_check.unwrap()(AT, AB, A)
}

pub unsafe fn FLA_Merge_1x2_check(AL: FLA_Obj, AR: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Merge_1x2_check.unwrap()(AL, AR, A)
}

pub unsafe fn FLA_Repart_2x2_to_3x3_check(
    ATL: FLA_Obj,
    ATR: FLA_Obj,
    A00: *mut FLA_Obj,
    A01: *mut FLA_Obj,
    A02: *mut FLA_Obj,
    A10: *mut FLA_Obj,
    A11: *mut FLA_Obj,
    A12: *mut FLA_Obj,
    ABL: FLA_Obj,
    ABR: FLA_Obj,
    A20: *mut FLA_Obj,
    A21: *mut FLA_Obj,
    A22: *mut FLA_Obj,
    mb: dim_t,
    nb: dim_t,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Repart_2x2_to_3x3_check.unwrap()(
        ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, mb, nb, quadrant,
    )
}

pub unsafe fn FLA_Repart_2x1_to_3x1_check(
    AT: FLA_Obj,
    A0: *mut FLA_Obj,
    A1: *mut FLA_Obj,
    AB: FLA_Obj,
    A2: *mut FLA_Obj,
    mb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Repart_2x1_to_3x1_check.unwrap()(AT, A0, A1, AB, A2, mb, side)
}

pub unsafe fn FLA_Repart_1x2_to_1x3_check(
    AL: FLA_Obj,
    AR: FLA_Obj,
    A0: *mut FLA_Obj,
    A1: *mut FLA_Obj,
    A2: *mut FLA_Obj,
    nb: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Repart_1x2_to_1x3_check.unwrap()(AL, AR, A0, A1, A2, nb, side)
}

pub unsafe fn FLA_Cont_with_3x3_to_2x2_check(
    ATL: *mut FLA_Obj,
    ATR: *mut FLA_Obj,
    A00: FLA_Obj,
    A01: FLA_Obj,
    A02: FLA_Obj,
    A10: FLA_Obj,
    A11: FLA_Obj,
    A12: FLA_Obj,
    ABL: *mut FLA_Obj,
    ABR: *mut FLA_Obj,
    A20: FLA_Obj,
    A21: FLA_Obj,
    A22: FLA_Obj,
    quadrant: FLA_Quadrant,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_3x3_to_2x2_check.unwrap()(
        ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, quadrant,
    )
}

pub unsafe fn FLA_Cont_with_3x1_to_2x1_check(
    AT: *mut FLA_Obj,
    A0: FLA_Obj,
    A1: FLA_Obj,
    AB: *mut FLA_Obj,
    A2: FLA_Obj,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_3x1_to_2x1_check.unwrap()(AT, A0, A1, AB, A2, side)
}

pub unsafe fn FLA_Cont_with_1x3_to_1x2_check(
    AL: *mut FLA_Obj,
    AR: *mut FLA_Obj,
    A0: FLA_Obj,
    A1: FLA_Obj,
    A2: FLA_Obj,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLA_Cont_with_1x3_to_1x2_check.unwrap()(AL, AR, A0, A1, A2, side)
}

pub unsafe fn FLA_random_float() -> f32 {
    dyload_lib().FLA_random_float.unwrap()()
}

pub unsafe fn FLA_random_double() -> f64 {
    dyload_lib().FLA_random_double.unwrap()()
}

pub unsafe fn FLA_random_scomplex() -> scomplex {
    dyload_lib().FLA_random_scomplex.unwrap()()
}

pub unsafe fn FLA_random_dcomplex() -> dcomplex {
    dyload_lib().FLA_random_dcomplex.unwrap()()
}

pub unsafe fn FLA_Absolute_square(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Absolute_square.unwrap()(alpha)
}

pub unsafe fn FLA_Absolute_value(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Absolute_value.unwrap()(alpha)
}

pub unsafe fn FLA_Clock() -> f64 {
    dyload_lib().FLA_Clock.unwrap()()
}

pub unsafe fn FLA_Conjugate(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Conjugate.unwrap()(A)
}

pub unsafe fn FLA_Conjugate_r(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Conjugate_r.unwrap()(uplo, A)
}

pub unsafe fn FLA_Fill_with_linear_dist(shift: FLA_Obj, delta: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_linear_dist.unwrap()(shift, delta, x)
}

pub unsafe fn FLA_Fill_with_inverse_dist(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_inverse_dist.unwrap()(alpha, x)
}

pub unsafe fn FLA_Fill_with_geometric_dist(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_geometric_dist.unwrap()(alpha, x)
}

pub unsafe fn FLA_Fill_with_random_dist(shift: FLA_Obj, max: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_random_dist.unwrap()(shift, max, x)
}

pub unsafe fn FLA_Fill_with_logarithmic_dist(max: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_logarithmic_dist.unwrap()(max, x)
}

pub unsafe fn FLA_Fill_with_cluster_dist(
    n_clusters: FLA_Obj,
    cluster_width: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fill_with_cluster_dist.unwrap()(n_clusters, cluster_width, x)
}

pub unsafe fn FLA_Hermitianize(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hermitianize.unwrap()(uplo, A)
}

pub unsafe fn FLA_Invert(conj: FLA_Conj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Invert.unwrap()(conj, x)
}

pub unsafe fn FLA_Inv_scal_elemwise(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scal_elemwise.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Max_abs_value(A: FLA_Obj, amax: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Max_abs_value.unwrap()(A, amax)
}

pub unsafe fn FLA_Max_abs_value_herm(uplo: FLA_Uplo, A: FLA_Obj, maxabs: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Max_abs_value_herm.unwrap()(uplo, A, maxabs)
}

pub unsafe fn FLA_Max_elemwise_diff(A: FLA_Obj, B: FLA_Obj) -> f64 {
    dyload_lib().FLA_Max_elemwise_diff.unwrap()(A, B)
}

pub unsafe fn FLA_Mult_add(alpha: FLA_Obj, beta: FLA_Obj, gamma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Mult_add.unwrap()(alpha, beta, gamma)
}

pub unsafe fn FLA_Negate(x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Negate.unwrap()(x)
}

pub unsafe fn FLA_Norm1(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm1.unwrap()(A, norm)
}

pub unsafe fn FLA_Norm_inf(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm_inf.unwrap()(A, norm)
}

pub unsafe fn FLA_Norm_frob(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm_frob.unwrap()(A, norm)
}

pub unsafe fn FLA_Pow(base: FLA_Obj, exp: FLA_Obj, btoe: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Pow.unwrap()(base, exp, btoe)
}

pub unsafe fn FLA_Random_matrix(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_matrix.unwrap()(A)
}

pub unsafe fn FLA_Random_herm_matrix(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_herm_matrix.unwrap()(uplo, A)
}

pub unsafe fn FLA_Random_symm_matrix(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_symm_matrix.unwrap()(uplo, A)
}

pub unsafe fn FLA_Random_spd_matrix(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_spd_matrix.unwrap()(uplo, A)
}

pub unsafe fn FLA_Random_tri_matrix(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_tri_matrix.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Random_unitary_matrix(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_unitary_matrix.unwrap()(A)
}

pub unsafe fn FLA_Scal_elemwise(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scal_elemwise.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Setr(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Setr.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Shift_pivots_to_check(ptype: FLA_Pivot_type, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Shift_pivots_to_check.unwrap()(ptype, p)
}

pub unsafe fn FLA_Sqrt(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sqrt.unwrap()(alpha)
}

pub unsafe fn FLA_Symmetrize(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Symmetrize.unwrap()(uplo, A)
}

pub unsafe fn FLA_Triangularize(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Triangularize.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Transpose(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Transpose.unwrap()(A)
}

pub unsafe fn FLA_Set(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set.unwrap()(alpha, A)
}

pub unsafe fn FLA_Set_diag(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_diag.unwrap()(alpha, A)
}

pub unsafe fn FLA_Set_offdiag(offset: c_int, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_offdiag.unwrap()(offset, alpha, A)
}

pub unsafe fn FLA_Set_to_identity(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_to_identity.unwrap()(A)
}

pub unsafe fn FLA_Add_to_diag(diag_value: *mut c_void, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Add_to_diag.unwrap()(diag_value, A)
}

pub unsafe fn FLA_Shift_diag(conj: FLA_Conj, sigma: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Shift_diag.unwrap()(conj, sigma, A)
}

pub unsafe fn FLA_Scale_diag(conj: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scale_diag.unwrap()(conj, alpha, A)
}

pub unsafe fn FLA_Set_diagonal_vector(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_diagonal_vector.unwrap()(A, d)
}

pub unsafe fn FLA_Set_diagonal_matrix(d: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_diagonal_matrix.unwrap()(d, A)
}

pub unsafe fn FLA_Absolute_square_check(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Absolute_square_check.unwrap()(alpha)
}

pub unsafe fn FLA_Absolute_value_check(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Absolute_value_check.unwrap()(alpha)
}

pub unsafe fn FLA_Conjugate_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Conjugate_check.unwrap()(A)
}

pub unsafe fn FLA_Conjugate_r_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Conjugate_r_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Fill_with_linear_dist_check(
    shift: FLA_Obj,
    delta: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fill_with_linear_dist_check.unwrap()(shift, delta, x)
}

pub unsafe fn FLA_Fill_with_inverse_dist_check(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_inverse_dist_check.unwrap()(alpha, x)
}

pub unsafe fn FLA_Fill_with_geometric_dist_check(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_geometric_dist_check.unwrap()(alpha, x)
}

pub unsafe fn FLA_Fill_with_random_dist_check(
    shift: FLA_Obj,
    max: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fill_with_random_dist_check.unwrap()(shift, max, x)
}

pub unsafe fn FLA_Fill_with_logarithmic_dist_check(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Fill_with_logarithmic_dist_check.unwrap()(alpha, x)
}

pub unsafe fn FLA_Fill_with_cluster_dist_check(
    n_clusters: FLA_Obj,
    cluster_width: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fill_with_cluster_dist_check.unwrap()(n_clusters, cluster_width, x)
}

pub unsafe fn FLA_Hermitianize_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hermitianize_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Invert_check(conj: FLA_Conj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Invert_check.unwrap()(conj, x)
}

pub unsafe fn FLA_Inv_scal_elemwise_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scal_elemwise_check.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Max_abs_value_check(A: FLA_Obj, amax: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Max_abs_value_check.unwrap()(A, amax)
}

pub unsafe fn FLA_Max_abs_value_herm_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    maxabs: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Max_abs_value_herm_check.unwrap()(uplo, A, maxabs)
}

pub unsafe fn FLA_Max_elemwise_diff_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Max_elemwise_diff_check.unwrap()(A, B)
}

pub unsafe fn FLA_Mult_add_check(alpha: FLA_Obj, beta: FLA_Obj, gamma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Mult_add_check.unwrap()(alpha, beta, gamma)
}

pub unsafe fn FLA_Negate_check(x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Negate_check.unwrap()(x)
}

pub unsafe fn FLA_Norm1_check(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm1_check.unwrap()(A, norm)
}

pub unsafe fn FLA_Norm_inf_check(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm_inf_check.unwrap()(A, norm)
}

pub unsafe fn FLA_Norm_frob_check(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm_frob_check.unwrap()(A, norm)
}

pub unsafe fn FLA_Pow_check(base: FLA_Obj, exp: FLA_Obj, btoe: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Pow_check.unwrap()(base, exp, btoe)
}

pub unsafe fn FLA_Random_matrix_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_matrix_check.unwrap()(A)
}

pub unsafe fn FLA_Random_herm_matrix_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_herm_matrix_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Random_symm_matrix_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_symm_matrix_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Random_spd_matrix_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_spd_matrix_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Random_tri_matrix_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_tri_matrix_check.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Random_unitary_matrix_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Random_unitary_matrix_check.unwrap()(A)
}

pub unsafe fn FLA_Scal_elemwise_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scal_elemwise_check.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Setr_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Setr_check.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Sort_check(direct: FLA_Direct, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sort_check.unwrap()(direct, x)
}

pub unsafe fn FLA_Sqrt_check(alpha: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sqrt_check.unwrap()(alpha)
}

pub unsafe fn FLA_Symmetrize_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Symmetrize_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Triangularize_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Triangularize_check.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Transpose_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Transpose_check.unwrap()(A)
}

pub unsafe fn FLA_Set_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_check.unwrap()(alpha, A)
}

pub unsafe fn FLA_Set_diag_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_diag_check.unwrap()(alpha, A)
}

pub unsafe fn FLA_Set_to_identity_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Set_to_identity_check.unwrap()(A)
}

pub unsafe fn FLA_Add_to_diag_check(diag_value: *mut c_void, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Add_to_diag_check.unwrap()(diag_value, A)
}

pub unsafe fn FLA_Shift_diag_check(conj: FLA_Conj, sigma: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Shift_diag_check.unwrap()(conj, sigma, A)
}

pub unsafe fn FLA_Scale_diag_check(conj: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scale_diag_check.unwrap()(conj, alpha, A)
}

pub unsafe fn FLA_Transpose_blk_var1(A: FLA_Obj, cntl: *mut fla_tpose_t) -> FLA_Error {
    dyload_lib().FLA_Transpose_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Transpose_blk_var2(A: FLA_Obj, cntl: *mut fla_tpose_t) -> FLA_Error {
    dyload_lib().FLA_Transpose_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Transpose_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Transpose_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Transpose_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Transpose_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Swap_t_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_swap_t) -> FLA_Error {
    dyload_lib().FLA_Swap_t_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Swap_t_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_swap_t) -> FLA_Error {
    dyload_lib().FLA_Swap_t_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Sort(direct: FLA_Direct, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sort.unwrap()(direct, x)
}

pub unsafe fn FLA_Sort_f_ops(m_x: c_int, x: *mut f32, inc_x: c_int) -> FLA_Error {
    dyload_lib().FLA_Sort_f_ops.unwrap()(m_x, x, inc_x)
}

pub unsafe fn FLA_Sort_b_ops(m_x: c_int, x: *mut f32, inc_x: c_int) -> FLA_Error {
    dyload_lib().FLA_Sort_b_ops.unwrap()(m_x, x, inc_x)
}

pub unsafe fn FLA_Sort_f_opd(m_x: c_int, x: *mut f64, inc_x: c_int) -> FLA_Error {
    dyload_lib().FLA_Sort_f_opd.unwrap()(m_x, x, inc_x)
}

pub unsafe fn FLA_Sort_b_opd(m_x: c_int, x: *mut f64, inc_x: c_int) -> FLA_Error {
    dyload_lib().FLA_Sort_b_opd.unwrap()(m_x, x, inc_x)
}

pub unsafe fn FLA_Househ2_UT(
    side: FLA_Side,
    chi_1: FLA_Obj,
    x2: FLA_Obj,
    tau: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT.unwrap()(side, chi_1, x2, tau)
}

pub unsafe fn FLA_Househ2_UT_l_ops(
    m_x2: c_int,
    chi_1: *mut f32,
    x2: *mut f32,
    inc_x2: c_int,
    tau: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_l_ops.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_l_opd(
    m_x2: c_int,
    chi_1: *mut f64,
    x2: *mut f64,
    inc_x2: c_int,
    tau: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_l_opd.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_l_opc(
    m_x2: c_int,
    chi_1: *mut scomplex,
    x2: *mut scomplex,
    inc_x2: c_int,
    tau: *mut scomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_l_opc.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_l_opz(
    m_x2: c_int,
    chi_1: *mut dcomplex,
    x2: *mut dcomplex,
    inc_x2: c_int,
    tau: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_l_opz.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_r_ops(
    m_x2: c_int,
    chi_1: *mut f32,
    x2: *mut f32,
    inc_x2: c_int,
    tau: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_r_ops.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_r_opd(
    m_x2: c_int,
    chi_1: *mut f64,
    x2: *mut f64,
    inc_x2: c_int,
    tau: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_r_opd.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_r_opc(
    m_x2: c_int,
    chi_1: *mut scomplex,
    x2: *mut scomplex,
    inc_x2: c_int,
    tau: *mut scomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_r_opc.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ2_UT_r_opz(
    m_x2: c_int,
    chi_1: *mut dcomplex,
    x2: *mut dcomplex,
    inc_x2: c_int,
    tau: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_r_opz.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
}

pub unsafe fn FLA_Househ3UD_UT(
    chi_1: FLA_Obj,
    x2: FLA_Obj,
    y2: FLA_Obj,
    tau: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Househ3UD_UT.unwrap()(chi_1, x2, y2, tau)
}

pub unsafe fn FLA_Househ3UD_UT_ops(
    m_x2: c_int,
    m_y2: c_int,
    chi_1: *mut f32,
    x2: *mut f32,
    inc_x2: c_int,
    y2: *mut f32,
    inc_y2: c_int,
    tau: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Househ3UD_UT_ops.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
}

pub unsafe fn FLA_Househ3UD_UT_opd(
    m_x2: c_int,
    m_y2: c_int,
    chi_1: *mut f64,
    x2: *mut f64,
    inc_x2: c_int,
    y2: *mut f64,
    inc_y2: c_int,
    tau: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Househ3UD_UT_opd.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
}

pub unsafe fn FLA_Househ3UD_UT_opc(
    m_x2: c_int,
    m_y2: c_int,
    chi_1: *mut scomplex,
    x2: *mut scomplex,
    inc_x2: c_int,
    y2: *mut scomplex,
    inc_y2: c_int,
    tau: *mut scomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ3UD_UT_opc.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
}

pub unsafe fn FLA_Househ3UD_UT_opz(
    m_x2: c_int,
    m_y2: c_int,
    chi_1: *mut dcomplex,
    x2: *mut dcomplex,
    inc_x2: c_int,
    y2: *mut dcomplex,
    inc_y2: c_int,
    tau: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ3UD_UT_opz.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
}

pub unsafe fn FLA_Househ2s_UT(
    side: FLA_Side,
    chi_1: FLA_Obj,
    x2: FLA_Obj,
    alpha: FLA_Obj,
    chi_1_minus_alpha: FLA_Obj,
    tau: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT.unwrap()(side, chi_1, x2, alpha, chi_1_minus_alpha, tau)
}

pub unsafe fn FLA_Househ2s_UT_l_ops(
    m_x2: c_int,
    chi_1: *mut f32,
    x2: *mut f32,
    inc_x2: c_int,
    alpha: *mut f32,
    chi_1_minus_alpha: *mut f32,
    tau: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_l_ops.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_l_opd(
    m_x2: c_int,
    chi_1: *mut f64,
    x2: *mut f64,
    inc_x2: c_int,
    alpha: *mut f64,
    chi_1_minus_alpha: *mut f64,
    tau: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_l_opd.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_l_opc(
    m_x2: c_int,
    chi_1: *mut scomplex,
    x2: *mut scomplex,
    inc_x2: c_int,
    alpha: *mut scomplex,
    chi_1_minus_alpha: *mut scomplex,
    tau: *mut scomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_l_opc.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_l_opz(
    m_x2: c_int,
    chi_1: *mut dcomplex,
    x2: *mut dcomplex,
    inc_x2: c_int,
    alpha: *mut dcomplex,
    chi_1_minus_alpha: *mut dcomplex,
    tau: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_l_opz.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_r_ops(
    m_x2: c_int,
    chi_1: *mut f32,
    x2: *mut f32,
    inc_x2: c_int,
    alpha: *mut f32,
    chi_1_minus_alpha: *mut f32,
    tau: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_r_ops.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_r_opd(
    m_x2: c_int,
    chi_1: *mut f64,
    x2: *mut f64,
    inc_x2: c_int,
    alpha: *mut f64,
    chi_1_minus_alpha: *mut f64,
    tau: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_r_opd.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_r_opc(
    m_x2: c_int,
    chi_1: *mut scomplex,
    x2: *mut scomplex,
    inc_x2: c_int,
    alpha: *mut scomplex,
    chi_1_minus_alpha: *mut scomplex,
    tau: *mut scomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_r_opc.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Househ2s_UT_r_opz(
    m_x2: c_int,
    chi_1: *mut dcomplex,
    x2: *mut dcomplex,
    inc_x2: c_int,
    alpha: *mut dcomplex,
    chi_1_minus_alpha: *mut dcomplex,
    tau: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_r_opz.unwrap()(
        m_x2,
        chi_1,
        x2,
        inc_x2,
        alpha,
        chi_1_minus_alpha,
        tau,
    )
}

pub unsafe fn FLA_Hev_2x2(
    alpha11: FLA_Obj,
    alpha21: FLA_Obj,
    alpha22: FLA_Obj,
    lambda1: FLA_Obj,
    lambda2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hev_2x2.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2)
}

pub unsafe fn FLA_Hev_2x2_ops(
    buff_alpha11: *mut f32,
    buff_alpha21: *mut f32,
    buff_alpha22: *mut f32,
    buff_lambda1: *mut f32,
    buff_lambda2: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Hev_2x2_ops.unwrap()(
        buff_alpha11,
        buff_alpha21,
        buff_alpha22,
        buff_lambda1,
        buff_lambda2,
    )
}

pub unsafe fn FLA_Hev_2x2_opd(
    buff_alpha11: *mut f64,
    buff_alpha21: *mut f64,
    buff_alpha22: *mut f64,
    buff_lambda1: *mut f64,
    buff_lambda2: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Hev_2x2_opd.unwrap()(
        buff_alpha11,
        buff_alpha21,
        buff_alpha22,
        buff_lambda1,
        buff_lambda2,
    )
}

pub unsafe fn FLA_Hevv_2x2(
    alpha11: FLA_Obj,
    alpha21: FLA_Obj,
    alpha22: FLA_Obj,
    lambda1: FLA_Obj,
    lambda2: FLA_Obj,
    gamma1: FLA_Obj,
    sigma1: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevv_2x2.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1)
}

pub unsafe fn FLA_Hevv_2x2_ops(
    alpha11: *mut f32,
    alpha21: *mut f32,
    alpha22: *mut f32,
    lambda1: *mut f32,
    lambda2: *mut f32,
    gamma1: *mut f32,
    sigma1: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Hevv_2x2_ops.unwrap()(
        alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1,
    )
}

pub unsafe fn FLA_Hevv_2x2_opd(
    alpha11: *mut f64,
    alpha21: *mut f64,
    alpha22: *mut f64,
    lambda1: *mut f64,
    lambda2: *mut f64,
    gamma1: *mut f64,
    sigma1: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Hevv_2x2_opd.unwrap()(
        alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1,
    )
}

pub unsafe fn FLA_Hevv_2x2_opc(
    alpha11: *mut scomplex,
    alpha21: *mut scomplex,
    alpha22: *mut scomplex,
    lambda1: *mut f32,
    lambda2: *mut f32,
    gamma1: *mut f32,
    sigma1: *mut scomplex,
) -> FLA_Error {
    dyload_lib().FLA_Hevv_2x2_opc.unwrap()(
        alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1,
    )
}

pub unsafe fn FLA_Hevv_2x2_opz(
    alpha11: *mut dcomplex,
    alpha21: *mut dcomplex,
    alpha22: *mut dcomplex,
    lambda1: *mut f64,
    lambda2: *mut f64,
    gamma1: *mut f64,
    sigma1: *mut dcomplex,
) -> FLA_Error {
    dyload_lib().FLA_Hevv_2x2_opz.unwrap()(
        alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1,
    )
}

pub unsafe fn FLA_Wilkshift_tridiag(
    delta1: FLA_Obj,
    epsilon: FLA_Obj,
    delta2: FLA_Obj,
    kappa: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Wilkshift_tridiag.unwrap()(delta1, epsilon, delta2, kappa)
}

pub unsafe fn FLA_Wilkshift_tridiag_ops(
    delta1: f32,
    epsilon: f32,
    delta2: f32,
    kappa: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Wilkshift_tridiag_ops.unwrap()(delta1, epsilon, delta2, kappa)
}

pub unsafe fn FLA_Wilkshift_tridiag_opd(
    delta1: f64,
    epsilon: f64,
    delta2: f64,
    kappa: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Wilkshift_tridiag_opd.unwrap()(delta1, epsilon, delta2, kappa)
}

pub unsafe fn FLA_Pythag2(chi: FLA_Obj, psi: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Pythag2.unwrap()(chi, psi, rho)
}

pub unsafe fn FLA_Pythag2_ops(chi: *mut f32, psi: *mut f32, rho: *mut f32) -> FLA_Error {
    dyload_lib().FLA_Pythag2_ops.unwrap()(chi, psi, rho)
}

pub unsafe fn FLA_Pythag2_opd(chi: *mut f64, psi: *mut f64, rho: *mut f64) -> FLA_Error {
    dyload_lib().FLA_Pythag2_opd.unwrap()(chi, psi, rho)
}

pub unsafe fn FLA_Pythag3(chi: FLA_Obj, psi: FLA_Obj, zeta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Pythag3.unwrap()(chi, psi, zeta, rho)
}

pub unsafe fn FLA_Pythag3_ops(
    chi: *mut f32,
    psi: *mut f32,
    zeta: *mut f32,
    rho: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Pythag3_ops.unwrap()(chi, psi, zeta, rho)
}

pub unsafe fn FLA_Pythag3_opd(
    chi: *mut f64,
    psi: *mut f64,
    zeta: *mut f64,
    rho: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Pythag3_opd.unwrap()(chi, psi, zeta, rho)
}

pub unsafe fn FLA_Sort_evd(direct: FLA_Direct, l: FLA_Obj, V: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sort_evd.unwrap()(direct, l, V)
}

pub unsafe fn FLA_Sort_evd_f_ops(
    m_A: c_int,
    l: *mut f32,
    inc_l: c_int,
    V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_f_ops.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_b_ops(
    m_A: c_int,
    l: *mut f32,
    inc_l: c_int,
    V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_b_ops.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_f_opd(
    m_A: c_int,
    l: *mut f64,
    inc_l: c_int,
    V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_f_opd.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_b_opd(
    m_A: c_int,
    l: *mut f64,
    inc_l: c_int,
    V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_b_opd.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_f_opc(
    m_A: c_int,
    l: *mut f32,
    inc_l: c_int,
    V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_f_opc.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_b_opc(
    m_A: c_int,
    l: *mut f32,
    inc_l: c_int,
    V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_b_opc.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_f_opz(
    m_A: c_int,
    l: *mut f64,
    inc_l: c_int,
    V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_f_opz.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_evd_b_opz(
    m_A: c_int,
    l: *mut f64,
    inc_l: c_int,
    V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_b_opz.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_bsvd_ext(
    direct: FLA_Direct,
    s: FLA_Obj,
    apply_U: FLA_Bool,
    U: FLA_Obj,
    apply_V: FLA_Bool,
    V: FLA_Obj,
    apply_C: FLA_Bool,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext.unwrap()(direct, s, apply_U, U, apply_V, V, apply_C, C)
}

pub unsafe fn FLA_Sort_bsvd_ext_f_ops(
    m_s: c_int,
    s: *mut f32,
    inc_s: c_int,
    m_U: c_int,
    U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_f_ops.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_b_ops(
    m_s: c_int,
    s: *mut f32,
    inc_s: c_int,
    m_U: c_int,
    U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_b_ops.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_f_opd(
    m_s: c_int,
    s: *mut f64,
    inc_s: c_int,
    m_U: c_int,
    U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_f_opd.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_b_opd(
    m_s: c_int,
    s: *mut f64,
    inc_s: c_int,
    m_U: c_int,
    U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_b_opd.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_f_opc(
    m_s: c_int,
    s: *mut f32,
    inc_s: c_int,
    m_U: c_int,
    U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_f_opc.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_b_opc(
    m_s: c_int,
    s: *mut f32,
    inc_s: c_int,
    m_U: c_int,
    U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_b_opc.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_f_opz(
    m_s: c_int,
    s: *mut f64,
    inc_s: c_int,
    m_U: c_int,
    U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_f_opz.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_bsvd_ext_b_opz(
    m_s: c_int,
    s: *mut f64,
    inc_s: c_int,
    m_U: c_int,
    U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    m_V: c_int,
    V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
    n_C: c_int,
    C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_bsvd_ext_b_opz.unwrap()(
        m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Sort_svd(direct: FLA_Direct, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sort_svd.unwrap()(direct, s, U, V)
}

pub unsafe fn FLA_Sort_svd_f_ops(
    m_U: c_int,
    n_V: c_int,
    s: *mut f32,
    inc_s: c_int,
    U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_f_ops.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_b_ops(
    m_U: c_int,
    n_V: c_int,
    s: *mut f32,
    inc_s: c_int,
    U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_b_ops.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_f_opd(
    m_U: c_int,
    n_V: c_int,
    s: *mut f64,
    inc_s: c_int,
    U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_f_opd.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_b_opd(
    m_U: c_int,
    n_V: c_int,
    s: *mut f64,
    inc_s: c_int,
    U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_b_opd.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_f_opc(
    m_U: c_int,
    n_V: c_int,
    s: *mut f32,
    inc_s: c_int,
    U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_f_opc.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_b_opc(
    m_U: c_int,
    n_V: c_int,
    s: *mut f32,
    inc_s: c_int,
    U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_b_opc.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_f_opz(
    m_U: c_int,
    n_V: c_int,
    s: *mut f64,
    inc_s: c_int,
    U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_f_opz.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sort_svd_b_opz(
    m_U: c_int,
    n_V: c_int,
    s: *mut f64,
    inc_s: c_int,
    U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_b_opz.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
}

pub unsafe fn FLA_Sv_2x2(
    alpha11: FLA_Obj,
    alpha12: FLA_Obj,
    alpha22: FLA_Obj,
    sigma1: FLA_Obj,
    sigma2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sv_2x2.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2)
}

pub unsafe fn FLA_Sv_2x2_ops(
    alpha11: *mut f32,
    alpha12: *mut f32,
    alpha22: *mut f32,
    sigma1: *mut f32,
    sigma2: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Sv_2x2_ops.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2)
}

pub unsafe fn FLA_Sv_2x2_opd(
    alpha11: *mut f64,
    alpha12: *mut f64,
    alpha22: *mut f64,
    sigma1: *mut f64,
    sigma2: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Sv_2x2_opd.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2)
}

pub unsafe fn FLA_Svv_2x2(
    alpha11: FLA_Obj,
    alpha12: FLA_Obj,
    alpha22: FLA_Obj,
    sigma1: FLA_Obj,
    sigma2: FLA_Obj,
    gammaL: FLA_Obj,
    sigmaL: FLA_Obj,
    gammaR: FLA_Obj,
    sigmaR: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svv_2x2.unwrap()(
        alpha11, alpha12, alpha22, sigma1, sigma2, gammaL, sigmaL, gammaR, sigmaR,
    )
}

pub unsafe fn FLA_Svv_2x2_ops(
    alpha11: *mut f32,
    alpha12: *mut f32,
    alpha22: *mut f32,
    sigma1: *mut f32,
    sigma2: *mut f32,
    gammaL: *mut f32,
    sigmaL: *mut f32,
    gammaR: *mut f32,
    sigmaR: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Svv_2x2_ops.unwrap()(
        alpha11, alpha12, alpha22, sigma1, sigma2, gammaL, sigmaL, gammaR, sigmaR,
    )
}

pub unsafe fn FLA_Svv_2x2_opd(
    alpha11: *mut f64,
    alpha12: *mut f64,
    alpha22: *mut f64,
    sigma1: *mut f64,
    sigma2: *mut f64,
    gammaL: *mut f64,
    sigmaL: *mut f64,
    gammaR: *mut f64,
    sigmaR: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Svv_2x2_opd.unwrap()(
        alpha11, alpha12, alpha22, sigma1, sigma2, gammaL, sigmaL, gammaR, sigmaR,
    )
}

pub unsafe fn FLA_Mach_params(machval: FLA_Machval, val: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Mach_params.unwrap()(machval, val)
}

pub unsafe fn FLA_Mach_params_ops(machval: FLA_Machval) -> f32 {
    dyload_lib().FLA_Mach_params_ops.unwrap()(machval)
}

pub unsafe fn FLA_Mach_params_opd(machval: FLA_Machval) -> f64 {
    dyload_lib().FLA_Mach_params_opd.unwrap()(machval)
}

pub unsafe fn FLA_Apply_diag_matrix(
    side: FLA_Side,
    conj: FLA_Conj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_diag_matrix.unwrap()(side, conj, x, A)
}

pub unsafe fn FLA_Shift_pivots_to(ptype: FLA_Pivot_type, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Shift_pivots_to.unwrap()(ptype, p)
}

pub unsafe fn FLA_Form_perm_matrix(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Form_perm_matrix.unwrap()(p, A)
}

pub unsafe fn FLA_LU_find_zero_on_diagonal(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_find_zero_on_diagonal.unwrap()(A)
}

pub unsafe fn fla_dlamch(cmach: *mut c_char, cmach_len: ftnlen) -> doublereal {
    dyload_lib().fla_dlamch.unwrap()(cmach, cmach_len)
}

pub unsafe fn fla_slamch(cmach: *mut c_char, cmach_len: ftnlen) -> real {
    dyload_lib().fla_slamch.unwrap()(cmach, cmach_len)
}

pub unsafe fn fla_lsame(
    ca: *mut c_char,
    cb: *mut c_char,
    ca_len: ftnlen,
    cb_len: ftnlen,
) -> logical {
    dyload_lib().fla_lsame.unwrap()(ca, cb, ca_len, cb_len)
}

pub unsafe fn fla_pow_di(a: *mut doublereal, n: *mut integer) -> f64 {
    dyload_lib().fla_pow_di.unwrap()(a, n)
}

pub unsafe fn fla_pow_ri(a: *mut real, n: *mut integer) -> real {
    dyload_lib().fla_pow_ri.unwrap()(a, n)
}

pub unsafe fn FLA_Househ2_UT_check(
    side: FLA_Side,
    chi_1: FLA_Obj,
    x2: FLA_Obj,
    tau: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Househ2_UT_check.unwrap()(side, chi_1, x2, tau)
}

pub unsafe fn FLA_Househ3UD_UT_check(
    chi_1: FLA_Obj,
    x2: FLA_Obj,
    y2: FLA_Obj,
    tau: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Househ3UD_UT_check.unwrap()(chi_1, x2, y2, tau)
}

pub unsafe fn FLA_Househ2s_UT_check(
    side: FLA_Side,
    chi_1: FLA_Obj,
    x2: FLA_Obj,
    alpha: FLA_Obj,
    chi_1_minus_alpha: FLA_Obj,
    tau: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Househ2s_UT_check.unwrap()(side, chi_1, x2, alpha, chi_1_minus_alpha, tau)
}

pub unsafe fn FLA_Givens2_check(
    chi_1: FLA_Obj,
    chi_2: FLA_Obj,
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    chi_1_new: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Givens2_check.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
}

pub unsafe fn FLA_Apply_GTG_check(
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    delta1: FLA_Obj,
    epsilon1: FLA_Obj,
    delta2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_GTG_check.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
}

pub unsafe fn FLA_Apply_G_1x2_check(
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    beta: FLA_Obj,
    epsilon: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_1x2_check.unwrap()(gamma, sigma, beta, epsilon)
}

pub unsafe fn FLA_Apply_G_mx2_check(
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    a1: FLA_Obj,
    a2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_mx2_check.unwrap()(gamma, sigma, a1, a2)
}

pub unsafe fn FLA_Apply_G_check(
    side: FLA_Side,
    direct: FLA_Direct,
    G: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_check.unwrap()(side, direct, G, A)
}

pub unsafe fn FLA_Wilkshift_tridiag_check(
    delta1: FLA_Obj,
    epsilon: FLA_Obj,
    delta2: FLA_Obj,
    kappa: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Wilkshift_tridiag_check.unwrap()(delta1, epsilon, delta2, kappa)
}

pub unsafe fn FLA_Wilkshift_bidiag_check(
    epsilon1: FLA_Obj,
    delta1: FLA_Obj,
    epsilon2: FLA_Obj,
    delta2: FLA_Obj,
    kappa: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Wilkshift_bidiag_check.unwrap()(epsilon1, delta1, epsilon2, delta2, kappa)
}

pub unsafe fn FLA_Introduce_bulge_check(
    shift: FLA_Obj,
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    delta1: FLA_Obj,
    epsilon1: FLA_Obj,
    delta2: FLA_Obj,
    beta: FLA_Obj,
    epsilon2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Introduce_bulge_check.unwrap()(
        shift, gamma, sigma, delta1, epsilon1, delta2, beta, epsilon2,
    )
}

pub unsafe fn FLA_Mach_params_check(machval: FLA_Machval, val: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Mach_params_check.unwrap()(machval, val)
}

pub unsafe fn FLA_Sort_evd_check(direct: FLA_Direct, l: FLA_Obj, V: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Sort_evd_check.unwrap()(direct, l, V)
}

pub unsafe fn FLA_Sort_svd_check(
    direct: FLA_Direct,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sort_svd_check.unwrap()(direct, s, U, V)
}

pub unsafe fn FLA_Apply_diag_matrix_check(
    side: FLA_Side,
    conj: FLA_Conj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_diag_matrix_check.unwrap()(side, conj, x, A)
}

pub unsafe fn FLA_Form_perm_matrix_check(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Form_perm_matrix_check.unwrap()(p, A)
}

pub unsafe fn FLA_LU_find_zero_on_diagonal_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_find_zero_on_diagonal_check.unwrap()(A)
}

pub unsafe fn FLA_Asum(x: FLA_Obj, asum_x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Asum.unwrap()(x, asum_x)
}

pub unsafe fn FLA_Axpy(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Axpy.unwrap()(alpha, A, B)
}

pub unsafe fn FLA_Axpys(
    alpha0: FLA_Obj,
    alpha1: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpys.unwrap()(alpha0, alpha1, A, beta, B)
}

pub unsafe fn FLA_Axpyt(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Axpyt.unwrap()(trans, alpha, A, B)
}

pub unsafe fn FLA_Axpyrt(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpyrt.unwrap()(uplo, trans, alpha, A, B)
}

pub unsafe fn FLA_Copy(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copy.unwrap()(A, B)
}

pub unsafe fn FLA_Copyr(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyr.unwrap()(uplo, A, B)
}

pub unsafe fn FLA_Copyrt(uplo: FLA_Uplo, trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyrt.unwrap()(uplo, trans, A, B)
}

pub unsafe fn FLA_Copyt(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyt.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Dot(x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Dot.unwrap()(x, y, rho)
}

pub unsafe fn FLA_Dot2cs(
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dot2cs.unwrap()(conj, alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dot2s(
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dot2s.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dotc(conj: FLA_Conj, x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Dotc.unwrap()(conj, x, y, rho)
}

pub unsafe fn FLA_Dotcs(
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dotcs.unwrap()(conj, alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dots(
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dots.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Amax(x: FLA_Obj, index: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Amax.unwrap()(x, index)
}

pub unsafe fn FLA_Inv_scal(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scal.unwrap()(alpha, A)
}

pub unsafe fn FLA_Inv_scalc(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scalc.unwrap()(conjalpha, alpha, A)
}

pub unsafe fn FLA_Nrm2(x: FLA_Obj, norm_x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Nrm2.unwrap()(x, norm_x)
}

pub unsafe fn FLA_Scal(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scal.unwrap()(alpha, A)
}

pub unsafe fn FLA_Scalc(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scalc.unwrap()(conjalpha, alpha, A)
}

pub unsafe fn FLA_Scalr(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scalr.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Swap(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Swap.unwrap()(A, B)
}

pub unsafe fn FLA_Swapt(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Swapt.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Axpy_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_task.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_task(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_task.unwrap()(trans, alpha, A, B, cntl)
}

pub unsafe fn FLA_Copy_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_task(
    trans: FLA_Trans,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_copyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Copyt_task.unwrap()(trans, A, B, cntl)
}

pub unsafe fn FLA_Copyr_task(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_copyr_t,
) -> FLA_Error {
    dyload_lib().FLA_Copyr_task.unwrap()(uplo, A, B, cntl)
}

pub unsafe fn FLA_Scal_task(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
    dyload_lib().FLA_Scal_task.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_task(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_task.unwrap()(uplo, alpha, A, cntl)
}

pub unsafe fn FLA_Axpyt_n_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_n_task.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_t_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_t_task.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_c_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_c_task.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_h_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_h_task.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Copyt_n_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_n_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_t_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_t_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_c_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_c_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_h_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_h_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_l_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_l_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_u_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_u_task.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Scalr_l_task(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
    dyload_lib().FLA_Scalr_l_task.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_u_task(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
    dyload_lib().FLA_Scalr_u_task.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Asum_external(x: FLA_Obj, asum_x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Asum_external.unwrap()(x, asum_x)
}

pub unsafe fn FLA_Axpy_external(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Axpy_external.unwrap()(alpha, A, B)
}

pub unsafe fn FLA_Axpys_external(
    alpha0: FLA_Obj,
    alpha1: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpys_external.unwrap()(alpha0, alpha1, A, beta, B)
}

pub unsafe fn FLA_Axpyt_external(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_external.unwrap()(trans, alpha, A, B)
}

pub unsafe fn FLA_Axpyrt_external(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpyrt_external.unwrap()(uplo, trans, alpha, A, B)
}

pub unsafe fn FLA_Copy_external(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copy_external.unwrap()(A, B)
}

pub unsafe fn FLA_Copyr_external(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyr_external.unwrap()(uplo, A, B)
}

pub unsafe fn FLA_Copyrt_external(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Copyrt_external.unwrap()(uplo, trans, A, B)
}

pub unsafe fn FLA_Copyt_external(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyt_external.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Dot_external(x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Dot_external.unwrap()(x, y, rho)
}

pub unsafe fn FLA_Dotc_external(conj: FLA_Conj, x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Dotc_external.unwrap()(conj, x, y, rho)
}

pub unsafe fn FLA_Dots_external(
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dots_external.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dotcs_external(
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dotcs_external.unwrap()(conj, alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dot2s_external(
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dot2s_external.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dot2cs_external(
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dot2cs_external.unwrap()(conj, alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Amax_external(x: FLA_Obj, index: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Amax_external.unwrap()(x, index)
}

pub unsafe fn FLA_Inv_scal_external(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scal_external.unwrap()(alpha, A)
}

pub unsafe fn FLA_Inv_scalc_external(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scalc_external.unwrap()(conjalpha, alpha, A)
}

pub unsafe fn FLA_Nrm2_external(x: FLA_Obj, nrm_x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Nrm2_external.unwrap()(x, nrm_x)
}

pub unsafe fn FLA_Scal_external(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scal_external.unwrap()(alpha, A)
}

pub unsafe fn FLA_Scalc_external(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scalc_external.unwrap()(conjalpha, alpha, A)
}

pub unsafe fn FLA_Scalr_external(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scalr_external.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Swap_external(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Swap_external.unwrap()(A, B)
}

pub unsafe fn FLA_Swapt_external(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Swapt_external.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Axpy_external_gpu(
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_external_gpu.unwrap()(alpha, A, A_gpu, B, B_gpu)
}

pub unsafe fn FLA_Copy_external_gpu(
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Copy_external_gpu.unwrap()(A, A_gpu, B, B_gpu)
}

pub unsafe fn FLA_Scal_external_gpu(alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void) -> FLA_Error {
    dyload_lib().FLA_Scal_external_gpu.unwrap()(alpha, A, A_gpu)
}

pub unsafe fn FLA_Scalr_external_gpu(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_external_gpu.unwrap()(uplo, alpha, A, A_gpu)
}

pub unsafe fn FLA_Asum_check(x: FLA_Obj, asum_x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Asum_check.unwrap()(x, asum_x)
}

pub unsafe fn FLA_Axpy_check(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Axpy_check.unwrap()(alpha, A, B)
}

pub unsafe fn FLA_Axpys_check(
    alpha0: FLA_Obj,
    alpha1: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpys_check.unwrap()(alpha0, alpha1, A, beta, B)
}

pub unsafe fn FLA_Axpyt_check(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_check.unwrap()(trans, alpha, A, B)
}

pub unsafe fn FLA_Axpyrt_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Axpyrt_check.unwrap()(uplo, trans, alpha, A, B)
}

pub unsafe fn FLA_Copy_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copy_check.unwrap()(A, B)
}

pub unsafe fn FLA_Copyr_check(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyr_check.unwrap()(uplo, A, B)
}

pub unsafe fn FLA_Copyrt_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Copyrt_check.unwrap()(uplo, trans, A, B)
}

pub unsafe fn FLA_Copyt_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Copyt_check.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Dot_check(x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Dot_check.unwrap()(x, y, rho)
}

pub unsafe fn FLA_Dotc_check(conj: FLA_Conj, x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Dotc_check.unwrap()(conj, x, y, rho)
}

pub unsafe fn FLA_Dots_check(
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dots_check.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dotcs_check(
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dotcs_check.unwrap()(conj, alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dot2s_check(
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dot2s_check.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Dot2cs_check(
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    beta: FLA_Obj,
    rho: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Dot2cs_check.unwrap()(conj, alpha, x, y, beta, rho)
}

pub unsafe fn FLA_Amax_check(x: FLA_Obj, index: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Amax_check.unwrap()(x, index)
}

pub unsafe fn FLA_Inv_scal_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scal_check.unwrap()(alpha, A)
}

pub unsafe fn FLA_Inv_scalc_check(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Inv_scalc_check.unwrap()(conjalpha, alpha, A)
}

pub unsafe fn FLA_Nrm2_check(x: FLA_Obj, nrm_x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Nrm2_check.unwrap()(x, nrm_x)
}

pub unsafe fn FLA_Scal_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scal_check.unwrap()(alpha, A)
}

pub unsafe fn FLA_Scalc_check(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scalc_check.unwrap()(conjalpha, alpha, A)
}

pub unsafe fn FLA_Scalr_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Scalr_check.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Swap_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Swap_check.unwrap()(A, B)
}

pub unsafe fn FLA_Swapt_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Swapt_check.unwrap()(trans, A, B)
}

pub unsafe fn FLA_Axpy_internal_check(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_internal_check.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_internal_check(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_internal_check.unwrap()(trans, alpha, A, B, cntl)
}

pub unsafe fn FLA_Copy_internal_check(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_internal_check.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_internal_check(
    trans: FLA_Trans,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_copyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Copyt_internal_check.unwrap()(trans, A, B, cntl)
}

pub unsafe fn FLA_Copyr_internal_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_copyr_t,
) -> FLA_Error {
    dyload_lib().FLA_Copyr_internal_check.unwrap()(uplo, A, B, cntl)
}

pub unsafe fn FLA_Scal_internal_check(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scal_t,
) -> FLA_Error {
    dyload_lib().FLA_Scal_internal_check.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_internal_check(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_internal_check.unwrap()(uplo, alpha, A, cntl)
}

pub unsafe fn FLA_Gemv(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemv.unwrap()(transa, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Gemvc(
    transa: FLA_Trans,
    conjx: FLA_Conj,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemvc.unwrap()(transa, conjx, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Ger(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ger.unwrap()(alpha, x, y, A)
}

pub unsafe fn FLA_Gerc(
    conjx: FLA_Conj,
    conjy: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gerc.unwrap()(conjx, conjy, alpha, x, y, A)
}

pub unsafe fn FLA_Hemv(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemv.unwrap()(uplo, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Hemvc(
    uplo: FLA_Uplo,
    conja: FLA_Conj,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemvc.unwrap()(uplo, conja, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Her(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Her.unwrap()(uplo, alpha, x, A)
}

pub unsafe fn FLA_Herc(
    uplo: FLA_Uplo,
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herc.unwrap()(uplo, conj, alpha, x, A)
}

pub unsafe fn FLA_Her2(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2.unwrap()(uplo, alpha, x, y, A)
}

pub unsafe fn FLA_Her2c(
    uplo: FLA_Uplo,
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2c.unwrap()(uplo, conj, alpha, x, y, A)
}

pub unsafe fn FLA_Symv(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symv.unwrap()(uplo, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Syr(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Syr.unwrap()(uplo, alpha, x, A)
}

pub unsafe fn FLA_Syr2(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2.unwrap()(uplo, alpha, x, y, A)
}

pub unsafe fn FLA_Trmv(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmv.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLA_Trmvsx(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmvsx.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Trsv(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsv.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLA_Trsvsx(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsvsx.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Gemv_task(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_task.unwrap()(transa, alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Trsv_task(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_task.unwrap()(uplo, transa, diag, A, x, cntl)
}

pub unsafe fn FLA_Gemv_h_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_h_task.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_n_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_n_task.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_t_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_t_task.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Trsv_lc_task(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lc_task.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ln_task(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ln_task.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_lt_task(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lt_task.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_uc_task(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_uc_task.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_un_task(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_un_task.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ut_task(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ut_task.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Gemv_external(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_external.unwrap()(transa, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Gemvc_external(
    transa: FLA_Trans,
    conjx: FLA_Conj,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemvc_external.unwrap()(transa, conjx, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Ger_external(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ger_external.unwrap()(alpha, x, y, A)
}

pub unsafe fn FLA_Gerc_external(
    conjx: FLA_Conj,
    conjy: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gerc_external.unwrap()(conjx, conjy, alpha, x, y, A)
}

pub unsafe fn FLA_Hemv_external(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemv_external.unwrap()(uplo, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Hemvc_external(
    uplo: FLA_Uplo,
    conja: FLA_Conj,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemvc_external.unwrap()(uplo, conja, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Her_external(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her_external.unwrap()(uplo, alpha, x, A)
}

pub unsafe fn FLA_Herc_external(
    uplo: FLA_Uplo,
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herc_external.unwrap()(uplo, conj, alpha, x, A)
}

pub unsafe fn FLA_Her2_external(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2_external.unwrap()(uplo, alpha, x, y, A)
}

pub unsafe fn FLA_Her2c_external(
    uplo: FLA_Uplo,
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2c_external.unwrap()(uplo, conj, alpha, x, y, A)
}

pub unsafe fn FLA_Symv_external(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symv_external.unwrap()(uplo, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Syr_external(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr_external.unwrap()(uplo, alpha, x, A)
}

pub unsafe fn FLA_Syr2_external(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2_external.unwrap()(uplo, alpha, x, y, A)
}

pub unsafe fn FLA_Trmv_external(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmv_external.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLA_Trmvsx_external(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmvsx_external.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Trsv_external(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_external.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLA_Trsvsx_external(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsvsx_external.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Gemv_external_gpu(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    x: FLA_Obj,
    x_gpu: *mut c_void,
    beta: FLA_Obj,
    y: FLA_Obj,
    y_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_external_gpu.unwrap()(transa, alpha, A, A_gpu, x, x_gpu, beta, y, y_gpu)
}

pub unsafe fn FLA_Trsv_external_gpu(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    x: FLA_Obj,
    x_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_external_gpu.unwrap()(uplo, transa, diag, A, A_gpu, x, x_gpu)
}

pub unsafe fn FLA_Gemv_check(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_check.unwrap()(transa, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Gemvc_check(
    transa: FLA_Trans,
    conjx: FLA_Conj,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemvc_check.unwrap()(transa, conjx, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Ger_check(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ger_check.unwrap()(alpha, x, y, A)
}

pub unsafe fn FLA_Gerc_check(
    conjx: FLA_Conj,
    conjy: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gerc_check.unwrap()(conjx, conjy, alpha, x, y, A)
}

pub unsafe fn FLA_Hemv_check(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemv_check.unwrap()(uplo, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Hemvc_check(
    uplo: FLA_Uplo,
    conja: FLA_Conj,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemvc_check.unwrap()(uplo, conja, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Her_check(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Her_check.unwrap()(uplo, alpha, x, A)
}

pub unsafe fn FLA_Herc_check(
    uplo: FLA_Uplo,
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herc_check.unwrap()(uplo, conj, alpha, x, A)
}

pub unsafe fn FLA_Her2_check(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2_check.unwrap()(uplo, alpha, x, y, A)
}

pub unsafe fn FLA_Her2c_check(
    uplo: FLA_Uplo,
    conj: FLA_Conj,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2c_check.unwrap()(uplo, conj, alpha, x, y, A)
}

pub unsafe fn FLA_Symv_check(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symv_check.unwrap()(uplo, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Syr_check(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Syr_check.unwrap()(uplo, alpha, x, A)
}

pub unsafe fn FLA_Syr2_check(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    x: FLA_Obj,
    y: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2_check.unwrap()(uplo, alpha, x, y, A)
}

pub unsafe fn FLA_Trmv_check(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmv_check.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLA_Trmvsx_check(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmvsx_check.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Trsv_check(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_check.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLA_Trsvsx_check(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsvsx_check.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
}

pub unsafe fn FLA_Gemv_internal_check(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_internal_check.unwrap()(transa, alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Trsv_internal_check(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_internal_check.unwrap()(uplo, transa, diag, A, x, cntl)
}

pub unsafe fn FLA_Gemm(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Herk(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLA_Her2k(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syrk(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLA_Syr2k(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Trmm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm.unwrap()(side, uplo, trans, diag, alpha, A, B)
}

pub unsafe fn FLA_Trmmsx(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmmsx.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Trsm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm.unwrap()(side, uplo, trans, diag, alpha, A, B)
}

pub unsafe fn FLA_Trsmsx(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsmsx.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemp(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemp.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gepm(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gepm.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gepp(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gepp.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_task(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_task.unwrap()(transa, transb, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_task(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_task.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Herk_task(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_task.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_task(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_task.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_task(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_task.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_task(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_task.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_task(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_task.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Trmm_task(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_task.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_task(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_task.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Gemm_cc_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_task.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_task(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_task.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Trmm_llc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lln_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llt_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lun_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lut_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rln_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlt_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_run_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rut_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lln_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llt_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lun_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lut_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rln_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlt_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruc_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruh_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_run_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rut_task(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_task.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Gemm_external(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_external.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_external.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Herk_external(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_external.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLA_Her2k_external(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_external.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_external.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syrk_external(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_external.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLA_Syr2k_external(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_external.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Trmm_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_external.unwrap()(side, uplo, trans, diag, alpha, A, B)
}

pub unsafe fn FLA_Trsm_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_external.unwrap()(side, uplo, trans, diag, alpha, A, B)
}

pub unsafe fn FLA_Trmmsx_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmmsx_external.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Trsmsx_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsmsx_external.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_external_gpu(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_external_gpu.unwrap()(
        transa, transb, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu,
    )
}

pub unsafe fn FLA_Hemm_external_gpu(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_external_gpu.unwrap()(
        side, uplo, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu,
    )
}

pub unsafe fn FLA_Herk_external_gpu(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Herk_external_gpu.unwrap()(uplo, trans, alpha, A, A_gpu, beta, C, C_gpu)
}

pub unsafe fn FLA_Her2k_external_gpu(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_external_gpu.unwrap()(
        uplo, trans, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu,
    )
}

pub unsafe fn FLA_Symm_external_gpu(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Symm_external_gpu.unwrap()(
        side, uplo, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu,
    )
}

pub unsafe fn FLA_Syrk_external_gpu(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_external_gpu.unwrap()(uplo, trans, alpha, A, A_gpu, beta, C, C_gpu)
}

pub unsafe fn FLA_Syr2k_external_gpu(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
    beta: FLA_Obj,
    C: FLA_Obj,
    C_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_external_gpu.unwrap()(
        uplo, trans, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu,
    )
}

pub unsafe fn FLA_Trmm_external_gpu(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_external_gpu.unwrap()(side, uplo, trans, diag, alpha, A, A_gpu, B, B_gpu)
}

pub unsafe fn FLA_Trsm_external_gpu(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    A_gpu: *mut c_void,
    B: FLA_Obj,
    B_gpu: *mut c_void,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_external_gpu.unwrap()(side, uplo, trans, diag, alpha, A, A_gpu, B, B_gpu)
}

pub unsafe fn FLA_Gemm_check(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_check.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_check.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_check.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Herk_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_check.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLA_Symm_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_check.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_check.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syrk_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_check.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLA_Trmm_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_check.unwrap()(side, uplo, transa, diag, alpha, A, B)
}

pub unsafe fn FLA_Trmmsx_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmmsx_check.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Trsm_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_check.unwrap()(side, uplo, transa, diag, alpha, A, B)
}

pub unsafe fn FLA_Trsmsx_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsmsx_check.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_internal_check(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_internal_check.unwrap()(transa, transb, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_internal_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_internal_check.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Herk_internal_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_internal_check.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_internal_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_internal_check.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_internal_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_internal_check.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_internal_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_internal_check.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_internal_check(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_internal_check.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Trmm_internal_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_internal_check.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_internal_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_internal_check.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Chol(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol.unwrap()(uplo, A)
}

pub unsafe fn FLA_LU_nopiv(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv.unwrap()(A)
}

pub unsafe fn FLA_LU_piv(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv.unwrap()(A, p)
}

pub unsafe fn FLA_QR_UT(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT.unwrap()(A, T)
}

pub unsafe fn FLA_QR_UT_piv(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv.unwrap()(A, T, w, p)
}

pub unsafe fn FLA_LQ_UT(A: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT.unwrap()(A, S)
}

pub unsafe fn FLA_Trinv(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Ttmm(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm.unwrap()(uplo, A)
}

pub unsafe fn FLA_Sylv(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv.unwrap()(transa, transb, isgn, A, B, C, scale)
}

pub unsafe fn FLA_SPDinv(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_SPDinv.unwrap()(uplo, A)
}

pub unsafe fn FLA_Hess_UT(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT.unwrap()(A, T)
}

pub unsafe fn FLA_Eig_gest(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest.unwrap()(inv, uplo, A, B)
}

pub unsafe fn FLA_Accum_T_UT(
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    tau: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT.unwrap()(direct, storev, A, tau, T)
}

pub unsafe fn FLA_Apply_H2_UT(
    side: FLA_Side,
    tau: FLA_Obj,
    u2: FLA_Obj,
    a1: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT.unwrap()(side, tau, u2, a1, A2)
}

pub unsafe fn FLA_Apply_HUD_UT(
    side: FLA_Side,
    tau: FLA_Obj,
    w12t: FLA_Obj,
    u2: FLA_Obj,
    v2: FLA_Obj,
    r12t: FLA_Obj,
    C2: FLA_Obj,
    D2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT.unwrap()(side, tau, w12t, u2, v2, r12t, C2, D2)
}

pub unsafe fn FLA_Apply_Q_UT(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT.unwrap()(side, trans, direct, storev, A, T, W, B)
}

pub unsafe fn FLA_Apply_pivots(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots.unwrap()(side, trans, p, A)
}

pub unsafe fn FLA_Chol_task(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_task.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_Chol_l_task(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_l_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_u_task(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_u_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_piv_macro_task(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_piv_macro_task.unwrap()(A, p, cntl)
}

pub unsafe fn FLA_Apply_pivots_task(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_appiv_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_task.unwrap()(side, trans, p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_ln_task(
    p: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_appiv_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_task.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_macro_task(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_appiv_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_macro_task.unwrap()(side, trans, p, A, cntl)
}

pub unsafe fn FLA_LU_nopiv_task(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_piv_task(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_piv_task.unwrap()(A, p, cntl)
}

pub unsafe fn FLA_LU_piv_copy_task(
    A: FLA_Obj,
    p: FLA_Obj,
    U: FLA_Obj,
    cntl: *mut fla_lu_t,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_copy_task.unwrap()(A, p, U, cntl)
}

pub unsafe fn FLA_Trsm_piv_task(
    A: FLA_Obj,
    B: FLA_Obj,
    p: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_piv_task.unwrap()(A, B, p, cntl)
}

pub unsafe fn FLA_SA_LU_task(
    U: FLA_Obj,
    D: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    nb_alg: dim_t,
    cntl: *mut fla_lu_t,
) -> FLA_Error {
    dyload_lib().FLA_SA_LU_task.unwrap()(U, D, p, L, nb_alg, cntl)
}

pub unsafe fn FLA_SA_FS_task(
    L: FLA_Obj,
    D: FLA_Obj,
    p: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    nb_alg: dim_t,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_SA_FS_task.unwrap()(L, D, p, C, E, nb_alg, cntl)
}

pub unsafe fn FLA_Trinv_task(
    uplo: FLA_Uplo,
    diag: FLA_Diag,
    A: FLA_Obj,
    cntl: *mut fla_trinv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_task.unwrap()(uplo, diag, A, cntl)
}

pub unsafe fn FLA_Trinv_ln_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_lu_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_un_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_uu_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_task(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_task.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_Ttmm_l_task(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_u_task(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_task.unwrap()(A, cntl)
}

pub unsafe fn FLA_Sylv_task(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_task.unwrap()(transa, transb, isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_task(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_task.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_task(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_task.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_task(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_task.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_task(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_task.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_task(
    trans: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_task.unwrap()(trans, isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_n_task(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_task.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_h_task(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_task.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_task(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_task.unwrap()(side, trans, direct, storev, A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfc_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfc_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfr_task(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfr_task.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_task(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_task.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lhfc_task(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lhfc_task.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_CAQ2_UT_task(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_task.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_task(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_lhfc_task.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_QR2_UT_task(
    B: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_qr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_task.unwrap()(B, D, T, cntl)
}

pub unsafe fn FLA_CAQR2_UT_task(
    B: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_caqr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_task.unwrap()(B, D, T, cntl)
}

pub unsafe fn FLA_QR_UT_macro_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_macro_task.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_task.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_copy_task(
    A: FLA_Obj,
    T: FLA_Obj,
    U: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_copy_task.unwrap()(A, T, U, cntl)
}

pub unsafe fn FLA_LQ_UT_macro_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_macro_task.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_LQ_UT_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_task.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_UDdate_UT_task(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_uddateut_t,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_task.unwrap()(R, C, D, T, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT_task(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_task.unwrap()(
        side, trans, direct, storev, T, W, R, U, C, V, D, cntl,
    )
}

pub unsafe fn FLA_Apply_QUD_UT_lhfc_task(
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_lhfc_task.unwrap()(T, W, R, U, C, V, D, cntl)
}

pub unsafe fn FLA_Eig_gest_task(
    inv: FLA_Inv,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_task.unwrap()(inv, uplo, A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il_task(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_task.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu_task(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_task.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl_task(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_task.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu_task(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_task.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Apply_Q_blk_external(
    side: FLA_Side,
    trans: FLA_Trans,
    storev: FLA_Store,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_blk_external.unwrap()(side, trans, storev, A, t, B)
}

pub unsafe fn FLA_Apply_pivots_unb_external(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_unb_external.unwrap()(side, trans, p, A)
}

pub unsafe fn FLA_Apply_pivots_ln_unb_ext(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_unb_ext.unwrap()(p, A)
}

pub unsafe fn FLA_Apply_pivots_macro_external(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_macro_external.unwrap()(side, trans, p, A)
}

pub unsafe fn FLA_Chol_blk_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_blk_external.unwrap()(uplo, A)
}

pub unsafe fn FLA_Chol_l_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Chol_unb_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_unb_external.unwrap()(uplo, A)
}

pub unsafe fn FLA_Chol_l_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_LU_piv_blk_external(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_blk_external.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_blk_ext(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_blk_ext.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_unb_external(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_unb_external.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_unb_ext(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_unb_ext.unwrap()(A, p)
}

pub unsafe fn FLA_QR_blk_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_blk_external.unwrap()(A, t)
}

pub unsafe fn FLA_QR_unb_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_unb_external.unwrap()(A, t)
}

pub unsafe fn FLA_LQ_blk_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_blk_external.unwrap()(A, t)
}

pub unsafe fn FLA_LQ_unb_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_unb_external.unwrap()(A, t)
}

pub unsafe fn FLA_Hess_blk_external(A: FLA_Obj, t: FLA_Obj, ilo: c_int, ihi: c_int) -> FLA_Error {
    dyload_lib().FLA_Hess_blk_external.unwrap()(A, t, ilo, ihi)
}

pub unsafe fn FLA_Hess_unb_external(A: FLA_Obj, t: FLA_Obj, ilo: c_int, ihi: c_int) -> FLA_Error {
    dyload_lib().FLA_Hess_unb_external.unwrap()(A, t, ilo, ihi)
}

pub unsafe fn FLA_Tridiag_blk_external(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_blk_external.unwrap()(uplo, A, t)
}

pub unsafe fn FLA_Tridiag_unb_external(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_unb_external.unwrap()(uplo, A, t)
}

pub unsafe fn FLA_Bidiag_blk_external(A: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_blk_external.unwrap()(A, tu, tv)
}

pub unsafe fn FLA_Bidiag_unb_external(A: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_unb_external.unwrap()(A, tu, tv)
}

pub unsafe fn FLA_QR_form_Q_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_form_Q_external.unwrap()(A, t)
}

pub unsafe fn FLA_Tridiag_form_Q_external(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_form_Q_external.unwrap()(uplo, A, t)
}

pub unsafe fn FLA_Tridiag_apply_Q_external(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_apply_Q_external.unwrap()(side, uplo, trans, A, t, B)
}

pub unsafe fn FLA_Bidiag_form_U_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_form_U_external.unwrap()(A, t)
}

pub unsafe fn FLA_Bidiag_form_V_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_form_V_external.unwrap()(A, t)
}

pub unsafe fn FLA_Bidiag_apply_U_external(
    side: FLA_Side,
    trans: FLA_Trans,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_apply_U_external.unwrap()(side, trans, A, t, B)
}

pub unsafe fn FLA_Bidiag_apply_V_external(
    side: FLA_Side,
    trans: FLA_Trans,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_apply_V_external.unwrap()(side, trans, A, t, B)
}

pub unsafe fn FLA_Trinv_blk_external(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_blk_external.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Trinv_ln_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_unb_external(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_unb_external.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Trinv_ln_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_blk_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_blk_external.unwrap()(uplo, A)
}

pub unsafe fn FLA_Ttmm_l_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_blk_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_blk_ext.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_unb_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_unb_external.unwrap()(uplo, A)
}

pub unsafe fn FLA_Ttmm_l_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_unb_ext(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_unb_ext.unwrap()(A)
}

pub unsafe fn FLA_Sylv_blk_external(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_blk_external.unwrap()(transa, transb, isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_blk_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_blk_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_blk_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_blk_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_unb_external(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_unb_external.unwrap()(transa, transb, isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_unb_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_unb_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_unb_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_unb_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_unb_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_unb_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_unb_ext(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_unb_ext.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_SPDinv_blk_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_SPDinv_blk_external.unwrap()(uplo, A)
}

pub unsafe fn FLA_Eig_gest_blk_external(
    inv: FLA_Inv,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_blk_external.unwrap()(inv, uplo, A, B)
}

pub unsafe fn FLA_Eig_gest_il_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_blk_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_iu_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_blk_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_nl_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_blk_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_nu_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_blk_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_unb_external(
    inv: FLA_Inv,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_unb_external.unwrap()(inv, uplo, A, B)
}

pub unsafe fn FLA_Eig_gest_il_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_unb_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_iu_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_unb_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_nl_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_unb_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Eig_gest_nu_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_unb_ext.unwrap()(A, B)
}

pub unsafe fn FLA_Tevd_external(
    jobz: FLA_Evd_type,
    d: FLA_Obj,
    e: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_external.unwrap()(jobz, d, e, A)
}

pub unsafe fn FLA_Tevdd_external(
    jobz: FLA_Evd_type,
    d: FLA_Obj,
    e: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevdd_external.unwrap()(jobz, d, e, A)
}

pub unsafe fn FLA_Tevdr_external(
    jobz: FLA_Evd_type,
    d: FLA_Obj,
    e: FLA_Obj,
    l: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevdr_external.unwrap()(jobz, d, e, l, A)
}

pub unsafe fn FLA_Hevd_external(
    jobz: FLA_Evd_type,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    l: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevd_external.unwrap()(jobz, uplo, A, l)
}

pub unsafe fn FLA_Hevdd_external(
    jobz: FLA_Evd_type,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    l: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevdd_external.unwrap()(jobz, uplo, A, l)
}

pub unsafe fn FLA_Hevdr_external(
    jobz: FLA_Evd_type,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    l: FLA_Obj,
    Z: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevdr_external.unwrap()(jobz, uplo, A, l, Z)
}

pub unsafe fn FLA_Bsvd_external(
    uplo: FLA_Uplo,
    d: FLA_Obj,
    e: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_external.unwrap()(uplo, d, e, U, V)
}

pub unsafe fn FLA_Bsvdd_external(
    uplo: FLA_Uplo,
    d: FLA_Obj,
    e: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvdd_external.unwrap()(uplo, d, e, U, V)
}

pub unsafe fn FLA_Svd_external(
    jobu: FLA_Svd_type,
    jobv: FLA_Svd_type,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svd_external.unwrap()(jobu, jobv, A, s, U, V)
}

pub unsafe fn FLA_Svdd_external(
    jobz: FLA_Svd_type,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svdd_external.unwrap()(jobz, A, s, U, V)
}

pub unsafe fn FLA_Chol_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Chol_solve_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
    X: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Chol_solve_check.unwrap()(uplo, A, B, X)
}

pub unsafe fn FLA_LU_nopiv_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_check.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_solve_check(A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_solve_check.unwrap()(A, B, X)
}

pub unsafe fn FLA_LU_piv_check(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_check.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_solve_check(A: FLA_Obj, p: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_solve_check.unwrap()(A, p, B, X)
}

pub unsafe fn FLA_LU_incpiv_check(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_incpiv_check.unwrap()(A, p, L)
}

pub unsafe fn FLA_LU_incpiv_solve_check(
    A: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    B: FLA_Obj,
    X: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_LU_incpiv_solve_check.unwrap()(A, p, L, B, X)
}

pub unsafe fn FLA_FS_incpiv_check(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, b: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_FS_incpiv_check.unwrap()(A, p, L, b)
}

pub unsafe fn FLA_QR_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_check.unwrap()(A, t)
}

pub unsafe fn FLA_QR_UT_check(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_check.unwrap()(A, T)
}

pub unsafe fn FLA_QR_UT_solve_check(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_solve_check.unwrap()(A, T, B, X)
}

pub unsafe fn FLA_QR_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_recover_tau_check.unwrap()(T, tau)
}

pub unsafe fn FLA_QR_UT_form_Q_check(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_check.unwrap()(A, T, Q)
}

pub unsafe fn FLA_LQ_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_check.unwrap()(A, t)
}

pub unsafe fn FLA_LQ_UT_check(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_check.unwrap()(A, T)
}

pub unsafe fn FLA_LQ_UT_solve_check(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_solve_check.unwrap()(A, T, B, X)
}

pub unsafe fn FLA_LQ_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_recover_tau_check.unwrap()(T, tau)
}

pub unsafe fn FLA_LQ_UT_form_Q_check(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_form_Q_check.unwrap()(A, T, Q)
}

pub unsafe fn FLA_Hess_check(A: FLA_Obj, t: FLA_Obj, ilo: c_int, ihi: c_int) -> FLA_Error {
    dyload_lib().FLA_Hess_check.unwrap()(A, t, ilo, ihi)
}

pub unsafe fn FLA_Hess_UT_check(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_check.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_recover_tau_check.unwrap()(T, tau)
}

pub unsafe fn FLA_Tridiag_check(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_check.unwrap()(uplo, A, t)
}

pub unsafe fn FLA_Tridiag_UT_check(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_check.unwrap()(uplo, A, T)
}

pub unsafe fn FLA_Tridiag_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_recover_tau_check.unwrap()(T, tau)
}

pub unsafe fn FLA_Tridiag_UT_scale_diagonals_check(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_scale_diagonals_check.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Tridiag_UT_extract_diagonals_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_extract_diagonals_check.unwrap()(uplo, A, d, e)
}

pub unsafe fn FLA_Tridiag_UT_extract_real_diagonals_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_extract_real_diagonals_check.unwrap()(uplo, A, d, e)
}

pub unsafe fn FLA_Tridiag_UT_realify_check(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_realify_check.unwrap()(uplo, A, d)
}

pub unsafe fn FLA_Tridiag_UT_realify_subdiagonal_check(b: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_realify_subdiagonal_check.unwrap()(b, d)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Tridiag_UT_form_Q_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    T: FLA_Obj,
    Q: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_check.unwrap()(uplo, A, T, Q)
}

pub unsafe fn FLA_Trinv_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_check.unwrap()(uplo, diag, A)
}

pub unsafe fn FLA_Bidiag_check(A: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_check.unwrap()(A, tu, tv)
}

pub unsafe fn FLA_Bidiag_UT_check(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_check.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_recover_tau_check(
    TU: FLA_Obj,
    TV: FLA_Obj,
    tu: FLA_Obj,
    tv: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_recover_tau_check.unwrap()(TU, TV, tu, tv)
}

pub unsafe fn FLA_Bidiag_UT_extract_diagonals_check(
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_extract_diagonals_check.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_extract_real_diagonals_check(
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_extract_real_diagonals_check.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_scale_diagonals_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_scale_diagonals_check.unwrap()(alpha, A)
}

pub unsafe fn FLA_Bidiag_UT_realify_check(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_realify_check.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_realify_diagonals_check(
    uplo: FLA_Uplo,
    a: FLA_Obj,
    b: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_realify_diagonals_check.unwrap()(uplo, a, b, d, e)
}

pub unsafe fn FLA_Bidiag_UT_form_U_check(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_form_U_check.unwrap()(A, T, U)
}

pub unsafe fn FLA_Bidiag_UT_form_V_check(A: FLA_Obj, S: FLA_Obj, V: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_form_V_check.unwrap()(A, S, V)
}

pub unsafe fn FLA_Ttmm_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Sylv_check(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_check.unwrap()(transa, transb, isgn, A, B, C, scale)
}

pub unsafe fn FLA_Lyap_check(
    trans: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_check.unwrap()(trans, isgn, A, C, scale)
}

pub unsafe fn FLA_SPDinv_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_SPDinv_check.unwrap()(uplo, A)
}

pub unsafe fn FLA_Eig_gest_check(
    inv: FLA_Inv,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_check.unwrap()(inv, uplo, A, B)
}

pub unsafe fn FLA_Apply_Q_check(
    side: FLA_Side,
    trans: FLA_Trans,
    storev: FLA_Store,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_check.unwrap()(side, trans, storev, A, t, B)
}

pub unsafe fn FLA_QR_form_Q_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_form_Q_check.unwrap()(A, t)
}

pub unsafe fn FLA_Tridiag_form_Q_check(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_form_Q_check.unwrap()(uplo, A, t)
}

pub unsafe fn FLA_Tridiag_apply_Q_check(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_apply_Q_check.unwrap()(side, uplo, trans, A, t, B)
}

pub unsafe fn FLA_Bidiag_form_U_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_form_U_check.unwrap()(A, t)
}

pub unsafe fn FLA_Bidiag_form_V_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_form_V_check.unwrap()(A, t)
}

pub unsafe fn FLA_Bidiag_apply_U_check(
    side: FLA_Side,
    trans: FLA_Trans,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_apply_U_check.unwrap()(side, trans, A, t, B)
}

pub unsafe fn FLA_Bidiag_apply_V_check(
    side: FLA_Side,
    trans: FLA_Trans,
    A: FLA_Obj,
    t: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_apply_V_check.unwrap()(side, trans, A, t, B)
}

pub unsafe fn FLA_Apply_Q_UT_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_check.unwrap()(side, trans, direct, storev, A, T, W, B)
}

pub unsafe fn FLA_Apply_Q2_UT_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_check.unwrap()(side, trans, direct, storev, D, T, W, C, E)
}

pub unsafe fn FLA_Apply_QUD_UT_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_check.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
}

pub unsafe fn FLA_Apply_pivots_check(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_check.unwrap()(side, trans, p, A)
}

pub unsafe fn FLA_QR2_UT_check(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_check.unwrap()(B, D, T)
}

pub unsafe fn FLA_CAQR2_UT_check(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_check.unwrap()(B, D, T)
}

pub unsafe fn FLA_QR_UT_inc_check(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_inc_check.unwrap()(A, TW)
}

pub unsafe fn FLA_Apply_Q_UT_inc_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_check.unwrap()(side, trans, direct, storev, A, TW, W1, B)
}

pub unsafe fn FLA_Apply_CAQ_UT_inc_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ_UT_inc_check.unwrap()(
        side, trans, direct, storev, A, ATW, R, RTW, W1, B,
    )
}

pub unsafe fn FLA_QR_UT_inc_solve_check(
    A: FLA_Obj,
    TW: FLA_Obj,
    B: FLA_Obj,
    X: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_inc_solve_check.unwrap()(A, TW, B, X)
}

pub unsafe fn FLA_CAQR_UT_inc_solve_check(
    p: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
    B: FLA_Obj,
    X: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_CAQR_UT_inc_solve_check.unwrap()(p, A, ATW, R, RTW, B, X)
}

pub unsafe fn FLA_UDdate_UT_check(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_check.unwrap()(R, C, D, T)
}

pub unsafe fn FLA_UDdate_UT_update_rhs_check(
    T: FLA_Obj,
    bR: FLA_Obj,
    C: FLA_Obj,
    bC: FLA_Obj,
    D: FLA_Obj,
    bD: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_update_rhs_check.unwrap()(T, bR, C, bC, D, bD)
}

pub unsafe fn FLA_UDdate_UT_solve_check(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_solve_check.unwrap()(R, bR, x)
}

pub unsafe fn FLA_UDdate_UT_inc_check(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_inc_check.unwrap()(R, C, D, T, W)
}

pub unsafe fn FLA_UDdate_UT_inc_update_rhs_check(
    T: FLA_Obj,
    bR: FLA_Obj,
    C: FLA_Obj,
    bC: FLA_Obj,
    D: FLA_Obj,
    bD: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_inc_update_rhs_check.unwrap()(T, bR, C, bC, D, bD)
}

pub unsafe fn FLA_UDdate_UT_inc_solve_check(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_inc_solve_check.unwrap()(R, bR, x)
}

pub unsafe fn FLA_CAQR_UT_inc_check(
    p: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_CAQR_UT_inc_check.unwrap()(p, A, ATW, R, RTW)
}

pub unsafe fn FLA_Apply_QUD_UT_inc_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_inc_check.unwrap()(
        side, trans, direct, storev, T, W, R, U, C, V, D,
    )
}

pub unsafe fn FLA_Apply_H2_UT_check(
    side: FLA_Side,
    tau: FLA_Obj,
    u2: FLA_Obj,
    a1t: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_check.unwrap()(side, tau, u2, a1t, A2)
}

pub unsafe fn FLA_Apply_HUD_UT_check(
    side: FLA_Side,
    tau: FLA_Obj,
    w12t: FLA_Obj,
    u2: FLA_Obj,
    v2: FLA_Obj,
    r12t: FLA_Obj,
    C2: FLA_Obj,
    D2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_check.unwrap()(side, tau, w12t, u2, v2, r12t, C2, D2)
}

pub unsafe fn FLA_Accum_T_UT_check(
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    tau: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_check.unwrap()(direct, storev, A, tau, T)
}

pub unsafe fn FLA_Tevd_compute_scaling_check(d: FLA_Obj, e: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tevd_compute_scaling_check.unwrap()(d, e, sigma)
}

pub unsafe fn FLA_Hevd_compute_scaling_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    sigma: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevd_compute_scaling_check.unwrap()(uplo, A, sigma)
}

pub unsafe fn FLA_Hevd_check(
    jobz: FLA_Evd_type,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    l: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevd_check.unwrap()(jobz, uplo, A, l)
}

pub unsafe fn FLA_Hevdd_check(
    jobz: FLA_Evd_type,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    l: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevdd_check.unwrap()(jobz, uplo, A, l)
}

pub unsafe fn FLA_Hevdr_check(
    jobz: FLA_Evd_type,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    l: FLA_Obj,
    Z: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hevdr_check.unwrap()(jobz, uplo, A, l, Z)
}

pub unsafe fn FLA_Bsvd_check(
    uplo: FLA_Uplo,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    jobu: FLA_Svd_type,
    U: FLA_Obj,
    jobv: FLA_Svd_type,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_check.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V)
}

pub unsafe fn FLA_Bsvd_ext_check(
    uplo: FLA_Uplo,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    jobu: FLA_Svd_type,
    U: FLA_Obj,
    jobv: FLA_Svd_type,
    V: FLA_Obj,
    apply_Uh2C: FLA_Bool,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext_check.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V, apply_Uh2C, C)
}

pub unsafe fn FLA_Bsvd_compute_scaling_check(d: FLA_Obj, e: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_scaling_check.unwrap()(d, e, sigma)
}

pub unsafe fn FLA_Svd_compute_scaling_check(A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Svd_compute_scaling_check.unwrap()(A, sigma)
}

pub unsafe fn FLA_Svd_check(
    jobu: FLA_Svd_type,
    jobv: FLA_Svd_type,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svd_check.unwrap()(jobu, jobv, A, s, U, V)
}

pub unsafe fn FLA_Svd_ext_check(
    jobu: FLA_Svd_type,
    transu: FLA_Trans,
    jobv: FLA_Svd_type,
    transv: FLA_Trans,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svd_ext_check.unwrap()(jobu, transu, jobv, transv, A, s, U, V)
}

pub unsafe fn FLA_Svdd_check(
    jobz: FLA_Svd_type,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svdd_check.unwrap()(jobz, A, s, U, V)
}

pub unsafe fn FLA_Chol_internal_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    cntl: *mut fla_chol_t,
) -> FLA_Error {
    dyload_lib().FLA_Chol_internal_check.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_LU_nopiv_internal_check(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_internal_check.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_internal_check(
    uplo: FLA_Uplo,
    diag: FLA_Diag,
    A: FLA_Obj,
    cntl: *mut fla_trinv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_internal_check.unwrap()(uplo, diag, A, cntl)
}

pub unsafe fn FLA_Ttmm_internal_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    cntl: *mut fla_ttmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_internal_check.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_SPDinv_internal_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    cntl: *mut fla_spdinv_t,
) -> FLA_Error {
    dyload_lib().FLA_SPDinv_internal_check.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_Sylv_internal_check(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_internal_check.unwrap()(transa, transb, isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_internal_check(
    trans: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_internal_check.unwrap()(trans, isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_QR_UT_internal_check(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_internal_check.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_copy_internal_check(
    A: FLA_Obj,
    T: FLA_Obj,
    U: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_copy_internal_check.unwrap()(A, T, U, cntl)
}

pub unsafe fn FLA_QR2_UT_internal_check(
    B: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_qr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_internal_check.unwrap()(B, D, T, cntl)
}

pub unsafe fn FLA_CAQR2_UT_internal_check(
    B: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_caqr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_internal_check.unwrap()(B, D, T, cntl)
}

pub unsafe fn FLA_LQ_UT_internal_check(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_internal_check.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_Hess_UT_internal_check(
    A: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_hessut_t,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_internal_check.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_Tridiag_UT_internal_check(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_tridiagut_t,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_internal_check.unwrap()(uplo, A, T, cntl)
}

pub unsafe fn FLA_Bidiag_UT_internal_check(
    A: FLA_Obj,
    TU: FLA_Obj,
    TV: FLA_Obj,
    cntl: *mut fla_bidiagut_t,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_internal_check.unwrap()(A, TU, TV, cntl)
}

pub unsafe fn FLA_UDdate_UT_internal_check(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_uddateut_t,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_internal_check.unwrap()(R, C, D, T, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_internal_check.unwrap()(
        side, trans, direct, storev, A, T, W, B, cntl,
    )
}

pub unsafe fn FLA_Apply_Q2_UT_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_internal_check.unwrap()(
        side, trans, direct, storev, D, T, W, C, E, cntl,
    )
}

pub unsafe fn FLA_Apply_CAQ2_UT_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_internal_check.unwrap()(
        side, trans, direct, storev, D, T, W, C, E, cntl,
    )
}

pub unsafe fn FLA_Apply_QUD_UT_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_internal_check.unwrap()(
        side, trans, direct, storev, T, W, R, U, C, V, D, cntl,
    )
}

pub unsafe fn FLA_Apply_Q_UT_inc_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_internal_check.unwrap()(
        side, trans, direct, storev, A, TW, W1, B, cntl,
    )
}

pub unsafe fn FLA_Apply_CAQ_UT_inc_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    R: FLA_Obj,
    TW: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apcaqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ_UT_inc_internal_check.unwrap()(
        side, trans, direct, storev, R, TW, W, B, cntl,
    )
}

pub unsafe fn FLA_Apply_QUD_UT_inc_internal_check(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_inc_internal_check.unwrap()(
        side, trans, direct, storev, T, W, R, U, C, V, D, cntl,
    )
}

pub unsafe fn FLA_Eig_gest_internal_check(
    inv: FLA_Inv,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_internal_check.unwrap()(inv, uplo, A, Y, B, cntl)
}

pub unsafe fn FLA_Axpy_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_blk_var1.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpy_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_blk_var2.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpy_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_blk_var3.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpy_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_blk_var4.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpy_internal(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpy_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpy_internal.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_n_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_n_blk_var1.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_n_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_n_blk_var2.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_n_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_n_blk_var3.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_n_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_n_blk_var4.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_t_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_t_blk_var1.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_t_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_t_blk_var2.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_t_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_t_blk_var3.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_t_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_t_blk_var4.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_c_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_c_blk_var1.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_c_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_c_blk_var2.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_c_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_c_blk_var3.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_c_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_c_blk_var4.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_h_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_h_blk_var1.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_h_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_h_blk_var2.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_h_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_h_blk_var3.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_h_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_h_blk_var4.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_internal(
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_internal.unwrap()(trans, alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_n(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_n.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_t(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_t.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_c(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_c.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Axpyt_h(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_axpyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Axpyt_h.unwrap()(alpha, A, B, cntl)
}

pub unsafe fn FLA_Copy_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copy_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copy_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copy_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copy_internal(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
    dyload_lib().FLA_Copy_internal.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_n_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_n_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_n_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_n_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_n_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_n_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_n_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_n_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_t_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_t_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_t_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_t_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_t_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_t_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_t_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_t_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_c_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_c_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_c_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_c_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_c_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_c_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_c_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_c_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_h_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_h_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_h_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_h_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_h_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_h_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_h_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_h_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_internal(
    trans: FLA_Trans,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_copyt_t,
) -> FLA_Error {
    dyload_lib().FLA_Copyt_internal.unwrap()(trans, A, B, cntl)
}

pub unsafe fn FLA_Copyt_n(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_n.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_t(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_t.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_c(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_c.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyt_h(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
    dyload_lib().FLA_Copyt_h.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_l_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_l_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_l_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_l_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_l_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_l_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_l_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_l_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_u_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_u_blk_var1.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_u_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_u_blk_var2.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_u_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_u_blk_var3.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_u_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_u_blk_var4.unwrap()(A, B, cntl)
}

pub unsafe fn FLASH_Copyr(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Copyr.unwrap()(uplo, A, B)
}

pub unsafe fn FLA_Copyr_internal(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_copyr_t,
) -> FLA_Error {
    dyload_lib().FLA_Copyr_internal.unwrap()(uplo, A, B, cntl)
}

pub unsafe fn FLA_Copyr_l(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_l.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Copyr_u(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
    dyload_lib().FLA_Copyr_u.unwrap()(A, B, cntl)
}

pub unsafe fn FLA_Scal_blk_var1(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
    dyload_lib().FLA_Scal_blk_var1.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scal_blk_var2(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
    dyload_lib().FLA_Scal_blk_var2.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scal_blk_var3(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
    dyload_lib().FLA_Scal_blk_var3.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scal_blk_var4(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
    dyload_lib().FLA_Scal_blk_var4.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scal_internal(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
    dyload_lib().FLA_Scal_internal.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_l_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_l_blk_var1.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_l_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_l_blk_var2.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_l_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_l_blk_var3.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_l_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_l_blk_var4.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_u_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_u_blk_var1.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_u_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_u_blk_var2.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_u_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_u_blk_var3.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_u_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_u_blk_var4.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_internal(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_scalr_t,
) -> FLA_Error {
    dyload_lib().FLA_Scalr_internal.unwrap()(uplo, alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_l(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
    dyload_lib().FLA_Scalr_l.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Scalr_u(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
    dyload_lib().FLA_Scalr_u.unwrap()(alpha, A, cntl)
}

pub unsafe fn FLA_Gemv_h_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_h_blk_var1.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_h_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_h_blk_var2.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_h_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_h_blk_var5.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_h_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_h_blk_var6.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_n_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_n_blk_var1.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_n_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_n_blk_var2.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_n_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_n_blk_var5.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_n_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_n_blk_var6.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_t_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_t_blk_var1.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_t_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_t_blk_var2.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_t_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_t_blk_var5.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_t_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_t_blk_var6.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_internal(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_internal.unwrap()(transa, alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_h(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_h.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_n(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_n.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Gemv_t(
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    cntl: *mut fla_gemv_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemv_t.unwrap()(alpha, A, x, beta, y, cntl)
}

pub unsafe fn FLA_Trsv_lc_blk_var1(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lc_blk_var1.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_lc_blk_var2(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lc_blk_var2.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ln_blk_var1(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ln_blk_var1.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ln_blk_var2(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ln_blk_var2.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_lt_blk_var1(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lt_blk_var1.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_lt_blk_var2(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lt_blk_var2.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_uc_blk_var1(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_uc_blk_var1.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_uc_blk_var2(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_uc_blk_var2.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_un_blk_var1(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_un_blk_var1.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_un_blk_var2(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_un_blk_var2.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ut_blk_var1(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ut_blk_var1.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ut_blk_var2(
    diagA: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ut_blk_var2.unwrap()(diagA, A, x, cntl)
}

pub unsafe fn FLA_Trsv_internal(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_internal.unwrap()(uplo, transa, diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_lc(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lc.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ln(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ln.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_lt(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_lt.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_uc(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_uc.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_un(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_un.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Trsv_ut(
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
    cntl: *mut fla_trsv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsv_ut.unwrap()(diag, A, x, cntl)
}

pub unsafe fn FLA_Gemm_cc_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cc_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cc_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cc_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cc_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cc_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ch_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ch_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ch_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ch_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ch_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ch_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cn_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cn_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cn_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cn_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cn_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_cn_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ct_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ct_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ct_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ct_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ct_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ct_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hc_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hc_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hc_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hc_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hc_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hc_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hh_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hh_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hh_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hh_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hh_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hh_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hn_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hn_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hn_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hn_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hn_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_hn_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ht_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ht_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ht_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ht_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ht_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_ht_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nc_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nc_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nc_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nc_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nc_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nc_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nh_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nh_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nh_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nh_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nh_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nh_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nn_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nn_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nn_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nn_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nn_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nn_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nt_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nt_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nt_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nt_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nt_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_nt_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tc_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tc_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tc_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tc_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tc_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tc_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_th_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_th_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_th_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_th_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_th_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_th_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tn_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tn_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tn_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tn_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tn_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tn_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tt_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tt_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tt_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tt_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tt_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_tt_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Gemm_internal(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_internal.unwrap()(transa, transb, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cc(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cc.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ch(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ch.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_cn(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_cn.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ct(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ct.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hc(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hc.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hh(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hh.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_hn(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_hn.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_ht(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_ht.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nc(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nc.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nh(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nh.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nn(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nn.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_nt(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_nt.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tc(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tc.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_th(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_th.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tn(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tn.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Gemm_tt(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Gemm_tt.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ll_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_lu_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_rl_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_ru_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Hemm_internal(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_internal.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ll(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ll.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_lu(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_lu.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_rl(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_rl.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Hemm_ru(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_hemm_t,
) -> FLA_Error {
    dyload_lib().FLA_Hemm_ru.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_lh_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_lh_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_lh_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_lh_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_lh_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_ln_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_ln_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_ln_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_ln_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_ln_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_ln_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_uh_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_uh_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_uh_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_uh_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_uh_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_uh_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_un_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_un_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_un_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_un_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_un_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_un_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Herk_internal(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_internal.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_lh(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_lh.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_ln(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_ln.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_uh(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_uh.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Herk_un(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_herk_t,
) -> FLA_Error {
    dyload_lib().FLA_Herk_un.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_lh_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_ln_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_uh_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_un_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Her2k_internal(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_internal.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_lh(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_lh.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_ln(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_ln.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_uh(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_uh.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Her2k_un(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_her2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Her2k_un.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ll_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_lu_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_rl_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_ru_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Symm_internal(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_internal.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ll(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ll.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_lu(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_lu.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_rl(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_rl.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Symm_ru(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_symm_t,
) -> FLA_Error {
    dyload_lib().FLA_Symm_ru.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ln_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ln_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ln_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ln_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ln_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_lt_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_lt_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_lt_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_lt_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_lt_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_lt_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_un_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_un_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_un_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_un_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_un_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_un_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ut_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_blk_var1.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_blk_var2.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_blk_var3.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_blk_var4.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_blk_var5.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_blk_var6.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_unb_var1.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ut_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_unb_var2.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ut_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_unb_var3.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ut_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_unb_var4.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ut_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_unb_var5.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_ut_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut_unb_var6.unwrap()(alpha, A, beta, C)
}

pub unsafe fn FLA_Syrk_internal(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_internal.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ln(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ln.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_lt(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_lt.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_un(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_un.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syrk_ut(
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syrk_t,
) -> FLA_Error {
    dyload_lib().FLA_Syrk_ut.unwrap()(alpha, A, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ln_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_lt_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_un_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_blk_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_blk_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut_unb_var1(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var1.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var2(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var2.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var3(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var3.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var4(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var4.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var5(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var5.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var6(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var6.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var7(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var7.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var8(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var8.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var9(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var9.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_ut_unb_var10(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut_unb_var10.unwrap()(alpha, A, B, beta, C)
}

pub unsafe fn FLA_Syr2k_internal(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_internal.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ln(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ln.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_lt(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_lt.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_un(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_un.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Syr2k_ut(
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
    cntl: *mut fla_syr2k_t,
) -> FLA_Error {
    dyload_lib().FLA_Syr2k_ut.unwrap()(alpha, A, B, beta, C, cntl)
}

pub unsafe fn FLA_Trmm_llc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lln_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lln_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lln_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lln_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lln_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lln_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lln_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lln_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llt_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llt_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llt_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llt_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llt_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llt_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llt_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_llt_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_luh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lun_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lun_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lun_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lun_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lun_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lun_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lun_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lun_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lut_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lut_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lut_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lut_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lut_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lut_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lut_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_lut_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rln_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rln_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rln_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rln_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rln_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rln_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rln_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rln_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlt_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlt_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlt_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlt_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlt_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlt_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlt_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rlt_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_ruh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_run_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_run_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_run_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_run_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_run_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_run_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_run_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_run_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rut_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rut_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rut_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rut_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rut_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rut_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rut_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_rut_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trmm_internal(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_internal.unwrap()(side, uplo, transa, diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lln(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lln.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_llt(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_llt.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_luh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_luh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lun(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lun.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_lut(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_lut.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rln(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rln.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rlt(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rlt.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_ruh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_ruh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_run(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_run.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trmm_rut(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trmm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trmm_rut.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lln_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lln_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lln_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lln_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lln_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lln_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lln_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lln_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llt_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llt_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llt_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llt_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llt_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llt_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llt_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_llt_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_luh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lun_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lun_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lun_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lun_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lun_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lun_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lun_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lun_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lut_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lut_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lut_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lut_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lut_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lut_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lut_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_lut_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rln_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rln_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rln_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rln_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rln_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rln_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rln_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rln_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlt_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlt_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlt_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlt_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlt_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlt_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlt_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rlt_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruc_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruc_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruc_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruc_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruc_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruc_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruc_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruc_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruh_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruh_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruh_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruh_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruh_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruh_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruh_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_ruh_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_run_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_run_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_run_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_run_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_run_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_run_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_run_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_run_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rut_blk_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rut_blk_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rut_blk_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rut_blk_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rut_unb_var1(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_unb_var1.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rut_unb_var2(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_unb_var2.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rut_unb_var3(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_unb_var3.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_rut_unb_var4(
    diagA: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut_unb_var4.unwrap()(diagA, alpha, A, B)
}

pub unsafe fn FLA_Trsm_internal(
    side: FLA_Side,
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_internal.unwrap()(side, uplo, transa, diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lln(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lln.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_llt(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_llt.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_luh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_luh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lun(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lun.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_lut(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_lut.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rln(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rln.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rlt(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rlt.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruc(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruc.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_ruh(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_ruh.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_run(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_run.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Trsm_rut(
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLA_Trsm_rut.unwrap()(diag, alpha, A, B, cntl)
}

pub unsafe fn FLA_Chol_l_blk_var1(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_l_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_l_blk_var2(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_l_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_l_blk_var3(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_l_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_l_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Chol_l_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Chol_l_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Chol_l_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Chol_l_ops_var1(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_l_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opd_var1(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Chol_l_ops_var2(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_l_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opd_var2(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Chol_l_ops_var3(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_l_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opd_var3(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_l_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_l_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_blk_var1(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_u_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_u_blk_var2(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_u_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_u_blk_var3(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_u_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_u_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_ops_var1(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_u_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opd_var1(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_ops_var2(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_u_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opd_var2(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Chol_u_ops_var3(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_u_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opd_var3(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_u_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Chol_u_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Chol_internal(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_internal.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_Chol_l(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_l.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_u(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
    dyload_lib().FLA_Chol_u.unwrap()(A, cntl)
}

pub unsafe fn FLA_Chol_solve(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Chol_solve.unwrap()(uplo, A, B, X)
}

pub unsafe fn FLASH_Chol_solve(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Chol_solve.unwrap()(uplo, A, B, X)
}

pub unsafe fn FLA_LU_nopiv_blk_var1(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_nopiv_blk_var2(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_nopiv_blk_var3(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_nopiv_blk_var4(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_blk_var4.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_nopiv_blk_var5(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_blk_var5.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_nopiv_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_unb_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_unb_var4.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_unb_var5(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_unb_var5.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_ops_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opd_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opc_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opz_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_ops_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_ops_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opd_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opd_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opc_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opc_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opz_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opz_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_ops_var3(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_ops_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opd_var3(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opd_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opc_var3(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opc_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opz_var3(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opz_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opt_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opt_var4.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_ops_var4(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_ops_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opd_var4(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opd_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opc_var4(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opc_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opz_var4(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opz_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opt_var5(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opt_var5.unwrap()(A)
}

pub unsafe fn FLA_LU_nopiv_ops_var5(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_ops_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opd_var5(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opd_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opc_var5(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opc_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_opz_var5(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_opz_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_LU_nopiv_internal(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_internal.unwrap()(A, cntl)
}

pub unsafe fn FLA_LU_nopiv_solve(A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_nopiv_solve.unwrap()(A, B, X)
}

pub unsafe fn FLASH_LU_nopiv_solve(A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_nopiv_solve.unwrap()(A, B, X)
}

pub unsafe fn FLA_LU_piv_blk_var3(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_piv_blk_var3.unwrap()(A, p, cntl)
}

pub unsafe fn FLA_LU_piv_blk_var4(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_piv_blk_var4.unwrap()(A, p, cntl)
}

pub unsafe fn FLA_LU_piv_blk_var5(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_piv_blk_var5.unwrap()(A, p, cntl)
}

pub unsafe fn FLA_LU_piv_unb_var3(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_unb_var3.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_unb_var3b(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_unb_var3b.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_unb_var4(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_unb_var4.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_unb_var5(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_unb_var5.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_opt_var3(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opt_var3.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_ops_var3(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_ops_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opd_var3(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opd_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opc_var3(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opc_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opz_var3(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opz_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opt_var4(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opt_var4.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_ops_var4(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_ops_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opd_var4(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opd_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opc_var4(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opc_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opz_var4(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opz_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opt_var5(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opt_var5.unwrap()(A, p)
}

pub unsafe fn FLA_LU_piv_ops_var5(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_ops_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opd_var5(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opd_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opc_var5(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opc_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_opz_var5(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_p: *mut c_int,
    inc_p: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LU_piv_opz_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
}

pub unsafe fn FLA_LU_piv_internal(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
    dyload_lib().FLA_LU_piv_internal.unwrap()(A, p, cntl)
}

pub unsafe fn FLA_LU_piv_solve(A: FLA_Obj, p: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LU_piv_solve.unwrap()(A, p, B, X)
}

pub unsafe fn FLASH_LU_piv_solve(A: FLA_Obj, p: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_piv_solve.unwrap()(A, p, B, X)
}

pub unsafe fn FLA_SA_Apply_pivots(C: FLA_Obj, E: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_SA_Apply_pivots.unwrap()(C, E, p)
}

pub unsafe fn FLA_SA_LU_blk(
    U: FLA_Obj,
    D: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    nb_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_SA_LU_blk.unwrap()(U, D, p, L, nb_alg)
}

pub unsafe fn FLA_SA_LU_unb(U: FLA_Obj, D: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_SA_LU_unb.unwrap()(U, D, p, L)
}

pub unsafe fn FLA_SA_FS_blk(
    L: FLA_Obj,
    D: FLA_Obj,
    p: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    nb_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_SA_FS_blk.unwrap()(L, D, p, C, E, nb_alg)
}

pub unsafe fn FLASH_LU_incpiv_var1(
    A: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    nb_alg: dim_t,
    cntl: *mut fla_lu_t,
) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv_var1.unwrap()(A, p, L, nb_alg, cntl)
}

pub unsafe fn FLASH_LU_incpiv_var2(
    A: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    U: FLA_Obj,
    nb_alg: dim_t,
    cntl: *mut fla_lu_t,
) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv_var2.unwrap()(A, p, L, U, nb_alg, cntl)
}

pub unsafe fn FLASH_Trsm_piv(
    A: FLA_Obj,
    B: FLA_Obj,
    p: FLA_Obj,
    cntl: *mut fla_trsm_t,
) -> FLA_Error {
    dyload_lib().FLASH_Trsm_piv.unwrap()(A, B, p, cntl)
}

pub unsafe fn FLASH_SA_LU(
    B: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    E: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    nb_alg: dim_t,
    cntl: *mut fla_lu_t,
) -> FLA_Error {
    dyload_lib().FLASH_SA_LU.unwrap()(B, C, D, E, p, L, nb_alg, cntl)
}

pub unsafe fn FLASH_SA_FS(
    L: FLA_Obj,
    D: FLA_Obj,
    p: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    nb_alg: dim_t,
    cntl: *mut fla_gemm_t,
) -> FLA_Error {
    dyload_lib().FLASH_SA_FS.unwrap()(L, D, p, C, E, nb_alg, cntl)
}

pub unsafe fn FLASH_FS_incpiv_aux1(
    A: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    b: FLA_Obj,
    nb_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_FS_incpiv_aux1.unwrap()(A, p, L, b, nb_alg)
}

pub unsafe fn FLASH_FS_incpiv_aux2(
    L: FLA_Obj,
    D: FLA_Obj,
    p: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    nb_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_FS_incpiv_aux2.unwrap()(L, D, p, C, E, nb_alg)
}

pub unsafe fn FLASH_LU_incpiv_create_hier_matrices(
    A_flat: FLA_Obj,
    depth: dim_t,
    b_flash: *mut dim_t,
    b_alg: dim_t,
    A: *mut FLA_Obj,
    p: *mut FLA_Obj,
    L: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv_create_hier_matrices.unwrap()(
        A_flat, depth, b_flash, b_alg, A, p, L,
    )
}

pub unsafe fn FLASH_LU_incpiv_determine_alg_blocksize(A: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_LU_incpiv_determine_alg_blocksize.unwrap()(A)
}

pub unsafe fn FLASH_LU_incpiv_noopt(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv_noopt.unwrap()(A, p, L)
}

pub unsafe fn FLASH_LU_incpiv_opt1(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv_opt1.unwrap()(A, p, L)
}

pub unsafe fn FLASH_LU_incpiv_solve(
    A: FLA_Obj,
    p: FLA_Obj,
    L: FLA_Obj,
    B: FLA_Obj,
    X: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv_solve.unwrap()(A, p, L, B, X)
}

pub unsafe fn FLA_QR_UT_unb_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_unb_var1.unwrap()(A, t)
}

pub unsafe fn FLA_QR_UT_blk_var1(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_blk_var1.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_opt_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opt_var1.unwrap()(A, t)
}

pub unsafe fn FLA_QR_UT_ops_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut f32,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_QR_UT_opd_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut f64,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_QR_UT_opc_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut scomplex,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_QR_UT_opz_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut dcomplex,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_QR_UT_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_unb_var2.unwrap()(A, T)
}

pub unsafe fn FLA_QR_UT_blk_var2(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_blk_var2.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opt_var2.unwrap()(A, T)
}

pub unsafe fn FLA_QR_UT_ops_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_ops_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_QR_UT_opd_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opd_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_QR_UT_opc_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opc_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_QR_UT_opz_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_opz_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_QR_UT_blk_var3(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_blk_var3.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_internal(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
    dyload_lib().FLA_QR_UT_internal.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_QR_UT_copy_internal(
    A: FLA_Obj,
    T: FLA_Obj,
    U: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_copy_internal.unwrap()(A, T, U, cntl)
}

pub unsafe fn FLA_QR_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_create_T.unwrap()(A, T)
}

pub unsafe fn FLA_QR_UT_recover_tau(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_recover_tau.unwrap()(T, tau)
}

pub unsafe fn FLA_QR_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_solve.unwrap()(A, T, B, X)
}

pub unsafe fn FLASH_QR_UT(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR_UT.unwrap()(A, TW)
}

pub unsafe fn FLASH_QR_UT_create_hier_matrices(
    A_flat: FLA_Obj,
    depth: dim_t,
    b_flash: *mut dim_t,
    A: *mut FLA_Obj,
    TW: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_create_hier_matrices.unwrap()(A_flat, depth, b_flash, A, TW)
}

pub unsafe fn FLASH_QR_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_solve.unwrap()(A, T, B, X)
}

pub unsafe fn FLA_QR_UT_form_Q(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q.unwrap()(A, T, Q)
}

pub unsafe fn FLA_QR_UT_form_Q_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_blk_var1.unwrap()(A, T, W)
}

pub unsafe fn FLA_QR_UT_form_Q_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_opt_var1.unwrap()(A, T)
}

pub unsafe fn FLA_QR_UT_form_Q_ops_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_ops_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR_UT_form_Q_opd_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_opd_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR_UT_form_Q_opc_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_opc_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR_UT_form_Q_opz_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_form_Q_opz_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR_UT_piv_unb_var1(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_unb_var1.unwrap()(A, T, w, p)
}

pub unsafe fn FLA_QR_UT_piv_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    w: FLA_Obj,
    p: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_blk_var1.unwrap()(A, T, w, p, cntl)
}

pub unsafe fn FLA_QR_UT_piv_unb_var2(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_unb_var2.unwrap()(A, T, w, p)
}

pub unsafe fn FLA_QR_UT_piv_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    w: FLA_Obj,
    p: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_blk_var2.unwrap()(A, T, w, p, cntl)
}

pub unsafe fn FLA_Apply_H2_UT_piv_row(
    tau: FLA_Obj,
    a1t: FLA_Obj,
    u1t: FLA_Obj,
    W: FLA_Obj,
    u2: FLA_Obj,
    A2: FLA_Obj,
    U2: FLA_Obj,
    w1t: FLA_Obj,
    vt: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_piv_row.unwrap()(tau, a1t, u1t, W, u2, A2, U2, w1t, vt)
}

pub unsafe fn FLA_QR_UT_piv_internal(
    A: FLA_Obj,
    T: FLA_Obj,
    w: FLA_Obj,
    p: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_internal.unwrap()(A, T, w, p, cntl)
}

pub unsafe fn FLA_QR_UT_piv_colnorm(alpha: FLA_Obj, A: FLA_Obj, b: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_colnorm.unwrap()(alpha, A, b)
}

pub unsafe fn FLA_QR_UT_piv_check(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_check.unwrap()(A, T, w, p)
}

pub unsafe fn FLA_QR_UT_piv_internal_check(
    A: FLA_Obj,
    T: FLA_Obj,
    w: FLA_Obj,
    p: FLA_Obj,
    cntl: *mut fla_qrut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_internal_check.unwrap()(A, T, w, p, cntl)
}

pub unsafe fn FLA_QR_UT_piv_colnorm_check(alpha: FLA_Obj, A: FLA_Obj, b: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR_UT_piv_colnorm_check.unwrap()(alpha, A, b)
}

pub unsafe fn FLA_QR2_UT_blk_var1(
    U: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_qr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_blk_var1.unwrap()(U, D, T, cntl)
}

pub unsafe fn FLA_QR2_UT_blk_var2(
    U: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_qr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_blk_var2.unwrap()(U, D, T, cntl)
}

pub unsafe fn FLA_QR2_UT_unb_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_unb_var1.unwrap()(U, D, T)
}

pub unsafe fn FLA_QR2_UT_opt_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_opt_var1.unwrap()(U, D, T)
}

pub unsafe fn FLA_QR2_UT_ops_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut f32,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_ops_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR2_UT_opd_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut f64,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_opd_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR2_UT_opc_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut scomplex,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_opc_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_QR2_UT_opz_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut dcomplex,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_opz_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLASH_QR2_UT(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR2_UT.unwrap()(U, D, T)
}

pub unsafe fn FLA_QR2_UT_internal(
    U: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_qr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_QR2_UT_internal.unwrap()(U, D, T, cntl)
}

pub unsafe fn FLASH_QR_UT_inc(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_inc.unwrap()(A, TW)
}

pub unsafe fn FLASH_QR_UT_inc_noopt(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_inc_noopt.unwrap()(A, TW)
}

pub unsafe fn FLASH_QR_UT_inc_opt1(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_inc_opt1.unwrap()(A, TW)
}

pub unsafe fn FLA_QR_UT_inc_blk_var1(
    A: FLA_Obj,
    TW: FLA_Obj,
    cntl: *mut fla_qrutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_inc_blk_var1.unwrap()(A, TW, cntl)
}

pub unsafe fn FLA_QR_UT_inc_blk_var2(
    A: FLA_Obj,
    TW: FLA_Obj,
    U: FLA_Obj,
    cntl: *mut fla_qrutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_QR_UT_inc_blk_var2.unwrap()(A, TW, U, cntl)
}

pub unsafe fn FLASH_QR_UT_inc_create_hier_matrices(
    A_flat: FLA_Obj,
    depth: dim_t,
    b_flash: *mut dim_t,
    b_alg: dim_t,
    A: *mut FLA_Obj,
    TW: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_inc_create_hier_matrices.unwrap()(A_flat, depth, b_flash, b_alg, A, TW)
}

pub unsafe fn FLASH_QR_UT_inc_determine_alg_blocksize(A: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_QR_UT_inc_determine_alg_blocksize.unwrap()(A)
}

pub unsafe fn FLASH_QR_UT_inc_solve(A: FLA_Obj, TW: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_QR_UT_inc_solve.unwrap()(A, TW, B, X)
}

pub unsafe fn FLA_LQ_UT_unb_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_unb_var1.unwrap()(A, t)
}

pub unsafe fn FLA_LQ_UT_blk_var1(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_blk_var1.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_LQ_UT_opt_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opt_var1.unwrap()(A, t)
}

pub unsafe fn FLA_LQ_UT_ops_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut f32,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_LQ_UT_opd_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut f64,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_LQ_UT_opc_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut scomplex,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_LQ_UT_opz_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    t: *mut dcomplex,
    inc_t: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
}

pub unsafe fn FLA_LQ_UT_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_unb_var2.unwrap()(A, T)
}

pub unsafe fn FLA_LQ_UT_blk_var2(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_blk_var2.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_LQ_UT_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opt_var2.unwrap()(A, T)
}

pub unsafe fn FLA_LQ_UT_ops_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_ops_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_LQ_UT_opd_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opd_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_LQ_UT_opc_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opc_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_LQ_UT_opz_var2(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_opz_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
}

pub unsafe fn FLA_LQ_UT_blk_var3(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_blk_var3.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_LQ_UT_internal(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_internal.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_LQ_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_create_T.unwrap()(A, T)
}

pub unsafe fn FLA_LQ_UT_recover_tau(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_recover_tau.unwrap()(T, tau)
}

pub unsafe fn FLA_LQ_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_solve.unwrap()(A, T, B, X)
}

pub unsafe fn FLASH_LQ_UT(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LQ_UT.unwrap()(A, TW)
}

pub unsafe fn FLASH_LQ_UT_create_hier_matrices(
    A_flat: FLA_Obj,
    depth: dim_t,
    b_flash: *mut dim_t,
    A: *mut FLA_Obj,
    TW: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_LQ_UT_create_hier_matrices.unwrap()(A_flat, depth, b_flash, A, TW)
}

pub unsafe fn FLASH_LQ_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LQ_UT_solve.unwrap()(A, T, B, X)
}

pub unsafe fn FLA_LQ_UT_form_Q(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_LQ_UT_form_Q.unwrap()(A, T, Q)
}

pub unsafe fn FLA_CAQR2_UT_blk_var1(
    U: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_caqr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_blk_var1.unwrap()(U, D, T, cntl)
}

pub unsafe fn FLA_CAQR2_UT_blk_var2(
    U: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_caqr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_blk_var2.unwrap()(U, D, T, cntl)
}

pub unsafe fn FLA_CAQR2_UT_unb_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_unb_var1.unwrap()(U, D, T)
}

pub unsafe fn FLA_CAQR2_UT_opt_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_opt_var1.unwrap()(U, D, T)
}

pub unsafe fn FLA_CAQR2_UT_ops_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut f32,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_ops_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_CAQR2_UT_opd_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut f64,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_opd_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_CAQR2_UT_opc_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut scomplex,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_opc_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_CAQR2_UT_opz_var1(
    m_UT: c_int,
    m_D: c_int,
    U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    D: *mut dcomplex,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_opz_var1.unwrap()(
        m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_CAQR2_UT_internal(
    U: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_caqr2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_CAQR2_UT_internal.unwrap()(U, D, T, cntl)
}

pub unsafe fn FLASH_CAQR_UT_inc(
    p: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_CAQR_UT_inc.unwrap()(p, A, ATW, R, RTW)
}

pub unsafe fn FLASH_CAQR_UT_inc_noopt(
    p: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_CAQR_UT_inc_noopt.unwrap()(p, A, ATW, R, RTW)
}

pub unsafe fn FLASH_CAQR_UT_inc_create_hier_matrices(
    p: dim_t,
    A_flat: FLA_Obj,
    depth: dim_t,
    b_flash: *mut dim_t,
    b_alg: dim_t,
    A: *mut FLA_Obj,
    ATW: *mut FLA_Obj,
    R: *mut FLA_Obj,
    RTW: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_CAQR_UT_inc_create_hier_matrices.unwrap()(
        p, A_flat, depth, b_flash, b_alg, A, ATW, R, RTW,
    )
}

pub unsafe fn FLASH_CAQR_UT_inc_determine_alg_blocksize(A: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_CAQR_UT_inc_determine_alg_blocksize.unwrap()(A)
}

pub unsafe fn FLASH_CAQR_UT_inc_adjust_views(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_CAQR_UT_inc_adjust_views.unwrap()(A, TW)
}

pub unsafe fn FLA_CAQR_UT_inc_init_structure(p: dim_t, nb_part: dim_t, R: FLA_Obj) {
    dyload_lib().FLA_CAQR_UT_inc_init_structure.unwrap()(p, nb_part, R)
}

pub unsafe fn FLA_CAQR_UT_inc_compute_blocks_per_part(p: dim_t, A: FLA_Obj) -> dim_t {
    dyload_lib().FLA_CAQR_UT_inc_compute_blocks_per_part.unwrap()(p, A)
}

pub unsafe fn FLA_CAQR_UT_inc_factorize_panels(
    nb_part: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_CAQR_UT_inc_factorize_panels.unwrap()(nb_part, A, ATW)
}

pub unsafe fn FLA_CAQR_UT_inc_copy_triangles(nb_part: dim_t, A: FLA_Obj, R: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_CAQR_UT_inc_copy_triangles.unwrap()(nb_part, A, R)
}

pub unsafe fn FLA_CAQR_UT_inc_blk_var1(
    R: FLA_Obj,
    TW: FLA_Obj,
    cntl: *mut fla_caqrutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_CAQR_UT_inc_blk_var1.unwrap()(R, TW, cntl)
}

pub unsafe fn FLASH_CAQR_UT_inc_solve(
    p: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
    B: FLA_Obj,
    X: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_CAQR_UT_inc_solve.unwrap()(p, A, ATW, R, RTW, B, X)
}

pub unsafe fn FLA_Hevd_ln_unb_var1(A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hevd_ln_unb_var1.unwrap()(A, l)
}

pub unsafe fn FLA_Hevd_lv_unb_var1(
    n_iter_max: dim_t,
    A: FLA_Obj,
    l: FLA_Obj,
    k_accum: dim_t,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Hevd_lv_unb_var1.unwrap()(n_iter_max, A, l, k_accum, b_alg)
}

pub unsafe fn FLA_Hevd_lv_unb_var2(
    n_iter_max: dim_t,
    A: FLA_Obj,
    l: FLA_Obj,
    k_accum: dim_t,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Hevd_lv_unb_var2.unwrap()(n_iter_max, A, l, k_accum, b_alg)
}

pub unsafe fn FLA_Hevd_compute_scaling(uplo: FLA_Uplo, A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hevd_compute_scaling.unwrap()(uplo, A, sigma)
}

pub unsafe fn FLA_Hevd(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hevd.unwrap()(jobz, uplo, A, l)
}

pub unsafe fn FLA_Tevd_iteracc_n_ops_var1(
    m_A: c_int,
    n_G: c_int,
    ijTL: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_iteracc_n_ops_var1.unwrap()(
        m_A,
        n_G,
        ijTL,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Tevd_iteracc_n_opd_var1(
    m_A: c_int,
    n_G: c_int,
    ijTL: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_iteracc_n_opd_var1.unwrap()(
        m_A,
        n_G,
        ijTL,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Tevd_eigval_n_opt_var1(
    G: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    n_iter: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_n_opt_var1.unwrap()(G, d, e, n_iter)
}

pub unsafe fn FLA_Tevd_eigval_n_ops_var1(
    m_A: c_int,
    n_G: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_n_ops_var1.unwrap()(m_A, n_G, buff_d, inc_d, buff_e, inc_e, n_iter)
}

pub unsafe fn FLA_Tevd_eigval_n_opd_var1(
    m_A: c_int,
    n_G: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_n_opd_var1.unwrap()(m_A, n_G, buff_d, inc_d, buff_e, inc_e, n_iter)
}

pub unsafe fn FLA_Tevd_francis_n_opt_var1(shift: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tevd_francis_n_opt_var1.unwrap()(shift, d, e)
}

pub unsafe fn FLA_Tevd_francis_n_ops_var1(
    m_A: c_int,
    buff_shift: *mut f32,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_francis_n_ops_var1.unwrap()(m_A, buff_shift, buff_d, inc_d, buff_e, inc_e)
}

pub unsafe fn FLA_Tevd_francis_n_opd_var1(
    m_A: c_int,
    buff_shift: *mut f64,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_francis_n_opd_var1.unwrap()(m_A, buff_shift, buff_d, inc_d, buff_e, inc_e)
}

pub unsafe fn FLA_Tevd_find_submatrix_ops(
    m_A: c_int,
    ij_begin: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    ijTL: *mut c_int,
    ijBR: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_find_submatrix_ops.unwrap()(
        m_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR,
    )
}

pub unsafe fn FLA_Tevd_find_submatrix_opd(
    m_A: c_int,
    ij_begin: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    ijTL: *mut c_int,
    ijBR: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_find_submatrix_opd.unwrap()(
        m_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR,
    )
}

pub unsafe fn FLA_Norm1_tridiag(d: FLA_Obj, e: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Norm1_tridiag.unwrap()(d, e, norm)
}

pub unsafe fn FLA_Norm1_tridiag_ops(
    m_A: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    norm: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Norm1_tridiag_ops.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, norm)
}

pub unsafe fn FLA_Norm1_tridiag_opd(
    m_A: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    norm: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Norm1_tridiag_opd.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, norm)
}

pub unsafe fn FLA_Tevd_n_opt_var1(
    n_iter_max: dim_t,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    U: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_n_opt_var1.unwrap()(n_iter_max, d, e, G, U)
}

pub unsafe fn FLA_Tevd_n_ops_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_n_ops_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
    )
}

pub unsafe fn FLA_Tevd_n_opd_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_n_opd_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
    )
}

pub unsafe fn FLA_Tevd_n_opc_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_n_opc_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
    )
}

pub unsafe fn FLA_Tevd_n_opz_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_n_opz_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
    )
}

pub unsafe fn FLA_Tevd_iteracc_v_ops_var1(
    m_A: c_int,
    n_G: c_int,
    ijTL: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_iteracc_v_ops_var1.unwrap()(
        m_A,
        n_G,
        ijTL,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        buff_G,
        rs_G,
        cs_G,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Tevd_iteracc_v_opd_var1(
    m_A: c_int,
    n_G: c_int,
    ijTL: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_iteracc_v_opd_var1.unwrap()(
        m_A,
        n_G,
        ijTL,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        buff_G,
        rs_G,
        cs_G,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Tevd_iteracc_v_ops_var3(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    ijTL: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_l: *mut f32,
    inc_l: c_int,
    buff_ls: *mut c_int,
    inc_ls: c_int,
    buff_pu: *mut f32,
    inc_pu: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_iteracc_v_ops_var3.unwrap()(
        m_A,
        m_U,
        n_G,
        ijTL,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        buff_l,
        inc_l,
        buff_ls,
        inc_ls,
        buff_pu,
        inc_pu,
        buff_G,
        rs_G,
        cs_G,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Tevd_iteracc_v_opd_var3(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    ijTL: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_l: *mut f64,
    inc_l: c_int,
    buff_ls: *mut c_int,
    inc_ls: c_int,
    buff_pu: *mut f64,
    inc_pu: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_iteracc_v_opd_var3.unwrap()(
        m_A,
        m_U,
        n_G,
        ijTL,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        buff_l,
        inc_l,
        buff_ls,
        inc_ls,
        buff_pu,
        inc_pu,
        buff_G,
        rs_G,
        cs_G,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Tevd_eigval_v_opt_var1(
    G: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    n_iter: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_v_opt_var1.unwrap()(G, d, e, n_iter)
}

pub unsafe fn FLA_Tevd_eigval_v_ops_var1(
    m_A: c_int,
    n_G: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_v_ops_var1.unwrap()(
        m_A, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, n_iter,
    )
}

pub unsafe fn FLA_Tevd_eigval_v_opd_var1(
    m_A: c_int,
    n_G: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_v_opd_var1.unwrap()(
        m_A, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, n_iter,
    )
}

pub unsafe fn FLA_Tevd_eigval_v_ops_var3(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_l: *mut f32,
    inc_l: c_int,
    buff_ls: *mut c_int,
    inc_ls: c_int,
    buff_pu: *mut f32,
    inc_pu: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_v_ops_var3.unwrap()(
        m_A, m_U, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_ls,
        inc_ls, buff_pu, inc_pu, n_iter,
    )
}

pub unsafe fn FLA_Tevd_eigval_v_opd_var3(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_l: *mut f64,
    inc_l: c_int,
    buff_ls: *mut c_int,
    inc_ls: c_int,
    buff_pu: *mut f64,
    inc_pu: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_eigval_v_opd_var3.unwrap()(
        m_A, m_U, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_ls,
        inc_ls, buff_pu, inc_pu, n_iter,
    )
}

pub unsafe fn FLA_Tevd_francis_v_opt_var1(
    shift: FLA_Obj,
    g: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_francis_v_opt_var1.unwrap()(shift, g, d, e)
}

pub unsafe fn FLA_Tevd_francis_v_ops_var1(
    m_A: c_int,
    buff_shift: *mut f32,
    buff_g: *mut scomplex,
    inc_g: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_francis_v_ops_var1.unwrap()(
        m_A, buff_shift, buff_g, inc_g, buff_d, inc_d, buff_e, inc_e,
    )
}

pub unsafe fn FLA_Tevd_francis_v_opd_var1(
    m_A: c_int,
    buff_shift: *mut f64,
    buff_g: *mut dcomplex,
    inc_g: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_francis_v_opd_var1.unwrap()(
        m_A, buff_shift, buff_g, inc_g, buff_d, inc_d, buff_e, inc_e,
    )
}

pub unsafe fn FLA_Tevd_compute_scaling_ops(
    m_A: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    sigma: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_compute_scaling_ops.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, sigma)
}

pub unsafe fn FLA_Tevd_compute_scaling_opd(
    m_A: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    sigma: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_compute_scaling_opd.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, sigma)
}

pub unsafe fn FLA_Tevd_find_perfshift_ops(
    m_d: c_int,
    m_l: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_l: *mut f32,
    inc_l: c_int,
    buff_lstat: *mut c_int,
    inc_lstat: c_int,
    buff_pu: *mut f32,
    inc_pu: c_int,
    ij_shift: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_find_perfshift_ops.unwrap()(
        m_d, m_l, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_lstat, inc_lstat, buff_pu,
        inc_pu, ij_shift,
    )
}

pub unsafe fn FLA_Tevd_find_perfshift_opd(
    m_d: c_int,
    m_l: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_l: *mut f64,
    inc_l: c_int,
    buff_lstat: *mut c_int,
    inc_lstat: c_int,
    buff_pu: *mut f64,
    inc_pu: c_int,
    ij_shift: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_find_perfshift_opd.unwrap()(
        m_d, m_l, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_lstat, inc_lstat, buff_pu,
        inc_pu, ij_shift,
    )
}

pub unsafe fn FLA_Tevd_v_opt_var1(
    n_iter_max: dim_t,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    U: FLA_Obj,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opt_var1.unwrap()(n_iter_max, d, e, G, U, b_alg)
}

pub unsafe fn FLA_Tevd_v_ops_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_ops_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U,
        cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opd_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opd_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U,
        cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opc_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opc_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U,
        cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opz_var1(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opz_var1.unwrap()(
        m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U,
        cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opt_var2(
    n_iter_max: dim_t,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    R: FLA_Obj,
    W: FLA_Obj,
    U: FLA_Obj,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opt_var2.unwrap()(n_iter_max, d, e, G, R, W, U, b_alg)
}

pub unsafe fn FLA_Tevd_v_ops_var2(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_G_extra: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_R: *mut f32,
    rs_R: c_int,
    cs_R: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_ops_var2.unwrap()(
        m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R,
        cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opd_var2(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_G_extra: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_R: *mut f64,
    rs_R: c_int,
    cs_R: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opd_var2.unwrap()(
        m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R,
        cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opc_var2(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_G_extra: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_R: *mut f32,
    rs_R: c_int,
    cs_R: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opc_var2.unwrap()(
        m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R,
        cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd_v_opz_var2(
    m_A: c_int,
    m_U: c_int,
    n_G: c_int,
    n_G_extra: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_R: *mut f64,
    rs_R: c_int,
    cs_R: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tevd_v_opz_var2.unwrap()(
        m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R,
        cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg,
    )
}

pub unsafe fn FLA_Tevd(
    jobz: FLA_Evd_type,
    U: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    l: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tevd.unwrap()(jobz, U, d, e, l)
}

pub unsafe fn FLA_Svd_ext_u_unb_var1(
    jobu: FLA_Svd_type,
    jobv: FLA_Svd_type,
    n_iter_max: dim_t,
    A: FLA_Obj,
    s: FLA_Obj,
    V: FLA_Obj,
    U: FLA_Obj,
    k_accum: dim_t,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Svd_ext_u_unb_var1.unwrap()(jobu, jobv, n_iter_max, A, s, V, U, k_accum, b_alg)
}

pub unsafe fn FLA_Svd_uv_unb_var1(
    n_iter_max: dim_t,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
    k_accum: dim_t,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Svd_uv_unb_var1.unwrap()(n_iter_max, A, s, U, V, k_accum, b_alg)
}

pub unsafe fn FLA_Svd_uv_unb_var2(
    n_iter_max: dim_t,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
    k_accum: dim_t,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Svd_uv_unb_var2.unwrap()(n_iter_max, A, s, U, V, k_accum, b_alg)
}

pub unsafe fn FLA_Svd_compute_scaling(A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Svd_compute_scaling.unwrap()(A, sigma)
}

pub unsafe fn FLA_Svd(
    jobu: FLA_Svd_type,
    jobv: FLA_Svd_type,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svd.unwrap()(jobu, jobv, A, s, U, V)
}

pub unsafe fn FLA_Svd_ext(
    jobu: FLA_Svd_type,
    transu: FLA_Trans,
    jobv: FLA_Svd_type,
    transv: FLA_Trans,
    A: FLA_Obj,
    s: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Svd_ext.unwrap()(jobu, transu, jobv, transv, A, s, U, V)
}

pub unsafe fn FLA_Bsvd_iteracc_v_ops_var1(
    m_A: c_int,
    n_GH: c_int,
    ijTL: c_int,
    tol: f32,
    thresh: f32,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_iteracc_v_ops_var1.unwrap()(
        m_A,
        n_GH,
        ijTL,
        tol,
        thresh,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        buff_G,
        rs_G,
        cs_G,
        buff_H,
        rs_H,
        cs_H,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Bsvd_iteracc_v_opd_var1(
    m_A: c_int,
    n_GH: c_int,
    ijTL: c_int,
    tol: f64,
    thresh: f64,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    n_iter_perf: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_iteracc_v_opd_var1.unwrap()(
        m_A,
        n_GH,
        ijTL,
        tol,
        thresh,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        buff_G,
        rs_G,
        cs_G,
        buff_H,
        rs_H,
        cs_H,
        n_iter_perf,
    )
}

pub unsafe fn FLA_Bsvd_sinval_v_opt_var1(
    tol: FLA_Obj,
    thresh: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    n_iter: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_sinval_v_opt_var1.unwrap()(tol, thresh, G, H, d, e, n_iter)
}

pub unsafe fn FLA_Bsvd_sinval_v_ops_var1(
    m_A: c_int,
    n_GH: c_int,
    n_iter_allowed: c_int,
    tol: f32,
    thresh: f32,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_sinval_v_ops_var1.unwrap()(
        m_A,
        n_GH,
        n_iter_allowed,
        tol,
        thresh,
        buff_G,
        rs_G,
        cs_G,
        buff_H,
        rs_H,
        cs_H,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        n_iter,
    )
}

pub unsafe fn FLA_Bsvd_sinval_v_opd_var1(
    m_A: c_int,
    n_GH: c_int,
    n_iter_allowed: c_int,
    tol: f64,
    thresh: f64,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    n_iter: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_sinval_v_opd_var1.unwrap()(
        m_A,
        n_GH,
        n_iter_allowed,
        tol,
        thresh,
        buff_G,
        rs_G,
        cs_G,
        buff_H,
        rs_H,
        cs_H,
        buff_d,
        inc_d,
        buff_e,
        inc_e,
        n_iter,
    )
}

pub unsafe fn FLA_Bsvd_francis_v_opt_var1(
    shift: FLA_Obj,
    g: FLA_Obj,
    h: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_francis_v_opt_var1.unwrap()(shift, g, h, d, e)
}

pub unsafe fn FLA_Bsvd_francis_v_ops_var1(
    m_A: c_int,
    shift: f32,
    buff_g: *mut scomplex,
    inc_g: c_int,
    buff_h: *mut scomplex,
    inc_h: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_francis_v_ops_var1.unwrap()(
        m_A, shift, buff_g, inc_g, buff_h, inc_h, buff_d, inc_d, buff_e, inc_e,
    )
}

pub unsafe fn FLA_Bsvd_francis_v_opd_var1(
    m_A: c_int,
    shift: f64,
    buff_g: *mut dcomplex,
    inc_g: c_int,
    buff_h: *mut dcomplex,
    inc_h: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_francis_v_opd_var1.unwrap()(
        m_A, shift, buff_g, inc_g, buff_h, inc_h, buff_d, inc_d, buff_e, inc_e,
    )
}

pub unsafe fn FLA_Bsvd_compute_shift(
    tol: FLA_Obj,
    sminl: FLA_Obj,
    smax: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    shift: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_shift.unwrap()(tol, sminl, smax, d, e, shift)
}

pub unsafe fn FLA_Bsvd_compute_shift_ops(
    m_A: c_int,
    tol: f32,
    sminl: f32,
    smax: f32,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    shift: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_shift_ops.unwrap()(
        m_A, tol, sminl, smax, buff_d, inc_d, buff_e, inc_e, shift,
    )
}

pub unsafe fn FLA_Bsvd_compute_shift_opd(
    m_A: c_int,
    tol: f64,
    sminl: f64,
    smax: f64,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    shift: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_shift_opd.unwrap()(
        m_A, tol, sminl, smax, buff_d, inc_d, buff_e, inc_e, shift,
    )
}

pub unsafe fn FLA_Bsvd_compute_tol_thresh(
    tolmul: FLA_Obj,
    maxit: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    tol: FLA_Obj,
    thresh: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_tol_thresh.unwrap()(tolmul, maxit, d, e, tol, thresh)
}

pub unsafe fn FLA_Bsvd_compute_tol_thresh_ops(
    m_A: c_int,
    tolmul: f32,
    maxit: f32,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    tol: *mut f32,
    thresh: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_tol_thresh_ops.unwrap()(
        m_A, tolmul, maxit, buff_d, inc_d, buff_e, inc_e, tol, thresh,
    )
}

pub unsafe fn FLA_Bsvd_compute_tol_thresh_opd(
    m_A: c_int,
    tolmul: f64,
    maxit: f64,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    tol: *mut f64,
    thresh: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_compute_tol_thresh_opd.unwrap()(
        m_A, tolmul, maxit, buff_d, inc_d, buff_e, inc_e, tol, thresh,
    )
}

pub unsafe fn FLA_Bsvd_find_converged(
    tol: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
    sminl: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_converged.unwrap()(tol, d, e, sminl)
}

pub unsafe fn FLA_Bsvd_find_converged_ops(
    m_A: c_int,
    tol: f32,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    sminl: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_converged_ops.unwrap()(m_A, tol, buff_d, inc_d, buff_e, inc_e, sminl)
}

pub unsafe fn FLA_Bsvd_find_converged_opd(
    m_A: c_int,
    tol: f64,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    sminl: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_converged_opd.unwrap()(m_A, tol, buff_d, inc_d, buff_e, inc_e, sminl)
}

pub unsafe fn FLA_Bsvd_find_max_min(
    d: FLA_Obj,
    e: FLA_Obj,
    smax: FLA_Obj,
    smin: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_max_min.unwrap()(d, e, smax, smin)
}

pub unsafe fn FLA_Bsvd_find_max_min_ops(
    m_A: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    smax: *mut f32,
    smin: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_max_min_ops.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, smax, smin)
}

pub unsafe fn FLA_Bsvd_find_max_min_opd(
    m_A: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    smax: *mut f64,
    smin: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_max_min_opd.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, smax, smin)
}

pub unsafe fn FLA_Bsvd_find_submatrix_ops(
    mn_A: c_int,
    ij_begin: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    ijTL: *mut c_int,
    ijBR: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_submatrix_ops.unwrap()(
        mn_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR,
    )
}

pub unsafe fn FLA_Bsvd_find_submatrix_opd(
    mn_A: c_int,
    ij_begin: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    ijTL: *mut c_int,
    ijBR: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_find_submatrix_opd.unwrap()(
        mn_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR,
    )
}

pub unsafe fn FLA_Bsvd_v_opt_var1(
    n_iter_max: dim_t,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opt_var1.unwrap()(n_iter_max, d, e, G, H, U, V, b_alg)
}

pub unsafe fn FLA_Bsvd_v_ops_var1(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_ops_var1.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opd_var1(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opd_var1.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opc_var1(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opc_var1.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opz_var1(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opz_var1.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opt_var2(
    n_iter_max: dim_t,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    RG: FLA_Obj,
    RH: FLA_Obj,
    W: FLA_Obj,
    U: FLA_Obj,
    V: FLA_Obj,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opt_var2.unwrap()(n_iter_max, d, e, G, H, RG, RH, W, U, V, b_alg)
}

pub unsafe fn FLA_Bsvd_v_ops_var2(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_RG: *mut f32,
    rs_RG: c_int,
    cs_RG: c_int,
    buff_RH: *mut f32,
    rs_RH: c_int,
    cs_RH: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_ops_var2.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W,
        buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opd_var2(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_RG: *mut f64,
    rs_RG: c_int,
    cs_RG: c_int,
    buff_RH: *mut f64,
    rs_RH: c_int,
    cs_RH: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opd_var2.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W,
        buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opc_var2(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_RG: *mut f32,
    rs_RG: c_int,
    cs_RG: c_int,
    buff_RH: *mut f32,
    rs_RH: c_int,
    cs_RH: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opc_var2.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W,
        buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_v_opz_var2(
    min_m_n: c_int,
    m_U: c_int,
    m_V: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_RG: *mut f64,
    rs_RG: c_int,
    cs_RG: c_int,
    buff_RH: *mut f64,
    rs_RH: c_int,
    cs_RH: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_v_opz_var2.unwrap()(
        min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G,
        buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W,
        buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_ext_opt_var1(
    n_iter_max: dim_t,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    jobu: FLA_Svd_type,
    U: FLA_Obj,
    jobv: FLA_Svd_type,
    V: FLA_Obj,
    apply_Uh2C: FLA_Bool,
    C: FLA_Obj,
    b_alg: dim_t,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext_opt_var1.unwrap()(
        n_iter_max, d, e, G, H, jobu, U, jobv, V, apply_Uh2C, C, b_alg,
    )
}

pub unsafe fn FLA_Bsvd_ext_ops_var1(
    m_d: c_int,
    m_U: c_int,
    m_V: c_int,
    m_C: c_int,
    n_C: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext_ops_var1.unwrap()(
        m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G,
        cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C,
        b_alg,
    )
}

pub unsafe fn FLA_Bsvd_ext_opd_var1(
    m_d: c_int,
    m_U: c_int,
    m_V: c_int,
    m_C: c_int,
    n_C: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext_opd_var1.unwrap()(
        m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G,
        cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C,
        b_alg,
    )
}

pub unsafe fn FLA_Bsvd_ext_opc_var1(
    m_d: c_int,
    m_U: c_int,
    m_V: c_int,
    m_C: c_int,
    n_C: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f32,
    inc_d: c_int,
    buff_e: *mut f32,
    inc_e: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut scomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext_opc_var1.unwrap()(
        m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G,
        cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C,
        b_alg,
    )
}

pub unsafe fn FLA_Bsvd_ext_opz_var1(
    m_d: c_int,
    m_U: c_int,
    m_V: c_int,
    m_C: c_int,
    n_C: c_int,
    n_GH: c_int,
    n_iter_max: c_int,
    buff_d: *mut f64,
    inc_d: c_int,
    buff_e: *mut f64,
    inc_e: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_H: *mut dcomplex,
    rs_H: c_int,
    cs_H: c_int,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext_opz_var1.unwrap()(
        m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G,
        cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C,
        b_alg,
    )
}

pub unsafe fn FLA_Bsvd_create_workspace(d: FLA_Obj, G: *mut FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bsvd_create_workspace.unwrap()(d, G, H)
}

pub unsafe fn FLA_Bsvd(
    uplo: FLA_Uplo,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    jobu: FLA_Svd_type,
    U: FLA_Obj,
    jobv: FLA_Svd_type,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V)
}

pub unsafe fn FLA_Bsvd_ext(
    uplo: FLA_Uplo,
    d: FLA_Obj,
    e: FLA_Obj,
    G: FLA_Obj,
    H: FLA_Obj,
    jobu: FLA_Svd_type,
    U: FLA_Obj,
    jobv: FLA_Svd_type,
    V: FLA_Obj,
    apply_Uh2C: FLA_Bool,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bsvd_ext.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V, apply_Uh2C, C)
}

pub unsafe fn FLA_Trinv_ln_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_ln_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_ln_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_ln_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_blk_var4.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_ln_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_unb_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_unb_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_ops_var1(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opd_var1(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_ops_var2(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opd_var2(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_ops_var3(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opd_var3(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opt_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opt_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_ln_ops_var4(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opd_var4(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opc_var4(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_ln_opz_var4(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_lu_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_lu_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_lu_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_blk_var4.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_lu_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_unb_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_unb_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_ops_var1(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opd_var1(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_ops_var2(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opd_var2(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_ops_var3(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opd_var3(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opt_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opt_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_lu_ops_var4(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opd_var4(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opc_var4(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_lu_opz_var4(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_un_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_un_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_un_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_blk_var4.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_un_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_unb_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_unb_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_ops_var1(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opd_var1(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_ops_var2(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opd_var2(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_ops_var3(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opd_var3(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opt_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opt_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_un_ops_var4(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opd_var4(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opc_var4(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_un_opz_var4(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_un_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_uu_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_uu_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_uu_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_blk_var4.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_uu_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_unb_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_unb_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_ops_var1(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opd_var1(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_ops_var2(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opd_var2(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_ops_var3(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opd_var3(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opt_var4(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opt_var4.unwrap()(A)
}

pub unsafe fn FLA_Trinv_uu_ops_var4(
    mn_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opd_var4(
    mn_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opc_var4(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_uu_opz_var4(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Trinv_internal(
    uplo: FLA_Uplo,
    diag: FLA_Diag,
    A: FLA_Obj,
    cntl: *mut fla_trinv_t,
) -> FLA_Error {
    dyload_lib().FLA_Trinv_internal.unwrap()(uplo, diag, A, cntl)
}

pub unsafe fn FLA_Trinv_ln(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_ln.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_lu(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_lu.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_un(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_un.unwrap()(A, cntl)
}

pub unsafe fn FLA_Trinv_uu(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
    dyload_lib().FLA_Trinv_uu.unwrap()(A, cntl)
}

pub unsafe fn FLA_SPDinv_internal(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    cntl: *mut fla_spdinv_t,
) -> FLA_Error {
    dyload_lib().FLA_SPDinv_internal.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_Hess_UT_blk_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blk_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_unb_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_unb_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_blk_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blk_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_blf_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blf_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_unb_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_unb_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_blk_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blk_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_blf_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blf_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_unb_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_unb_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_unb_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_unb_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_blk_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blk_var4.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_blf_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blf_var4.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_unb_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_unb_var4.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_unb_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_unb_var4.unwrap()(A, Y, Z, T)
}

pub unsafe fn FLA_Hess_UT_blk_var5(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_blk_var5.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_unb_var5(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_unb_var5.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_unb_var5(
    A: FLA_Obj,
    U: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_unb_var5.unwrap()(A, U, Z, T)
}

pub unsafe fn FLA_Hess_UT_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_opt_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opt_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ops_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ops_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opd_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opd_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opc_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opc_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opz_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opz_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_opt_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opt_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ops_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ops_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opd_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opd_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opc_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opc_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opz_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opz_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_opt_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_opt_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_opt_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opt_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ops_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ops_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opd_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opd_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opc_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opc_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opz_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opz_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_opt_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_opt_var4.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_opt_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opt_var4.unwrap()(A, Y, Z, T)
}

pub unsafe fn FLA_Hess_UT_step_ops_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ops_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opd_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opd_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opc_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opc_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opz_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opz_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_opt_var5(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_opt_var5.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_opt_var5(
    A: FLA_Obj,
    U: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opt_var5.unwrap()(A, U, Z, T)
}

pub unsafe fn FLA_Hess_UT_step_ops_var5(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ops_var5.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opd_var5(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opd_var5.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opc_var5(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opc_var5.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_opz_var5(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_opz_var5.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_ofu_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofu_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofs_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofs_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofd_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofd_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofc_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofc_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofz_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofz_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_ofu_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofu_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofs_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofs_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofd_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofd_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofc_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofc_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofz_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofz_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_ofu_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_ofu_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofu_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofu_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofs_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofs_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofd_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofd_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofc_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofc_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofz_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofz_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_ofu_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_ofu_var4.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_step_ofu_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofu_var4.unwrap()(A, Y, Z, T)
}

pub unsafe fn FLA_Hess_UT_step_ofs_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofs_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofd_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofd_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofc_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofc_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Hess_UT_step_ofz_var4(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_step_ofz_var4.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Fused_Ahx_Ax_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut f32,
    inc_x: c_int,
    buff_v: *mut f32,
    inc_v: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Ax_ops_var1.unwrap()(
        m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Ahx_Ax_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut f64,
    inc_x: c_int,
    buff_v: *mut f64,
    inc_v: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Ax_opd_var1.unwrap()(
        m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Ahx_Ax_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut scomplex,
    inc_x: c_int,
    buff_v: *mut scomplex,
    inc_v: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Ax_opc_var1.unwrap()(
        m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Ahx_Ax_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut dcomplex,
    inc_x: c_int,
    buff_v: *mut dcomplex,
    inc_v: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Ax_opz_var1.unwrap()(
        m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut f32,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_z: *mut f32,
    inc_z: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut f32,
    inc_x: c_int,
    buff_v: *mut f32,
    inc_v: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_ops_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A,
        buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut f64,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_z: *mut f64,
    inc_z: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut f64,
    inc_x: c_int,
    buff_v: *mut f64,
    inc_v: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_opd_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A,
        buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut scomplex,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_z: *mut scomplex,
    inc_z: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut scomplex,
    inc_x: c_int,
    buff_v: *mut scomplex,
    inc_v: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_opc_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A,
        buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut dcomplex,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_z: *mut dcomplex,
    inc_z: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut dcomplex,
    inc_x: c_int,
    buff_v: *mut dcomplex,
    inc_v: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_opz_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A,
        buff_x, inc_x, buff_v, inc_v, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_ops_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut f32,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut f32,
    inc_t: c_int,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_z: *mut f32,
    inc_z: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_ops_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t,
        inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z,
    )
}

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_opd_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut f64,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut f64,
    inc_t: c_int,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_z: *mut f64,
    inc_z: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_opd_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t,
        inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z,
    )
}

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_opc_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut scomplex,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut scomplex,
    inc_t: c_int,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_z: *mut scomplex,
    inc_z: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_opc_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t,
        inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z,
    )
}

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_opz_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut dcomplex,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut dcomplex,
    inc_t: c_int,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_z: *mut dcomplex,
    inc_z: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_opz_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t,
        inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z,
    )
}

pub unsafe fn FLA_Hess_UT_internal(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_hessut_t) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_internal.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_Hess_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_create_T.unwrap()(A, T)
}

pub unsafe fn FLA_Hess_UT_recover_tau(T: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Hess_UT_recover_tau.unwrap()(T, t)
}

pub unsafe fn FLA_Tridiag_UT_l_blk_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_blk_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_unb_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_unb_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_blk_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_blk_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_blf_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_blf_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_unb_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_unb_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_blk_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_blk_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_blf_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_blf_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_unb_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_unb_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_unb_var3(A: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_unb_var3.unwrap()(A, Z, T)
}

pub unsafe fn FLA_Tridiag_UT_l_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_opt_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opt_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ops_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ops_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opd_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opd_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opc_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opc_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opz_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opz_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_opt_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opt_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ops_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ops_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opd_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opd_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opc_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opc_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opz_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opz_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_opt_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_opt_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_opt_var3(A: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opt_var3.unwrap()(A, Z, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ops_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ops_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opd_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opd_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opc_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opc_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_opz_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_opz_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_ofu_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofu_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofs_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofs_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofd_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofd_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofc_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofc_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofz_var1(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofz_var1.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_ofu_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofu_var2.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofs_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofs_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofd_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofd_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofc_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofc_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofz_var2(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofz_var2.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_ofu_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_ofu_var3.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofu_var3(A: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofu_var3.unwrap()(A, Z, T)
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofs_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofs_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofd_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofd_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofc_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofc_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_l_step_ofz_var3(
    m_A: c_int,
    m_T: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_step_ofz_var3.unwrap()(
        m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Fused_Her2_Ax_l_opt_var1(
    alpha: FLA_Obj,
    u: FLA_Obj,
    z: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    w: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Her2_Ax_l_opt_var1.unwrap()(alpha, u, z, A, x, w)
}

pub unsafe fn FLA_Fused_Her2_Ax_l_ops_var1(
    m_A: c_int,
    buff_alpha: *mut f32,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_z: *mut f32,
    inc_z: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut f32,
    inc_x: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Her2_Ax_l_ops_var1.unwrap()(
        m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w,
        inc_w,
    )
}

pub unsafe fn FLA_Fused_Her2_Ax_l_opd_var1(
    m_A: c_int,
    buff_alpha: *mut f64,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_z: *mut f64,
    inc_z: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut f64,
    inc_x: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Her2_Ax_l_opd_var1.unwrap()(
        m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w,
        inc_w,
    )
}

pub unsafe fn FLA_Fused_Her2_Ax_l_opc_var1(
    m_A: c_int,
    buff_alpha: *mut scomplex,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_z: *mut scomplex,
    inc_z: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut scomplex,
    inc_x: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Her2_Ax_l_opc_var1.unwrap()(
        m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w,
        inc_w,
    )
}

pub unsafe fn FLA_Fused_Her2_Ax_l_opz_var1(
    m_A: c_int,
    buff_alpha: *mut dcomplex,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_z: *mut dcomplex,
    inc_z: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_x: *mut dcomplex,
    inc_x: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Her2_Ax_l_opz_var1.unwrap()(
        m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w,
        inc_w,
    )
}

pub unsafe fn FLA_Fused_UZhu_ZUhu_opt_var1(
    delta: FLA_Obj,
    U: FLA_Obj,
    Z: FLA_Obj,
    t: FLA_Obj,
    u: FLA_Obj,
    w: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UZhu_ZUhu_opt_var1.unwrap()(delta, U, Z, t, u, w)
}

pub unsafe fn FLA_Fused_UZhu_ZUhu_ops_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut f32,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut f32,
    inc_t: c_int,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UZhu_ZUhu_ops_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u,
        buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_UZhu_ZUhu_opd_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut f64,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut f64,
    inc_t: c_int,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UZhu_ZUhu_opd_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u,
        buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_UZhu_ZUhu_opc_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut scomplex,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut scomplex,
    inc_t: c_int,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UZhu_ZUhu_opc_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u,
        buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_UZhu_ZUhu_opz_var1(
    m_U: c_int,
    n_U: c_int,
    buff_delta: *mut dcomplex,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_t: *mut dcomplex,
    inc_t: c_int,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UZhu_ZUhu_opz_var1.unwrap()(
        m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u,
        buff_w, inc_w,
    )
}

pub unsafe fn FLA_Tridiag_UT(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT.unwrap()(uplo, A, T)
}

pub unsafe fn FLA_Tridiag_UT_internal(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_tridiagut_t,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_internal.unwrap()(uplo, A, T, cntl)
}

pub unsafe fn FLA_Tridiag_UT_l(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_tridiagut_t) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_Tridiag_UT_u(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_tridiagut_t) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_u.unwrap()(A, T, cntl)
}

pub unsafe fn FLA_Tridiag_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_create_T.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_recover_tau(T: FLA_Obj, t: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_recover_tau.unwrap()(T, t)
}

pub unsafe fn FLA_Tridiag_UT_scale_diagonals(
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_scale_diagonals.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLA_Tridiag_UT_extract_diagonals(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_extract_diagonals.unwrap()(uplo, A, d, e)
}

pub unsafe fn FLA_Tridiag_UT_extract_real_diagonals(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_extract_real_diagonals.unwrap()(uplo, A, d, e)
}

pub unsafe fn FLA_Tridiag_UT_realify(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_realify.unwrap()(uplo, A, d)
}

pub unsafe fn FLA_Tridiag_UT_l_realify_unb(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_realify_unb.unwrap()(A, d)
}

pub unsafe fn FLA_Tridiag_UT_l_realify_opt(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_l_realify_opt.unwrap()(A, d)
}

pub unsafe fn FLA_Tridiag_UT_u_realify_unb(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_u_realify_unb.unwrap()(A, d)
}

pub unsafe fn FLA_Tridiag_UT_u_realify_opt(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_u_realify_opt.unwrap()(A, d)
}

pub unsafe fn FLA_Tridiag_UT_realify_subdiagonal(b: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_realify_subdiagonal.unwrap()(b, d)
}

pub unsafe fn FLA_Tridiag_UT_realify_subdiagonal_opt(b: FLA_Obj, d: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_realify_subdiagonal_opt.unwrap()(b, d)
}

pub unsafe fn FLA_Tridiag_UT_shift_U(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U.unwrap()(uplo, A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_l_ops(
    m_A: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_l_ops.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_u_ops(
    m_A: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_u_ops.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_l_opd(
    m_A: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_l_opd.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_u_opd(
    m_A: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_u_opd.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_l_opc(
    m_A: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_l_opc.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_u_opc(
    m_A: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_u_opc.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_l_opz(
    m_A: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_l_opz.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_shift_U_u_opz(
    m_A: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_shift_U_u_opz.unwrap()(m_A, buff_A, rs_A, cs_A)
}

pub unsafe fn FLA_Tridiag_UT_form_Q(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    T: FLA_Obj,
    Q: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q.unwrap()(uplo, A, T, Q)
}

pub unsafe fn FLA_Tridiag_UT_form_Q_l_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_l_blk_var1.unwrap()(A, T, W)
}

pub unsafe fn FLA_Tridiag_UT_form_Q_u_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_u_blk_var1.unwrap()(A, T, W)
}

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_l_opt_var1.unwrap()(A, T)
}

pub unsafe fn FLA_Tridiag_UT_form_Q_l_ops_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_l_ops_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opd_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_l_opd_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opc_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_l_opc_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opz_var1(
    m_A: c_int,
    n_AT: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Tridiag_UT_form_Q_l_opz_var1.unwrap()(
        m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_unb_var1(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_unb_var1.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blk_var1(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blk_var1.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var1(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_unb_var1.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_unb_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_unb_var2.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blk_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blk_var2.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blf_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blf_var2.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_unb_var2.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_unb_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_unb_var3.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blk_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blk_var3.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blf_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blf_var3.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_unb_var3.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_unb_var4(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_unb_var4.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blk_var4(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blk_var4.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blf_var4(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blf_var4.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    TU: FLA_Obj,
    TV: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_unb_var4.unwrap()(A, Y, Z, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_unb_var5(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_unb_var5.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_blk_var5(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_blk_var5.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var5(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    TU: FLA_Obj,
    TV: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_unb_var5.unwrap()(A, Y, Z, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_u_opt_var1(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_opt_var1.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var1(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opt_var1.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var1(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ops_var1.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var1(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opd_var1.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var1(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opc_var1.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var1(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opz_var1.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_opt_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_opt_var2.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opt_var2.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ops_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opd_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opc_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opz_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_opt_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_opt_var3.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opt_var3.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ops_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opd_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opc_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opz_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_opt_var4(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_opt_var4.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
    S: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opt_var4.unwrap()(A, Y, Z, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ops_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opd_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opc_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opz_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_opt_var5(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_opt_var5.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var5(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
    S: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opt_var5.unwrap()(A, Y, Z, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var5(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ops_var5.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var5(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opd_var5.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var5(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opc_var5.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var5(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_opz_var5.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_ofu_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_ofu_var2.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofu_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofu_var2.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofs_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofs_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofd_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofd_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofc_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofc_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofz_var2(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofz_var2.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_ofu_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_ofu_var3.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofu_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofu_var3.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofs_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofs_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofd_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofd_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofc_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofc_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofz_var3(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofz_var3.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_ofu_var4(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_ofu_var4.unwrap()(A, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofu_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    T: FLA_Obj,
    S: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofu_var4.unwrap()(A, Y, Z, T, S)
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofs_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f32,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofs_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofd_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut f64,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofd_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofc_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut scomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofc_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Bidiag_UT_u_step_ofz_var4(
    m_A: c_int,
    n_A: c_int,
    m_TS: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
    buff_S: *mut dcomplex,
    rs_S: c_int,
    cs_S: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_step_ofz_var4.unwrap()(
        m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T,
        cs_T, buff_S, rs_S, cs_S,
    )
}

pub unsafe fn FLA_Fused_Gerc2_opt_var1(
    alpha: FLA_Obj,
    u: FLA_Obj,
    y: FLA_Obj,
    z: FLA_Obj,
    v: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_opt_var1.unwrap()(alpha, u, y, z, v, A)
}

pub unsafe fn FLA_Fused_Gerc2_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut f32,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_z: *mut f32,
    inc_z: c_int,
    buff_v: *mut f32,
    inc_v: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_ops_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A,
        rs_A, cs_A,
    )
}

pub unsafe fn FLA_Fused_Gerc2_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut f64,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_z: *mut f64,
    inc_z: c_int,
    buff_v: *mut f64,
    inc_v: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_opd_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A,
        rs_A, cs_A,
    )
}

pub unsafe fn FLA_Fused_Gerc2_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut scomplex,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_z: *mut scomplex,
    inc_z: c_int,
    buff_v: *mut scomplex,
    inc_v: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_opc_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A,
        rs_A, cs_A,
    )
}

pub unsafe fn FLA_Fused_Gerc2_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_alpha: *mut dcomplex,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_z: *mut dcomplex,
    inc_z: c_int,
    buff_v: *mut dcomplex,
    inc_v: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_opz_var1.unwrap()(
        m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A,
        rs_A, cs_A,
    )
}

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opt_var1(
    A: FLA_Obj,
    u: FLA_Obj,
    tau: FLA_Obj,
    a: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
    w: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opt_var1.unwrap()(A, u, tau, a, beta, y, w)
}

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut f32,
    buff_beta: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_a: *mut f32,
    inc_a: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Axpy_Ax_ops_var1.unwrap()(
        m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y,
        inc_y, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut f64,
    buff_beta: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_a: *mut f64,
    inc_a: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opd_var1.unwrap()(
        m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y,
        inc_y, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut scomplex,
    buff_beta: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_a: *mut scomplex,
    inc_a: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opc_var1.unwrap()(
        m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y,
        inc_y, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut dcomplex,
    buff_beta: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_a: *mut dcomplex,
    inc_a: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opz_var1.unwrap()(
        m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y,
        inc_y, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opt_var1(
    alpha: FLA_Obj,
    tau: FLA_Obj,
    u: FLA_Obj,
    y: FLA_Obj,
    z: FLA_Obj,
    v: FLA_Obj,
    A: FLA_Obj,
    up: FLA_Obj,
    a: FLA_Obj,
    w: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opt_var1.unwrap()(alpha, tau, u, y, z, v, A, up, a, w)
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut f32,
    buff_alpha: *mut f32,
    buff_u: *mut f32,
    inc_u: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_z: *mut f32,
    inc_z: c_int,
    buff_v: *mut f32,
    inc_v: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_up: *mut f32,
    inc_up: c_int,
    buff_a: *mut f32,
    inc_a: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_ops_var1.unwrap()(
        m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v,
        buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut f64,
    buff_alpha: *mut f64,
    buff_u: *mut f64,
    inc_u: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_z: *mut f64,
    inc_z: c_int,
    buff_v: *mut f64,
    inc_v: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_up: *mut f64,
    inc_up: c_int,
    buff_a: *mut f64,
    inc_a: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opd_var1.unwrap()(
        m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v,
        buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut scomplex,
    buff_alpha: *mut scomplex,
    buff_u: *mut scomplex,
    inc_u: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_z: *mut scomplex,
    inc_z: c_int,
    buff_v: *mut scomplex,
    inc_v: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_up: *mut scomplex,
    inc_up: c_int,
    buff_a: *mut scomplex,
    inc_a: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opc_var1.unwrap()(
        m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v,
        buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_tau: *mut dcomplex,
    buff_alpha: *mut dcomplex,
    buff_u: *mut dcomplex,
    inc_u: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_z: *mut dcomplex,
    inc_z: c_int,
    buff_v: *mut dcomplex,
    inc_v: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_up: *mut dcomplex,
    inc_up: c_int,
    buff_a: *mut dcomplex,
    inc_a: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opz_var1.unwrap()(
        m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v,
        buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w,
    )
}

pub unsafe fn FLA_Fused_UYx_ZVx_opt_var1(
    delta: FLA_Obj,
    a: FLA_Obj,
    U: FLA_Obj,
    Y: FLA_Obj,
    Z: FLA_Obj,
    V: FLA_Obj,
    A: FLA_Obj,
    temp: FLA_Obj,
    t: FLA_Obj,
    w: FLA_Obj,
    al: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UYx_ZVx_opt_var1.unwrap()(delta, a, U, Y, Z, V, A, temp, t, w, al)
}

pub unsafe fn FLA_Fused_UYx_ZVx_ops_var1(
    m_U: c_int,
    n_U: c_int,
    m_V: c_int,
    n_V: c_int,
    buff_delta: *mut f32,
    buff_U: *mut f32,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f32,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_V: *mut f32,
    rs_V: c_int,
    cs_V: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_temp: *mut f32,
    inc_temp: c_int,
    buff_t: *mut f32,
    inc_t: c_int,
    buff_a: *mut f32,
    inc_a: c_int,
    buff_w: *mut f32,
    inc_w: c_int,
    buff_al: *mut f32,
    inc_al: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UYx_ZVx_ops_var1.unwrap()(
        m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z,
        buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a,
        buff_w, inc_w, buff_al, inc_al,
    )
}

pub unsafe fn FLA_Fused_UYx_ZVx_opd_var1(
    m_U: c_int,
    n_U: c_int,
    m_V: c_int,
    n_V: c_int,
    buff_delta: *mut f64,
    buff_U: *mut f64,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut f64,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_V: *mut f64,
    rs_V: c_int,
    cs_V: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_temp: *mut f64,
    inc_temp: c_int,
    buff_t: *mut f64,
    inc_t: c_int,
    buff_a: *mut f64,
    inc_a: c_int,
    buff_w: *mut f64,
    inc_w: c_int,
    buff_al: *mut f64,
    inc_al: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UYx_ZVx_opd_var1.unwrap()(
        m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z,
        buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a,
        buff_w, inc_w, buff_al, inc_al,
    )
}

pub unsafe fn FLA_Fused_UYx_ZVx_opc_var1(
    m_U: c_int,
    n_U: c_int,
    m_V: c_int,
    n_V: c_int,
    buff_delta: *mut scomplex,
    buff_U: *mut scomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut scomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_V: *mut scomplex,
    rs_V: c_int,
    cs_V: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_temp: *mut scomplex,
    inc_temp: c_int,
    buff_t: *mut scomplex,
    inc_t: c_int,
    buff_a: *mut scomplex,
    inc_a: c_int,
    buff_w: *mut scomplex,
    inc_w: c_int,
    buff_al: *mut scomplex,
    inc_al: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UYx_ZVx_opc_var1.unwrap()(
        m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z,
        buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a,
        buff_w, inc_w, buff_al, inc_al,
    )
}

pub unsafe fn FLA_Fused_UYx_ZVx_opz_var1(
    m_U: c_int,
    n_U: c_int,
    m_V: c_int,
    n_V: c_int,
    buff_delta: *mut dcomplex,
    buff_U: *mut dcomplex,
    rs_U: c_int,
    cs_U: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_Z: *mut dcomplex,
    rs_Z: c_int,
    cs_Z: c_int,
    buff_V: *mut dcomplex,
    rs_V: c_int,
    cs_V: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_temp: *mut dcomplex,
    inc_temp: c_int,
    buff_t: *mut dcomplex,
    inc_t: c_int,
    buff_a: *mut dcomplex,
    inc_a: c_int,
    buff_w: *mut dcomplex,
    inc_w: c_int,
    buff_al: *mut dcomplex,
    inc_al: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Fused_UYx_ZVx_opz_var1.unwrap()(
        m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z,
        buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a,
        buff_w, inc_w, buff_al, inc_al,
    )
}

pub unsafe fn FLA_Bidiag_UT(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_internal(
    A: FLA_Obj,
    TU: FLA_Obj,
    TV: FLA_Obj,
    cntl: *mut fla_bidiagut_t,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_internal.unwrap()(A, TU, TV, cntl)
}

pub unsafe fn FLA_Bidiag_UT_l(
    A: FLA_Obj,
    TU: FLA_Obj,
    TV: FLA_Obj,
    cntl: *mut fla_bidiagut_t,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_l.unwrap()(A, TU, TV, cntl)
}

pub unsafe fn FLA_Bidiag_UT_u(
    A: FLA_Obj,
    TU: FLA_Obj,
    TV: FLA_Obj,
    cntl: *mut fla_bidiagut_t,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u.unwrap()(A, TU, TV, cntl)
}

pub unsafe fn FLA_Bidiag_UT_create_T(A: FLA_Obj, TU: *mut FLA_Obj, TV: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_create_T.unwrap()(A, TU, TV)
}

pub unsafe fn FLA_Bidiag_UT_recover_tau(
    TU: FLA_Obj,
    TV: FLA_Obj,
    tu: FLA_Obj,
    tv: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_recover_tau.unwrap()(TU, TV, tu, tv)
}

pub unsafe fn FLA_Bidiag_UT_extract_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_extract_diagonals.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_u_extract_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_extract_diagonals.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_l_extract_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_l_extract_diagonals.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_extract_real_diagonals(
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_extract_real_diagonals.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_u_extract_real_diagonals(
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_extract_real_diagonals.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_l_extract_real_diagonals(
    A: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_l_extract_real_diagonals.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_scale_diagonals(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_scale_diagonals.unwrap()(alpha, A)
}

pub unsafe fn FLA_Bidiag_UT_u_scale_diagonals(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_scale_diagonals.unwrap()(alpha, A)
}

pub unsafe fn FLA_Bidiag_UT_l_scale_diagonals(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_l_scale_diagonals.unwrap()(alpha, A)
}

pub unsafe fn FLA_Bidiag_UT_realify(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_realify.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_l_realify_unb(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_l_realify_unb.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_l_realify_opt(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_l_realify_opt.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_u_realify_unb(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_realify_unb.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_u_realify_opt(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_u_realify_opt.unwrap()(A, d, e)
}

pub unsafe fn FLA_Bidiag_UT_realify_diagonals(
    uplo: FLA_Uplo,
    a: FLA_Obj,
    b: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_realify_diagonals.unwrap()(uplo, a, b, d, e)
}

pub unsafe fn FLA_Bidiag_UT_realify_diagonals_opt(
    a: FLA_Obj,
    b: FLA_Obj,
    d: FLA_Obj,
    e: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_realify_diagonals_opt.unwrap()(a, b, d, e)
}

pub unsafe fn FLA_Bidiag_UT_form_U(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_form_U.unwrap()(A, T, U)
}

pub unsafe fn FLA_Bidiag_UT_form_V(A: FLA_Obj, S: FLA_Obj, V: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_form_V.unwrap()(A, S, V)
}

pub unsafe fn FLA_Bidiag_UT_form_U_ext(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    T: FLA_Obj,
    transu: FLA_Trans,
    U: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_form_U_ext.unwrap()(uplo, A, T, transu, U)
}

pub unsafe fn FLA_Bidiag_UT_form_V_ext(
    uplo: FLA_Uplo,
    A: FLA_Obj,
    S: FLA_Obj,
    transv: FLA_Trans,
    V: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Bidiag_UT_form_V_ext.unwrap()(uplo, A, S, transv, V)
}

pub unsafe fn FLA_Lyap_n_unb_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_unb_var1.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_unb_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_unb_var2.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_unb_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_unb_var3.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_unb_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_unb_var4.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_blk_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_blk_var1.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_n_blk_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_blk_var2.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_n_blk_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_blk_var3.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_n_blk_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_blk_var4.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_n_opt_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opt_var1.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_ops_var1(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_ops_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opd_var1(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opd_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opc_var1(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opc_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opz_var1(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opz_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opt_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opt_var2.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_ops_var2(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_ops_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opd_var2(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opd_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opc_var2(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opc_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opz_var2(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opz_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opt_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opt_var3.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_ops_var3(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_ops_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opd_var3(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opd_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opc_var3(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opc_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opz_var3(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opz_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opt_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opt_var4.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_n_ops_var4(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_ops_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opd_var4(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opd_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opc_var4(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opc_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_n_opz_var4(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n_opz_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_unb_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_unb_var1.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_unb_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_unb_var2.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_unb_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_unb_var3.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_unb_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_unb_var4.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_blk_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_blk_var1.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_h_blk_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_blk_var2.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_h_blk_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_blk_var3.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_h_blk_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_blk_var4.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_h_opt_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opt_var1.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_ops_var1(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_ops_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opd_var1(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opd_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opc_var1(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opc_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opz_var1(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opz_var1.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opt_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opt_var2.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_ops_var2(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_ops_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opd_var2(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opd_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opc_var2(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opc_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opz_var2(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opz_var2.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opt_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opt_var3.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_ops_var3(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_ops_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opd_var3(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opd_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opc_var3(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opc_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opz_var3(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opz_var3.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opt_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opt_var4.unwrap()(isgn, A, C)
}

pub unsafe fn FLA_Lyap_h_ops_var4(
    m_AC: c_int,
    buff_sgn: *mut f32,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f32,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_ops_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opd_var4(
    m_AC: c_int,
    buff_sgn: *mut f64,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut f64,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opd_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opc_var4(
    m_AC: c_int,
    buff_sgn: *mut scomplex,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut scomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opc_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLA_Lyap_h_opz_var4(
    m_AC: c_int,
    buff_sgn: *mut dcomplex,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_W: *mut dcomplex,
    rs_W: c_int,
    cs_W: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h_opz_var4.unwrap()(
        m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C,
    )
}

pub unsafe fn FLASH_Lyap(
    trans: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Lyap.unwrap()(trans, isgn, A, C, scale)
}

pub unsafe fn FLA_Lyap(
    trans: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Lyap.unwrap()(trans, isgn, A, C, scale)
}

pub unsafe fn FLA_Lyap_internal(
    trans: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_internal.unwrap()(trans, isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_n(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_n.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Lyap_h(
    isgn: FLA_Obj,
    A: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_lyap_t,
) -> FLA_Error {
    dyload_lib().FLA_Lyap_h.unwrap()(isgn, A, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_blk_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn_opt_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var1.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var2.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var3.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var4.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var5.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var6.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var7.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var8.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var9.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var10.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var11.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var12.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var13.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var14.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var15.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var16.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var17.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_opt_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opt_var18.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nn_ops_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f32,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_ops_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nn_opd_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f64,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opd_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nn_opc_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut scomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opc_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nn_opz_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut dcomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn_opz_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nh_blk_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_blk_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh_opt_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var1.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var2.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var3.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var4.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var5.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var6.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var7.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var8.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var9.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var10.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var11.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var12.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var13.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var14.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var15.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var16.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var17.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_opt_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opt_var18.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_nh_ops_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f32,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_ops_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nh_opd_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f64,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opd_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nh_opc_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut scomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opc_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_nh_opz_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut dcomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh_opz_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hn_blk_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_blk_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn_opt_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var1.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var2.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var3.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var4.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var5.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var6.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var7.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var8.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var9.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var10.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var11.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var12.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var13.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var14.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var15.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var16.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var17.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_opt_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opt_var18.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hn_ops_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f32,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_ops_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hn_opd_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f64,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opd_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hn_opc_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut scomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opc_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hn_opz_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut dcomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn_opz_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hh_blk_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_blk_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh_opt_var1(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var1.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var2(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var2.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var3(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var3.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var4(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var4.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var5(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var5.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var6(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var6.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var7(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var7.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var8(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var8.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var9(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var9.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var10(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var10.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var11(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var11.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var12(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var12.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var13(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var13.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var14(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var14.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var15(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var15.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var16(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var16.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var17(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var17.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_opt_var18(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opt_var18.unwrap()(isgn, A, B, C, scale)
}

pub unsafe fn FLA_Sylv_hh_ops_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f32,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_ops_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hh_opd_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut f64,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opd_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hh_opc_var1(
    sgn: f32,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut scomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opc_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_hh_opz_var1(
    sgn: f64,
    m_C: c_int,
    n_C: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
    buff_C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
    buff_scale: *mut dcomplex,
    info: *mut c_int,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh_opz_var1.unwrap()(
        sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info,
    )
}

pub unsafe fn FLA_Sylv_internal(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_internal.unwrap()(transa, transb, isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nn(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nn.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_nh(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_nh.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hn(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hn.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Sylv_hh(
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
    cntl: *mut fla_sylv_t,
) -> FLA_Error {
    dyload_lib().FLA_Sylv_hh.unwrap()(isgn, A, B, C, scale, cntl)
}

pub unsafe fn FLA_Ttmm_l_blk_var1(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_l_blk_var2(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_l_blk_var3(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_l_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_l_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_l_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_l_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_l_ops_var1(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opd_var1(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_l_ops_var2(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opd_var2(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_l_ops_var3(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opd_var3(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_l_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_blk_var1(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_blk_var1.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_u_blk_var2(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_blk_var2.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_u_blk_var3(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_blk_var3.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_u_unb_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_unb_var1.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_unb_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_unb_var2.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_unb_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_unb_var3.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_opt_var1(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opt_var1.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_ops_var1(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opd_var1(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opc_var1(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opz_var1(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opt_var2(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opt_var2.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_ops_var2(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opd_var2(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opc_var2(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opz_var2(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opt_var3(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opt_var3.unwrap()(A)
}

pub unsafe fn FLA_Ttmm_u_ops_var3(mn_A: c_int, A: *mut f32, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opd_var3(mn_A: c_int, A: *mut f64, rs_A: c_int, cs_A: c_int) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opc_var3(
    mn_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_u_opz_var3(
    mn_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
}

pub unsafe fn FLA_Ttmm_internal(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_internal.unwrap()(uplo, A, cntl)
}

pub unsafe fn FLA_Ttmm_l(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_l.unwrap()(A, cntl)
}

pub unsafe fn FLA_Ttmm_u(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
    dyload_lib().FLA_Ttmm_u.unwrap()(A, cntl)
}

pub unsafe fn FLA_UDdate_UT_blk_var1(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_uddateut_t,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_blk_var1.unwrap()(R, C, D, T, cntl)
}

pub unsafe fn FLA_UDdate_UT_blk_var2(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_uddateut_t,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_blk_var2.unwrap()(R, C, D, T, cntl)
}

pub unsafe fn FLA_UDdate_UT_unb_var1(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_unb_var1.unwrap()(R, C, D, T)
}

pub unsafe fn FLA_UDdate_UT_opt_var1(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_opt_var1.unwrap()(R, C, D, T)
}

pub unsafe fn FLA_UDdate_UT_ops_var1(
    mn_RT: c_int,
    m_C: c_int,
    m_D: c_int,
    R: *mut f32,
    rs_R: c_int,
    cs_R: c_int,
    C: *mut f32,
    rs_C: c_int,
    cs_C: c_int,
    D: *mut f32,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_ops_var1.unwrap()(
        mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_UDdate_UT_opd_var1(
    mn_RT: c_int,
    m_C: c_int,
    m_D: c_int,
    R: *mut f64,
    rs_R: c_int,
    cs_R: c_int,
    C: *mut f64,
    rs_C: c_int,
    cs_C: c_int,
    D: *mut f64,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_opd_var1.unwrap()(
        mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_UDdate_UT_opc_var1(
    mn_RT: c_int,
    m_C: c_int,
    m_D: c_int,
    R: *mut scomplex,
    rs_R: c_int,
    cs_R: c_int,
    C: *mut scomplex,
    rs_C: c_int,
    cs_C: c_int,
    D: *mut scomplex,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_opc_var1.unwrap()(
        mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_UDdate_UT_opz_var1(
    mn_RT: c_int,
    m_C: c_int,
    m_D: c_int,
    R: *mut dcomplex,
    rs_R: c_int,
    cs_R: c_int,
    C: *mut dcomplex,
    rs_C: c_int,
    cs_C: c_int,
    D: *mut dcomplex,
    rs_D: c_int,
    cs_D: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_opz_var1.unwrap()(
        mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_UDdate_UT(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT.unwrap()(R, C, D, T)
}

pub unsafe fn FLA_UDdate_UT_internal(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    cntl: *mut fla_uddateut_t,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_internal.unwrap()(R, C, D, T, cntl)
}

pub unsafe fn FLA_UDdate_UT_create_T(R: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_create_T.unwrap()(R, T)
}

pub unsafe fn FLA_UDdate_UT_update_rhs(
    T: FLA_Obj,
    bR: FLA_Obj,
    C: FLA_Obj,
    bC: FLA_Obj,
    D: FLA_Obj,
    bD: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_update_rhs.unwrap()(T, bR, C, bC, D, bD)
}

pub unsafe fn FLA_UDdate_UT_solve(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_solve.unwrap()(R, bR, x)
}

pub unsafe fn FLASH_UDdate_UT_inc(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_UDdate_UT_inc.unwrap()(R, C, D, T, W)
}

pub unsafe fn FLA_UDdate_UT_inc_blk_var1(
    R: FLA_Obj,
    C: FLA_Obj,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    cntl: *mut fla_uddateutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_UDdate_UT_inc_blk_var1.unwrap()(R, C, D, T, W, cntl)
}

pub unsafe fn FLASH_UDdate_UT_inc_create_hier_matrices(
    R_flat: FLA_Obj,
    C_flat: FLA_Obj,
    D_flat: FLA_Obj,
    depth: dim_t,
    b_flash: *mut dim_t,
    b_alg: dim_t,
    R: *mut FLA_Obj,
    C: *mut FLA_Obj,
    D: *mut FLA_Obj,
    T: *mut FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_UDdate_UT_inc_create_hier_matrices.unwrap()(
        R_flat, C_flat, D_flat, depth, b_flash, b_alg, R, C, D, T, W,
    )
}

pub unsafe fn FLASH_UDdate_UT_inc_determine_alg_blocksize(R: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_UDdate_UT_inc_determine_alg_blocksize.unwrap()(R)
}

pub unsafe fn FLASH_UDdate_UT_inc_update_rhs(
    T: FLA_Obj,
    bR: FLA_Obj,
    C: FLA_Obj,
    bC: FLA_Obj,
    D: FLA_Obj,
    bD: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_UDdate_UT_inc_update_rhs.unwrap()(T, bR, C, bC, D, bD)
}

pub unsafe fn FLASH_UDdate_UT_inc_solve(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_UDdate_UT_inc_solve.unwrap()(R, bR, x)
}

pub unsafe fn FLA_Accum_T_UT_fc_unb_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_unb_var1.unwrap()(A, t, T)
}

pub unsafe fn FLA_Accum_T_UT_fc_blk_var2(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_blk_var2.unwrap()(A, t, T)
}

pub unsafe fn FLA_Accum_T_UT_fc_opt_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_opt_var1.unwrap()(A, t, T)
}

pub unsafe fn FLA_Accum_T_UT_fc_ops_var1(
    m_A: c_int,
    n_AT: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut f32,
    inc_t: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_ops_var1.unwrap()(
        m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fc_opd_var1(
    m_A: c_int,
    n_AT: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut f64,
    inc_t: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_opd_var1.unwrap()(
        m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fc_opc_var1(
    m_A: c_int,
    n_AT: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut scomplex,
    inc_t: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_opc_var1.unwrap()(
        m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fc_opz_var1(
    m_A: c_int,
    n_AT: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut dcomplex,
    inc_t: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fc_opz_var1.unwrap()(
        m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fr_unb_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_unb_var1.unwrap()(A, t, T)
}

pub unsafe fn FLA_Accum_T_UT_fr_blk_var2(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_blk_var2.unwrap()(A, t, T)
}

pub unsafe fn FLA_Accum_T_UT_fr_opt_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_opt_var1.unwrap()(A, t, T)
}

pub unsafe fn FLA_Accum_T_UT_fr_ops_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut f32,
    inc_t: c_int,
    T: *mut f32,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_ops_var1.unwrap()(
        m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fr_opd_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut f64,
    inc_t: c_int,
    T: *mut f64,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_opd_var1.unwrap()(
        m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fr_opc_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut scomplex,
    inc_t: c_int,
    T: *mut scomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_opc_var1.unwrap()(
        m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_fr_opz_var1(
    m_A: c_int,
    n_A: c_int,
    A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    m_t: c_int,
    t: *mut dcomplex,
    inc_t: c_int,
    T: *mut dcomplex,
    rs_T: c_int,
    cs_T: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_fr_opz_var1.unwrap()(
        m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T,
    )
}

pub unsafe fn FLA_Accum_T_UT_internal(
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    tau: FLA_Obj,
    T: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Accum_T_UT_internal.unwrap()(direct, storev, A, tau, T)
}

pub unsafe fn FLA_Apply_G_lf_opt_var1(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lf_opt_var1.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_lf_blk_var3(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lf_blk_var3.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_lb_opt_var1(c: FLA_Obj, s: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lb_opt_var1.unwrap()(c, s, A)
}

pub unsafe fn FLA_Apply_G_lb_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f32,
    inc_c: c_int,
    buff_s: *mut f32,
    inc_s: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lb_ops_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_lb_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f64,
    inc_c: c_int,
    buff_s: *mut f64,
    inc_s: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lb_opd_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_lb_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f32,
    inc_c: c_int,
    buff_s: *mut f32,
    inc_s: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lb_opc_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_lb_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f64,
    inc_c: c_int,
    buff_s: *mut f64,
    inc_s: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_lb_opz_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var1(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var1.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var1(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var1.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var1(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var1.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var1(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var1.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var2(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var2.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var2(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var2.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var2(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var2.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var2(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var2.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var3(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var3.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var3(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var3.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var3(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var3.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var4(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var4.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var4(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var4.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var4(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var4.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var4(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var4.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var5(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var5.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var5(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var5.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var5(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var5.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var5(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var5.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var6(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var6.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var6(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var6.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var6(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var6.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var6(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var6.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var7(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var7.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var7(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var7.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var7(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var7.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var7(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var7.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var8(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var8.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var8(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var8.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var8(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var8.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var8(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var8.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_opt_var9(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opt_var9.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ops_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ops_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opd_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opd_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opc_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opc_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_opz_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_opz_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var9(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var9.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var9(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var9.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var9(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var9.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var3b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var3b.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var3b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var3b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var3b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var3b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var3b(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var3b.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var3b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var3b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var3b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var3b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var3b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var5b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var5b.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var5b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var5b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var5b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var5b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var5b(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var5b.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var5b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var5b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var5b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var5b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var5b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var6b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var6b.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var6b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var6b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var6b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var6b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var6b(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var6b.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var6b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var6b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var6b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var6b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var6b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var8b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var8b.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var8b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var8b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var8b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var8b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var8b(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var8b.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var8b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var8b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var8b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var8b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var8b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bhs_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bhs_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bhd_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bhd_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bhc_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bhc_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bhz_var3(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut FLA_Obj,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bhz_var3.unwrap()(
        k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_asm_var9b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asm_var9b.unwrap()(G, A)
}

pub unsafe fn FLA_Apply_G_rf_ass_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_ass_var9b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asd_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asd_var9b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asc_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asc_var9b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_asz_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    iTL: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_asz_var9b.unwrap()(
        k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rf_blk_var9b(G: FLA_Obj, A: FLA_Obj, b_alg: dim_t) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blk_var9b.unwrap()(G, A, b_alg)
}

pub unsafe fn FLA_Apply_G_rf_bls_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bls_var9b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_bld_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_bld_var9b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blc_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut scomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blc_var9b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rf_blz_var9b(
    k_G: c_int,
    m_A: c_int,
    n_A: c_int,
    i_k: c_int,
    buff_G: *mut dcomplex,
    rs_G: c_int,
    cs_G: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    b_alg: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rf_blz_var9b.unwrap()(
        k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg,
    )
}

pub unsafe fn FLA_Apply_G_rb_opt_var1(c: FLA_Obj, s: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rb_opt_var1.unwrap()(c, s, A)
}

pub unsafe fn FLA_Apply_G_rb_ops_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f32,
    inc_c: c_int,
    buff_s: *mut f32,
    inc_s: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rb_ops_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rb_opd_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f64,
    inc_c: c_int,
    buff_s: *mut f64,
    inc_s: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rb_opd_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rb_opc_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f32,
    inc_c: c_int,
    buff_s: *mut f32,
    inc_s: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rb_opc_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G_rb_opz_var1(
    m_A: c_int,
    n_A: c_int,
    buff_c: *mut f64,
    inc_c: c_int,
    buff_s: *mut f64,
    inc_s: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_rb_opz_var1.unwrap()(
        m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A,
    )
}

pub unsafe fn FLA_Apply_G(side: FLA_Side, direct: FLA_Direct, G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_G.unwrap()(side, direct, G, A)
}

pub unsafe fn FLA_Apply_G_internal(
    side: FLA_Side,
    direct: FLA_Direct,
    G: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_G_internal.unwrap()(side, direct, G, A)
}

pub unsafe fn FLA_Givens2(
    chi_1: FLA_Obj,
    chi_2: FLA_Obj,
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    chi_1_new: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Givens2.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
}

pub unsafe fn FLA_Givens2_ops(
    chi_1: *mut f32,
    chi_2: *mut f32,
    gamma: *mut f32,
    sigma: *mut f32,
    chi_1_new: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Givens2_ops.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
}

pub unsafe fn FLA_Givens2_opd(
    chi_1: *mut f64,
    chi_2: *mut f64,
    gamma: *mut f64,
    sigma: *mut f64,
    chi_1_new: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Givens2_opd.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
}

pub unsafe fn FLA_Apply_GTG(
    gamma: FLA_Obj,
    sigma: FLA_Obj,
    delta1: FLA_Obj,
    epsilon1: FLA_Obj,
    delta2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_GTG.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
}

pub unsafe fn FLA_Apply_GTG_ops(
    gamma: *mut f32,
    sigma: *mut f32,
    delta1: *mut f32,
    epsilon1: *mut f32,
    delta2: *mut f32,
) -> FLA_Error {
    dyload_lib().FLA_Apply_GTG_ops.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
}

pub unsafe fn FLA_Apply_GTG_opd(
    gamma: *mut f64,
    sigma: *mut f64,
    delta1: *mut f64,
    epsilon1: *mut f64,
    delta2: *mut f64,
) -> FLA_Error {
    dyload_lib().FLA_Apply_GTG_opd.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
}

pub unsafe fn FLA_Apply_H2_UT_l_unb_var1(
    tau: FLA_Obj,
    u2: FLA_Obj,
    a1t: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_l_unb_var1.unwrap()(tau, u2, a1t, A2)
}

pub unsafe fn FLA_Apply_H2_UT_l_opt_var1(
    tau: FLA_Obj,
    u2: FLA_Obj,
    a1t: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_l_opt_var1.unwrap()(tau, u2, a1t, A2)
}

pub unsafe fn FLA_Apply_H2_UT_l_ops_var1(
    m_u2_A2: c_int,
    n_a1t: c_int,
    tau: *mut f32,
    u2: *mut f32,
    inc_u2: c_int,
    a1t: *mut f32,
    inc_a1t: c_int,
    A2: *mut f32,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_l_ops_var1.unwrap()(
        m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_l_opd_var1(
    m_u2_A2: c_int,
    n_a1t: c_int,
    tau: *mut f64,
    u2: *mut f64,
    inc_u2: c_int,
    a1t: *mut f64,
    inc_a1t: c_int,
    A2: *mut f64,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_l_opd_var1.unwrap()(
        m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_l_opc_var1(
    m_u2_A2: c_int,
    n_a1t: c_int,
    tau: *mut scomplex,
    u2: *mut scomplex,
    inc_u2: c_int,
    a1t: *mut scomplex,
    inc_a1t: c_int,
    A2: *mut scomplex,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_l_opc_var1.unwrap()(
        m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_l_opz_var1(
    m_u2_A2: c_int,
    n_a1t: c_int,
    tau: *mut dcomplex,
    u2: *mut dcomplex,
    inc_u2: c_int,
    a1t: *mut dcomplex,
    inc_a1t: c_int,
    A2: *mut dcomplex,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_l_opz_var1.unwrap()(
        m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_r_unb_var1(
    tau: FLA_Obj,
    u2h: FLA_Obj,
    a1: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_r_unb_var1.unwrap()(tau, u2h, a1, A2)
}

pub unsafe fn FLA_Apply_H2_UT_r_opt_var1(
    tau: FLA_Obj,
    u2h: FLA_Obj,
    a1: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_r_opt_var1.unwrap()(tau, u2h, a1, A2)
}

pub unsafe fn FLA_Apply_H2_UT_r_ops_var1(
    n_u2h_A2: c_int,
    m_a1: c_int,
    tau: *mut f32,
    u2h: *mut f32,
    inc_u2h: c_int,
    a1: *mut f32,
    inc_a1: c_int,
    A2: *mut f32,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_r_ops_var1.unwrap()(
        n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_r_opd_var1(
    n_u2h_A2: c_int,
    m_a1: c_int,
    tau: *mut f64,
    u2h: *mut f64,
    inc_u2h: c_int,
    a1: *mut f64,
    inc_a1: c_int,
    A2: *mut f64,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_r_opd_var1.unwrap()(
        n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_r_opc_var1(
    n_u2h_A2: c_int,
    m_a1: c_int,
    tau: *mut scomplex,
    u2h: *mut scomplex,
    inc_u2h: c_int,
    a1: *mut scomplex,
    inc_a1: c_int,
    A2: *mut scomplex,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_r_opc_var1.unwrap()(
        n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_r_opz_var1(
    n_u2h_A2: c_int,
    m_a1: c_int,
    tau: *mut dcomplex,
    u2h: *mut dcomplex,
    inc_u2h: c_int,
    a1: *mut dcomplex,
    inc_a1: c_int,
    A2: *mut dcomplex,
    rs_A2: c_int,
    cs_A2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_r_opz_var1.unwrap()(
        n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2,
    )
}

pub unsafe fn FLA_Apply_H2_UT_internal(
    side: FLA_Side,
    tau: FLA_Obj,
    u2: FLA_Obj,
    a1: FLA_Obj,
    A2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_H2_UT_internal.unwrap()(side, tau, u2, a1, A2)
}

pub unsafe fn FLA_Apply_HUD_UT_l_unb_var1(
    tau: FLA_Obj,
    w12t: FLA_Obj,
    r12t: FLA_Obj,
    u1: FLA_Obj,
    C2: FLA_Obj,
    v1: FLA_Obj,
    D2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_l_unb_var1.unwrap()(tau, w12t, r12t, u1, C2, v1, D2)
}

pub unsafe fn FLA_Apply_HUD_UT_l_opt_var1(
    tau: FLA_Obj,
    w12t: FLA_Obj,
    r12t: FLA_Obj,
    u1: FLA_Obj,
    C2: FLA_Obj,
    v1: FLA_Obj,
    D2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_l_opt_var1.unwrap()(tau, w12t, r12t, u1, C2, v1, D2)
}

pub unsafe fn FLA_Apply_HUD_UT_l_ops_var1(
    m_u1_C2: c_int,
    m_v1_D2: c_int,
    n_r12t: c_int,
    tau: *mut f32,
    w12t: *mut f32,
    inc_w12t: c_int,
    r12t: *mut f32,
    inc_r12t: c_int,
    u1: *mut f32,
    inc_u1: c_int,
    C2: *mut f32,
    rs_C2: c_int,
    cs_C2: c_int,
    v1: *mut f32,
    inc_v1: c_int,
    D2: *mut f32,
    rs_D2: c_int,
    cs_D2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_l_ops_var1.unwrap()(
        m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2,
        cs_C2, v1, inc_v1, D2, rs_D2, cs_D2,
    )
}

pub unsafe fn FLA_Apply_HUD_UT_l_opd_var1(
    m_u1_C2: c_int,
    m_v1_D2: c_int,
    n_r12t: c_int,
    tau: *mut f64,
    w12t: *mut f64,
    inc_w12t: c_int,
    r12t: *mut f64,
    inc_r12t: c_int,
    u1: *mut f64,
    inc_u1: c_int,
    C2: *mut f64,
    rs_C2: c_int,
    cs_C2: c_int,
    v1: *mut f64,
    inc_v1: c_int,
    D2: *mut f64,
    rs_D2: c_int,
    cs_D2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_l_opd_var1.unwrap()(
        m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2,
        cs_C2, v1, inc_v1, D2, rs_D2, cs_D2,
    )
}

pub unsafe fn FLA_Apply_HUD_UT_l_opc_var1(
    m_u1_C2: c_int,
    m_v1_D2: c_int,
    n_r12t: c_int,
    tau: *mut scomplex,
    w12t: *mut scomplex,
    inc_w12t: c_int,
    r12t: *mut scomplex,
    inc_r12t: c_int,
    u1: *mut scomplex,
    inc_u1: c_int,
    C2: *mut scomplex,
    rs_C2: c_int,
    cs_C2: c_int,
    v1: *mut scomplex,
    inc_v1: c_int,
    D2: *mut scomplex,
    rs_D2: c_int,
    cs_D2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_l_opc_var1.unwrap()(
        m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2,
        cs_C2, v1, inc_v1, D2, rs_D2, cs_D2,
    )
}

pub unsafe fn FLA_Apply_HUD_UT_l_opz_var1(
    m_u1_C2: c_int,
    m_v1_D2: c_int,
    n_r12t: c_int,
    tau: *mut dcomplex,
    w12t: *mut dcomplex,
    inc_w12t: c_int,
    r12t: *mut dcomplex,
    inc_r12t: c_int,
    u1: *mut dcomplex,
    inc_u1: c_int,
    C2: *mut dcomplex,
    rs_C2: c_int,
    cs_C2: c_int,
    v1: *mut dcomplex,
    inc_v1: c_int,
    D2: *mut dcomplex,
    rs_D2: c_int,
    cs_D2: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_l_opz_var1.unwrap()(
        m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2,
        cs_C2, v1, inc_v1, D2, rs_D2, cs_D2,
    )
}

pub unsafe fn FLA_Apply_HUD_UT_internal(
    side: FLA_Side,
    tau: FLA_Obj,
    w12t: FLA_Obj,
    r12t: FLA_Obj,
    u1: FLA_Obj,
    C2: FLA_Obj,
    v1: FLA_Obj,
    D2: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_HUD_UT_internal.unwrap()(side, tau, w12t, r12t, u1, C2, v1, D2)
}

pub unsafe fn FLA_Apply_Q_UT_lnfc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfc_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfc_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfc_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfc_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfc_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfc_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfr_blk_var1(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfr_blk_var1.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfr_blk_var2(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfr_blk_var2.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfr_blk_var3(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfr_blk_var3.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_internal.unwrap()(side, trans, direct, storev, A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnfr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnfr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lnbr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lnbr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhfr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhfr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_lhbr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_lhbr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhbr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhbr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rhfr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rhfr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnbr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnbr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfc(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfc.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_rnfr(
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_rnfr.unwrap()(A, T, W, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_create_workspace(
    T: FLA_Obj,
    B: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_create_workspace.unwrap()(T, B, W)
}

pub unsafe fn FLA_Apply_Q_UT_create_workspace_side(
    side: FLA_Side,
    T: FLA_Obj,
    B: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_create_workspace_side.unwrap()(side, T, B, W)
}

pub unsafe fn FLASH_Apply_Q_UT(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_Q_UT.unwrap()(side, trans, direct, storev, A, T, W, B)
}

pub unsafe fn FLASH_Apply_Q_UT_create_workspace(
    TW: FLA_Obj,
    B: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_Q_UT_create_workspace.unwrap()(TW, B, W)
}

pub unsafe fn FLA_Apply_Q2_UT_lhfc_blk_var1(
    D: FLA_Obj,
    T: FLA_Obj,
    W1: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lhfc_blk_var1.unwrap()(D, T, W1, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lhfc_blk_var2(
    D: FLA_Obj,
    T: FLA_Obj,
    W1: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lhfc_blk_var2.unwrap()(D, T, W1, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lhfc_blk_var3(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lhfc_blk_var3.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lnfc_blk_var1(
    D: FLA_Obj,
    T: FLA_Obj,
    W1: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lnfc_blk_var1.unwrap()(D, T, W1, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lnfc_blk_var2(
    D: FLA_Obj,
    T: FLA_Obj,
    W1: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lnfc_blk_var2.unwrap()(D, T, W1, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lnfc_blk_var3(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lnfc_blk_var3.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLASH_Apply_Q2_UT(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_Q2_UT.unwrap()(side, trans, direct, storev, D, T, W, C, E)
}

pub unsafe fn FLA_Apply_Q2_UT_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_internal.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lhfc(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lhfc.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_Q2_UT_lnfc(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q2_UT_lnfc.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_blk_var1(
    D: FLA_Obj,
    T: FLA_Obj,
    W1: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_lhfc_blk_var1.unwrap()(D, T, W1, C, E, cntl)
}

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_blk_var2(
    D: FLA_Obj,
    T: FLA_Obj,
    W1: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_lhfc_blk_var2.unwrap()(D, T, W1, C, E, cntl)
}

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_blk_var3(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_lhfc_blk_var3.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_CAQ2_UT_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_internal.unwrap()(
        side, trans, direct, storev, D, T, W, C, E, cntl,
    )
}

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc(
    D: FLA_Obj,
    T: FLA_Obj,
    W: FLA_Obj,
    C: FLA_Obj,
    E: FLA_Obj,
    cntl: *mut fla_apcaq2ut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ2_UT_lhfc.unwrap()(D, T, W, C, E, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT_lhfc_blk_var1(
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_lhfc_blk_var1.unwrap()(T, W, R, U, C, V, D, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT_lhfc_blk_var2(
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_lhfc_blk_var2.unwrap()(T, W, R, U, C, V, D, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT_lhfc_blk_var3(
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_lhfc_blk_var3.unwrap()(T, W, R, U, C, V, D, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
}

pub unsafe fn FLA_Apply_QUD_UT_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_internal.unwrap()(
        side, trans, direct, storev, T, W, R, U, C, V, D, cntl,
    )
}

pub unsafe fn FLA_Apply_QUD_UT_lhfc(
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudut_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_lhfc.unwrap()(T, W, R, U, C, V, D, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT_create_workspace(
    T: FLA_Obj,
    R: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_create_workspace.unwrap()(T, R, W)
}

pub unsafe fn FLA_Apply_Q_UT_inc_lhfc_blk_var1(
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_lhfc_blk_var1.unwrap()(A, TW, W1, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_inc_lnfc_blk_var1(
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_lnfc_blk_var1.unwrap()(A, TW, W1, B, cntl)
}

pub unsafe fn FLASH_Apply_Q_UT_inc(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_Q_UT_inc.unwrap()(side, trans, direct, storev, A, TW, W1, B)
}

pub unsafe fn FLASH_Apply_Q_UT_inc_create_workspace(
    TW: FLA_Obj,
    B: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_Q_UT_inc_create_workspace.unwrap()(TW, B, W)
}

pub unsafe fn FLA_Apply_Q_UT_inc_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_internal.unwrap()(
        side, trans, direct, storev, A, TW, W1, B, cntl,
    )
}

pub unsafe fn FLA_Apply_Q_UT_inc_lhfc(
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_lhfc.unwrap()(A, TW, W1, B, cntl)
}

pub unsafe fn FLA_Apply_Q_UT_inc_lnfc(
    A: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_Q_UT_inc_lnfc.unwrap()(A, TW, W1, B, cntl)
}

pub unsafe fn FLA_Apply_CAQ_UT_inc_lhfc_blk_var1(
    R: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apcaqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ_UT_inc_lhfc_blk_var1.unwrap()(R, TW, W1, B, cntl)
}

pub unsafe fn FLASH_Apply_CAQ_UT_inc(
    p: dim_t,
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    A: FLA_Obj,
    ATW: FLA_Obj,
    R: FLA_Obj,
    RTW: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_CAQ_UT_inc.unwrap()(
        p, side, trans, direct, storev, A, ATW, R, RTW, W, B,
    )
}

pub unsafe fn FLA_Apply_CAQ_UT_inc_apply_panels(
    nb_part: dim_t,
    A: FLA_Obj,
    ATW: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ_UT_inc_apply_panels.unwrap()(nb_part, A, ATW, W, B)
}

pub unsafe fn FLASH_Apply_CAQ_UT_inc_create_workspace(
    p: dim_t,
    TW: FLA_Obj,
    B: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_CAQ_UT_inc_create_workspace.unwrap()(p, TW, B, W)
}

pub unsafe fn FLA_Apply_CAQ_UT_inc_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    R: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apcaqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ_UT_inc_internal.unwrap()(
        side, trans, direct, storev, R, TW, W1, B, cntl,
    )
}

pub unsafe fn FLA_Apply_CAQ_UT_inc_lhfc(
    R: FLA_Obj,
    TW: FLA_Obj,
    W1: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_apcaqutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_CAQ_UT_inc_lhfc.unwrap()(R, TW, W1, B, cntl)
}

pub unsafe fn FLA_Apply_QUD_UT_inc_lhfc_blk_var1(
    T: FLA_Obj,
    W: FLA_Obj,
    B: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_inc_lhfc_blk_var1.unwrap()(T, W, B, U, C, V, D, cntl)
}

pub unsafe fn FLASH_Apply_QUD_UT_inc(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_QUD_UT_inc.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
}

pub unsafe fn FLA_Apply_QUD_UT_inc_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    direct: FLA_Direct,
    storev: FLA_Store,
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_inc_internal.unwrap()(
        side, trans, direct, storev, T, W, R, U, C, V, D, cntl,
    )
}

pub unsafe fn FLA_Apply_QUD_UT_inc_lhfc(
    T: FLA_Obj,
    W: FLA_Obj,
    R: FLA_Obj,
    U: FLA_Obj,
    C: FLA_Obj,
    V: FLA_Obj,
    D: FLA_Obj,
    cntl: *mut fla_apqudutinc_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_QUD_UT_inc_lhfc.unwrap()(T, W, R, U, C, V, D, cntl)
}

pub unsafe fn FLASH_Apply_QUD_UT_inc_create_workspace(
    T: FLA_Obj,
    R: FLA_Obj,
    W: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_QUD_UT_inc_create_workspace.unwrap()(T, R, W)
}

pub unsafe fn FLA_Apply_pivots_ln_blk_var1(
    p: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_appiv_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_blk_var1.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_ln_blk_var2(
    p: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_appiv_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_blk_var2.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_ln_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_opt_var1.unwrap()(p, A)
}

pub unsafe fn FLA_Apply_pivots_ln_opi_var1(
    n: c_int,
    a: *mut c_int,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_opi_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_ln_ops_var1(
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_ops_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_ln_opd_var1(
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_opd_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_ln_opc_var1(
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_opc_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_ln_opz_var1(
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln_opz_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_lt_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_lt_opt_var1.unwrap()(p, A)
}

pub unsafe fn FLA_Apply_pivots_rn_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rn_opt_var1.unwrap()(p, A)
}

pub unsafe fn FLA_Apply_pivots_rn_ops_var1(
    n: c_int,
    a: *mut f32,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rn_ops_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_rn_opd_var1(
    n: c_int,
    a: *mut f64,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rn_opd_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_rn_opc_var1(
    n: c_int,
    a: *mut scomplex,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rn_opc_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_rn_opz_var1(
    n: c_int,
    a: *mut dcomplex,
    a_rs: c_int,
    a_cs: c_int,
    k1: c_int,
    k2: c_int,
    p: *mut c_int,
    incp: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rn_opz_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
}

pub unsafe fn FLA_Apply_pivots_rt_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rt_opt_var1.unwrap()(p, A)
}

pub unsafe fn FLA_Apply_pivots_internal(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
    cntl: *mut fla_appiv_t,
) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_internal.unwrap()(side, trans, p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_ln(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_ln.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_lt(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_lt.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_rn(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rn.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Apply_pivots_rt(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
    dyload_lib().FLA_Apply_pivots_rt.unwrap()(p, A, cntl)
}

pub unsafe fn FLA_Eig_gest_il_blk_var1(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_blk_var1.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il_blk_var2(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_blk_var2.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il_blk_var3(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_blk_var3.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il_blk_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_blk_var4.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il_blk_var5(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_blk_var5.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_unb_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_unb_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_unb_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_unb_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_unb_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opt_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_ops_var1(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_ops_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opd_var1(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opd_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opc_var1(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opc_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opz_var1(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opz_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opt_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_ops_var2(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_ops_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opd_var2(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opd_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opc_var2(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opc_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opz_var2(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opz_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opt_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_ops_var3(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_ops_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opd_var3(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opd_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opc_var3(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opc_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opz_var3(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opz_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opt_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_ops_var4(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_ops_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opd_var4(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opd_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opc_var4(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opc_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opz_var4(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opz_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opt_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_il_ops_var5(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_ops_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opd_var5(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opd_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opc_var5(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opc_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_il_opz_var5(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il_opz_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_blk_var1(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_blk_var1.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu_blk_var2(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_blk_var2.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu_blk_var3(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_blk_var3.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu_blk_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_blk_var4.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu_blk_var5(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_blk_var5.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_unb_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_unb_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_unb_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_unb_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_unb_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opt_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_ops_var1(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_ops_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opd_var1(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opd_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opc_var1(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opc_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opz_var1(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opz_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opt_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_ops_var2(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_ops_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opd_var2(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opd_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opc_var2(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opc_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opz_var2(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opz_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opt_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_ops_var3(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f32,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_ops_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opd_var3(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut f64,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opd_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opc_var3(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut scomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opc_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opz_var3(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_Y: *mut dcomplex,
    rs_Y: c_int,
    cs_Y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opz_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opt_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_ops_var4(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_ops_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opd_var4(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opd_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opc_var4(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opc_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opz_var4(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opz_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opt_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_iu_ops_var5(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_ops_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opd_var5(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opd_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opc_var5(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opc_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_iu_opz_var5(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu_opz_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_blk_var1(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_blk_var1.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl_blk_var2(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_blk_var2.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl_blk_var3(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_blk_var3.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl_blk_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_blk_var4.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl_blk_var5(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_blk_var5.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_unb_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_unb_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_unb_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_unb_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_unb_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opt_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_ops_var1(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_ops_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opd_var1(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opd_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opc_var1(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opc_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opz_var1(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opz_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opt_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_ops_var2(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_ops_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opd_var2(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opd_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opc_var2(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opc_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opz_var2(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opz_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opt_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_ops_var3(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_ops_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opd_var3(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opd_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opc_var3(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opc_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opz_var3(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opz_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opt_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_ops_var4(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_ops_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opd_var4(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opd_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opc_var4(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opc_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opz_var4(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opz_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opt_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nl_ops_var5(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_ops_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opd_var5(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opd_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opc_var5(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opc_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nl_opz_var5(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl_opz_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_blk_var1(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_blk_var1.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu_blk_var2(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_blk_var2.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu_blk_var3(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_blk_var3.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu_blk_var4(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_blk_var4.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu_blk_var5(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_blk_var5.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_unb_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_unb_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_unb_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_unb_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_unb_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opt_var1.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_ops_var1(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_ops_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opd_var1(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opd_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opc_var1(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opc_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opz_var1(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opz_var1.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opt_var2.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_ops_var2(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_ops_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opd_var2(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opd_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opc_var2(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opc_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opz_var2(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opz_var2.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opt_var3.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_ops_var3(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_ops_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opd_var3(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opd_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opc_var3(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opc_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opz_var3(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opz_var3.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opt_var4.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_ops_var4(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_ops_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opd_var4(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opd_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opc_var4(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opc_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opz_var4(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opz_var4.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opt_var5.unwrap()(A, Y, B)
}

pub unsafe fn FLA_Eig_gest_nu_ops_var5(
    m_AB: c_int,
    buff_A: *mut f32,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f32,
    inc_y: c_int,
    buff_B: *mut f32,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_ops_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opd_var5(
    m_AB: c_int,
    buff_A: *mut f64,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut f64,
    inc_y: c_int,
    buff_B: *mut f64,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opd_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opc_var5(
    m_AB: c_int,
    buff_A: *mut scomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut scomplex,
    inc_y: c_int,
    buff_B: *mut scomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opc_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_nu_opz_var5(
    m_AB: c_int,
    buff_A: *mut dcomplex,
    rs_A: c_int,
    cs_A: c_int,
    buff_y: *mut dcomplex,
    inc_y: c_int,
    buff_B: *mut dcomplex,
    rs_B: c_int,
    cs_B: c_int,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu_opz_var5.unwrap()(
        m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B,
    )
}

pub unsafe fn FLA_Eig_gest_internal(
    inv: FLA_Inv,
    uplo: FLA_Uplo,
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_internal.unwrap()(inv, uplo, A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_il(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_il.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_iu(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_iu.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nl(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nl.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLA_Eig_gest_nu(
    A: FLA_Obj,
    Y: FLA_Obj,
    B: FLA_Obj,
    cntl: *mut fla_eig_gest_t,
) -> FLA_Error {
    dyload_lib().FLA_Eig_gest_nu.unwrap()(A, Y, B, cntl)
}

pub unsafe fn FLASH_Obj_blocksizes_check(
    H: FLA_Obj,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_blocksizes_check.unwrap()(H, b_m, b_n)
}

pub unsafe fn FLASH_Obj_create_helper_check(
    without_buffer: FLA_Bool,
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_helper_check.unwrap()(
        without_buffer,
        datatype,
        m,
        n,
        depth,
        b_m,
        b_n,
        H,
    )
}

pub unsafe fn FLASH_Obj_create_hierarchy_check(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    elem_sizes_m: *mut dim_t,
    elem_sizes_n: *mut dim_t,
    flat_matrix: FLA_Obj,
    H: *mut FLA_Obj,
    id: c_ulong,
    depth_overall: dim_t,
    depth_sizes_m: *mut dim_t,
    depth_sizes_n: *mut dim_t,
    m_offsets: *mut dim_t,
    n_offsets: *mut dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hierarchy_check.unwrap()(
        datatype,
        m,
        n,
        depth,
        elem_sizes_m,
        elem_sizes_n,
        flat_matrix,
        H,
        id,
        depth_overall,
        depth_sizes_m,
        depth_sizes_n,
        m_offsets,
        n_offsets,
    )
}

pub unsafe fn FLASH_Obj_create_conf_to_check(
    trans: FLA_Trans,
    H_cur: FLA_Obj,
    H_new: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_conf_to_check.unwrap()(trans, H_cur, H_new)
}

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat_check(
    trans: FLA_Trans,
    F: FLA_Obj,
    depth: dim_t,
    b_mn: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_conf_to_flat_check.unwrap()(trans, F, depth, b_mn, H)
}

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat_ext_check(
    trans: FLA_Trans,
    F: FLA_Obj,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_conf_to_flat_ext_check.unwrap()(trans, F, depth, b_m, b_n, H)
}

pub unsafe fn FLASH_Obj_create_flat_conf_to_hier_check(
    trans: FLA_Trans,
    H: FLA_Obj,
    F: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_flat_conf_to_hier_check.unwrap()(trans, H, F)
}

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat_check(
    F: FLA_Obj,
    depth: dim_t,
    b_mn: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_copy_of_flat_check.unwrap()(F, depth, b_mn, H)
}

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat_ext_check(
    F: FLA_Obj,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_copy_of_flat_ext_check.unwrap()(F, depth, b_m, b_n, H)
}

pub unsafe fn FLASH_Obj_create_flat_copy_of_hier_check(H: FLA_Obj, F: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_flat_copy_of_hier_check.unwrap()(H, F)
}

pub unsafe fn FLASH_Obj_free_check(H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_free_check.unwrap()(H)
}

pub unsafe fn FLASH_Obj_free_without_buffer_check(H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_free_without_buffer_check.unwrap()(H)
}

pub unsafe fn FLASH_Obj_free_hierarchy_check(H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_free_hierarchy_check.unwrap()(H)
}

pub unsafe fn FLASH_Obj_attach_buffer_check(
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_attach_buffer_check.unwrap()(buffer, rs, cs, H)
}

pub unsafe fn FLASH_Obj_attach_buffer_hierarchy_check(F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_attach_buffer_hierarchy_check.unwrap()(F, H)
}

pub unsafe fn FLASH_Part_create_2x1(
    A: FLA_Obj,
    AT: *mut FLA_Obj,
    AB: *mut FLA_Obj,
    n_rows: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLASH_Part_create_2x1.unwrap()(A, AT, AB, n_rows, side)
}

pub unsafe fn FLASH_Part_create_1x2(
    A: FLA_Obj,
    AL: *mut FLA_Obj,
    AR: *mut FLA_Obj,
    n_cols: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLASH_Part_create_1x2.unwrap()(A, AL, AR, n_cols, side)
}

pub unsafe fn FLASH_Part_create_2x2(
    A: FLA_Obj,
    ATL: *mut FLA_Obj,
    ATR: *mut FLA_Obj,
    ABL: *mut FLA_Obj,
    ABR: *mut FLA_Obj,
    n_rows: dim_t,
    n_cols: dim_t,
    side: FLA_Side,
) -> FLA_Error {
    dyload_lib().FLASH_Part_create_2x2.unwrap()(A, ATL, ATR, ABL, ABR, n_rows, n_cols, side)
}

pub unsafe fn FLASH_Part_free_2x1(AT: *mut FLA_Obj, AB: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Part_free_2x1.unwrap()(AT, AB)
}

pub unsafe fn FLASH_Part_free_1x2(AL: *mut FLA_Obj, AR: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Part_free_1x2.unwrap()(AL, AR)
}

pub unsafe fn FLASH_Part_free_2x2(
    ATL: *mut FLA_Obj,
    ATR: *mut FLA_Obj,
    ABL: *mut FLA_Obj,
    ABR: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Part_free_2x2.unwrap()(ATL, ATR, ABL, ABR)
}

pub unsafe fn FLASH_Obj_adjust_views(
    attach_buffer: FLA_Bool,
    offm: dim_t,
    offn: dim_t,
    m: dim_t,
    n: dim_t,
    A: FLA_Obj,
    S: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_adjust_views.unwrap()(attach_buffer, offm, offn, m, n, A, S)
}

pub unsafe fn FLASH_Obj_adjust_views_hierarchy(
    attach_buffer: FLA_Bool,
    offm: dim_t,
    offn: dim_t,
    m: dim_t,
    n: dim_t,
    A: FLA_Obj,
    S: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_adjust_views_hierarchy.unwrap()(attach_buffer, offm, offn, m, n, A, S)
}

pub unsafe fn FLASH_Obj_scalar_length(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_length.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_width(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_width.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_min_dim(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_min_dim.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_max_dim(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_max_dim.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_vector_dim(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_vector_dim.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_row_offset(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_row_offset.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_col_offset(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_col_offset.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_length_tl(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_length_tl.unwrap()(H)
}

pub unsafe fn FLASH_Obj_scalar_width_tl(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_scalar_width_tl.unwrap()(H)
}

pub unsafe fn FLASH_Obj_base_scalar_length(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_base_scalar_length.unwrap()(H)
}

pub unsafe fn FLASH_Obj_base_scalar_width(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_base_scalar_width.unwrap()(H)
}

pub unsafe fn FLASH_Obj_show(
    header: *mut c_char,
    H: FLA_Obj,
    elem_format: *mut c_char,
    footer: *mut c_char,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_show.unwrap()(header, H, elem_format, footer)
}

pub unsafe fn FLASH_Obj_show_hierarchy(
    H: FLA_Obj,
    i: dim_t,
    elem_format: *mut c_char,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_show_hierarchy.unwrap()(H, i, elem_format)
}

pub unsafe fn FLASH_Axpy_buffer_to_hier(
    alpha: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    i: dim_t,
    j: dim_t,
    H: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Axpy_buffer_to_hier.unwrap()(alpha, m, n, buffer, rs, cs, i, j, H)
}

pub unsafe fn FLASH_Axpy_hier_to_buffer(
    alpha: FLA_Obj,
    i: dim_t,
    j: dim_t,
    H: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_Axpy_hier_to_buffer.unwrap()(alpha, i, j, H, m, n, buffer, rs, cs)
}

pub unsafe fn FLASH_Axpy_flat_to_hier(
    alpha: FLA_Obj,
    F: FLA_Obj,
    i: dim_t,
    j: dim_t,
    H: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Axpy_flat_to_hier.unwrap()(alpha, F, i, j, H)
}

pub unsafe fn FLASH_Axpy_hier_to_flat(
    alpha: FLA_Obj,
    i: dim_t,
    j: dim_t,
    H: FLA_Obj,
    F: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Axpy_hier_to_flat.unwrap()(alpha, i, j, H, F)
}

pub unsafe fn FLASH_Axpy_hierarchy(
    direction: c_int,
    alpha: FLA_Obj,
    F: FLA_Obj,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Axpy_hierarchy.unwrap()(direction, alpha, F, H)
}

pub unsafe fn FLASH_Copy_buffer_to_hier(
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    i: dim_t,
    j: dim_t,
    H: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Copy_buffer_to_hier.unwrap()(m, n, buffer, rs, cs, i, j, H)
}

pub unsafe fn FLASH_Copy_hier_to_buffer(
    i: dim_t,
    j: dim_t,
    H: FLA_Obj,
    m: dim_t,
    n: dim_t,
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_Copy_hier_to_buffer.unwrap()(i, j, H, m, n, buffer, rs, cs)
}

pub unsafe fn FLASH_Copy_flat_to_hier(F: FLA_Obj, i: dim_t, j: dim_t, H: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Copy_flat_to_hier.unwrap()(F, i, j, H)
}

pub unsafe fn FLASH_Copy_hier_to_flat(i: dim_t, j: dim_t, H: FLA_Obj, F: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Copy_hier_to_flat.unwrap()(i, j, H, F)
}

pub unsafe fn FLASH_Copy_hierarchy(direction: c_int, F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Copy_hierarchy.unwrap()(direction, F, H)
}

pub unsafe fn FLASH_Obj_datatype(H: FLA_Obj) -> FLA_Datatype {
    dyload_lib().FLASH_Obj_datatype.unwrap()(H)
}

pub unsafe fn FLASH_Obj_depth(H: FLA_Obj) -> dim_t {
    dyload_lib().FLASH_Obj_depth.unwrap()(H)
}

pub unsafe fn FLASH_Obj_blocksizes(H: FLA_Obj, b_m: *mut dim_t, b_n: *mut dim_t) -> dim_t {
    dyload_lib().FLASH_Obj_blocksizes.unwrap()(H, b_m, b_n)
}

pub unsafe fn FLASH_Obj_create(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    b_mn: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create.unwrap()(datatype, m, n, depth, b_mn, H)
}

pub unsafe fn FLASH_Obj_create_ext(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_ext.unwrap()(datatype, m, n, depth, b_m, b_n, H)
}

pub unsafe fn FLASH_Obj_create_without_buffer(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    b_mn: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_without_buffer.unwrap()(datatype, m, n, depth, b_mn, H)
}

pub unsafe fn FLASH_Obj_create_without_buffer_ext(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_without_buffer_ext.unwrap()(datatype, m, n, depth, b_m, b_n, H)
}

pub unsafe fn FLASH_Obj_create_helper(
    without_buffer: FLA_Bool,
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_helper.unwrap()(
        without_buffer,
        datatype,
        m,
        n,
        depth,
        b_m,
        b_n,
        H,
    )
}

pub unsafe fn FLASH_Obj_create_hierarchy(
    datatype: FLA_Datatype,
    m: dim_t,
    n: dim_t,
    depth: dim_t,
    elem_sizes_m: *mut dim_t,
    elem_sizes_n: *mut dim_t,
    flat_matrix: FLA_Obj,
    H: *mut FLA_Obj,
    id: c_ulong,
    depth_overall: dim_t,
    depth_sizes_m: *mut dim_t,
    depth_sizes_n: *mut dim_t,
    m_offsets: *mut dim_t,
    n_offsets: *mut dim_t,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hierarchy.unwrap()(
        datatype,
        m,
        n,
        depth,
        elem_sizes_m,
        elem_sizes_n,
        flat_matrix,
        H,
        id,
        depth_overall,
        depth_sizes_m,
        depth_sizes_n,
        m_offsets,
        n_offsets,
    )
}

pub unsafe fn FLASH_Obj_create_conf_to(
    trans: FLA_Trans,
    H_cur: FLA_Obj,
    H_new: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_conf_to.unwrap()(trans, H_cur, H_new)
}

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat(
    trans: FLA_Trans,
    F: FLA_Obj,
    depth: dim_t,
    b_mn: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_conf_to_flat.unwrap()(trans, F, depth, b_mn, H)
}

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat_ext(
    trans: FLA_Trans,
    F: FLA_Obj,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_conf_to_flat_ext.unwrap()(trans, F, depth, b_m, b_n, H)
}

pub unsafe fn FLASH_Obj_create_flat_conf_to_hier(
    trans: FLA_Trans,
    H: FLA_Obj,
    F: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_flat_conf_to_hier.unwrap()(trans, H, F)
}

pub unsafe fn FLASH_Obj_create_copy_of(
    trans: FLA_Trans,
    H_cur: FLA_Obj,
    H_new: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_copy_of.unwrap()(trans, H_cur, H_new)
}

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat(
    F: FLA_Obj,
    depth: dim_t,
    b_mn: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_copy_of_flat.unwrap()(F, depth, b_mn, H)
}

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat_ext(
    F: FLA_Obj,
    depth: dim_t,
    b_m: *mut dim_t,
    b_n: *mut dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_hier_copy_of_flat_ext.unwrap()(F, depth, b_m, b_n, H)
}

pub unsafe fn FLASH_Obj_create_flat_copy_of_hier(H: FLA_Obj, F: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_flat_copy_of_hier.unwrap()(H, F)
}

pub unsafe fn FLASH_Obj_free(H: *mut FLA_Obj) {
    dyload_lib().FLASH_Obj_free.unwrap()(H)
}

pub unsafe fn FLASH_Obj_free_hierarchy(H: *mut FLA_Obj) {
    dyload_lib().FLASH_Obj_free_hierarchy.unwrap()(H)
}

pub unsafe fn FLASH_Obj_free_without_buffer(H: *mut FLA_Obj) {
    dyload_lib().FLASH_Obj_free_without_buffer.unwrap()(H)
}

pub unsafe fn FLASH_Obj_attach_buffer(
    buffer: *mut c_void,
    rs: dim_t,
    cs: dim_t,
    H: *mut FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Obj_attach_buffer.unwrap()(buffer, rs, cs, H)
}

pub unsafe fn FLASH_Obj_attach_buffer_hierarchy(F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_attach_buffer_hierarchy.unwrap()(F, H)
}

pub unsafe fn FLASH_Obj_flatten(H: FLA_Obj, F: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_flatten.unwrap()(H, F)
}

pub unsafe fn FLASH_Obj_hierarchify(F: FLA_Obj, H: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_hierarchify.unwrap()(F, H)
}

pub unsafe fn FLASH_Obj_extract_buffer(H: FLA_Obj) -> *mut c_void {
    dyload_lib().FLASH_Obj_extract_buffer.unwrap()(H)
}

pub unsafe fn FLASH_print_struct(H: FLA_Obj) {
    dyload_lib().FLASH_print_struct.unwrap()(H)
}

pub unsafe fn FLASH_print_struct_helper(H: FLA_Obj, indent: c_int) {
    dyload_lib().FLASH_print_struct_helper.unwrap()(H, indent)
}

pub unsafe fn FLASH_Max_elemwise_diff(A: FLA_Obj, B: FLA_Obj) -> f64 {
    dyload_lib().FLASH_Max_elemwise_diff.unwrap()(A, B)
}

pub unsafe fn FLASH_Random_matrix(H: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Random_matrix.unwrap()(H)
}

pub unsafe fn FLASH_Random_spd_matrix(uplo: FLA_Uplo, H: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Random_spd_matrix.unwrap()(uplo, H)
}

pub unsafe fn FLASH_Norm1(H: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Norm1.unwrap()(H, norm)
}

pub unsafe fn FLASH_Obj_shift_diagonal(conj: FLA_Conj, sigma: FLA_Obj, H: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_shift_diagonal.unwrap()(conj, sigma, H)
}

pub unsafe fn FLASH_Set(alpha: FLA_Obj, H: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Set.unwrap()(alpha, H)
}

pub unsafe fn FLASH_Obj_create_diag_panel(A: FLA_Obj, U: *mut FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Obj_create_diag_panel.unwrap()(A, U)
}

pub unsafe fn FLASH_LU_find_zero_on_diagonal(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_find_zero_on_diagonal.unwrap()(A)
}

pub unsafe fn FLASH_Triangularize(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Triangularize.unwrap()(uplo, diag, A)
}

pub unsafe fn FLASH_Hermitianize(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Hermitianize.unwrap()(uplo, A)
}

pub unsafe fn FLASH_LU_find_zero_on_diagonal_check(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_find_zero_on_diagonal_check.unwrap()(A)
}

pub unsafe fn FLASH_Axpy(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Axpy.unwrap()(alpha, A, B)
}

pub unsafe fn FLASH_Axpyt(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Axpyt.unwrap()(trans, alpha, A, B)
}

pub unsafe fn FLASH_Copy(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Copy.unwrap()(A, B)
}

pub unsafe fn FLASH_Copyt(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Copyt.unwrap()(trans, A, B)
}

pub unsafe fn FLASH_Scal(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Scal.unwrap()(alpha, A)
}

pub unsafe fn FLASH_Scalr(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Scalr.unwrap()(uplo, alpha, A)
}

pub unsafe fn FLASH_Gemv(
    transa: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    x: FLA_Obj,
    beta: FLA_Obj,
    y: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Gemv.unwrap()(transa, alpha, A, x, beta, y)
}

pub unsafe fn FLASH_Trsv(
    uplo: FLA_Uplo,
    transa: FLA_Trans,
    diag: FLA_Diag,
    A: FLA_Obj,
    x: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Trsv.unwrap()(uplo, transa, diag, A, x)
}

pub unsafe fn FLASH_Gemm(
    transa: FLA_Trans,
    transb: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Gemm.unwrap()(transa, transb, alpha, A, B, beta, C)
}

pub unsafe fn FLASH_Hemm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Hemm.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLASH_Herk(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Herk.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLASH_Her2k(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Her2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLASH_Symm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Symm.unwrap()(side, uplo, alpha, A, B, beta, C)
}

pub unsafe fn FLASH_Syrk(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Syrk.unwrap()(uplo, trans, alpha, A, beta, C)
}

pub unsafe fn FLASH_Syr2k(
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    beta: FLA_Obj,
    C: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Syr2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
}

pub unsafe fn FLASH_Trmm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Trmm.unwrap()(side, uplo, trans, diag, alpha, A, B)
}

pub unsafe fn FLASH_Trsm(
    side: FLA_Side,
    uplo: FLA_Uplo,
    trans: FLA_Trans,
    diag: FLA_Diag,
    alpha: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Trsm.unwrap()(side, uplo, trans, diag, alpha, A, B)
}

pub unsafe fn FLASH_Chol(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Chol.unwrap()(uplo, A)
}

pub unsafe fn FLASH_LU_nopiv(A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_nopiv.unwrap()(A)
}

pub unsafe fn FLASH_LU_piv(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_piv.unwrap()(A, p)
}

pub unsafe fn FLASH_LU_incpiv(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LU_incpiv.unwrap()(A, p, L)
}

pub unsafe fn FLASH_FS_incpiv(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, b: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_FS_incpiv.unwrap()(A, p, L, b)
}

pub unsafe fn FLASH_Trinv(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Trinv.unwrap()(uplo, diag, A)
}

pub unsafe fn FLASH_Ttmm(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Ttmm.unwrap()(uplo, A)
}

pub unsafe fn FLASH_SPDinv(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_SPDinv.unwrap()(uplo, A)
}

pub unsafe fn FLASH_Sylv(
    transa: FLA_Trans,
    transb: FLA_Trans,
    isgn: FLA_Obj,
    A: FLA_Obj,
    B: FLA_Obj,
    C: FLA_Obj,
    scale: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Sylv.unwrap()(transa, transb, isgn, A, B, C, scale)
}

pub unsafe fn FLASH_Apply_pivots(
    side: FLA_Side,
    trans: FLA_Trans,
    p: FLA_Obj,
    A: FLA_Obj,
) -> FLA_Error {
    dyload_lib().FLASH_Apply_pivots.unwrap()(side, trans, p, A)
}

pub unsafe fn FLASH_Eig_gest(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_Eig_gest.unwrap()(inv, uplo, A, B)
}

pub unsafe fn FLASH_LQ_UT_inv(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LQ_UT_inv.unwrap()(A, TW)
}

pub unsafe fn FLASH_LQ2_UT(B: FLA_Obj, C: FLA_Obj, T: FLA_Obj) -> FLA_Error {
    dyload_lib().FLASH_LQ2_UT.unwrap()(B, C, T)
}

pub unsafe fn FLASH_Queue_begin() {
    dyload_lib().FLASH_Queue_begin.unwrap()()
}

pub unsafe fn FLASH_Queue_end() {
    dyload_lib().FLASH_Queue_end.unwrap()()
}

pub unsafe fn FLASH_Queue_stack_depth() -> c_uint {
    dyload_lib().FLASH_Queue_stack_depth.unwrap()()
}

pub unsafe fn FLASH_Queue_enable() -> FLA_Error {
    dyload_lib().FLASH_Queue_enable.unwrap()()
}

pub unsafe fn FLASH_Queue_disable() -> FLA_Error {
    dyload_lib().FLASH_Queue_disable.unwrap()()
}

pub unsafe fn FLASH_Queue_get_enabled() -> FLA_Bool {
    dyload_lib().FLASH_Queue_get_enabled.unwrap()()
}

pub unsafe fn FLASH_Queue_set_num_threads(n_threads: c_uint) {
    dyload_lib().FLASH_Queue_set_num_threads.unwrap()(n_threads)
}

pub unsafe fn FLASH_Queue_get_num_threads() -> c_uint {
    dyload_lib().FLASH_Queue_get_num_threads.unwrap()()
}

pub unsafe fn spotrf_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().spotrf_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn dpotrf_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dpotrf_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn cpotrf_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cpotrf_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn zpotrf_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zpotrf_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn spotf2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().spotf2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn dpotf2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dpotf2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn cpotf2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cpotf2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn zpotf2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zpotf2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn sgetrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgetrf_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn dgetrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgetrf_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn cgetrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgetrf_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn zgetrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgetrf_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn sgetf2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgetf2_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn dgetf2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgetf2_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn cgetf2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgetf2_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn zgetf2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    ipiv: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgetf2_.unwrap()(m, n, a, lda, ipiv, info)
}

pub unsafe fn sgeqrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn dgeqrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn cgeqrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn zgeqrf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn sgeqr2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn dgeqr2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn cgeqr2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn zgeqr2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn sgeqpf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, info)
}

pub unsafe fn dgeqpf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, info)
}

pub unsafe fn cgeqpf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, rwork, info)
}

pub unsafe fn zgeqpf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, rwork, info)
}

pub unsafe fn sgeqp3_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, info)
}

pub unsafe fn dgeqp3_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, info)
}

pub unsafe fn cgeqp3_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, rwork, info)
}

pub unsafe fn zgeqp3_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    jpvt: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, rwork, info)
}

pub unsafe fn sgelqf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn dgelqf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn cgelqf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn zgelqf_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
}

pub unsafe fn sgelq2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgelq2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn dgelq2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgelq2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn cgelq2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgelq2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn zgelq2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgelq2_.unwrap()(m, n, a, lda, tau, work, info)
}

pub unsafe fn sgelsd_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    s: *mut f32,
    rcond: *mut f32,
    rank: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgelsd_.unwrap()(
        m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info,
    )
}

pub unsafe fn dgelsd_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    s: *mut f64,
    rcond: *mut f64,
    rank: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgelsd_.unwrap()(
        m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info,
    )
}

pub unsafe fn cgelsd_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    s: *mut f32,
    rcond: *mut f32,
    rank: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgelsd_.unwrap()(
        m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info,
    )
}

pub unsafe fn zgelsd_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    s: *mut f64,
    rcond: *mut f64,
    rank: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgelsd_.unwrap()(
        m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info,
    )
}

pub unsafe fn sgelss_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    s: *mut f32,
    rcond: *mut f32,
    rank: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgelss_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info)
}

pub unsafe fn dgelss_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    s: *mut f64,
    rcond: *mut f64,
    rank: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgelss_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info)
}

pub unsafe fn cgelss_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    s: *mut f32,
    rcond: *mut f32,
    rank: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgelss_.unwrap()(
        m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info,
    )
}

pub unsafe fn zgelss_(
    m: *mut c_int,
    n: *mut c_int,
    nrhs: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    s: *mut f64,
    rcond: *mut f64,
    rank: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgelss_.unwrap()(
        m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info,
    )
}

pub unsafe fn slauum_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().slauum_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn dlauum_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dlauum_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn clauum_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().clauum_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn zlauum_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zlauum_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn slauu2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().slauu2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn dlauu2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dlauu2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn clauu2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().clauu2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn zlauu2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zlauu2_.unwrap()(uplo, n, a, lda, info)
}

pub unsafe fn spotri_(
    uplo: *mut c_char,
    n: *mut c_int,
    buff_A: *mut f32,
    ldim_A: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().spotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
}

pub unsafe fn dpotri_(
    uplo: *mut c_char,
    n: *mut c_int,
    buff_A: *mut f64,
    ldim_A: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dpotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
}

pub unsafe fn cpotri_(
    uplo: *mut c_char,
    n: *mut c_int,
    buff_A: *mut scomplex,
    ldim_A: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cpotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
}

pub unsafe fn zpotri_(
    uplo: *mut c_char,
    n: *mut c_int,
    buff_A: *mut dcomplex,
    ldim_A: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zpotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
}

pub unsafe fn strtri_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().strtri_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn dtrtri_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dtrtri_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn ctrtri_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ctrtri_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn ztrtri_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ztrtri_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn strti2_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().strti2_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn dtrti2_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dtrti2_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn ctrti2_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ctrti2_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn ztrti2_(
    uplo: *mut c_char,
    diag: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ztrti2_.unwrap()(uplo, diag, n, a, lda, info)
}

pub unsafe fn strsyl_(
    transa: *mut c_char,
    transb: *mut c_char,
    isgn: *mut c_int,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    c: *mut f32,
    ldc: *mut c_int,
    scale: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().strsyl_.unwrap()(transa, transb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
}

pub unsafe fn dtrsyl_(
    transa: *mut c_char,
    transb: *mut c_char,
    isgn: *mut c_int,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    c: *mut f64,
    ldc: *mut c_int,
    scale: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dtrsyl_.unwrap()(transa, transb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
}

pub unsafe fn ctrsyl_(
    transa: *mut c_char,
    transb: *mut c_char,
    isgn: *mut c_int,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    c: *mut scomplex,
    ldc: *mut c_int,
    scale: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ctrsyl_.unwrap()(transa, transb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
}

pub unsafe fn ztrsyl_(
    transa: *mut c_char,
    transb: *mut c_char,
    isgn: *mut c_int,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    c: *mut dcomplex,
    ldc: *mut c_int,
    scale: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ztrsyl_.unwrap()(transa, transb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
}

pub unsafe fn sgehrd_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
}

pub unsafe fn dgehrd_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
}

pub unsafe fn cgehrd_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
}

pub unsafe fn zgehrd_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
}

pub unsafe fn sgehd2_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
}

pub unsafe fn dgehd2_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
}

pub unsafe fn cgehd2_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
}

pub unsafe fn zgehd2_(
    n: *mut c_int,
    ilo: *mut c_int,
    ihi: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
}

pub unsafe fn ssytrd_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssytrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
}

pub unsafe fn dsytrd_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsytrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
}

pub unsafe fn chetrd_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().chetrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
}

pub unsafe fn zhetrd_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zhetrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
}

pub unsafe fn ssytd2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tau: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssytd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
}

pub unsafe fn dsytd2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tau: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsytd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
}

pub unsafe fn chetd2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tau: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().chetd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
}

pub unsafe fn zhetd2_(
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tau: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zhetd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
}

pub unsafe fn sgebrd_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut f32,
    taup: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
}

pub unsafe fn dgebrd_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut f64,
    taup: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
}

pub unsafe fn cgebrd_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut scomplex,
    taup: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
}

pub unsafe fn zgebrd_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut dcomplex,
    taup: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
}

pub unsafe fn sgebd2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut f32,
    taup: *mut f32,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
}

pub unsafe fn dgebd2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut f64,
    taup: *mut f64,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
}

pub unsafe fn cgebd2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    tauq: *mut scomplex,
    taup: *mut scomplex,
    work: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
}

pub unsafe fn zgebd2_(
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    tauq: *mut dcomplex,
    taup: *mut dcomplex,
    work: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
}

pub unsafe fn ssygst_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssygst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn dsygst_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsygst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn chegst_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().chegst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn zhegst_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zhegst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn ssygs2_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    b: *mut f32,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssygs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn dsygs2_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    b: *mut f64,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsygs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn chegs2_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    b: *mut scomplex,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().chegs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn zhegs2_(
    itype: *mut c_int,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    b: *mut dcomplex,
    ldb: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zhegs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
}

pub unsafe fn slarft_(
    direct: *mut c_char,
    storev: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    v: *mut f32,
    ldv: *mut c_int,
    tau: *mut f32,
    t: *mut f32,
    ldt: *mut c_int,
) -> c_int {
    dyload_lib().slarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn dlarft_(
    direct: *mut c_char,
    storev: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    v: *mut f64,
    ldv: *mut c_int,
    tau: *mut f64,
    t: *mut f64,
    ldt: *mut c_int,
) -> c_int {
    dyload_lib().dlarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn clarft_(
    direct: *mut c_char,
    storev: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    v: *mut scomplex,
    ldv: *mut c_int,
    tau: *mut scomplex,
    t: *mut scomplex,
    ldt: *mut c_int,
) -> c_int {
    dyload_lib().clarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn zlarft_(
    direct: *mut c_char,
    storev: *mut c_char,
    n: *mut c_int,
    k: *mut c_int,
    v: *mut dcomplex,
    ldv: *mut c_int,
    tau: *mut dcomplex,
    t: *mut dcomplex,
    ldt: *mut c_int,
) -> c_int {
    dyload_lib().zlarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
}

pub unsafe fn slarfg_(
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: *mut c_int,
    tau: *mut f32,
) -> c_int {
    dyload_lib().slarfg_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn dlarfg_(
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: *mut c_int,
    tau: *mut f64,
) -> c_int {
    dyload_lib().dlarfg_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn clarfg_(
    n: *mut c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: *mut c_int,
    tau: *mut scomplex,
) -> c_int {
    dyload_lib().clarfg_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn zlarfg_(
    n: *mut c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: *mut c_int,
    tau: *mut dcomplex,
) -> c_int {
    dyload_lib().zlarfg_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn slarfgp_(
    n: *mut c_int,
    alpha: *mut f32,
    x: *mut f32,
    incx: *mut c_int,
    tau: *mut f32,
) -> c_int {
    dyload_lib().slarfgp_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn dlarfgp_(
    n: *mut c_int,
    alpha: *mut f64,
    x: *mut f64,
    incx: *mut c_int,
    tau: *mut f64,
) -> c_int {
    dyload_lib().dlarfgp_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn clarfgp_(
    n: *mut c_int,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: *mut c_int,
    tau: *mut scomplex,
) -> c_int {
    dyload_lib().clarfgp_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn zlarfgp_(
    n: *mut c_int,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: *mut c_int,
    tau: *mut dcomplex,
) -> c_int {
    dyload_lib().zlarfgp_.unwrap()(n, alpha, x, incx, tau)
}

pub unsafe fn sorgqr_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sorgqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn dorgqr_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dorgqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn cungqr_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cungqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn zungqr_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zungqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn sormqr_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sormqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn dormqr_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dormqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn cunmqr_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunmqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn zunmqr_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunmqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn sorm2r_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sorm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn dorm2r_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dorm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn cunm2r_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
    work: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn zunm2r_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
    work: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn sorglq_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sorglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn dorglq_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dorglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn cunglq_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn zunglq_(
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn sormlq_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sormlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn dormlq_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dormlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn cunmlq_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunmlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn zunmlq_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunmlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn sorml2_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sorml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn dorml2_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dorml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn cunml2_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
    work: *mut scomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn zunml2_(
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
    work: *mut dcomplex,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
}

pub unsafe fn sorgtr_(
    uplo: *mut c_char,
    m: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sorgtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
}

pub unsafe fn dorgtr_(
    uplo: *mut c_char,
    m: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dorgtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
}

pub unsafe fn cungtr_(
    uplo: *mut c_char,
    m: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cungtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
}

pub unsafe fn zungtr_(
    uplo: *mut c_char,
    m: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zungtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
}

pub unsafe fn sormtr_(
    side: *mut c_char,
    uplo: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sormtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn dormtr_(
    side: *mut c_char,
    uplo: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dormtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn cunmtr_(
    side: *mut c_char,
    uplo: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunmtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn zunmtr_(
    side: *mut c_char,
    uplo: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunmtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
}

pub unsafe fn sorgbr_(
    vect: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sorgbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn dorgbr_(
    vect: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dorgbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn cungbr_(
    vect: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cungbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn zungbr_(
    vect: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zungbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
}

pub unsafe fn sormbr_(
    vect: *mut c_char,
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    tau: *mut f32,
    c: *mut f32,
    ldc: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sormbr_.unwrap()(
        vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,
    )
}

pub unsafe fn dormbr_(
    vect: *mut c_char,
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    tau: *mut f64,
    c: *mut f64,
    ldc: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dormbr_.unwrap()(
        vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,
    )
}

pub unsafe fn cunmbr_(
    vect: *mut c_char,
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    tau: *mut scomplex,
    c: *mut scomplex,
    ldc: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cunmbr_.unwrap()(
        vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,
    )
}

pub unsafe fn zunmbr_(
    vect: *mut c_char,
    side: *mut c_char,
    trans: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    k: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    tau: *mut dcomplex,
    c: *mut dcomplex,
    ldc: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zunmbr_.unwrap()(
        vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info,
    )
}

pub unsafe fn ssteqr_(
    jobz: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: *mut c_int,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssteqr_.unwrap()(jobz, n, d, e, z, ldz, work, info)
}

pub unsafe fn dsteqr_(
    jobz: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: *mut c_int,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsteqr_.unwrap()(jobz, n, d, e, z, ldz, work, info)
}

pub unsafe fn csteqr_(
    jobz: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    z: *mut scomplex,
    ldz: *mut c_int,
    work: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().csteqr_.unwrap()(jobz, n, d, e, z, ldz, work, info)
}

pub unsafe fn zsteqr_(
    jobz: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    z: *mut dcomplex,
    ldz: *mut c_int,
    work: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zsteqr_.unwrap()(jobz, n, d, e, z, ldz, work, info)
}

pub unsafe fn sstedc_(
    compz: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    z: *mut f32,
    ldz: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sstedc_.unwrap()(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)
}

pub unsafe fn dstedc_(
    compz: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    z: *mut f64,
    ldz: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dstedc_.unwrap()(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)
}

pub unsafe fn cstedc_(
    compz: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    z: *mut scomplex,
    ldz: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    lrwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cstedc_.unwrap()(
        compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,
    )
}

pub unsafe fn zstedc_(
    compz: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    z: *mut dcomplex,
    ldz: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    lrwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zstedc_.unwrap()(
        compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info,
    )
}

pub unsafe fn sstemr_(
    jobz: *mut c_char,
    range: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    vl: *mut c_int,
    vu: *mut c_int,
    il: *mut c_int,
    iu: *mut c_int,
    m: *mut c_int,
    w: *mut f32,
    z: *mut f32,
    ldz: *mut c_int,
    nzc: *mut c_int,
    isuppz: *mut c_int,
    tryrac: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sstemr_.unwrap()(
        jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork,
        iwork, liwork, info,
    )
}

pub unsafe fn dstemr_(
    jobz: *mut c_char,
    range: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    vl: *mut c_int,
    vu: *mut c_int,
    il: *mut c_int,
    iu: *mut c_int,
    m: *mut c_int,
    w: *mut f64,
    z: *mut f64,
    ldz: *mut c_int,
    nzc: *mut c_int,
    isuppz: *mut c_int,
    tryrac: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dstemr_.unwrap()(
        jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork,
        iwork, liwork, info,
    )
}

pub unsafe fn cstemr_(
    jobz: *mut c_char,
    range: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    vl: *mut c_int,
    vu: *mut c_int,
    il: *mut c_int,
    iu: *mut c_int,
    m: *mut c_int,
    w: *mut f32,
    z: *mut scomplex,
    ldz: *mut c_int,
    nzc: *mut c_int,
    isuppz: *mut c_int,
    tryrac: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cstemr_.unwrap()(
        jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork,
        iwork, liwork, info,
    )
}

pub unsafe fn zstemr_(
    jobz: *mut c_char,
    range: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    vl: *mut c_int,
    vu: *mut c_int,
    il: *mut c_int,
    iu: *mut c_int,
    m: *mut c_int,
    w: *mut f64,
    z: *mut dcomplex,
    ldz: *mut c_int,
    nzc: *mut c_int,
    isuppz: *mut c_int,
    tryrac: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zstemr_.unwrap()(
        jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork,
        iwork, liwork, info,
    )
}

pub unsafe fn ssyev_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    w: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssyev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
}

pub unsafe fn dsyev_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    w: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsyev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
}

pub unsafe fn cheev_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    w: *mut f32,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cheev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
}

pub unsafe fn zheev_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    w: *mut f64,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zheev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
}

pub unsafe fn ssyevd_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    w: *mut f32,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssyevd_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)
}

pub unsafe fn dsyevd_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    w: *mut f64,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsyevd_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)
}

pub unsafe fn cheevd_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    w: *mut f32,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    lrwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cheevd_.unwrap()(
        jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info,
    )
}

pub unsafe fn zheevd_(
    jobz: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    w: *mut f64,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    lrwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zheevd_.unwrap()(
        jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info,
    )
}

pub unsafe fn ssyevr_(
    jobz: *mut c_char,
    range: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    vl: *mut f32,
    vu: *mut f32,
    il: *mut c_int,
    iu: *mut c_int,
    abstol: *mut f32,
    m: *mut c_int,
    w: *mut f32,
    z: *mut f32,
    ldz: *mut c_int,
    isuppz: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().ssyevr_.unwrap()(
        jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork,
        iwork, liwork, info,
    )
}

pub unsafe fn dsyevr_(
    jobz: *mut c_char,
    range: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    vl: *mut f64,
    vu: *mut f64,
    il: *mut c_int,
    iu: *mut c_int,
    abstol: *mut f64,
    m: *mut c_int,
    w: *mut f64,
    z: *mut f64,
    ldz: *mut c_int,
    isuppz: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dsyevr_.unwrap()(
        jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork,
        iwork, liwork, info,
    )
}

pub unsafe fn cheevr_(
    jobz: *mut c_char,
    range: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    vl: *mut f32,
    vu: *mut f32,
    il: *mut c_int,
    iu: *mut c_int,
    abstol: *mut f32,
    m: *mut c_int,
    w: *mut f32,
    z: *mut scomplex,
    ldz: *mut c_int,
    isuppz: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    lrwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cheevr_.unwrap()(
        jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork,
        rwork, lrwork, iwork, liwork, info,
    )
}

pub unsafe fn zheevr_(
    jobz: *mut c_char,
    range: *mut c_char,
    uplo: *mut c_char,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    vl: *mut f64,
    vu: *mut f64,
    il: *mut c_int,
    iu: *mut c_int,
    abstol: *mut f64,
    m: *mut c_int,
    w: *mut f64,
    z: *mut dcomplex,
    ldz: *mut c_int,
    isuppz: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    lrwork: *mut c_int,
    iwork: *mut c_int,
    liwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zheevr_.unwrap()(
        jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork,
        rwork, lrwork, iwork, liwork, info,
    )
}

pub unsafe fn sbdsqr_(
    uplo: *mut c_char,
    n: *mut c_int,
    ncvt: *mut c_int,
    nru: *mut c_int,
    ncc: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    vt: *mut f32,
    ldvt: *mut c_int,
    u: *mut f32,
    ldu: *mut c_int,
    c: *mut f32,
    ldc: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sbdsqr_.unwrap()(
        uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info,
    )
}

pub unsafe fn dbdsqr_(
    uplo: *mut c_char,
    n: *mut c_int,
    ncvt: *mut c_int,
    nru: *mut c_int,
    ncc: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    vt: *mut f64,
    ldvt: *mut c_int,
    u: *mut f64,
    ldu: *mut c_int,
    c: *mut f64,
    ldc: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dbdsqr_.unwrap()(
        uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info,
    )
}

pub unsafe fn cbdsqr_(
    uplo: *mut c_char,
    n: *mut c_int,
    ncvt: *mut c_int,
    nru: *mut c_int,
    ncc: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    vt: *mut scomplex,
    ldvt: *mut c_int,
    u: *mut scomplex,
    ldu: *mut c_int,
    c: *mut scomplex,
    ldc: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cbdsqr_.unwrap()(
        uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info,
    )
}

pub unsafe fn zbdsqr_(
    uplo: *mut c_char,
    n: *mut c_int,
    ncvt: *mut c_int,
    nru: *mut c_int,
    ncc: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    vt: *mut dcomplex,
    ldvt: *mut c_int,
    u: *mut dcomplex,
    ldu: *mut c_int,
    c: *mut dcomplex,
    ldc: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zbdsqr_.unwrap()(
        uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info,
    )
}

pub unsafe fn sbdsdc_(
    uplo: *mut c_char,
    compq: *mut c_char,
    n: *mut c_int,
    d: *mut f32,
    e: *mut f32,
    u: *mut f32,
    ldu: *mut c_int,
    vt: *mut f32,
    ldvt: *mut c_int,
    q: *mut f32,
    iq: *mut f32,
    work: *mut f32,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sbdsdc_.unwrap()(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info)
}

pub unsafe fn dbdsdc_(
    uplo: *mut c_char,
    compq: *mut c_char,
    n: *mut c_int,
    d: *mut f64,
    e: *mut f64,
    u: *mut f64,
    ldu: *mut c_int,
    vt: *mut f64,
    ldvt: *mut c_int,
    q: *mut f64,
    iq: *mut f64,
    work: *mut f64,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dbdsdc_.unwrap()(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info)
}

pub unsafe fn sgesvd_(
    jobu: *mut c_char,
    jobv: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    s: *mut f32,
    u: *mut f32,
    ldu: *mut c_int,
    vt: *mut f32,
    ldvt: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgesvd_.unwrap()(jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)
}

pub unsafe fn dgesvd_(
    jobu: *mut c_char,
    jobv: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    s: *mut f64,
    u: *mut f64,
    ldu: *mut c_int,
    vt: *mut f64,
    ldvt: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgesvd_.unwrap()(jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)
}

pub unsafe fn cgesvd_(
    jobu: *mut c_char,
    jobv: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    s: *mut f32,
    u: *mut scomplex,
    ldu: *mut c_int,
    vt: *mut scomplex,
    ldvt: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgesvd_.unwrap()(
        jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info,
    )
}

pub unsafe fn zgesvd_(
    jobu: *mut c_char,
    jobv: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    s: *mut f64,
    u: *mut dcomplex,
    ldu: *mut c_int,
    vt: *mut dcomplex,
    ldvt: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgesvd_.unwrap()(
        jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info,
    )
}

pub unsafe fn sgesdd_(
    jobz: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    s: *mut f32,
    u: *mut f32,
    ldu: *mut c_int,
    vt: *mut f32,
    ldvt: *mut c_int,
    work: *mut f32,
    lwork: *mut c_int,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().sgesdd_.unwrap()(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info)
}

pub unsafe fn dgesdd_(
    jobz: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    s: *mut f64,
    u: *mut f64,
    ldu: *mut c_int,
    vt: *mut f64,
    ldvt: *mut c_int,
    work: *mut f64,
    lwork: *mut c_int,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().dgesdd_.unwrap()(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info)
}

pub unsafe fn cgesdd_(
    jobz: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    s: *mut f32,
    u: *mut scomplex,
    ldu: *mut c_int,
    vt: *mut scomplex,
    ldvt: *mut c_int,
    work: *mut scomplex,
    lwork: *mut c_int,
    rwork: *mut f32,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().cgesdd_.unwrap()(
        jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info,
    )
}

pub unsafe fn zgesdd_(
    jobz: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    s: *mut f64,
    u: *mut dcomplex,
    ldu: *mut c_int,
    vt: *mut dcomplex,
    ldvt: *mut c_int,
    work: *mut dcomplex,
    lwork: *mut c_int,
    rwork: *mut f64,
    iwork: *mut c_int,
    info: *mut c_int,
) -> c_int {
    dyload_lib().zgesdd_.unwrap()(
        jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info,
    )
}

pub unsafe fn slaswp_(
    n: *mut c_int,
    a: *mut f32,
    lda: *mut c_int,
    k1: *mut c_int,
    k2: *mut c_int,
    ipiv: *mut c_int,
    incx: *mut c_int,
) -> c_int {
    dyload_lib().slaswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn dlaswp_(
    n: *mut c_int,
    a: *mut f64,
    lda: *mut c_int,
    k1: *mut c_int,
    k2: *mut c_int,
    ipiv: *mut c_int,
    incx: *mut c_int,
) -> c_int {
    dyload_lib().dlaswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn claswp_(
    n: *mut c_int,
    a: *mut scomplex,
    lda: *mut c_int,
    k1: *mut c_int,
    k2: *mut c_int,
    ipiv: *mut c_int,
    incx: *mut c_int,
) -> c_int {
    dyload_lib().claswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn zlaswp_(
    n: *mut c_int,
    a: *mut dcomplex,
    lda: *mut c_int,
    k1: *mut c_int,
    k2: *mut c_int,
    ipiv: *mut c_int,
    incx: *mut c_int,
) -> c_int {
    dyload_lib().zlaswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
}

pub unsafe fn slaset_(
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f32,
    beta: *mut f32,
    a: *mut f32,
    lda: *mut c_int,
) -> c_int {
    dyload_lib().slaset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn dlaset_(
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut f64,
    beta: *mut f64,
    a: *mut f64,
    lda: *mut c_int,
) -> c_int {
    dyload_lib().dlaset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn claset_(
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut scomplex,
    beta: *mut scomplex,
    a: *mut scomplex,
    lda: *mut c_int,
) -> c_int {
    dyload_lib().claset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
}

pub unsafe fn zlaset_(
    uplo: *mut c_char,
    m: *mut c_int,
    n: *mut c_int,
    alpha: *mut dcomplex,
    beta: *mut dcomplex,
    a: *mut dcomplex,
    lda: *mut c_int,
) -> c_int {
    dyload_lib().zlaset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
}
