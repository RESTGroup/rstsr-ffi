
//! FFI function declarations for non-dynamic-loading.
//!
//! This file is generated automatically.

use super::*;

unsafe extern "C" {
    pub fn bli_pthread_create(
        thread: *mut bli_pthread_t,
        attr: *const bli_pthread_attr_t,
        start_routine: Option<
            extern "C" fn(arg1: *mut c_void) -> *mut c_void,
        >,
        arg: *mut c_void,
    ) -> c_int;
    pub fn bli_pthread_join(
        thread: bli_pthread_t,
        retval: *mut *mut c_void,
    ) -> c_int;
    pub fn bli_pthread_mutex_init(
        mutex: *mut bli_pthread_mutex_t,
        attr: *const bli_pthread_mutexattr_t,
    ) -> c_int;
    pub fn bli_pthread_mutex_destroy(mutex: *mut bli_pthread_mutex_t) -> c_int;
    pub fn bli_pthread_mutex_lock(mutex: *mut bli_pthread_mutex_t) -> c_int;
    pub fn bli_pthread_mutex_trylock(mutex: *mut bli_pthread_mutex_t) -> c_int;
    pub fn bli_pthread_mutex_unlock(mutex: *mut bli_pthread_mutex_t) -> c_int;
    pub fn bli_pthread_cond_init(
        cond: *mut bli_pthread_cond_t,
        attr: *const bli_pthread_condattr_t,
    ) -> c_int;
    pub fn bli_pthread_cond_destroy(cond: *mut bli_pthread_cond_t) -> c_int;
    pub fn bli_pthread_cond_wait(
        cond: *mut bli_pthread_cond_t,
        mutex: *mut bli_pthread_mutex_t,
    ) -> c_int;
    pub fn bli_pthread_cond_broadcast(cond: *mut bli_pthread_cond_t) -> c_int;
    pub fn bli_pthread_once(
        once: *mut bli_pthread_once_t,
        init: Option<extern "C" fn()>,
    );
    pub fn bli_pthread_barrier_init(
        barrier: *mut bli_pthread_barrier_t,
        attr: *const bli_pthread_barrierattr_t,
        count: c_uint,
    ) -> c_int;
    pub fn bli_pthread_barrier_destroy(barrier: *mut bli_pthread_barrier_t) -> c_int;
    pub fn bli_pthread_barrier_wait(barrier: *mut bli_pthread_barrier_t) -> c_int;
    pub fn bli_pthread_switch_on(
        sw: *mut bli_pthread_switch_t,
        init: Option<extern "C" fn() -> c_int>,
    ) -> c_int;
    pub fn bli_pthread_switch_off(
        sw: *mut bli_pthread_switch_t,
        deinit: Option<extern "C" fn() -> c_int>,
    ) -> c_int;
    pub fn bli_cntx_init_skx(cntx: *mut cntx_t);
    pub fn bli_cntx_init_skx_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_skx_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_knl(cntx: *mut cntx_t);
    pub fn bli_cntx_init_knl_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_knl_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_haswell(cntx: *mut cntx_t);
    pub fn bli_cntx_init_haswell_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_haswell_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_sandybridge(cntx: *mut cntx_t);
    pub fn bli_cntx_init_sandybridge_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_sandybridge_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_penryn(cntx: *mut cntx_t);
    pub fn bli_cntx_init_penryn_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_penryn_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen3(cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen3_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen3_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen2(cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen2_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen2_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen(cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_zen_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_excavator(cntx: *mut cntx_t);
    pub fn bli_cntx_init_excavator_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_excavator_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_steamroller(cntx: *mut cntx_t);
    pub fn bli_cntx_init_steamroller_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_steamroller_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_piledriver(cntx: *mut cntx_t);
    pub fn bli_cntx_init_piledriver_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_piledriver_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_bulldozer(cntx: *mut cntx_t);
    pub fn bli_cntx_init_bulldozer_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_bulldozer_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_cntx_init_generic(cntx: *mut cntx_t);
    pub fn bli_cntx_init_generic_ref(cntx: *mut cntx_t);
    pub fn bli_cntx_init_generic_ind(method: ind_t, cntx: *mut cntx_t);
    pub fn bli_sgemm_skx_asm_32x12_l2(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_skx_asm_12x32_l2(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_skx_asm_16x12_l2(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_skx_asm_16x14(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_knl_asm_24x16(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_knl_asm_24x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_spackm_knl_asm_24x16(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_knl_asm_24x8(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_knl_asm_12x16(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_knl_asm_30x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_knl_asm_8x24(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_knl_asm_30x8(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_spackm_haswell_asm_6x16(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_haswell_asm_6x8(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_cpackm_haswell_asm_3x8(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_zpackm_haswell_asm_3x4(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_haswell_asm_6x16(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_haswell_asm_6x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_haswell_asm_3x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_haswell_asm_3x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_haswell_asm_16x6(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_haswell_asm_8x6(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_haswell_asm_8x3(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_haswell_asm_4x3(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmtrsm_l_haswell_asm_6x16(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a1x: *const c_void,
        a11: *const c_void,
        bx1: *const c_void,
        b11: *mut c_void,
        c11: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmtrsm_l_haswell_asm_6x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a1x: *const c_void,
        a11: *const c_void,
        bx1: *const c_void,
        b11: *mut c_void,
        c11: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmtrsm_u_haswell_asm_6x16(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a1x: *const c_void,
        a11: *const c_void,
        bx1: *const c_void,
        b11: *mut c_void,
        c11: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmtrsm_u_haswell_asm_6x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a1x: *const c_void,
        a11: *const c_void,
        bx1: *const c_void,
        b11: *mut c_void,
        c11: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_haswell_ref_6x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_haswell_ref_5x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_haswell_ref_4x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_haswell_ref_3x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_haswell_ref_2x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_haswell_ref_1x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x16m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x12m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x6m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_6x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_5x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_4x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_3x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_2x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_haswell_asm_1x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x12(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_3x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x16m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x12m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_6x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_3x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_2x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_haswell_asm_1x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_r_haswell_ref_6x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_r_haswell_ref_5x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_r_haswell_ref_4x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_r_haswell_ref_3x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_r_haswell_ref_2x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_r_haswell_ref_1x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_5x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_4x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_3x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_5x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_4x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_3x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_2x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_1x6(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_5x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_4x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_3x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_5x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_4x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x6m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_6x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_5x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_4x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_3x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_2x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rv_haswell_asm_1x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_3x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_2x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_1x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_6x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_3x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_2x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmsup_rd_haswell_asm_1x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_sandybridge_asm_8x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_sandybridge_asm_8x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_sandybridge_asm_8x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_sandybridge_asm_4x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_sandybridge_int_8x8(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_sandybridge_int_8x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_sandybridge_int_8x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_sandybridge_int_4x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_penryn_asm_8x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_penryn_asm_4x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmtrsm_l_penryn_asm_4x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a1x: *const c_void,
        a11: *const c_void,
        bx1: *const c_void,
        b11: *mut c_void,
        c11: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmtrsm_u_penryn_asm_4x4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a1x: *const c_void,
        a11: *const c_void,
        bx1: *const c_void,
        b11: *mut c_void,
        c11: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dtrsm_l_penryn_asm_4x4(
        a: *const c_void,
        b: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dtrsm_u_penryn_asm_4x4(
        a: *const c_void,
        b: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_saxpyf_zen_int_5(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_daxpyf_zen_int_5(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_8xk_gen_zen(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_6xk_gen_zen(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_8xk_nn_zen(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dpackm_6xk_nn_zen(
        conja: conj_t,
        schema: pack_t,
        cdim: dim_t,
        cdim_max: dim_t,
        cdim_bcast: dim_t,
        n: dim_t,
        n_max: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_samaxv_zen_int(
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        index: *mut dim_t,
        cntx: *const cntx_t,
    );
    pub fn bli_damaxv_zen_int(
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        index: *mut dim_t,
        cntx: *const cntx_t,
    );
    pub fn bli_saxpyv_zen_int(
        conjx: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_daxpyv_zen_int(
        conjx: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_saxpyv_zen_int10(
        conjx: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_daxpyv_zen_int10(
        conjx: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sdotv_zen_int(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *const c_void,
        incy: inc_t,
        rho: *mut c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_ddotv_zen_int(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *const c_void,
        incy: inc_t,
        rho: *mut c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_sdotv_zen_int10(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *const c_void,
        incy: inc_t,
        rho: *mut c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_ddotv_zen_int10(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *const c_void,
        incy: inc_t,
        rho: *mut c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_sdotxv_zen_int(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *const c_void,
        incx: inc_t,
        y: *const c_void,
        incy: inc_t,
        beta: *const c_void,
        rho: *mut c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_ddotxv_zen_int(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *const c_void,
        incx: inc_t,
        y: *const c_void,
        incy: inc_t,
        beta: *const c_void,
        rho: *mut c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_sscalv_zen_int(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dscalv_zen_int(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sscalv_zen_int10(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dscalv_zen_int10(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cscalv_zen_int10(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sswapv_zen_int8(
        n: dim_t,
        x: *mut c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dswapv_zen_int8(
        n: dim_t,
        x: *mut c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_scopyv_zen_int(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dcopyv_zen_int(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_ssetv_zen_int(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dsetv_zen_int(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const c_void,
        x: *mut c_void,
        incx: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_saxpyf_zen_int_8(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_daxpyf_zen_int_8(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_daxpyf_zen_int_16x4(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_caxpyf_zen_int_4(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sdotxf_zen_int_8(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        beta: *const c_void,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_ddotxf_zen_int_8(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        inca: inc_t,
        lda: inc_t,
        x: *const c_void,
        incx: inc_t,
        beta: *const c_void,
        y: *mut c_void,
        incy: inc_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_5x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_4x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_3x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_2x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_1x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_5x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_4x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_3x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_5x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_4x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_3x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_5x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_4x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_zen_ref_6x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_zen_ref_5x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_zen_ref_4x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_zen_ref_3x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_zen_ref_2x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_r_zen_ref_1x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x16m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_6x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_5x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_4x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_3x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_2x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rv_zen_asm_1x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_2x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_1x16(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x16m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_6x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_3x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_2x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmsup_rd_zen_asm_1x16n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_3x8m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_3x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_3x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_2x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_1x8(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_3x4m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_3x2m(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_2x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_1x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_2x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_1x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_3x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_2x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_1x8n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_3x4(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmsup_rv_zen_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_3x4n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_2x4n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_1x4n(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_3x2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmsup_rv_zen_asm_3x1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_piledriver_asm_16x3(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_piledriver_asm_8x3(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_piledriver_asm_4x2(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_piledriver_asm_2x2(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemm_bulldozer_asm_8x8_fma4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_bulldozer_asm_4x6_fma4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_bulldozer_asm_8x4_fma4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_bulldozer_asm_4x4_fma4(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const c_void,
        a: *const c_void,
        b: *const c_void,
        beta: *const c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_thrcomm_init_single(nt: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_cleanup_single(comm: *mut thrcomm_t);
    pub fn bli_thrcomm_barrier_single(tid: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_init_openmp(nt: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_cleanup_openmp(comm: *mut thrcomm_t);
    pub fn bli_thrcomm_barrier_openmp(tid: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_init_pthreads(nt: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_cleanup_pthreads(comm: *mut thrcomm_t);
    pub fn bli_thrcomm_barrier_pthreads(tid: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_create(
        ti: timpl_t,
        sba_pool: *mut pool_t,
        n_threads: dim_t,
    ) -> *mut thrcomm_t;
    pub fn bli_thrcomm_free(sba_pool: *mut pool_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_init(ti: timpl_t, n_threads: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_cleanup(comm: *mut thrcomm_t);
    pub fn bli_thrcomm_barrier(thread_id: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrcomm_bcast(
        inside_id: dim_t,
        to_send: *mut c_void,
        comm: *mut thrcomm_t,
    ) -> *mut c_void;
    pub fn bli_thrcomm_barrier_atomic(thread_id: dim_t, comm: *mut thrcomm_t);
    pub fn bli_thrinfo_attach_sub_node(sub_node: *mut thrinfo_t, t: *mut thrinfo_t);
    pub fn bli_thrinfo_create_root(
        comm: *mut thrcomm_t,
        thread_id: dim_t,
        sba_pool: *mut pool_t,
        pba: *mut pba_t,
    ) -> *mut thrinfo_t;
    pub fn bli_thrinfo_create(
        comm: *mut thrcomm_t,
        thread_id: dim_t,
        n_way: dim_t,
        work_id: dim_t,
        free_comm: bool,
        sba_pool: *mut pool_t,
        pba: *mut pba_t,
    ) -> *mut thrinfo_t;
    pub fn bli_thrinfo_free(thread: *mut thrinfo_t);
    pub fn bli_thrinfo_split(n_way: dim_t, thread_par: *mut thrinfo_t) -> *mut thrinfo_t;
    pub fn bli_thrinfo_print(thread: *mut thrinfo_t);
    pub fn bli_thrinfo_print_sub(thread: *mut thrinfo_t, level: gint_t);
    pub fn bli_thread_launch_openmp(
        nt: dim_t,
        func: thread_func_t,
        params: *const c_void,
    );
    pub fn bli_thread_launch_pthreads(
        nt: dim_t,
        func: thread_func_t,
        params: *const c_void,
    );
    pub fn bli_thread_launch_single(
        nt: dim_t,
        func: thread_func_t,
        params: *const c_void,
    );
    pub fn bli_thread_init() -> c_int;
    pub fn bli_thread_finalize() -> c_int;
    pub fn bli_thread_launch(
        ti: timpl_t,
        nt: dim_t,
        func: thread_func_t,
        params: *const c_void,
    );
    pub fn bli_prime_factorization(n: dim_t, factors: *mut bli_prime_factors_t);
    pub fn bli_next_prime_factor(factors: *mut bli_prime_factors_t) -> dim_t;
    pub fn bli_is_prime(n: dim_t) -> bool;
    pub fn bli_thread_partition_2x2(
        n_thread: dim_t,
        work1: dim_t,
        work2: dim_t,
        nt1: *mut dim_t,
        nt2: *mut dim_t,
    );
    pub fn bli_thread_partition_2x2_slow(
        n_thread: dim_t,
        work1: dim_t,
        work2: dim_t,
        nt1: *mut dim_t,
        nt2: *mut dim_t,
    );
    pub fn bli_thread_partition_2x2_fast(
        n_thread: dim_t,
        work1: dim_t,
        work2: dim_t,
        nt1: *mut dim_t,
        nt2: *mut dim_t,
    );
    pub fn bli_gcd(x: dim_t, y: dim_t) -> dim_t;
    pub fn bli_lcm(x: dim_t, y: dim_t) -> dim_t;
    pub fn bli_ipow(base: dim_t, power: dim_t) -> dim_t;
    pub fn bli_thread_get_jc_nt() -> dim_t;
    pub fn bli_thread_get_pc_nt() -> dim_t;
    pub fn bli_thread_get_ic_nt() -> dim_t;
    pub fn bli_thread_get_jr_nt() -> dim_t;
    pub fn bli_thread_get_ir_nt() -> dim_t;
    pub fn bli_thread_get_num_threads() -> dim_t;
    pub fn bli_thread_get_thread_impl() -> timpl_t;
    pub fn bli_thread_get_thread_impl_str(ti: timpl_t) -> *const c_char;
    pub fn bli_thread_set_ways(jc: dim_t, pc: dim_t, ic: dim_t, jr: dim_t, ir: dim_t);
    pub fn bli_thread_set_num_threads(value: dim_t);
    pub fn bli_thread_set_thread_impl(ti: timpl_t);
    pub fn bli_thread_reset();
    pub fn bli_thread_range_sub(
        work_id: dim_t,
        n_way: dim_t,
        n: dim_t,
        bf: dim_t,
        handle_edge_low: bool,
        start: *mut dim_t,
        end: *mut dim_t,
    );
    pub fn bli_thread_range_mdim(
        direct: dir_t,
        bmult: dim_t,
        use_weighted: bool,
        thr: *const thrinfo_t,
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        start: *mut dim_t,
        end: *mut dim_t,
    ) -> siz_t;
    pub fn bli_thread_range_ndim(
        direct: dir_t,
        bmult: dim_t,
        use_weighted: bool,
        thr: *const thrinfo_t,
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        start: *mut dim_t,
        end: *mut dim_t,
    ) -> siz_t;
    pub fn bli_thread_range(
        thr: *const thrinfo_t,
        a: *const obj_t,
        bf: dim_t,
        direct: dir_t,
        dim: mdim_t,
        use_weighted: bool,
        start: *mut dim_t,
        end: *mut dim_t,
    ) -> siz_t;
    pub fn bli_thread_range_width_l(
        diagoff_j: doff_t,
        m: dim_t,
        n_j: dim_t,
        j: dim_t,
        n_way: dim_t,
        bf: dim_t,
        bf_left: dim_t,
        area_per_thr: f64,
        handle_edge_low: bool,
    ) -> dim_t;
    pub fn bli_find_area_trap_l(diagoff: doff_t, m: dim_t, n: dim_t, bf: dim_t) -> siz_t;
    pub fn bli_thread_range_weighted_sub(
        thread: *const thrinfo_t,
        diagoff: doff_t,
        uplo: uplo_t,
        uplo_orig: uplo_t,
        m: dim_t,
        n: dim_t,
        bf: dim_t,
        handle_edge_low: bool,
        j_start_thr: *mut dim_t,
        j_end_thr: *mut dim_t,
    ) -> siz_t;
    pub fn bli_thread_range_quad(
        thread: *const thrinfo_t,
        diagoff: doff_t,
        uplo: uplo_t,
        m: dim_t,
        n: dim_t,
        bf: dim_t,
        handle_edge_low: bool,
        start: *mut dim_t,
        end: *mut dim_t,
        inc: *mut dim_t,
    );
    pub fn bli_thread_range_tlb_l(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_u(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_d(
        nt: dim_t,
        tid: dim_t,
        m_iter: dim_t,
        n_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_trmm_ll(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        k_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_trmm_lu(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        k_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_trmm_lx_impl(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        uplo: uplo_t,
        m_iter: dim_t,
        n_iter: dim_t,
        k_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_trmm_rl(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        k_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_trmm_ru(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        k_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
    ) -> dim_t;
    pub fn bli_thread_range_tlb_trmm_rl_impl(
        nt: dim_t,
        tid: dim_t,
        diagoff: doff_t,
        m_iter: dim_t,
        n_iter: dim_t,
        k_iter: dim_t,
        mr: dim_t,
        nr: dim_t,
        j_st_p: *mut inc_t,
        i_st_p: *mut inc_t,
        j_en_p: *mut inc_t,
        i_en_p: *mut inc_t,
    ) -> dim_t;
    pub static BLIS_TWO: obj_t;
    pub static BLIS_ONE: obj_t;
    pub static BLIS_ZERO: obj_t;
    pub static BLIS_MINUS_ONE: obj_t;
    pub static BLIS_MINUS_TWO: obj_t;
    pub static BLIS_ONE_I: obj_t;
    pub static BLIS_MINUS_ONE_I: obj_t;
    pub static BLIS_NAN: obj_t;
    pub static mut BLIS_SINGLE_COMM: thrcomm_t;
    pub fn bli_init();
    pub fn bli_finalize();
    pub fn bli_init_auto();
    pub fn bli_finalize_auto();
    pub fn bli_init_once();
    pub fn bli_finalize_once();
    pub fn bli_init_apis() -> c_int;
    pub fn bli_finalize_apis() -> c_int;
    pub fn bli_malloc_intl(size: usize, r_val: *mut err_t) -> *mut c_void;
    pub fn bli_calloc_intl(size: usize, r_val: *mut err_t) -> *mut c_void;
    pub fn bli_free_intl(p: *mut c_void);
    pub fn bli_malloc_user(size: usize, r_val: *mut err_t) -> *mut c_void;
    pub fn bli_free_user(p: *mut c_void);
    pub fn bli_fmalloc_align(
        f: malloc_ft,
        size: usize,
        align_size: usize,
        r_val: *mut err_t,
    ) -> *mut c_void;
    pub fn bli_ffree_align(f: free_ft, p: *mut c_void);
    pub fn bli_fmalloc_noalign(
        f: malloc_ft,
        size: usize,
        r_val: *mut err_t,
    ) -> *mut c_void;
    pub fn bli_ffree_noalign(f: free_ft, p: *mut c_void);
    pub fn bli_fmalloc_align_check(f: malloc_ft, size: usize, align_size: usize);
    pub fn bli_fmalloc_post_check(p: *mut c_void);
    pub fn bli_const_init();
    pub fn bli_const_finalize();
    pub fn bli_obj_create_check(
        dt: num_t,
        m: dim_t,
        n: dim_t,
        rs: inc_t,
        cs: inc_t,
        obj: *const obj_t,
    );
    pub fn bli_obj_create_without_buffer_check(dt: num_t, m: dim_t, n: dim_t, obj: *const obj_t);
    pub fn bli_obj_alloc_buffer_check(rs: inc_t, cs: inc_t, is: inc_t, obj: *const obj_t);
    pub fn bli_obj_attach_buffer_check(
        p: *const c_void,
        rs: inc_t,
        cs: inc_t,
        is: inc_t,
        obj: *const obj_t,
    );
    pub fn bli_obj_create_scalar_check(dt: num_t, obj: *const obj_t);
    pub fn bli_obj_free_check(obj: *const obj_t);
    pub fn bli_obj_create_const_check(value: f64, obj: *const obj_t);
    pub fn bli_obj_create_const_copy_of_check(a: *const obj_t, b: *const obj_t);
    pub fn bli_dt_size_check(dt: num_t);
    pub fn bli_dt_string_check(dt: num_t);
    pub fn bli_dt_union_check(dt1: num_t, dt2: num_t);
    pub fn bli_obj_print_check(label: *const c_char, obj: *const obj_t);
    pub fn bli_obj_create(dt: num_t, m: dim_t, n: dim_t, rs: inc_t, cs: inc_t, obj: *mut obj_t);
    pub fn bli_obj_create_with_attached_buffer(
        dt: num_t,
        m: dim_t,
        n: dim_t,
        p: *mut c_void,
        rs: inc_t,
        cs: inc_t,
        obj: *mut obj_t,
    );
    pub fn bli_obj_create_without_buffer(dt: num_t, m: dim_t, n: dim_t, obj: *mut obj_t);
    pub fn bli_obj_alloc_buffer(rs: inc_t, cs: inc_t, is: inc_t, obj: *mut obj_t);
    pub fn bli_obj_attach_buffer(
        p: *mut c_void,
        rs: inc_t,
        cs: inc_t,
        is: inc_t,
        obj: *mut obj_t,
    );
    pub fn bli_obj_create_1x1(dt: num_t, obj: *mut obj_t);
    pub fn bli_obj_create_1x1_with_attached_buffer(
        dt: num_t,
        p: *mut c_void,
        obj: *mut obj_t,
    );
    pub fn bli_obj_create_conf_to(s: *const obj_t, d: *mut obj_t);
    pub fn bli_obj_free(obj: *mut obj_t);
    pub fn bli_adjust_strides(
        m: dim_t,
        n: dim_t,
        elem_size: siz_t,
        rs: *mut inc_t,
        cs: *mut inc_t,
        is: *mut inc_t,
    );
    pub fn bli_dt_size(dt: num_t) -> siz_t;
    pub fn bli_dt_string(dt: num_t) -> *const c_char;
    pub fn bli_align_dim_to_mult(dim: dim_t, dim_mult: dim_t, round_up: bool) -> dim_t;
    pub fn bli_align_dim_to_size(dim: dim_t, elem_size: siz_t, align_size: siz_t) -> dim_t;
    pub fn bli_align_ptr_to_size(p: *const c_void, align_size: usize) -> dim_t;
    pub fn bli_obj_print(label: *const c_char, obj: *const obj_t);
    pub fn bli_obj_scalar_init_detached(dt: num_t, beta: *mut obj_t);
    pub fn bli_obj_scalar_init_detached_copy_of(
        dt: num_t,
        conj: conj_t,
        alpha: *const obj_t,
        beta: *mut obj_t,
    );
    pub fn bli_obj_scalar_detach(a: *const obj_t, alpha: *mut obj_t);
    pub fn bli_obj_scalar_attach(conj: conj_t, alpha: *const obj_t, a: *mut obj_t);
    pub fn bli_obj_scalar_cast_to(dt: num_t, a: *mut obj_t);
    pub fn bli_obj_scalar_apply_scalar(alpha: *const obj_t, a: *mut obj_t);
    pub fn bli_obj_scalar_reset(a: *mut obj_t);
    pub fn bli_obj_scalar_has_nonzero_imag(a: *mut obj_t) -> bool;
    pub fn bli_obj_scalar_equals(a: *const obj_t, beta: *const obj_t) -> bool;
    pub fn bli_blksz_create_ed(
        b_s: dim_t,
        be_s: dim_t,
        b_d: dim_t,
        be_d: dim_t,
        b_c: dim_t,
        be_c: dim_t,
        b_z: dim_t,
        be_z: dim_t,
    ) -> *mut blksz_t;
    pub fn bli_blksz_create(
        b_s: dim_t,
        b_d: dim_t,
        b_c: dim_t,
        b_z: dim_t,
        be_s: dim_t,
        be_d: dim_t,
        be_c: dim_t,
        be_z: dim_t,
    ) -> *mut blksz_t;
    pub fn bli_blksz_init_ed(
        b: *mut blksz_t,
        b_s: dim_t,
        be_s: dim_t,
        b_d: dim_t,
        be_d: dim_t,
        b_c: dim_t,
        be_c: dim_t,
        b_z: dim_t,
        be_z: dim_t,
    );
    pub fn bli_blksz_init(
        b: *mut blksz_t,
        b_s: dim_t,
        b_d: dim_t,
        b_c: dim_t,
        b_z: dim_t,
        be_s: dim_t,
        be_d: dim_t,
        be_c: dim_t,
        be_z: dim_t,
    );
    pub fn bli_blksz_init_easy(b: *mut blksz_t, b_s: dim_t, b_d: dim_t, b_c: dim_t, b_z: dim_t);
    pub fn bli_blksz_free(b: *mut blksz_t);
    pub fn bli_blksz_reduce_def_to(
        dt_bm: num_t,
        bmult: *mut blksz_t,
        dt_bs: num_t,
        blksz: *mut blksz_t,
    );
    pub fn bli_blksz_reduce_max_to(
        dt_bm: num_t,
        bmult: *mut blksz_t,
        dt_bs: num_t,
        blksz: *mut blksz_t,
    );
    pub fn bli_determine_blocksize(
        direct: dir_t,
        i: dim_t,
        dim: dim_t,
        b_alg: dim_t,
        b_max: dim_t,
    ) -> dim_t;
    pub fn bli_func_create(
        ptr_s: void_fp,
        ptr_d: void_fp,
        ptr_c: void_fp,
        ptr_z: void_fp,
    ) -> *mut func_t;
    pub fn bli_func_init(
        f: *mut func_t,
        ptr_s: void_fp,
        ptr_d: void_fp,
        ptr_c: void_fp,
        ptr_z: void_fp,
    );
    pub fn bli_func_init_null(f: *mut func_t);
    pub fn bli_func_free(f: *mut func_t);
    pub fn bli_func2_create(
        ptr_ss: void_fp,
        ptr_sd: void_fp,
        ptr_sc: void_fp,
        ptr_sz: void_fp,
        ptr_ds: void_fp,
        ptr_dd: void_fp,
        ptr_dc: void_fp,
        ptr_dz: void_fp,
        ptr_cs: void_fp,
        ptr_cd: void_fp,
        ptr_cc: void_fp,
        ptr_cz: void_fp,
        ptr_zs: void_fp,
        ptr_zd: void_fp,
        ptr_zc: void_fp,
        ptr_zz: void_fp,
    ) -> *mut func2_t;
    pub fn bli_func2_init(
        f: *mut func2_t,
        ptr_ss: void_fp,
        ptr_sd: void_fp,
        ptr_sc: void_fp,
        ptr_sz: void_fp,
        ptr_ds: void_fp,
        ptr_dd: void_fp,
        ptr_dc: void_fp,
        ptr_dz: void_fp,
        ptr_cs: void_fp,
        ptr_cd: void_fp,
        ptr_cc: void_fp,
        ptr_cz: void_fp,
        ptr_zs: void_fp,
        ptr_zd: void_fp,
        ptr_zc: void_fp,
        ptr_zz: void_fp,
    );
    pub fn bli_func2_init_null(f: *mut func2_t);
    pub fn bli_func2_free(f: *mut func2_t);
    pub fn bli_func_is_null_dt(dt: num_t, f: *const func_t) -> bool;
    pub fn bli_func_is_null(f: *const func_t) -> bool;
    pub fn bli_func2_is_null_dt(dt1: num_t, dt2: num_t, f: *const func2_t) -> bool;
    pub fn bli_func2_is_null(f: *const func2_t) -> bool;
    pub fn bli_mbool_create(b_s: bool, b_d: bool, b_c: bool, b_z: bool) -> *mut mbool_t;
    pub fn bli_mbool_init(b: *mut mbool_t, b_s: bool, b_d: bool, b_c: bool, b_z: bool);
    pub fn bli_mbool_free(b: *mut mbool_t);
    pub fn bli_stack_init(
        elem_size: siz_t,
        block_len: siz_t,
        max_blocks: siz_t,
        initial_size: siz_t,
        stack: *mut stck_t,
    ) -> err_t;
    pub fn bli_stack_finalize(stack: *mut stck_t) -> err_t;
    pub fn bli_stack_get(
        i: siz_t,
        elem: *mut *mut c_void,
        stack: *const stck_t,
    ) -> err_t;
    pub fn bli_stack_push(i: *mut siz_t, stack: *mut stck_t) -> err_t;
    pub fn bli_check_error_code_helper(
        code: gint_t,
        file: *const c_char,
        line: guint_t,
    ) -> err_t;
    pub fn bli_check_valid_error_level(level: errlev_t) -> err_t;
    pub fn bli_check_null_pointer(ptr: *const c_void) -> err_t;
    pub fn bli_check_valid_side(side: side_t) -> err_t;
    pub fn bli_check_valid_uplo(uplo: uplo_t) -> err_t;
    pub fn bli_check_valid_trans(trans: trans_t) -> err_t;
    pub fn bli_check_valid_diag(diag: diag_t) -> err_t;
    pub fn bli_check_nonunit_diag(a: *const obj_t) -> err_t;
    pub fn bli_check_valid_datatype(dt: num_t) -> err_t;
    pub fn bli_check_object_valid_datatype(a: *const obj_t) -> err_t;
    pub fn bli_check_noninteger_datatype(dt: num_t) -> err_t;
    pub fn bli_check_noninteger_object(a: *const obj_t) -> err_t;
    pub fn bli_check_nonconstant_datatype(dt: num_t) -> err_t;
    pub fn bli_check_nonconstant_object(a: *const obj_t) -> err_t;
    pub fn bli_check_floating_datatype(dt: num_t) -> err_t;
    pub fn bli_check_floating_object(a: *const obj_t) -> err_t;
    pub fn bli_check_real_datatype(dt: num_t) -> err_t;
    pub fn bli_check_real_object(a: *const obj_t) -> err_t;
    pub fn bli_check_integer_datatype(dt: num_t) -> err_t;
    pub fn bli_check_integer_object(a: *const obj_t) -> err_t;
    pub fn bli_check_consistent_datatypes(dt_a: num_t, dt_b: num_t) -> err_t;
    pub fn bli_check_consistent_object_datatypes(a: *const obj_t, b: *const obj_t) -> err_t;
    pub fn bli_check_datatype_real_proj_of(dt_c: num_t, dt_r: num_t) -> err_t;
    pub fn bli_check_object_real_proj_of(c: *const obj_t, r: *const obj_t) -> err_t;
    pub fn bli_check_real_valued_object(a: *const obj_t) -> err_t;
    pub fn bli_check_consistent_precisions(dt_a: num_t, dt_b: num_t) -> err_t;
    pub fn bli_check_consistent_object_precisions(a: *const obj_t, b: *const obj_t) -> err_t;
    pub fn bli_check_conformal_dims(a: *const obj_t, b: *const obj_t) -> err_t;
    pub fn bli_check_level3_dims(a: *const obj_t, b: *const obj_t, c: *const obj_t) -> err_t;
    pub fn bli_check_scalar_object(a: *const obj_t) -> err_t;
    pub fn bli_check_vector_object(a: *const obj_t) -> err_t;
    pub fn bli_check_matrix_object(a: *const obj_t) -> err_t;
    pub fn bli_check_equal_vector_lengths(x: *const obj_t, y: *const obj_t) -> err_t;
    pub fn bli_check_square_object(a: *const obj_t) -> err_t;
    pub fn bli_check_object_length_equals(a: *const obj_t, m: dim_t) -> err_t;
    pub fn bli_check_object_width_equals(a: *const obj_t, n: dim_t) -> err_t;
    pub fn bli_check_vector_dim_equals(a: *const obj_t, n: dim_t) -> err_t;
    pub fn bli_check_object_diag_offset_equals(a: *const obj_t, offset: doff_t) -> err_t;
    pub fn bli_check_matrix_strides(m: dim_t, n: dim_t, rs: inc_t, cs: inc_t, is: inc_t) -> err_t;
    pub fn bli_check_general_object(a: *const obj_t) -> err_t;
    pub fn bli_check_hermitian_object(a: *const obj_t) -> err_t;
    pub fn bli_check_symmetric_object(a: *const obj_t) -> err_t;
    pub fn bli_check_triangular_object(a: *const obj_t) -> err_t;
    pub fn bli_check_object_struc(a: *const obj_t, struc: struc_t) -> err_t;
    pub fn bli_check_upper_or_lower_object(a: *const obj_t) -> err_t;
    pub fn bli_check_valid_3x1_subpart(part: subpart_t) -> err_t;
    pub fn bli_check_valid_1x3_subpart(part: subpart_t) -> err_t;
    pub fn bli_check_valid_3x3_subpart(part: subpart_t) -> err_t;
    pub fn bli_check_valid_cntl(cntl: *const c_void) -> err_t;
    pub fn bli_check_packm_schema_on_unpack(a: *const obj_t) -> err_t;
    pub fn bli_check_packv_schema_on_unpack(a: *const obj_t) -> err_t;
    pub fn bli_check_object_buffer(a: *const obj_t) -> err_t;
    pub fn bli_check_valid_malloc_buf(ptr: *const c_void) -> err_t;
    pub fn bli_check_valid_packbuf(buf_type: packbuf_t) -> err_t;
    pub fn bli_check_if_exhausted_pool(pool: *const pool_t) -> err_t;
    pub fn bli_check_sufficient_stack_buf_size(cntx: *const cntx_t) -> err_t;
    pub fn bli_check_alignment_is_power_of_two(align_size: usize) -> err_t;
    pub fn bli_check_alignment_is_mult_of_ptr_size(align_size: usize) -> err_t;
    pub fn bli_check_object_alias_of(a: *const obj_t, b: *const obj_t) -> err_t;
    pub fn bli_check_valid_arch_id(id: arch_t) -> err_t;
    pub fn bli_check_initialized_gks_cntx(cntx: *const cntx_t) -> err_t;
    pub fn bli_check_valid_mc_mod_mult(mc: *const blksz_t, mr: *const blksz_t) -> err_t;
    pub fn bli_check_valid_nc_mod_mult(nc: *const blksz_t, nr: *const blksz_t) -> err_t;
    pub fn bli_check_valid_kc_mod_mult(kc: *const blksz_t, kr: *const blksz_t) -> err_t;
    pub fn bli_check_valid_mr_even(mr: *const blksz_t, row_pref: *const mbool_t) -> err_t;
    pub fn bli_check_valid_nr_even(mr: *const blksz_t, row_pref: *const mbool_t) -> err_t;
    pub fn bli_cntx_init(cntx: *mut cntx_t) -> err_t;
    pub fn bli_cntx_free(cntx: *mut cntx_t) -> err_t;
    pub fn bli_cntx_set_blkszs(cntx: *mut cntx_t, ...);
    pub fn bli_cntx_set_ukrs(cntx: *mut cntx_t, ...);
    pub fn bli_cntx_set_ukr2s(cntx: *mut cntx_t, ...);
    pub fn bli_cntx_set_ukr_prefs(cntx: *mut cntx_t, ...);
    pub fn bli_cntx_print(cntx: *const cntx_t);
    pub fn bli_cntx_set_l3_sup_handlers(cntx: *mut cntx_t, ...);
    pub fn bli_cntx_register_blksz(
        bs_id: *mut kerid_t,
        blksz: *const blksz_t,
        bmult_id: kerid_t,
        cntx: *mut cntx_t,
    ) -> err_t;
    pub fn bli_cntx_register_ukr(
        ukr_id: *mut kerid_t,
        ukr: *const func_t,
        cntx: *mut cntx_t,
    ) -> err_t;
    pub fn bli_cntx_register_ukr2(
        ukr_id: *mut kerid_t,
        ukr: *const func2_t,
        cntx: *mut cntx_t,
    ) -> err_t;
    pub fn bli_cntx_register_ukr_pref(
        ukr_pref_id: *mut kerid_t,
        ukr_pref: *const mbool_t,
        cntx: *mut cntx_t,
    ) -> err_t;
    pub fn bli_global_rntm() -> *mut rntm_t;
    pub fn bli_global_rntm_at_init() -> *mut rntm_t;
    pub fn bli_global_rntm_mutex() -> *mut bli_pthread_mutex_t;
    pub fn bli_rntm_init() -> c_int;
    pub fn bli_rntm_finalize() -> c_int;
    pub fn bli_rntm_init_from_env(rntm: *mut rntm_t);
    pub fn bli_rntm_init_from_global(rntm: *mut rntm_t);
    pub fn bli_rntm_set_num_threads(nt: dim_t, rntm: *mut rntm_t);
    pub fn bli_rntm_set_ways(
        jc: dim_t,
        pc: dim_t,
        ic: dim_t,
        jr: dim_t,
        ir: dim_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_rntm_sanitize(rntm: *mut rntm_t);
    pub fn bli_rntm_factorize(m: dim_t, n: dim_t, k: dim_t, rntm: *mut rntm_t);
    pub fn bli_rntm_factorize_sup(m: dim_t, n: dim_t, k: dim_t, rntm: *mut rntm_t);
    pub fn bli_rntm_print(rntm: *const rntm_t);
    pub fn bli_rntm_calc_num_threads_in(bszid_cur: *const bszid_t, rntm: *const rntm_t) -> dim_t;
    pub fn bli_gks_init() -> c_int;
    pub fn bli_gks_finalize() -> c_int;
    pub fn bli_gks_init_index();
    pub fn bli_gks_lookup_id(id: arch_t) -> *const cntx_t;
    pub fn bli_gks_register_cntx(id: arch_t, nat_fp: void_fp, ref_fp: void_fp);
    pub fn bli_gks_query_cntx() -> *const cntx_t;
    pub fn bli_gks_query_cntx_noinit() -> *const cntx_t;
    pub fn bli_gks_query_cntx_impl() -> *const cntx_t;
    pub fn bli_gks_init_ref_cntx(cntx: *mut cntx_t);
    pub fn bli_gks_cntx_ukr_is_ref(dt: num_t, ukr_id: ukr_t, cntx: *const cntx_t) -> bool;
    pub fn bli_gks_cntx_ukr2_is_ref(
        dt1: num_t,
        dt2: num_t,
        ukr_id: ukr_t,
        cntx: *const cntx_t,
    ) -> bool;
    pub fn bli_gks_l3_ukr_impl_string(
        ukr: ukr_t,
        method: ind_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_gks_l3_ukr_impl_type(ukr: ukr_t, method: ind_t, dt: num_t) -> kimpl_t;
    pub fn bli_gks_register_blksz(bs_id: *mut kerid_t) -> err_t;
    pub fn bli_gks_register_ukr(ukr_id: *mut kerid_t) -> err_t;
    pub fn bli_gks_register_ukr2(ukr_id: *mut kerid_t) -> err_t;
    pub fn bli_gks_register_ukr_pref(ukr_pref_id: *mut kerid_t) -> err_t;
    pub fn bli_gemmind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_gemmtind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_hemmind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_symmind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_trmm3ind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_trmmind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_trsmind_find_avail(dt: num_t) -> ind_t;
    pub fn bli_l3_ind_oper_find_avail(oper: opid_t, dt: num_t) -> ind_t;
    pub fn bli_l3_ind_set_enable_dt(method: ind_t, dt: num_t, status: bool);
    pub fn bli_l3_ind_oper_enable_only(oper: opid_t, method: ind_t, dt: num_t);
    pub fn bli_l3_ind_oper_set_enable_all(oper: opid_t, dt: num_t, status: bool);
    pub fn bli_l3_ind_oper_set_enable(oper: opid_t, method: ind_t, dt: num_t, status: bool);
    pub fn bli_l3_ind_oper_get_enable(oper: opid_t, method: ind_t, dt: num_t) -> bool;
    pub fn bli_l3_ind_oper_is_impl(oper: opid_t, method: ind_t) -> bool;
    pub fn bli_ind_init() -> c_int;
    pub fn bli_ind_finalize() -> c_int;
    pub fn bli_ind_enable(method: ind_t);
    pub fn bli_ind_disable(method: ind_t);
    pub fn bli_ind_disable_all();
    pub fn bli_ind_enable_dt(method: ind_t, dt: num_t);
    pub fn bli_ind_disable_dt(method: ind_t, dt: num_t);
    pub fn bli_ind_disable_all_dt(dt: num_t);
    pub fn bli_ind_oper_enable_only(oper: opid_t, method: ind_t, dt: num_t);
    pub fn bli_ind_oper_is_impl(oper: opid_t, method: ind_t) -> bool;
    pub fn bli_ind_oper_find_avail(oper: opid_t, dt: num_t) -> ind_t;
    pub fn bli_ind_oper_get_avail_impl_string(
        oper: opid_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_ind_get_impl_string(method: ind_t) -> *const c_char;
    pub fn bli_ind_map_cdt_to_index(dt: num_t) -> num_t;
    pub fn bli_pba_query() -> *mut pba_t;
    pub fn bli_pba_init(cntx: *const cntx_t);
    pub fn bli_pba_finalize();
    pub fn bli_pba_acquire_m(
        pba: *mut pba_t,
        req_size: siz_t,
        buf_type: packbuf_t,
        mem: *mut mem_t,
    );
    pub fn bli_pba_release(pba: *mut pba_t, mem: *mut mem_t);
    pub fn bli_pba_pool_size(pba: *const pba_t, buf_type: packbuf_t) -> siz_t;
    pub fn bli_pba_init_pools(cntx: *const cntx_t, pba: *mut pba_t);
    pub fn bli_pba_finalize_pools(pba: *mut pba_t);
    pub fn bli_pba_compute_pool_block_sizes(
        bs_a: *mut siz_t,
        bs_b: *mut siz_t,
        bs_c: *mut siz_t,
        cntx: *const cntx_t,
    );
    pub fn bli_pba_compute_pool_block_sizes_dt(
        dt: num_t,
        bs_a: *mut siz_t,
        bs_b: *mut siz_t,
        bs_c: *mut siz_t,
        cntx: *const cntx_t,
    );
    pub fn bli_pool_init(
        num_blocks: siz_t,
        block_ptrs_len: siz_t,
        block_size: siz_t,
        align_size: siz_t,
        offset_size: siz_t,
        malloc_fp: malloc_ft,
        free_fp: free_ft,
        pool: *mut pool_t,
    );
    pub fn bli_pool_finalize(pool: *mut pool_t, reinit: bool);
    pub fn bli_pool_reinit(
        num_blocks_new: siz_t,
        block_ptrs_len_new: siz_t,
        block_size_new: siz_t,
        align_size_new: siz_t,
        offset_size_new: siz_t,
        pool: *mut pool_t,
    );
    pub fn bli_pool_checkout_block(req_size: siz_t, block: *mut pblk_t, pool: *mut pool_t);
    pub fn bli_pool_checkin_block(block: *mut pblk_t, pool: *mut pool_t);
    pub fn bli_pool_grow(num_blocks_add: siz_t, pool: *mut pool_t);
    pub fn bli_pool_shrink(num_blocks_sub: siz_t, pool: *mut pool_t);
    pub fn bli_pool_alloc_block(
        block_size: siz_t,
        align_size: siz_t,
        offset_size: siz_t,
        malloc_fp: malloc_ft,
        block: *mut pblk_t,
    );
    pub fn bli_pool_free_block(offset_size: siz_t, free_fp: free_ft, block: *mut pblk_t);
    pub fn bli_pool_print(pool: *const pool_t);
    pub fn bli_pblk_print(pblk: *const pblk_t);
    pub fn bli_array_init(num_elem: siz_t, elem_size: siz_t, array: *mut array_t);
    pub fn bli_array_resize(num_elem_new: siz_t, array: *mut array_t);
    pub fn bli_array_finalize(array: *mut array_t);
    pub fn bli_array_elem(index: siz_t, array: *const array_t) -> *mut c_void;
    pub fn bli_array_set_elem(elem: *mut c_void, index: siz_t, array: *mut array_t);
    pub fn bli_apool_init(apool: *mut apool_t);
    pub fn bli_apool_finalize(apool: *mut apool_t);
    pub fn bli_apool_checkout_array(n_threads: siz_t, apool: *mut apool_t) -> *mut array_t;
    pub fn bli_apool_checkin_array(array: *mut array_t, apool: *mut apool_t);
    pub fn bli_apool_array_elem(index: siz_t, array: *mut array_t) -> *mut pool_t;
    pub fn bli_apool_grow(num_blocks_add: siz_t, apool: *mut apool_t);
    pub fn bli_apool_alloc_block(num_elem: siz_t, array_p: *mut *mut array_t);
    pub fn bli_apool_free_block(array: *mut array_t);
    pub fn bli_sba_query() -> *mut apool_t;
    pub fn bli_sba_init();
    pub fn bli_sba_finalize();
    pub fn bli_sba_acquire(sba_pool: *mut pool_t, req_size: siz_t) -> *mut c_void;
    pub fn bli_sba_release(sba_pool: *mut pool_t, block: *mut c_void);
    pub fn bli_sba_checkout_array(n_threads: siz_t) -> *mut array_t;
    pub fn bli_sba_checkin_array(array: *mut array_t);
    pub fn bli_sba_array_elem(index: siz_t, array: *mut array_t) -> *mut pool_t;
    pub fn bli_memsys_init() -> c_int;
    pub fn bli_memsys_finalize() -> c_int;
    pub fn bli_acquire_mpart_t2b_check(
        requested_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *const obj_t,
    );
    pub fn bli_acquire_mpart_l2r_check(
        requested_part: subpart_t,
        j: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *const obj_t,
    );
    pub fn bli_acquire_mpart_tl2br_check(
        requested_part: subpart_t,
        ij: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *const obj_t,
    );
    pub fn bli_acquire_mpart(
        i: dim_t,
        j: dim_t,
        m: dim_t,
        n: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_t2b(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_b2t(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_l2r(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_r2l(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_tl2br(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_br2tl(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_mdim(
        direct: dir_t,
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_ndim(
        direct: dir_t,
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mpart_mndim(
        direct: dir_t,
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_vpart_f2b(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_vpart_b2f(
        req_part: subpart_t,
        i: dim_t,
        b: dim_t,
        obj: *const obj_t,
        sub_obj: *mut obj_t,
    );
    pub fn bli_acquire_mij(i: dim_t, j: dim_t, obj: *const obj_t, sub_obj: *mut obj_t);
    pub fn bli_acquire_vi(i: dim_t, obj: *const obj_t, sub_obj: *mut obj_t);
    pub fn bli_part_cntl_init_node(
        var_func: void_fp,
        b_dt: num_t,
        b_alg: dim_t,
        b_max: dim_t,
        b_scale: dim_t,
        b_mult: dim_t,
        b_mult_scale: dim_t,
        direct: dir_t,
        use_weighted: bool,
        cntl: *mut part_cntl_t,
    );
    pub fn bli_prune_unref_mparts(p: *mut obj_t, mdim_p: mdim_t, s: *mut obj_t, mdim_s: mdim_t);
    pub fn bli_obj_equals(a: *const obj_t, b: *const obj_t) -> bool;
    pub fn bli_obj_imag_equals(a: *const obj_t, b: *const obj_t) -> bool;
    pub fn bli_obj_imag_is_zero(a: *const obj_t) -> bool;
    pub fn bli_param_map_blis_to_netlib_side(side: side_t, blas_side: *mut c_char);
    pub fn bli_param_map_blis_to_netlib_uplo(uplo: uplo_t, blas_uplo: *mut c_char);
    pub fn bli_param_map_blis_to_netlib_trans(trans: trans_t, blas_trans: *mut c_char);
    pub fn bli_param_map_blis_to_netlib_diag(diag: diag_t, blas_diag: *mut c_char);
    pub fn bli_param_map_blis_to_netlib_machval(
        machval: machval_t,
        blas_machval: *mut c_char,
    );
    pub fn bli_param_map_char_to_blis_side(side: c_char, blis_side: *mut side_t);
    pub fn bli_param_map_char_to_blis_uplo(uplo: c_char, blis_uplo: *mut uplo_t);
    pub fn bli_param_map_char_to_blis_trans(trans: c_char, blis_trans: *mut trans_t);
    pub fn bli_param_map_char_to_blis_conj(conj: c_char, blis_conj: *mut conj_t);
    pub fn bli_param_map_char_to_blis_diag(diag: c_char, blis_diag: *mut diag_t);
    pub fn bli_param_map_char_to_blis_dt(dt: c_char, blis_dt: *mut num_t);
    pub fn bli_param_map_blis_to_char_side(blis_side: side_t, side: *mut c_char);
    pub fn bli_param_map_blis_to_char_uplo(blis_uplo: uplo_t, uplo: *mut c_char);
    pub fn bli_param_map_blis_to_char_trans(blis_trans: trans_t, trans: *mut c_char);
    pub fn bli_param_map_blis_to_char_conj(blis_conj: conj_t, conj: *mut c_char);
    pub fn bli_param_map_blis_to_char_diag(blis_diag: diag_t, diag: *mut c_char);
    pub fn bli_param_map_blis_to_char_dt(blis_dt: num_t, dt: *mut c_char);
    pub fn bli_clock() -> f64;
    pub fn bli_clock_min_diff(time_min: f64, time_start: f64) -> f64;
    pub fn bli_clock_helper() -> f64;
    pub fn bli_error_checking_level() -> errlev_t;
    pub fn bli_error_checking_level_set(new_level: errlev_t);
    pub fn bli_error_checking_is_enabled() -> bool;
    pub fn bli_print_msg(
        str_: *const c_char,
        file: *const c_char,
        line: guint_t,
    );
    pub fn bli_abort();
    pub fn bli_error_string_for_code(code: gint_t) -> *const c_char;
    pub fn bli_lsame(
        ca: *mut bla_character,
        cb: *mut bla_character,
        ca_len: ftnlen,
        cb_len: ftnlen,
    ) -> bla_logical;
    pub fn bli_slamch(cmach: *mut bla_character, cmach_len: ftnlen) -> bla_real;
    pub fn bli_dlamch(cmach: *mut bla_character, cmach_len: ftnlen) -> bla_double;
    pub fn bli_machval(mval: machval_t, v: *mut obj_t);
    pub fn bli_smachval(mval: machval_t, v: *mut c_void);
    pub fn bli_dmachval(mval: machval_t, v: *mut c_void);
    pub fn bli_cmachval(mval: machval_t, v: *mut c_void);
    pub fn bli_zmachval(mval: machval_t, v: *mut c_void);
    pub fn bli_getopt_init_state(opterr: c_int, state: *mut getopt_t);
    pub fn bli_getopt(
        argc: c_int,
        argv: *const *const c_char,
        optstring: *const c_char,
        state: *mut getopt_t,
    ) -> c_int;
    pub fn bli_cntl_init_node(var_func: void_fp, cntl: *mut cntl_t);
    pub fn bli_cntl_attach_sub_node(ways: dim_t, sub_node: *mut cntl_t, cntl: *mut cntl_t);
    pub fn bli_cntl_clear_node(cntl: *mut cntl_t);
    pub fn bli_env_get_var(env: *const c_char, fallback: gint_t) -> gint_t;
    pub fn bli_env_get_str(env: *const c_char) -> *mut c_char;
    pub fn bli_pack_get_pack_a(pack_a: *mut bool);
    pub fn bli_pack_get_pack_b(pack_b: *mut bool);
    pub fn bli_pack_set_pack_a(pack_a: bool);
    pub fn bli_pack_set_pack_b(pack_b: bool);
    pub fn bli_info_get_version_str() -> *const c_char;
    pub fn bli_info_get_int_type_size_str() -> *const c_char;
    pub fn bli_info_get_int_type_size() -> gint_t;
    pub fn bli_info_get_num_fp_types() -> gint_t;
    pub fn bli_info_get_max_type_size() -> gint_t;
    pub fn bli_info_get_page_size() -> gint_t;
    pub fn bli_info_get_simd_num_registers() -> gint_t;
    pub fn bli_info_get_simd_size() -> gint_t;
    pub fn bli_info_get_simd_align_size() -> gint_t;
    pub fn bli_info_get_stack_buf_max_size() -> gint_t;
    pub fn bli_info_get_stack_buf_align_size() -> gint_t;
    pub fn bli_info_get_heap_addr_align_size() -> gint_t;
    pub fn bli_info_get_heap_stride_align_size() -> gint_t;
    pub fn bli_info_get_pool_addr_align_size_a() -> gint_t;
    pub fn bli_info_get_pool_addr_align_size_b() -> gint_t;
    pub fn bli_info_get_pool_addr_align_size_c() -> gint_t;
    pub fn bli_info_get_pool_addr_align_size_gen() -> gint_t;
    pub fn bli_info_get_pool_addr_offset_size_a() -> gint_t;
    pub fn bli_info_get_pool_addr_offset_size_b() -> gint_t;
    pub fn bli_info_get_pool_addr_offset_size_c() -> gint_t;
    pub fn bli_info_get_pool_addr_offset_size_gen() -> gint_t;
    pub fn bli_info_get_enable_stay_auto_init() -> gint_t;
    pub fn bli_info_get_enable_blas() -> gint_t;
    pub fn bli_info_get_enable_cblas() -> gint_t;
    pub fn bli_info_get_blas_int_type_size() -> gint_t;
    pub fn bli_info_get_enable_pba_pools() -> gint_t;
    pub fn bli_info_get_enable_sba_pools() -> gint_t;
    pub fn bli_info_get_enable_threading() -> gint_t;
    pub fn bli_info_get_enable_openmp() -> gint_t;
    pub fn bli_info_get_enable_pthreads() -> gint_t;
    pub fn bli_info_get_enable_hpx() -> gint_t;
    pub fn bli_info_get_enable_openmp_as_default() -> gint_t;
    pub fn bli_info_get_enable_pthreads_as_default() -> gint_t;
    pub fn bli_info_get_enable_hpx_as_default() -> gint_t;
    pub fn bli_info_get_thread_jrir_slab() -> gint_t;
    pub fn bli_info_get_thread_jrir_rr() -> gint_t;
    pub fn bli_info_get_thread_jrir_tlb() -> gint_t;
    pub fn bli_info_get_enable_tls() -> gint_t;
    pub fn bli_info_get_enable_memkind() -> gint_t;
    pub fn bli_info_get_enable_sandbox() -> gint_t;
    pub fn bli_info_get_gemm_ukr_impl_string(
        method: ind_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_info_get_gemmtrsm_l_ukr_impl_string(
        method: ind_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_info_get_gemmtrsm_u_ukr_impl_string(
        method: ind_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_info_get_trsm_l_ukr_impl_string(
        method: ind_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_info_get_trsm_u_ukr_impl_string(
        method: ind_t,
        dt: num_t,
    ) -> *const c_char;
    pub fn bli_info_get_gemm_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_gemmt_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_hemm_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_herk_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_her2k_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_symm_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_syrk_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_syr2k_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_trmm_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_trmm3_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_info_get_trsm_impl_string(dt: num_t) -> *const c_char;
    pub fn bli_arch_query_id() -> arch_t;
    pub fn bli_arch_set_id_once();
    pub fn bli_arch_set_id();
    pub fn bli_arch_query_id_impl() -> arch_t;
    pub fn bli_arch_string(id: arch_t) -> *const c_char;
    pub fn bli_arch_set_logging(dolog: bool);
    pub fn bli_arch_get_logging() -> bool;
    pub fn bli_arch_log(arg1: *const c_char, ...);
    pub fn bli_cpuid_query_id() -> arch_t;
    pub fn bli_cpuid_is_skx(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_knl(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_haswell(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_sandybridge(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_penryn(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_zen3(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_zen2(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_zen(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_excavator(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_steamroller(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_piledriver(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_bulldozer(family: u32, model: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_thunderx2(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_cortexa57(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_cortexa53(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_armsve(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_a64fx(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_cortexa15(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_is_cortexa9(model: u32, part: u32, features: u32) -> bool;
    pub fn bli_cpuid_query(family: *mut u32, model: *mut u32, features: *mut u32) -> u32;
    pub fn get_cpu_name(cpu_name: *mut c_char);
    pub fn vpu_count() -> c_int;
    pub fn bli_string_mkupper(s: *mut c_char);
    pub fn bli_setijm(ar: f64, ai: f64, i: dim_t, j: dim_t, b: *const obj_t) -> err_t;
    pub fn bli_ssetijm(
        ar: f64,
        ai: f64,
        i: dim_t,
        j: dim_t,
        b: *mut c_void,
        rs: inc_t,
        cs: inc_t,
    );
    pub fn bli_dsetijm(
        ar: f64,
        ai: f64,
        i: dim_t,
        j: dim_t,
        b: *mut c_void,
        rs: inc_t,
        cs: inc_t,
    );
    pub fn bli_csetijm(
        ar: f64,
        ai: f64,
        i: dim_t,
        j: dim_t,
        b: *mut c_void,
        rs: inc_t,
        cs: inc_t,
    );
    pub fn bli_zsetijm(
        ar: f64,
        ai: f64,
        i: dim_t,
        j: dim_t,
        b: *mut c_void,
        rs: inc_t,
        cs: inc_t,
    );
    pub fn bli_getijm(i: dim_t, j: dim_t, b: *const obj_t, ar: *mut f64, ai: *mut f64) -> err_t;
    pub fn bli_sgetijm(
        i: dim_t,
        j: dim_t,
        b: *const c_void,
        rs: inc_t,
        cs: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_dgetijm(
        i: dim_t,
        j: dim_t,
        b: *const c_void,
        rs: inc_t,
        cs: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_cgetijm(
        i: dim_t,
        j: dim_t,
        b: *const c_void,
        rs: inc_t,
        cs: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_zgetijm(
        i: dim_t,
        j: dim_t,
        b: *const c_void,
        rs: inc_t,
        cs: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_setijv(ar: f64, ai: f64, i: dim_t, x: *const obj_t) -> err_t;
    pub fn bli_ssetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t);
    pub fn bli_dsetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t);
    pub fn bli_csetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t);
    pub fn bli_zsetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t);
    pub fn bli_getijv(i: dim_t, x: *const obj_t, ar: *mut f64, ai: *mut f64) -> err_t;
    pub fn bli_sgetijv(
        i: dim_t,
        b: *const c_void,
        incx: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_dgetijv(
        i: dim_t,
        b: *const c_void,
        incx: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_cgetijv(
        i: dim_t,
        b: *const c_void,
        incx: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_zgetijv(
        i: dim_t,
        b: *const c_void,
        incx: inc_t,
        ar: *mut f64,
        ai: *mut f64,
    );
    pub fn bli_setrm(alpha: *const obj_t, b: *const obj_t);
    pub fn bli_setrv(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setim(alpha: *const obj_t, b: *const obj_t);
    pub fn bli_setiv(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_castm(a: *const obj_t, b: *const obj_t);
    pub fn bli_sscastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_ddcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_cccastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zzcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_sdcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_sccastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_szcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dscastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dccastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dzcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_cscastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_cdcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_czcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zscastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zdcastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zccastm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_castm_check(a: *const obj_t, b: *const obj_t);
    pub fn bli_castnzm(a: *const obj_t, b: *const obj_t);
    pub fn bli_sscastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_ddcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_cccastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zzcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_sdcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_sccastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_szcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dscastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dccastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dzcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_cscastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_cdcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_czcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zscastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zdcastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_zccastnzm(
        transa: trans_t,
        m: dim_t,
        n: dim_t,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_castnzm_check(a: *const obj_t, b: *const obj_t);
    pub fn bli_castv(x: *const obj_t, y: *const obj_t);
    pub fn bli_sscastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_ddcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_cccastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_zzcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_sdcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_sccastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_szcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_dscastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_dccastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_dzcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_cscastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_cdcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_czcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_zscastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_zdcastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_zccastv(
        conjx: conj_t,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        y: *mut c_void,
        incy: inc_t,
    );
    pub fn bli_castv_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_projm(a: *const obj_t, b: *const obj_t);
    pub fn bli_projm_check(a: *const obj_t, b: *const obj_t);
    pub fn bli_projv(x: *const obj_t, y: *const obj_t);
    pub fn bli_projv_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_addsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_copysc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_divsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_mulsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_sqrtsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_sqrtrsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_subsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_invertsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_absqsc_check(chi: *const obj_t, absq: *const obj_t);
    pub fn bli_normfsc_check(chi: *const obj_t, absq: *const obj_t);
    pub fn bli_getsc_check(chi: *const obj_t, zeta_r: *const f64, zeta_i: *const f64);
    pub fn bli_setsc_check(zeta_r: f64, zeta_i: f64, chi: *const obj_t);
    pub fn bli_unzipsc_check(chi: *const obj_t, zeta_r: *const obj_t, zeta_i: *const obj_t);
    pub fn bli_zipsc_check(zeta_r: *const obj_t, zeta_i: *const obj_t, chi: *const obj_t);
    pub fn bli_l0_xsc_check(chi: *const obj_t);
    pub fn bli_l0_xxsc_check(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_l0_xx2sc_check(chi: *const obj_t, norm: *const obj_t);
    pub fn bli_l0_xxbsc_check(chi: *const obj_t, psi: *const obj_t, is: *const bool);
    pub fn bli_absqsc(chi: *const obj_t, absq: *const obj_t);
    pub fn bli_normfsc(chi: *const obj_t, absq: *const obj_t);
    pub fn bli_addsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_divsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_mulsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_sqrtsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_sqrtrsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_subsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_invertsc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_getsc(chi: *const obj_t, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_setsc(zeta_r: f64, zeta_i: f64, chi: *const obj_t);
    pub fn bli_unzipsc(chi: *const obj_t, zeta_r: *const obj_t, zeta_i: *const obj_t);
    pub fn bli_zipsc(zeta_r: *const obj_t, zeta_i: *const obj_t, chi: *const obj_t);
    pub fn bli_saddsc(conjchi: conj_t, chi: *const f32, psi: *mut f32);
    pub fn bli_daddsc(conjchi: conj_t, chi: *const f64, psi: *mut f64);
    pub fn bli_caddsc(conjchi: conj_t, chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zaddsc(conjchi: conj_t, chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_sdivsc(conjchi: conj_t, chi: *const f32, psi: *mut f32);
    pub fn bli_ddivsc(conjchi: conj_t, chi: *const f64, psi: *mut f64);
    pub fn bli_cdivsc(conjchi: conj_t, chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zdivsc(conjchi: conj_t, chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_smulsc(conjchi: conj_t, chi: *const f32, psi: *mut f32);
    pub fn bli_dmulsc(conjchi: conj_t, chi: *const f64, psi: *mut f64);
    pub fn bli_cmulsc(conjchi: conj_t, chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zmulsc(conjchi: conj_t, chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_ssubsc(conjchi: conj_t, chi: *const f32, psi: *mut f32);
    pub fn bli_dsubsc(conjchi: conj_t, chi: *const f64, psi: *mut f64);
    pub fn bli_csubsc(conjchi: conj_t, chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zsubsc(conjchi: conj_t, chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_sinvertsc(conjchi: conj_t, chi: *const f32, psi: *mut f32);
    pub fn bli_dinvertsc(conjchi: conj_t, chi: *const f64, psi: *mut f64);
    pub fn bli_cinvertsc(conjchi: conj_t, chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zinvertsc(conjchi: conj_t, chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_sabsqsc(chi: *const f32, absq: *mut f32);
    pub fn bli_dabsqsc(chi: *const f64, absq: *mut f64);
    pub fn bli_cabsqsc(chi: *const scomplex, absq: *mut f32);
    pub fn bli_zabsqsc(chi: *const dcomplex, absq: *mut f64);
    pub fn bli_snormfsc(chi: *const f32, absq: *mut f32);
    pub fn bli_dnormfsc(chi: *const f64, absq: *mut f64);
    pub fn bli_cnormfsc(chi: *const scomplex, absq: *mut f32);
    pub fn bli_znormfsc(chi: *const dcomplex, absq: *mut f64);
    pub fn bli_ssqrtsc(chi: *const f32, psi: *mut f32);
    pub fn bli_dsqrtsc(chi: *const f64, psi: *mut f64);
    pub fn bli_csqrtsc(chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zsqrtsc(chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_ssqrtrsc(chi: *const f32, psi: *mut f32);
    pub fn bli_dsqrtrsc(chi: *const f64, psi: *mut f64);
    pub fn bli_csqrtrsc(chi: *const scomplex, psi: *mut scomplex);
    pub fn bli_zsqrtrsc(chi: *const dcomplex, psi: *mut dcomplex);
    pub fn bli_sgetsc(chi: *const f32, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_dgetsc(chi: *const f64, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_cgetsc(chi: *const scomplex, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_zgetsc(chi: *const dcomplex, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_ssetsc(zeta_r: f64, zeta_i: f64, chi: *mut f32);
    pub fn bli_dsetsc(zeta_r: f64, zeta_i: f64, chi: *mut f64);
    pub fn bli_csetsc(zeta_r: f64, zeta_i: f64, chi: *mut scomplex);
    pub fn bli_zsetsc(zeta_r: f64, zeta_i: f64, chi: *mut dcomplex);
    pub fn bli_sunzipsc(chi: *const f32, zeta_r: *mut f32, zeta_i: *mut f32);
    pub fn bli_dunzipsc(chi: *const f64, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_cunzipsc(chi: *const scomplex, zeta_r: *mut f32, zeta_i: *mut f32);
    pub fn bli_zunzipsc(chi: *const dcomplex, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_szipsc(zeta_r: *const f32, zeta_i: *const f32, chi: *mut f32);
    pub fn bli_dzipsc(zeta_r: *const f64, zeta_i: *const f64, chi: *mut f64);
    pub fn bli_czipsc(zeta_r: *const f32, zeta_i: *const f32, chi: *mut scomplex);
    pub fn bli_zzipsc(zeta_r: *const f64, zeta_i: *const f64, chi: *mut dcomplex);
    pub fn bli_igetsc(chi: *const dim_t, zeta_r: *mut f64, zeta_i: *mut f64);
    pub fn bli_isetsc(zeta_r: f64, zeta_i: f64, chi: *mut dim_t);
    pub fn bli_absqsc_qfp(dt: num_t) -> absqsc_vft;
    pub fn bli_normfsc_qfp(dt: num_t) -> normfsc_vft;
    pub fn bli_addsc_qfp(dt: num_t) -> addsc_vft;
    pub fn bli_divsc_qfp(dt: num_t) -> divsc_vft;
    pub fn bli_mulsc_qfp(dt: num_t) -> mulsc_vft;
    pub fn bli_subsc_qfp(dt: num_t) -> subsc_vft;
    pub fn bli_invertsc_qfp(dt: num_t) -> invertsc_vft;
    pub fn bli_sqrtsc_qfp(dt: num_t) -> sqrtsc_vft;
    pub fn bli_sqrtrsc_qfp(dt: num_t) -> sqrtrsc_vft;
    pub fn bli_unzipsc_qfp(dt: num_t) -> unzipsc_vft;
    pub fn bli_zipsc_qfp(dt: num_t) -> zipsc_vft;
    pub fn bli_getsc_qfp(dt: num_t) -> getsc_vft;
    pub fn bli_setsc_qfp(dt: num_t) -> setsc_vft;
    pub fn bli_copysc(chi: *const obj_t, psi: *const obj_t);
    pub fn bli_sscopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_ddcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_cccopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_zzcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_sccopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_cscopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_dzcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_zdcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_sdcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_szcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_dscopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_dccopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_cdcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_czcopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_zscopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_zccopysc(
        conjchi: conj_t,
        chi: *const c_void,
        psi: *mut c_void,
    );
    pub fn bli_addv_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_copyv_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_subv_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_swapv_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_amaxv_check(x: *const obj_t, index: *const obj_t);
    pub fn bli_axpbyv_check(
        alpha: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_axpyv_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_scal2v_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_dotv_check(x: *const obj_t, y: *const obj_t, rho: *const obj_t);
    pub fn bli_dotxv_check(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        beta: *const obj_t,
        rho: *const obj_t,
    );
    pub fn bli_invertv_check(x: *const obj_t);
    pub fn bli_invscalv_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_scalv_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setv_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_xpbyv_check(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_l1v_xy_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_l1v_axy_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_l1v_xby_check(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_l1v_axby_check(
        alpha: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_l1v_dot_check(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        beta: *const obj_t,
        rho: *const obj_t,
    );
    pub fn bli_l1v_x_check(x: *const obj_t);
    pub fn bli_l1v_ax_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_l1v_xi_check(x: *const obj_t, index: *const obj_t);
    pub fn bli_addv_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_copyv_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_subv_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_amaxv_ex(
        x: *const obj_t,
        index: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_axpbyv_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_axpyv_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scal2v_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dotv_ex(
        x: *const obj_t,
        y: *const obj_t,
        rho: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dotxv_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        beta: *const obj_t,
        rho: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_invertv_ex(x: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_invscalv_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scalv_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_setv_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_swapv_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_xpbyv_ex(
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_addv(x: *const obj_t, y: *const obj_t);
    pub fn bli_copyv(x: *const obj_t, y: *const obj_t);
    pub fn bli_subv(x: *const obj_t, y: *const obj_t);
    pub fn bli_amaxv(x: *const obj_t, index: *const obj_t);
    pub fn bli_axpbyv(alpha: *const obj_t, x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_axpyv(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_scal2v(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_dotv(x: *const obj_t, y: *const obj_t, rho: *const obj_t);
    pub fn bli_dotxv(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        beta: *const obj_t,
        rho: *const obj_t,
    );
    pub fn bli_invertv(x: *const obj_t);
    pub fn bli_invscalv(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_scalv(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setv(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_swapv(x: *const obj_t, y: *const obj_t);
    pub fn bli_xpbyv(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_saddv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daddv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caddv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaddv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scopyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dcopyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ccopyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zcopyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssubv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsubv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csubv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsubv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_samaxv_ex(
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        index: *mut dim_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_damaxv_ex(
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        index: *mut dim_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_camaxv_ex(
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        index: *mut dim_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zamaxv_ex(
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        index: *mut dim_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saxpyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daxpyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caxpyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaxpyv_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sscal2v_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dscal2v_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cscal2v_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zscal2v_ex(
        conjx: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sdotv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        rho: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ddotv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        rho: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cdotv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        rho: *mut scomplex,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zdotv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        rho: *mut dcomplex,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sdotxv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        beta: *const f32,
        rho: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ddotxv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        beta: *const f64,
        rho: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cdotxv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        beta: *const scomplex,
        rho: *mut scomplex,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zdotxv_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        beta: *const dcomplex,
        rho: *mut dcomplex,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sinvertv_ex(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dinvertv_ex(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cinvertv_ex(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zinvertv_ex(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sinvscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dinvscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cinvscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zinvscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zscalv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssetv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsetv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csetv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsetv_ex(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sswapv_ex(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dswapv_ex(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cswapv_ex(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zswapv_ex(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zxpbyv_ex(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saddv(conjx: conj_t, n: dim_t, x: *const f32, incx: inc_t, y: *mut f32, incy: inc_t);
    pub fn bli_daddv(conjx: conj_t, n: dim_t, x: *const f64, incx: inc_t, y: *mut f64, incy: inc_t);
    pub fn bli_caddv(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zaddv(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_scopyv(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_dcopyv(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_ccopyv(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zcopyv(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_ssubv(conjx: conj_t, n: dim_t, x: *const f32, incx: inc_t, y: *mut f32, incy: inc_t);
    pub fn bli_dsubv(conjx: conj_t, n: dim_t, x: *const f64, incx: inc_t, y: *mut f64, incy: inc_t);
    pub fn bli_csubv(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zsubv(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_samaxv(n: dim_t, x: *const f32, incx: inc_t, index: *mut dim_t);
    pub fn bli_damaxv(n: dim_t, x: *const f64, incx: inc_t, index: *mut dim_t);
    pub fn bli_camaxv(n: dim_t, x: *const scomplex, incx: inc_t, index: *mut dim_t);
    pub fn bli_zamaxv(n: dim_t, x: *const dcomplex, incx: inc_t, index: *mut dim_t);
    pub fn bli_saxpbyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_daxpbyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_caxpbyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zaxpbyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_saxpyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_daxpyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_caxpyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zaxpyv(
        conjx: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_sscal2v(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_dscal2v(
        conjx: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_cscal2v(
        conjx: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zscal2v(
        conjx: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_sdotv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        rho: *mut f32,
    );
    pub fn bli_ddotv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        rho: *mut f64,
    );
    pub fn bli_cdotv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        rho: *mut scomplex,
    );
    pub fn bli_zdotv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        rho: *mut dcomplex,
    );
    pub fn bli_sdotxv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        beta: *const f32,
        rho: *mut f32,
    );
    pub fn bli_ddotxv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        beta: *const f64,
        rho: *mut f64,
    );
    pub fn bli_cdotxv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        beta: *const scomplex,
        rho: *mut scomplex,
    );
    pub fn bli_zdotxv(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        beta: *const dcomplex,
        rho: *mut dcomplex,
    );
    pub fn bli_sinvertv(n: dim_t, x: *mut f32, incx: inc_t);
    pub fn bli_dinvertv(n: dim_t, x: *mut f64, incx: inc_t);
    pub fn bli_cinvertv(n: dim_t, x: *mut scomplex, incx: inc_t);
    pub fn bli_zinvertv(n: dim_t, x: *mut dcomplex, incx: inc_t);
    pub fn bli_sinvscalv(conjalpha: conj_t, n: dim_t, alpha: *const f32, x: *mut f32, incx: inc_t);
    pub fn bli_dinvscalv(conjalpha: conj_t, n: dim_t, alpha: *const f64, x: *mut f64, incx: inc_t);
    pub fn bli_cinvscalv(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: inc_t,
    );
    pub fn bli_zinvscalv(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
    );
    pub fn bli_sscalv(conjalpha: conj_t, n: dim_t, alpha: *const f32, x: *mut f32, incx: inc_t);
    pub fn bli_dscalv(conjalpha: conj_t, n: dim_t, alpha: *const f64, x: *mut f64, incx: inc_t);
    pub fn bli_cscalv(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: inc_t,
    );
    pub fn bli_zscalv(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
    );
    pub fn bli_ssetv(conjalpha: conj_t, n: dim_t, alpha: *const f32, x: *mut f32, incx: inc_t);
    pub fn bli_dsetv(conjalpha: conj_t, n: dim_t, alpha: *const f64, x: *mut f64, incx: inc_t);
    pub fn bli_csetv(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: inc_t,
    );
    pub fn bli_zsetv(
        conjalpha: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
    );
    pub fn bli_sswapv(n: dim_t, x: *mut f32, incx: inc_t, y: *mut f32, incy: inc_t);
    pub fn bli_dswapv(n: dim_t, x: *mut f64, incx: inc_t, y: *mut f64, incy: inc_t);
    pub fn bli_cswapv(n: dim_t, x: *mut scomplex, incx: inc_t, y: *mut scomplex, incy: inc_t);
    pub fn bli_zswapv(n: dim_t, x: *mut dcomplex, incx: inc_t, y: *mut dcomplex, incy: inc_t);
    pub fn bli_sxpbyv(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_dxpbyv(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_cxpbyv(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zxpbyv(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_addv_ex_qfp(dt: num_t) -> addv_ex_vft;
    pub fn bli_copyv_ex_qfp(dt: num_t) -> copyv_ex_vft;
    pub fn bli_subv_ex_qfp(dt: num_t) -> subv_ex_vft;
    pub fn bli_amaxv_ex_qfp(dt: num_t) -> amaxv_ex_vft;
    pub fn bli_axpbyv_ex_qfp(dt: num_t) -> axpbyv_ex_vft;
    pub fn bli_axpyv_ex_qfp(dt: num_t) -> axpyv_ex_vft;
    pub fn bli_scal2v_ex_qfp(dt: num_t) -> scal2v_ex_vft;
    pub fn bli_dotv_ex_qfp(dt: num_t) -> dotv_ex_vft;
    pub fn bli_dotxv_ex_qfp(dt: num_t) -> dotxv_ex_vft;
    pub fn bli_invertv_ex_qfp(dt: num_t) -> invertv_ex_vft;
    pub fn bli_invscalv_ex_qfp(dt: num_t) -> invscalv_ex_vft;
    pub fn bli_scalv_ex_qfp(dt: num_t) -> scalv_ex_vft;
    pub fn bli_setv_ex_qfp(dt: num_t) -> setv_ex_vft;
    pub fn bli_swapv_ex_qfp(dt: num_t) -> swapv_ex_vft;
    pub fn bli_xpbyv_ex_qfp(dt: num_t) -> xpbyv_ex_vft;
    pub fn bli_addd_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_copyd_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_subd_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_axpyd_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_scal2d_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_invertd_check(x: *const obj_t);
    pub fn bli_invscald_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_scald_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setd_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setid_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_shiftd_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_xpbyd_check(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_l1d_xy_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_l1d_axy_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_l1d_x_check(x: *const obj_t);
    pub fn bli_l1d_ax_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_addd_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_copyd_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_subd_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_axpyd_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scal2d_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_invertd_ex(x: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_invscald_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scald_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_setd_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_setid_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_shiftd_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_xpbyd_ex(
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_addd(x: *const obj_t, y: *const obj_t);
    pub fn bli_copyd(x: *const obj_t, y: *const obj_t);
    pub fn bli_subd(x: *const obj_t, y: *const obj_t);
    pub fn bli_axpyd(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_scal2d(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_invertd(x: *const obj_t);
    pub fn bli_invscald(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_scald(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setd(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setid(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_shiftd(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_xpbyd(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_saddd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daddd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caddd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaddd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scopyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dcopyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ccopyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zcopyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssubd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsubd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csubd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsubd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saxpyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daxpyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caxpyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaxpyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sscal2d_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dscal2d_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cscal2d_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zscal2d_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sinvertd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dinvertd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cinvertd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zinvertd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sinvscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dinvscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cinvscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zinvscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zscald_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssetd_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsetd_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csetd_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsetd_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssetid_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsetid_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csetid_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsetid_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sshiftd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dshiftd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cshiftd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zshiftd_ex(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sxpbyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dxpbyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cxpbyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zxpbyd_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saddd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_daddd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_caddd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zaddd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_scopyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dcopyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ccopyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zcopyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ssubd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dsubd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_csubd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zsubd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_saxpyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_daxpyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_caxpyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zaxpyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_sscal2d(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dscal2d(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_cscal2d(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zscal2d(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_sinvertd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dinvertd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_cinvertd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zinvertd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_sinvscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dinvscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_cinvscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zinvscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_sscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_cscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zscald(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_ssetd(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dsetd(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_csetd(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zsetd(
        conjalpha: conj_t,
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_ssetid(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dsetid(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_csetid(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zsetid(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_sshiftd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dshiftd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_cshiftd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zshiftd(
        diagoffx: doff_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_sxpbyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dxpbyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_cxpbyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zxpbyd(
        diagoffx: doff_t,
        diagx: diag_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_addd_ex_qfp(dt: num_t) -> addd_ex_vft;
    pub fn bli_copyd_ex_qfp(dt: num_t) -> copyd_ex_vft;
    pub fn bli_subd_ex_qfp(dt: num_t) -> subd_ex_vft;
    pub fn bli_axpyd_ex_qfp(dt: num_t) -> axpyd_ex_vft;
    pub fn bli_scal2d_ex_qfp(dt: num_t) -> scal2d_ex_vft;
    pub fn bli_invertd_ex_qfp(dt: num_t) -> invertd_ex_vft;
    pub fn bli_invscald_ex_qfp(dt: num_t) -> invscald_ex_vft;
    pub fn bli_scald_ex_qfp(dt: num_t) -> scald_ex_vft;
    pub fn bli_setd_ex_qfp(dt: num_t) -> setd_ex_vft;
    pub fn bli_setid_ex_qfp(dt: num_t) -> setid_ex_vft;
    pub fn bli_shiftd_ex_qfp(dt: num_t) -> shiftd_ex_vft;
    pub fn bli_xpbyd_ex_qfp(dt: num_t) -> xpbyd_ex_vft;
    pub fn bli_axpy2v_check(
        alphax: *const obj_t,
        alphay: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        z: *const obj_t,
    );
    pub fn bli_axpyf_check(alpha: *const obj_t, a: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_dotaxpyv_check(
        alpha: *const obj_t,
        xt: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        rho: *const obj_t,
        z: *const obj_t,
    );
    pub fn bli_dotxaxpyf_check(
        alpha: *const obj_t,
        at: *const obj_t,
        a: *const obj_t,
        w: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        z: *const obj_t,
    );
    pub fn bli_dotxf_check(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_axpy2v_ex(
        alphax: *const obj_t,
        alphay: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        z: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_axpyf_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dotaxpyv_ex(
        alpha: *const obj_t,
        xt: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        rho: *const obj_t,
        z: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dotxaxpyf_ex(
        alpha: *const obj_t,
        at: *const obj_t,
        a: *const obj_t,
        w: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        z: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dotxf_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_axpy2v(
        alphax: *const obj_t,
        alphay: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        z: *const obj_t,
    );
    pub fn bli_axpyf(alpha: *const obj_t, a: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_dotaxpyv(
        alpha: *const obj_t,
        xt: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        rho: *const obj_t,
        z: *const obj_t,
    );
    pub fn bli_dotxaxpyf(
        alpha: *const obj_t,
        at: *const obj_t,
        a: *const obj_t,
        w: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        z: *const obj_t,
    );
    pub fn bli_dotxf(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_saxpy2v_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const f32,
        alphay: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        z: *mut f32,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daxpy2v_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const f64,
        alphay: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        z: *mut f64,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caxpy2v_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const scomplex,
        alphay: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        z: *mut scomplex,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaxpy2v_ex(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const dcomplex,
        alphay: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        z: *mut dcomplex,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saxpyf_ex(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f32,
        a: *const f32,
        inca: inc_t,
        lda: inc_t,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daxpyf_ex(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f64,
        a: *const f64,
        inca: inc_t,
        lda: inc_t,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caxpyf_ex(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaxpyf_ex(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sdotaxpyv_ex(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        rho: *mut f32,
        z: *mut f32,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ddotaxpyv_ex(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        rho: *mut f64,
        z: *mut f64,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cdotaxpyv_ex(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        rho: *mut scomplex,
        z: *mut scomplex,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zdotaxpyv_ex(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        rho: *mut dcomplex,
        z: *mut dcomplex,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sdotxaxpyf_ex(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f32,
        a: *const f32,
        inca: inc_t,
        lda: inc_t,
        w: *const f32,
        incw: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        z: *mut f32,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ddotxaxpyf_ex(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f64,
        a: *const f64,
        inca: inc_t,
        lda: inc_t,
        w: *const f64,
        incw: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        z: *mut f64,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cdotxaxpyf_ex(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        inca: inc_t,
        lda: inc_t,
        w: *const scomplex,
        incw: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        z: *mut scomplex,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zdotxaxpyf_ex(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        inca: inc_t,
        lda: inc_t,
        w: *const dcomplex,
        incw: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        z: *mut dcomplex,
        incz: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sdotxf_ex(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f32,
        a: *const f32,
        inca: inc_t,
        lda: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ddotxf_ex(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f64,
        a: *const f64,
        inca: inc_t,
        lda: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cdotxf_ex(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zdotxf_ex(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saxpy2v(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const f32,
        alphay: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        z: *mut f32,
        incz: inc_t,
    );
    pub fn bli_daxpy2v(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const f64,
        alphay: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        z: *mut f64,
        incz: inc_t,
    );
    pub fn bli_caxpy2v(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const scomplex,
        alphay: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        z: *mut scomplex,
        incz: inc_t,
    );
    pub fn bli_zaxpy2v(
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alphax: *const dcomplex,
        alphay: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        z: *mut dcomplex,
        incz: inc_t,
    );
    pub fn bli_saxpyf(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f32,
        a: *const f32,
        inca: inc_t,
        lda: inc_t,
        x: *const f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_daxpyf(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f64,
        a: *const f64,
        inca: inc_t,
        lda: inc_t,
        x: *const f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_caxpyf(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zaxpyf(
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_sdotaxpyv(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        rho: *mut f32,
        z: *mut f32,
        incz: inc_t,
    );
    pub fn bli_ddotaxpyv(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        rho: *mut f64,
        z: *mut f64,
        incz: inc_t,
    );
    pub fn bli_cdotaxpyv(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        rho: *mut scomplex,
        z: *mut scomplex,
        incz: inc_t,
    );
    pub fn bli_zdotaxpyv(
        conjxt: conj_t,
        conjx: conj_t,
        conjy: conj_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        rho: *mut dcomplex,
        z: *mut dcomplex,
        incz: inc_t,
    );
    pub fn bli_sdotxaxpyf(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f32,
        a: *const f32,
        inca: inc_t,
        lda: inc_t,
        w: *const f32,
        incw: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        z: *mut f32,
        incz: inc_t,
    );
    pub fn bli_ddotxaxpyf(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f64,
        a: *const f64,
        inca: inc_t,
        lda: inc_t,
        w: *const f64,
        incw: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        z: *mut f64,
        incz: inc_t,
    );
    pub fn bli_cdotxaxpyf(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        inca: inc_t,
        lda: inc_t,
        w: *const scomplex,
        incw: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        z: *mut scomplex,
        incz: inc_t,
    );
    pub fn bli_zdotxaxpyf(
        conjat: conj_t,
        conja: conj_t,
        conjw: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        inca: inc_t,
        lda: inc_t,
        w: *const dcomplex,
        incw: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        z: *mut dcomplex,
        incz: inc_t,
    );
    pub fn bli_sdotxf(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f32,
        a: *const f32,
        inca: inc_t,
        lda: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_ddotxf(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const f64,
        a: *const f64,
        inca: inc_t,
        lda: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_cdotxf(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zdotxf(
        conjat: conj_t,
        conjx: conj_t,
        m: dim_t,
        b_n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        inca: inc_t,
        lda: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_axpy2v_ex_qfp(dt: num_t) -> axpy2v_ex_vft;
    pub fn bli_axpyf_ex_qfp(dt: num_t) -> axpyf_ex_vft;
    pub fn bli_dotaxpyv_ex_qfp(dt: num_t) -> dotaxpyv_ex_vft;
    pub fn bli_dotxaxpyf_ex_qfp(dt: num_t) -> dotxaxpyf_ex_vft;
    pub fn bli_dotxf_ex_qfp(dt: num_t) -> dotxf_ex_vft;
    pub fn bli_addm_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_copym_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_subm_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_axpym_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_scal2m_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_invscalm_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_scalm_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setm_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_xpbym_check(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_l1m_xy_check(x: *const obj_t, y: *const obj_t);
    pub fn bli_l1m_axy_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_l1m_ax_check(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_addm_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_copym_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_subm_ex(x: *const obj_t, y: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_axpym_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scal2m_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_invscalm_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scalm_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_setm_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_xpbym_ex(
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_xpbym_md_ex(
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_addm(x: *const obj_t, y: *const obj_t);
    pub fn bli_copym(x: *const obj_t, y: *const obj_t);
    pub fn bli_subm(x: *const obj_t, y: *const obj_t);
    pub fn bli_axpym(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_scal2m(alpha: *const obj_t, x: *const obj_t, y: *const obj_t);
    pub fn bli_invscalm(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_scalm(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_setm(alpha: *const obj_t, x: *const obj_t);
    pub fn bli_xpbym(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_xpbym_md(x: *const obj_t, beta: *const obj_t, y: *const obj_t);
    pub fn bli_saddm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daddm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caddm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaddm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scopym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dcopym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ccopym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zcopym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssubm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsubm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csubm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsubm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saxpym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_daxpym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_caxpym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zaxpym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sscal2m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dscal2m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cscal2m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zscal2m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sinvscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dinvscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cinvscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zinvscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zscalm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssetm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsetm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csetm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsetm_ex(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sxpbym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dxpbym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cxpbym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zxpbym_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ddxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ccxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zzxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sdxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_scxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_szxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dcxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dzxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cdxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_czxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zdxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zcxpbym_md_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_saddm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_daddm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_caddm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zaddm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_scopym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dcopym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ccopym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zcopym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ssubm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dsubm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_csubm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zsubm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_saxpym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_daxpym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_caxpym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zaxpym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_sscal2m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dscal2m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_cscal2m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zscal2m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_sinvscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dinvscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_cinvscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zinvscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_sscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_cscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zscalm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_ssetm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_dsetm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_csetm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zsetm(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_sxpbym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dxpbym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_cxpbym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zxpbym(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ssxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ddxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_ccxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zzxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_sdxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_scxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_szxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dsxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dcxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_dzxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_csxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_cdxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_czxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zsxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zdxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_zcxpbym_md(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    );
    pub fn bli_addm_ex_qfp(dt: num_t) -> addm_ex_vft;
    pub fn bli_copym_ex_qfp(dt: num_t) -> copym_ex_vft;
    pub fn bli_subm_ex_qfp(dt: num_t) -> subm_ex_vft;
    pub fn bli_axpym_ex_qfp(dt: num_t) -> axpym_ex_vft;
    pub fn bli_scal2m_ex_qfp(dt: num_t) -> scal2m_ex_vft;
    pub fn bli_invscalm_ex_qfp(dt: num_t) -> invscalm_ex_vft;
    pub fn bli_scalm_ex_qfp(dt: num_t) -> scalm_ex_vft;
    pub fn bli_setm_ex_qfp(dt: num_t) -> setm_ex_vft;
    pub fn bli_xpbym_ex_qfp(dt: num_t) -> xpbym_ex_vft;
    pub fn bli_xpbym_md_ex_qfp2(dtx: num_t, dty: num_t) -> xpbym_md_ex_vft;
    pub fn bli_saddm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_daddm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_caddm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zaddm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_scopym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dcopym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ccopym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zcopym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ssubm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dsubm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_csubm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zsubm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_saxpym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_daxpym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_caxpym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zaxpym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sscal2m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dscal2m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cscal2m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zscal2m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sinvscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dinvscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cinvscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zinvscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zscalm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ssetm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dsetm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_csetm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zsetm_unb_var1(
        conjalpha: conj_t,
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sxpbym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dxpbym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cxpbym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zxpbym_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ssxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ddxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ccxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zzxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sdxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_scxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_szxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dsxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dcxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dzxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_csxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cdxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_czxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zsxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f32,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zdxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut f64,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zcxpbym_md_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_packm_alloc(
        size_needed: siz_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    ) -> *mut c_void;
    pub fn bli_packm_alloc_ex(
        size_needed: siz_t,
        pack_buf_type: packbuf_t,
        thread: *mut thrinfo_t,
    ) -> *mut c_void;
    pub fn bli_packm_cntl_init_node(
        var_func: void_fp,
        var: packm_var_oft,
        params: *const c_void,
        cntl: *mut packm_cntl_t,
    );
    pub fn bli_packm_def_cntl_init_node(
        var_func: void_fp,
        dt_orig: num_t,
        dt_pack: num_t,
        dt_bmult: num_t,
        ukr: packm_ker_ft,
        bmult_m_def: dim_t,
        bmult_m_pack: dim_t,
        bmult_m_bcast: dim_t,
        bmult_m_scale: dim_t,
        bmult_m_pack_scale: dim_t,
        bmult_n_def: dim_t,
        does_invert_diag: bool,
        rev_iter_if_upper: bool,
        rev_iter_if_lower: bool,
        pack_schema: pack_t,
        pack_buf_type: packbuf_t,
        cntl: *mut packm_def_cntl_t,
    );
    pub fn bli_packm_init_check(a: *const obj_t, p: *const obj_t);
    pub fn bli_packm_int_check(a: *const obj_t, p: *const obj_t);
    pub fn bli_packm_init(
        dt_p: num_t,
        a: *const obj_t,
        p: *mut obj_t,
        cntl: *const cntl_t,
    ) -> siz_t;
    pub fn bli_packm_int(
        a: *const obj_t,
        p: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_packm_scalar(kappa: *mut obj_t, p: *mut obj_t) -> *mut c_void;
    pub fn bli_sspackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_ddpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_ccpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_zzpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_sdpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_szpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dspackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_dcpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_cdpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_czpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_zspackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_zcpackm_struc_cxk(
        strucc: struc_t,
        diagc: diag_t,
        uploc: uplo_t,
        conjc: conj_t,
        schema: pack_t,
        invdiag: bool,
        panel_dim: dim_t,
        panel_len: dim_t,
        panel_dim_max: dim_t,
        panel_len_max: dim_t,
        panel_dim_off: dim_t,
        panel_len_off: dim_t,
        panel_bcast: dim_t,
        kappa: *const c_void,
        c: *const c_void,
        incc: inc_t,
        ldc: inc_t,
        p: *mut c_void,
        ldp: inc_t,
        params: *const c_void,
        cntx: *const cntx_t,
    );
    pub fn bli_packm_blk_var1(
        c: *const obj_t,
        p: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_unpackm_cntl_init_node(
        var_func: void_fp,
        unpackm_var_func: void_fp,
        cntl: *mut unpackm_cntl_t,
    );
    pub fn bli_unpackm_int_check(p: *const obj_t, a: *const obj_t, cntx: *const cntx_t);
    pub fn bli_unpackm_int(
        a: *const obj_t,
        p: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_unpackm_blk_var1(
        p: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *const thrinfo_t,
    );
    pub fn bli_sunpackm_blk_var1(
        strucc: struc_t,
        diagoffc: doff_t,
        diagc: diag_t,
        uploc: uplo_t,
        transc: trans_t,
        m: dim_t,
        n: dim_t,
        m_panel: dim_t,
        n_panel: dim_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dunpackm_blk_var1(
        strucc: struc_t,
        diagoffc: doff_t,
        diagc: diag_t,
        uploc: uplo_t,
        transc: trans_t,
        m: dim_t,
        n: dim_t,
        m_panel: dim_t,
        n_panel: dim_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cunpackm_blk_var1(
        strucc: struc_t,
        diagoffc: doff_t,
        diagc: diag_t,
        uploc: uplo_t,
        transc: trans_t,
        m: dim_t,
        n: dim_t,
        m_panel: dim_t,
        n_panel: dim_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zunpackm_blk_var1(
        strucc: struc_t,
        diagoffc: doff_t,
        diagc: diag_t,
        uploc: uplo_t,
        transc: trans_t,
        m: dim_t,
        n: dim_t,
        m_panel: dim_t,
        n_panel: dim_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_gemv_check(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_hemv_check(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_symv_check(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_ger_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_her2_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_syr2_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_her_check(alpha: *const obj_t, x: *const obj_t, a: *const obj_t);
    pub fn bli_syr_check(alpha: *const obj_t, x: *const obj_t, a: *const obj_t);
    pub fn bli_trmv_check(alpha: *const obj_t, a: *const obj_t, x: *const obj_t);
    pub fn bli_trsv_check(alpha: *const obj_t, a: *const obj_t, x: *const obj_t);
    pub fn bli_xxmv_check(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_xxr_check(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_gemv_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_hemv_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_symv_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ger_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        a: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_her2_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        a: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_syr2_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        y: *const obj_t,
        a: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_her_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        a: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_syr_ex(
        alpha: *const obj_t,
        x: *const obj_t,
        a: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_trmv_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_trsv_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_gemv(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_hemv(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_symv(
        alpha: *const obj_t,
        a: *const obj_t,
        x: *const obj_t,
        beta: *const obj_t,
        y: *const obj_t,
    );
    pub fn bli_ger(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_her2(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_syr2(alpha: *const obj_t, x: *const obj_t, y: *const obj_t, a: *const obj_t);
    pub fn bli_her(alpha: *const obj_t, x: *const obj_t, a: *const obj_t);
    pub fn bli_syr(alpha: *const obj_t, x: *const obj_t, a: *const obj_t);
    pub fn bli_trmv(alpha: *const obj_t, a: *const obj_t, x: *const obj_t);
    pub fn bli_trsv(alpha: *const obj_t, a: *const obj_t, x: *const obj_t);
    pub fn bli_sgemv_ex(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dgemv_ex(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cgemv_ex(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zgemv_ex(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sger_ex(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dger_ex(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cger_ex(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zger_ex(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_shemv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dhemv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_chemv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zhemv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssymv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsymv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csymv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsymv_ex(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sher_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dher_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cher_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const scomplex,
        incx: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zher_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const dcomplex,
        incx: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssyr_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsyr_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csyr_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsyr_ex(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sher2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dher2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cher2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zher2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssyr2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsyr2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csyr2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsyr2_ex(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_strmv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dtrmv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ctrmv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ztrmv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_strsv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dtrsv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ctrsv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ztrsv_ex(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sgemv(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_dgemv(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_cgemv(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zgemv(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_sger(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_dger(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_cger(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_zger(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_shemv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_dhemv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_chemv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zhemv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_ssymv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f32,
        incx: inc_t,
        beta: *const f32,
        y: *mut f32,
        incy: inc_t,
    );
    pub fn bli_dsymv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const f64,
        incx: inc_t,
        beta: *const f64,
        y: *mut f64,
        incy: inc_t,
    );
    pub fn bli_csymv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const scomplex,
        incx: inc_t,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: inc_t,
    );
    pub fn bli_zsymv(
        uploa: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *const dcomplex,
        incx: inc_t,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
    );
    pub fn bli_sher(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_dher(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_cher(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const scomplex,
        incx: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_zher(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const dcomplex,
        incx: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_ssyr(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_dsyr(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_csyr(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_zsyr(
        uploa: uplo_t,
        conjx: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_sher2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_dher2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_cher2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_zher2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_ssyr2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f32,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_dsyr2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const f64,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_csyr2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_zsyr2(
        uploa: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
    );
    pub fn bli_strmv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
    );
    pub fn bli_dtrmv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
    );
    pub fn bli_ctrmv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
    );
    pub fn bli_ztrmv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
    );
    pub fn bli_strsv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
    );
    pub fn bli_dtrsv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
    );
    pub fn bli_ctrsv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
    );
    pub fn bli_ztrsv(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
    );
    pub fn bli_gemv_ex_qfp(dt: num_t) -> gemv_ex_vft;
    pub fn bli_ger_ex_qfp(dt: num_t) -> ger_ex_vft;
    pub fn bli_hemv_ex_qfp(dt: num_t) -> hemv_ex_vft;
    pub fn bli_symv_ex_qfp(dt: num_t) -> symv_ex_vft;
    pub fn bli_her_ex_qfp(dt: num_t) -> her_ex_vft;
    pub fn bli_syr_ex_qfp(dt: num_t) -> syr_ex_vft;
    pub fn bli_her2_ex_qfp(dt: num_t) -> her2_ex_vft;
    pub fn bli_syr2_ex_qfp(dt: num_t) -> syr2_ex_vft;
    pub fn bli_trmv_ex_qfp(dt: num_t) -> trmv_ex_vft;
    pub fn bli_trsv_ex_qfp(dt: num_t) -> trsv_ex_vft;
    pub fn bli_gemv_unb_var1_qfp(dt: num_t) -> gemv_unb_vft;
    pub fn bli_gemv_unb_var2_qfp(dt: num_t) -> gemv_unb_vft;
    pub fn bli_gemv_unf_var1_qfp(dt: num_t) -> gemv_unb_vft;
    pub fn bli_gemv_unf_var2_qfp(dt: num_t) -> gemv_unb_vft;
    pub fn bli_ger_unb_var1_qfp(dt: num_t) -> ger_unb_vft;
    pub fn bli_ger_unb_var2_qfp(dt: num_t) -> ger_unb_vft;
    pub fn bli_hemv_unb_var1_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unb_var2_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unb_var3_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unb_var4_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unf_var1_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unf_var3_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unf_var1a_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_hemv_unf_var3a_qfp(dt: num_t) -> hemv_unb_vft;
    pub fn bli_her_unb_var1_qfp(dt: num_t) -> her_unb_vft;
    pub fn bli_her_unb_var2_qfp(dt: num_t) -> her_unb_vft;
    pub fn bli_her2_unb_var1_qfp(dt: num_t) -> her2_unb_vft;
    pub fn bli_her2_unb_var2_qfp(dt: num_t) -> her2_unb_vft;
    pub fn bli_her2_unb_var3_qfp(dt: num_t) -> her2_unb_vft;
    pub fn bli_her2_unb_var4_qfp(dt: num_t) -> her2_unb_vft;
    pub fn bli_her2_unf_var1_qfp(dt: num_t) -> her2_unb_vft;
    pub fn bli_her2_unf_var4_qfp(dt: num_t) -> her2_unb_vft;
    pub fn bli_trmv_unb_var1_qfp(dt: num_t) -> trmv_unb_vft;
    pub fn bli_trmv_unb_var2_qfp(dt: num_t) -> trmv_unb_vft;
    pub fn bli_trmv_unf_var1_qfp(dt: num_t) -> trmv_unb_vft;
    pub fn bli_trmv_unf_var2_qfp(dt: num_t) -> trmv_unb_vft;
    pub fn bli_trsv_unb_var1_qfp(dt: num_t) -> trsv_unb_vft;
    pub fn bli_trsv_unb_var2_qfp(dt: num_t) -> trsv_unb_vft;
    pub fn bli_trsv_unf_var1_qfp(dt: num_t) -> trsv_unb_vft;
    pub fn bli_trsv_unf_var2_qfp(dt: num_t) -> trsv_unb_vft;
    pub fn bli_gemv_blk_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_gemv_blk_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_gemv_unb_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_gemv_unb_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_gemv_unf_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_gemv_unf_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_sgemv_unb_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dgemv_unb_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cgemv_unb_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zgemv_unb_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sgemv_unb_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dgemv_unb_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cgemv_unb_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zgemv_unb_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sgemv_unf_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dgemv_unf_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cgemv_unf_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zgemv_unf_var1(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sgemv_unf_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dgemv_unf_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cgemv_unf_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zgemv_unf_var2(
        transa: trans_t,
        conjx: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ger_blk_var1(
        alpha: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        a: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_ger_blk_var2(
        alpha: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        a: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_ger_unb_var1(
        alpha: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        a: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_ger_unb_var2(
        alpha: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        a: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_sger_unb_var1(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dger_unb_var1(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cger_unb_var1(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zger_unb_var1(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sger_unb_var2(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dger_unb_var2(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cger_unb_var2(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zger_unb_var2(
        conjx: conj_t,
        conjy: conj_t,
        m: dim_t,
        n: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_hemv_blk_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_blk_var2(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_blk_var3(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_blk_var4(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unb_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unb_var2(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unb_var3(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unb_var4(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unf_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unf_var3(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unf_var1a(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_hemv_unf_var3a(
        conjh: conj_t,
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        beta: *mut obj_t,
        y: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_shemv_unb_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unb_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unb_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unb_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unb_var2(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unb_var2(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unb_var2(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unb_var2(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unb_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unb_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unb_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unb_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unb_var4(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unb_var4(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unb_var4(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unb_var4(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unf_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unf_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unf_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unf_var1(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unf_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unf_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unf_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unf_var3(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unf_var1a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unf_var1a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unf_var1a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unf_var1a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_shemv_unf_var3a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        beta: *mut f32,
        y: *mut f32,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dhemv_unf_var3a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        beta: *mut f64,
        y: *mut f64,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_chemv_unf_var3a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        beta: *mut scomplex,
        y: *mut scomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zhemv_unf_var3a(
        uplo: uplo_t,
        conja: conj_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        beta: *mut dcomplex,
        y: *mut dcomplex,
        incy: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_her_blk_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        x: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her_blk_var2(
        conjh: conj_t,
        alpha: *mut obj_t,
        x: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her_unb_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        x: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her_unb_var2(
        conjh: conj_t,
        alpha: *mut obj_t,
        x: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_sher_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sher_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_her2_blk_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_blk_var2(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_blk_var3(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_blk_var4(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_unb_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_unb_var2(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_unb_var3(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_unb_var4(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_unf_var1(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_her2_unf_var4(
        conjh: conj_t,
        alpha: *mut obj_t,
        alpha_conj: *mut obj_t,
        x: *mut obj_t,
        y: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_sher2_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher2_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher2_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher2_unb_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sher2_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher2_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher2_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher2_unb_var2(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sher2_unb_var3(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher2_unb_var3(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher2_unb_var3(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher2_unb_var3(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sher2_unb_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher2_unb_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher2_unb_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher2_unb_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sher2_unf_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher2_unf_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher2_unf_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher2_unf_var1(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_sher2_unf_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f32,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dher2_unf_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut f64,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_cher2_unf_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut scomplex,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_zher2_unf_var4(
        uplo: uplo_t,
        conjx: conj_t,
        conjy: conj_t,
        conjh: conj_t,
        m: dim_t,
        alpha: *mut dcomplex,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_trmv_l_blk_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_l_blk_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_u_blk_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_u_blk_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_unb_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_unb_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_unf_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trmv_unf_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_strmv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrmv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrmv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrmv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_strmv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrmv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrmv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrmv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_strmv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrmv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrmv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrmv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_strmv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrmv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrmv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrmv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_trsv_l_blk_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_l_blk_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_u_blk_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_u_blk_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_unb_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_unb_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_unf_var1(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_trsv_unf_var2(
        alpha: *mut obj_t,
        a: *mut obj_t,
        x: *mut obj_t,
        cntx: *mut cntx_t,
        cntl: *mut cntl_t,
    );
    pub fn bli_strsv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrsv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrsv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrsv_unb_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_strsv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrsv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrsv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrsv_unb_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_strsv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrsv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrsv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrsv_unf_var1(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_strsv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f32,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_dtrsv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut f64,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ctrsv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut scomplex,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_ztrsv_unf_var2(
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        alpha: *mut dcomplex,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_l3_return_early_if_trivial(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    ) -> err_t;
    pub fn bli_l3_thrinfo_create(
        id: dim_t,
        gl_comm: *mut thrcomm_t,
        array: *mut array_t,
        rntm: *const rntm_t,
        cntl: *const cntl_t,
    ) -> *mut thrinfo_t;
    pub fn bli_l3_thrinfo_grow(thread: *mut thrinfo_t, rntm: *const rntm_t, cntl: *const cntl_t);
    pub fn bli_l3_sup_thrinfo_create(
        id: dim_t,
        gl_comm: *mut thrcomm_t,
        pool: *mut pool_t,
        rntm: *const rntm_t,
    ) -> *mut thrinfo_t;
    pub fn bli_l3_sup_thrinfo_update(rntm: *const rntm_t, root: *mut *mut thrinfo_t);
    pub fn bli_l3_thrinfo_print_gemm_paths(threads: *mut *mut thrinfo_t);
    pub fn bli_l3_thrinfo_print_trsm_paths(threads: *mut *mut thrinfo_t);
    pub fn bli_l3_thrinfo_free_paths(threads: *mut *mut thrinfo_t);
    pub fn bli_l3_thread_decorator(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        rntm: *const rntm_t,
    );
    pub fn bli_l3_thread_decorator_check(rntm: *const rntm_t);
    pub fn bli_l3_thread_decorator_thread_check(gl_comm: *mut thrcomm_t, rntm: *mut rntm_t);
    pub fn bli_l3_sup_thread_decorator(
        func: l3supint_ft,
        family: opid_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    ) -> err_t;
    pub fn bli_gemm_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_gemmt_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_her2k_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_syr2k_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_hemm_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_symm_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_trmm3_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_herk_check(
        alpha: *const obj_t,
        a: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_syrk_check(
        alpha: *const obj_t,
        a: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_trmm_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_trsm_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_gemm_basic_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_gemmt_basic_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_hemm_basic_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_trsm_basic_check(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_herk_basic_check(
        alpha: *const obj_t,
        a: *const obj_t,
        ah: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_her2k_basic_check(
        alpha: *const obj_t,
        a: *const obj_t,
        bh: *const obj_t,
        b: *const obj_t,
        ah: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_l3_basic_check(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
    );
    pub fn bli_l3_packa(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_l3_packb(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_l3_prune_unref_mparts_m(a: *mut obj_t, b: *const obj_t, c: *mut obj_t);
    pub fn bli_l3_prune_unref_mparts_n(a: *const obj_t, b: *mut obj_t, c: *mut obj_t);
    pub fn bli_l3_prune_unref_mparts_k(a: *mut obj_t, b: *mut obj_t, c: *const obj_t);
    pub fn bli_gemm(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_gemmt(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_her2k(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_syr2k(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_hemm(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_symm(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_trmm3(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
    );
    pub fn bli_herk(alpha: *const obj_t, a: *const obj_t, beta: *const obj_t, c: *const obj_t);
    pub fn bli_syrk(alpha: *const obj_t, a: *const obj_t, beta: *const obj_t, c: *const obj_t);
    pub fn bli_trmm(side: side_t, alpha: *const obj_t, a: *const obj_t, b: *const obj_t);
    pub fn bli_trsm(side: side_t, alpha: *const obj_t, a: *const obj_t, b: *const obj_t);
    pub fn bli_gemm_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_gemmt_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_her2k_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_syr2k_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_hemm_ex(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_symm_ex(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_trmm3_ex(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_herk_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_syrk_ex(
        alpha: *const obj_t,
        a: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_trmm_ex(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_trsm_ex(
        side: side_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sgemm(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dgemm(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_cgemm(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zgemm(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_shemm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dhemm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_chemm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zhemm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_ssymm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dsymm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_csymm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zsymm(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_sherk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dherk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_cherk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f32,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zherk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f64,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_sher2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dher2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_cher2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zher2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_ssyrk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dsyrk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_csyrk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zsyrk(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_sgemmt(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dgemmt(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_cgemmt(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zgemmt(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_ssyr2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dsyr2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_csyr2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_zsyr2k(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_strmm3(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_dtrmm3(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_ctrmm3(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_ztrmm3(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
    );
    pub fn bli_strmm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f32,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dtrmm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f64,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_ctrmm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_ztrmm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_strsm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f32,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_dtrsm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f64,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_ctrsm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_ztrsm(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
    );
    pub fn bli_sgemm_ex(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dgemm_ex(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cgemm_ex(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zgemm_ex(
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_shemm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dhemm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_chemm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zhemm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssymm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsymm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csymm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsymm_ex(
        side: side_t,
        uploa: uplo_t,
        conja: conj_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sherk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dherk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cherk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f32,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zherk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f64,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sher2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dher2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cher2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zher2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssyrk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsyrk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csyrk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsyrk_ex(
        uploc: uplo_t,
        transa: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sgemmt_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dgemmt_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cgemmt_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zgemmt_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssyr2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsyr2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csyr2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsyr2k_ex(
        uploc: uplo_t,
        transa: trans_t,
        transb: trans_t,
        m: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_strmm3_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f32,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dtrmm3_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const f64,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ctrmm3_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ztrmm3_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        transb: trans_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *const dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_strmm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f32,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dtrmm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f64,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ctrmm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ztrmm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_strsm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f32,
        a: *const f32,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f32,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dtrsm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const f64,
        a: *const f64,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut f64,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ctrsm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut scomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ztrsm_ex(
        side: side_t,
        uploa: uplo_t,
        transa: trans_t,
        diaga: diag_t,
        m: dim_t,
        n: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut dcomplex,
        rs_b: inc_t,
        cs_b: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_gemmsup(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    ) -> err_t;
    pub fn bli_gemmtsup(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    ) -> err_t;
    pub fn bli_gemmsup_ref(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *mut rntm_t,
    ) -> err_t;
    pub fn bli_gemmtsup_ref(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *mut rntm_t,
    ) -> err_t;
    pub fn bli_gemmsup_int(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
        thread: *mut thrinfo_t,
    ) -> err_t;
    pub fn bli_gemmtsup_int(
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
        thread: *mut thrinfo_t,
    ) -> err_t;
    pub fn bli_gemmsup_ref_var1(
        trans: trans_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        eff_id: stor3_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemmsup_ref_var2(
        trans: trans_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        eff_id: stor3_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemmsup_ref_var1n(
        trans: trans_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        eff_id: stor3_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemmsup_ref_var2m(
        trans: trans_t,
        alpha: *const obj_t,
        a: *const obj_t,
        b: *const obj_t,
        beta: *const obj_t,
        c: *const obj_t,
        eff_id: stor3_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_sgemmsup_ref_var1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_dgemmsup_ref_var1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_cgemmsup_ref_var1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_zgemmsup_ref_var1(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_sgemmsup_ref_var2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_dgemmsup_ref_var2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_cgemmsup_ref_var2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_zgemmsup_ref_var2(
        conja: conj_t,
        conjb: conj_t,
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *mut c_void,
        a: *mut c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        b: *mut c_void,
        rs_b: inc_t,
        cs_b: inc_t,
        beta: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        eff_id: stor3_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_packm_sup_finalize_mem(did_pack: bool, thread: *mut thrinfo_t);
    pub fn bli_packm_sup(
        will_pack: bool,
        pack_buf_type: packbuf_t,
        stor_id: stor3_t,
        dt: num_t,
        m: dim_t,
        k: dim_t,
        mr: dim_t,
        kappa: *const c_void,
        a: *const c_void,
        rs_a: inc_t,
        cs_a: inc_t,
        p: *mut *mut c_void,
        rs_p: *mut inc_t,
        cs_p: *mut inc_t,
        ps_p: *mut inc_t,
        cntx: *const cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_spackm_sup_var1(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        m_max: dim_t,
        n_max: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_dpackm_sup_var1(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        m_max: dim_t,
        n_max: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_cpackm_sup_var1(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        m_max: dim_t,
        n_max: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_zpackm_sup_var1(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        m_max: dim_t,
        n_max: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        pd_p: dim_t,
        ps_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_spackm_sup_var2(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_dpackm_sup_var2(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_cpackm_sup_var2(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_zpackm_sup_var2(
        transc: trans_t,
        schema: pack_t,
        m: dim_t,
        n: dim_t,
        kappa: *mut c_void,
        c: *mut c_void,
        rs_c: inc_t,
        cs_c: inc_t,
        p: *mut c_void,
        rs_p: inc_t,
        cs_p: inc_t,
        cntx: *mut cntx_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemm_ukernel(
        alpha: *mut obj_t,
        a: *mut obj_t,
        b: *mut obj_t,
        beta: *mut obj_t,
        c: *mut obj_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_gemmtrsm_ukernel(
        alpha: *mut obj_t,
        a1x: *mut obj_t,
        a11: *mut obj_t,
        bx1: *mut obj_t,
        b11: *mut obj_t,
        c11: *mut obj_t,
        cntx: *mut cntx_t,
    );
    pub fn bli_trsm_ukernel(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t, cntx: *mut cntx_t);
    pub fn bli_sgemm_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f32,
        a: *const f32,
        b: *const f32,
        beta: *const f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemm_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f64,
        a: *const f64,
        b: *const f64,
        beta: *const f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemm_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a: *const scomplex,
        b: *const scomplex,
        beta: *const scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemm_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a: *const dcomplex,
        b: *const dcomplex,
        beta: *const dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmtrsm_l_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f32,
        a1x: *const f32,
        a11: *const f32,
        bx1: *const f32,
        b11: *mut f32,
        c11: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmtrsm_l_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f64,
        a1x: *const f64,
        a11: *const f64,
        bx1: *const f64,
        b11: *mut f64,
        c11: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmtrsm_l_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a1x: *const scomplex,
        a11: *const scomplex,
        bx1: *const scomplex,
        b11: *mut scomplex,
        c11: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmtrsm_l_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a1x: *const dcomplex,
        a11: *const dcomplex,
        bx1: *const dcomplex,
        b11: *mut dcomplex,
        c11: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_sgemmtrsm_u_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f32,
        a1x: *const f32,
        a11: *const f32,
        bx1: *const f32,
        b11: *mut f32,
        c11: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dgemmtrsm_u_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const f64,
        a1x: *const f64,
        a11: *const f64,
        bx1: *const f64,
        b11: *mut f64,
        c11: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_cgemmtrsm_u_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const scomplex,
        a1x: *const scomplex,
        a11: *const scomplex,
        bx1: *const scomplex,
        b11: *mut scomplex,
        c11: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_zgemmtrsm_u_ukernel(
        m: dim_t,
        n: dim_t,
        k: dim_t,
        alpha: *const dcomplex,
        a1x: *const dcomplex,
        a11: *const dcomplex,
        bx1: *const dcomplex,
        b11: *mut dcomplex,
        c11: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_strsm_l_ukernel(
        a: *const f32,
        b: *mut f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dtrsm_l_ukernel(
        a: *const f64,
        b: *mut f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_ctrsm_l_ukernel(
        a: *const scomplex,
        b: *mut scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_ztrsm_l_ukernel(
        a: *const dcomplex,
        b: *mut dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_strsm_u_ukernel(
        a: *const f32,
        b: *mut f32,
        c: *mut f32,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_dtrsm_u_ukernel(
        a: *const f64,
        b: *mut f64,
        c: *mut f64,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_ctrsm_u_ukernel(
        a: *const scomplex,
        b: *mut scomplex,
        c: *mut scomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_ztrsm_u_ukernel(
        a: *const dcomplex,
        b: *mut dcomplex,
        c: *mut dcomplex,
        rs_c: inc_t,
        cs_c: inc_t,
        data: *const auxinfo_t,
        cntx: *const cntx_t,
    );
    pub fn bli_gemm_ukernel_qfp(dt: num_t) -> gemm_ukr_ft;
    pub fn bli_gemmtrsm_l_ukernel_qfp(dt: num_t) -> gemmtrsm_ukr_ft;
    pub fn bli_gemmtrsm_u_ukernel_qfp(dt: num_t) -> gemmtrsm_ukr_ft;
    pub fn bli_trsm_l_ukernel_qfp(dt: num_t) -> trsm_ukr_ft;
    pub fn bli_trsm_u_ukernel_qfp(dt: num_t) -> trsm_ukr_ft;
    pub fn bli_gemm_var_cntl_init_node(
        var_func: void_fp,
        dt_comp: num_t,
        dt_out: num_t,
        ukr: gemm_ukr_ft,
        real_ukr: gemm_ukr_ft,
        row_pref: bool,
        mr: dim_t,
        nr: dim_t,
        mr_scale: dim_t,
        nr_scale: dim_t,
        cntl: *mut gemm_var_cntl_t,
    );
    pub fn bli_gemm_cntl_init(
        im: ind_t,
        family: opid_t,
        alpha: *const obj_t,
        a: *mut obj_t,
        b: *mut obj_t,
        beta: *const obj_t,
        c: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *mut gemm_cntl_t,
    ) -> bool;
    pub fn bli_gemm_cntl_finalize(
        family: opid_t,
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntl: *mut gemm_cntl_t,
    );
    pub fn bli_gemm_blk_var1(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemm_blk_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemm_blk_var3(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_gemm_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread: *mut thrinfo_t,
    );
    pub fn bli_trmm_ll_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_lu_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_rl_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_ru_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_ll_ker_var2b(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_lu_ker_var2b(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_rl_ker_var2b(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trmm_ru_ker_var2b(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_var_cntl_init_node(
        var_func: void_fp,
        dt_comp: num_t,
        dt_out: num_t,
        gemmtrsm_ukr: gemmtrsm_ukr_ft,
        gemm_ukr: gemm_ukr_ft,
        real_gemm_ukr: gemm_ukr_ft,
        row_pref: bool,
        mr: dim_t,
        nr: dim_t,
        mr_pack: dim_t,
        nr_pack: dim_t,
        mr_bcast: dim_t,
        nr_bcast: dim_t,
        mr_scale: dim_t,
        nr_scale: dim_t,
        cntl: *mut trsm_var_cntl_t,
    );
    pub fn bli_trsm_cntl_init(
        im: ind_t,
        alpha: *const obj_t,
        a: *mut obj_t,
        b: *mut obj_t,
        beta: *const obj_t,
        c: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *mut trsm_cntl_t,
    );
    pub fn bli_trsm_l_cntl_init(
        im: ind_t,
        alpha: *const obj_t,
        a: *mut obj_t,
        b: *mut obj_t,
        beta: *const obj_t,
        c: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *mut trsm_cntl_t,
    );
    pub fn bli_trsm_r_cntl_init(
        im: ind_t,
        alpha: *const obj_t,
        a: *mut obj_t,
        b: *mut obj_t,
        beta: *const obj_t,
        c: *mut obj_t,
        cntx: *const cntx_t,
        cntl: *mut trsm_cntl_t,
    );
    pub fn bli_trsm_cntl_finalize(cntl: *mut trsm_cntl_t);
    pub fn bli_trsm_blk_var1(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_blk_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_blk_var3(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_ll_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_lu_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_rl_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_trsm_ru_ker_var2(
        a: *const obj_t,
        b: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_gemmt_l_ker_var2(
        a: *const obj_t,
        ah: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_gemmt_u_ker_var2(
        a: *const obj_t,
        ah: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_gemmt_l_ker_var2b(
        a: *const obj_t,
        ah: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_gemmt_u_ker_var2b(
        a: *const obj_t,
        ah: *const obj_t,
        c: *const obj_t,
        cntx: *const cntx_t,
        cntl: *const cntl_t,
        thread_par: *mut thrinfo_t,
    );
    pub fn bli_asumv_check(x: *const obj_t, asum: *const obj_t);
    pub fn bli_mkherm_check(x: *const obj_t);
    pub fn bli_mksymm_check(x: *const obj_t);
    pub fn bli_mktrim_check(x: *const obj_t);
    pub fn bli_norm1v_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normfv_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normiv_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_norm1m_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normfm_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normim_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_randv_check(x: *const obj_t);
    pub fn bli_randnv_check(x: *const obj_t);
    pub fn bli_randm_check(x: *const obj_t);
    pub fn bli_randnm_check(x: *const obj_t);
    pub fn bli_sumsqv_check(x: *const obj_t, scale: *const obj_t, sumsq: *const obj_t);
    pub fn bli_eqsc_check(chi: *const obj_t, psi: *const obj_t, is: *const bool);
    pub fn bli_ltsc_check(chi: *const obj_t, psi: *const obj_t, is: *const bool);
    pub fn bli_lesc_check(chi: *const obj_t, psi: *const obj_t, is: *const bool);
    pub fn bli_gtsc_check(chi: *const obj_t, psi: *const obj_t, is: *const bool);
    pub fn bli_gesc_check(chi: *const obj_t, psi: *const obj_t, is: *const bool);
    pub fn bli_eqv_check(x: *const obj_t, y: *const obj_t, is: *const bool);
    pub fn bli_eqm_check(x: *const obj_t, y: *const obj_t, is: *const bool);
    pub fn bli_fprintv_check(
        file: *const FILE,
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_fprintm_check(
        file: *const FILE,
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_utilv_xi_check(x: *const obj_t, index: *const obj_t);
    pub fn bli_utilv_xa_check(x: *const obj_t, asum: *const obj_t);
    pub fn bli_utilm_mkhst_check(a: *const obj_t);
    pub fn bli_utilv_norm_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_utilm_norm_check(x: *const obj_t, norm: *const obj_t);
    pub fn bli_utilm_fprint_check(
        file: *const FILE,
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_utilm_rand_check(x: *const obj_t);
    pub fn bli_utilv_sumsqv_check(x: *const obj_t, scale: *const obj_t, sumsq: *const obj_t);
    pub fn bli_asumv_ex(
        x: *const obj_t,
        asum: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_mkherm_ex(a: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_mksymm_ex(a: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_mktrim_ex(a: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_norm1v_ex(
        x: *const obj_t,
        norm: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_normfv_ex(
        x: *const obj_t,
        norm: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_normiv_ex(
        x: *const obj_t,
        norm: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_norm1m_ex(
        x: *const obj_t,
        norm: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_normfm_ex(
        x: *const obj_t,
        norm: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_normim_ex(
        x: *const obj_t,
        norm: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_randv_ex(x: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_randnv_ex(x: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_randm_ex(x: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_randnm_ex(x: *const obj_t, cntx: *const cntx_t, rntm: *const rntm_t);
    pub fn bli_sumsqv_ex(
        x: *const obj_t,
        scale: *const obj_t,
        sumsq: *const obj_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_asumv(x: *const obj_t, asum: *const obj_t);
    pub fn bli_mkherm(a: *const obj_t);
    pub fn bli_mksymm(a: *const obj_t);
    pub fn bli_mktrim(a: *const obj_t);
    pub fn bli_norm1v(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normfv(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normiv(x: *const obj_t, norm: *const obj_t);
    pub fn bli_norm1m(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normfm(x: *const obj_t, norm: *const obj_t);
    pub fn bli_normim(x: *const obj_t, norm: *const obj_t);
    pub fn bli_randv(x: *const obj_t);
    pub fn bli_randnv(x: *const obj_t);
    pub fn bli_randm(x: *const obj_t);
    pub fn bli_randnm(x: *const obj_t);
    pub fn bli_sumsqv(x: *const obj_t, scale: *const obj_t, sumsq: *const obj_t);
    pub fn bli_eqsc(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_eqv(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_eqm(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_ltsc(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_lesc(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_gtsc(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_gesc(x: *const obj_t, y: *const obj_t, is: *mut bool);
    pub fn bli_fprintv(
        file: *mut FILE,
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_fprintm(
        file: *mut FILE,
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_printv(
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_printm(
        s1: *const c_char,
        x: *const obj_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_sasumv_ex(
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        asum: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dasumv_ex(
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        asum: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_casumv_ex(
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        asum: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zasumv_ex(
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        asum: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_smkherm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dmkherm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cmkherm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zmkherm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_smksymm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dmksymm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cmksymm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zmksymm_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_smktrim_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dmktrim_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cmktrim_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zmktrim_ex(
        uploa: uplo_t,
        m: dim_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_snorm1v_ex(
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dnorm1v_ex(
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cnorm1v_ex(
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_znorm1v_ex(
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_snormfv_ex(
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dnormfv_ex(
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cnormfv_ex(
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_znormfv_ex(
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_snormiv_ex(
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dnormiv_ex(
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cnormiv_ex(
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_znormiv_ex(
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_snorm1m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dnorm1m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cnorm1m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_znorm1m_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_snormfm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dnormfm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cnormfm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_znormfm_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_snormim_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dnormim_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_cnormim_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_znormim_ex(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_srandv_ex(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_drandv_ex(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_crandv_ex(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zrandv_ex(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_srandnv_ex(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_drandnv_ex(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_crandnv_ex(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zrandnv_ex(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_srandm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_drandm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_crandm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zrandm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_srandnm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_drandnm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_crandnm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zrandnm_ex(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_ssumsqv_ex(
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        scale: *mut f32,
        sumsq: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_dsumsqv_ex(
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        scale: *mut f64,
        sumsq: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_csumsqv_ex(
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        scale: *mut f32,
        sumsq: *mut f32,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_zsumsqv_ex(
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        scale: *mut f64,
        sumsq: *mut f64,
        cntx: *const cntx_t,
        rntm: *const rntm_t,
    );
    pub fn bli_sasumv(n: dim_t, x: *const f32, incx: inc_t, asum: *mut f32);
    pub fn bli_dasumv(n: dim_t, x: *const f64, incx: inc_t, asum: *mut f64);
    pub fn bli_casumv(n: dim_t, x: *const scomplex, incx: inc_t, asum: *mut f32);
    pub fn bli_zasumv(n: dim_t, x: *const dcomplex, incx: inc_t, asum: *mut f64);
    pub fn bli_smkherm(uploa: uplo_t, m: dim_t, a: *mut f32, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_dmkherm(uploa: uplo_t, m: dim_t, a: *mut f64, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_cmkherm(uploa: uplo_t, m: dim_t, a: *mut scomplex, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_zmkherm(uploa: uplo_t, m: dim_t, a: *mut dcomplex, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_smksymm(uploa: uplo_t, m: dim_t, a: *mut f32, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_dmksymm(uploa: uplo_t, m: dim_t, a: *mut f64, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_cmksymm(uploa: uplo_t, m: dim_t, a: *mut scomplex, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_zmksymm(uploa: uplo_t, m: dim_t, a: *mut dcomplex, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_smktrim(uploa: uplo_t, m: dim_t, a: *mut f32, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_dmktrim(uploa: uplo_t, m: dim_t, a: *mut f64, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_cmktrim(uploa: uplo_t, m: dim_t, a: *mut scomplex, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_zmktrim(uploa: uplo_t, m: dim_t, a: *mut dcomplex, rs_a: inc_t, cs_a: inc_t);
    pub fn bli_snorm1v(n: dim_t, x: *const f32, incx: inc_t, norm: *mut f32);
    pub fn bli_dnorm1v(n: dim_t, x: *const f64, incx: inc_t, norm: *mut f64);
    pub fn bli_cnorm1v(n: dim_t, x: *const scomplex, incx: inc_t, norm: *mut f32);
    pub fn bli_znorm1v(n: dim_t, x: *const dcomplex, incx: inc_t, norm: *mut f64);
    pub fn bli_snormfv(n: dim_t, x: *const f32, incx: inc_t, norm: *mut f32);
    pub fn bli_dnormfv(n: dim_t, x: *const f64, incx: inc_t, norm: *mut f64);
    pub fn bli_cnormfv(n: dim_t, x: *const scomplex, incx: inc_t, norm: *mut f32);
    pub fn bli_znormfv(n: dim_t, x: *const dcomplex, incx: inc_t, norm: *mut f64);
    pub fn bli_snormiv(n: dim_t, x: *const f32, incx: inc_t, norm: *mut f32);
    pub fn bli_dnormiv(n: dim_t, x: *const f64, incx: inc_t, norm: *mut f64);
    pub fn bli_cnormiv(n: dim_t, x: *const scomplex, incx: inc_t, norm: *mut f32);
    pub fn bli_znormiv(n: dim_t, x: *const dcomplex, incx: inc_t, norm: *mut f64);
    pub fn bli_snorm1m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
    );
    pub fn bli_dnorm1m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
    );
    pub fn bli_cnorm1m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
    );
    pub fn bli_znorm1m(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
    );
    pub fn bli_snormfm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
    );
    pub fn bli_dnormfm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
    );
    pub fn bli_cnormfm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
    );
    pub fn bli_znormfm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
    );
    pub fn bli_snormim(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
    );
    pub fn bli_dnormim(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
    );
    pub fn bli_cnormim(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
    );
    pub fn bli_znormim(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
    );
    pub fn bli_srandv(n: dim_t, x: *mut f32, incx: inc_t);
    pub fn bli_drandv(n: dim_t, x: *mut f64, incx: inc_t);
    pub fn bli_crandv(n: dim_t, x: *mut scomplex, incx: inc_t);
    pub fn bli_zrandv(n: dim_t, x: *mut dcomplex, incx: inc_t);
    pub fn bli_srandnv(n: dim_t, x: *mut f32, incx: inc_t);
    pub fn bli_drandnv(n: dim_t, x: *mut f64, incx: inc_t);
    pub fn bli_crandnv(n: dim_t, x: *mut scomplex, incx: inc_t);
    pub fn bli_zrandnv(n: dim_t, x: *mut dcomplex, incx: inc_t);
    pub fn bli_srandm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_drandm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_crandm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zrandm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_srandnm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_drandnm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_crandnm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_zrandnm(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
    );
    pub fn bli_ssumsqv(n: dim_t, x: *const f32, incx: inc_t, scale: *mut f32, sumsq: *mut f32);
    pub fn bli_dsumsqv(n: dim_t, x: *const f64, incx: inc_t, scale: *mut f64, sumsq: *mut f64);
    pub fn bli_csumsqv(n: dim_t, x: *const scomplex, incx: inc_t, scale: *mut f32, sumsq: *mut f32);
    pub fn bli_zsumsqv(n: dim_t, x: *const dcomplex, incx: inc_t, scale: *mut f64, sumsq: *mut f64);
    pub fn bli_seqsc(conjchi: conj_t, chi: *const f32, psi: *const f32, is_eq: *mut bool);
    pub fn bli_deqsc(conjchi: conj_t, chi: *const f64, psi: *const f64, is_eq: *mut bool);
    pub fn bli_ceqsc(conjchi: conj_t, chi: *const scomplex, psi: *const scomplex, is_eq: *mut bool);
    pub fn bli_zeqsc(conjchi: conj_t, chi: *const dcomplex, psi: *const dcomplex, is_eq: *mut bool);
    pub fn bli_seqv(
        conjx: conj_t,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        y: *const f32,
        incy: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_deqv(
        conjx: conj_t,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        y: *const f64,
        incy: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_ceqv(
        conjx: conj_t,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        y: *const scomplex,
        incy: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_zeqv(
        conjx: conj_t,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        y: *const dcomplex,
        incy: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_seqm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *const f32,
        rs_y: inc_t,
        cs_y: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_deqm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *const f64,
        rs_y: inc_t,
        cs_y: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_ceqm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *const scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_zeqm(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *const dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
        is_eq: *mut bool,
    );
    pub fn bli_sltsc(chi: *const f32, psi: *const f32, is: *mut bool);
    pub fn bli_dltsc(chi: *const f64, psi: *const f64, is: *mut bool);
    pub fn bli_slesc(chi: *const f32, psi: *const f32, is: *mut bool);
    pub fn bli_dlesc(chi: *const f64, psi: *const f64, is: *mut bool);
    pub fn bli_sgtsc(chi: *const f32, psi: *const f32, is: *mut bool);
    pub fn bli_dgtsc(chi: *const f64, psi: *const f64, is: *mut bool);
    pub fn bli_sgesc(chi: *const f32, psi: *const f32, is: *mut bool);
    pub fn bli_dgesc(chi: *const f64, psi: *const f64, is: *mut bool);
    pub fn bli_sprintv(
        s1: *const c_char,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_dprintv(
        s1: *const c_char,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_cprintv(
        s1: *const c_char,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_zprintv(
        s1: *const c_char,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_iprintv(
        s1: *const c_char,
        n: dim_t,
        x: *const c_void,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_sprintm(
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const c_void,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_dprintm(
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const c_void,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_cprintm(
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const c_void,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_zprintm(
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const c_void,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_iprintm(
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const c_void,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_asumv_ex_qfp(dt: num_t) -> asumv_ex_vft;
    pub fn bli_mkherm_ex_qfp(dt: num_t) -> mkherm_ex_vft;
    pub fn bli_mksymm_ex_qfp(dt: num_t) -> mksymm_ex_vft;
    pub fn bli_mktrim_ex_qfp(dt: num_t) -> mktrim_ex_vft;
    pub fn bli_norm1v_ex_qfp(dt: num_t) -> norm1v_ex_vft;
    pub fn bli_normfv_ex_qfp(dt: num_t) -> normfv_ex_vft;
    pub fn bli_normiv_ex_qfp(dt: num_t) -> normiv_ex_vft;
    pub fn bli_norm1m_ex_qfp(dt: num_t) -> norm1m_ex_vft;
    pub fn bli_normfm_ex_qfp(dt: num_t) -> normfm_ex_vft;
    pub fn bli_normim_ex_qfp(dt: num_t) -> normim_ex_vft;
    pub fn bli_randv_ex_qfp(dt: num_t) -> randv_ex_vft;
    pub fn bli_randnv_ex_qfp(dt: num_t) -> randnv_ex_vft;
    pub fn bli_randm_ex_qfp(dt: num_t) -> randm_ex_vft;
    pub fn bli_randnm_ex_qfp(dt: num_t) -> randnm_ex_vft;
    pub fn bli_sumsqv_ex_qfp(dt: num_t) -> sumsqv_ex_vft;
    pub fn bli_eqsc_qfp(dt: num_t) -> eqsc_vft;
    pub fn bli_eqv_qfp(dt: num_t) -> eqv_vft;
    pub fn bli_eqm_qfp(dt: num_t) -> eqm_vft;
    pub fn bli_ltsc_qfp(dt: num_t) -> ltsc_vft;
    pub fn bli_lesc_qfp(dt: num_t) -> lesc_vft;
    pub fn bli_gtsc_qfp(dt: num_t) -> gtsc_vft;
    pub fn bli_gesc_qfp(dt: num_t) -> gesc_vft;
    pub fn bli_fprintv_qfp(dt: num_t) -> fprintv_vft;
    pub fn bli_fprintm_qfp(dt: num_t) -> fprintm_vft;
    pub fn bli_sasumv_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        asum: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dasumv_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        asum: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_casumv_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        asum: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zasumv_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        asum: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_smkherm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dmkherm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cmkherm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zmkherm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_smksymm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dmksymm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cmksymm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zmksymm_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_smktrim_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f32,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dmktrim_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut f64,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cmktrim_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut scomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zmktrim_unb_var1(
        uploa: uplo_t,
        m: dim_t,
        a: *mut dcomplex,
        rs_a: inc_t,
        cs_a: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_snorm1v_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dnorm1v_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cnorm1v_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_znorm1v_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_snormfv_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dnormfv_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cnormfv_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_znormfv_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_snormiv_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dnormiv_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cnormiv_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_znormiv_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_snorm1m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dnorm1m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cnorm1m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_znorm1m_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_snormfm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dnormfm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cnormfm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_znormfm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_snormim_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dnormim_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_cnormim_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_znormim_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        norm: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_srandv_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_drandv_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_crandv_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zrandv_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_srandnv_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_drandnv_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_crandnv_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zrandnv_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_srandm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_drandm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_crandm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zrandm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_srandnm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_drandnm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_crandnm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zrandnm_unb_var1(
        diagoffx: doff_t,
        uplox: uplo_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_ssumsqv_unb_var1(
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        scale: *mut f32,
        sumsq: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_dsumsqv_unb_var1(
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        scale: *mut f64,
        sumsq: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_csumsqv_unb_var1(
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        scale: *mut f32,
        sumsq: *mut f32,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_zsumsqv_unb_var1(
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        scale: *mut f64,
        sumsq: *mut f64,
        cntx: *mut cntx_t,
        rntm: *mut rntm_t,
    );
    pub fn bli_seqv_unb_var1(
        conjx: conj_t,
        n: dim_t,
        x: *mut f32,
        incx: inc_t,
        y: *mut f32,
        incy: inc_t,
    ) -> bool;
    pub fn bli_deqv_unb_var1(
        conjx: conj_t,
        n: dim_t,
        x: *mut f64,
        incx: inc_t,
        y: *mut f64,
        incy: inc_t,
    ) -> bool;
    pub fn bli_ceqv_unb_var1(
        conjx: conj_t,
        n: dim_t,
        x: *mut scomplex,
        incx: inc_t,
        y: *mut scomplex,
        incy: inc_t,
    ) -> bool;
    pub fn bli_zeqv_unb_var1(
        conjx: conj_t,
        n: dim_t,
        x: *mut dcomplex,
        incx: inc_t,
        y: *mut dcomplex,
        incy: inc_t,
    ) -> bool;
    pub fn bli_seqm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f32,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f32,
        rs_y: inc_t,
        cs_y: inc_t,
    ) -> bool;
    pub fn bli_deqm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut f64,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut f64,
        rs_y: inc_t,
        cs_y: inc_t,
    ) -> bool;
    pub fn bli_ceqm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut scomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    ) -> bool;
    pub fn bli_zeqm_unb_var1(
        diagoffx: doff_t,
        diagx: diag_t,
        uplox: uplo_t,
        transx: trans_t,
        m: dim_t,
        n: dim_t,
        x: *mut dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        y: *mut dcomplex,
        rs_y: inc_t,
        cs_y: inc_t,
    ) -> bool;
    pub fn bli_sfprintv(
        file: *mut FILE,
        s1: *const c_char,
        n: dim_t,
        x: *const f32,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_dfprintv(
        file: *mut FILE,
        s1: *const c_char,
        n: dim_t,
        x: *const f64,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_cfprintv(
        file: *mut FILE,
        s1: *const c_char,
        n: dim_t,
        x: *const scomplex,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_zfprintv(
        file: *mut FILE,
        s1: *const c_char,
        n: dim_t,
        x: *const dcomplex,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_ifprintv(
        file: *mut FILE,
        s1: *const c_char,
        n: dim_t,
        x: *const gint_t,
        incx: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_sfprintm(
        file: *mut FILE,
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const f32,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_dfprintm(
        file: *mut FILE,
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const f64,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_cfprintm(
        file: *mut FILE,
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const scomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_zfprintm(
        file: *mut FILE,
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const dcomplex,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bli_ifprintm(
        file: *mut FILE,
        s1: *const c_char,
        m: dim_t,
        n: dim_t,
        x: *const gint_t,
        rs_x: inc_t,
        cs_x: inc_t,
        format: *const c_char,
        s2: *const c_char,
    );
    pub fn bla_r_sign(a: *const bla_real, b: *const bla_real) -> f64;
    pub fn bla_d_sign(a: *const bla_double, b: *const bla_double) -> f64;
    pub fn bla_r_cnjg(dest: *mut bla_scomplex, src: *const bla_scomplex);
    pub fn bla_d_cnjg(dest: *mut bla_dcomplex, src: *const bla_dcomplex);
    pub fn bla_r_imag(z: *const bla_scomplex) -> bla_real;
    pub fn bla_d_imag(z: *const bla_dcomplex) -> f64;
    pub fn bla_c_div(cp: *mut bla_scomplex, ap: *const bla_scomplex, bp: *const bla_scomplex);
    pub fn bla_z_div(cp: *mut bla_dcomplex, ap: *const bla_dcomplex, bp: *const bla_dcomplex);
    pub fn bla_f__cabs(real: f64, imag: f64) -> f64;
    pub fn bla_r_abs(x: *const bla_real) -> f64;
    pub fn bla_d_abs(x: *const bla_double) -> f64;
    pub fn bla_c_abs(z: *const bla_scomplex) -> f64;
    pub fn bla_z_abs(z: *const bla_dcomplex) -> f64;
    pub fn lsame_(
        ca: *const c_char,
        cb: *const c_char,
        ca_len: c_int,
        cb_len: c_int,
    ) -> c_int;
    pub fn xerbla_(
        srname: *const bla_character,
        info: *const bla_integer,
        srname_len: ftnlen,
    ) -> c_int;
    pub fn xerbla_array_(
        srname: *const bla_character,
        srname_len: bla_integer,
        info: *const bla_integer,
    ) -> c_int;
    pub fn scabs1_(z: *mut bla_scomplex) -> bla_real;
    pub fn dcabs1_(z: *mut bla_dcomplex) -> bla_double;
    pub fn isamax_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int;
    pub fn idamax_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int;
    pub fn icamax_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f77_int;
    pub fn izamax_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f77_int;
    pub fn sasum_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32;
    pub fn dasum_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64;
    pub fn scasum_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32;
    pub fn dzasum_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64;
    pub fn saxpy_(
        n: *const f77_int,
        alpha: *const f32,
        x: *const f32,
        incx: *const f77_int,
        y: *mut f32,
        incy: *const f77_int,
    );
    pub fn daxpy_(
        n: *const f77_int,
        alpha: *const f64,
        x: *const f64,
        incx: *const f77_int,
        y: *mut f64,
        incy: *const f77_int,
    );
    pub fn caxpy_(
        n: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zaxpy_(
        n: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn scopy_(
        n: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        y: *mut f32,
        incy: *const f77_int,
    );
    pub fn dcopy_(
        n: *const f77_int,
        x: *const f64,
        incx: *const f77_int,
        y: *mut f64,
        incy: *const f77_int,
    );
    pub fn ccopy_(
        n: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zcopy_(
        n: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn sdot_(
        n: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
    ) -> f32;
    pub fn ddot_(
        n: *const f77_int,
        x: *const f64,
        incx: *const f77_int,
        y: *const f64,
        incy: *const f77_int,
    ) -> f64;
    pub fn cdotc_(
        n: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
    ) -> scomplex;
    pub fn cdotu_(
        n: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
    ) -> scomplex;
    pub fn zdotc_(
        n: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
    ) -> dcomplex;
    pub fn zdotu_(
        n: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
    ) -> dcomplex;
    pub fn sdsdot_(
        n: *const f77_int,
        sb: *const f32,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
    ) -> f32;
    pub fn dsdot_(
        n: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
    ) -> f64;
    pub fn snrm2_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32;
    pub fn dnrm2_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64;
    pub fn scnrm2_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32;
    pub fn dznrm2_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64;
    pub fn srot_(
        n: *const bla_integer,
        sx: *mut bla_real,
        incx: *const bla_integer,
        sy: *mut bla_real,
        incy: *const bla_integer,
        c__: *const bla_real,
        s: *const bla_real,
    ) -> c_int;
    pub fn drot_(
        n: *const bla_integer,
        dx: *mut bla_double,
        incx: *const bla_integer,
        dy: *mut bla_double,
        incy: *const bla_integer,
        c__: *const bla_double,
        s: *const bla_double,
    ) -> c_int;
    pub fn csrot_(
        n: *const bla_integer,
        cx: *mut bla_scomplex,
        incx: *const bla_integer,
        cy: *mut bla_scomplex,
        incy: *const bla_integer,
        c__: *const bla_real,
        s: *const bla_real,
    ) -> c_int;
    pub fn zdrot_(
        n: *const bla_integer,
        zx: *mut bla_dcomplex,
        incx: *const bla_integer,
        zy: *mut bla_dcomplex,
        incy: *const bla_integer,
        c__: *const bla_double,
        s: *const bla_double,
    ) -> c_int;
    pub fn crot_(
        n: *const bla_integer,
        cx: *mut bla_scomplex,
        incx: *const bla_integer,
        cy: *mut bla_scomplex,
        incy: *const bla_integer,
        c__: *const bla_real,
        s: *const bla_scomplex,
    ) -> c_int;
    pub fn zrot_(
        n: *const bla_integer,
        cx: *mut bla_dcomplex,
        incx: *const bla_integer,
        cy: *mut bla_dcomplex,
        incy: *const bla_integer,
        c__: *const bla_double,
        s: *const bla_dcomplex,
    ) -> c_int;
    pub fn srotg_(
        sa: *mut bla_real,
        sb: *mut bla_real,
        c__: *mut bla_real,
        s: *mut bla_real,
    ) -> c_int;
    pub fn drotg_(
        da: *mut bla_double,
        db: *mut bla_double,
        c__: *mut bla_double,
        s: *mut bla_double,
    ) -> c_int;
    pub fn crotg_(
        ca: *mut bla_scomplex,
        cb: *mut bla_scomplex,
        c__: *mut bla_real,
        s: *mut bla_scomplex,
    ) -> c_int;
    pub fn zrotg_(
        ca: *mut bla_dcomplex,
        cb: *mut bla_dcomplex,
        c__: *mut bla_double,
        s: *mut bla_dcomplex,
    ) -> c_int;
    pub fn srotm_(
        n: *const bla_integer,
        sx: *mut bla_real,
        incx: *const bla_integer,
        sy: *mut bla_real,
        incy: *const bla_integer,
        sparam: *const bla_real,
    ) -> c_int;
    pub fn drotm_(
        n: *const bla_integer,
        dx: *mut bla_double,
        incx: *const bla_integer,
        dy: *mut bla_double,
        incy: *const bla_integer,
        dparam: *const bla_double,
    ) -> c_int;
    pub fn srotmg_(
        sd1: *mut bla_real,
        sd2: *mut bla_real,
        sx1: *mut bla_real,
        sy1: *const bla_real,
        sparam: *mut bla_real,
    ) -> c_int;
    pub fn drotmg_(
        dd1: *mut bla_double,
        dd2: *mut bla_double,
        dx1: *mut bla_double,
        dy1: *const bla_double,
        dparam: *mut bla_double,
    ) -> c_int;
    pub fn sscal_(n: *const f77_int, alpha: *const f32, x: *mut f32, incx: *const f77_int);
    pub fn dscal_(n: *const f77_int, alpha: *const f64, x: *mut f64, incx: *const f77_int);
    pub fn cscal_(
        n: *const f77_int,
        alpha: *const scomplex,
        x: *mut scomplex,
        incx: *const f77_int,
    );
    pub fn zscal_(
        n: *const f77_int,
        alpha: *const dcomplex,
        x: *mut dcomplex,
        incx: *const f77_int,
    );
    pub fn csscal_(n: *const f77_int, alpha: *const f32, x: *mut scomplex, incx: *const f77_int);
    pub fn zdscal_(n: *const f77_int, alpha: *const f64, x: *mut dcomplex, incx: *const f77_int);
    pub fn sswap_(
        n: *const f77_int,
        x: *mut f32,
        incx: *const f77_int,
        y: *mut f32,
        incy: *const f77_int,
    );
    pub fn dswap_(
        n: *const f77_int,
        x: *mut f64,
        incx: *const f77_int,
        y: *mut f64,
        incy: *const f77_int,
    );
    pub fn cswap_(
        n: *const f77_int,
        x: *mut scomplex,
        incx: *const f77_int,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zswap_(
        n: *const f77_int,
        x: *mut dcomplex,
        incx: *const f77_int,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn isamaxsub_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f77_int);
    pub fn idamaxsub_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f77_int);
    pub fn icamaxsub_(
        n: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        rval: *mut f77_int,
    );
    pub fn izamaxsub_(
        n: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        rval: *mut f77_int,
    );
    pub fn sasumsub_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32);
    pub fn dasumsub_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64);
    pub fn scasumsub_(n: *const f77_int, x: *const scomplex, incx: *const f77_int, rval: *mut f32);
    pub fn dzasumsub_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int, rval: *mut f64);
    pub fn sdotsub_(
        n: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
        rval: *mut f32,
    );
    pub fn ddotsub_(
        n: *const f77_int,
        x: *const f64,
        incx: *const f77_int,
        y: *const f64,
        incy: *const f77_int,
        rval: *mut f64,
    );
    pub fn cdotcsub_(
        n: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
        rval: *mut scomplex,
    );
    pub fn cdotusub_(
        n: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
        rval: *mut scomplex,
    );
    pub fn zdotcsub_(
        n: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
        rval: *mut dcomplex,
    );
    pub fn zdotusub_(
        n: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
        rval: *mut dcomplex,
    );
    pub fn sdsdotsub_(
        n: *const f77_int,
        sb: *const f32,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
        rval: *mut f32,
    );
    pub fn dsdotsub_(
        n: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
        rval: *mut f64,
    );
    pub fn snrm2sub_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32);
    pub fn dnrm2sub_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64);
    pub fn scnrm2sub_(n: *const f77_int, x: *const scomplex, incx: *const f77_int, rval: *mut f32);
    pub fn dznrm2sub_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int, rval: *mut f64);
    pub fn sgemv_(
        transa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        beta: *const f32,
        y: *mut f32,
        incy: *const f77_int,
    );
    pub fn dgemv_(
        transa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        x: *const f64,
        incx: *const f77_int,
        beta: *const f64,
        y: *mut f64,
        incy: *const f77_int,
    );
    pub fn cgemv_(
        transa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zgemv_(
        transa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn sger_(
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f32,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
        a: *mut f32,
        lda: *const f77_int,
    );
    pub fn dger_(
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f64,
        x: *const f64,
        incx: *const f77_int,
        y: *const f64,
        incy: *const f77_int,
        a: *mut f64,
        lda: *const f77_int,
    );
    pub fn cgerc_(
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
        a: *mut scomplex,
        lda: *const f77_int,
    );
    pub fn cgeru_(
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
        a: *mut scomplex,
        lda: *const f77_int,
    );
    pub fn zgerc_(
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
        a: *mut dcomplex,
        lda: *const f77_int,
    );
    pub fn zgeru_(
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
        a: *mut dcomplex,
        lda: *const f77_int,
    );
    pub fn chemv_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zhemv_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn cher_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f32,
        x: *const scomplex,
        incx: *const f77_int,
        a: *mut scomplex,
        lda: *const f77_int,
    );
    pub fn zher_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f64,
        x: *const dcomplex,
        incx: *const f77_int,
        a: *mut dcomplex,
        lda: *const f77_int,
    );
    pub fn cher2_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
        a: *mut scomplex,
        lda: *const f77_int,
    );
    pub fn zher2_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
        a: *mut dcomplex,
        lda: *const f77_int,
    );
    pub fn ssymv_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        x: *const f32,
        incx: *const f77_int,
        beta: *const f32,
        y: *mut f32,
        incy: *const f77_int,
    );
    pub fn dsymv_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        x: *const f64,
        incx: *const f77_int,
        beta: *const f64,
        y: *mut f64,
        incy: *const f77_int,
    );
    pub fn csymv_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        x: *const scomplex,
        incx: *const f77_int,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zsymv_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        x: *const dcomplex,
        incx: *const f77_int,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn ssyr_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f32,
        x: *const f32,
        incx: *const f77_int,
        a: *mut f32,
        lda: *const f77_int,
    );
    pub fn dsyr_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f64,
        x: *const f64,
        incx: *const f77_int,
        a: *mut f64,
        lda: *const f77_int,
    );
    pub fn csyr_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        a: *mut scomplex,
        lda: *const f77_int,
    );
    pub fn zsyr_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        a: *mut dcomplex,
        lda: *const f77_int,
    );
    pub fn ssyr2_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f32,
        x: *const f32,
        incx: *const f77_int,
        y: *const f32,
        incy: *const f77_int,
        a: *mut f32,
        lda: *const f77_int,
    );
    pub fn dsyr2_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const f64,
        x: *const f64,
        incx: *const f77_int,
        y: *const f64,
        incy: *const f77_int,
        a: *mut f64,
        lda: *const f77_int,
    );
    pub fn csyr2_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        y: *const scomplex,
        incy: *const f77_int,
        a: *mut scomplex,
        lda: *const f77_int,
    );
    pub fn zsyr2_(
        uploa: *const f77_char,
        m: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        y: *const dcomplex,
        incy: *const f77_int,
        a: *mut dcomplex,
        lda: *const f77_int,
    );
    pub fn strmv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const f32,
        lda: *const f77_int,
        x: *mut f32,
        incx: *const f77_int,
    );
    pub fn dtrmv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const f64,
        lda: *const f77_int,
        x: *mut f64,
        incx: *const f77_int,
    );
    pub fn ctrmv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const scomplex,
        lda: *const f77_int,
        x: *mut scomplex,
        incx: *const f77_int,
    );
    pub fn ztrmv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const dcomplex,
        lda: *const f77_int,
        x: *mut dcomplex,
        incx: *const f77_int,
    );
    pub fn strsv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const f32,
        lda: *const f77_int,
        x: *mut f32,
        incx: *const f77_int,
    );
    pub fn dtrsv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const f64,
        lda: *const f77_int,
        x: *mut f64,
        incx: *const f77_int,
    );
    pub fn ctrsv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const scomplex,
        lda: *const f77_int,
        x: *mut scomplex,
        incx: *const f77_int,
    );
    pub fn ztrsv_(
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        a: *const dcomplex,
        lda: *const f77_int,
        x: *mut dcomplex,
        incx: *const f77_int,
    );
    pub fn chpmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_scomplex,
        ap: *const bla_scomplex,
        x: *const bla_scomplex,
        incx: *const bla_integer,
        beta: *const bla_scomplex,
        y: *mut bla_scomplex,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn zhpmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_dcomplex,
        ap: *const bla_dcomplex,
        x: *const bla_dcomplex,
        incx: *const bla_integer,
        beta: *const bla_dcomplex,
        y: *mut bla_dcomplex,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn chpr_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_real,
        x: *const bla_scomplex,
        incx: *const bla_integer,
        ap: *mut bla_scomplex,
    ) -> c_int;
    pub fn zhpr_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_double,
        x: *const bla_dcomplex,
        incx: *const bla_integer,
        ap: *mut bla_dcomplex,
    ) -> c_int;
    pub fn chpr2_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_scomplex,
        x: *const bla_scomplex,
        incx: *const bla_integer,
        y: *const bla_scomplex,
        incy: *const bla_integer,
        ap: *mut bla_scomplex,
    ) -> c_int;
    pub fn zhpr2_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_dcomplex,
        x: *const bla_dcomplex,
        incx: *const bla_integer,
        y: *const bla_dcomplex,
        incy: *const bla_integer,
        ap: *mut bla_dcomplex,
    ) -> c_int;
    pub fn dspmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_double,
        ap: *const bla_double,
        x: *const bla_double,
        incx: *const bla_integer,
        beta: *const bla_double,
        y: *mut bla_double,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn sspmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_real,
        ap: *const bla_real,
        x: *const bla_real,
        incx: *const bla_integer,
        beta: *const bla_real,
        y: *mut bla_real,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn dspr_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_double,
        x: *const bla_double,
        incx: *const bla_integer,
        ap: *mut bla_double,
    ) -> c_int;
    pub fn sspr_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_real,
        x: *const bla_real,
        incx: *const bla_integer,
        ap: *mut bla_real,
    ) -> c_int;
    pub fn dspr2_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_double,
        x: *const bla_double,
        incx: *const bla_integer,
        y: *const bla_double,
        incy: *const bla_integer,
        ap: *mut bla_double,
    ) -> c_int;
    pub fn sspr2_(
        uplo: *const bla_character,
        n: *const bla_integer,
        alpha: *const bla_real,
        x: *const bla_real,
        incx: *const bla_integer,
        y: *const bla_real,
        incy: *const bla_integer,
        ap: *mut bla_real,
    ) -> c_int;
    pub fn ctpmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_scomplex,
        x: *mut bla_scomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn dtpmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_double,
        x: *mut bla_double,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn stpmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_real,
        x: *mut bla_real,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn ztpmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_dcomplex,
        x: *mut bla_dcomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn ctpsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_scomplex,
        x: *mut bla_scomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn dtpsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_double,
        x: *mut bla_double,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn stpsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_real,
        x: *mut bla_real,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn ztpsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        ap: *const bla_dcomplex,
        x: *mut bla_dcomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn cgbmv_(
        trans: *const bla_character,
        m: *const bla_integer,
        n: *const bla_integer,
        kl: *const bla_integer,
        ku: *const bla_integer,
        alpha: *const bla_scomplex,
        a: *const bla_scomplex,
        lda: *const bla_integer,
        x: *const bla_scomplex,
        incx: *const bla_integer,
        beta: *const bla_scomplex,
        y: *mut bla_scomplex,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn dgbmv_(
        trans: *const bla_character,
        m: *const bla_integer,
        n: *const bla_integer,
        kl: *const bla_integer,
        ku: *const bla_integer,
        alpha: *const bla_double,
        a: *const bla_double,
        lda: *const bla_integer,
        x: *const bla_double,
        incx: *const bla_integer,
        beta: *const bla_double,
        y: *mut bla_double,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn sgbmv_(
        trans: *const bla_character,
        m: *const bla_integer,
        n: *const bla_integer,
        kl: *const bla_integer,
        ku: *const bla_integer,
        alpha: *const bla_real,
        a: *const bla_real,
        lda: *const bla_integer,
        x: *const bla_real,
        incx: *const bla_integer,
        beta: *const bla_real,
        y: *mut bla_real,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn zgbmv_(
        trans: *const bla_character,
        m: *const bla_integer,
        n: *const bla_integer,
        kl: *const bla_integer,
        ku: *const bla_integer,
        alpha: *const bla_dcomplex,
        a: *const bla_dcomplex,
        lda: *const bla_integer,
        x: *const bla_dcomplex,
        incx: *const bla_integer,
        beta: *const bla_dcomplex,
        y: *mut bla_dcomplex,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn chbmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        alpha: *const bla_scomplex,
        a: *const bla_scomplex,
        lda: *const bla_integer,
        x: *const bla_scomplex,
        incx: *const bla_integer,
        beta: *const bla_scomplex,
        y: *mut bla_scomplex,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn zhbmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        alpha: *const bla_dcomplex,
        a: *const bla_dcomplex,
        lda: *const bla_integer,
        x: *const bla_dcomplex,
        incx: *const bla_integer,
        beta: *const bla_dcomplex,
        y: *mut bla_dcomplex,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn dsbmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        alpha: *const bla_double,
        a: *const bla_double,
        lda: *const bla_integer,
        x: *const bla_double,
        incx: *const bla_integer,
        beta: *const bla_double,
        y: *mut bla_double,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn ssbmv_(
        uplo: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        alpha: *const bla_real,
        a: *const bla_real,
        lda: *const bla_integer,
        x: *const bla_real,
        incx: *const bla_integer,
        beta: *const bla_real,
        y: *mut bla_real,
        incy: *const bla_integer,
    ) -> c_int;
    pub fn ctbmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_scomplex,
        lda: *const bla_integer,
        x: *mut bla_scomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn dtbmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_double,
        lda: *const bla_integer,
        x: *mut bla_double,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn stbmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_real,
        lda: *const bla_integer,
        x: *mut bla_real,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn ztbmv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_dcomplex,
        lda: *const bla_integer,
        x: *mut bla_dcomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn ctbsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_scomplex,
        lda: *const bla_integer,
        x: *mut bla_scomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn dtbsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_double,
        lda: *const bla_integer,
        x: *mut bla_double,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn stbsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_real,
        lda: *const bla_integer,
        x: *mut bla_real,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn ztbsv_(
        uplo: *const bla_character,
        trans: *const bla_character,
        diag: *const bla_character,
        n: *const bla_integer,
        k: *const bla_integer,
        a: *const bla_dcomplex,
        lda: *const bla_integer,
        x: *mut bla_dcomplex,
        incx: *const bla_integer,
    ) -> c_int;
    pub fn sgemm_(
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        k: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *const f32,
        ldb: *const f77_int,
        beta: *const f32,
        c: *mut f32,
        ldc: *const f77_int,
    );
    pub fn dgemm_(
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        k: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *const f64,
        ldb: *const f77_int,
        beta: *const f64,
        c: *mut f64,
        ldc: *const f77_int,
    );
    pub fn cgemm_(
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zgemm_(
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn chemm_(
        side: *const f77_char,
        uploa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zhemm_(
        side: *const f77_char,
        uploa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn cherk_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f32,
        a: *const scomplex,
        lda: *const f77_int,
        beta: *const f32,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zherk_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f64,
        a: *const dcomplex,
        lda: *const f77_int,
        beta: *const f64,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn cher2k_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const f32,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zher2k_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const f64,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn ssymm_(
        side: *const f77_char,
        uploa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *const f32,
        ldb: *const f77_int,
        beta: *const f32,
        c: *mut f32,
        ldc: *const f77_int,
    );
    pub fn dsymm_(
        side: *const f77_char,
        uploa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *const f64,
        ldb: *const f77_int,
        beta: *const f64,
        c: *mut f64,
        ldc: *const f77_int,
    );
    pub fn csymm_(
        side: *const f77_char,
        uploa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zsymm_(
        side: *const f77_char,
        uploa: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn ssyrk_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        beta: *const f32,
        c: *mut f32,
        ldc: *const f77_int,
    );
    pub fn dsyrk_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        beta: *const f64,
        c: *mut f64,
        ldc: *const f77_int,
    );
    pub fn csyrk_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zsyrk_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn ssyr2k_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *const f32,
        ldb: *const f77_int,
        beta: *const f32,
        c: *mut f32,
        ldc: *const f77_int,
    );
    pub fn dsyr2k_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *const f64,
        ldb: *const f77_int,
        beta: *const f64,
        c: *mut f64,
        ldc: *const f77_int,
    );
    pub fn csyr2k_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zsyr2k_(
        uploc: *const f77_char,
        transa: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn strmm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *mut f32,
        ldb: *const f77_int,
    );
    pub fn dtrmm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *mut f64,
        ldb: *const f77_int,
    );
    pub fn ctrmm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *mut scomplex,
        ldb: *const f77_int,
    );
    pub fn ztrmm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *mut dcomplex,
        ldb: *const f77_int,
    );
    pub fn strsm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *mut f32,
        ldb: *const f77_int,
    );
    pub fn dtrsm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *mut f64,
        ldb: *const f77_int,
    );
    pub fn ctrsm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *mut scomplex,
        ldb: *const f77_int,
    );
    pub fn ztrsm_(
        side: *const f77_char,
        uploa: *const f77_char,
        transa: *const f77_char,
        diaga: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *mut dcomplex,
        ldb: *const f77_int,
    );
    pub fn saxpby_(
        n: *const f77_int,
        alpha: *const f32,
        x: *const f32,
        incx: *const f77_int,
        beta: *const f32,
        y: *mut f32,
        incy: *const f77_int,
    );
    pub fn daxpby_(
        n: *const f77_int,
        alpha: *const f64,
        x: *const f64,
        incx: *const f77_int,
        beta: *const f64,
        y: *mut f64,
        incy: *const f77_int,
    );
    pub fn caxpby_(
        n: *const f77_int,
        alpha: *const scomplex,
        x: *const scomplex,
        incx: *const f77_int,
        beta: *const scomplex,
        y: *mut scomplex,
        incy: *const f77_int,
    );
    pub fn zaxpby_(
        n: *const f77_int,
        alpha: *const dcomplex,
        x: *const dcomplex,
        incx: *const f77_int,
        beta: *const dcomplex,
        y: *mut dcomplex,
        incy: *const f77_int,
    );
    pub fn sgemmt_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *const f32,
        ldb: *const f77_int,
        beta: *const f32,
        c: *mut f32,
        ldc: *const f77_int,
    );
    pub fn dgemmt_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *const f64,
        ldb: *const f77_int,
        beta: *const f64,
        c: *mut f64,
        ldc: *const f77_int,
    );
    pub fn cgemmt_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zgemmt_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn sgemmtr_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f32,
        a: *const f32,
        lda: *const f77_int,
        b: *const f32,
        ldb: *const f77_int,
        beta: *const f32,
        c: *mut f32,
        ldc: *const f77_int,
    );
    pub fn dgemmtr_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const f64,
        a: *const f64,
        lda: *const f77_int,
        b: *const f64,
        ldb: *const f77_int,
        beta: *const f64,
        c: *mut f64,
        ldc: *const f77_int,
    );
    pub fn cgemmtr_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zgemmtr_(
        uploc: *const f77_char,
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn sgemm_batch_(
        transa_array: *const f77_char,
        transb_array: *const f77_char,
        m_array: *const f77_int,
        n_array: *const f77_int,
        k_array: *const f77_int,
        alpha_array: *const f32,
        a_array: *mut *const f32,
        lda_array: *const f77_int,
        b_array: *mut *const f32,
        ldb_array: *const f77_int,
        beta_array: *const f32,
        c_array: *mut *mut f32,
        ldc_array: *const f77_int,
        group_count: *const f77_int,
        group_size: *const f77_int,
    );
    pub fn dgemm_batch_(
        transa_array: *const f77_char,
        transb_array: *const f77_char,
        m_array: *const f77_int,
        n_array: *const f77_int,
        k_array: *const f77_int,
        alpha_array: *const f64,
        a_array: *mut *const f64,
        lda_array: *const f77_int,
        b_array: *mut *const f64,
        ldb_array: *const f77_int,
        beta_array: *const f64,
        c_array: *mut *mut f64,
        ldc_array: *const f77_int,
        group_count: *const f77_int,
        group_size: *const f77_int,
    );
    pub fn cgemm_batch_(
        transa_array: *const f77_char,
        transb_array: *const f77_char,
        m_array: *const f77_int,
        n_array: *const f77_int,
        k_array: *const f77_int,
        alpha_array: *const scomplex,
        a_array: *mut *const scomplex,
        lda_array: *const f77_int,
        b_array: *mut *const scomplex,
        ldb_array: *const f77_int,
        beta_array: *const scomplex,
        c_array: *mut *mut scomplex,
        ldc_array: *const f77_int,
        group_count: *const f77_int,
        group_size: *const f77_int,
    );
    pub fn zgemm_batch_(
        transa_array: *const f77_char,
        transb_array: *const f77_char,
        m_array: *const f77_int,
        n_array: *const f77_int,
        k_array: *const f77_int,
        alpha_array: *const dcomplex,
        a_array: *mut *const dcomplex,
        lda_array: *const f77_int,
        b_array: *mut *const dcomplex,
        ldb_array: *const f77_int,
        beta_array: *const dcomplex,
        c_array: *mut *mut dcomplex,
        ldc_array: *const f77_int,
        group_count: *const f77_int,
        group_size: *const f77_int,
    );
    pub fn cgemm3m_(
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        k: *const f77_int,
        alpha: *const scomplex,
        a: *const scomplex,
        lda: *const f77_int,
        b: *const scomplex,
        ldb: *const f77_int,
        beta: *const scomplex,
        c: *mut scomplex,
        ldc: *const f77_int,
    );
    pub fn zgemm3m_(
        transa: *const f77_char,
        transb: *const f77_char,
        m: *const f77_int,
        n: *const f77_int,
        k: *const f77_int,
        alpha: *const dcomplex,
        a: *const dcomplex,
        lda: *const f77_int,
        b: *const dcomplex,
        ldb: *const f77_int,
        beta: *const dcomplex,
        c: *mut dcomplex,
        ldc: *const f77_int,
    );
    pub fn bli_thread_set_ways_(
        jc: *const f77_int,
        pc: *const f77_int,
        ic: *const f77_int,
        jr: *const f77_int,
        ir: *const f77_int,
    );
    pub fn bli_thread_set_num_threads_(nt: *const f77_int);
    pub fn cblas_sdsdot(
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        Y: *const f32,
        incY: f77_int,
    ) -> f32;
    pub fn cblas_dsdot(
        N: f77_int,
        X: *const f32,
        incX: f77_int,
        Y: *const f32,
        incY: f77_int,
    ) -> f64;
    pub fn cblas_sdot(
        N: f77_int,
        X: *const f32,
        incX: f77_int,
        Y: *const f32,
        incY: f77_int,
    ) -> f32;
    pub fn cblas_ddot(
        N: f77_int,
        X: *const f64,
        incX: f77_int,
        Y: *const f64,
        incY: f77_int,
    ) -> f64;
    pub fn cblas_cdotu_sub(
        N: f77_int,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        dotu: *mut c_void,
    );
    pub fn cblas_cdotc_sub(
        N: f77_int,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        dotc: *mut c_void,
    );
    pub fn cblas_zdotu_sub(
        N: f77_int,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        dotu: *mut c_void,
    );
    pub fn cblas_zdotc_sub(
        N: f77_int,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        dotc: *mut c_void,
    );
    pub fn cblas_snrm2(N: f77_int, X: *const f32, incX: f77_int) -> f32;
    pub fn cblas_sasum(N: f77_int, X: *const f32, incX: f77_int) -> f32;
    pub fn cblas_dnrm2(N: f77_int, X: *const f64, incX: f77_int) -> f64;
    pub fn cblas_dasum(N: f77_int, X: *const f64, incX: f77_int) -> f64;
    pub fn cblas_scnrm2(N: f77_int, X: *const c_void, incX: f77_int) -> f32;
    pub fn cblas_scasum(N: f77_int, X: *const c_void, incX: f77_int) -> f32;
    pub fn cblas_dznrm2(N: f77_int, X: *const c_void, incX: f77_int) -> f64;
    pub fn cblas_dzasum(N: f77_int, X: *const c_void, incX: f77_int) -> f64;
    pub fn cblas_isamax(N: f77_int, X: *const f32, incX: f77_int) -> f77_int;
    pub fn cblas_idamax(N: f77_int, X: *const f64, incX: f77_int) -> f77_int;
    pub fn cblas_icamax(N: f77_int, X: *const c_void, incX: f77_int) -> f77_int;
    pub fn cblas_izamax(N: f77_int, X: *const c_void, incX: f77_int) -> f77_int;
    pub fn cblas_sswap(N: f77_int, X: *mut f32, incX: f77_int, Y: *mut f32, incY: f77_int);
    pub fn cblas_scopy(N: f77_int, X: *const f32, incX: f77_int, Y: *mut f32, incY: f77_int);
    pub fn cblas_saxpy(
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_dswap(N: f77_int, X: *mut f64, incX: f77_int, Y: *mut f64, incY: f77_int);
    pub fn cblas_dcopy(N: f77_int, X: *const f64, incX: f77_int, Y: *mut f64, incY: f77_int);
    pub fn cblas_daxpy(
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_cswap(
        N: f77_int,
        X: *mut c_void,
        incX: f77_int,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_ccopy(
        N: f77_int,
        X: *const c_void,
        incX: f77_int,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_caxpy(
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zswap(
        N: f77_int,
        X: *mut c_void,
        incX: f77_int,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zcopy(
        N: f77_int,
        X: *const c_void,
        incX: f77_int,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zaxpy(
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_srotg(a: *mut f32, b: *mut f32, c: *mut f32, s: *mut f32);
    pub fn cblas_srotmg(d1: *mut f32, d2: *mut f32, b1: *mut f32, b2: f32, P: *mut f32);
    pub fn cblas_srot(
        N: f77_int,
        X: *mut f32,
        incX: f77_int,
        Y: *mut f32,
        incY: f77_int,
        c: f32,
        s: f32,
    );
    pub fn cblas_srotm(
        N: f77_int,
        X: *mut f32,
        incX: f77_int,
        Y: *mut f32,
        incY: f77_int,
        P: *const f32,
    );
    pub fn cblas_drotg(a: *mut f64, b: *mut f64, c: *mut f64, s: *mut f64);
    pub fn cblas_drotmg(d1: *mut f64, d2: *mut f64, b1: *mut f64, b2: f64, P: *mut f64);
    pub fn cblas_drot(
        N: f77_int,
        X: *mut f64,
        incX: f77_int,
        Y: *mut f64,
        incY: f77_int,
        c: f64,
        s: f64,
    );
    pub fn cblas_drotm(
        N: f77_int,
        X: *mut f64,
        incX: f77_int,
        Y: *mut f64,
        incY: f77_int,
        P: *const f64,
    );
    pub fn cblas_sscal(N: f77_int, alpha: f32, X: *mut f32, incX: f77_int);
    pub fn cblas_dscal(N: f77_int, alpha: f64, X: *mut f64, incX: f77_int);
    pub fn cblas_cscal(
        N: f77_int,
        alpha: *const c_void,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_zscal(
        N: f77_int,
        alpha: *const c_void,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_csscal(N: f77_int, alpha: f32, X: *mut c_void, incX: f77_int);
    pub fn cblas_zdscal(N: f77_int, alpha: f64, X: *mut c_void, incX: f77_int);
    pub fn cblas_sgemv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        X: *const f32,
        incX: f77_int,
        beta: f32,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_sgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        KL: f77_int,
        KU: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        X: *const f32,
        incX: f77_int,
        beta: f32,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_strmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const f32,
        lda: f77_int,
        X: *mut f32,
        incX: f77_int,
    );
    pub fn cblas_stbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const f32,
        lda: f77_int,
        X: *mut f32,
        incX: f77_int,
    );
    pub fn cblas_stpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const f32,
        X: *mut f32,
        incX: f77_int,
    );
    pub fn cblas_strsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const f32,
        lda: f77_int,
        X: *mut f32,
        incX: f77_int,
    );
    pub fn cblas_stbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const f32,
        lda: f77_int,
        X: *mut f32,
        incX: f77_int,
    );
    pub fn cblas_stpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const f32,
        X: *mut f32,
        incX: f77_int,
    );
    pub fn cblas_dgemv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        X: *const f64,
        incX: f77_int,
        beta: f64,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_dgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        KL: f77_int,
        KU: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        X: *const f64,
        incX: f77_int,
        beta: f64,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_dtrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const f64,
        lda: f77_int,
        X: *mut f64,
        incX: f77_int,
    );
    pub fn cblas_dtbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const f64,
        lda: f77_int,
        X: *mut f64,
        incX: f77_int,
    );
    pub fn cblas_dtpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const f64,
        X: *mut f64,
        incX: f77_int,
    );
    pub fn cblas_dtrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const f64,
        lda: f77_int,
        X: *mut f64,
        incX: f77_int,
    );
    pub fn cblas_dtbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const f64,
        lda: f77_int,
        X: *mut f64,
        incX: f77_int,
    );
    pub fn cblas_dtpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const f64,
        X: *mut f64,
        incX: f77_int,
    );
    pub fn cblas_cgemv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_cgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        KL: f77_int,
        KU: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_ctrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ctbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ctpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ctrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ctbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ctpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_zgemv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        KL: f77_int,
        KU: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_ztrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ztbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ztpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ztrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ztbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        K: f77_int,
        A: *const c_void,
        lda: f77_int,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ztpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: f77_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: f77_int,
    );
    pub fn cblas_ssymv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        X: *const f32,
        incX: f77_int,
        beta: f32,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_ssbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        X: *const f32,
        incX: f77_int,
        beta: f32,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_sspmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        Ap: *const f32,
        X: *const f32,
        incX: f77_int,
        beta: f32,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_sger(
        order: CBLAS_ORDER,
        M: f77_int,
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        Y: *const f32,
        incY: f77_int,
        A: *mut f32,
        lda: f77_int,
    );
    pub fn cblas_ssyr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        A: *mut f32,
        lda: f77_int,
    );
    pub fn cblas_sspr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        Ap: *mut f32,
    );
    pub fn cblas_ssyr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        Y: *const f32,
        incY: f77_int,
        A: *mut f32,
        lda: f77_int,
    );
    pub fn cblas_sspr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        Y: *const f32,
        incY: f77_int,
        A: *mut f32,
    );
    pub fn cblas_dsymv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        X: *const f64,
        incX: f77_int,
        beta: f64,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_dsbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        X: *const f64,
        incX: f77_int,
        beta: f64,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_dspmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        Ap: *const f64,
        X: *const f64,
        incX: f77_int,
        beta: f64,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_dger(
        order: CBLAS_ORDER,
        M: f77_int,
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        Y: *const f64,
        incY: f77_int,
        A: *mut f64,
        lda: f77_int,
    );
    pub fn cblas_dsyr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        A: *mut f64,
        lda: f77_int,
    );
    pub fn cblas_dspr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        Ap: *mut f64,
    );
    pub fn cblas_dsyr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        Y: *const f64,
        incY: f77_int,
        A: *mut f64,
        lda: f77_int,
    );
    pub fn cblas_dspr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        Y: *const f64,
        incY: f77_int,
        A: *mut f64,
    );
    pub fn cblas_chemv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_chbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_chpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_cgeru(
        order: CBLAS_ORDER,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_cgerc(
        order: CBLAS_ORDER,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_cher(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        X: *const c_void,
        incX: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_chpr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f32,
        X: *const c_void,
        incX: f77_int,
        A: *mut c_void,
    );
    pub fn cblas_cher2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_chpr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        Ap: *mut c_void,
    );
    pub fn cblas_zhemv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zhbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zhpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zgeru(
        order: CBLAS_ORDER,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_zgerc(
        order: CBLAS_ORDER,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_zher(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        X: *const c_void,
        incX: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_zhpr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: f64,
        X: *const c_void,
        incX: f77_int,
        A: *mut c_void,
    );
    pub fn cblas_zher2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        A: *mut c_void,
        lda: f77_int,
    );
    pub fn cblas_zhpr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        Y: *const c_void,
        incY: f77_int,
        Ap: *mut c_void,
    );
    pub fn cblas_sgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *const f32,
        ldb: f77_int,
        beta: f32,
        C: *mut f32,
        ldc: f77_int,
    );
    pub fn cblas_ssymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: f77_int,
        N: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *const f32,
        ldb: f77_int,
        beta: f32,
        C: *mut f32,
        ldc: f77_int,
    );
    pub fn cblas_ssyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        beta: f32,
        C: *mut f32,
        ldc: f77_int,
    );
    pub fn cblas_ssyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *const f32,
        ldb: f77_int,
        beta: f32,
        C: *mut f32,
        ldc: f77_int,
    );
    pub fn cblas_strmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *mut f32,
        ldb: f77_int,
    );
    pub fn cblas_strsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *mut f32,
        ldb: f77_int,
    );
    pub fn cblas_dgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *const f64,
        ldb: f77_int,
        beta: f64,
        C: *mut f64,
        ldc: f77_int,
    );
    pub fn cblas_dsymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: f77_int,
        N: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *const f64,
        ldb: f77_int,
        beta: f64,
        C: *mut f64,
        ldc: f77_int,
    );
    pub fn cblas_dsyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        beta: f64,
        C: *mut f64,
        ldc: f77_int,
    );
    pub fn cblas_dsyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *const f64,
        ldb: f77_int,
        beta: f64,
        C: *mut f64,
        ldc: f77_int,
    );
    pub fn cblas_dtrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *mut f64,
        ldb: f77_int,
    );
    pub fn cblas_dtrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *mut f64,
        ldb: f77_int,
    );
    pub fn cblas_cgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_csymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_csyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_csyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_ctrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *mut c_void,
        ldb: f77_int,
    );
    pub fn cblas_ctrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *mut c_void,
        ldb: f77_int,
    );
    pub fn cblas_zgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zsymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zsyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zsyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_ztrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *mut c_void,
        ldb: f77_int,
    );
    pub fn cblas_ztrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *mut c_void,
        ldb: f77_int,
    );
    pub fn cblas_chemm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_cherk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const c_void,
        lda: f77_int,
        beta: f32,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_cher2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: f32,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zhemm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: f77_int,
        N: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zherk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const c_void,
        lda: f77_int,
        beta: f64,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zher2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: f64,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_xerbla(
        p: f77_int,
        rout: *const c_char,
        form: *const c_char,
        ...
    );
    pub fn cblas_saxpby(
        N: f77_int,
        alpha: f32,
        X: *const f32,
        incX: f77_int,
        beta: f32,
        Y: *mut f32,
        incY: f77_int,
    );
    pub fn cblas_daxpby(
        N: f77_int,
        alpha: f64,
        X: *const f64,
        incX: f77_int,
        beta: f64,
        Y: *mut f64,
        incY: f77_int,
    );
    pub fn cblas_caxpby(
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_zaxpby(
        N: f77_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: f77_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: f77_int,
    );
    pub fn cblas_sgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *const f32,
        ldb: f77_int,
        beta: f32,
        C: *mut f32,
        ldc: f77_int,
    );
    pub fn cblas_sgemmtr(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f32,
        A: *const f32,
        lda: f77_int,
        B: *const f32,
        ldb: f77_int,
        beta: f32,
        C: *mut f32,
        ldc: f77_int,
    );
    pub fn cblas_dgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *const f64,
        ldb: f77_int,
        beta: f64,
        C: *mut f64,
        ldc: f77_int,
    );
    pub fn cblas_dgemmtr(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: f64,
        A: *const f64,
        lda: f77_int,
        B: *const f64,
        ldb: f77_int,
        beta: f64,
        C: *mut f64,
        ldc: f77_int,
    );
    pub fn cblas_cgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_cgemmtr(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zgemmtr(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_sgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *mut CBLAS_TRANSPOSE,
        TransB_array: *mut CBLAS_TRANSPOSE,
        M_array: *mut f77_int,
        N_array: *mut f77_int,
        K_array: *mut f77_int,
        alpha_array: *const f32,
        A: *mut *const f32,
        lda_array: *mut f77_int,
        B: *mut *const f32,
        ldb_array: *mut f77_int,
        beta_array: *const f32,
        C: *mut *mut f32,
        ldc_array: *mut f77_int,
        group_count: f77_int,
        group_size: *mut f77_int,
    );
    pub fn cblas_dgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *mut CBLAS_TRANSPOSE,
        TransB_array: *mut CBLAS_TRANSPOSE,
        M_array: *mut f77_int,
        N_array: *mut f77_int,
        K_array: *mut f77_int,
        alpha_array: *const f64,
        A: *mut *const f64,
        lda_array: *mut f77_int,
        B: *mut *const f64,
        ldb_array: *mut f77_int,
        beta_array: *const f64,
        C: *mut *mut f64,
        ldc_array: *mut f77_int,
        group_count: f77_int,
        group_size: *mut f77_int,
    );
    pub fn cblas_cgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *mut CBLAS_TRANSPOSE,
        TransB_array: *mut CBLAS_TRANSPOSE,
        M_array: *mut f77_int,
        N_array: *mut f77_int,
        K_array: *mut f77_int,
        alpha_array: *const c_void,
        A: *mut *const c_void,
        lda_array: *mut f77_int,
        B: *mut *const c_void,
        ldb_array: *mut f77_int,
        beta_array: *const c_void,
        C: *mut *mut c_void,
        ldc_array: *mut f77_int,
        group_count: f77_int,
        group_size: *mut f77_int,
    );
    pub fn cblas_zgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *mut CBLAS_TRANSPOSE,
        TransB_array: *mut CBLAS_TRANSPOSE,
        M_array: *mut f77_int,
        N_array: *mut f77_int,
        K_array: *mut f77_int,
        alpha_array: *const c_void,
        A: *mut *const c_void,
        lda_array: *mut f77_int,
        B: *mut *const c_void,
        ldb_array: *mut f77_int,
        beta_array: *const c_void,
        C: *mut *mut c_void,
        ldc_array: *mut f77_int,
        group_count: f77_int,
        group_size: *mut f77_int,
    );
    pub fn cblas_cgemm3m(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn cblas_zgemm3m(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: f77_int,
        N: f77_int,
        K: f77_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: f77_int,
        B: *const c_void,
        ldb: f77_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: f77_int,
    );
    pub fn bli_sleep(secs: c_uint);
}
    