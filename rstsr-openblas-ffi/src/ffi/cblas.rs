#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

use core::ffi::{c_char, c_int, c_uint, c_ulong, c_void};

#[cfg(not(feature = "ilp64"))]
pub type blasint = i32;
#[cfg(feature = "ilp64")]
pub type blasint = i64;

/* automatically generated by rust-bindgen 0.69.4 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const OPENBLAS_SEQUENTIAL: u32 = 0;
pub const OPENBLAS_THREAD: u32 = 1;
pub const OPENBLAS_OPENMP: u32 = 2;
pub type bfloat16 = u16;

pub type openblas_complex_float = __BindgenComplex<f32>;
pub type openblas_complex_double = __BindgenComplex<f64>;
pub type __cpu_mask = c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
pub type openblas_dojob_callback =
    Option<unsafe extern "C" fn(thread_num: c_int, jobdata: *mut c_void, dojob_data: c_int)>;
pub type openblas_threads_callback = Option<
    unsafe extern "C" fn(
        sync: c_int,
        dojob: openblas_dojob_callback,
        numjobs: c_int,
        jobdata_elsize: usize,
        jobdata: *mut c_void,
        dojob_data: c_int,
    ),
>;
pub const CBLAS_ORDER_CblasRowMajor: CBLAS_ORDER = 101;
pub const CBLAS_ORDER_CblasColMajor: CBLAS_ORDER = 102;
pub type CBLAS_ORDER = c_uint;
pub const CBLAS_TRANSPOSE_CblasNoTrans: CBLAS_TRANSPOSE = 111;
pub const CBLAS_TRANSPOSE_CblasTrans: CBLAS_TRANSPOSE = 112;
pub const CBLAS_TRANSPOSE_CblasConjTrans: CBLAS_TRANSPOSE = 113;
pub const CBLAS_TRANSPOSE_CblasConjNoTrans: CBLAS_TRANSPOSE = 114;
pub type CBLAS_TRANSPOSE = c_uint;
pub const CBLAS_UPLO_CblasUpper: CBLAS_UPLO = 121;
pub const CBLAS_UPLO_CblasLower: CBLAS_UPLO = 122;
pub type CBLAS_UPLO = c_uint;
pub const CBLAS_DIAG_CblasNonUnit: CBLAS_DIAG = 131;
pub const CBLAS_DIAG_CblasUnit: CBLAS_DIAG = 132;
pub type CBLAS_DIAG = c_uint;
pub const CBLAS_SIDE_CblasLeft: CBLAS_SIDE = 141;
pub const CBLAS_SIDE_CblasRight: CBLAS_SIDE = 142;
pub type CBLAS_SIDE = c_uint;
pub use self::CBLAS_ORDER as CBLAS_LAYOUT;
extern "C" {
    pub fn openblas_set_num_threads(num_threads: c_int);
    pub fn goto_set_num_threads(num_threads: c_int);
    pub fn openblas_set_num_threads_local(num_threads: c_int) -> c_int;
    pub fn openblas_get_num_threads() -> c_int;
    pub fn openblas_get_num_procs() -> c_int;
    pub fn openblas_get_config() -> *mut c_char;
    pub fn openblas_get_corename() -> *mut c_char;
    pub fn openblas_set_threads_callback_function(callback: openblas_threads_callback);
    pub fn openblas_setaffinity(
        thread_idx: c_int,
        cpusetsize: usize,
        cpu_set: *mut cpu_set_t,
    ) -> c_int;
    pub fn openblas_getaffinity(
        thread_idx: c_int,
        cpusetsize: usize,
        cpu_set: *mut cpu_set_t,
    ) -> c_int;
    pub fn openblas_get_parallel() -> c_int;
    pub fn cblas_sdsdot(
        n: blasint,
        alpha: f32,
        x: *const f32,
        incx: blasint,
        y: *const f32,
        incy: blasint,
    ) -> f32;
    pub fn cblas_dsdot(
        n: blasint,
        x: *const f32,
        incx: blasint,
        y: *const f32,
        incy: blasint,
    ) -> f64;
    pub fn cblas_sdot(
        n: blasint,
        x: *const f32,
        incx: blasint,
        y: *const f32,
        incy: blasint,
    ) -> f32;
    pub fn cblas_ddot(
        n: blasint,
        x: *const f64,
        incx: blasint,
        y: *const f64,
        incy: blasint,
    ) -> f64;
    pub fn cblas_cdotu(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
    ) -> openblas_complex_float;
    pub fn cblas_cdotc(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
    ) -> openblas_complex_float;
    pub fn cblas_zdotu(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
    ) -> openblas_complex_double;
    pub fn cblas_zdotc(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
    ) -> openblas_complex_double;
    pub fn cblas_cdotu_sub(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
        ret: *mut c_void,
    );
    pub fn cblas_cdotc_sub(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
        ret: *mut c_void,
    );
    pub fn cblas_zdotu_sub(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
        ret: *mut c_void,
    );
    pub fn cblas_zdotc_sub(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *const c_void,
        incy: blasint,
        ret: *mut c_void,
    );
    pub fn cblas_sasum(n: blasint, x: *const f32, incx: blasint) -> f32;
    pub fn cblas_dasum(n: blasint, x: *const f64, incx: blasint) -> f64;
    pub fn cblas_scasum(n: blasint, x: *const c_void, incx: blasint) -> f32;
    pub fn cblas_dzasum(n: blasint, x: *const c_void, incx: blasint) -> f64;
    pub fn cblas_ssum(n: blasint, x: *const f32, incx: blasint) -> f32;
    pub fn cblas_dsum(n: blasint, x: *const f64, incx: blasint) -> f64;
    pub fn cblas_scsum(n: blasint, x: *const c_void, incx: blasint) -> f32;
    pub fn cblas_dzsum(n: blasint, x: *const c_void, incx: blasint) -> f64;
    pub fn cblas_snrm2(N: blasint, X: *const f32, incX: blasint) -> f32;
    pub fn cblas_dnrm2(N: blasint, X: *const f64, incX: blasint) -> f64;
    pub fn cblas_scnrm2(N: blasint, X: *const c_void, incX: blasint) -> f32;
    pub fn cblas_dznrm2(N: blasint, X: *const c_void, incX: blasint) -> f64;
    pub fn cblas_isamax(n: blasint, x: *const f32, incx: blasint) -> usize;
    pub fn cblas_idamax(n: blasint, x: *const f64, incx: blasint) -> usize;
    pub fn cblas_icamax(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_izamax(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_isamin(n: blasint, x: *const f32, incx: blasint) -> usize;
    pub fn cblas_idamin(n: blasint, x: *const f64, incx: blasint) -> usize;
    pub fn cblas_icamin(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_izamin(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_samax(n: blasint, x: *const f32, incx: blasint) -> f32;
    pub fn cblas_damax(n: blasint, x: *const f64, incx: blasint) -> f64;
    pub fn cblas_scamax(n: blasint, x: *const c_void, incx: blasint) -> f32;
    pub fn cblas_dzamax(n: blasint, x: *const c_void, incx: blasint) -> f64;
    pub fn cblas_samin(n: blasint, x: *const f32, incx: blasint) -> f32;
    pub fn cblas_damin(n: blasint, x: *const f64, incx: blasint) -> f64;
    pub fn cblas_scamin(n: blasint, x: *const c_void, incx: blasint) -> f32;
    pub fn cblas_dzamin(n: blasint, x: *const c_void, incx: blasint) -> f64;
    pub fn cblas_ismax(n: blasint, x: *const f32, incx: blasint) -> usize;
    pub fn cblas_idmax(n: blasint, x: *const f64, incx: blasint) -> usize;
    pub fn cblas_icmax(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_izmax(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_ismin(n: blasint, x: *const f32, incx: blasint) -> usize;
    pub fn cblas_idmin(n: blasint, x: *const f64, incx: blasint) -> usize;
    pub fn cblas_icmin(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_izmin(n: blasint, x: *const c_void, incx: blasint) -> usize;
    pub fn cblas_saxpy(
        n: blasint,
        alpha: f32,
        x: *const f32,
        incx: blasint,
        y: *mut f32,
        incy: blasint,
    );
    pub fn cblas_daxpy(
        n: blasint,
        alpha: f64,
        x: *const f64,
        incx: blasint,
        y: *mut f64,
        incy: blasint,
    );
    pub fn cblas_caxpy(
        n: blasint,
        alpha: *const c_void,
        x: *const c_void,
        incx: blasint,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_zaxpy(
        n: blasint,
        alpha: *const c_void,
        x: *const c_void,
        incx: blasint,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_caxpyc(
        n: blasint,
        alpha: *const c_void,
        x: *const c_void,
        incx: blasint,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_zaxpyc(
        n: blasint,
        alpha: *const c_void,
        x: *const c_void,
        incx: blasint,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_scopy(n: blasint, x: *const f32, incx: blasint, y: *mut f32, incy: blasint);
    pub fn cblas_dcopy(n: blasint, x: *const f64, incx: blasint, y: *mut f64, incy: blasint);
    pub fn cblas_ccopy(n: blasint, x: *const c_void, incx: blasint, y: *mut c_void, incy: blasint);
    pub fn cblas_zcopy(n: blasint, x: *const c_void, incx: blasint, y: *mut c_void, incy: blasint);
    pub fn cblas_sswap(n: blasint, x: *mut f32, incx: blasint, y: *mut f32, incy: blasint);
    pub fn cblas_dswap(n: blasint, x: *mut f64, incx: blasint, y: *mut f64, incy: blasint);
    pub fn cblas_cswap(n: blasint, x: *mut c_void, incx: blasint, y: *mut c_void, incy: blasint);
    pub fn cblas_zswap(n: blasint, x: *mut c_void, incx: blasint, y: *mut c_void, incy: blasint);
    pub fn cblas_srot(
        N: blasint,
        X: *mut f32,
        incX: blasint,
        Y: *mut f32,
        incY: blasint,
        c: f32,
        s: f32,
    );
    pub fn cblas_drot(
        N: blasint,
        X: *mut f64,
        incX: blasint,
        Y: *mut f64,
        incY: blasint,
        c: f64,
        s: f64,
    );
    pub fn cblas_csrot(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *mut c_void,
        incY: blasint,
        c: f32,
        s: f32,
    );
    pub fn cblas_zdrot(
        n: blasint,
        x: *const c_void,
        incx: blasint,
        y: *mut c_void,
        incY: blasint,
        c: f64,
        s: f64,
    );
    pub fn cblas_srotg(a: *mut f32, b: *mut f32, c: *mut f32, s: *mut f32);
    pub fn cblas_drotg(a: *mut f64, b: *mut f64, c: *mut f64, s: *mut f64);
    pub fn cblas_crotg(a: *mut c_void, b: *mut c_void, c: *mut f32, s: *mut c_void);
    pub fn cblas_zrotg(a: *mut c_void, b: *mut c_void, c: *mut f64, s: *mut c_void);
    pub fn cblas_srotm(
        N: blasint,
        X: *mut f32,
        incX: blasint,
        Y: *mut f32,
        incY: blasint,
        P: *const f32,
    );
    pub fn cblas_drotm(
        N: blasint,
        X: *mut f64,
        incX: blasint,
        Y: *mut f64,
        incY: blasint,
        P: *const f64,
    );
    pub fn cblas_srotmg(d1: *mut f32, d2: *mut f32, b1: *mut f32, b2: f32, P: *mut f32);
    pub fn cblas_drotmg(d1: *mut f64, d2: *mut f64, b1: *mut f64, b2: f64, P: *mut f64);
    pub fn cblas_sscal(N: blasint, alpha: f32, X: *mut f32, incX: blasint);
    pub fn cblas_dscal(N: blasint, alpha: f64, X: *mut f64, incX: blasint);
    pub fn cblas_cscal(N: blasint, alpha: *const c_void, X: *mut c_void, incX: blasint);
    pub fn cblas_zscal(N: blasint, alpha: *const c_void, X: *mut c_void, incX: blasint);
    pub fn cblas_csscal(N: blasint, alpha: f32, X: *mut c_void, incX: blasint);
    pub fn cblas_zdscal(N: blasint, alpha: f64, X: *mut c_void, incX: blasint);
    pub fn cblas_sgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blasint,
        n: blasint,
        alpha: f32,
        a: *const f32,
        lda: blasint,
        x: *const f32,
        incx: blasint,
        beta: f32,
        y: *mut f32,
        incy: blasint,
    );
    pub fn cblas_dgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blasint,
        n: blasint,
        alpha: f64,
        a: *const f64,
        lda: blasint,
        x: *const f64,
        incx: blasint,
        beta: f64,
        y: *mut f64,
        incy: blasint,
    );
    pub fn cblas_cgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blasint,
        n: blasint,
        alpha: *const c_void,
        a: *const c_void,
        lda: blasint,
        x: *const c_void,
        incx: blasint,
        beta: *const c_void,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_zgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blasint,
        n: blasint,
        alpha: *const c_void,
        a: *const c_void,
        lda: blasint,
        x: *const c_void,
        incx: blasint,
        beta: *const c_void,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_sger(
        order: CBLAS_ORDER,
        M: blasint,
        N: blasint,
        alpha: f32,
        X: *const f32,
        incX: blasint,
        Y: *const f32,
        incY: blasint,
        A: *mut f32,
        lda: blasint,
    );
    pub fn cblas_dger(
        order: CBLAS_ORDER,
        M: blasint,
        N: blasint,
        alpha: f64,
        X: *const f64,
        incX: blasint,
        Y: *const f64,
        incY: blasint,
        A: *mut f64,
        lda: blasint,
    );
    pub fn cblas_cgeru(
        order: CBLAS_ORDER,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_cgerc(
        order: CBLAS_ORDER,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_zgeru(
        order: CBLAS_ORDER,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_zgerc(
        order: CBLAS_ORDER,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_strsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const f32,
        lda: blasint,
        X: *mut f32,
        incX: blasint,
    );
    pub fn cblas_dtrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const f64,
        lda: blasint,
        X: *mut f64,
        incX: blasint,
    );
    pub fn cblas_ctrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ztrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_strmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const f32,
        lda: blasint,
        X: *mut f32,
        incX: blasint,
    );
    pub fn cblas_dtrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const f64,
        lda: blasint,
        X: *mut f64,
        incX: blasint,
    );
    pub fn cblas_ctrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ztrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ssyr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        X: *const f32,
        incX: blasint,
        A: *mut f32,
        lda: blasint,
    );
    pub fn cblas_dsyr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        X: *const f64,
        incX: blasint,
        A: *mut f64,
        lda: blasint,
    );
    pub fn cblas_cher(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        X: *const c_void,
        incX: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_zher(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        X: *const c_void,
        incX: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_ssyr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        X: *const f32,
        incX: blasint,
        Y: *const f32,
        incY: blasint,
        A: *mut f32,
        lda: blasint,
    );
    pub fn cblas_dsyr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        X: *const f64,
        incX: blasint,
        Y: *const f64,
        incY: blasint,
        A: *mut f64,
        lda: blasint,
    );
    pub fn cblas_cher2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_zher2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        A: *mut c_void,
        lda: blasint,
    );
    pub fn cblas_sgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        KL: blasint,
        KU: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        X: *const f32,
        incX: blasint,
        beta: f32,
        Y: *mut f32,
        incY: blasint,
    );
    pub fn cblas_dgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        KL: blasint,
        KU: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        X: *const f64,
        incX: blasint,
        beta: f64,
        Y: *mut f64,
        incY: blasint,
    );
    pub fn cblas_cgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        KL: blasint,
        KU: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_zgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        KL: blasint,
        KU: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_ssbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        K: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        X: *const f32,
        incX: blasint,
        beta: f32,
        Y: *mut f32,
        incY: blasint,
    );
    pub fn cblas_dsbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        K: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        X: *const f64,
        incX: blasint,
        beta: f64,
        Y: *mut f64,
        incY: blasint,
    );
    pub fn cblas_stbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const f32,
        lda: blasint,
        X: *mut f32,
        incX: blasint,
    );
    pub fn cblas_dtbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const f64,
        lda: blasint,
        X: *mut f64,
        incX: blasint,
    );
    pub fn cblas_ctbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ztbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_stbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const f32,
        lda: blasint,
        X: *mut f32,
        incX: blasint,
    );
    pub fn cblas_dtbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const f64,
        lda: blasint,
        X: *mut f64,
        incX: blasint,
    );
    pub fn cblas_ctbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ztbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        K: blasint,
        A: *const c_void,
        lda: blasint,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_stpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const f32,
        X: *mut f32,
        incX: blasint,
    );
    pub fn cblas_dtpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const f64,
        X: *mut f64,
        incX: blasint,
    );
    pub fn cblas_ctpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ztpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_stpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const f32,
        X: *mut f32,
        incX: blasint,
    );
    pub fn cblas_dtpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const f64,
        X: *mut f64,
        incX: blasint,
    );
    pub fn cblas_ctpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ztpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blasint,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blasint,
    );
    pub fn cblas_ssymv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        X: *const f32,
        incX: blasint,
        beta: f32,
        Y: *mut f32,
        incY: blasint,
    );
    pub fn cblas_dsymv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        X: *const f64,
        incX: blasint,
        beta: f64,
        Y: *mut f64,
        incY: blasint,
    );
    pub fn cblas_chemv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_zhemv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_sspmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        Ap: *const f32,
        X: *const f32,
        incX: blasint,
        beta: f32,
        Y: *mut f32,
        incY: blasint,
    );
    pub fn cblas_dspmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        Ap: *const f64,
        X: *const f64,
        incX: blasint,
        beta: f64,
        Y: *mut f64,
        incY: blasint,
    );
    pub fn cblas_sspr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        X: *const f32,
        incX: blasint,
        Ap: *mut f32,
    );
    pub fn cblas_dspr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        X: *const f64,
        incX: blasint,
        Ap: *mut f64,
    );
    pub fn cblas_chpr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        X: *const c_void,
        incX: blasint,
        A: *mut c_void,
    );
    pub fn cblas_zhpr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        X: *const c_void,
        incX: blasint,
        A: *mut c_void,
    );
    pub fn cblas_sspr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f32,
        X: *const f32,
        incX: blasint,
        Y: *const f32,
        incY: blasint,
        A: *mut f32,
    );
    pub fn cblas_dspr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: f64,
        X: *const f64,
        incX: blasint,
        Y: *const f64,
        incY: blasint,
        A: *mut f64,
    );
    pub fn cblas_chpr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        Ap: *mut c_void,
    );
    pub fn cblas_zhpr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        X: *const c_void,
        incX: blasint,
        Y: *const c_void,
        incY: blasint,
        Ap: *mut c_void,
    );
    pub fn cblas_chbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_zhbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_chpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_zhpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blasint,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: blasint,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blasint,
    );
    pub fn cblas_sgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        B: *const f32,
        ldb: blasint,
        beta: f32,
        C: *mut f32,
        ldc: blasint,
    );
    pub fn cblas_dgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        B: *const f64,
        ldb: blasint,
        beta: f64,
        C: *mut f64,
        ldc: blasint,
    );
    pub fn cblas_cgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_cgemm3m(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zgemm3m(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_sgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        K: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        B: *const f32,
        ldb: blasint,
        beta: f32,
        C: *mut f32,
        ldc: blasint,
    );
    pub fn cblas_dgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        K: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        B: *const f64,
        ldb: blasint,
        beta: f64,
        C: *mut f64,
        ldc: blasint,
    );
    pub fn cblas_cgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zgemmt(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_ssymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blasint,
        N: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        B: *const f32,
        ldb: blasint,
        beta: f32,
        C: *mut f32,
        ldc: blasint,
    );
    pub fn cblas_dsymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blasint,
        N: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        B: *const f64,
        ldb: blasint,
        beta: f64,
        C: *mut f64,
        ldc: blasint,
    );
    pub fn cblas_csymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zsymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_ssyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        beta: f32,
        C: *mut f32,
        ldc: blasint,
    );
    pub fn cblas_dsyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        beta: f64,
        C: *mut f64,
        ldc: blasint,
    );
    pub fn cblas_csyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zsyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_ssyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        B: *const f32,
        ldb: blasint,
        beta: f32,
        C: *mut f32,
        ldc: blasint,
    );
    pub fn cblas_dsyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        B: *const f64,
        ldb: blasint,
        beta: f64,
        C: *mut f64,
        ldc: blasint,
    );
    pub fn cblas_csyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zsyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_strmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        B: *mut f32,
        ldb: blasint,
    );
    pub fn cblas_dtrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        B: *mut f64,
        ldb: blasint,
    );
    pub fn cblas_ctrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *mut c_void,
        ldb: blasint,
    );
    pub fn cblas_ztrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *mut c_void,
        ldb: blasint,
    );
    pub fn cblas_strsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: f32,
        A: *const f32,
        lda: blasint,
        B: *mut f32,
        ldb: blasint,
    );
    pub fn cblas_dtrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: f64,
        A: *const f64,
        lda: blasint,
        B: *mut f64,
        ldb: blasint,
    );
    pub fn cblas_ctrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *mut c_void,
        ldb: blasint,
    );
    pub fn cblas_ztrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *mut c_void,
        ldb: blasint,
    );
    pub fn cblas_chemm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zhemm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blasint,
        N: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_cherk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: f32,
        A: *const c_void,
        lda: blasint,
        beta: f32,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zherk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: f64,
        A: *const c_void,
        lda: blasint,
        beta: f64,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_cher2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: f32,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_zher2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blasint,
        K: blasint,
        alpha: *const c_void,
        A: *const c_void,
        lda: blasint,
        B: *const c_void,
        ldb: blasint,
        beta: f64,
        C: *mut c_void,
        ldc: blasint,
    );
    pub fn cblas_xerbla(p: blasint, rout: *const c_char, form: *const c_char, ...);
    #[doc = " BLAS extensions"]
    pub fn cblas_saxpby(
        n: blasint,
        alpha: f32,
        x: *const f32,
        incx: blasint,
        beta: f32,
        y: *mut f32,
        incy: blasint,
    );
    pub fn cblas_daxpby(
        n: blasint,
        alpha: f64,
        x: *const f64,
        incx: blasint,
        beta: f64,
        y: *mut f64,
        incy: blasint,
    );
    pub fn cblas_caxpby(
        n: blasint,
        alpha: *const c_void,
        x: *const c_void,
        incx: blasint,
        beta: *const c_void,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_zaxpby(
        n: blasint,
        alpha: *const c_void,
        x: *const c_void,
        incx: blasint,
        beta: *const c_void,
        y: *mut c_void,
        incy: blasint,
    );
    pub fn cblas_somatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: f32,
        a: *const f32,
        clda: blasint,
        b: *mut f32,
        cldb: blasint,
    );
    pub fn cblas_domatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: f64,
        a: *const f64,
        clda: blasint,
        b: *mut f64,
        cldb: blasint,
    );
    pub fn cblas_comatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: *const f32,
        a: *const f32,
        clda: blasint,
        b: *mut f32,
        cldb: blasint,
    );
    pub fn cblas_zomatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: *const f64,
        a: *const f64,
        clda: blasint,
        b: *mut f64,
        cldb: blasint,
    );
    pub fn cblas_simatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: f32,
        a: *mut f32,
        clda: blasint,
        cldb: blasint,
    );
    pub fn cblas_dimatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: f64,
        a: *mut f64,
        clda: blasint,
        cldb: blasint,
    );
    pub fn cblas_cimatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: *const f32,
        a: *mut f32,
        clda: blasint,
        cldb: blasint,
    );
    pub fn cblas_zimatcopy(
        CORDER: CBLAS_ORDER,
        CTRANS: CBLAS_TRANSPOSE,
        crows: blasint,
        ccols: blasint,
        calpha: *const f64,
        a: *mut f64,
        clda: blasint,
        cldb: blasint,
    );
    pub fn cblas_sgeadd(
        CORDER: CBLAS_ORDER,
        crows: blasint,
        ccols: blasint,
        calpha: f32,
        a: *mut f32,
        clda: blasint,
        cbeta: f32,
        c: *mut f32,
        cldc: blasint,
    );
    pub fn cblas_dgeadd(
        CORDER: CBLAS_ORDER,
        crows: blasint,
        ccols: blasint,
        calpha: f64,
        a: *mut f64,
        clda: blasint,
        cbeta: f64,
        c: *mut f64,
        cldc: blasint,
    );
    pub fn cblas_cgeadd(
        CORDER: CBLAS_ORDER,
        crows: blasint,
        ccols: blasint,
        calpha: *const f32,
        a: *mut f32,
        clda: blasint,
        cbeta: *const f32,
        c: *mut f32,
        cldc: blasint,
    );
    pub fn cblas_zgeadd(
        CORDER: CBLAS_ORDER,
        crows: blasint,
        ccols: blasint,
        calpha: *const f64,
        a: *mut f64,
        clda: blasint,
        cbeta: *const f64,
        c: *mut f64,
        cldc: blasint,
    );
    pub fn cblas_sgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *const CBLAS_TRANSPOSE,
        TransB_array: *const CBLAS_TRANSPOSE,
        M_array: *const blasint,
        N_array: *const blasint,
        K_array: *const blasint,
        alpha_array: *const f32,
        A_array: *mut *const f32,
        lda_array: *const blasint,
        B_array: *mut *const f32,
        ldb_array: *const blasint,
        beta_array: *const f32,
        C_array: *mut *mut f32,
        ldc_array: *const blasint,
        group_count: blasint,
        group_size: *const blasint,
    );
    pub fn cblas_dgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *const CBLAS_TRANSPOSE,
        TransB_array: *const CBLAS_TRANSPOSE,
        M_array: *const blasint,
        N_array: *const blasint,
        K_array: *const blasint,
        alpha_array: *const f64,
        A_array: *mut *const f64,
        lda_array: *const blasint,
        B_array: *mut *const f64,
        ldb_array: *const blasint,
        beta_array: *const f64,
        C_array: *mut *mut f64,
        ldc_array: *const blasint,
        group_count: blasint,
        group_size: *const blasint,
    );
    pub fn cblas_cgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *const CBLAS_TRANSPOSE,
        TransB_array: *const CBLAS_TRANSPOSE,
        M_array: *const blasint,
        N_array: *const blasint,
        K_array: *const blasint,
        alpha_array: *const c_void,
        A_array: *mut *const c_void,
        lda_array: *const blasint,
        B_array: *mut *const c_void,
        ldb_array: *const blasint,
        beta_array: *const c_void,
        C_array: *mut *mut c_void,
        ldc_array: *const blasint,
        group_count: blasint,
        group_size: *const blasint,
    );
    pub fn cblas_zgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *const CBLAS_TRANSPOSE,
        TransB_array: *const CBLAS_TRANSPOSE,
        M_array: *const blasint,
        N_array: *const blasint,
        K_array: *const blasint,
        alpha_array: *const c_void,
        A_array: *mut *const c_void,
        lda_array: *const blasint,
        B_array: *mut *const c_void,
        ldb_array: *const blasint,
        beta_array: *const c_void,
        C_array: *mut *mut c_void,
        ldc_array: *const blasint,
        group_count: blasint,
        group_size: *const blasint,
    );
    #[doc = " BFLOAT16 and INT8 extensions"]
    pub fn cblas_sbstobf16(
        n: blasint,
        in_: *const f32,
        incin: blasint,
        out: *mut bfloat16,
        incout: blasint,
    );
    pub fn cblas_sbdtobf16(
        n: blasint,
        in_: *const f64,
        incin: blasint,
        out: *mut bfloat16,
        incout: blasint,
    );
    pub fn cblas_sbf16tos(
        n: blasint,
        in_: *const bfloat16,
        incin: blasint,
        out: *mut f32,
        incout: blasint,
    );
    pub fn cblas_dbf16tod(
        n: blasint,
        in_: *const bfloat16,
        incin: blasint,
        out: *mut f64,
        incout: blasint,
    );
    pub fn cblas_sbdot(
        n: blasint,
        x: *const bfloat16,
        incx: blasint,
        y: *const bfloat16,
        incy: blasint,
    ) -> f32;
    pub fn cblas_sbgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blasint,
        n: blasint,
        alpha: f32,
        a: *const bfloat16,
        lda: blasint,
        x: *const bfloat16,
        incx: blasint,
        beta: f32,
        y: *mut f32,
        incy: blasint,
    );
    pub fn cblas_sbgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blasint,
        N: blasint,
        K: blasint,
        alpha: f32,
        A: *const bfloat16,
        lda: blasint,
        B: *const bfloat16,
        ldb: blasint,
        beta: f32,
        C: *mut f32,
        ldc: blasint,
    );
    pub fn cblas_sbgemm_batch(
        Order: CBLAS_ORDER,
        TransA_array: *const CBLAS_TRANSPOSE,
        TransB_array: *const CBLAS_TRANSPOSE,
        M_array: *const blasint,
        N_array: *const blasint,
        K_array: *const blasint,
        alpha_array: *const f32,
        A_array: *mut *const bfloat16,
        lda_array: *const blasint,
        B_array: *mut *const bfloat16,
        ldb_array: *const blasint,
        beta_array: *const f32,
        C_array: *mut *mut f32,
        ldc_array: *const blasint,
        group_count: blasint,
        group_size: *const blasint,
    );
}
