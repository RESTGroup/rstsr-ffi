#![allow(non_camel_case_types)]

use core::ffi::{c_char, c_int, c_void};

#[cfg(not(feature = "ilp64"))]
pub type blas_int = i32;
#[cfg(feature = "ilp64")]
pub type blas_int = i64;

#[cfg(all(feature = "quad_precision", not(feature = "ex_precision")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub x: [::core::os::raw::c_ulong; 2usize],
}
#[cfg(all(feature = "ex_precision", not(feature = "quad_precision")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub x: u128,
}
#[cfg(all(not(feature = "quad_precision"), not(feature = "ex_precision")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub x: f64,
}
// This is a workaround for cargo feature conflict
#[cfg(all(feature = "quad_precision", feature = "ex_precision"))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub _phantom: (),
}

/* automatically generated by rust-bindgen 0.71.1 */

pub type bfloat16 = u16;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openblas_complex_float {
    pub real: f32,
    pub imag: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openblas_complex_double {
    pub real: f64,
    pub imag: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openblas_complex_xdouble {
    pub real: xdouble,
    pub imag: xdouble,
}
pub type openblas_dojob_callback =
    Option<unsafe extern "C" fn(thread_num: c_int, jobdata: *mut c_void, dojob_data: c_int)>;
pub type openblas_threads_callback = Option<
    unsafe extern "C" fn(
        sync: c_int,
        dojob: openblas_dojob_callback,
        numjobs: c_int,
        jobdata_elsize: usize,
        jobdata: *mut c_void,
        dojob_data: c_int,
    ),
>;
unsafe extern "C" {
    pub fn xerbla(arg1: *mut c_char, info: *mut blas_int, arg2: blas_int) -> c_int;
    pub fn openblas_set_num_threads_(arg1: *mut c_int);
    pub static mut openblas_threads_callback_: openblas_threads_callback;
    pub fn sdot(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> f32;
    pub fn sdsdot(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    ) -> f32;
    pub fn dsdot(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> f64;
    pub fn ddot(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> f64;
    pub fn qdot(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    ) -> xdouble;
    pub fn sbdot(
        arg1: *mut blas_int,
        arg2: *mut bfloat16,
        arg3: *mut blas_int,
        arg4: *mut bfloat16,
        arg5: *mut blas_int,
    ) -> f32;
    pub fn sbstobf16(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut bfloat16,
        arg5: *mut blas_int,
    );
    pub fn sbdtobf16(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut bfloat16,
        arg5: *mut blas_int,
    );
    pub fn sbf16tos(
        arg1: *mut blas_int,
        arg2: *mut bfloat16,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn dbf16tod(
        arg1: *mut blas_int,
        arg2: *mut bfloat16,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn cdotu(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> openblas_complex_float;
    pub fn cdotc(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> openblas_complex_float;
    pub fn zdotu(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> openblas_complex_double;
    pub fn zdotc(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> openblas_complex_double;
    pub fn xdotu(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    ) -> openblas_complex_xdouble;
    pub fn xdotc(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    ) -> openblas_complex_xdouble;
    pub fn saxpy(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    );
    pub fn daxpy(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
    );
    pub fn qaxpy(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
    );
    pub fn caxpy(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    );
    pub fn zaxpy(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
    );
    pub fn xaxpy(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
    );
    pub fn caxpyc(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    );
    pub fn zaxpyc(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
    );
    pub fn xaxpyc(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
    );
    pub fn scopy(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn dcopy(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn qcopy(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn ccopy(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn zcopy(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn xcopy(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn sswap(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn dswap(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn qswap(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn cswap(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn zswap(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn xswap(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn sasum(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn scasum(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dasum(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qasum(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn dzasum(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxasum(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn ssum(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn scsum(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dsum(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qsum(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn dzsum(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxsum(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn isamax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idamax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqamax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icamax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izamax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixamax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn ismax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idmax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqmax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icmax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izmax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixmax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn isamin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idamin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqamin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icamin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izamin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixamin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn ismin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idmin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqmin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icmin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izmin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixmin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn samax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn damax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qamax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scamax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzamax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxamax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn samin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn damin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qamin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scamin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzamin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxamin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn smax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dmax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qmax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scmax(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzmax(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxmax(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn smin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dmin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qmin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scmin(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzmin(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxmin(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn sscal(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut f32, arg4: *mut blas_int);
    pub fn dscal(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut f64, arg4: *mut blas_int);
    pub fn qscal(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut blas_int);
    pub fn cscal(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut f32, arg4: *mut blas_int);
    pub fn zscal(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut f64, arg4: *mut blas_int);
    pub fn xscal(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut blas_int);
    pub fn csscal(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut f32, arg4: *mut blas_int);
    pub fn zdscal(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut f64, arg4: *mut blas_int);
    pub fn xqscal(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut blas_int);
    pub fn snrm2(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn scnrm2(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dnrm2(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qnrm2(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn dznrm2(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxnrm2(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn srot(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
    );
    pub fn drot(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
    );
    pub fn qrot(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
    );
    pub fn csrot(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
    );
    pub fn zdrot(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
    );
    pub fn xqrot(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
    );
    pub fn srotg(arg1: *mut f32, arg2: *mut f32, arg3: *mut f32, arg4: *mut f32);
    pub fn drotg(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64, arg4: *mut f64);
    pub fn qrotg(arg1: *mut xdouble, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut xdouble);
    pub fn crotg(arg1: *mut f32, arg2: *mut f32, arg3: *mut f32, arg4: *mut f32);
    pub fn zrotg(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64, arg4: *mut f64);
    pub fn xrotg(arg1: *mut xdouble, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut xdouble);
    pub fn srotmg(arg1: *mut f32, arg2: *mut f32, arg3: *mut f32, arg4: *mut f32, arg5: *mut f32);
    pub fn drotmg(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64, arg4: *mut f64, arg5: *mut f64);
    pub fn srotm(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn drotm(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn qrotm(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn sger(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dger(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qger(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn cgeru(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn cgerc(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zgeru(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn zgerc(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xgeru(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn xgerc(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn sbgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut bfloat16,
        arg6: *mut blas_int,
        arg7: *mut bfloat16,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn sgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn cgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn zgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xgemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn strsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn dtrsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn qtrsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn ctrsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn ztrsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn xtrsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn strmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn dtrmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn qtrmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn ctrmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn ztrmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn xtrmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn stpsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn dtpsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn qtpsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn ctpsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn ztpsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xtpsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn stpmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn dtpmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn qtpmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn ctpmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn ztpmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xtpmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn stbmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dtbmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qtbmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ctbmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn ztbmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xtbmv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn stbsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dtbsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qtbsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ctbsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn ztbsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xtbsv(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ssymv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn dsymv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn qsymv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn csymv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zsymv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xsymv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn sspmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dspmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qspmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn cspmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zspmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xspmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ssyr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn dsyr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn qsyr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn csyr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn zsyr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xsyr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn ssyr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dsyr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qsyr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn csyr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zsyr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xsyr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn sspr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn dspr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn qspr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn cspr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn zspr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn xspr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn sspr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
    );
    pub fn dspr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
    );
    pub fn qspr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
    );
    pub fn cspr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
    );
    pub fn zspr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
    );
    pub fn xspr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
    );
    pub fn cher(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn zher(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xher(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn chpr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn zhpr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn xhpr(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn cher2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zher2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xher2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn chpr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
    );
    pub fn zhpr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
    );
    pub fn xhpr2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
    );
    pub fn chemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zhemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xhemv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn chpmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zhpmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xhpmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn snorm(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dnorm(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cnorm(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn znorm(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn sgbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn dgbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn qgbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn cgbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn xgbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn ssbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dsbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qsbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn csbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn zsbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xsbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn chbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn zhbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xhbmv(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn sbgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut bfloat16,
        arg8: *mut blas_int,
        arg9: *mut bfloat16,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn sgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn dgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn qgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn cgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn xgemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn cgemm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgemm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn xgemm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn sgemmt(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn dgemmt(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn cgemmt(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgemmt(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn sge2mm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn dge2mm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn cge2mm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn zge2mm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn strsm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dtrsm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qtrsm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn ctrsm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn ztrsm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xtrsm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn strmm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dtrmm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qtrmm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn ctrmm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn ztrmm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xtrmm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn ssymm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn dsymm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn qsymm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn csymm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zsymm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xsymm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn csymm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zsymm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xsymm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn ssyrk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn dsyrk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn qsyrk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn csyrk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zsyrk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xsyrk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn ssyr2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn dsyr2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn qsyr2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn csyr2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zsyr2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xsyr2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn chemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zhemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xhemm(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn chemm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zhemm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xhemm3m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn cherk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zherk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xherk(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn cher2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zher2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xher2k(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn cher2m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn zher2m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn xher2m(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn sgemt(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn dgemt(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn cgemt(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn zgemt(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn sgema(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn dgema(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn cgema(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn zgema(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn sgems(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn dgems(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn cgems(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn zgems(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn sgemc(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
        arg13: *mut f32,
        arg14: *mut f32,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn dgemc(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
        arg13: *mut f64,
        arg14: *mut f64,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn qgemc(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
        arg13: *mut xdouble,
        arg14: *mut xdouble,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn cgemc(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
        arg13: *mut f32,
        arg14: *mut f32,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn zgemc(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
        arg13: *mut f64,
        arg14: *mut f64,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn xgemc(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
        arg13: *mut xdouble,
        arg14: *mut xdouble,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn sgetf2(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dgetf2(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qgetf2(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn cgetf2(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn zgetf2(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xgetf2(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn sgetrf(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dgetrf(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qgetrf(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn cgetrf(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn zgetrf(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xgetrf(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn slaswp(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn dlaswp(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn qlaswp(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn claswp(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn zlaswp(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn xlaswp(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn sgetrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn dgetrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn qgetrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn cgetrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn zgetrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn xgetrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn sgesv(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn dgesv(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn qgesv(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn cgesv(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn zgesv(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn xgesv(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn spotf2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dpotf2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qpotf2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cpotf2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zpotf2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xpotf2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn spotrf(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dpotrf(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qpotrf(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cpotrf(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zpotrf(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xpotrf(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn spotri(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dpotri(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qpotri(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cpotri(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zpotri(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xpotri(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn spotrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn dpotrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn qpotrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn cpotrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn zpotrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn xpotrs(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn slauu2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dlauu2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qlauu2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn clauu2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zlauu2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xlauu2(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn slauum(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dlauum(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qlauum(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn clauum(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zlauum(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xlauum(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn strti2(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dtrti2(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qtrti2(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ctrti2(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ztrti2(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xtrti2(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn strtri(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dtrtri(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qtrtri(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ctrtri(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ztrtri(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xtrtri(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn slamch(arg1: *mut c_char) -> f32;
    pub fn dlamch(arg1: *mut c_char) -> f64;
    pub fn qlamch(arg1: *mut c_char) -> xdouble;
    pub fn slamc3(arg1: *mut f32, arg2: *mut f32) -> f32;
    pub fn dlamc3(arg1: *mut f64, arg2: *mut f64) -> f64;
    pub fn qlamc3(arg1: *mut xdouble, arg2: *mut xdouble) -> xdouble;
    pub fn saxpby(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn daxpby(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn caxpby(
        arg1: *mut blas_int,
        arg2: *mut c_void,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut c_void,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn zaxpby(
        arg1: *mut blas_int,
        arg2: *mut c_void,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut c_void,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn somatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn domatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn comatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zomatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn simatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn dimatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn cimatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn zimatcopy(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn sgeadd(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn dgeadd(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn cgeadd(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn zgeadd(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
}
