//! FFI function declarations for non-dynamic-loading.
//!
//! This file is generated automatically.

use super::*;

unsafe extern "C" {
    pub fn xerbla_(arg1: *mut c_char, info: *mut blas_int, arg2: blas_int) -> c_int;
    pub fn openblas_set_num_threads_(arg1: *mut c_int);
    pub static mut openblas_threads_callback_: openblas_threads_callback;
    pub fn sdot_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> f32;
    pub fn sdsdot_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    ) -> f32;
    pub fn dsdot_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> f64;
    pub fn ddot_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> f64;
    pub fn qdot_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    ) -> xdouble;
    pub fn sbdot_(
        arg1: *mut blas_int,
        arg2: *mut bfloat16,
        arg3: *mut blas_int,
        arg4: *mut bfloat16,
        arg5: *mut blas_int,
    ) -> f32;
    pub fn sbstobf16_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut bfloat16,
        arg5: *mut blas_int,
    );
    pub fn sbdtobf16_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut bfloat16,
        arg5: *mut blas_int,
    );
    pub fn sbf16tos_(
        arg1: *mut blas_int,
        arg2: *mut bfloat16,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn dbf16tod_(
        arg1: *mut blas_int,
        arg2: *mut bfloat16,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn cdotu_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> openblas_complex_float;
    pub fn cdotc_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> openblas_complex_float;
    pub fn zdotu_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> openblas_complex_double;
    pub fn zdotc_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> openblas_complex_double;
    pub fn xdotu_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    ) -> openblas_complex_xdouble;
    pub fn xdotc_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    ) -> openblas_complex_xdouble;
    pub fn saxpy_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    );
    pub fn daxpy_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
    );
    pub fn qaxpy_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
    );
    pub fn caxpy_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    );
    pub fn zaxpy_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
    );
    pub fn xaxpy_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
    );
    pub fn caxpyc_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
    );
    pub fn zaxpyc_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
    );
    pub fn xaxpyc_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
    );
    pub fn scopy_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn dcopy_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn qcopy_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn ccopy_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn zcopy_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn xcopy_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn sswap_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn dswap_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn qswap_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn cswap_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    );
    pub fn zswap_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    );
    pub fn xswap_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
    );
    pub fn sasum_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn scasum_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dasum_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qasum_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn dzasum_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxasum_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn ssum_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn scsum_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dsum_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qsum_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn dzsum_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxsum_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn isamax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idamax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqamax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icamax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izamax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixamax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn ismax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idmax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqmax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icmax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izmax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixmax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn isamin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idamin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqamin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icamin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izamin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixamin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn ismin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn idmin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn iqmin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn icmin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> blas_int;
    pub fn izmin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> blas_int;
    pub fn ixmin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> blas_int;
    pub fn samax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn damax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qamax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scamax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzamax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxamax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn samin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn damin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qamin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scamin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzamin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxamin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn smax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dmax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qmax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scmax_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzmax_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxmax_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn smin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dmin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qmin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn scmin_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dzmin_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxmin_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn sscal_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut f32, arg4: *mut blas_int);
    pub fn dscal_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut f64, arg4: *mut blas_int);
    pub fn qscal_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut blas_int);
    pub fn cscal_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut f32, arg4: *mut blas_int);
    pub fn zscal_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut f64, arg4: *mut blas_int);
    pub fn xscal_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut blas_int);
    pub fn csscal_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut f32, arg4: *mut blas_int);
    pub fn zdscal_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut f64, arg4: *mut blas_int);
    pub fn xqscal_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
    );
    pub fn snrm2_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn scnrm2_(arg1: *mut blas_int, arg2: *mut f32, arg3: *mut blas_int) -> f32;
    pub fn dnrm2_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qnrm2_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn dznrm2_(arg1: *mut blas_int, arg2: *mut f64, arg3: *mut blas_int) -> f64;
    pub fn qxnrm2_(arg1: *mut blas_int, arg2: *mut xdouble, arg3: *mut blas_int) -> xdouble;
    pub fn srot_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
    );
    pub fn drot_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
    );
    pub fn qrot_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
    );
    pub fn csrot_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
    );
    pub fn zdrot_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
    );
    pub fn xqrot_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
    );
    pub fn srotg_(arg1: *mut f32, arg2: *mut f32, arg3: *mut f32, arg4: *mut f32);
    pub fn drotg_(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64, arg4: *mut f64);
    pub fn qrotg_(arg1: *mut xdouble, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut xdouble);
    pub fn crotg_(arg1: *mut f32, arg2: *mut f32, arg3: *mut f32, arg4: *mut f32);
    pub fn zrotg_(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64, arg4: *mut f64);
    pub fn xrotg_(arg1: *mut xdouble, arg2: *mut xdouble, arg3: *mut xdouble, arg4: *mut xdouble);
    pub fn srotmg_(arg1: *mut f32, arg2: *mut f32, arg3: *mut f32, arg4: *mut f32, arg5: *mut f32);
    pub fn drotmg_(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64, arg4: *mut f64, arg5: *mut f64);
    pub fn srotm_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn drotm_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn qrotm_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn sger_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dger_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qger_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn cgeru_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn cgerc_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zgeru_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn zgerc_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xgeru_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn xgerc_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn sbgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut bfloat16,
        arg6: *mut blas_int,
        arg7: *mut bfloat16,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn sgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn cgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn zgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xgemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn strsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn dtrsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn qtrsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn ctrsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn ztrsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn xtrsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn strmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn dtrmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn qtrmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn ctrmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn ztrmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn xtrmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
    );
    pub fn stpsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn dtpsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn qtpsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn ctpsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn ztpsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xtpsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn stpmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn dtpmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn qtpmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn ctpmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn ztpmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xtpmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn stbmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dtbmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qtbmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ctbmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn ztbmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xtbmv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn stbsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dtbsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qtbsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ctbsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn ztbsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xtbsv_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ssymv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn dsymv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn qsymv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn csymv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zsymv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xsymv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn sspmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dspmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qspmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn cspmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zspmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xspmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn ssyr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn dsyr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn qsyr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn csyr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn zsyr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xsyr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn ssyr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn dsyr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn qsyr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn csyr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zsyr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xsyr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn sspr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn dspr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn qspr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn cspr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn zspr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn xspr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn sspr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
    );
    pub fn dspr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
    );
    pub fn qspr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
    );
    pub fn cspr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
    );
    pub fn zspr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
    );
    pub fn xspr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
    );
    pub fn cher_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn zher_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn xher_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
    );
    pub fn chpr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
    );
    pub fn zhpr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
    );
    pub fn xhpr_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
    );
    pub fn cher2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zher2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xher2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn chpr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
    );
    pub fn zhpr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
    );
    pub fn xhpr2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
    );
    pub fn chemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zhemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xhemv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn chpmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zhpmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn xhpmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
    );
    pub fn snorm_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dnorm_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cnorm_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn znorm_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn sgbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn dgbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn qgbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn cgbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn xgbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn ssbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dsbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qsbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn csbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn zsbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xsbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn chbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn zhbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xhbmv_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut xdouble,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn sbgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut bfloat16,
        arg8: *mut blas_int,
        arg9: *mut bfloat16,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn sgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn dgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn qgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn cgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn xgemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn cgemm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgemm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn xgemm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    );
    pub fn sgemmt_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn dgemmt_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn cgemmt_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    );
    pub fn zgemmt_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    );
    pub fn sge2mm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn dge2mm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn cge2mm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn zge2mm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn strsm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dtrsm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qtrsm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn ctrsm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn ztrsm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xtrsm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn strmm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn dtrmm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn qtrmm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn ctrmm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut blas_int,
    );
    pub fn ztrmm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut blas_int,
    );
    pub fn xtrmm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut c_char,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut blas_int,
    );
    pub fn ssymm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn dsymm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn qsymm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn csymm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zsymm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xsymm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn csymm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zsymm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xsymm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn ssyrk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn dsyrk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn qsyrk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn csyrk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zsyrk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xsyrk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn ssyr2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn dsyr2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn qsyr2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn csyr2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zsyr2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xsyr2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn chemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zhemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xhemm_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn chemm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zhemm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xhemm3m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn cherk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
    );
    pub fn zherk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
    );
    pub fn xherk_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
    );
    pub fn cher2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
        arg10: *mut f32,
        arg11: *mut f32,
        arg12: *mut blas_int,
    );
    pub fn zher2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
        arg10: *mut f64,
        arg11: *mut f64,
        arg12: *mut blas_int,
    );
    pub fn xher2k_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut xdouble,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut xdouble,
        arg9: *mut blas_int,
        arg10: *mut xdouble,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
    );
    pub fn cher2m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut f32,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn zher2m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut f64,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn xher2m_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut c_char,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut xdouble,
        arg13: *mut blas_int,
    ) -> c_int;
    pub fn sgemt_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn dgemt_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn cgemt_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut f32,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn zgemt_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut f64,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn sgema_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn dgema_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn cgema_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn zgema_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn sgems_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn dgems_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn cgems_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn zgems_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
    ) -> c_int;
    pub fn sgemc_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
        arg13: *mut f32,
        arg14: *mut f32,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn dgemc_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
        arg13: *mut f64,
        arg14: *mut f64,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn qgemc_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
        arg13: *mut xdouble,
        arg14: *mut xdouble,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn cgemc_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut f32,
        arg10: *mut blas_int,
        arg11: *mut f32,
        arg12: *mut blas_int,
        arg13: *mut f32,
        arg14: *mut f32,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn zgemc_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut f64,
        arg10: *mut blas_int,
        arg11: *mut f64,
        arg12: *mut blas_int,
        arg13: *mut f64,
        arg14: *mut f64,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn xgemc_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut xdouble,
        arg10: *mut blas_int,
        arg11: *mut xdouble,
        arg12: *mut blas_int,
        arg13: *mut xdouble,
        arg14: *mut xdouble,
        arg15: *mut blas_int,
    ) -> c_int;
    pub fn sgetf2_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dgetf2_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qgetf2_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn cgetf2_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn zgetf2_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xgetf2_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn sgetrf_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dgetrf_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qgetrf_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn cgetrf_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn zgetrf_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xgetrf_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn slaswp_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn dlaswp_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn qlaswp_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn claswp_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn zlaswp_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn xlaswp_(
        arg1: *mut blas_int,
        arg2: *mut xdouble,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut blas_int,
    ) -> c_int;
    pub fn sgetrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn dgetrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn qgetrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn cgetrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f32,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn zgetrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut f64,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn xgetrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
        arg7: *mut xdouble,
        arg8: *mut blas_int,
        arg9: *mut blas_int,
    ) -> c_int;
    pub fn sgesv_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn dgesv_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn qgesv_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn cgesv_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn zgesv_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn xgesv_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn spotf2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dpotf2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qpotf2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cpotf2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zpotf2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xpotf2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn spotrf_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dpotrf_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qpotrf_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cpotrf_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zpotrf_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xpotrf_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn spotri_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dpotri_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qpotri_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn cpotri_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zpotri_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xpotri_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn spotrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn dpotrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn qpotrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn cpotrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn zpotrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn xpotrs_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut xdouble,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    ) -> c_int;
    pub fn slauu2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dlauu2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qlauu2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn clauu2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zlauu2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xlauu2_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn slauum_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn dlauum_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn qlauum_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn clauum_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn zlauum_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn xlauum_(
        arg1: *mut c_char,
        arg2: *mut blas_int,
        arg3: *mut xdouble,
        arg4: *mut blas_int,
        arg5: *mut blas_int,
    ) -> c_int;
    pub fn strti2_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dtrti2_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qtrti2_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ctrti2_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ztrti2_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xtrti2_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn strtri_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn dtrtri_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn qtrtri_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ctrtri_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn ztrtri_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn xtrtri_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut xdouble,
        arg5: *mut blas_int,
        arg6: *mut blas_int,
    ) -> c_int;
    pub fn slamch_(arg1: *mut c_char) -> f32;
    pub fn dlamch_(arg1: *mut c_char) -> f64;
    pub fn qlamch_(arg1: *mut c_char) -> xdouble;
    pub fn slamc3_(arg1: *mut f32, arg2: *mut f32) -> f32;
    pub fn dlamc3_(arg1: *mut f64, arg2: *mut f64) -> f64;
    pub fn qlamc3_(arg1: *mut xdouble, arg2: *mut xdouble) -> xdouble;
    pub fn saxpby_(
        arg1: *mut blas_int,
        arg2: *mut f32,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn daxpby_(
        arg1: *mut blas_int,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn caxpby_(
        arg1: *mut blas_int,
        arg2: *mut c_void,
        arg3: *mut f32,
        arg4: *mut blas_int,
        arg5: *mut c_void,
        arg6: *mut f32,
        arg7: *mut blas_int,
    );
    pub fn zaxpby_(
        arg1: *mut blas_int,
        arg2: *mut c_void,
        arg3: *mut f64,
        arg4: *mut blas_int,
        arg5: *mut c_void,
        arg6: *mut f64,
        arg7: *mut blas_int,
    );
    pub fn somatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn domatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn comatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut f32,
        arg9: *mut blas_int,
    );
    pub fn zomatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut f64,
        arg9: *mut blas_int,
    );
    pub fn simatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn dimatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn cimatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f32,
        arg6: *mut f32,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn zimatcopy_(
        arg1: *mut c_char,
        arg2: *mut c_char,
        arg3: *mut blas_int,
        arg4: *mut blas_int,
        arg5: *mut f64,
        arg6: *mut f64,
        arg7: *mut blas_int,
        arg8: *mut blas_int,
    );
    pub fn sgeadd_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn dgeadd_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
    pub fn cgeadd_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f32,
        arg4: *mut f32,
        arg5: *mut blas_int,
        arg6: *mut f32,
        arg7: *mut f32,
        arg8: *mut blas_int,
    );
    pub fn zgeadd_(
        arg1: *mut blas_int,
        arg2: *mut blas_int,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: *mut blas_int,
        arg6: *mut f64,
        arg7: *mut f64,
        arg8: *mut blas_int,
    );
}
