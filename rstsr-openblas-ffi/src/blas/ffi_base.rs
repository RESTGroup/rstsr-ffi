//! Base of current FFI.
//!
//! Declaration of types, enums, cargo feature controls, etc.
//!
//! This file is generated automatically.

pub(crate) use core::ffi::{c_char, c_int, c_void};

#[cfg(not(feature = "ilp64"))]
pub type blas_int = i32;
#[cfg(feature = "ilp64")]
pub type blas_int = i64;

#[cfg(all(feature = "quad_precision", not(feature = "ex_precision")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub x: [::core::os::raw::c_ulong; 2usize],
}
#[cfg(all(feature = "ex_precision", not(feature = "quad_precision")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub x: u128,
}
#[cfg(all(not(feature = "quad_precision"), not(feature = "ex_precision")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub x: f64,
}
// This is a workaround for cargo feature conflict
#[cfg(all(feature = "quad_precision", feature = "ex_precision"))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xdouble {
    pub _phantom: (),
}

/* automatically generated by rust-bindgen 0.71.1 */

pub type bfloat16 = u16;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openblas_complex_float {
    pub real: f32,
    pub imag: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openblas_complex_double {
    pub real: f64,
    pub imag: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct openblas_complex_xdouble {
    pub real: xdouble,
    pub imag: xdouble,
}
pub type openblas_dojob_callback =
    Option<extern "C" fn(thread_num: c_int, jobdata: *mut c_void, dojob_data: c_int)>;
pub type openblas_threads_callback = Option<
    extern "C" fn(
        sync: c_int,
        dojob: openblas_dojob_callback,
        numjobs: c_int,
        jobdata_elsize: usize,
        jobdata: *mut c_void,
        dojob_data: c_int,
    ),
>;
