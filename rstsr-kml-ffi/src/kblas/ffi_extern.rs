//! FFI function declarations for non-dynamic-loading.
//!
//! This file is generated automatically.

use super::*;

unsafe extern "C" {
    pub fn BlasSetNumThreads(numThreads: c_int);
    pub fn BlasSetNumThreadsLocal(numThreadsLocal: c_int);
    pub fn BlasGetNumThreads() -> c_int;
    pub fn BlasGetNumThreadsLocal() -> c_int;
    pub fn BlasGetNumProcs() -> c_int;
    pub fn BlasGetParallel() -> c_int;
    pub fn KBLASGetVersion(ver: *mut KBLASVersion) -> c_int;
    pub fn cblas_sdsdot(
        n: blas_int,
        alpha: f32,
        x: *const f32,
        incX: blas_int,
        y: *const f32,
        incY: blas_int,
    ) -> f32;
    pub fn cblas_dsdot(
        n: blas_int,
        x: *const f32,
        incX: blas_int,
        y: *const f32,
        incY: blas_int,
    ) -> f64;
    pub fn cblas_sdot(
        n: blas_int,
        x: *const f32,
        incX: blas_int,
        y: *const f32,
        incY: blas_int,
    ) -> f32;
    pub fn cblas_ddot(
        n: blas_int,
        x: *const f64,
        incX: blas_int,
        y: *const f64,
        incY: blas_int,
    ) -> f64;
    pub fn cblas_cdotu(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
    ) -> blas_complex_float;
    pub fn cblas_cdotc(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
    ) -> blas_complex_float;
    pub fn cblas_zdotu(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
    ) -> blas_complex_double;
    pub fn cblas_zdotc(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
    ) -> blas_complex_double;
    pub fn cblas_cdotu_sub(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
        ret: *mut c_void,
    );
    pub fn cblas_cdotc_sub(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
        ret: *mut c_void,
    );
    pub fn cblas_zdotu_sub(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
        ret: *mut c_void,
    );
    pub fn cblas_zdotc_sub(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *const c_void,
        incY: blas_int,
        ret: *mut c_void,
    );
    pub fn cblas_sasum(n: blas_int, x: *const f32, incX: blas_int) -> f32;
    pub fn cblas_dasum(n: blas_int, x: *const f64, incX: blas_int) -> f64;
    pub fn cblas_scasum(n: blas_int, x: *const c_void, incX: blas_int) -> f32;
    pub fn cblas_dzasum(n: blas_int, x: *const c_void, incX: blas_int) -> f64;
    pub fn cblas_snrm2(n: blas_int, x: *const f32, incX: blas_int) -> f32;
    pub fn cblas_dnrm2(n: blas_int, x: *const f64, incX: blas_int) -> f64;
    pub fn cblas_scnrm2(n: blas_int, x: *const c_void, incX: blas_int) -> f32;
    pub fn cblas_dznrm2(n: blas_int, x: *const c_void, incX: blas_int) -> f64;
    pub fn cblas_isamax(n: blas_int, x: *const f32, incX: blas_int) -> usize;
    pub fn cblas_idamax(n: blas_int, x: *const f64, incX: blas_int) -> usize;
    pub fn cblas_icamax(n: blas_int, x: *const c_void, incX: blas_int) -> usize;
    pub fn cblas_izamax(n: blas_int, x: *const c_void, incX: blas_int) -> usize;
    pub fn cblas_isamin(n: blas_int, x: *const f32, incX: blas_int) -> usize;
    pub fn cblas_idamin(n: blas_int, x: *const f64, incX: blas_int) -> usize;
    pub fn cblas_icamin(n: blas_int, x: *const c_void, incX: blas_int) -> usize;
    pub fn cblas_izamin(n: blas_int, x: *const c_void, incX: blas_int) -> usize;
    pub fn cblas_saxpy(
        n: blas_int,
        alpha: f32,
        x: *const f32,
        incX: blas_int,
        y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_daxpy(
        n: blas_int,
        alpha: f64,
        x: *const f64,
        incX: blas_int,
        y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_caxpy(
        n: blas_int,
        alpha: *const c_void,
        x: *const c_void,
        incX: blas_int,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zaxpy(
        n: blas_int,
        alpha: *const c_void,
        x: *const c_void,
        incX: blas_int,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_caxpyc(
        n: blas_int,
        alpha: *const c_void,
        x: *const c_void,
        incX: blas_int,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zaxpyc(
        n: blas_int,
        alpha: *const c_void,
        x: *const c_void,
        incX: blas_int,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_somatcopy(
        cblasOrder: CBLAS_ORDER,
        cblasTrans: CBLAS_TRANSPOSE,
        crows: blas_int,
        ccols: blas_int,
        calpha: f32,
        a: *const f32,
        clda: blas_int,
        b: *mut f32,
        cldb: blas_int,
    );
    pub fn cblas_domatcopy(
        cblasOrder: CBLAS_ORDER,
        cblasTrans: CBLAS_TRANSPOSE,
        crows: blas_int,
        ccols: blas_int,
        calpha: f64,
        a: *const f64,
        clda: blas_int,
        b: *mut f64,
        cldb: blas_int,
    );
    pub fn cblas_comatcopy(
        cblasOrder: CBLAS_ORDER,
        cblasTrans: CBLAS_TRANSPOSE,
        crows: blas_int,
        ccols: blas_int,
        calpha: *const f32,
        a: *const f32,
        clda: blas_int,
        b: *mut f32,
        cldb: blas_int,
    );
    pub fn cblas_zomatcopy(
        cblasOrder: CBLAS_ORDER,
        cblasTrans: CBLAS_TRANSPOSE,
        crows: blas_int,
        ccols: blas_int,
        calpha: *const f64,
        a: *const f64,
        clda: blas_int,
        b: *mut f64,
        cldb: blas_int,
    );
    pub fn cblas_simatcopy(
        ordering: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        rows: blas_int,
        cols: blas_int,
        alpha: f32,
        AB: *mut f32,
        lda: blas_int,
        ldb: blas_int,
    );
    pub fn cblas_dimatcopy(
        ordering: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        rows: blas_int,
        cols: blas_int,
        alpha: f64,
        AB: *mut f64,
        lda: blas_int,
        ldb: blas_int,
    );
    pub fn cblas_cimatcopy(
        ordering: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        rows: blas_int,
        cols: blas_int,
        alpha: *const f32,
        AB: *mut f32,
        lda: blas_int,
        ldb: blas_int,
    );
    pub fn cblas_zimatcopy(
        ordering: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        rows: blas_int,
        cols: blas_int,
        alpha: *const f64,
        AB: *mut f64,
        lda: blas_int,
        ldb: blas_int,
    );
    pub fn cblas_simatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dimatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_cimatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_zimatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_somatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        beta: f32,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_domatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        beta: f64,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_comatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        beta: *const f32,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_zomatadd(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        beta: *const f64,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_simatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dimatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_cimatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_zimatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_somatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        beta: f32,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_domatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        beta: f64,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_comatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        beta: *const f32,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_zomatsub(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        beta: *const f64,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_simatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dimatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_cimatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_zimatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_somatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_domatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_comatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_chomatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f16,
        a: *mut f16,
        lda: blas_int,
        b: *mut f16,
        ldb: blas_int,
        c: *mut f16,
        ldc: blas_int,
    );
    pub fn cblas_zomatmul(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_simatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dimatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_cimatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        bc: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_zimatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        bc: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_somatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *mut f32,
        lda: blas_int,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_domatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *mut f64,
        lda: blas_int,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_comatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f32,
        a: *mut f32,
        lda: blas_int,
        b: *mut f32,
        ldb: blas_int,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_zomatdiv(
        ordering: CBLAS_ORDER,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const f64,
        a: *mut f64,
        lda: blas_int,
        b: *mut f64,
        ldb: blas_int,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_scopy(n: blas_int, x: *const f32, incX: blas_int, y: *mut f32, incY: blas_int);
    pub fn cblas_dcopy(n: blas_int, x: *const f64, incX: blas_int, y: *mut f64, incY: blas_int);
    pub fn cblas_ccopy(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zcopy(
        n: blas_int,
        x: *const c_void,
        incX: blas_int,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_sswap(n: blas_int, x: *mut f32, incX: blas_int, y: *mut f32, incY: blas_int);
    pub fn cblas_dswap(n: blas_int, x: *mut f64, incX: blas_int, y: *mut f64, incY: blas_int);
    pub fn cblas_cswap(n: blas_int, x: *mut c_void, incX: blas_int, y: *mut c_void, incY: blas_int);
    pub fn cblas_zswap(n: blas_int, x: *mut c_void, incX: blas_int, y: *mut c_void, incY: blas_int);
    pub fn cblas_srotg(a: *mut f32, b: *mut f32, c: *mut f32, s: *mut f32);
    pub fn cblas_drotg(a: *mut f64, b: *mut f64, c: *mut f64, s: *mut f64);
    pub fn cblas_srot(
        N: blas_int,
        X: *mut f32,
        incX: blas_int,
        Y: *mut f32,
        incY: blas_int,
        c: f32,
        s: f32,
    );
    pub fn cblas_drot(
        N: blas_int,
        X: *mut f64,
        incX: blas_int,
        Y: *mut f64,
        incY: blas_int,
        c: f64,
        s: f64,
    );
    pub fn cblas_csrot(
        N: blas_int,
        X: *mut f32,
        incX: blas_int,
        Y: *mut f32,
        incY: blas_int,
        c: f32,
        s: f32,
    );
    pub fn cblas_zdrot(
        N: blas_int,
        X: *mut f64,
        incX: blas_int,
        Y: *mut f64,
        incY: blas_int,
        c: f64,
        s: f64,
    );
    pub fn cblas_srotmg(d1: *mut f32, d2: *mut f32, b1: *mut f32, b2: f32, P: *mut f32);
    pub fn cblas_drotmg(d1: *mut f64, d2: *mut f64, b1: *mut f64, b2: f64, P: *mut f64);
    pub fn cblas_srotm(
        N: blas_int,
        X: *mut f32,
        incX: blas_int,
        Y: *mut f32,
        incY: blas_int,
        P: *const f32,
    );
    pub fn cblas_drotm(
        N: blas_int,
        X: *mut f64,
        incX: blas_int,
        Y: *mut f64,
        incY: blas_int,
        P: *const f64,
    );
    pub fn cblas_sscal(N: blas_int, alpha: f32, X: *mut f32, incX: blas_int);
    pub fn cblas_dscal(N: blas_int, alpha: f64, X: *mut f64, incX: blas_int);
    pub fn cblas_cscal(N: blas_int, alpha: *const c_void, X: *mut c_void, incX: blas_int);
    pub fn cblas_zscal(N: blas_int, alpha: *const c_void, X: *mut c_void, incX: blas_int);
    pub fn cblas_csscal(N: blas_int, alpha: f32, X: *mut c_void, incX: blas_int);
    pub fn cblas_zdscal(N: blas_int, alpha: f64, X: *mut c_void, incX: blas_int);
    pub fn cblas_sgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f32,
        a: *const f32,
        lda: blas_int,
        x: *const f32,
        incX: blas_int,
        beta: f32,
        y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_dgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: f64,
        a: *const f64,
        lda: blas_int,
        x: *const f64,
        incX: blas_int,
        beta: f64,
        y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_cgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const c_void,
        a: *const c_void,
        lda: blas_int,
        x: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zgemv(
        order: CBLAS_ORDER,
        trans: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        alpha: *const c_void,
        a: *const c_void,
        lda: blas_int,
        x: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_sger(
        order: CBLAS_ORDER,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
        A: *mut f32,
        lda: blas_int,
    );
    pub fn cblas_dger(
        order: CBLAS_ORDER,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
        A: *mut f64,
        lda: blas_int,
    );
    pub fn cblas_cgeru(
        order: CBLAS_ORDER,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_cgerc(
        order: CBLAS_ORDER,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zgeru(
        order: CBLAS_ORDER,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zgerc(
        order: CBLAS_ORDER,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_strsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dtrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_ctrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztrsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_strmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dtrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_ctrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztrmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ssyr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        A: *mut f32,
        lda: blas_int,
    );
    pub fn cblas_dsyr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        A: *mut f64,
        lda: blas_int,
    );
    pub fn cblas_cher(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zher(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_ssyr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
        A: *mut f32,
        lda: blas_int,
    );
    pub fn cblas_dsyr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
        A: *mut f64,
        lda: blas_int,
    );
    pub fn cblas_cher2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_zher2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        A: *mut c_void,
        lda: blas_int,
    );
    pub fn cblas_sgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_dgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_cgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zgbmv(
        order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        KL: blas_int,
        KU: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_ssbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_dsbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_stbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dtbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_ctbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_stbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f32,
        lda: blas_int,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dtbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const f64,
        lda: blas_int,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_ctbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztbsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        K: blas_int,
        A: *const c_void,
        lda: blas_int,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_stpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f32,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dtpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f64,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_ctpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_stpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f32,
        X: *mut f32,
        incX: blas_int,
    );
    pub fn cblas_dtpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const f64,
        X: *mut f64,
        incX: blas_int,
    );
    pub fn cblas_ctpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ztpsv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        N: blas_int,
        Ap: *const c_void,
        X: *mut c_void,
        incX: blas_int,
    );
    pub fn cblas_ssymv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_dsymv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_chemv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zhemv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_sspmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        Ap: *const f32,
        X: *const f32,
        incX: blas_int,
        beta: f32,
        Y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_dspmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        Ap: *const f64,
        X: *const f64,
        incX: blas_int,
        beta: f64,
        Y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_sspr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Ap: *mut f32,
    );
    pub fn cblas_dspr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Ap: *mut f64,
    );
    pub fn cblas_chpr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
    );
    pub fn cblas_zhpr(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const c_void,
        incX: blas_int,
        A: *mut c_void,
    );
    pub fn cblas_sspr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f32,
        X: *const f32,
        incX: blas_int,
        Y: *const f32,
        incY: blas_int,
        A: *mut f32,
    );
    pub fn cblas_dspr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: f64,
        X: *const f64,
        incX: blas_int,
        Y: *const f64,
        incY: blas_int,
        A: *mut f64,
    );
    pub fn cblas_chpr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        Ap: *mut c_void,
    );
    pub fn cblas_zhpr2(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        X: *const c_void,
        incX: blas_int,
        Y: *const c_void,
        incY: blas_int,
        Ap: *mut c_void,
    );
    pub fn cblas_chbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zhbmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_chpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zhpmv(
        order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        N: blas_int,
        alpha: *const c_void,
        Ap: *const c_void,
        X: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        Y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_sgemm(
        order: CBLAS_ORDER,
        transA: CBLAS_TRANSPOSE,
        transB: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        k: blas_int,
        alpha: f32,
        a: *const f32,
        lda: blas_int,
        b: *const f32,
        ldb: blas_int,
        beta: f32,
        c: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_dgemm(
        order: CBLAS_ORDER,
        transA: CBLAS_TRANSPOSE,
        transB: CBLAS_TRANSPOSE,
        m: blas_int,
        n: blas_int,
        k: blas_int,
        alpha: f64,
        a: *const f64,
        lda: blas_int,
        b: *const f64,
        ldb: blas_int,
        beta: f64,
        c: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_cgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zgemm(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_gemm_s8s8s32(
        layout: CBLAS_LAYOUT,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        offsetc: CBLAS_OFFSET,
        m: blas_int,
        n: blas_int,
        k: blas_int,
        alpha: f32,
        a: *const BLASINT8,
        lda: blas_int,
        oa: BLASINT8,
        b: *const BLASINT8,
        ldb: blas_int,
        ob: BLASINT8,
        beta: f32,
        c: *mut i32,
        ldc: blas_int,
        oc: *const i32,
    );
    pub fn cblas_gemm_u8u8s32(
        layout: CBLAS_LAYOUT,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        offsetc: CBLAS_OFFSET,
        m: blas_int,
        n: blas_int,
        k: blas_int,
        alpha: f32,
        a: *const BLASUINT8,
        lda: blas_int,
        oa: BLASINT8,
        b: *const BLASUINT8,
        ldb: blas_int,
        ob: BLASINT8,
        beta: f32,
        c: *mut i32,
        ldc: blas_int,
        oc: *const i32,
    );
    pub fn cblas_gemm_s8u8s32(
        layout: CBLAS_LAYOUT,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        offsetc: CBLAS_OFFSET,
        m: blas_int,
        n: blas_int,
        k: blas_int,
        alpha: f32,
        a: *const BLASINT8,
        lda: blas_int,
        oa: BLASINT8,
        b: *const BLASUINT8,
        ldb: blas_int,
        ob: BLASINT8,
        beta: f32,
        c: *mut i32,
        ldc: blas_int,
        oc: *const i32,
    );
    pub fn cblas_gemm_u8s8s32(
        layout: CBLAS_LAYOUT,
        transa: CBLAS_TRANSPOSE,
        transb: CBLAS_TRANSPOSE,
        offsetc: CBLAS_OFFSET,
        m: blas_int,
        n: blas_int,
        k: blas_int,
        alpha: f32,
        a: *const BLASUINT8,
        lda: blas_int,
        oa: BLASINT8,
        b: *const BLASINT8,
        ldb: blas_int,
        ob: BLASINT8,
        beta: f32,
        c: *mut i32,
        ldc: blas_int,
        oc: *const i32,
    );
    pub fn cblas_cgemm3m(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zgemm3m(
        Order: CBLAS_ORDER,
        TransA: CBLAS_TRANSPOSE,
        TransB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_hgemm(
        order: CBLAS_ORDER,
        transA: CBLAS_TRANSPOSE,
        transB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: f16,
        A: *const f16,
        lda: blas_int,
        B: *const f16,
        ldb: blas_int,
        beta: f16,
        C: *mut f16,
        ldc: blas_int,
    );
    pub fn cblas_shgemm(
        order: CBLAS_ORDER,
        transA: CBLAS_TRANSPOSE,
        transB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f16,
        lda: blas_int,
        B: *const f16,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_chgemm(
        order: CBLAS_ORDER,
        transA: CBLAS_TRANSPOSE,
        transB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_cshgemm(
        order: CBLAS_ORDER,
        transA: CBLAS_TRANSPOSE,
        transB: CBLAS_TRANSPOSE,
        M: blas_int,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_ssymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *const f32,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_dsymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *const f64,
        ldb: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_csymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zsymm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_ssyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_dsyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_csyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zsyrk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_ssyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *const f32,
        ldb: blas_int,
        beta: f32,
        C: *mut f32,
        ldc: blas_int,
    );
    pub fn cblas_dsyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *const f64,
        ldb: blas_int,
        beta: f64,
        C: *mut f64,
        ldc: blas_int,
    );
    pub fn cblas_csyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zsyr2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_strmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dtrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_ctrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_ztrmm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_strsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f32,
        A: *const f32,
        lda: blas_int,
        B: *mut f32,
        ldb: blas_int,
    );
    pub fn cblas_dtrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: f64,
        A: *const f64,
        lda: blas_int,
        B: *mut f64,
        ldb: blas_int,
    );
    pub fn cblas_ctrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_ztrsm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        TransA: CBLAS_TRANSPOSE,
        Diag: CBLAS_DIAG,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *mut c_void,
        ldb: blas_int,
    );
    pub fn cblas_chemm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zhemm(
        Order: CBLAS_ORDER,
        Side: CBLAS_SIDE,
        Uplo: CBLAS_UPLO,
        M: blas_int,
        N: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: *const c_void,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_cherk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f32,
        A: *const c_void,
        lda: blas_int,
        beta: f32,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zherk(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: f64,
        A: *const c_void,
        lda: blas_int,
        beta: f64,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_cher2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: f32,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_zher2k(
        Order: CBLAS_ORDER,
        Uplo: CBLAS_UPLO,
        Trans: CBLAS_TRANSPOSE,
        N: blas_int,
        K: blas_int,
        alpha: *const c_void,
        A: *const c_void,
        lda: blas_int,
        B: *const c_void,
        ldb: blas_int,
        beta: f64,
        C: *mut c_void,
        ldc: blas_int,
    );
    pub fn cblas_xerbla(p: blas_int, rout: *const c_char, form: *const c_char, ...);
    pub fn cblas_saxpby(
        n: blas_int,
        alpha: f32,
        x: *const f32,
        incX: blas_int,
        beta: f32,
        y: *mut f32,
        incY: blas_int,
    );
    pub fn cblas_daxpby(
        n: blas_int,
        alpha: f64,
        x: *const f64,
        incX: blas_int,
        beta: f64,
        y: *mut f64,
        incY: blas_int,
    );
    pub fn cblas_caxpby(
        n: blas_int,
        alpha: *const c_void,
        x: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        y: *mut c_void,
        incY: blas_int,
    );
    pub fn cblas_zaxpby(
        n: blas_int,
        alpha: *const c_void,
        x: *const c_void,
        incX: blas_int,
        beta: *const c_void,
        y: *mut c_void,
        incY: blas_int,
    );
}
