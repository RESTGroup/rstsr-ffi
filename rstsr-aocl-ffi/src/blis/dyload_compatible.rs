//! Compatible implementation for dynamic-loading.
//!
//! This requires custom `dyload_lib` definition in mod.rs, or visible from
//! current layer of module.
//!
//! This file is generated automatically.

use super::*;

pub unsafe fn bli_pthread_create(
    thread: *mut bli_pthread_t,
    attr: *const bli_pthread_attr_t,
    start_routine: Option<extern "C" fn(arg1: *mut c_void) -> *mut c_void>,
    arg: *mut c_void,
) -> c_int {
    dyload_lib().bli_pthread_create.unwrap()(thread, attr, start_routine, arg)
}

pub unsafe fn bli_pthread_join(thread: bli_pthread_t, retval: *mut *mut c_void) -> c_int {
    dyload_lib().bli_pthread_join.unwrap()(thread, retval)
}

pub unsafe fn bli_pthread_mutex_init(
    mutex: *mut bli_pthread_mutex_t,
    attr: *const bli_pthread_mutexattr_t,
) -> c_int {
    dyload_lib().bli_pthread_mutex_init.unwrap()(mutex, attr)
}

pub unsafe fn bli_pthread_mutex_destroy(mutex: *mut bli_pthread_mutex_t) -> c_int {
    dyload_lib().bli_pthread_mutex_destroy.unwrap()(mutex)
}

pub unsafe fn bli_pthread_mutex_lock(mutex: *mut bli_pthread_mutex_t) -> c_int {
    dyload_lib().bli_pthread_mutex_lock.unwrap()(mutex)
}

pub unsafe fn bli_pthread_mutex_trylock(mutex: *mut bli_pthread_mutex_t) -> c_int {
    dyload_lib().bli_pthread_mutex_trylock.unwrap()(mutex)
}

pub unsafe fn bli_pthread_mutex_unlock(mutex: *mut bli_pthread_mutex_t) -> c_int {
    dyload_lib().bli_pthread_mutex_unlock.unwrap()(mutex)
}

pub unsafe fn bli_pthread_cond_init(
    cond: *mut bli_pthread_cond_t,
    attr: *const bli_pthread_condattr_t,
) -> c_int {
    dyload_lib().bli_pthread_cond_init.unwrap()(cond, attr)
}

pub unsafe fn bli_pthread_cond_destroy(cond: *mut bli_pthread_cond_t) -> c_int {
    dyload_lib().bli_pthread_cond_destroy.unwrap()(cond)
}

pub unsafe fn bli_pthread_cond_wait(
    cond: *mut bli_pthread_cond_t,
    mutex: *mut bli_pthread_mutex_t,
) -> c_int {
    dyload_lib().bli_pthread_cond_wait.unwrap()(cond, mutex)
}

pub unsafe fn bli_pthread_cond_broadcast(cond: *mut bli_pthread_cond_t) -> c_int {
    dyload_lib().bli_pthread_cond_broadcast.unwrap()(cond)
}

pub unsafe fn bli_pthread_once(once: *mut bli_pthread_once_t, init: Option<extern "C" fn()>) {
    dyload_lib().bli_pthread_once.unwrap()(once, init)
}

pub unsafe fn bli_pthread_barrier_init(
    barrier: *mut bli_pthread_barrier_t,
    attr: *const bli_pthread_barrierattr_t,
    count: c_uint,
) -> c_int {
    dyload_lib().bli_pthread_barrier_init.unwrap()(barrier, attr, count)
}

pub unsafe fn bli_pthread_barrier_destroy(barrier: *mut bli_pthread_barrier_t) -> c_int {
    dyload_lib().bli_pthread_barrier_destroy.unwrap()(barrier)
}

pub unsafe fn bli_pthread_barrier_wait(barrier: *mut bli_pthread_barrier_t) -> c_int {
    dyload_lib().bli_pthread_barrier_wait.unwrap()(barrier)
}

pub unsafe fn bli_thrcomm_create(rntm: *mut rntm_t, n_threads: dim_t) -> *mut thrcomm_t {
    dyload_lib().bli_thrcomm_create.unwrap()(rntm, n_threads)
}

pub unsafe fn bli_thrcomm_free(rntm: *mut rntm_t, comm: *mut thrcomm_t) {
    dyload_lib().bli_thrcomm_free.unwrap()(rntm, comm)
}

pub unsafe fn bli_thrcomm_init(n_threads: dim_t, comm: *mut thrcomm_t) {
    dyload_lib().bli_thrcomm_init.unwrap()(n_threads, comm)
}

pub unsafe fn bli_thrcomm_cleanup(comm: *mut thrcomm_t) {
    dyload_lib().bli_thrcomm_cleanup.unwrap()(comm)
}

pub unsafe fn bli_thrcomm_barrier(thread_id: dim_t, comm: *mut thrcomm_t) {
    dyload_lib().bli_thrcomm_barrier.unwrap()(thread_id, comm)
}

pub unsafe fn bli_thrcomm_bcast(
    inside_id: dim_t,
    to_send: *mut c_void,
    comm: *mut thrcomm_t,
) -> *mut c_void {
    dyload_lib().bli_thrcomm_bcast.unwrap()(inside_id, to_send, comm)
}

pub unsafe fn bli_thrcomm_barrier_atomic(thread_id: dim_t, comm: *mut thrcomm_t) {
    dyload_lib().bli_thrcomm_barrier_atomic.unwrap()(thread_id, comm)
}

pub unsafe fn bli_thrinfo_create(
    rntm: *mut rntm_t,
    ocomm: *mut thrcomm_t,
    ocomm_id: dim_t,
    n_way: dim_t,
    work_id: dim_t,
    free_comm: bool,
    bszid: bszid_t,
    sub_node: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_create.unwrap()(
        rntm, ocomm, ocomm_id, n_way, work_id, free_comm, bszid, sub_node,
    )
}

pub unsafe fn bli_thrinfo_init(
    thread: *mut thrinfo_t,
    ocomm: *mut thrcomm_t,
    ocomm_id: dim_t,
    n_way: dim_t,
    work_id: dim_t,
    free_comm: bool,
    bszid: bszid_t,
    sub_node: *mut thrinfo_t,
) {
    dyload_lib().bli_thrinfo_init.unwrap()(
        thread, ocomm, ocomm_id, n_way, work_id, free_comm, bszid, sub_node,
    )
}

pub unsafe fn bli_thrinfo_init_single(thread: *mut thrinfo_t) {
    dyload_lib().bli_thrinfo_init_single.unwrap()(thread)
}

pub unsafe fn bli_thrinfo_free(rntm: *mut rntm_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_thrinfo_free.unwrap()(rntm, thread)
}

pub unsafe fn bli_thrinfo_grow(rntm: *mut rntm_t, cntl: *mut cntl_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_thrinfo_grow.unwrap()(rntm, cntl, thread)
}

pub unsafe fn bli_thrinfo_rgrow(
    rntm: *mut rntm_t,
    cntl_par: *mut cntl_t,
    cntl_cur: *mut cntl_t,
    thread_par: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_rgrow.unwrap()(rntm, cntl_par, cntl_cur, thread_par)
}

pub unsafe fn bli_thrinfo_create_for_cntl(
    rntm: *mut rntm_t,
    cntl_par: *mut cntl_t,
    cntl_chl: *mut cntl_t,
    thread_par: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_create_for_cntl.unwrap()(rntm, cntl_par, cntl_chl, thread_par)
}

pub unsafe fn bli_thrinfo_rgrow_prenode(
    rntm: *mut rntm_t,
    cntl_par: *mut cntl_t,
    cntl_cur: *mut cntl_t,
    thread_par: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_rgrow_prenode.unwrap()(rntm, cntl_par, cntl_cur, thread_par)
}

pub unsafe fn bli_thrinfo_create_for_cntl_prenode(
    rntm: *mut rntm_t,
    cntl_par: *mut cntl_t,
    cntl_chl: *mut cntl_t,
    thread_par: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_create_for_cntl_prenode.unwrap()(rntm, cntl_par, cntl_chl, thread_par)
}

pub unsafe fn bli_thrinfo_sup_grow(
    rntm: *mut rntm_t,
    bszid_par: *mut bszid_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_thrinfo_sup_grow.unwrap()(rntm, bszid_par, thread)
}

pub unsafe fn bli_thrinfo_sup_rgrow(
    rntm: *mut rntm_t,
    bszid_par: *mut bszid_t,
    bszid_cur: *mut bszid_t,
    thread_par: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_sup_rgrow.unwrap()(rntm, bszid_par, bszid_cur, thread_par)
}

pub unsafe fn bli_thrinfo_sup_create_for_cntl(
    rntm: *mut rntm_t,
    bszid_par: *mut bszid_t,
    bszid_chl: *mut bszid_t,
    thread_par: *mut thrinfo_t,
) -> *mut thrinfo_t {
    dyload_lib().bli_thrinfo_sup_create_for_cntl.unwrap()(rntm, bszid_par, bszid_chl, thread_par)
}

pub unsafe fn bli_packm_thrinfo_init(
    thread: *mut thrinfo_t,
    ocomm: *mut thrcomm_t,
    ocomm_id: dim_t,
    n_way: dim_t,
    work_id: dim_t,
    bszid: bszid_t,
    sub_node: *mut thrinfo_t,
) {
    dyload_lib().bli_packm_thrinfo_init.unwrap()(
        thread, ocomm, ocomm_id, n_way, work_id, bszid, sub_node,
    )
}

pub unsafe fn bli_packm_thrinfo_init_single(thread: *mut thrinfo_t) {
    dyload_lib().bli_packm_thrinfo_init_single.unwrap()(thread)
}

pub unsafe fn bli_l3_thrinfo_init(
    thread: *mut thrinfo_t,
    ocomm: *mut thrcomm_t,
    ocomm_id: dim_t,
    n_way: dim_t,
    work_id: dim_t,
    sub_node: *mut thrinfo_t,
) {
    dyload_lib().bli_l3_thrinfo_init.unwrap()(thread, ocomm, ocomm_id, n_way, work_id, sub_node)
}

pub unsafe fn bli_l3_thrinfo_init_single(thread: *mut thrinfo_t) {
    dyload_lib().bli_l3_thrinfo_init_single.unwrap()(thread)
}

pub unsafe fn bli_l3_thrinfo_free(rntm: *mut rntm_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_l3_thrinfo_free.unwrap()(rntm, thread)
}

pub unsafe fn bli_l3_sup_thrinfo_free(rntm: *mut rntm_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_l3_sup_thrinfo_free.unwrap()(rntm, thread)
}

pub unsafe fn bli_l3_thrinfo_create_root(
    id: dim_t,
    gl_comm: *mut thrcomm_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut *mut thrinfo_t,
) {
    dyload_lib().bli_l3_thrinfo_create_root.unwrap()(id, gl_comm, rntm, cntl, thread)
}

pub unsafe fn bli_l3_sup_thrinfo_create_root(
    id: dim_t,
    gl_comm: *mut thrcomm_t,
    rntm: *mut rntm_t,
    thread: *mut *mut thrinfo_t,
) {
    dyload_lib().bli_l3_sup_thrinfo_create_root.unwrap()(id, gl_comm, rntm, thread)
}

pub unsafe fn bli_l3_sup_thrinfo_update_root(rntm: *mut rntm_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_l3_sup_thrinfo_update_root.unwrap()(rntm, thread)
}

pub unsafe fn bli_l3_thrinfo_print_gemm_paths(threads: *mut *mut thrinfo_t) {
    dyload_lib().bli_l3_thrinfo_print_gemm_paths.unwrap()(threads)
}

pub unsafe fn bli_l3_thrinfo_print_trsm_paths(threads: *mut *mut thrinfo_t) {
    dyload_lib().bli_l3_thrinfo_print_trsm_paths.unwrap()(threads)
}

pub unsafe fn bli_l3_thrinfo_free_paths(rntm: *mut rntm_t, threads: *mut *mut thrinfo_t) {
    dyload_lib().bli_l3_thrinfo_free_paths.unwrap()(rntm, threads)
}

pub unsafe fn bli_l3_thread_decorator(
    func: l3int_t,
    family: opid_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_l3_thread_decorator.unwrap()(
        func, family, alpha, a, b, beta, c, cntx, rntm, cntl,
    )
}

pub unsafe fn bli_l3_thread_decorator_thread_check(
    n_threads: dim_t,
    tid: dim_t,
    gl_comm: *mut thrcomm_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_l3_thread_decorator_thread_check.unwrap()(n_threads, tid, gl_comm, rntm)
}

pub unsafe fn bli_l3_sup_thread_decorator(
    func: l3supint_t,
    family: opid_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_l3_sup_thread_decorator.unwrap()(
        func, family, alpha, a, b, beta, c, cntx, rntm,
    )
}

pub unsafe fn bli_pack_full_thread_decorator(
    func: pack_full_t,
    identifier: *const c_char,
    alpha_obj: *mut obj_t,
    src_obj: *mut obj_t,
    dest_obj: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_pack_full_thread_decorator.unwrap()(
        func, identifier, alpha_obj, src_obj, dest_obj, cntx, rntm,
    )
}

pub unsafe fn bli_l3_compute_thread_decorator(
    func: l3computeint_t,
    family: opid_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_l3_compute_thread_decorator.unwrap()(func, family, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_thread_init() {
    dyload_lib().bli_thread_init.unwrap()()
}

pub unsafe fn bli_thread_init_tl() {
    dyload_lib().bli_thread_init_tl.unwrap()()
}

pub unsafe fn bli_thread_finalize() {
    dyload_lib().bli_thread_finalize.unwrap()()
}

pub unsafe fn bli_thread_finalize_tl() {
    dyload_lib().bli_thread_finalize_tl.unwrap()()
}

pub unsafe fn bli_thread_range_sub(
    thread: *mut thrinfo_t,
    n: dim_t,
    bf: dim_t,
    handle_edge_low: bool,
    start: *mut dim_t,
    end: *mut dim_t,
) {
    dyload_lib().bli_thread_range_sub.unwrap()(thread, n, bf, handle_edge_low, start, end)
}

pub unsafe fn bli_thread_range_mdim(
    direct: dir_t,
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntl: *mut cntl_t,
    cntx: *mut cntx_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_mdim.unwrap()(direct, thr, a, b, c, cntl, cntx, start, end)
}

pub unsafe fn bli_thread_range_ndim(
    direct: dir_t,
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntl: *mut cntl_t,
    cntx: *mut cntx_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_ndim.unwrap()(direct, thr, a, b, c, cntl, cntx, start, end)
}

pub unsafe fn bli_thread_range_l2r(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_l2r.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_r2l(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_r2l.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_t2b(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_t2b.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_b2t(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_b2t.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_weighted_l2r(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_weighted_l2r.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_weighted_r2l(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_weighted_r2l.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_weighted_t2b(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_weighted_t2b.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_weighted_b2t(
    thr: *mut thrinfo_t,
    a: *mut obj_t,
    bmult: *mut blksz_t,
    start: *mut dim_t,
    end: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_weighted_b2t.unwrap()(thr, a, bmult, start, end)
}

pub unsafe fn bli_thread_range_width_l(
    diagoff_j: doff_t,
    m: dim_t,
    n_j: dim_t,
    j: dim_t,
    n_way: dim_t,
    bf: dim_t,
    bf_left: dim_t,
    area_per_thr: f64,
    handle_edge_low: bool,
) -> dim_t {
    dyload_lib().bli_thread_range_width_l.unwrap()(
        diagoff_j,
        m,
        n_j,
        j,
        n_way,
        bf,
        bf_left,
        area_per_thr,
        handle_edge_low,
    )
}

pub unsafe fn bli_find_area_trap_l(m: dim_t, n: dim_t, diagoff: doff_t) -> siz_t {
    dyload_lib().bli_find_area_trap_l.unwrap()(m, n, diagoff)
}

pub unsafe fn bli_thread_range_weighted_sub(
    thread: *mut thrinfo_t,
    diagoff: doff_t,
    uplo: uplo_t,
    m: dim_t,
    n: dim_t,
    bf: dim_t,
    handle_edge_low: bool,
    j_start_thr: *mut dim_t,
    j_end_thr: *mut dim_t,
) -> siz_t {
    dyload_lib().bli_thread_range_weighted_sub.unwrap()(
        thread,
        diagoff,
        uplo,
        m,
        n,
        bf,
        handle_edge_low,
        j_start_thr,
        j_end_thr,
    )
}

pub unsafe fn bli_prime_factorization(n: dim_t, factors: *mut bli_prime_factors_t) {
    dyload_lib().bli_prime_factorization.unwrap()(n, factors)
}

pub unsafe fn bli_next_prime_factor(factors: *mut bli_prime_factors_t) -> dim_t {
    dyload_lib().bli_next_prime_factor.unwrap()(factors)
}

pub unsafe fn bli_is_prime(n: dim_t) -> bool {
    dyload_lib().bli_is_prime.unwrap()(n)
}

pub unsafe fn bli_thread_partition_2x2(
    n_thread: dim_t,
    work1: dim_t,
    work2: dim_t,
    nt1: *mut dim_t,
    nt2: *mut dim_t,
) {
    dyload_lib().bli_thread_partition_2x2.unwrap()(n_thread, work1, work2, nt1, nt2)
}

pub unsafe fn bli_thread_partition_2x2_slow(
    n_thread: dim_t,
    work1: dim_t,
    work2: dim_t,
    nt1: *mut dim_t,
    nt2: *mut dim_t,
) {
    dyload_lib().bli_thread_partition_2x2_slow.unwrap()(n_thread, work1, work2, nt1, nt2)
}

pub unsafe fn bli_thread_partition_2x2_fast(
    n_thread: dim_t,
    work1: dim_t,
    work2: dim_t,
    nt1: *mut dim_t,
    nt2: *mut dim_t,
) {
    dyload_lib().bli_thread_partition_2x2_fast.unwrap()(n_thread, work1, work2, nt1, nt2)
}

pub unsafe fn bli_thread_vector_partition(
    n_elem: dim_t,
    t_count: dim_t,
    start: *mut dim_t,
    compute_len: *mut dim_t,
    thread_id: dim_t,
) {
    dyload_lib().bli_thread_vector_partition.unwrap()(
        n_elem,
        t_count,
        start,
        compute_len,
        thread_id,
    )
}

pub unsafe fn bli_normfv_thread_partition(
    n_elem: dim_t,
    t_count: dim_t,
    start: *mut dim_t,
    compute_len: *mut dim_t,
    block_size: dim_t,
    incx: dim_t,
    thread_id: dim_t,
) {
    dyload_lib().bli_normfv_thread_partition.unwrap()(
        n_elem,
        t_count,
        start,
        compute_len,
        block_size,
        incx,
        thread_id,
    )
}

pub unsafe fn bli_gcd(x: dim_t, y: dim_t) -> dim_t {
    dyload_lib().bli_gcd.unwrap()(x, y)
}

pub unsafe fn bli_lcm(x: dim_t, y: dim_t) -> dim_t {
    dyload_lib().bli_lcm.unwrap()(x, y)
}

pub unsafe fn bli_ipow(base: dim_t, power: dim_t) -> dim_t {
    dyload_lib().bli_ipow.unwrap()(base, power)
}

pub unsafe fn bli_thread_get_jc_nt() -> dim_t {
    dyload_lib().bli_thread_get_jc_nt.unwrap()()
}

pub unsafe fn bli_thread_get_pc_nt() -> dim_t {
    dyload_lib().bli_thread_get_pc_nt.unwrap()()
}

pub unsafe fn bli_thread_get_ic_nt() -> dim_t {
    dyload_lib().bli_thread_get_ic_nt.unwrap()()
}

pub unsafe fn bli_thread_get_jr_nt() -> dim_t {
    dyload_lib().bli_thread_get_jr_nt.unwrap()()
}

pub unsafe fn bli_thread_get_ir_nt() -> dim_t {
    dyload_lib().bli_thread_get_ir_nt.unwrap()()
}

pub unsafe fn bli_thread_get_num_threads() -> dim_t {
    dyload_lib().bli_thread_get_num_threads.unwrap()()
}

pub unsafe fn bli_thread_get_is_parallel() -> bool {
    dyload_lib().bli_thread_get_is_parallel.unwrap()()
}

pub unsafe fn bli_thread_set_ways(jc: dim_t, pc: dim_t, ic: dim_t, jr: dim_t, ir: dim_t) {
    dyload_lib().bli_thread_set_ways.unwrap()(jc, pc, ic, jr, ir)
}

pub unsafe fn bli_thread_set_num_threads(value: dim_t) {
    dyload_lib().bli_thread_set_num_threads.unwrap()(value)
}

pub unsafe fn bli_thread_init_rntm_from_env(rntm: *mut rntm_t) {
    dyload_lib().bli_thread_init_rntm_from_env.unwrap()(rntm)
}

pub unsafe fn bli_thread_init_rntm_from_global_rntm(rntm: *mut rntm_t) {
    dyload_lib().bli_thread_init_rntm_from_global_rntm.unwrap()(rntm)
}

pub unsafe fn bli_thread_update_rntm_from_env(rntm: *mut rntm_t) {
    dyload_lib().bli_thread_update_rntm_from_env.unwrap()(rntm)
}

pub unsafe fn bli_cntx_init_zen5(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen5.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen5_ref(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen5_ref.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen5_ind(method: ind_t, cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen5_ind.unwrap()(method, cntx)
}

pub unsafe fn bli_cntx_init_zen4(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen4.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen4_ref(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen4_ref.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen4_ind(method: ind_t, cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen4_ind.unwrap()(method, cntx)
}

pub unsafe fn bli_cntx_init_zen3(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen3.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen3_ref(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen3_ref.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen3_ind(method: ind_t, cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen3_ind.unwrap()(method, cntx)
}

pub unsafe fn bli_cntx_init_zen2(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen2.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen2_ref(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen2_ref.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen2_ind(method: ind_t, cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen2_ind.unwrap()(method, cntx)
}

pub unsafe fn bli_cntx_init_zen(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen_ref(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen_ref.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_zen_ind(method: ind_t, cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_zen_ind.unwrap()(method, cntx)
}

pub unsafe fn bli_cntx_init_generic(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_generic.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_generic_ref(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_generic_ref.unwrap()(cntx)
}

pub unsafe fn bli_cntx_init_generic_ind(method: ind_t, cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_init_generic_ind.unwrap()(method, cntx)
}

pub unsafe fn bli_sgemm_skx_asm_32x12_l2(
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    b: *mut f32,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemm_skx_asm_32x12_l2.unwrap()(
        k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemm_skx_asm_12x32_l2(
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    b: *mut f32,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemm_skx_asm_12x32_l2.unwrap()(
        k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemm_skx_asm_16x12_l2(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_skx_asm_16x12_l2.unwrap()(
        k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemm_skx_asm_16x14(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_skx_asm_16x14.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_spackm_haswell_asm_6xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_haswell_asm_6xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_spackm_haswell_asm_16xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_haswell_asm_16xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dpackm_haswell_asm_6xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_haswell_asm_6xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dpackm_haswell_asm_8xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_haswell_asm_8xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_cpackm_haswell_asm_3xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_haswell_asm_3xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_cpackm_haswell_asm_8xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_haswell_asm_8xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_zpackm_haswell_asm_3xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_haswell_asm_3xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_zpackm_haswell_asm_4xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_haswell_asm_4xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_sgemm_haswell_asm_6x16(
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    b: *mut f32,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemm_haswell_asm_6x16.unwrap()(
        k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemm_haswell_asm_6x8(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_haswell_asm_6x8.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_cgemm_haswell_asm_3x8(
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    b: *mut scomplex,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemm_haswell_asm_3x8.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemm_haswell_asm_3x4(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_haswell_asm_3x4.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_sgemm_haswell_asm_16x6(
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    b: *mut f32,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemm_haswell_asm_16x6.unwrap()(
        k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemm_haswell_asm_8x6(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_haswell_asm_8x6.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_cgemm_haswell_asm_8x3(
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    b: *mut scomplex,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemm_haswell_asm_8x3.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemm_haswell_asm_4x3(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_haswell_asm_4x3.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_sgemmtrsm_l_haswell_asm_6x16(
    k: dim_t,
    alpha: *mut f32,
    a1x: *mut f32,
    a11: *mut f32,
    bx1: *mut f32,
    b11: *mut f32,
    c11: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmtrsm_l_haswell_asm_6x16.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_l_haswell_asm_6x8(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_l_haswell_asm_6x8.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmtrsm_u_haswell_asm_6x16(
    k: dim_t,
    alpha: *mut f32,
    a1x: *mut f32,
    a11: *mut f32,
    bx1: *mut f32,
    b11: *mut f32,
    c11: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmtrsm_u_haswell_asm_6x16.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_u_haswell_asm_6x8(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_u_haswell_asm_6x8.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_haswell_ref_6x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_haswell_ref_6x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_haswell_ref_5x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_haswell_ref_5x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_haswell_ref_4x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_haswell_ref_4x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_haswell_ref_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_haswell_ref_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_haswell_ref_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_haswell_ref_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_haswell_ref_1x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_haswell_ref_1x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x16m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x16m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x12m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x12m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x6m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x6m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_6x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_6x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_5x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_5x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_4x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_4x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_3x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_3x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_2x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_2x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_haswell_asm_1x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_haswell_asm_1x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x12(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x12.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x16m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x16m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x12m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x12m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_6x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_6x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_3x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_3x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_2x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_2x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_haswell_asm_1x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_haswell_asm_1x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_r_haswell_ref_6x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_r_haswell_ref_6x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_r_haswell_ref_5x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_r_haswell_ref_5x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_r_haswell_ref_4x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_r_haswell_ref_4x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_r_haswell_ref_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_r_haswell_ref_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_r_haswell_ref_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_r_haswell_ref_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_r_haswell_ref_1x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_r_haswell_ref_1x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x6m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x6m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_5x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_5x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_4x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_4x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_3x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_3x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_2x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_2x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_1x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_1x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_1x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_1x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_0x0_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_0x0_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_6x0_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_6x0_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_6x8_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_6x8_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_12x8_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_12x8_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_12x16_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_12x16_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_18x16_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_18x16_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_0x0_combined_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_0x0_combined_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_0x0_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_0x0_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_6x0_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_6x0_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_6x8_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_6x8_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_12x8_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_12x8_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_12x16_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_12x16_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_18x16_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_18x16_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_haswell_asm_6x8m_16x12_combined_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_haswell_asm_6x8m_16x12_combined_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_0x0_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_0x0_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_6x0_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_6x0_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_6x8_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_6x8_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_12x8_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_12x8_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_12x16_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_12x16_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_18x16_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_18x16_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_0x0_combined_U(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_0x0_combined_U.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_0x0_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_0x0_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_6x0_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_6x0_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_6x8_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_6x8_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_12x8_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_12x8_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_12x16_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_12x16_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_18x16_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_18x16_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m_16x12_combined_L(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m_16x12_combined_L.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_6x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_6x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_3x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_3x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_2x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_2x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rd_haswell_asm_1x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rd_haswell_asm_1x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x7m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x7m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x6m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x6m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x5m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x5m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x3m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x3m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen5_asm_24x1m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen5_asm_24x1m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cntx_gemmsup_thresh_is_met_zen5(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) -> bool {
    dyload_lib().bli_cntx_gemmsup_thresh_is_met_zen5.unwrap()(a, b, c, cntx)
}

pub unsafe fn bli_dynamic_blkszs_zen5(n_threads: dim_t, cntx: *mut cntx_t, dt: num_t) {
    dyload_lib().bli_dynamic_blkszs_zen5.unwrap()(n_threads, cntx, dt)
}

pub unsafe fn bli_trsm_small_ZEN5(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_trsm_small_ZEN5.unwrap()(side, alpha, a, b, cntx, cntl, is_parallel)
}

pub unsafe fn bli_dtrsm_small_XAltB_XAuB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_XAltB_XAuB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_dtrsm_small_XAutB_XAlB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_XAutB_XAlB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_dtrsm_small_AltXB_AuXB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_AltXB_AuXB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_dtrsm_small_AutXB_AlXB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_AutXB_AlXB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_XAltB_XAuB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_XAltB_XAuB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_XAutB_XAlB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_XAutB_XAlB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_AltXB_AuXB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_AltXB_AuXB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_AutXB_AlXB_ZEN5(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_AutXB_AlXB_ZEN5.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_trsm_small_mt_ZEN5(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_trsm_small_mt_ZEN5.unwrap()(side, alpha, a, b, cntx, cntl, is_parallel)
}

pub unsafe fn bli_zgemmtiny_avx512_ukr_info(
    stor_id: stor3_t,
    fp_info: *mut gemmtiny_ukr_info_t,
) -> err_t {
    dyload_lib().bli_zgemmtiny_avx512_ukr_info.unwrap()(stor_id, fp_info)
}

pub unsafe fn bli_daddv_zen_int_avx512(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daddv_zen_int_avx512.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_samaxv_zen_int_avx512(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_samaxv_zen_int_avx512.unwrap()(n, x, incx, index, cntx)
}

pub unsafe fn bli_damaxv_zen_int_avx512(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_damaxv_zen_int_avx512.unwrap()(n, x, incx, index, cntx)
}

pub unsafe fn bli_sscalv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sscalv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_dscalv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dscalv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_cscalv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cscalv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_zscalv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zscalv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_zdscalv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdscalv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_ssetv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ssetv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_dsetv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dsetv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_zsetv_zen_int_avx512(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zsetv_zen_int_avx512.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_sdotv_zen_int_avx512(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sdotv_zen_int_avx512.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_ddotv_zen_int_avx512(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotv_zen_int_avx512.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_zdotv_zen_int_avx512(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotv_zen_int_avx512.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_zdotv_zen4_asm_avx512(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotv_zen4_asm_avx512.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_saxpyv_zen_int_avx512(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpyv_zen_int_avx512.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_daxpyv_zen_int_avx512(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyv_zen_int_avx512.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zaxpyv_zen_int_avx512(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyv_zen_int_avx512.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_daxpbyv_zen_int_avx512(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpbyv_zen_int_avx512.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_zaxpyf_zen_int_2_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyf_zen_int_2_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_zaxpyf_zen_int_4_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyf_zen_int_4_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_zaxpyf_zen_int_8_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyf_zen_int_8_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int2_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int2_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int4_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int4_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int6_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int6_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int8_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int8_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int12_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int12_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int16_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int16_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int32_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int32_avx512.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int32_avx512_mt(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int32_avx512_mt.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_ddotxf_zen_int_avx512(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotxf_zen_int_avx512.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_scopyv_zen4_asm_avx512(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_scopyv_zen4_asm_avx512.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_dcopyv_zen4_asm_avx512(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dcopyv_zen4_asm_avx512.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zcopyv_zen4_asm_avx512(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zcopyv_zen4_asm_avx512.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_dscal2v_zen_int_avx512(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dscal2v_zen_int_avx512.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zdotxv_zen_int_avx512(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxv_zen_int_avx512.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx,
    )
}

pub unsafe fn bli_zdotxf_zen_int_8_avx512(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxf_zen_int_8_avx512.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zdotxf_zen_int_4_avx512(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxf_zen_int_4_avx512.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zdotxf_zen_int_2_avx512(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxf_zen_int_2_avx512.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx8_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx8_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx7_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx7_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx6_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx6_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx5_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx5_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx4_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx4_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx3_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx3_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx2_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx2_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16mx1_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16mx1_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_32x8n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_32x8n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16x8n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16x8n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_8x8n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_8x8n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_m_leftx8n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_m_leftx8n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_32x4n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_32x4n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16x4n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16x4n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_8x4n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_8x4n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_m_leftx4n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_m_leftx4n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_32x3n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_32x3n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16x3n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16x3n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_8x3n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_8x3n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_m_leftx3n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_m_leftx3n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_32x2n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_32x2n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16x2n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16x2n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_8x2n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_8x2n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_m_leftx2n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_m_leftx2n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_32x1n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_32x1n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_16x1n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_16x1n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_8x1n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_8x1n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_zen_int_m_leftx1n_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_zen_int_m_leftx1n_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx8_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx8_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx7_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx7_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx6_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx6_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx5_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx5_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx4_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx4_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx3_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx3_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx2_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx2_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx1_avx512(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx1_avx512.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_l_zen_asm_16x14(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_l_zen_asm_16x14.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_u_zen_asm_16x14(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_u_zen_asm_16x14.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_l_zen4_asm_8x24(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_l_zen4_asm_8x24.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_u_zen4_asm_8x24(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_u_zen4_asm_8x24.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmtrsm_l_zen4_asm_4x12(
    k: dim_t,
    alpha: *mut dcomplex,
    a1x: *mut dcomplex,
    a11: *mut dcomplex,
    bx1: *mut dcomplex,
    b11: *mut dcomplex,
    c11: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmtrsm_l_zen4_asm_4x12.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmtrsm_u_zen4_asm_4x12(
    k: dim_t,
    alpha: *mut dcomplex,
    a1x: *mut dcomplex,
    a11: *mut dcomplex,
    bx1: *mut dcomplex,
    b11: *mut dcomplex,
    c11: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmtrsm_u_zen4_asm_4x12.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dpackm_zen4_asm_16xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_zen4_asm_16xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dpackm_zen4_asm_8xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_zen4_asm_8xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dpackm_zen4_asm_24xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_zen4_asm_24xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dpackm_zen4_asm_32xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_zen4_asm_32xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dpackm_32xk_zen4_ref(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_32xk_zen4_ref.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_zpackm_zen4_asm_12xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_zen4_asm_12xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_zpackm_zen4_asm_4xk(
    conja: conj_t,
    schema: pack_t,
    cdim: dim_t,
    n: dim_t,
    n_max: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_zen4_asm_4xk.unwrap()(
        conja, schema, cdim, n, n_max, kappa, a, inca, lda, p, ldp, cntx,
    )
}

pub unsafe fn bli_dgemm_avx512_asm_8x24(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_avx512_asm_8x24.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_dgemm_zen4_asm_32x6(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_zen4_asm_32x6.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemm_zen4_asm_12x4(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_zen4_asm_12x4.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemm_zen4_asm_4x12(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_zen4_asm_4x12.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_dgemm_avx512_asm_8x24_macro_kernel(
    n: dim_t,
    m: dim_t,
    k: dim_t,
    c: *mut f64,
    a: *mut f64,
    b: *mut f64,
    ldc: dim_t,
    beta: *mut f64,
) {
    dyload_lib().bli_dgemm_avx512_asm_8x24_macro_kernel.unwrap()(n, m, k, c, a, b, ldc, beta)
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x64m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x64m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x48m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x48m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x32m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x32m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x16m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x16m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x64m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x64m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x48m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x48m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x32m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x32m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x16m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x16m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x64m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x64m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x48m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x48m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x32m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x32m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x16m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x16m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x64m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x64m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x48m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x48m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x32m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x32m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x16m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x16m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x16_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x16_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x16_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x16_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x64m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x64m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x48m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x48m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x32m_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x32m_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_3x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_3x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x64n_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x64n_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_5x64_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_5x64_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_4x64_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_4x64_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_3x64_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_3x64_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x64_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x64_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x64_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x64_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_5x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_5x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_4x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_4x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_3x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_3x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x48_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x48_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_5x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_5x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_4x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_4x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_3x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_3x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x32_avx512(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x32_avx512.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_trsm_small_AVX512(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_trsm_small_AVX512.unwrap()(side, alpha, a, b, cntx, cntl, is_parallel)
}

pub unsafe fn bli_dtrsm_small_AutXB_AlXB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_AutXB_AlXB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_dtrsm_small_XAltB_XAuB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_XAltB_XAuB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_dtrsm_small_XAutB_XAlB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_XAutB_XAlB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_dtrsm_small_AltXB_AuXB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dtrsm_small_AltXB_AuXB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_AutXB_AlXB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_AutXB_AlXB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_XAltB_XAuB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_XAltB_XAuB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_XAutB_XAlB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_XAutB_XAlB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_ztrsm_small_AltXB_AuXB_AVX512(
    AlphaObj: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_ztrsm_small_AltXB_AuXB_AVX512.unwrap()(AlphaObj, a, b, cntx, cntl)
}

pub unsafe fn bli_trsm_small_mt_AVX512(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_trsm_small_mt_AVX512.unwrap()(side, alpha, a, b, cntx, cntl, is_parallel)
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x7m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x7m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x6m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x6m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x5m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x5m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x3m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x3m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x1m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x1m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x7m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x7m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x6m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x6m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x5m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x5m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x4m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x4m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x3m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x3m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x2m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x2m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x1m_new(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x1m_new.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x8m_lower(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x8m_lower.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x8m_upper(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x8m_upper.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_lower_0(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_lower_0.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_lower_1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_lower_1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_lower_2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_lower_2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_upper_0(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_upper_0.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_upper_1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_upper_1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x8m_upper_2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x8m_upper_2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen4_asm_4x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen4_asm_4x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen4_asm_4x4m_lower(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen4_asm_4x4m_lower.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen4_asm_4x4m_upper(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen4_asm_4x4m_upper.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x7(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x7.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x6(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x6.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x5(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x5.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_24x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_24x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_16x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_16x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmsup_rv_zen4_asm_8x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmsup_rv_zen4_asm_8x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_12x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_12x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_12x3m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_12x3m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_12x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_12x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_12x1m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_12x1m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_8x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_8x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_8x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_8x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_8x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_8x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_8x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_8x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_4x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_4x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_4x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_4x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_4x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_4x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_4x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_4x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_2x3(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_2x3.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cv_zen4_asm_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cv_zen4_asm_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_12x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_12x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_12x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_12x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_8x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_8x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_8x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_8x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_4x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_4x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_4x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_4x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_cd_zen4_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_cd_zen4_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemm_24x8_avx512_k1_nn(
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    lda: inc_t,
    b: *mut f64,
    ldb: inc_t,
    beta: *mut f64,
    c: *mut f64,
    ldc: inc_t,
) -> err_t {
    dyload_lib().bli_dgemm_24x8_avx512_k1_nn.unwrap()(m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bli_dgemm_tiny_24x8(
    conja: conj_t,
    conjb: conj_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *const f64,
    a: *const f64,
    rs_a0: inc_t,
    cs_a0: inc_t,
    b: *const f64,
    rs_b0: inc_t,
    cs_b0: inc_t,
    beta: *const f64,
    c: *mut f64,
    rs_c0: inc_t,
    cs_c0: inc_t,
) -> err_t {
    dyload_lib().bli_dgemm_tiny_24x8.unwrap()(
        conja, conjb, transa, transb, m, n, k, alpha, a, rs_a0, cs_a0, b, rs_b0, cs_b0, beta, c,
        rs_c0, cs_c0,
    )
}

pub unsafe fn bli_dnorm2fv_unb_var1_avx512(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dnorm2fv_unb_var1_avx512.unwrap()(n, x, incx, norm, cntx)
}

pub unsafe fn bli_zgemm_16x4_avx512_k1_nn(
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: inc_t,
    b: *mut dcomplex,
    ldb: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: inc_t,
) -> err_t {
    dyload_lib().bli_zgemm_16x4_avx512_k1_nn.unwrap()(m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bli_cntx_gemmsup_thresh_is_met_zen4(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) -> bool {
    dyload_lib().bli_cntx_gemmsup_thresh_is_met_zen4.unwrap()(a, b, c, cntx)
}

pub unsafe fn bli_dynamic_blkszs_zen4(n_threads: dim_t, cntx: *mut cntx_t, dt: num_t) {
    dyload_lib().bli_dynamic_blkszs_zen4.unwrap()(n_threads, cntx, dt)
}

pub unsafe fn bli_zero_zmm() {
    dyload_lib().bli_zero_zmm.unwrap()()
}

pub unsafe fn bli_dgemv_n_avx512(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_avx512.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_saxpyf_zen_int_5(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpyf_zen_int_5.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int_5(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int_5.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_zgemmtiny_avx2_ukr_info(
    stor_id: stor3_t,
    fp_info: *mut gemmtiny_ukr_info_t,
) -> err_t {
    dyload_lib().bli_zgemmtiny_avx2_ukr_info.unwrap()(stor_id, fp_info)
}

pub unsafe fn bli_saddv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saddv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_daddv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daddv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_caddv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_caddv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zaddv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaddv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_samaxv_zen_int(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_samaxv_zen_int.unwrap()(n, x, incx, index, cntx)
}

pub unsafe fn bli_damaxv_zen_int(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_damaxv_zen_int.unwrap()(n, x, incx, index, cntx)
}

pub unsafe fn bli_saxpbyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpbyv_zen_int.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_daxpbyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpbyv_zen_int.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_caxpbyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_caxpbyv_zen_int.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_zaxpbyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpbyv_zen_int.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_saxpbyv_zen_int10(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpbyv_zen_int10.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_daxpbyv_zen_int10(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpbyv_zen_int10.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx)
}

pub unsafe fn bli_saxpyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpyv_zen_int.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_daxpyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyv_zen_int.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_saxpyv_zen_int10(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpyv_zen_int10.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_daxpyv_zen_int10(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyv_zen_int10.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_caxpyv_zen_int5(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_caxpyv_zen_int5.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zaxpyv_zen_int5(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyv_zen_int5.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_sdotv_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sdotv_zen_int.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_ddotv_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotv_zen_int.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_sdotv_zen_int10(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sdotv_zen_int10.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_ddotv_zen_int10(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotv_zen_int10.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_cdotv_zen_int5(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    rho: *mut scomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cdotv_zen_int5.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_zdotv_zen_int5(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotv_zen_int5.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx)
}

pub unsafe fn bli_sdotxv_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    beta: *mut f32,
    rho: *mut f32,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sdotxv_zen_int.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx,
    )
}

pub unsafe fn bli_ddotxv_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    beta: *mut f64,
    rho: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotxv_zen_int.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx,
    )
}

pub unsafe fn bli_zdotxv_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxv_zen_int.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx,
    )
}

pub unsafe fn bli_cdotxv_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    beta: *mut scomplex,
    rho: *mut scomplex,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cdotxv_zen_int.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx,
    )
}

pub unsafe fn bli_sscalv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sscalv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_dscalv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dscalv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_cscalv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cscalv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_zscalv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zscalv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_sscalv_zen_int10(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sscalv_zen_int10.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_dscalv_zen_int10(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dscalv_zen_int10.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_zdscalv_zen_int10(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdscalv_zen_int10.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_sswapv_zen_int8(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sswapv_zen_int8.unwrap()(n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_dswapv_zen_int8(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dswapv_zen_int8.unwrap()(n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_scopyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_scopyv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_dcopyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dcopyv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_ccopyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ccopyv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zcopyv_zen_int(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zcopyv_zen_int.unwrap()(conjx, n, x, incx, y, incy, cntx)
}

pub unsafe fn bli_sscal2v_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sscal2v_zen_int.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_dscal2v_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dscal2v_zen_int.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_cscal2v_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cscal2v_zen_int.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_zscal2v_zen_int(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zscal2v_zen_int.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx)
}

pub unsafe fn bli_ssetv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ssetv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_dsetv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dsetv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_csetv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_csetv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_zsetv_zen_int(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zsetv_zen_int.unwrap()(conjalpha, n, alpha, x, incx, cntx)
}

pub unsafe fn bli_saxpyf_zen_int_8(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpyf_zen_int_8.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int_8(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int_8.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int_16x4(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int_16x4.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpyf_zen_int_16x2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpyf_zen_int_16x2.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_saxpyf_zen_int_6(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_saxpyf_zen_int_6.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_caxpyf_zen_int_5(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_caxpyf_zen_int_5.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_caxpyf_zen_int_4(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_caxpyf_zen_int_4.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_zaxpyf_zen_int_5(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyf_zen_int_5.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_zaxpyf_zen_int_4(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpyf_zen_int_4.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx,
    )
}

pub unsafe fn bli_daxpy2v_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut f64,
    alphay: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    z: *mut f64,
    incz: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_daxpy2v_zen_int.unwrap()(
        conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz, cntx,
    )
}

pub unsafe fn bli_zaxpy2v_zen_int(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut dcomplex,
    alphay: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    z: *mut dcomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zaxpy2v_zen_int.unwrap()(
        conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz, cntx,
    )
}

pub unsafe fn bli_sdotxf_zen_int_8(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sdotxf_zen_int_8.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_ddotxf_zen_int_8(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotxf_zen_int_8.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_ddotxf_zen_int_4(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotxf_zen_int_4.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_ddotxf_zen_int_2(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotxf_zen_int_2.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zdotxf_zen_int_6(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxf_zen_int_6.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_cdotxf_zen_int_6(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cdotxf_zen_int_6.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_ddotxaxpyf_zen_int_8(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    w: *mut f64,
    incw: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    z: *mut f64,
    incz: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddotxaxpyf_zen_int_8.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx,
    )
}

pub unsafe fn bli_cdotxaxpyf_zen_int_8(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    w: *mut scomplex,
    incw: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    z: *mut scomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cdotxaxpyf_zen_int_8.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx,
    )
}

pub unsafe fn bli_zdotxaxpyf_zen_int_8(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    w: *mut dcomplex,
    incw: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    z: *mut dcomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdotxaxpyf_zen_int_8.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx,
    )
}

pub unsafe fn bli_dgemv_zen_ref_c(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_zen_ref_c.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_cgemv_zen_int_4x4(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs: inc_t,
    cs: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemv_zen_int_4x4.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zgemv_zen_int_4x4(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs: inc_t,
    cs: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemv_zen_int_4x4.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx7_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx7_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx6_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx6_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx5_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx5_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx4_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx4_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx3_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx3_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx2_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx2_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_t_zen_int_mx1_avx2(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs: inc_t,
    cs: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_t_zen_int_mx1_avx2.unwrap()(
        conja, conjx, m, n, alpha, a, rs, cs, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zher_zen_int_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher_zen_int_var1.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher_zen_int_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher_zen_int_var2.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_zen_ref_6x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_zen_ref_6x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_zen_ref_5x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_zen_ref_5x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_zen_ref_4x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_zen_ref_4x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_zen_ref_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_zen_ref_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_zen_ref_2x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_zen_ref_2x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_r_zen_ref_1x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_r_zen_ref_1x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x16m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x16m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x16m_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x16m_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x8m_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x8m_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x4m_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x4m_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sbli_sgemmsup_rv_zen_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sbli_sgemmsup_rv_zen_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sbli_sgemmsup_rv_zen_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sbli_sgemmsup_rv_zen_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sbli_sgemmsup_rv_zen_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sbli_sgemmsup_rv_zen_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x16_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x16_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x16_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x16_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x16_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x16_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x16_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x16_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x16_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x16_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x8_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x8_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x8_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x8_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x8_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x8_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x8_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x8_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x8_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x8_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x4_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x4_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x4_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x4_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x4_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x4_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x4_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x4_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x4_mask(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x4_mask.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_6x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_6x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_5x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_5x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_4x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_4x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_3x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_3x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_2x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_2x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rv_zen_asm_1x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rv_zen_asm_1x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x16(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x16.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x16m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x16m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_6x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_6x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_3x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_3x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_2x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_2x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmsup_rd_zen_asm_1x16n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmsup_rd_zen_asm_1x16n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_3x8m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_3x8m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_3x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_3x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_3x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_3x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_2x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_2x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_1x8(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_1x8.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_3x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_3x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_3x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_3x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_3x4m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_3x4m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_3x2m(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_3x2m.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_2x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_2x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_1x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_1x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_2x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_2x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_1x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_1x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_3x4n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_3x4n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rd_zen_asm_2x4n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rd_zen_asm_2x4n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_3x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_3x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_2x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_2x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_1x8n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_1x8n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_3x4(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_3x4.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmsup_rv_zen_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmsup_rv_zen_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_3x4n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_3x4n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_2x4n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_2x4n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_1x4n(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_1x4n.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_3x2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_3x2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmsup_rv_zen_asm_3x1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmsup_rv_zen_asm_3x1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemm_tiny(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *const f64,
    a: *const f64,
    rs_a0: inc_t,
    cs_a0: inc_t,
    b: *const f64,
    rs_b0: inc_t,
    cs_b0: inc_t,
    beta: *const f64,
    c: *mut f64,
    rs_c0: inc_t,
    cs_c0: inc_t,
) -> err_t {
    dyload_lib().bli_dgemm_tiny.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a0, cs_a0, b, rs_b0, cs_b0, beta, c, rs_c0, cs_c0,
    )
}

pub unsafe fn bli_dgemm_tiny_6x8(
    conja: conj_t,
    conjb: conj_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *const f64,
    a: *const f64,
    rs_a0: inc_t,
    cs_a0: inc_t,
    b: *const f64,
    rs_b0: inc_t,
    cs_b0: inc_t,
    beta: *const f64,
    c: *mut f64,
    rs_c0: inc_t,
    cs_c0: inc_t,
) -> err_t {
    dyload_lib().bli_dgemm_tiny_6x8.unwrap()(
        conja, conjb, transa, transb, m, n, k, alpha, a, rs_a0, cs_a0, b, rs_b0, cs_b0, beta, c,
        rs_c0, cs_c0,
    )
}

pub unsafe fn bli_dgemm_small(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dgemm_small.unwrap()(alpha, a, b, beta, c, cntx, cntl)
}

pub unsafe fn bli_dgemm_small_At(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_dgemm_small_At.unwrap()(alpha, a, b, beta, c, cntx, cntl)
}

pub unsafe fn bli_zgemm_small(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_zgemm_small.unwrap()(alpha, a, b, beta, c, cntx, cntl)
}

pub unsafe fn bli_zgemm_small_At(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_zgemm_small_At.unwrap()(alpha, a, b, beta, c, cntx, cntl)
}

pub unsafe fn bli_dgemm_8x6_avx2_k1_nn(
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    lda: inc_t,
    b: *mut f64,
    ldb: inc_t,
    beta: *mut f64,
    c: *mut f64,
    ldc: inc_t,
) -> err_t {
    dyload_lib().bli_dgemm_8x6_avx2_k1_nn.unwrap()(m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bli_zgemm_4x4_avx2_k1_nn(
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    lda: inc_t,
    b: *mut dcomplex,
    ldb: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    ldc: inc_t,
) -> err_t {
    dyload_lib().bli_zgemm_4x4_avx2_k1_nn.unwrap()(m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn bli_trsm_small(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_trsm_small.unwrap()(side, alpha, a, b, cntx, cntl, is_parallel)
}

pub unsafe fn bli_trsm_small_mt(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_trsm_small_mt.unwrap()(side, alpha, a, b, cntx, cntl, is_parallel)
}

pub unsafe fn bli_multi_sgemv_4x2(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    n_threads: dim_t,
) {
    dyload_lib().bli_multi_sgemv_4x2.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx, n_threads,
    )
}

pub unsafe fn bli_cntx_gemmtsup_thresh_is_met_zen(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) -> bool {
    dyload_lib().bli_cntx_gemmtsup_thresh_is_met_zen.unwrap()(a, b, c, cntx)
}

pub unsafe fn bli_cntx_syrksup_thresh_is_met_zen(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) -> bool {
    dyload_lib().bli_cntx_syrksup_thresh_is_met_zen.unwrap()(a, b, c, cntx)
}

pub unsafe fn bli_cntx_trsm_small_thresh_is_met_zen(a: *mut obj_t, m: dim_t, n: dim_t) -> bool {
    dyload_lib().bli_cntx_trsm_small_thresh_is_met_zen.unwrap()(a, m, n)
}

pub unsafe fn bli_snorm2fv_unb_var1_avx2(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_snorm2fv_unb_var1_avx2.unwrap()(n, x, incx, norm, cntx)
}

pub unsafe fn bli_dnorm2fv_unb_var1_avx2(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dnorm2fv_unb_var1_avx2.unwrap()(n, x, incx, norm, cntx)
}

pub unsafe fn bli_scnorm2fv_unb_var1_avx2(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_scnorm2fv_unb_var1_avx2.unwrap()(n, x, incx, norm, cntx)
}

pub unsafe fn bli_dznorm2fv_unb_var1_avx2(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dznorm2fv_unb_var1_avx2.unwrap()(n, x, incx, norm, cntx)
}

pub unsafe fn bli_zgemm_zen_asm_2x6(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_zen_asm_2x6.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemmtrsm_l_zen_asm_2x6(
    k: dim_t,
    alpha: *mut dcomplex,
    a1x: *mut dcomplex,
    a11: *mut dcomplex,
    bx1: *mut dcomplex,
    b11: *mut dcomplex,
    c11: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmtrsm_l_zen_asm_2x6.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmtrsm_u_zen_asm_2x6(
    k: dim_t,
    alpha: *mut dcomplex,
    a1x: *mut dcomplex,
    a11: *mut dcomplex,
    bx1: *mut dcomplex,
    b11: *mut dcomplex,
    c11: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmtrsm_u_zen_asm_2x6.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemv_zen_ref(
    transa: trans_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_zen_ref.unwrap()(
        transa, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_n_avx2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_n_avx2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_init() {
    dyload_lib().bli_init.unwrap()()
}

pub unsafe fn bli_finalize() {
    dyload_lib().bli_finalize.unwrap()()
}

pub unsafe fn bli_init_auto() {
    dyload_lib().bli_init_auto.unwrap()()
}

pub unsafe fn bli_finalize_auto() {
    dyload_lib().bli_finalize_auto.unwrap()()
}

pub unsafe fn bli_init_apis() {
    dyload_lib().bli_init_apis.unwrap()()
}

pub unsafe fn bli_finalize_apis() {
    dyload_lib().bli_finalize_apis.unwrap()()
}

pub unsafe fn bli_init_once() {
    dyload_lib().bli_init_once.unwrap()()
}

pub unsafe fn bli_finalize_once() {
    dyload_lib().bli_finalize_once.unwrap()()
}

pub unsafe fn bli_malloc_intl(size: usize, r_val: *mut err_t) -> *mut c_void {
    dyload_lib().bli_malloc_intl.unwrap()(size, r_val)
}

pub unsafe fn bli_calloc_intl(size: usize, r_val: *mut err_t) -> *mut c_void {
    dyload_lib().bli_calloc_intl.unwrap()(size, r_val)
}

pub unsafe fn bli_free_intl(p: *mut c_void) {
    dyload_lib().bli_free_intl.unwrap()(p)
}

pub unsafe fn bli_malloc_user(size: usize, r_val: *mut err_t) -> *mut c_void {
    dyload_lib().bli_malloc_user.unwrap()(size, r_val)
}

pub unsafe fn bli_free_user(p: *mut c_void) {
    dyload_lib().bli_free_user.unwrap()(p)
}

pub unsafe fn bli_fmalloc_align(
    f: malloc_ft,
    size: usize,
    align_size: usize,
    r_val: *mut err_t,
) -> *mut c_void {
    dyload_lib().bli_fmalloc_align.unwrap()(f, size, align_size, r_val)
}

pub unsafe fn bli_ffree_align(f: free_ft, p: *mut c_void) {
    dyload_lib().bli_ffree_align.unwrap()(f, p)
}

pub unsafe fn bli_fmalloc_noalign(f: malloc_ft, size: usize, r_val: *mut err_t) -> *mut c_void {
    dyload_lib().bli_fmalloc_noalign.unwrap()(f, size, r_val)
}

pub unsafe fn bli_ffree_noalign(f: free_ft, p: *mut c_void) {
    dyload_lib().bli_ffree_noalign.unwrap()(f, p)
}

pub unsafe fn bli_fmalloc_align_check(f: malloc_ft, size: usize, align_size: usize) {
    dyload_lib().bli_fmalloc_align_check.unwrap()(f, size, align_size)
}

pub unsafe fn bli_fmalloc_post_check(p: *mut c_void) {
    dyload_lib().bli_fmalloc_post_check.unwrap()(p)
}

pub unsafe fn bli_const_init() {
    dyload_lib().bli_const_init.unwrap()()
}

pub unsafe fn bli_const_finalize() {
    dyload_lib().bli_const_finalize.unwrap()()
}

pub unsafe fn bli_obj_create_check(
    dt: num_t,
    m: dim_t,
    n: dim_t,
    rs: inc_t,
    cs: inc_t,
    obj: *mut obj_t,
) {
    dyload_lib().bli_obj_create_check.unwrap()(dt, m, n, rs, cs, obj)
}

pub unsafe fn bli_obj_create_without_buffer_check(dt: num_t, m: dim_t, n: dim_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_create_without_buffer_check.unwrap()(dt, m, n, obj)
}

pub unsafe fn bli_obj_alloc_buffer_check(rs: inc_t, cs: inc_t, is: inc_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_alloc_buffer_check.unwrap()(rs, cs, is, obj)
}

pub unsafe fn bli_obj_attach_buffer_check(
    p: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    is: inc_t,
    obj: *mut obj_t,
) {
    dyload_lib().bli_obj_attach_buffer_check.unwrap()(p, rs, cs, is, obj)
}

pub unsafe fn bli_obj_create_scalar_check(dt: num_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_create_scalar_check.unwrap()(dt, obj)
}

pub unsafe fn bli_obj_free_check(obj: *mut obj_t) {
    dyload_lib().bli_obj_free_check.unwrap()(obj)
}

pub unsafe fn bli_obj_create_const_check(value: f64, obj: *mut obj_t) {
    dyload_lib().bli_obj_create_const_check.unwrap()(value, obj)
}

pub unsafe fn bli_obj_create_const_copy_of_check(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_obj_create_const_copy_of_check.unwrap()(a, b)
}

pub unsafe fn bli_dt_size_check(dt: num_t) {
    dyload_lib().bli_dt_size_check.unwrap()(dt)
}

pub unsafe fn bli_dt_string_check(dt: num_t) {
    dyload_lib().bli_dt_string_check.unwrap()(dt)
}

pub unsafe fn bli_dt_union_check(dt1: num_t, dt2: num_t) {
    dyload_lib().bli_dt_union_check.unwrap()(dt1, dt2)
}

pub unsafe fn bli_obj_print_check(label: *mut c_char, obj: *mut obj_t) {
    dyload_lib().bli_obj_print_check.unwrap()(label, obj)
}

pub unsafe fn bli_obj_create(dt: num_t, m: dim_t, n: dim_t, rs: inc_t, cs: inc_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_create.unwrap()(dt, m, n, rs, cs, obj)
}

pub unsafe fn bli_obj_create_with_attached_buffer(
    dt: num_t,
    m: dim_t,
    n: dim_t,
    p: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    obj: *mut obj_t,
) {
    dyload_lib().bli_obj_create_with_attached_buffer.unwrap()(dt, m, n, p, rs, cs, obj)
}

pub unsafe fn bli_obj_create_without_buffer(dt: num_t, m: dim_t, n: dim_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_create_without_buffer.unwrap()(dt, m, n, obj)
}

pub unsafe fn bli_obj_alloc_buffer(rs: inc_t, cs: inc_t, is: inc_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_alloc_buffer.unwrap()(rs, cs, is, obj)
}

pub unsafe fn bli_obj_attach_buffer(
    p: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    is: inc_t,
    obj: *mut obj_t,
) {
    dyload_lib().bli_obj_attach_buffer.unwrap()(p, rs, cs, is, obj)
}

pub unsafe fn bli_obj_create_1x1(dt: num_t, obj: *mut obj_t) {
    dyload_lib().bli_obj_create_1x1.unwrap()(dt, obj)
}

pub unsafe fn bli_obj_create_1x1_with_attached_buffer(dt: num_t, p: *mut c_void, obj: *mut obj_t) {
    dyload_lib().bli_obj_create_1x1_with_attached_buffer.unwrap()(dt, p, obj)
}

pub unsafe fn bli_obj_create_conf_to(s: *mut obj_t, d: *mut obj_t) {
    dyload_lib().bli_obj_create_conf_to.unwrap()(s, d)
}

pub unsafe fn bli_obj_free(obj: *mut obj_t) {
    dyload_lib().bli_obj_free.unwrap()(obj)
}

pub unsafe fn bli_adjust_strides(
    m: dim_t,
    n: dim_t,
    elem_size: siz_t,
    rs: *mut inc_t,
    cs: *mut inc_t,
    is: *mut inc_t,
) {
    dyload_lib().bli_adjust_strides.unwrap()(m, n, elem_size, rs, cs, is)
}

pub unsafe fn bli_dt_size(dt: num_t) -> siz_t {
    dyload_lib().bli_dt_size.unwrap()(dt)
}

pub unsafe fn bli_dt_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_dt_string.unwrap()(dt)
}

pub unsafe fn bli_align_dim_to_mult(dim: dim_t, dim_mult: dim_t) -> dim_t {
    dyload_lib().bli_align_dim_to_mult.unwrap()(dim, dim_mult)
}

pub unsafe fn bli_align_dim_to_size(dim: dim_t, elem_size: siz_t, align_size: siz_t) -> dim_t {
    dyload_lib().bli_align_dim_to_size.unwrap()(dim, elem_size, align_size)
}

pub unsafe fn bli_align_ptr_to_size(p: *mut c_void, align_size: usize) -> dim_t {
    dyload_lib().bli_align_ptr_to_size.unwrap()(p, align_size)
}

pub unsafe fn bli_obj_print(label: *mut c_char, obj: *mut obj_t) {
    dyload_lib().bli_obj_print.unwrap()(label, obj)
}

pub unsafe fn bli_obj_scalar_init_detached(dt: num_t, beta: *mut obj_t) {
    dyload_lib().bli_obj_scalar_init_detached.unwrap()(dt, beta)
}

pub unsafe fn bli_obj_scalar_init_detached_copy_of(
    dt: num_t,
    conj: conj_t,
    alpha: *mut obj_t,
    beta: *mut obj_t,
) {
    dyload_lib().bli_obj_scalar_init_detached_copy_of.unwrap()(dt, conj, alpha, beta)
}

pub unsafe fn bli_obj_scalar_detach(a: *mut obj_t, alpha: *mut obj_t) {
    dyload_lib().bli_obj_scalar_detach.unwrap()(a, alpha)
}

pub unsafe fn bli_obj_scalar_attach(conj: conj_t, alpha: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_obj_scalar_attach.unwrap()(conj, alpha, a)
}

pub unsafe fn bli_obj_scalar_cast_to(dt: num_t, a: *mut obj_t) {
    dyload_lib().bli_obj_scalar_cast_to.unwrap()(dt, a)
}

pub unsafe fn bli_obj_scalar_apply_scalar(alpha: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_obj_scalar_apply_scalar.unwrap()(alpha, a)
}

pub unsafe fn bli_obj_scalar_reset(a: *mut obj_t) {
    dyload_lib().bli_obj_scalar_reset.unwrap()(a)
}

pub unsafe fn bli_obj_scalar_has_nonzero_imag(a: *mut obj_t) -> bool {
    dyload_lib().bli_obj_scalar_has_nonzero_imag.unwrap()(a)
}

pub unsafe fn bli_obj_scalar_equals(a: *mut obj_t, beta: *mut obj_t) -> bool {
    dyload_lib().bli_obj_scalar_equals.unwrap()(a, beta)
}

pub unsafe fn bli_blksz_create_ed(
    b_s: dim_t,
    be_s: dim_t,
    b_d: dim_t,
    be_d: dim_t,
    b_c: dim_t,
    be_c: dim_t,
    b_z: dim_t,
    be_z: dim_t,
) -> *mut blksz_t {
    dyload_lib().bli_blksz_create_ed.unwrap()(b_s, be_s, b_d, be_d, b_c, be_c, b_z, be_z)
}

pub unsafe fn bli_blksz_create(
    b_s: dim_t,
    b_d: dim_t,
    b_c: dim_t,
    b_z: dim_t,
    be_s: dim_t,
    be_d: dim_t,
    be_c: dim_t,
    be_z: dim_t,
) -> *mut blksz_t {
    dyload_lib().bli_blksz_create.unwrap()(b_s, b_d, b_c, b_z, be_s, be_d, be_c, be_z)
}

pub unsafe fn bli_blksz_init_ed(
    b: *mut blksz_t,
    b_s: dim_t,
    be_s: dim_t,
    b_d: dim_t,
    be_d: dim_t,
    b_c: dim_t,
    be_c: dim_t,
    b_z: dim_t,
    be_z: dim_t,
) {
    dyload_lib().bli_blksz_init_ed.unwrap()(b, b_s, be_s, b_d, be_d, b_c, be_c, b_z, be_z)
}

pub unsafe fn bli_blksz_init(
    b: *mut blksz_t,
    b_s: dim_t,
    b_d: dim_t,
    b_c: dim_t,
    b_z: dim_t,
    be_s: dim_t,
    be_d: dim_t,
    be_c: dim_t,
    be_z: dim_t,
) {
    dyload_lib().bli_blksz_init.unwrap()(b, b_s, b_d, b_c, b_z, be_s, be_d, be_c, be_z)
}

pub unsafe fn bli_blksz_init_easy(b: *mut blksz_t, b_s: dim_t, b_d: dim_t, b_c: dim_t, b_z: dim_t) {
    dyload_lib().bli_blksz_init_easy.unwrap()(b, b_s, b_d, b_c, b_z)
}

pub unsafe fn bli_blksz_free(b: *mut blksz_t) {
    dyload_lib().bli_blksz_free.unwrap()(b)
}

pub unsafe fn bli_blksz_reduce_def_to(
    dt_bm: num_t,
    bmult: *mut blksz_t,
    dt_bs: num_t,
    blksz: *mut blksz_t,
) {
    dyload_lib().bli_blksz_reduce_def_to.unwrap()(dt_bm, bmult, dt_bs, blksz)
}

pub unsafe fn bli_blksz_reduce_max_to(
    dt_bm: num_t,
    bmult: *mut blksz_t,
    dt_bs: num_t,
    blksz: *mut blksz_t,
) {
    dyload_lib().bli_blksz_reduce_max_to.unwrap()(dt_bm, bmult, dt_bs, blksz)
}

pub unsafe fn bli_determine_blocksize(
    family: opid_t,
    direct: dir_t,
    i: dim_t,
    dim: dim_t,
    obj: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_determine_blocksize.unwrap()(family, direct, i, dim, obj, bszid, cntx)
}

pub unsafe fn bli_determine_blocksize_f(
    family: opid_t,
    i: dim_t,
    dim: dim_t,
    obj: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_determine_blocksize_f.unwrap()(family, i, dim, obj, bszid, cntx)
}

pub unsafe fn bli_determine_blocksize_b(
    family: opid_t,
    i: dim_t,
    dim: dim_t,
    obj: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_determine_blocksize_b.unwrap()(family, i, dim, obj, bszid, cntx)
}

pub unsafe fn bli_determine_blocksize_f_sub(
    i: dim_t,
    dim: dim_t,
    b_alg: dim_t,
    b_max: dim_t,
) -> dim_t {
    dyload_lib().bli_determine_blocksize_f_sub.unwrap()(i, dim, b_alg, b_max)
}

pub unsafe fn bli_determine_blocksize_b_sub(
    i: dim_t,
    dim: dim_t,
    b_alg: dim_t,
    b_max: dim_t,
) -> dim_t {
    dyload_lib().bli_determine_blocksize_b_sub.unwrap()(i, dim, b_alg, b_max)
}

pub unsafe fn bli_func_create(
    ptr_s: void_fp,
    ptr_d: void_fp,
    ptr_c: void_fp,
    ptr_z: void_fp,
) -> *mut func_t {
    dyload_lib().bli_func_create.unwrap()(ptr_s, ptr_d, ptr_c, ptr_z)
}

pub unsafe fn bli_func_init(
    f: *mut func_t,
    ptr_s: void_fp,
    ptr_d: void_fp,
    ptr_c: void_fp,
    ptr_z: void_fp,
) {
    dyload_lib().bli_func_init.unwrap()(f, ptr_s, ptr_d, ptr_c, ptr_z)
}

pub unsafe fn bli_func_init_null(f: *mut func_t) {
    dyload_lib().bli_func_init_null.unwrap()(f)
}

pub unsafe fn bli_func_free(f: *mut func_t) {
    dyload_lib().bli_func_free.unwrap()(f)
}

pub unsafe fn bli_func_is_null_dt(dt: num_t, f: *mut func_t) -> bool {
    dyload_lib().bli_func_is_null_dt.unwrap()(dt, f)
}

pub unsafe fn bli_func_is_null(f: *mut func_t) -> bool {
    dyload_lib().bli_func_is_null.unwrap()(f)
}

pub unsafe fn bli_mbool_create(b_s: bool, b_d: bool, b_c: bool, b_z: bool) -> *mut mbool_t {
    dyload_lib().bli_mbool_create.unwrap()(b_s, b_d, b_c, b_z)
}

pub unsafe fn bli_mbool_init(b: *mut mbool_t, b_s: bool, b_d: bool, b_c: bool, b_z: bool) {
    dyload_lib().bli_mbool_init.unwrap()(b, b_s, b_d, b_c, b_z)
}

pub unsafe fn bli_mbool_free(b: *mut mbool_t) {
    dyload_lib().bli_mbool_free.unwrap()(b)
}

pub unsafe fn bli_cntx_clear(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_clear.unwrap()(cntx)
}

pub unsafe fn bli_cntx_set_blkszs(method: ind_t, n_bs: dim_t) {
    dyload_lib().bli_cntx_set_blkszs.unwrap()(method, n_bs)
}

pub unsafe fn bli_cntx_set_trsm_blkszs(n_bs: dim_t) {
    dyload_lib().bli_cntx_set_trsm_blkszs.unwrap()(n_bs)
}

pub unsafe fn bli_cntx_set_ind_blkszs(method: ind_t, dt: num_t, n_bs: dim_t) {
    dyload_lib().bli_cntx_set_ind_blkszs.unwrap()(method, dt, n_bs)
}

pub unsafe fn bli_cntx_set_l3_nat_ukrs(n_ukrs: dim_t) {
    dyload_lib().bli_cntx_set_l3_nat_ukrs.unwrap()(n_ukrs)
}

pub unsafe fn bli_cntx_set_l3_vir_ukrs(n_ukrs: dim_t) {
    dyload_lib().bli_cntx_set_l3_vir_ukrs.unwrap()(n_ukrs)
}

pub unsafe fn bli_cntx_set_l3_sup_thresh(n_thresh: dim_t) {
    dyload_lib().bli_cntx_set_l3_sup_thresh.unwrap()(n_thresh)
}

pub unsafe fn bli_cntx_set_l3_sup_handlers(n_ops: dim_t) {
    dyload_lib().bli_cntx_set_l3_sup_handlers.unwrap()(n_ops)
}

pub unsafe fn bli_cntx_set_l3_sup_blkszs(n_bs: dim_t) {
    dyload_lib().bli_cntx_set_l3_sup_blkszs.unwrap()(n_bs)
}

pub unsafe fn bli_cntx_set_l3_sup_tri_blkszs(n_bs: dim_t) {
    dyload_lib().bli_cntx_set_l3_sup_tri_blkszs.unwrap()(n_bs)
}

pub unsafe fn bli_cntx_set_l3_sup_kers(n_ukrs: dim_t) {
    dyload_lib().bli_cntx_set_l3_sup_kers.unwrap()(n_ukrs)
}

pub unsafe fn bli_cntx_set_l3_sup_tri_kers(n_ukrs: dim_t) {
    dyload_lib().bli_cntx_set_l3_sup_tri_kers.unwrap()(n_ukrs)
}

pub unsafe fn bli_cntx_set_l1f_kers(n_kers: dim_t) {
    dyload_lib().bli_cntx_set_l1f_kers.unwrap()(n_kers)
}

pub unsafe fn bli_cntx_set_l1v_kers(n_kers: dim_t) {
    dyload_lib().bli_cntx_set_l1v_kers.unwrap()(n_kers)
}

pub unsafe fn bli_cntx_set_packm_kers(n_kers: dim_t) {
    dyload_lib().bli_cntx_set_packm_kers.unwrap()(n_kers)
}

pub unsafe fn bli_cntx_set_l3_thresh_funcs(n_funcs: dim_t) {
    dyload_lib().bli_cntx_set_l3_thresh_funcs.unwrap()(n_funcs)
}

pub unsafe fn bli_cntx_print(cntx: *mut cntx_t) {
    dyload_lib().bli_cntx_print.unwrap()(cntx)
}

pub unsafe fn bli_rntm_init_from_global(rntm: *mut rntm_t) {
    dyload_lib().bli_rntm_init_from_global.unwrap()(rntm)
}

pub unsafe fn bli_rntm_set_ways_for_op(
    l3_op: opid_t,
    side: side_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_rntm_set_ways_for_op.unwrap()(l3_op, side, m, n, k, rntm)
}

pub unsafe fn bli_rntm_set_ways_from_rntm(m: dim_t, n: dim_t, k: dim_t, rntm: *mut rntm_t) {
    dyload_lib().bli_rntm_set_ways_from_rntm.unwrap()(m, n, k, rntm)
}

pub unsafe fn bli_rntm_set_ways_from_rntm_sup(m: dim_t, n: dim_t, k: dim_t, rntm: *mut rntm_t) {
    dyload_lib().bli_rntm_set_ways_from_rntm_sup.unwrap()(m, n, k, rntm)
}

pub unsafe fn bli_rntm_print(rntm: *mut rntm_t) {
    dyload_lib().bli_rntm_print.unwrap()(rntm)
}

pub unsafe fn bli_rntm_calc_num_threads_in(bszid_cur: *mut bszid_t, rntm: *mut rntm_t) -> dim_t {
    dyload_lib().bli_rntm_calc_num_threads_in.unwrap()(bszid_cur, rntm)
}

pub unsafe fn bli_nthreads_optimum(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    family: opid_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_nthreads_optimum.unwrap()(a, b, c, family, rntm)
}

pub unsafe fn bli_smart_threading_sup(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    family: opid_t,
    rntm: *mut rntm_t,
    cntx: *mut cntx_t,
) -> err_t {
    dyload_lib().bli_smart_threading_sup.unwrap()(a, b, c, family, rntm, cntx)
}

pub unsafe fn aocl_dnormfv_dynamic(arch_id: arch_t, n_elem: dim_t, nt_ideal: *mut dim_t) {
    dyload_lib().aocl_dnormfv_dynamic.unwrap()(arch_id, n_elem, nt_ideal)
}

pub unsafe fn aocl_znormfv_dynamic(arch_id: arch_t, n_elem: dim_t, nt_ideal: *mut dim_t) {
    dyload_lib().aocl_znormfv_dynamic.unwrap()(arch_id, n_elem, nt_ideal)
}

pub unsafe fn bli_nthreads_l1(
    ker_id: l1vkr_t,
    data_type_a: num_t,
    data_type_b: num_t,
    arch_id: arch_t,
    n_elem: dim_t,
    nt_ideal: *mut dim_t,
) {
    dyload_lib().bli_nthreads_l1.unwrap()(
        ker_id,
        data_type_a,
        data_type_b,
        arch_id,
        n_elem,
        nt_ideal,
    )
}

pub unsafe fn bli_nthreads_l1f(
    ker_id: l1fkr_t,
    data_type_a: num_t,
    data_type_b: num_t,
    arch_id: arch_t,
    n_elem: dim_t,
    nt_ideal: *mut dim_t,
) {
    dyload_lib().bli_nthreads_l1f.unwrap()(
        ker_id,
        data_type_a,
        data_type_b,
        arch_id,
        n_elem,
        nt_ideal,
    )
}

pub unsafe fn bli_gks_init() {
    dyload_lib().bli_gks_init.unwrap()()
}

pub unsafe fn bli_gks_init_once() {
    dyload_lib().bli_gks_init_once.unwrap()()
}

pub unsafe fn bli_gks_finalize() {
    dyload_lib().bli_gks_finalize.unwrap()()
}

pub unsafe fn bli_gks_init_index() {
    dyload_lib().bli_gks_init_index.unwrap()()
}

pub unsafe fn bli_gks_lookup_nat_cntx(id: arch_t) -> *mut cntx_t {
    dyload_lib().bli_gks_lookup_nat_cntx.unwrap()(id)
}

pub unsafe fn bli_gks_lookup_ind_cntx(id: arch_t, ind: ind_t) -> *mut cntx_t {
    dyload_lib().bli_gks_lookup_ind_cntx.unwrap()(id, ind)
}

pub unsafe fn bli_gks_lookup_id(id: arch_t) -> *mut *mut cntx_t {
    dyload_lib().bli_gks_lookup_id.unwrap()(id)
}

pub unsafe fn bli_gks_register_cntx(id: arch_t, nat_fp: void_fp, ref_fp: void_fp, ind_fp: void_fp) {
    dyload_lib().bli_gks_register_cntx.unwrap()(id, nat_fp, ref_fp, ind_fp)
}

pub unsafe fn bli_gks_query_cntx() -> *mut cntx_t {
    dyload_lib().bli_gks_query_cntx.unwrap()()
}

pub unsafe fn bli_gks_query_nat_cntx() -> *mut cntx_t {
    dyload_lib().bli_gks_query_nat_cntx.unwrap()()
}

pub unsafe fn bli_gks_query_cntx_noinit() -> *mut cntx_t {
    dyload_lib().bli_gks_query_cntx_noinit.unwrap()()
}

pub unsafe fn bli_gks_query_ind_cntx(ind: ind_t, dt: num_t) -> *mut cntx_t {
    dyload_lib().bli_gks_query_ind_cntx.unwrap()(ind, dt)
}

pub unsafe fn bli_gks_init_ref_cntx(cntx: *mut cntx_t) {
    dyload_lib().bli_gks_init_ref_cntx.unwrap()(cntx)
}

pub unsafe fn bli_gks_cntx_l3_nat_ukr_is_ref(
    dt: num_t,
    ukr_id: l3ukr_t,
    cntx: *mut cntx_t,
) -> bool {
    dyload_lib().bli_gks_cntx_l3_nat_ukr_is_ref.unwrap()(dt, ukr_id, cntx)
}

pub unsafe fn bli_gks_l3_ukr_impl_string(ukr: l3ukr_t, method: ind_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_gks_l3_ukr_impl_string.unwrap()(ukr, method, dt)
}

pub unsafe fn bli_gks_l3_ukr_impl_type(ukr: l3ukr_t, method: ind_t, dt: num_t) -> kimpl_t {
    dyload_lib().bli_gks_l3_ukr_impl_type.unwrap()(ukr, method, dt)
}

pub unsafe fn bli_gemmind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_gemmind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_gemmtind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_gemmtind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_hemmind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_hemmind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_herkind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_herkind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_her2kind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_her2kind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_symmind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_symmind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_syrkind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_syrkind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_syr2kind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_syr2kind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_trmm3ind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_trmm3ind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_trmmind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_trmmind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_trsmind_find_avail(dt: num_t) -> ind_t {
    dyload_lib().bli_trsmind_find_avail.unwrap()(dt)
}

pub unsafe fn bli_l3_ind_oper_find_avail(oper: opid_t, dt: num_t) -> ind_t {
    dyload_lib().bli_l3_ind_oper_find_avail.unwrap()(oper, dt)
}

pub unsafe fn bli_l3_ind_set_enable_dt(method: ind_t, dt: num_t, status: bool) {
    dyload_lib().bli_l3_ind_set_enable_dt.unwrap()(method, dt, status)
}

pub unsafe fn bli_l3_ind_oper_enable_only(oper: opid_t, method: ind_t, dt: num_t) {
    dyload_lib().bli_l3_ind_oper_enable_only.unwrap()(oper, method, dt)
}

pub unsafe fn bli_l3_ind_oper_set_enable_all(oper: opid_t, dt: num_t, status: bool) {
    dyload_lib().bli_l3_ind_oper_set_enable_all.unwrap()(oper, dt, status)
}

pub unsafe fn bli_l3_ind_oper_set_enable(oper: opid_t, method: ind_t, dt: num_t, status: bool) {
    dyload_lib().bli_l3_ind_oper_set_enable.unwrap()(oper, method, dt, status)
}

pub unsafe fn bli_l3_ind_oper_get_enable(oper: opid_t, method: ind_t, dt: num_t) -> bool {
    dyload_lib().bli_l3_ind_oper_get_enable.unwrap()(oper, method, dt)
}

pub unsafe fn bli_l3_ind_oper_is_impl(oper: opid_t, method: ind_t) -> bool {
    dyload_lib().bli_l3_ind_oper_is_impl.unwrap()(oper, method)
}

pub unsafe fn bli_ind_init() {
    dyload_lib().bli_ind_init.unwrap()()
}

pub unsafe fn bli_ind_finalize() {
    dyload_lib().bli_ind_finalize.unwrap()()
}

pub unsafe fn bli_ind_enable(method: ind_t) {
    dyload_lib().bli_ind_enable.unwrap()(method)
}

pub unsafe fn bli_ind_disable(method: ind_t) {
    dyload_lib().bli_ind_disable.unwrap()(method)
}

pub unsafe fn bli_ind_disable_all() {
    dyload_lib().bli_ind_disable_all.unwrap()()
}

pub unsafe fn bli_ind_enable_dt(method: ind_t, dt: num_t) {
    dyload_lib().bli_ind_enable_dt.unwrap()(method, dt)
}

pub unsafe fn bli_ind_disable_dt(method: ind_t, dt: num_t) {
    dyload_lib().bli_ind_disable_dt.unwrap()(method, dt)
}

pub unsafe fn bli_ind_disable_all_dt(dt: num_t) {
    dyload_lib().bli_ind_disable_all_dt.unwrap()(dt)
}

pub unsafe fn bli_ind_oper_enable_only(oper: opid_t, method: ind_t, dt: num_t) {
    dyload_lib().bli_ind_oper_enable_only.unwrap()(oper, method, dt)
}

pub unsafe fn bli_ind_oper_is_impl(oper: opid_t, method: ind_t) -> bool {
    dyload_lib().bli_ind_oper_is_impl.unwrap()(oper, method)
}

pub unsafe fn bli_ind_oper_find_avail(oper: opid_t, dt: num_t) -> ind_t {
    dyload_lib().bli_ind_oper_find_avail.unwrap()(oper, dt)
}

pub unsafe fn bli_ind_oper_get_avail_impl_string(oper: opid_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_ind_oper_get_avail_impl_string.unwrap()(oper, dt)
}

pub unsafe fn bli_ind_get_impl_string(method: ind_t) -> *mut c_char {
    dyload_lib().bli_ind_get_impl_string.unwrap()(method)
}

pub unsafe fn bli_ind_map_cdt_to_index(dt: num_t) -> num_t {
    dyload_lib().bli_ind_map_cdt_to_index.unwrap()(dt)
}

pub unsafe fn bli_pba_query() -> *mut pba_t {
    dyload_lib().bli_pba_query.unwrap()()
}

pub unsafe fn bli_pba_init(cntx: *mut cntx_t) {
    dyload_lib().bli_pba_init.unwrap()(cntx)
}

pub unsafe fn bli_pba_finalize() {
    dyload_lib().bli_pba_finalize.unwrap()()
}

pub unsafe fn bli_pba_acquire_m(
    rntm: *mut rntm_t,
    req_size: siz_t,
    buf_type: packbuf_t,
    mem: *mut mem_t,
) {
    dyload_lib().bli_pba_acquire_m.unwrap()(rntm, req_size, buf_type, mem)
}

pub unsafe fn bli_pba_release(rntm: *mut rntm_t, mem: *mut mem_t) {
    dyload_lib().bli_pba_release.unwrap()(rntm, mem)
}

pub unsafe fn bli_pba_rntm_set_pba(rntm: *mut rntm_t) {
    dyload_lib().bli_pba_rntm_set_pba.unwrap()(rntm)
}

pub unsafe fn bli_pba_pool_size(pba: *mut pba_t, buf_type: packbuf_t) -> siz_t {
    dyload_lib().bli_pba_pool_size.unwrap()(pba, buf_type)
}

pub unsafe fn bli_pba_init_pools(cntx: *mut cntx_t, pba: *mut pba_t) {
    dyload_lib().bli_pba_init_pools.unwrap()(cntx, pba)
}

pub unsafe fn bli_pba_finalize_pools(pba: *mut pba_t) {
    dyload_lib().bli_pba_finalize_pools.unwrap()(pba)
}

pub unsafe fn bli_pba_compute_pool_block_sizes(
    bs_a: *mut siz_t,
    bs_b: *mut siz_t,
    bs_c: *mut siz_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_pba_compute_pool_block_sizes.unwrap()(bs_a, bs_b, bs_c, cntx)
}

pub unsafe fn bli_pba_compute_pool_block_sizes_dt(
    dt: num_t,
    bs_a: *mut siz_t,
    bs_b: *mut siz_t,
    bs_c: *mut siz_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_pba_compute_pool_block_sizes_dt.unwrap()(dt, bs_a, bs_b, bs_c, cntx)
}

pub unsafe fn bli_pool_init(
    num_blocks: siz_t,
    block_ptrs_len: siz_t,
    block_size: siz_t,
    align_size: siz_t,
    offset_size: siz_t,
    malloc_fp: malloc_ft,
    free_fp: free_ft,
    pool: *mut pool_t,
) {
    dyload_lib().bli_pool_init.unwrap()(
        num_blocks,
        block_ptrs_len,
        block_size,
        align_size,
        offset_size,
        malloc_fp,
        free_fp,
        pool,
    )
}

pub unsafe fn bli_pool_finalize(pool: *mut pool_t) {
    dyload_lib().bli_pool_finalize.unwrap()(pool)
}

pub unsafe fn bli_pool_reinit(
    num_blocks_new: siz_t,
    block_ptrs_len_new: siz_t,
    block_size_new: siz_t,
    align_size_new: siz_t,
    offset_size_new: siz_t,
    pool: *mut pool_t,
) {
    dyload_lib().bli_pool_reinit.unwrap()(
        num_blocks_new,
        block_ptrs_len_new,
        block_size_new,
        align_size_new,
        offset_size_new,
        pool,
    )
}

pub unsafe fn bli_pool_checkout_block(req_size: siz_t, block: *mut pblk_t, pool: *mut pool_t) {
    dyload_lib().bli_pool_checkout_block.unwrap()(req_size, block, pool)
}

pub unsafe fn bli_pool_checkin_block(block: *mut pblk_t, pool: *mut pool_t) {
    dyload_lib().bli_pool_checkin_block.unwrap()(block, pool)
}

pub unsafe fn bli_pool_grow(num_blocks_add: siz_t, pool: *mut pool_t) {
    dyload_lib().bli_pool_grow.unwrap()(num_blocks_add, pool)
}

pub unsafe fn bli_pool_shrink(num_blocks_sub: siz_t, pool: *mut pool_t) {
    dyload_lib().bli_pool_shrink.unwrap()(num_blocks_sub, pool)
}

pub unsafe fn bli_pool_alloc_block(
    block_size: siz_t,
    align_size: siz_t,
    offset_size: siz_t,
    malloc_fp: malloc_ft,
    block: *mut pblk_t,
) {
    dyload_lib().bli_pool_alloc_block.unwrap()(
        block_size,
        align_size,
        offset_size,
        malloc_fp,
        block,
    )
}

pub unsafe fn bli_pool_free_block(offset_size: siz_t, free_fp: free_ft, block: *mut pblk_t) {
    dyload_lib().bli_pool_free_block.unwrap()(offset_size, free_fp, block)
}

pub unsafe fn bli_pool_print(pool: *mut pool_t) {
    dyload_lib().bli_pool_print.unwrap()(pool)
}

pub unsafe fn bli_pblk_print(pblk: *mut pblk_t) {
    dyload_lib().bli_pblk_print.unwrap()(pblk)
}

pub unsafe fn bli_array_init(num_elem: siz_t, elem_size: siz_t, array: *mut array_t) {
    dyload_lib().bli_array_init.unwrap()(num_elem, elem_size, array)
}

pub unsafe fn bli_array_resize(num_elem_new: siz_t, array: *mut array_t) {
    dyload_lib().bli_array_resize.unwrap()(num_elem_new, array)
}

pub unsafe fn bli_array_finalize(array: *mut array_t) {
    dyload_lib().bli_array_finalize.unwrap()(array)
}

pub unsafe fn bli_array_elem(index: siz_t, array: *mut array_t) -> *mut c_void {
    dyload_lib().bli_array_elem.unwrap()(index, array)
}

pub unsafe fn bli_array_set_elem(elem: *mut c_void, index: siz_t, array: *mut array_t) {
    dyload_lib().bli_array_set_elem.unwrap()(elem, index, array)
}

pub unsafe fn bli_apool_init(apool: *mut apool_t) {
    dyload_lib().bli_apool_init.unwrap()(apool)
}

pub unsafe fn bli_apool_finalize(apool: *mut apool_t) {
    dyload_lib().bli_apool_finalize.unwrap()(apool)
}

pub unsafe fn bli_apool_checkout_array(n_threads: siz_t, apool: *mut apool_t) -> *mut array_t {
    dyload_lib().bli_apool_checkout_array.unwrap()(n_threads, apool)
}

pub unsafe fn bli_apool_checkin_array(array: *mut array_t, apool: *mut apool_t) {
    dyload_lib().bli_apool_checkin_array.unwrap()(array, apool)
}

pub unsafe fn bli_apool_array_elem(index: siz_t, array: *mut array_t) -> *mut pool_t {
    dyload_lib().bli_apool_array_elem.unwrap()(index, array)
}

pub unsafe fn bli_apool_grow(num_blocks_add: siz_t, apool: *mut apool_t) {
    dyload_lib().bli_apool_grow.unwrap()(num_blocks_add, apool)
}

pub unsafe fn bli_apool_alloc_block(num_elem: siz_t, array_p: *mut *mut array_t) {
    dyload_lib().bli_apool_alloc_block.unwrap()(num_elem, array_p)
}

pub unsafe fn bli_apool_free_block(array: *mut array_t) {
    dyload_lib().bli_apool_free_block.unwrap()(array)
}

pub unsafe fn bli_sba_query() -> *mut apool_t {
    dyload_lib().bli_sba_query.unwrap()()
}

pub unsafe fn bli_sba_init() {
    dyload_lib().bli_sba_init.unwrap()()
}

pub unsafe fn bli_sba_finalize() {
    dyload_lib().bli_sba_finalize.unwrap()()
}

pub unsafe fn bli_sba_checkout_array(n_threads: siz_t) -> *mut array_t {
    dyload_lib().bli_sba_checkout_array.unwrap()(n_threads)
}

pub unsafe fn bli_sba_checkin_array(array: *mut array_t) {
    dyload_lib().bli_sba_checkin_array.unwrap()(array)
}

pub unsafe fn bli_sba_rntm_set_pool(index: siz_t, array: *mut array_t, rntm: *mut rntm_t) {
    dyload_lib().bli_sba_rntm_set_pool.unwrap()(index, array, rntm)
}

pub unsafe fn bli_sba_acquire(rntm: *mut rntm_t, req_size: siz_t) -> *mut c_void {
    dyload_lib().bli_sba_acquire.unwrap()(rntm, req_size)
}

pub unsafe fn bli_sba_release(rntm: *mut rntm_t, block: *mut c_void) {
    dyload_lib().bli_sba_release.unwrap()(rntm, block)
}

pub unsafe fn bli_memsys_init() {
    dyload_lib().bli_memsys_init.unwrap()()
}

pub unsafe fn bli_memsys_finalize() {
    dyload_lib().bli_memsys_finalize.unwrap()()
}

pub unsafe fn bli_acquire_mpart_t2b_check(
    requested_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_t2b_check.unwrap()(requested_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_l2r_check(
    requested_part: subpart_t,
    j: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_l2r_check.unwrap()(requested_part, j, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_tl2br_check(
    requested_part: subpart_t,
    ij: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_tl2br_check.unwrap()(requested_part, ij, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart(
    i: dim_t,
    j: dim_t,
    m: dim_t,
    n: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart.unwrap()(i, j, m, n, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_t2b(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_t2b.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_b2t(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_b2t.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_l2r(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_l2r.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_r2l(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_r2l.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_tl2br(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_tl2br.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_br2tl(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_br2tl.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_mdim(
    direct: dir_t,
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_mdim.unwrap()(direct, req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_ndim(
    direct: dir_t,
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_ndim.unwrap()(direct, req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mpart_mndim(
    direct: dir_t,
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_mpart_mndim.unwrap()(direct, req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_vpart_f2b(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_vpart_f2b.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_vpart_b2f(
    req_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_acquire_vpart_b2f.unwrap()(req_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_acquire_mij(i: dim_t, j: dim_t, obj: *mut obj_t, sub_obj: *mut obj_t) {
    dyload_lib().bli_acquire_mij.unwrap()(i, j, obj, sub_obj)
}

pub unsafe fn bli_acquire_vi(i: dim_t, obj: *mut obj_t, sub_obj: *mut obj_t) {
    dyload_lib().bli_acquire_vi.unwrap()(i, obj, sub_obj)
}

pub unsafe fn bli_prune_unref_mparts(p: *mut obj_t, mdim_p: mdim_t, s: *mut obj_t, mdim_s: mdim_t) {
    dyload_lib().bli_prune_unref_mparts.unwrap()(p, mdim_p, s, mdim_s)
}

pub unsafe fn bli_obj_equals(a: *mut obj_t, b: *mut obj_t) -> bool {
    dyload_lib().bli_obj_equals.unwrap()(a, b)
}

pub unsafe fn bli_obj_imag_equals(a: *mut obj_t, b: *mut obj_t) -> bool {
    dyload_lib().bli_obj_imag_equals.unwrap()(a, b)
}

pub unsafe fn bli_obj_imag_is_zero(a: *mut obj_t) -> bool {
    dyload_lib().bli_obj_imag_is_zero.unwrap()(a)
}

pub unsafe fn bli_param_map_blis_to_netlib_side(side: side_t, blas_side: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_netlib_side.unwrap()(side, blas_side)
}

pub unsafe fn bli_param_map_blis_to_netlib_uplo(uplo: uplo_t, blas_uplo: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_netlib_uplo.unwrap()(uplo, blas_uplo)
}

pub unsafe fn bli_param_map_blis_to_netlib_trans(trans: trans_t, blas_trans: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_netlib_trans.unwrap()(trans, blas_trans)
}

pub unsafe fn bli_param_map_blis_to_netlib_diag(diag: diag_t, blas_diag: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_netlib_diag.unwrap()(diag, blas_diag)
}

pub unsafe fn bli_param_map_blis_to_netlib_machval(machval: machval_t, blas_machval: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_netlib_machval.unwrap()(machval, blas_machval)
}

pub unsafe fn bli_param_map_char_to_blis_side(side: c_char, blis_side: *mut side_t) {
    dyload_lib().bli_param_map_char_to_blis_side.unwrap()(side, blis_side)
}

pub unsafe fn bli_param_map_char_to_blis_uplo(uplo: c_char, blis_uplo: *mut uplo_t) {
    dyload_lib().bli_param_map_char_to_blis_uplo.unwrap()(uplo, blis_uplo)
}

pub unsafe fn bli_param_map_char_to_blis_trans(trans: c_char, blis_trans: *mut trans_t) {
    dyload_lib().bli_param_map_char_to_blis_trans.unwrap()(trans, blis_trans)
}

pub unsafe fn bli_param_map_char_to_blis_conj(conj: c_char, blis_conj: *mut conj_t) {
    dyload_lib().bli_param_map_char_to_blis_conj.unwrap()(conj, blis_conj)
}

pub unsafe fn bli_param_map_char_to_blis_diag(diag: c_char, blis_diag: *mut diag_t) {
    dyload_lib().bli_param_map_char_to_blis_diag.unwrap()(diag, blis_diag)
}

pub unsafe fn bli_param_map_char_to_blis_dt(dt: c_char, blis_dt: *mut num_t) {
    dyload_lib().bli_param_map_char_to_blis_dt.unwrap()(dt, blis_dt)
}

pub unsafe fn bli_param_map_blis_to_char_side(blis_side: side_t, side: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_char_side.unwrap()(blis_side, side)
}

pub unsafe fn bli_param_map_blis_to_char_uplo(blis_uplo: uplo_t, uplo: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_char_uplo.unwrap()(blis_uplo, uplo)
}

pub unsafe fn bli_param_map_blis_to_char_trans(blis_trans: trans_t, trans: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_char_trans.unwrap()(blis_trans, trans)
}

pub unsafe fn bli_param_map_blis_to_char_conj(blis_conj: conj_t, conj: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_char_conj.unwrap()(blis_conj, conj)
}

pub unsafe fn bli_param_map_blis_to_char_diag(blis_diag: diag_t, diag: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_char_diag.unwrap()(blis_diag, diag)
}

pub unsafe fn bli_param_map_blis_to_char_dt(blis_dt: num_t, dt: *mut c_char) {
    dyload_lib().bli_param_map_blis_to_char_dt.unwrap()(blis_dt, dt)
}

pub unsafe fn bli_clock() -> f64 {
    dyload_lib().bli_clock.unwrap()()
}

pub unsafe fn bli_clock_min_diff(time_min: f64, time_start: f64) -> f64 {
    dyload_lib().bli_clock_min_diff.unwrap()(time_min, time_start)
}

pub unsafe fn bli_clock_helper() -> f64 {
    dyload_lib().bli_clock_helper.unwrap()()
}

pub unsafe fn bli_check_error_code_helper(code: gint_t, file: *mut c_char, line: guint_t) -> err_t {
    dyload_lib().bli_check_error_code_helper.unwrap()(code, file, line)
}

pub unsafe fn bli_check_valid_error_level(level: errlev_t) -> err_t {
    dyload_lib().bli_check_valid_error_level.unwrap()(level)
}

pub unsafe fn bli_check_null_pointer(ptr: *mut c_void) -> err_t {
    dyload_lib().bli_check_null_pointer.unwrap()(ptr)
}

pub unsafe fn bli_check_valid_side(side: side_t) -> err_t {
    dyload_lib().bli_check_valid_side.unwrap()(side)
}

pub unsafe fn bli_check_valid_uplo(uplo: uplo_t) -> err_t {
    dyload_lib().bli_check_valid_uplo.unwrap()(uplo)
}

pub unsafe fn bli_check_valid_trans(trans: trans_t) -> err_t {
    dyload_lib().bli_check_valid_trans.unwrap()(trans)
}

pub unsafe fn bli_check_valid_diag(diag: diag_t) -> err_t {
    dyload_lib().bli_check_valid_diag.unwrap()(diag)
}

pub unsafe fn bli_check_nonunit_diag(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_nonunit_diag.unwrap()(a)
}

pub unsafe fn bli_check_valid_datatype(dt: num_t) -> err_t {
    dyload_lib().bli_check_valid_datatype.unwrap()(dt)
}

pub unsafe fn bli_check_object_valid_datatype(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_object_valid_datatype.unwrap()(a)
}

pub unsafe fn bli_check_noninteger_datatype(dt: num_t) -> err_t {
    dyload_lib().bli_check_noninteger_datatype.unwrap()(dt)
}

pub unsafe fn bli_check_noninteger_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_noninteger_object.unwrap()(a)
}

pub unsafe fn bli_check_nonconstant_datatype(dt: num_t) -> err_t {
    dyload_lib().bli_check_nonconstant_datatype.unwrap()(dt)
}

pub unsafe fn bli_check_nonconstant_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_nonconstant_object.unwrap()(a)
}

pub unsafe fn bli_check_floating_datatype(dt: num_t) -> err_t {
    dyload_lib().bli_check_floating_datatype.unwrap()(dt)
}

pub unsafe fn bli_check_floating_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_floating_object.unwrap()(a)
}

pub unsafe fn bli_check_real_datatype(dt: num_t) -> err_t {
    dyload_lib().bli_check_real_datatype.unwrap()(dt)
}

pub unsafe fn bli_check_real_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_real_object.unwrap()(a)
}

pub unsafe fn bli_check_integer_datatype(dt: num_t) -> err_t {
    dyload_lib().bli_check_integer_datatype.unwrap()(dt)
}

pub unsafe fn bli_check_integer_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_integer_object.unwrap()(a)
}

pub unsafe fn bli_check_consistent_datatypes(dt_a: num_t, dt_b: num_t) -> err_t {
    dyload_lib().bli_check_consistent_datatypes.unwrap()(dt_a, dt_b)
}

pub unsafe fn bli_check_consistent_object_datatypes(a: *mut obj_t, b: *mut obj_t) -> err_t {
    dyload_lib().bli_check_consistent_object_datatypes.unwrap()(a, b)
}

pub unsafe fn bli_check_datatype_real_proj_of(dt_c: num_t, dt_r: num_t) -> err_t {
    dyload_lib().bli_check_datatype_real_proj_of.unwrap()(dt_c, dt_r)
}

pub unsafe fn bli_check_object_real_proj_of(c: *mut obj_t, r: *mut obj_t) -> err_t {
    dyload_lib().bli_check_object_real_proj_of.unwrap()(c, r)
}

pub unsafe fn bli_check_real_valued_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_real_valued_object.unwrap()(a)
}

pub unsafe fn bli_check_consistent_precisions(dt_a: num_t, dt_b: num_t) -> err_t {
    dyload_lib().bli_check_consistent_precisions.unwrap()(dt_a, dt_b)
}

pub unsafe fn bli_check_consistent_object_precisions(a: *mut obj_t, b: *mut obj_t) -> err_t {
    dyload_lib().bli_check_consistent_object_precisions.unwrap()(a, b)
}

pub unsafe fn bli_check_conformal_dims(a: *mut obj_t, b: *mut obj_t) -> err_t {
    dyload_lib().bli_check_conformal_dims.unwrap()(a, b)
}

pub unsafe fn bli_check_level3_dims(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) -> err_t {
    dyload_lib().bli_check_level3_dims.unwrap()(a, b, c)
}

pub unsafe fn bli_check_scalar_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_scalar_object.unwrap()(a)
}

pub unsafe fn bli_check_vector_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_vector_object.unwrap()(a)
}

pub unsafe fn bli_check_matrix_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_matrix_object.unwrap()(a)
}

pub unsafe fn bli_check_equal_vector_lengths(x: *mut obj_t, y: *mut obj_t) -> err_t {
    dyload_lib().bli_check_equal_vector_lengths.unwrap()(x, y)
}

pub unsafe fn bli_check_square_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_square_object.unwrap()(a)
}

pub unsafe fn bli_check_object_length_equals(a: *mut obj_t, m: dim_t) -> err_t {
    dyload_lib().bli_check_object_length_equals.unwrap()(a, m)
}

pub unsafe fn bli_check_object_width_equals(a: *mut obj_t, n: dim_t) -> err_t {
    dyload_lib().bli_check_object_width_equals.unwrap()(a, n)
}

pub unsafe fn bli_check_vector_dim_equals(a: *mut obj_t, n: dim_t) -> err_t {
    dyload_lib().bli_check_vector_dim_equals.unwrap()(a, n)
}

pub unsafe fn bli_check_object_diag_offset_equals(a: *mut obj_t, offset: doff_t) -> err_t {
    dyload_lib().bli_check_object_diag_offset_equals.unwrap()(a, offset)
}

pub unsafe fn bli_check_matrix_strides(
    m: dim_t,
    n: dim_t,
    rs: inc_t,
    cs: inc_t,
    is: inc_t,
) -> err_t {
    dyload_lib().bli_check_matrix_strides.unwrap()(m, n, rs, cs, is)
}

pub unsafe fn bli_check_general_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_general_object.unwrap()(a)
}

pub unsafe fn bli_check_hermitian_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_hermitian_object.unwrap()(a)
}

pub unsafe fn bli_check_symmetric_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_symmetric_object.unwrap()(a)
}

pub unsafe fn bli_check_triangular_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_triangular_object.unwrap()(a)
}

pub unsafe fn bli_check_object_struc(a: *mut obj_t, struc: struc_t) -> err_t {
    dyload_lib().bli_check_object_struc.unwrap()(a, struc)
}

pub unsafe fn bli_check_upper_or_lower_object(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_upper_or_lower_object.unwrap()(a)
}

pub unsafe fn bli_check_valid_3x1_subpart(part: subpart_t) -> err_t {
    dyload_lib().bli_check_valid_3x1_subpart.unwrap()(part)
}

pub unsafe fn bli_check_valid_1x3_subpart(part: subpart_t) -> err_t {
    dyload_lib().bli_check_valid_1x3_subpart.unwrap()(part)
}

pub unsafe fn bli_check_valid_3x3_subpart(part: subpart_t) -> err_t {
    dyload_lib().bli_check_valid_3x3_subpart.unwrap()(part)
}

pub unsafe fn bli_check_valid_cntl(cntl: *mut c_void) -> err_t {
    dyload_lib().bli_check_valid_cntl.unwrap()(cntl)
}

pub unsafe fn bli_check_packm_schema_on_unpack(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_packm_schema_on_unpack.unwrap()(a)
}

pub unsafe fn bli_check_packv_schema_on_unpack(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_packv_schema_on_unpack.unwrap()(a)
}

pub unsafe fn bli_check_object_buffer(a: *mut obj_t) -> err_t {
    dyload_lib().bli_check_object_buffer.unwrap()(a)
}

pub unsafe fn bli_check_valid_malloc_buf(ptr: *mut c_void) -> err_t {
    dyload_lib().bli_check_valid_malloc_buf.unwrap()(ptr)
}

pub unsafe fn bli_check_valid_packbuf(buf_type: packbuf_t) -> err_t {
    dyload_lib().bli_check_valid_packbuf.unwrap()(buf_type)
}

pub unsafe fn bli_check_if_exhausted_pool(pool: *mut pool_t) -> err_t {
    dyload_lib().bli_check_if_exhausted_pool.unwrap()(pool)
}

pub unsafe fn bli_check_sufficient_stack_buf_size(dt: num_t, cntx: *mut cntx_t) -> err_t {
    dyload_lib().bli_check_sufficient_stack_buf_size.unwrap()(dt, cntx)
}

pub unsafe fn bli_check_alignment_is_power_of_two(align_size: usize) -> err_t {
    dyload_lib().bli_check_alignment_is_power_of_two.unwrap()(align_size)
}

pub unsafe fn bli_check_alignment_is_mult_of_ptr_size(align_size: usize) -> err_t {
    dyload_lib().bli_check_alignment_is_mult_of_ptr_size.unwrap()(align_size)
}

pub unsafe fn bli_check_object_alias_of(a: *mut obj_t, b: *mut obj_t) -> err_t {
    dyload_lib().bli_check_object_alias_of.unwrap()(a, b)
}

pub unsafe fn bli_check_valid_arch_id(id: arch_t) -> err_t {
    dyload_lib().bli_check_valid_arch_id.unwrap()(id)
}

pub unsafe fn bli_check_valid_model_id(arch_id: arch_t, model_id: model_t) -> err_t {
    dyload_lib().bli_check_valid_model_id.unwrap()(arch_id, model_id)
}

pub unsafe fn bli_check_initialized_gks_cntx(cntx: *mut *mut cntx_t) -> err_t {
    dyload_lib().bli_check_initialized_gks_cntx.unwrap()(cntx)
}

pub unsafe fn bli_check_valid_mc_mod_mult(mc: *mut blksz_t, mr: *mut blksz_t) -> err_t {
    dyload_lib().bli_check_valid_mc_mod_mult.unwrap()(mc, mr)
}

pub unsafe fn bli_check_valid_nc_mod_mult(nc: *mut blksz_t, nr: *mut blksz_t) -> err_t {
    dyload_lib().bli_check_valid_nc_mod_mult.unwrap()(nc, nr)
}

pub unsafe fn bli_check_valid_kc_mod_mult(kc: *mut blksz_t, kr: *mut blksz_t) -> err_t {
    dyload_lib().bli_check_valid_kc_mod_mult.unwrap()(kc, kr)
}

pub unsafe fn bli_error_checking_level() -> errlev_t {
    dyload_lib().bli_error_checking_level.unwrap()()
}

pub unsafe fn bli_error_checking_level_set(new_level: errlev_t) {
    dyload_lib().bli_error_checking_level_set.unwrap()(new_level)
}

pub unsafe fn bli_error_checking_is_enabled() -> bool {
    dyload_lib().bli_error_checking_is_enabled.unwrap()()
}

pub unsafe fn bli_print_msg(str_: *mut c_char, file: *mut c_char, line: guint_t) {
    dyload_lib().bli_print_msg.unwrap()(str_, file, line)
}

pub unsafe fn bli_abort() {
    dyload_lib().bli_abort.unwrap()()
}

pub unsafe fn bli_error_string_for_code(code: gint_t) -> *mut c_char {
    dyload_lib().bli_error_string_for_code.unwrap()(code)
}

pub unsafe fn bli_lsame(
    ca: *mut bla_character,
    cb: *mut bla_character,
    ca_len: ftnlen,
    cb_len: ftnlen,
) -> bla_logical {
    dyload_lib().bli_lsame.unwrap()(ca, cb, ca_len, cb_len)
}

pub unsafe fn bli_slamch(cmach: *mut bla_character, cmach_len: ftnlen) -> bla_real {
    dyload_lib().bli_slamch.unwrap()(cmach, cmach_len)
}

pub unsafe fn bli_dlamch(cmach: *mut bla_character, cmach_len: ftnlen) -> bla_double {
    dyload_lib().bli_dlamch.unwrap()(cmach, cmach_len)
}

pub unsafe fn bli_machval(mval: machval_t, v: *mut obj_t) {
    dyload_lib().bli_machval.unwrap()(mval, v)
}

pub unsafe fn bli_smachval(mval: machval_t, v: *mut c_void) {
    dyload_lib().bli_smachval.unwrap()(mval, v)
}

pub unsafe fn bli_dmachval(mval: machval_t, v: *mut c_void) {
    dyload_lib().bli_dmachval.unwrap()(mval, v)
}

pub unsafe fn bli_cmachval(mval: machval_t, v: *mut c_void) {
    dyload_lib().bli_cmachval.unwrap()(mval, v)
}

pub unsafe fn bli_zmachval(mval: machval_t, v: *mut c_void) {
    dyload_lib().bli_zmachval.unwrap()(mval, v)
}

pub unsafe fn bli_getopt_init_state(opterr: c_int, state: *mut getopt_t) {
    dyload_lib().bli_getopt_init_state.unwrap()(opterr, state)
}

pub unsafe fn bli_getopt(
    argc: c_int,
    argv: *mut *mut c_char,
    optstring: *const c_char,
    state: *mut getopt_t,
) -> c_int {
    dyload_lib().bli_getopt.unwrap()(argc, argv, optstring, state)
}

pub unsafe fn bli_cntl_create_node(
    rntm: *mut rntm_t,
    family: opid_t,
    bszid: bszid_t,
    var_func: void_fp,
    params: *mut c_void,
    sub_node: *mut cntl_t,
) -> *mut cntl_t {
    dyload_lib().bli_cntl_create_node.unwrap()(rntm, family, bszid, var_func, params, sub_node)
}

pub unsafe fn bli_cntl_free_node(rntm: *mut rntm_t, cntl: *mut cntl_t) {
    dyload_lib().bli_cntl_free_node.unwrap()(rntm, cntl)
}

pub unsafe fn bli_cntl_clear_node(cntl: *mut cntl_t) {
    dyload_lib().bli_cntl_clear_node.unwrap()(cntl)
}

pub unsafe fn bli_cntl_free(rntm: *mut rntm_t, cntl: *mut cntl_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_cntl_free.unwrap()(rntm, cntl, thread)
}

pub unsafe fn bli_cntl_free_w_thrinfo(
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cntl_free_w_thrinfo.unwrap()(rntm, cntl, thread)
}

pub unsafe fn bli_cntl_free_wo_thrinfo(rntm: *mut rntm_t, cntl: *mut cntl_t) {
    dyload_lib().bli_cntl_free_wo_thrinfo.unwrap()(rntm, cntl)
}

pub unsafe fn bli_cntl_copy(rntm: *mut rntm_t, cntl: *mut cntl_t) -> *mut cntl_t {
    dyload_lib().bli_cntl_copy.unwrap()(rntm, cntl)
}

pub unsafe fn bli_cntl_mark_family(family: opid_t, cntl: *mut cntl_t) {
    dyload_lib().bli_cntl_mark_family.unwrap()(family, cntl)
}

pub unsafe fn bli_cntl_calc_num_threads_in(rntm: *mut rntm_t, cntl: *mut cntl_t) -> dim_t {
    dyload_lib().bli_cntl_calc_num_threads_in.unwrap()(rntm, cntl)
}

pub unsafe fn bli_env_get_var(env: *const c_char, fallback: gint_t) -> gint_t {
    dyload_lib().bli_env_get_var.unwrap()(env, fallback)
}

pub unsafe fn bli_env_get_var_arch_type(env: *const c_char, fallback: gint_t) -> gint_t {
    dyload_lib().bli_env_get_var_arch_type.unwrap()(env, fallback)
}

pub unsafe fn bli_env_get_var_model_type(env: *const c_char, fallback: gint_t) -> gint_t {
    dyload_lib().bli_env_get_var_model_type.unwrap()(env, fallback)
}

pub unsafe fn bli_pack_init() {
    dyload_lib().bli_pack_init.unwrap()()
}

pub unsafe fn bli_pack_finalize() {
    dyload_lib().bli_pack_finalize.unwrap()()
}

pub unsafe fn bli_pack_get_pack_a(pack_a: *mut bool) {
    dyload_lib().bli_pack_get_pack_a.unwrap()(pack_a)
}

pub unsafe fn bli_pack_get_pack_b(pack_b: *mut bool) {
    dyload_lib().bli_pack_get_pack_b.unwrap()(pack_b)
}

pub unsafe fn bli_pack_set_pack_a(pack_a: bool) {
    dyload_lib().bli_pack_set_pack_a.unwrap()(pack_a)
}

pub unsafe fn bli_pack_set_pack_b(pack_b: bool) {
    dyload_lib().bli_pack_set_pack_b.unwrap()(pack_b)
}

pub unsafe fn bli_pack_init_rntm_from_env(rntm: *mut rntm_t) {
    dyload_lib().bli_pack_init_rntm_from_env.unwrap()(rntm)
}

pub unsafe fn bli_info_get_version_str() -> *mut c_char {
    dyload_lib().bli_info_get_version_str.unwrap()()
}

pub unsafe fn bli_info_get_int_type_size_str() -> *mut c_char {
    dyload_lib().bli_info_get_int_type_size_str.unwrap()()
}

pub unsafe fn bli_info_get_int_type_size() -> gint_t {
    dyload_lib().bli_info_get_int_type_size.unwrap()()
}

pub unsafe fn bli_info_get_num_fp_types() -> gint_t {
    dyload_lib().bli_info_get_num_fp_types.unwrap()()
}

pub unsafe fn bli_info_get_max_type_size() -> gint_t {
    dyload_lib().bli_info_get_max_type_size.unwrap()()
}

pub unsafe fn bli_info_get_page_size() -> gint_t {
    dyload_lib().bli_info_get_page_size.unwrap()()
}

pub unsafe fn bli_info_get_simd_num_registers() -> gint_t {
    dyload_lib().bli_info_get_simd_num_registers.unwrap()()
}

pub unsafe fn bli_info_get_simd_size() -> gint_t {
    dyload_lib().bli_info_get_simd_size.unwrap()()
}

pub unsafe fn bli_info_get_simd_align_size() -> gint_t {
    dyload_lib().bli_info_get_simd_align_size.unwrap()()
}

pub unsafe fn bli_info_get_stack_buf_max_size() -> gint_t {
    dyload_lib().bli_info_get_stack_buf_max_size.unwrap()()
}

pub unsafe fn bli_info_get_stack_buf_align_size() -> gint_t {
    dyload_lib().bli_info_get_stack_buf_align_size.unwrap()()
}

pub unsafe fn bli_info_get_heap_addr_align_size() -> gint_t {
    dyload_lib().bli_info_get_heap_addr_align_size.unwrap()()
}

pub unsafe fn bli_info_get_heap_stride_align_size() -> gint_t {
    dyload_lib().bli_info_get_heap_stride_align_size.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_align_size_a() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_align_size_a.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_align_size_b() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_align_size_b.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_align_size_c() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_align_size_c.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_align_size_gen() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_align_size_gen.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_offset_size_a() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_offset_size_a.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_offset_size_b() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_offset_size_b.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_offset_size_c() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_offset_size_c.unwrap()()
}

pub unsafe fn bli_info_get_pool_addr_offset_size_gen() -> gint_t {
    dyload_lib().bli_info_get_pool_addr_offset_size_gen.unwrap()()
}

pub unsafe fn bli_info_get_enable_stay_auto_init() -> gint_t {
    dyload_lib().bli_info_get_enable_stay_auto_init.unwrap()()
}

pub unsafe fn bli_info_get_enable_blas() -> gint_t {
    dyload_lib().bli_info_get_enable_blas.unwrap()()
}

pub unsafe fn bli_info_get_enable_cblas() -> gint_t {
    dyload_lib().bli_info_get_enable_cblas.unwrap()()
}

pub unsafe fn bli_info_get_blas_int_type_size() -> gint_t {
    dyload_lib().bli_info_get_blas_int_type_size.unwrap()()
}

pub unsafe fn bli_info_get_enable_pba_pools() -> gint_t {
    dyload_lib().bli_info_get_enable_pba_pools.unwrap()()
}

pub unsafe fn bli_info_get_enable_sba_pools() -> gint_t {
    dyload_lib().bli_info_get_enable_sba_pools.unwrap()()
}

pub unsafe fn bli_info_get_enable_threading() -> gint_t {
    dyload_lib().bli_info_get_enable_threading.unwrap()()
}

pub unsafe fn bli_info_get_enable_openmp() -> gint_t {
    dyload_lib().bli_info_get_enable_openmp.unwrap()()
}

pub unsafe fn bli_info_get_enable_pthreads() -> gint_t {
    dyload_lib().bli_info_get_enable_pthreads.unwrap()()
}

pub unsafe fn bli_info_get_thread_part_jrir_slab() -> gint_t {
    dyload_lib().bli_info_get_thread_part_jrir_slab.unwrap()()
}

pub unsafe fn bli_info_get_thread_part_jrir_rr() -> gint_t {
    dyload_lib().bli_info_get_thread_part_jrir_rr.unwrap()()
}

pub unsafe fn bli_info_get_enable_memkind() -> gint_t {
    dyload_lib().bli_info_get_enable_memkind.unwrap()()
}

pub unsafe fn bli_info_get_enable_sandbox() -> gint_t {
    dyload_lib().bli_info_get_enable_sandbox.unwrap()()
}

pub unsafe fn bli_info_get_info_value() -> gint_t {
    dyload_lib().bli_info_get_info_value.unwrap()()
}

pub unsafe fn bli_info_get_gemm_ukr_impl_string(method: ind_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_gemm_ukr_impl_string.unwrap()(method, dt)
}

pub unsafe fn bli_info_get_gemmtrsm_l_ukr_impl_string(method: ind_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_gemmtrsm_l_ukr_impl_string.unwrap()(method, dt)
}

pub unsafe fn bli_info_get_gemmtrsm_u_ukr_impl_string(method: ind_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_gemmtrsm_u_ukr_impl_string.unwrap()(method, dt)
}

pub unsafe fn bli_info_get_trsm_l_ukr_impl_string(method: ind_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_trsm_l_ukr_impl_string.unwrap()(method, dt)
}

pub unsafe fn bli_info_get_trsm_u_ukr_impl_string(method: ind_t, dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_trsm_u_ukr_impl_string.unwrap()(method, dt)
}

pub unsafe fn bli_info_get_gemm_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_gemm_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_hemm_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_hemm_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_herk_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_herk_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_her2k_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_her2k_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_symm_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_symm_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_syrk_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_syrk_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_syr2k_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_syr2k_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_trmm_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_trmm_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_trmm3_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_trmm3_impl_string.unwrap()(dt)
}

pub unsafe fn bli_info_get_trsm_impl_string(dt: num_t) -> *mut c_char {
    dyload_lib().bli_info_get_trsm_impl_string.unwrap()(dt)
}

pub unsafe fn bli_arch_query_id() -> arch_t {
    dyload_lib().bli_arch_query_id.unwrap()()
}

pub unsafe fn bli_aocl_enable_instruction_query() -> bool {
    dyload_lib().bli_aocl_enable_instruction_query.unwrap()()
}

pub unsafe fn bli_arch_set_id_once() {
    dyload_lib().bli_arch_set_id_once.unwrap()()
}

pub unsafe fn bli_arch_set_id() {
    dyload_lib().bli_arch_set_id.unwrap()()
}

pub unsafe fn bli_arch_check_id_once() {
    dyload_lib().bli_arch_check_id_once.unwrap()()
}

pub unsafe fn bli_arch_check_id() {
    dyload_lib().bli_arch_check_id.unwrap()()
}

pub unsafe fn bli_arch_string(id: arch_t) -> *mut c_char {
    dyload_lib().bli_arch_string.unwrap()(id)
}

pub unsafe fn bli_arch_set_logging(dolog: bool) {
    dyload_lib().bli_arch_set_logging.unwrap()(dolog)
}

pub unsafe fn bli_arch_get_logging() -> bool {
    dyload_lib().bli_arch_get_logging.unwrap()()
}

pub unsafe fn bli_arch_log(arg1: *mut c_char) {
    dyload_lib().bli_arch_log.unwrap()(arg1)
}

pub unsafe fn bli_model_query_id() -> model_t {
    dyload_lib().bli_model_query_id.unwrap()()
}

pub unsafe fn bli_init_model_query_id() -> model_t {
    dyload_lib().bli_init_model_query_id.unwrap()()
}

pub unsafe fn bli_model_string(id: model_t) -> *mut c_char {
    dyload_lib().bli_model_string.unwrap()(id)
}

pub unsafe fn bli_cpuid_query_id() -> arch_t {
    dyload_lib().bli_cpuid_query_id.unwrap()()
}

pub unsafe fn bli_cpuid_query_model_id(id: arch_t) -> model_t {
    dyload_lib().bli_cpuid_query_model_id.unwrap()(id)
}

pub unsafe fn bli_cpuid_query_fp_datapath() -> u32 {
    dyload_lib().bli_cpuid_query_fp_datapath.unwrap()()
}

pub unsafe fn bli_cpuid_query_l1d_cache_size() -> u32 {
    dyload_lib().bli_cpuid_query_l1d_cache_size.unwrap()()
}

pub unsafe fn bli_cpuid_query_l1i_cache_size() -> u32 {
    dyload_lib().bli_cpuid_query_l1i_cache_size.unwrap()()
}

pub unsafe fn bli_cpuid_query_l2_cache_size() -> u32 {
    dyload_lib().bli_cpuid_query_l2_cache_size.unwrap()()
}

pub unsafe fn bli_cpuid_query_l3_cache_size() -> u32 {
    dyload_lib().bli_cpuid_query_l3_cache_size.unwrap()()
}

pub unsafe fn bli_cpuid_is_skx(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_skx.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_knl(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_knl.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_haswell(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_haswell.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_sandybridge(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_sandybridge.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_penryn(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_penryn.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_zen5(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_zen5.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_zen4(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_zen4.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_avx512_fallback(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_avx512_fallback.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_zen3(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_zen3.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_zen2(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_zen2.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_zen(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_zen.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_excavator(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_excavator.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_steamroller(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_steamroller.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_piledriver(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_piledriver.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_bulldozer(family: u32, model: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_bulldozer.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_get_zen5_cpuid_model(family: u32, model: u32, features: u32) -> model_t {
    dyload_lib().bli_cpuid_get_zen5_cpuid_model.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_get_zen4_cpuid_model(family: u32, model: u32, features: u32) -> model_t {
    dyload_lib().bli_cpuid_get_zen4_cpuid_model.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_get_zen3_cpuid_model(family: u32, model: u32, features: u32) -> model_t {
    dyload_lib().bli_cpuid_get_zen3_cpuid_model.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_is_thunderx2(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_thunderx2.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_is_cortexa57(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_cortexa57.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_is_cortexa53(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_cortexa53.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_is_armsve(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_armsve.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_is_a64fx(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_a64fx.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_is_cortexa15(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_cortexa15.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_is_cortexa9(model: u32, part: u32, features: u32) -> bool {
    dyload_lib().bli_cpuid_is_cortexa9.unwrap()(model, part, features)
}

pub unsafe fn bli_cpuid_query(family: *mut u32, model: *mut u32, features: *mut u32) -> u32 {
    dyload_lib().bli_cpuid_query.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_check_datapath(vendor: u32, features: u32) {
    dyload_lib().bli_cpuid_check_datapath.unwrap()(vendor, features)
}

pub unsafe fn bli_cpuid_check_cache(vendor: u32) {
    dyload_lib().bli_cpuid_check_cache.unwrap()(vendor)
}

pub unsafe fn get_cpu_name(cpu_name: *mut c_char) {
    dyload_lib().get_cpu_name.unwrap()(cpu_name)
}

pub unsafe fn vpu_count() -> c_int {
    dyload_lib().vpu_count.unwrap()()
}

pub unsafe fn bli_cpuid_is_avx2fma3_supported() -> bool {
    dyload_lib().bli_cpuid_is_avx2fma3_supported.unwrap()()
}

pub unsafe fn bli_cpuid_is_avx512_supported() -> bool {
    dyload_lib().bli_cpuid_is_avx512_supported.unwrap()()
}

pub unsafe fn bli_cpuid_is_avx512vnni_supported() -> bool {
    dyload_lib().bli_cpuid_is_avx512vnni_supported.unwrap()()
}

pub unsafe fn bli_cpuid_is_avx512bf16_supported() -> bool {
    dyload_lib().bli_cpuid_is_avx512bf16_supported.unwrap()()
}

pub unsafe fn bli_cpuid_check_avx2fma3_support(family: u32, model: u32, features: u32) {
    dyload_lib().bli_cpuid_check_avx2fma3_support.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_check_avx512_support(family: u32, model: u32, features: u32) {
    dyload_lib().bli_cpuid_check_avx512_support.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_check_avx512vnni_support(family: u32, model: u32, features: u32) {
    dyload_lib().bli_cpuid_check_avx512vnni_support.unwrap()(family, model, features)
}

pub unsafe fn bli_cpuid_check_avx512bf16_support(family: u32, model: u32, features: u32) {
    dyload_lib().bli_cpuid_check_avx512bf16_support.unwrap()(family, model, features)
}

pub unsafe fn bli_string_mkupper(s: *mut c_char) {
    dyload_lib().bli_string_mkupper.unwrap()(s)
}

pub unsafe fn bli_setijm(ar: f64, ai: f64, i: dim_t, j: dim_t, b: *mut obj_t) -> err_t {
    dyload_lib().bli_setijm.unwrap()(ar, ai, i, j, b)
}

pub unsafe fn bli_ssetijm(
    ar: f64,
    ai: f64,
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
) {
    dyload_lib().bli_ssetijm.unwrap()(ar, ai, i, j, b, rs, cs)
}

pub unsafe fn bli_dsetijm(
    ar: f64,
    ai: f64,
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
) {
    dyload_lib().bli_dsetijm.unwrap()(ar, ai, i, j, b, rs, cs)
}

pub unsafe fn bli_csetijm(
    ar: f64,
    ai: f64,
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
) {
    dyload_lib().bli_csetijm.unwrap()(ar, ai, i, j, b, rs, cs)
}

pub unsafe fn bli_zsetijm(
    ar: f64,
    ai: f64,
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
) {
    dyload_lib().bli_zsetijm.unwrap()(ar, ai, i, j, b, rs, cs)
}

pub unsafe fn bli_getijm(i: dim_t, j: dim_t, b: *mut obj_t, ar: *mut f64, ai: *mut f64) -> err_t {
    dyload_lib().bli_getijm.unwrap()(i, j, b, ar, ai)
}

pub unsafe fn bli_sgetijm(
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    ar: *mut f64,
    ai: *mut f64,
) {
    dyload_lib().bli_sgetijm.unwrap()(i, j, b, rs, cs, ar, ai)
}

pub unsafe fn bli_dgetijm(
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    ar: *mut f64,
    ai: *mut f64,
) {
    dyload_lib().bli_dgetijm.unwrap()(i, j, b, rs, cs, ar, ai)
}

pub unsafe fn bli_cgetijm(
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    ar: *mut f64,
    ai: *mut f64,
) {
    dyload_lib().bli_cgetijm.unwrap()(i, j, b, rs, cs, ar, ai)
}

pub unsafe fn bli_zgetijm(
    i: dim_t,
    j: dim_t,
    b: *mut c_void,
    rs: inc_t,
    cs: inc_t,
    ar: *mut f64,
    ai: *mut f64,
) {
    dyload_lib().bli_zgetijm.unwrap()(i, j, b, rs, cs, ar, ai)
}

pub unsafe fn bli_setijv(ar: f64, ai: f64, i: dim_t, x: *mut obj_t) -> err_t {
    dyload_lib().bli_setijv.unwrap()(ar, ai, i, x)
}

pub unsafe fn bli_ssetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t) {
    dyload_lib().bli_ssetijv.unwrap()(ar, ai, i, x, incx)
}

pub unsafe fn bli_dsetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t) {
    dyload_lib().bli_dsetijv.unwrap()(ar, ai, i, x, incx)
}

pub unsafe fn bli_csetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t) {
    dyload_lib().bli_csetijv.unwrap()(ar, ai, i, x, incx)
}

pub unsafe fn bli_zsetijv(ar: f64, ai: f64, i: dim_t, x: *mut c_void, incx: inc_t) {
    dyload_lib().bli_zsetijv.unwrap()(ar, ai, i, x, incx)
}

pub unsafe fn bli_getijv(i: dim_t, x: *mut obj_t, ar: *mut f64, ai: *mut f64) -> err_t {
    dyload_lib().bli_getijv.unwrap()(i, x, ar, ai)
}

pub unsafe fn bli_sgetijv(i: dim_t, b: *mut c_void, incx: inc_t, ar: *mut f64, ai: *mut f64) {
    dyload_lib().bli_sgetijv.unwrap()(i, b, incx, ar, ai)
}

pub unsafe fn bli_dgetijv(i: dim_t, b: *mut c_void, incx: inc_t, ar: *mut f64, ai: *mut f64) {
    dyload_lib().bli_dgetijv.unwrap()(i, b, incx, ar, ai)
}

pub unsafe fn bli_cgetijv(i: dim_t, b: *mut c_void, incx: inc_t, ar: *mut f64, ai: *mut f64) {
    dyload_lib().bli_cgetijv.unwrap()(i, b, incx, ar, ai)
}

pub unsafe fn bli_zgetijv(i: dim_t, b: *mut c_void, incx: inc_t, ar: *mut f64, ai: *mut f64) {
    dyload_lib().bli_zgetijv.unwrap()(i, b, incx, ar, ai)
}

pub unsafe fn bli_setrm(alpha: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_setrm.unwrap()(alpha, b)
}

pub unsafe fn bli_setrv(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setrv.unwrap()(alpha, x)
}

pub unsafe fn bli_setim(alpha: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_setim.unwrap()(alpha, b)
}

pub unsafe fn bli_setiv(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setiv.unwrap()(alpha, x)
}

pub unsafe fn bli_castm(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_castm.unwrap()(a, b)
}

pub unsafe fn bli_sscastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_sscastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_ddcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_ddcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_cccastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_cccastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zzcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zzcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_sdcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_sdcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_sccastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_sccastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_szcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_szcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_dscastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dscastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_dccastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dccastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_dzcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dzcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_cscastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_cscastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_cdcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_cdcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_czcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_czcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zscastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zscastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zdcastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zdcastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zccastm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zccastm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_castm_check(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_castm_check.unwrap()(a, b)
}

pub unsafe fn bli_castnzm(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_castnzm.unwrap()(a, b)
}

pub unsafe fn bli_sscastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_sscastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_ddcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_ddcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_cccastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_cccastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zzcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zzcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_sdcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_sdcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_sccastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_sccastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_szcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_szcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_dscastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dscastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_dccastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dccastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_dzcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dzcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_cscastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_cscastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_cdcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_cdcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_czcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_czcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zscastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zscastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zdcastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zdcastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_zccastnzm(
    transa: trans_t,
    m: dim_t,
    n: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_zccastnzm.unwrap()(transa, m, n, a, rs_a, cs_a, b, rs_b, cs_b)
}

pub unsafe fn bli_castnzm_check(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_castnzm_check.unwrap()(a, b)
}

pub unsafe fn bli_castv(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_castv.unwrap()(x, y)
}

pub unsafe fn bli_sscastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_sscastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_ddcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_ddcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_cccastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_cccastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zzcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_zzcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_sdcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_sdcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_sccastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_sccastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_szcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_szcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_dscastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_dscastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_dccastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_dccastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_dzcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_dzcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_cscastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_cscastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_cdcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_cdcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_czcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_czcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zscastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_zscastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zdcastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_zdcastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zccastv(
    conjx: conj_t,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    y: *mut c_void,
    incy: inc_t,
) {
    dyload_lib().bli_zccastv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_castv_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_castv_check.unwrap()(x, y)
}

pub unsafe fn bli_projm(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_projm.unwrap()(a, b)
}

pub unsafe fn bli_projm_check(a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_projm_check.unwrap()(a, b)
}

pub unsafe fn bli_projv(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_projv.unwrap()(x, y)
}

pub unsafe fn bli_projv_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_projv_check.unwrap()(x, y)
}

pub unsafe fn bli_addsc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_addsc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_copysc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_copysc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_divsc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_divsc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_mulsc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_mulsc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_sqrtsc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_sqrtsc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_subsc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_subsc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_invertsc_check(chi: *mut obj_t) {
    dyload_lib().bli_invertsc_check.unwrap()(chi)
}

pub unsafe fn bli_absqsc_check(chi: *mut obj_t, absq: *mut obj_t) {
    dyload_lib().bli_absqsc_check.unwrap()(chi, absq)
}

pub unsafe fn bli_normfsc_check(chi: *mut obj_t, absq: *mut obj_t) {
    dyload_lib().bli_normfsc_check.unwrap()(chi, absq)
}

pub unsafe fn bli_getsc_check(chi: *mut obj_t, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_getsc_check.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_setsc_check(zeta_r: f64, zeta_i: f64, chi: *mut obj_t) {
    dyload_lib().bli_setsc_check.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_unzipsc_check(chi: *mut obj_t, zeta_r: *mut obj_t, zeta_i: *mut obj_t) {
    dyload_lib().bli_unzipsc_check.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_zipsc_check(zeta_r: *mut obj_t, zeta_i: *mut obj_t, chi: *mut obj_t) {
    dyload_lib().bli_zipsc_check.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_l0_xsc_check(chi: *mut obj_t) {
    dyload_lib().bli_l0_xsc_check.unwrap()(chi)
}

pub unsafe fn bli_l0_xxsc_check(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_l0_xxsc_check.unwrap()(chi, psi)
}

pub unsafe fn bli_l0_xx2sc_check(chi: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_l0_xx2sc_check.unwrap()(chi, norm)
}

pub unsafe fn bli_l0_xxbsc_check(chi: *mut obj_t, psi: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_l0_xxbsc_check.unwrap()(chi, psi, is_eq)
}

pub unsafe fn bli_absqsc(chi: *mut obj_t, absq: *mut obj_t) {
    dyload_lib().bli_absqsc.unwrap()(chi, absq)
}

pub unsafe fn bli_normfsc(chi: *mut obj_t, absq: *mut obj_t) {
    dyload_lib().bli_normfsc.unwrap()(chi, absq)
}

pub unsafe fn bli_addsc(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_addsc.unwrap()(chi, psi)
}

pub unsafe fn bli_divsc(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_divsc.unwrap()(chi, psi)
}

pub unsafe fn bli_mulsc(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_mulsc.unwrap()(chi, psi)
}

pub unsafe fn bli_sqrtsc(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_sqrtsc.unwrap()(chi, psi)
}

pub unsafe fn bli_subsc(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_subsc.unwrap()(chi, psi)
}

pub unsafe fn bli_invertsc(chi: *mut obj_t) {
    dyload_lib().bli_invertsc.unwrap()(chi)
}

pub unsafe fn bli_getsc(chi: *mut obj_t, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_getsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_setsc(zeta_r: f64, zeta_i: f64, chi: *mut obj_t) {
    dyload_lib().bli_setsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_unzipsc(chi: *mut obj_t, zeta_r: *mut obj_t, zeta_i: *mut obj_t) {
    dyload_lib().bli_unzipsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_zipsc(zeta_r: *mut obj_t, zeta_i: *mut obj_t, chi: *mut obj_t) {
    dyload_lib().bli_zipsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_saddsc(conjchi: conj_t, chi: *mut f32, psi: *mut f32) {
    dyload_lib().bli_saddsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_daddsc(conjchi: conj_t, chi: *mut f64, psi: *mut f64) {
    dyload_lib().bli_daddsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_caddsc(conjchi: conj_t, chi: *mut scomplex, psi: *mut scomplex) {
    dyload_lib().bli_caddsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zaddsc(conjchi: conj_t, chi: *mut dcomplex, psi: *mut dcomplex) {
    dyload_lib().bli_zaddsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_sdivsc(conjchi: conj_t, chi: *mut f32, psi: *mut f32) {
    dyload_lib().bli_sdivsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_ddivsc(conjchi: conj_t, chi: *mut f64, psi: *mut f64) {
    dyload_lib().bli_ddivsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_cdivsc(conjchi: conj_t, chi: *mut scomplex, psi: *mut scomplex) {
    dyload_lib().bli_cdivsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zdivsc(conjchi: conj_t, chi: *mut dcomplex, psi: *mut dcomplex) {
    dyload_lib().bli_zdivsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_smulsc(conjchi: conj_t, chi: *mut f32, psi: *mut f32) {
    dyload_lib().bli_smulsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_dmulsc(conjchi: conj_t, chi: *mut f64, psi: *mut f64) {
    dyload_lib().bli_dmulsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_cmulsc(conjchi: conj_t, chi: *mut scomplex, psi: *mut scomplex) {
    dyload_lib().bli_cmulsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zmulsc(conjchi: conj_t, chi: *mut dcomplex, psi: *mut dcomplex) {
    dyload_lib().bli_zmulsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_ssubsc(conjchi: conj_t, chi: *mut f32, psi: *mut f32) {
    dyload_lib().bli_ssubsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_dsubsc(conjchi: conj_t, chi: *mut f64, psi: *mut f64) {
    dyload_lib().bli_dsubsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_csubsc(conjchi: conj_t, chi: *mut scomplex, psi: *mut scomplex) {
    dyload_lib().bli_csubsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zsubsc(conjchi: conj_t, chi: *mut dcomplex, psi: *mut dcomplex) {
    dyload_lib().bli_zsubsc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_sinvertsc(conjchi: conj_t, chi: *mut f32) {
    dyload_lib().bli_sinvertsc.unwrap()(conjchi, chi)
}

pub unsafe fn bli_dinvertsc(conjchi: conj_t, chi: *mut f64) {
    dyload_lib().bli_dinvertsc.unwrap()(conjchi, chi)
}

pub unsafe fn bli_cinvertsc(conjchi: conj_t, chi: *mut scomplex) {
    dyload_lib().bli_cinvertsc.unwrap()(conjchi, chi)
}

pub unsafe fn bli_zinvertsc(conjchi: conj_t, chi: *mut dcomplex) {
    dyload_lib().bli_zinvertsc.unwrap()(conjchi, chi)
}

pub unsafe fn bli_sabsqsc(chi: *mut f32, absq: *mut f32) {
    dyload_lib().bli_sabsqsc.unwrap()(chi, absq)
}

pub unsafe fn bli_dabsqsc(chi: *mut f64, absq: *mut f64) {
    dyload_lib().bli_dabsqsc.unwrap()(chi, absq)
}

pub unsafe fn bli_cabsqsc(chi: *mut scomplex, absq: *mut f32) {
    dyload_lib().bli_cabsqsc.unwrap()(chi, absq)
}

pub unsafe fn bli_zabsqsc(chi: *mut dcomplex, absq: *mut f64) {
    dyload_lib().bli_zabsqsc.unwrap()(chi, absq)
}

pub unsafe fn bli_snormfsc(chi: *mut f32, absq: *mut f32) {
    dyload_lib().bli_snormfsc.unwrap()(chi, absq)
}

pub unsafe fn bli_dnormfsc(chi: *mut f64, absq: *mut f64) {
    dyload_lib().bli_dnormfsc.unwrap()(chi, absq)
}

pub unsafe fn bli_cnormfsc(chi: *mut scomplex, absq: *mut f32) {
    dyload_lib().bli_cnormfsc.unwrap()(chi, absq)
}

pub unsafe fn bli_znormfsc(chi: *mut dcomplex, absq: *mut f64) {
    dyload_lib().bli_znormfsc.unwrap()(chi, absq)
}

pub unsafe fn bli_ssqrtsc(chi: *mut f32, psi: *mut f32) {
    dyload_lib().bli_ssqrtsc.unwrap()(chi, psi)
}

pub unsafe fn bli_dsqrtsc(chi: *mut f64, psi: *mut f64) {
    dyload_lib().bli_dsqrtsc.unwrap()(chi, psi)
}

pub unsafe fn bli_csqrtsc(chi: *mut scomplex, psi: *mut scomplex) {
    dyload_lib().bli_csqrtsc.unwrap()(chi, psi)
}

pub unsafe fn bli_zsqrtsc(chi: *mut dcomplex, psi: *mut dcomplex) {
    dyload_lib().bli_zsqrtsc.unwrap()(chi, psi)
}

pub unsafe fn bli_sgetsc(chi: *mut f32, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_sgetsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_dgetsc(chi: *mut f64, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_dgetsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_cgetsc(chi: *mut scomplex, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_cgetsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_zgetsc(chi: *mut dcomplex, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_zgetsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_ssetsc(zeta_r: f64, zeta_i: f64, chi: *mut f32) {
    dyload_lib().bli_ssetsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_dsetsc(zeta_r: f64, zeta_i: f64, chi: *mut f64) {
    dyload_lib().bli_dsetsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_csetsc(zeta_r: f64, zeta_i: f64, chi: *mut scomplex) {
    dyload_lib().bli_csetsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_zsetsc(zeta_r: f64, zeta_i: f64, chi: *mut dcomplex) {
    dyload_lib().bli_zsetsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_sunzipsc(chi: *mut f32, zeta_r: *mut f32, zeta_i: *mut f32) {
    dyload_lib().bli_sunzipsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_dunzipsc(chi: *mut f64, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_dunzipsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_cunzipsc(chi: *mut scomplex, zeta_r: *mut f32, zeta_i: *mut f32) {
    dyload_lib().bli_cunzipsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_zunzipsc(chi: *mut dcomplex, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_zunzipsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_szipsc(zeta_r: *mut f32, zeta_i: *mut f32, chi: *mut f32) {
    dyload_lib().bli_szipsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_dzipsc(zeta_r: *mut f64, zeta_i: *mut f64, chi: *mut f64) {
    dyload_lib().bli_dzipsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_czipsc(zeta_r: *mut f32, zeta_i: *mut f32, chi: *mut scomplex) {
    dyload_lib().bli_czipsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_zzipsc(zeta_r: *mut f64, zeta_i: *mut f64, chi: *mut dcomplex) {
    dyload_lib().bli_zzipsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_igetsc(chi: *mut dim_t, zeta_r: *mut f64, zeta_i: *mut f64) {
    dyload_lib().bli_igetsc.unwrap()(chi, zeta_r, zeta_i)
}

pub unsafe fn bli_isetsc(zeta_r: f64, zeta_i: f64, chi: *mut dim_t) {
    dyload_lib().bli_isetsc.unwrap()(zeta_r, zeta_i, chi)
}

pub unsafe fn bli_absqsc_qfp(dt: num_t) -> absqsc_vft {
    dyload_lib().bli_absqsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_normfsc_qfp(dt: num_t) -> normfsc_vft {
    dyload_lib().bli_normfsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_addsc_qfp(dt: num_t) -> addsc_vft {
    dyload_lib().bli_addsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_divsc_qfp(dt: num_t) -> divsc_vft {
    dyload_lib().bli_divsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_mulsc_qfp(dt: num_t) -> mulsc_vft {
    dyload_lib().bli_mulsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_subsc_qfp(dt: num_t) -> subsc_vft {
    dyload_lib().bli_subsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_invertsc_qfp(dt: num_t) -> invertsc_vft {
    dyload_lib().bli_invertsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_sqrtsc_qfp(dt: num_t) -> sqrtsc_vft {
    dyload_lib().bli_sqrtsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_unzipsc_qfp(dt: num_t) -> unzipsc_vft {
    dyload_lib().bli_unzipsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_zipsc_qfp(dt: num_t) -> zipsc_vft {
    dyload_lib().bli_zipsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_getsc_qfp(dt: num_t) -> getsc_vft {
    dyload_lib().bli_getsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_setsc_qfp(dt: num_t) -> setsc_vft {
    dyload_lib().bli_setsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_copysc(chi: *mut obj_t, psi: *mut obj_t) {
    dyload_lib().bli_copysc.unwrap()(chi, psi)
}

pub unsafe fn bli_sscopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_sscopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_ddcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_ddcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_cccopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_cccopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zzcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_zzcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_sccopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_sccopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_cscopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_cscopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_dzcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_dzcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zdcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_zdcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_sdcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_sdcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_szcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_szcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_dscopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_dscopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_dccopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_dccopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_cdcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_cdcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_czcopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_czcopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zscopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_zscopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_zccopysc(conjchi: conj_t, chi: *mut c_void, psi: *mut c_void) {
    dyload_lib().bli_zccopysc.unwrap()(conjchi, chi, psi)
}

pub unsafe fn bli_addv_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_addv_check.unwrap()(x, y)
}

pub unsafe fn bli_copyv_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_copyv_check.unwrap()(x, y)
}

pub unsafe fn bli_subv_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_subv_check.unwrap()(x, y)
}

pub unsafe fn bli_swapv_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_swapv_check.unwrap()(x, y)
}

pub unsafe fn bli_amaxv_check(x: *mut obj_t, index: *mut obj_t) {
    dyload_lib().bli_amaxv_check.unwrap()(x, index)
}

pub unsafe fn bli_aminv_check(x: *mut obj_t, index: *mut obj_t) {
    dyload_lib().bli_aminv_check.unwrap()(x, index)
}

pub unsafe fn bli_axpbyv_check(alpha: *mut obj_t, x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpbyv_check.unwrap()(alpha, x, beta, y)
}

pub unsafe fn bli_axpyv_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpyv_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scal2v_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_scal2v_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_dotv_check(x: *mut obj_t, y: *mut obj_t, rho: *mut obj_t) {
    dyload_lib().bli_dotv_check.unwrap()(x, y, rho)
}

pub unsafe fn bli_dotxv_check(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    beta: *mut obj_t,
    rho: *mut obj_t,
) {
    dyload_lib().bli_dotxv_check.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn bli_invertv_check(x: *mut obj_t) {
    dyload_lib().bli_invertv_check.unwrap()(x)
}

pub unsafe fn bli_scalv_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_scalv_check.unwrap()(alpha, x)
}

pub unsafe fn bli_setv_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setv_check.unwrap()(alpha, x)
}

pub unsafe fn bli_xpbyv_check(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbyv_check.unwrap()(x, beta, y)
}

pub unsafe fn bli_l1v_xy_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1v_xy_check.unwrap()(x, y)
}

pub unsafe fn bli_l1v_axy_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1v_axy_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_l1v_xby_check(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1v_xby_check.unwrap()(x, beta, y)
}

pub unsafe fn bli_l1v_axby_check(
    alpha: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_l1v_axby_check.unwrap()(alpha, x, beta, y)
}

pub unsafe fn bli_l1v_dot_check(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    beta: *mut obj_t,
    rho: *mut obj_t,
) {
    dyload_lib().bli_l1v_dot_check.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn bli_l1v_x_check(x: *mut obj_t) {
    dyload_lib().bli_l1v_x_check.unwrap()(x)
}

pub unsafe fn bli_l1v_ax_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_l1v_ax_check.unwrap()(alpha, x)
}

pub unsafe fn bli_l1v_xi_check(x: *mut obj_t, index: *mut obj_t) {
    dyload_lib().bli_l1v_xi_check.unwrap()(x, index)
}

pub unsafe fn bli_addv_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_addv_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_copyv_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_copyv_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_subv_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_subv_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_amaxv_ex(x: *mut obj_t, index: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_amaxv_ex.unwrap()(x, index, cntx, rntm)
}

pub unsafe fn bli_aminv_ex(x: *mut obj_t, index: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_aminv_ex.unwrap()(x, index, cntx, rntm)
}

pub unsafe fn bli_axpbyv_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_axpbyv_ex.unwrap()(alpha, x, beta, y, cntx, rntm)
}

pub unsafe fn bli_axpyv_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_axpyv_ex.unwrap()(alpha, x, y, cntx, rntm)
}

pub unsafe fn bli_scal2v_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scal2v_ex.unwrap()(alpha, x, y, cntx, rntm)
}

pub unsafe fn bli_dotv_ex(
    x: *mut obj_t,
    y: *mut obj_t,
    rho: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dotv_ex.unwrap()(x, y, rho, cntx, rntm)
}

pub unsafe fn bli_dotxv_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    beta: *mut obj_t,
    rho: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dotxv_ex.unwrap()(alpha, x, y, beta, rho, cntx, rntm)
}

pub unsafe fn bli_invertv_ex(x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_invertv_ex.unwrap()(x, cntx, rntm)
}

pub unsafe fn bli_scalv_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_scalv_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_setv_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_setv_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_swapv_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_swapv_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_xpbyv_ex(
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_xpbyv_ex.unwrap()(x, beta, y, cntx, rntm)
}

pub unsafe fn bli_addv(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_addv.unwrap()(x, y)
}

pub unsafe fn bli_copyv(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_copyv.unwrap()(x, y)
}

pub unsafe fn bli_subv(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_subv.unwrap()(x, y)
}

pub unsafe fn bli_amaxv(x: *mut obj_t, index: *mut obj_t) {
    dyload_lib().bli_amaxv.unwrap()(x, index)
}

pub unsafe fn bli_aminv(x: *mut obj_t, index: *mut obj_t) {
    dyload_lib().bli_aminv.unwrap()(x, index)
}

pub unsafe fn bli_axpbyv(alpha: *mut obj_t, x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpbyv.unwrap()(alpha, x, beta, y)
}

pub unsafe fn bli_axpyv(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpyv.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scal2v(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_scal2v.unwrap()(alpha, x, y)
}

pub unsafe fn bli_dotv(x: *mut obj_t, y: *mut obj_t, rho: *mut obj_t) {
    dyload_lib().bli_dotv.unwrap()(x, y, rho)
}

pub unsafe fn bli_dotxv(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    beta: *mut obj_t,
    rho: *mut obj_t,
) {
    dyload_lib().bli_dotxv.unwrap()(alpha, x, y, beta, rho)
}

pub unsafe fn bli_invertv(x: *mut obj_t) {
    dyload_lib().bli_invertv.unwrap()(x)
}

pub unsafe fn bli_scalv(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_scalv.unwrap()(alpha, x)
}

pub unsafe fn bli_setv(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setv.unwrap()(alpha, x)
}

pub unsafe fn bli_swapv(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_swapv.unwrap()(x, y)
}

pub unsafe fn bli_xpbyv(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbyv.unwrap()(x, beta, y)
}

pub unsafe fn bli_saddv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saddv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_daddv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daddv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_caddv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caddv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_zaddv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaddv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_scopyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scopyv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_dcopyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dcopyv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_ccopyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ccopyv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_zcopyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zcopyv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_ssubv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssubv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_dsubv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsubv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_csubv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csubv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_zsubv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsubv_ex.unwrap()(conjx, n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_samaxv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_samaxv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_damaxv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_damaxv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_camaxv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_camaxv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_zamaxv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zamaxv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_saminv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saminv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_daminv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daminv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_caminv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caminv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_zaminv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    index: *mut dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaminv_ex.unwrap()(n, x, incx, index, cntx, rntm)
}

pub unsafe fn bli_saxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpbyv_ex.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_daxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpbyv_ex.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_caxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpbyv_ex.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_zaxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpbyv_ex.unwrap()(conjx, n, alpha, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_saxpyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpyv_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_daxpyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpyv_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_caxpyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpyv_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_zaxpyv_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpyv_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_sscal2v_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscal2v_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_dscal2v_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscal2v_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_cscal2v_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscal2v_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_zscal2v_ex(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscal2v_ex.unwrap()(conjx, n, alpha, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_sdotv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdotv_ex.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx, rntm)
}

pub unsafe fn bli_ddotv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddotv_ex.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx, rntm)
}

pub unsafe fn bli_cdotv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    rho: *mut scomplex,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdotv_ex.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx, rntm)
}

pub unsafe fn bli_zdotv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdotv_ex.unwrap()(conjx, conjy, n, x, incx, y, incy, rho, cntx, rntm)
}

pub unsafe fn bli_sdotxv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    beta: *mut f32,
    rho: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdotxv_ex.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx, rntm,
    )
}

pub unsafe fn bli_ddotxv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    beta: *mut f64,
    rho: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddotxv_ex.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx, rntm,
    )
}

pub unsafe fn bli_cdotxv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    beta: *mut scomplex,
    rho: *mut scomplex,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdotxv_ex.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx, rntm,
    )
}

pub unsafe fn bli_zdotxv_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdotxv_ex.unwrap()(
        conjx, conjy, n, alpha, x, incx, y, incy, beta, rho, cntx, rntm,
    )
}

pub unsafe fn bli_sinvertv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sinvertv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_dinvertv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dinvertv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_cinvertv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cinvertv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_zinvertv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zinvertv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_sscalv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscalv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_dscalv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscalv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_cscalv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscalv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_zscalv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscalv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_ssetv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssetv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_dsetv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsetv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_csetv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csetv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_zsetv_ex(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsetv_ex.unwrap()(conjalpha, n, alpha, x, incx, cntx, rntm)
}

pub unsafe fn bli_sswapv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sswapv_ex.unwrap()(n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_dswapv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dswapv_ex.unwrap()(n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_cswapv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cswapv_ex.unwrap()(n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_zswapv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zswapv_ex.unwrap()(n, x, incx, y, incy, cntx, rntm)
}

pub unsafe fn bli_sxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sxpbyv_ex.unwrap()(conjx, n, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_dxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dxpbyv_ex.unwrap()(conjx, n, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_cxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cxpbyv_ex.unwrap()(conjx, n, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_zxpbyv_ex(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zxpbyv_ex.unwrap()(conjx, n, x, incx, beta, y, incy, cntx, rntm)
}

pub unsafe fn bli_saddv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_saddv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_daddv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_daddv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_caddv(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_caddv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zaddv(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zaddv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_scopyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_scopyv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_dcopyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dcopyv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_ccopyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_ccopyv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zcopyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zcopyv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_ssubv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_ssubv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_dsubv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dsubv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_csubv(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_csubv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zsubv(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zsubv.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_samaxv(n: dim_t, x: *mut f32, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_samaxv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_damaxv(n: dim_t, x: *mut f64, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_damaxv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_camaxv(n: dim_t, x: *mut scomplex, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_camaxv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_zamaxv(n: dim_t, x: *mut dcomplex, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_zamaxv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_saminv(n: dim_t, x: *mut f32, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_saminv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_daminv(n: dim_t, x: *mut f64, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_daminv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_caminv(n: dim_t, x: *mut scomplex, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_caminv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_zaminv(n: dim_t, x: *mut dcomplex, incx: inc_t, index: *mut dim_t) {
    dyload_lib().bli_zaminv.unwrap()(n, x, incx, index)
}

pub unsafe fn bli_saxpbyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_saxpbyv.unwrap()(conjx, n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn bli_daxpbyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_daxpbyv.unwrap()(conjx, n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn bli_caxpbyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_caxpbyv.unwrap()(conjx, n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn bli_zaxpbyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zaxpbyv.unwrap()(conjx, n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn bli_saxpyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_saxpyv.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_daxpyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_daxpyv.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_caxpyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_caxpyv.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_zaxpyv(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zaxpyv.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_sscal2v(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_sscal2v.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_dscal2v(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dscal2v.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_cscal2v(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_cscal2v.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_zscal2v(
    conjx: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zscal2v.unwrap()(conjx, n, alpha, x, incx, y, incy)
}

pub unsafe fn bli_sdotv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
) {
    dyload_lib().bli_sdotv.unwrap()(conjx, conjy, n, x, incx, y, incy, rho)
}

pub unsafe fn bli_ddotv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
) {
    dyload_lib().bli_ddotv.unwrap()(conjx, conjy, n, x, incx, y, incy, rho)
}

pub unsafe fn bli_cdotv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    rho: *mut scomplex,
) {
    dyload_lib().bli_cdotv.unwrap()(conjx, conjy, n, x, incx, y, incy, rho)
}

pub unsafe fn bli_zdotv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
) {
    dyload_lib().bli_zdotv.unwrap()(conjx, conjy, n, x, incx, y, incy, rho)
}

pub unsafe fn bli_sdotxv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    beta: *mut f32,
    rho: *mut f32,
) {
    dyload_lib().bli_sdotxv.unwrap()(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bli_ddotxv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    beta: *mut f64,
    rho: *mut f64,
) {
    dyload_lib().bli_ddotxv.unwrap()(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bli_cdotxv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    beta: *mut scomplex,
    rho: *mut scomplex,
) {
    dyload_lib().bli_cdotxv.unwrap()(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bli_zdotxv(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    beta: *mut dcomplex,
    rho: *mut dcomplex,
) {
    dyload_lib().bli_zdotxv.unwrap()(conjx, conjy, n, alpha, x, incx, y, incy, beta, rho)
}

pub unsafe fn bli_sinvertv(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().bli_sinvertv.unwrap()(n, x, incx)
}

pub unsafe fn bli_dinvertv(n: dim_t, x: *mut f64, incx: inc_t) {
    dyload_lib().bli_dinvertv.unwrap()(n, x, incx)
}

pub unsafe fn bli_cinvertv(n: dim_t, x: *mut scomplex, incx: inc_t) {
    dyload_lib().bli_cinvertv.unwrap()(n, x, incx)
}

pub unsafe fn bli_zinvertv(n: dim_t, x: *mut dcomplex, incx: inc_t) {
    dyload_lib().bli_zinvertv.unwrap()(n, x, incx)
}

pub unsafe fn bli_sscalv(conjalpha: conj_t, n: dim_t, alpha: *mut f32, x: *mut f32, incx: inc_t) {
    dyload_lib().bli_sscalv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_dscalv(conjalpha: conj_t, n: dim_t, alpha: *mut f64, x: *mut f64, incx: inc_t) {
    dyload_lib().bli_dscalv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_cscalv(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
) {
    dyload_lib().bli_cscalv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_zscalv(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
) {
    dyload_lib().bli_zscalv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_ssetv(conjalpha: conj_t, n: dim_t, alpha: *mut f32, x: *mut f32, incx: inc_t) {
    dyload_lib().bli_ssetv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_dsetv(conjalpha: conj_t, n: dim_t, alpha: *mut f64, x: *mut f64, incx: inc_t) {
    dyload_lib().bli_dsetv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_csetv(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
) {
    dyload_lib().bli_csetv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_zsetv(
    conjalpha: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
) {
    dyload_lib().bli_zsetv.unwrap()(conjalpha, n, alpha, x, incx)
}

pub unsafe fn bli_sswapv(n: dim_t, x: *mut f32, incx: inc_t, y: *mut f32, incy: inc_t) {
    dyload_lib().bli_sswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bli_dswapv(n: dim_t, x: *mut f64, incx: inc_t, y: *mut f64, incy: inc_t) {
    dyload_lib().bli_dswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bli_cswapv(n: dim_t, x: *mut scomplex, incx: inc_t, y: *mut scomplex, incy: inc_t) {
    dyload_lib().bli_cswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bli_zswapv(n: dim_t, x: *mut dcomplex, incx: inc_t, y: *mut dcomplex, incy: inc_t) {
    dyload_lib().bli_zswapv.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn bli_sxpbyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_sxpbyv.unwrap()(conjx, n, x, incx, beta, y, incy)
}

pub unsafe fn bli_dxpbyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dxpbyv.unwrap()(conjx, n, x, incx, beta, y, incy)
}

pub unsafe fn bli_cxpbyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_cxpbyv.unwrap()(conjx, n, x, incx, beta, y, incy)
}

pub unsafe fn bli_zxpbyv(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zxpbyv.unwrap()(conjx, n, x, incx, beta, y, incy)
}

pub unsafe fn bli_addv_ex_qfp(dt: num_t) -> addv_ex_vft {
    dyload_lib().bli_addv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_copyv_ex_qfp(dt: num_t) -> copyv_ex_vft {
    dyload_lib().bli_copyv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_subv_ex_qfp(dt: num_t) -> subv_ex_vft {
    dyload_lib().bli_subv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_amaxv_ex_qfp(dt: num_t) -> amaxv_ex_vft {
    dyload_lib().bli_amaxv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_aminv_ex_qfp(dt: num_t) -> aminv_ex_vft {
    dyload_lib().bli_aminv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_axpbyv_ex_qfp(dt: num_t) -> axpbyv_ex_vft {
    dyload_lib().bli_axpbyv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_axpyv_ex_qfp(dt: num_t) -> axpyv_ex_vft {
    dyload_lib().bli_axpyv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_scal2v_ex_qfp(dt: num_t) -> scal2v_ex_vft {
    dyload_lib().bli_scal2v_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_dotv_ex_qfp(dt: num_t) -> dotv_ex_vft {
    dyload_lib().bli_dotv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_dotxv_ex_qfp(dt: num_t) -> dotxv_ex_vft {
    dyload_lib().bli_dotxv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_invertv_ex_qfp(dt: num_t) -> invertv_ex_vft {
    dyload_lib().bli_invertv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_scalv_ex_qfp(dt: num_t) -> scalv_ex_vft {
    dyload_lib().bli_scalv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_setv_ex_qfp(dt: num_t) -> setv_ex_vft {
    dyload_lib().bli_setv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_swapv_ex_qfp(dt: num_t) -> swapv_ex_vft {
    dyload_lib().bli_swapv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_xpbyv_ex_qfp(dt: num_t) -> xpbyv_ex_vft {
    dyload_lib().bli_xpbyv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_addd_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_addd_check.unwrap()(x, y)
}

pub unsafe fn bli_copyd_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_copyd_check.unwrap()(x, y)
}

pub unsafe fn bli_subd_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_subd_check.unwrap()(x, y)
}

pub unsafe fn bli_axpyd_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpyd_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scal2d_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_scal2d_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_invertd_check(x: *mut obj_t) {
    dyload_lib().bli_invertd_check.unwrap()(x)
}

pub unsafe fn bli_scald_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_scald_check.unwrap()(alpha, x)
}

pub unsafe fn bli_setd_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setd_check.unwrap()(alpha, x)
}

pub unsafe fn bli_setid_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setid_check.unwrap()(alpha, x)
}

pub unsafe fn bli_shiftd_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_shiftd_check.unwrap()(alpha, x)
}

pub unsafe fn bli_xpbyd_check(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbyd_check.unwrap()(x, beta, y)
}

pub unsafe fn bli_l1d_xy_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1d_xy_check.unwrap()(x, y)
}

pub unsafe fn bli_l1d_axy_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1d_axy_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_l1d_x_check(x: *mut obj_t) {
    dyload_lib().bli_l1d_x_check.unwrap()(x)
}

pub unsafe fn bli_l1d_ax_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_l1d_ax_check.unwrap()(alpha, x)
}

pub unsafe fn bli_addd_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_addd_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_copyd_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_copyd_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_subd_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_subd_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_axpyd_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_axpyd_ex.unwrap()(alpha, x, y, cntx, rntm)
}

pub unsafe fn bli_scal2d_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scal2d_ex.unwrap()(alpha, x, y, cntx, rntm)
}

pub unsafe fn bli_invertd_ex(x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_invertd_ex.unwrap()(x, cntx, rntm)
}

pub unsafe fn bli_scald_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_scald_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_setd_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_setd_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_setid_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_setid_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_shiftd_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_shiftd_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_xpbyd_ex(
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_xpbyd_ex.unwrap()(x, beta, y, cntx, rntm)
}

pub unsafe fn bli_addd(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_addd.unwrap()(x, y)
}

pub unsafe fn bli_copyd(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_copyd.unwrap()(x, y)
}

pub unsafe fn bli_subd(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_subd.unwrap()(x, y)
}

pub unsafe fn bli_axpyd(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpyd.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scal2d(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_scal2d.unwrap()(alpha, x, y)
}

pub unsafe fn bli_invertd(x: *mut obj_t) {
    dyload_lib().bli_invertd.unwrap()(x)
}

pub unsafe fn bli_scald(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_scald.unwrap()(alpha, x)
}

pub unsafe fn bli_setd(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setd.unwrap()(alpha, x)
}

pub unsafe fn bli_setid(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setid.unwrap()(alpha, x)
}

pub unsafe fn bli_shiftd(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_shiftd.unwrap()(alpha, x)
}

pub unsafe fn bli_xpbyd(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbyd.unwrap()(x, beta, y)
}

pub unsafe fn bli_saddd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saddd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_daddd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daddd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_caddd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caddd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zaddd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaddd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_scopyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scopyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dcopyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dcopyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ccopyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ccopyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zcopyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zcopyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ssubd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssubd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dsubd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsubd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_csubd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csubd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zsubd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsubd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_saxpyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_daxpyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_caxpyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zaxpyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sscal2d_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscal2d_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dscal2d_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscal2d_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cscal2d_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscal2d_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zscal2d_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscal2d_ex.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sinvertd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sinvertd_ex.unwrap()(diagoffx, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_dinvertd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dinvertd_ex.unwrap()(diagoffx, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_cinvertd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cinvertd_ex.unwrap()(diagoffx, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zinvertd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zinvertd_ex.unwrap()(diagoffx, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_sscald_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscald_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_dscald_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscald_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_cscald_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscald_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zscald_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscald_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_ssetd_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssetd_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_dsetd_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsetd_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_csetd_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csetd_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zsetd_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsetd_ex.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_ssetid_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssetid_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_dsetid_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsetid_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_csetid_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csetid_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zsetid_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsetid_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_sshiftd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sshiftd_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_dshiftd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dshiftd_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_cshiftd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cshiftd_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zshiftd_ex(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zshiftd_ex.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_sxpbyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sxpbyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dxpbyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dxpbyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cxpbyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cxpbyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zxpbyd_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zxpbyd_ex.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_saddd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_saddd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_daddd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_daddd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_caddd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_caddd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_zaddd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zaddd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_scopyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_scopyd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_dcopyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dcopyd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_ccopyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ccopyd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_zcopyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zcopyd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_ssubd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ssubd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_dsubd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dsubd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_csubd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_csubd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_zsubd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zsubd.unwrap()(diagoffx, diagx, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y)
}

pub unsafe fn bli_saxpyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_saxpyd.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_daxpyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_daxpyd.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_caxpyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_caxpyd.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zaxpyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zaxpyd.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_sscal2d(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_sscal2d.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dscal2d(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dscal2d.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_cscal2d(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_cscal2d.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zscal2d(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zscal2d.unwrap()(
        diagoffx, diagx, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_sinvertd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_sinvertd.unwrap()(diagoffx, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_dinvertd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dinvertd.unwrap()(diagoffx, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_cinvertd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_cinvertd.unwrap()(diagoffx, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_zinvertd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zinvertd.unwrap()(diagoffx, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_sscald(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_sscald.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_dscald(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dscald.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_cscald(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_cscald.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_zscald(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zscald.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_ssetd(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_ssetd.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_dsetd(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dsetd.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_csetd(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_csetd.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_zsetd(
    conjalpha: conj_t,
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zsetd.unwrap()(conjalpha, diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_ssetid(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_ssetid.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_dsetid(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dsetid.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_csetid(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_csetid.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_zsetid(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zsetid.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_sshiftd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_sshiftd.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_dshiftd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dshiftd.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_cshiftd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_cshiftd.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_zshiftd(
    diagoffx: doff_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zshiftd.unwrap()(diagoffx, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_sxpbyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_sxpbyd.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dxpbyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dxpbyd.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_cxpbyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_cxpbyd.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zxpbyd(
    diagoffx: doff_t,
    diagx: diag_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zxpbyd.unwrap()(
        diagoffx, diagx, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_addd_ex_qfp(dt: num_t) -> addd_ex_vft {
    dyload_lib().bli_addd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_copyd_ex_qfp(dt: num_t) -> copyd_ex_vft {
    dyload_lib().bli_copyd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_subd_ex_qfp(dt: num_t) -> subd_ex_vft {
    dyload_lib().bli_subd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_axpyd_ex_qfp(dt: num_t) -> axpyd_ex_vft {
    dyload_lib().bli_axpyd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_scal2d_ex_qfp(dt: num_t) -> scal2d_ex_vft {
    dyload_lib().bli_scal2d_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_invertd_ex_qfp(dt: num_t) -> invertd_ex_vft {
    dyload_lib().bli_invertd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_scald_ex_qfp(dt: num_t) -> scald_ex_vft {
    dyload_lib().bli_scald_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_setd_ex_qfp(dt: num_t) -> setd_ex_vft {
    dyload_lib().bli_setd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_setid_ex_qfp(dt: num_t) -> setid_ex_vft {
    dyload_lib().bli_setid_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_shiftd_ex_qfp(dt: num_t) -> shiftd_ex_vft {
    dyload_lib().bli_shiftd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_xpbyd_ex_qfp(dt: num_t) -> xpbyd_ex_vft {
    dyload_lib().bli_xpbyd_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_axpy2v_check(
    alphax: *mut obj_t,
    alphay: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    z: *mut obj_t,
) {
    dyload_lib().bli_axpy2v_check.unwrap()(alphax, alphay, x, y, z)
}

pub unsafe fn bli_axpyf_check(alpha: *mut obj_t, a: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpyf_check.unwrap()(alpha, a, x, y)
}

pub unsafe fn bli_dotaxpyv_check(
    alpha: *mut obj_t,
    xt: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    rho: *mut obj_t,
    z: *mut obj_t,
) {
    dyload_lib().bli_dotaxpyv_check.unwrap()(alpha, xt, x, y, rho, z)
}

pub unsafe fn bli_dotxaxpyf_check(
    alpha: *mut obj_t,
    at: *mut obj_t,
    a: *mut obj_t,
    w: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    z: *mut obj_t,
) {
    dyload_lib().bli_dotxaxpyf_check.unwrap()(alpha, at, a, w, x, beta, y, z)
}

pub unsafe fn bli_dotxf_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_dotxf_check.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_axpy2v_ex(
    alphax: *mut obj_t,
    alphay: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    z: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_axpy2v_ex.unwrap()(alphax, alphay, x, y, z, cntx, rntm)
}

pub unsafe fn bli_axpyf_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_axpyf_ex.unwrap()(alpha, a, x, y, cntx, rntm)
}

pub unsafe fn bli_dotaxpyv_ex(
    alpha: *mut obj_t,
    xt: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    rho: *mut obj_t,
    z: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dotaxpyv_ex.unwrap()(alpha, xt, x, y, rho, z, cntx, rntm)
}

pub unsafe fn bli_dotxaxpyf_ex(
    alpha: *mut obj_t,
    at: *mut obj_t,
    a: *mut obj_t,
    w: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    z: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dotxaxpyf_ex.unwrap()(alpha, at, a, w, x, beta, y, z, cntx, rntm)
}

pub unsafe fn bli_dotxf_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dotxf_ex.unwrap()(alpha, a, x, beta, y, cntx, rntm)
}

pub unsafe fn bli_axpy2v(
    alphax: *mut obj_t,
    alphay: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    z: *mut obj_t,
) {
    dyload_lib().bli_axpy2v.unwrap()(alphax, alphay, x, y, z)
}

pub unsafe fn bli_axpyf(alpha: *mut obj_t, a: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpyf.unwrap()(alpha, a, x, y)
}

pub unsafe fn bli_dotaxpyv(
    alpha: *mut obj_t,
    xt: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    rho: *mut obj_t,
    z: *mut obj_t,
) {
    dyload_lib().bli_dotaxpyv.unwrap()(alpha, xt, x, y, rho, z)
}

pub unsafe fn bli_dotxaxpyf(
    alpha: *mut obj_t,
    at: *mut obj_t,
    a: *mut obj_t,
    w: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    z: *mut obj_t,
) {
    dyload_lib().bli_dotxaxpyf.unwrap()(alpha, at, a, w, x, beta, y, z)
}

pub unsafe fn bli_dotxf(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_dotxf.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_saxpy2v_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut f32,
    alphay: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    z: *mut f32,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpy2v_ex.unwrap()(
        conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_daxpy2v_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut f64,
    alphay: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    z: *mut f64,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpy2v_ex.unwrap()(
        conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_caxpy2v_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut scomplex,
    alphay: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    z: *mut scomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpy2v_ex.unwrap()(
        conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_zaxpy2v_ex(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut dcomplex,
    alphay: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    z: *mut dcomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpy2v_ex.unwrap()(
        conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_saxpyf_ex(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpyf_ex.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_daxpyf_ex(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpyf_ex.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_caxpyf_ex(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpyf_ex.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_zaxpyf_ex(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpyf_ex.unwrap()(
        conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_sdotaxpyv_ex(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
    z: *mut f32,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdotaxpyv_ex.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_ddotaxpyv_ex(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
    z: *mut f64,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddotaxpyv_ex.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_cdotaxpyv_ex(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    rho: *mut scomplex,
    z: *mut scomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdotaxpyv_ex.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_zdotaxpyv_ex(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
    z: *mut dcomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdotaxpyv_ex.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_sdotxaxpyf_ex(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    w: *mut f32,
    incw: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    z: *mut f32,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdotxaxpyf_ex.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_ddotxaxpyf_ex(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    w: *mut f64,
    incw: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    z: *mut f64,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddotxaxpyf_ex.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_cdotxaxpyf_ex(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    w: *mut scomplex,
    incw: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    z: *mut scomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdotxaxpyf_ex.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_zdotxaxpyf_ex(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    w: *mut dcomplex,
    incw: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    z: *mut dcomplex,
    incz: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdotxaxpyf_ex.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz, cntx, rntm,
    )
}

pub unsafe fn bli_sdotxf_ex(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdotxf_ex.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_ddotxf_ex(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddotxf_ex.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_cdotxf_ex(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdotxf_ex.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_zdotxf_ex(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdotxf_ex.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_saxpy2v(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut f32,
    alphay: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    z: *mut f32,
    incz: inc_t,
) {
    dyload_lib().bli_saxpy2v.unwrap()(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz)
}

pub unsafe fn bli_daxpy2v(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut f64,
    alphay: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    z: *mut f64,
    incz: inc_t,
) {
    dyload_lib().bli_daxpy2v.unwrap()(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz)
}

pub unsafe fn bli_caxpy2v(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut scomplex,
    alphay: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    z: *mut scomplex,
    incz: inc_t,
) {
    dyload_lib().bli_caxpy2v.unwrap()(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz)
}

pub unsafe fn bli_zaxpy2v(
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alphax: *mut dcomplex,
    alphay: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    z: *mut dcomplex,
    incz: inc_t,
) {
    dyload_lib().bli_zaxpy2v.unwrap()(conjx, conjy, n, alphax, alphay, x, incx, y, incy, z, incz)
}

pub unsafe fn bli_saxpyf(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_saxpyf.unwrap()(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy)
}

pub unsafe fn bli_daxpyf(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_daxpyf.unwrap()(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy)
}

pub unsafe fn bli_caxpyf(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_caxpyf.unwrap()(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy)
}

pub unsafe fn bli_zaxpyf(
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zaxpyf.unwrap()(conja, conjx, m, b_n, alpha, a, inca, lda, x, incx, y, incy)
}

pub unsafe fn bli_sdotaxpyv(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    rho: *mut f32,
    z: *mut f32,
    incz: inc_t,
) {
    dyload_lib().bli_sdotaxpyv.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz,
    )
}

pub unsafe fn bli_ddotaxpyv(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    rho: *mut f64,
    z: *mut f64,
    incz: inc_t,
) {
    dyload_lib().bli_ddotaxpyv.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz,
    )
}

pub unsafe fn bli_cdotaxpyv(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    rho: *mut scomplex,
    z: *mut scomplex,
    incz: inc_t,
) {
    dyload_lib().bli_cdotaxpyv.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz,
    )
}

pub unsafe fn bli_zdotaxpyv(
    conjxt: conj_t,
    conjx: conj_t,
    conjy: conj_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    rho: *mut dcomplex,
    z: *mut dcomplex,
    incz: inc_t,
) {
    dyload_lib().bli_zdotaxpyv.unwrap()(
        conjxt, conjx, conjy, n, alpha, x, incx, y, incy, rho, z, incz,
    )
}

pub unsafe fn bli_sdotxaxpyf(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    w: *mut f32,
    incw: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    z: *mut f32,
    incz: inc_t,
) {
    dyload_lib().bli_sdotxaxpyf.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz,
    )
}

pub unsafe fn bli_ddotxaxpyf(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    w: *mut f64,
    incw: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    z: *mut f64,
    incz: inc_t,
) {
    dyload_lib().bli_ddotxaxpyf.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz,
    )
}

pub unsafe fn bli_cdotxaxpyf(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    w: *mut scomplex,
    incw: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    z: *mut scomplex,
    incz: inc_t,
) {
    dyload_lib().bli_cdotxaxpyf.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz,
    )
}

pub unsafe fn bli_zdotxaxpyf(
    conjat: conj_t,
    conja: conj_t,
    conjw: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    w: *mut dcomplex,
    incw: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    z: *mut dcomplex,
    incz: inc_t,
) {
    dyload_lib().bli_zdotxaxpyf.unwrap()(
        conjat, conja, conjw, conjx, m, b_n, alpha, a, inca, lda, w, incw, x, incx, beta, y, incy,
        z, incz,
    )
}

pub unsafe fn bli_sdotxf(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_sdotxf.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_ddotxf(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_ddotxf.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_cdotxf(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_cdotxf.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_zdotxf(
    conjat: conj_t,
    conjx: conj_t,
    m: dim_t,
    b_n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zdotxf.unwrap()(
        conjat, conjx, m, b_n, alpha, a, inca, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_axpy2v_ex_qfp(dt: num_t) -> axpy2v_ex_vft {
    dyload_lib().bli_axpy2v_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_axpyf_ex_qfp(dt: num_t) -> axpyf_ex_vft {
    dyload_lib().bli_axpyf_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_dotaxpyv_ex_qfp(dt: num_t) -> dotaxpyv_ex_vft {
    dyload_lib().bli_dotaxpyv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_dotxaxpyf_ex_qfp(dt: num_t) -> dotxaxpyf_ex_vft {
    dyload_lib().bli_dotxaxpyf_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_dotxf_ex_qfp(dt: num_t) -> dotxf_ex_vft {
    dyload_lib().bli_dotxf_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_addm_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_addm_check.unwrap()(x, y)
}

pub unsafe fn bli_copym_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_copym_check.unwrap()(x, y)
}

pub unsafe fn bli_subm_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_subm_check.unwrap()(x, y)
}

pub unsafe fn bli_axpym_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpym_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scal2m_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_scal2m_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scalm_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_scalm_check.unwrap()(alpha, x)
}

pub unsafe fn bli_setm_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setm_check.unwrap()(alpha, x)
}

pub unsafe fn bli_xpbym_check(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbym_check.unwrap()(x, beta, y)
}

pub unsafe fn bli_l1m_xy_check(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1m_xy_check.unwrap()(x, y)
}

pub unsafe fn bli_l1m_axy_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_l1m_axy_check.unwrap()(alpha, x, y)
}

pub unsafe fn bli_l1m_ax_check(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_l1m_ax_check.unwrap()(alpha, x)
}

pub unsafe fn bli_addm_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_addm_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_copym_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_copym_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_subm_ex(x: *mut obj_t, y: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_subm_ex.unwrap()(x, y, cntx, rntm)
}

pub unsafe fn bli_axpym_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_axpym_ex.unwrap()(alpha, x, y, cntx, rntm)
}

pub unsafe fn bli_scal2m_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scal2m_ex.unwrap()(alpha, x, y, cntx, rntm)
}

pub unsafe fn bli_scalm_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_scalm_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_setm_ex(alpha: *mut obj_t, x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_setm_ex.unwrap()(alpha, x, cntx, rntm)
}

pub unsafe fn bli_xpbym_ex(
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_xpbym_ex.unwrap()(x, beta, y, cntx, rntm)
}

pub unsafe fn bli_xpbym_md_ex(
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_xpbym_md_ex.unwrap()(x, beta, y, cntx, rntm)
}

pub unsafe fn bli_addm(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_addm.unwrap()(x, y)
}

pub unsafe fn bli_copym(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_copym.unwrap()(x, y)
}

pub unsafe fn bli_subm(x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_subm.unwrap()(x, y)
}

pub unsafe fn bli_axpym(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_axpym.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scal2m(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_scal2m.unwrap()(alpha, x, y)
}

pub unsafe fn bli_scalm(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_scalm.unwrap()(alpha, x)
}

pub unsafe fn bli_setm(alpha: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_setm.unwrap()(alpha, x)
}

pub unsafe fn bli_xpbym(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbym.unwrap()(x, beta, y)
}

pub unsafe fn bli_xpbym_md(x: *mut obj_t, beta: *mut obj_t, y: *mut obj_t) {
    dyload_lib().bli_xpbym_md.unwrap()(x, beta, y)
}

pub unsafe fn bli_saddm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saddm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_daddm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daddm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_caddm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caddm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zaddm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaddm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_scopym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scopym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dcopym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dcopym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ccopym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ccopym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zcopym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zcopym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ssubm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssubm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dsubm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsubm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_csubm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csubm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zsubm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsubm_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_saxpym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_daxpym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_caxpym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zaxpym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sscal2m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscal2m_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dscal2m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscal2m_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cscal2m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscal2m_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zscal2m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscal2m_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sscalm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscalm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_dscalm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscalm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_cscalm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscalm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_zscalm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscalm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_ssetm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssetm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_dsetm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsetm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_csetm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csetm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_zsetm_ex(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsetm_ex.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_sxpbym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sxpbym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dxpbym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dxpbym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cxpbym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cxpbym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zxpbym_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zxpbym_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ssxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ddxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ccxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ccxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zzxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zzxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sdxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_scxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_szxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_szxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dsxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dcxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dcxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dzxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dzxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_csxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cdxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_czxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_czxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zsxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zdxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zcxpbym_md_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zcxpbym_md_ex.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_saddm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_saddm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_daddm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_daddm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_caddm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_caddm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zaddm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zaddm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_scopym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_scopym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dcopym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dcopym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_ccopym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ccopym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zcopym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zcopym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_ssubm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ssubm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dsubm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dsubm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_csubm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_csubm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zsubm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zsubm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_saxpym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_saxpym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_daxpym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_daxpym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_caxpym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_caxpym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zaxpym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zaxpym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_sscal2m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_sscal2m.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dscal2m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dscal2m.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_cscal2m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_cscal2m.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zscal2m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zscal2m.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_sscalm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_sscalm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_dscalm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dscalm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_cscalm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_cscalm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_zscalm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zscalm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_ssetm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_ssetm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_dsetm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_dsetm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_csetm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_csetm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_zsetm(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zsetm.unwrap()(conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x)
}

pub unsafe fn bli_sxpbym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_sxpbym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dxpbym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dxpbym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_cxpbym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_cxpbym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zxpbym(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zxpbym.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_ssxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ssxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_ddxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ddxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_ccxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_ccxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zzxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zzxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_sdxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_sdxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_scxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_scxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_szxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_szxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dsxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dsxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dcxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dcxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_dzxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_dzxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_csxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_csxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_cdxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_cdxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_czxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_czxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zsxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zsxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zdxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zdxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zcxpbym_md(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) {
    dyload_lib().bli_zcxpbym_md.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_addm_ex_qfp(dt: num_t) -> addm_ex_vft {
    dyload_lib().bli_addm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_copym_ex_qfp(dt: num_t) -> copym_ex_vft {
    dyload_lib().bli_copym_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_subm_ex_qfp(dt: num_t) -> subm_ex_vft {
    dyload_lib().bli_subm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_axpym_ex_qfp(dt: num_t) -> axpym_ex_vft {
    dyload_lib().bli_axpym_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_scal2m_ex_qfp(dt: num_t) -> scal2m_ex_vft {
    dyload_lib().bli_scal2m_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_scalm_ex_qfp(dt: num_t) -> scalm_ex_vft {
    dyload_lib().bli_scalm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_setm_ex_qfp(dt: num_t) -> setm_ex_vft {
    dyload_lib().bli_setm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_xpbym_ex_qfp(dt: num_t) -> xpbym_ex_vft {
    dyload_lib().bli_xpbym_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_xpbym_md_ex_qfp2(dtx: num_t, dty: num_t) -> xpbym_md_ex_vft {
    dyload_lib().bli_xpbym_md_ex_qfp2.unwrap()(dtx, dty)
}

pub unsafe fn bli_saddm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saddm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_daddm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daddm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_caddm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caddm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zaddm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaddm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_scopym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scopym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dcopym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dcopym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ccopym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ccopym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zcopym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zcopym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ssubm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssubm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dsubm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsubm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_csubm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csubm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zsubm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsubm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_saxpym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_saxpym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_daxpym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_daxpym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_caxpym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_caxpym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zaxpym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zaxpym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sscal2m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscal2m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dscal2m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscal2m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cscal2m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscal2m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zscal2m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscal2m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, alpha, x, rs_x, cs_x, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sscalm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sscalm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_dscalm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dscalm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_cscalm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cscalm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_zscalm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zscalm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_ssetm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssetm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_dsetm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsetm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_csetm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csetm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_zsetm_unb_var1(
    conjalpha: conj_t,
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsetm_unb_var1.unwrap()(
        conjalpha, diagoffx, diagx, uplox, m, n, alpha, x, rs_x, cs_x, cntx, rntm,
    )
}

pub unsafe fn bli_sxpbym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sxpbym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dxpbym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dxpbym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cxpbym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cxpbym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zxpbym_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zxpbym_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ssxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ddxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ddxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_ccxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ccxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zzxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zzxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_sdxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sdxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_scxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_scxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_szxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_szxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dsxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dcxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dcxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_dzxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dzxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_csxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_cdxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cdxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_czxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_czxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zsxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f32,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zdxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut f64,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zdxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_zcxpbym_md_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zcxpbym_md_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, beta, y, rs_y, cs_y, cntx, rntm,
    )
}

pub unsafe fn bli_packm_cntl_create_node(
    rntm: *mut rntm_t,
    family: opid_t,
    var_func: void_fp,
    packm_var_func: void_fp,
    bmid_m: bszid_t,
    bmid_n: bszid_t,
    does_invert_diag: bool,
    rev_iter_if_upper: bool,
    rev_iter_if_lower: bool,
    pack_schema: pack_t,
    pack_buf_type: packbuf_t,
    sub_node: *mut cntl_t,
) -> *mut cntl_t {
    dyload_lib().bli_packm_cntl_create_node.unwrap()(
        rntm,
        family,
        var_func,
        packm_var_func,
        bmid_m,
        bmid_n,
        does_invert_diag,
        rev_iter_if_upper,
        rev_iter_if_lower,
        pack_schema,
        pack_buf_type,
        sub_node,
    )
}

pub unsafe fn bli_packm_init_check(a: *mut obj_t, p: *mut obj_t, cntx: *mut cntx_t) {
    dyload_lib().bli_packm_init_check.unwrap()(a, p, cntx)
}

pub unsafe fn bli_packm_int_check(a: *mut obj_t, p: *mut obj_t, cntx: *mut cntx_t) {
    dyload_lib().bli_packm_int_check.unwrap()(a, p, cntx)
}

pub unsafe fn bli_packm_init(
    a: *mut obj_t,
    p: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> siz_t {
    dyload_lib().bli_packm_init.unwrap()(a, p, cntx, cntl)
}

pub unsafe fn bli_packm_init_pack(
    invert_diag: invdiag_t,
    family: opid_t,
    schema: pack_t,
    pack_ord_if_up: packord_t,
    pack_ord_if_lo: packord_t,
    bmult_id_m: bszid_t,
    bmult_id_n: bszid_t,
    a: *mut obj_t,
    p: *mut obj_t,
    cntx: *mut cntx_t,
) -> siz_t {
    dyload_lib().bli_packm_init_pack.unwrap()(
        invert_diag,
        family,
        schema,
        pack_ord_if_up,
        pack_ord_if_lo,
        bmult_id_m,
        bmult_id_n,
        a,
        p,
        cntx,
    )
}

pub unsafe fn bli_packm_int(
    a: *mut obj_t,
    p: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_packm_int.unwrap()(a, p, cntx, cntl, thread)
}

pub unsafe fn bli_packm_acquire_mpart_t2b(
    requested_part: subpart_t,
    i: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_packm_acquire_mpart_t2b.unwrap()(requested_part, i, b, obj, sub_obj)
}

pub unsafe fn bli_packm_acquire_mpart_l2r(
    requested_part: subpart_t,
    j: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_packm_acquire_mpart_l2r.unwrap()(requested_part, j, b, obj, sub_obj)
}

pub unsafe fn bli_packm_acquire_mpart_tl2br(
    requested_part: subpart_t,
    ij: dim_t,
    b: dim_t,
    obj: *mut obj_t,
    sub_obj: *mut obj_t,
) {
    dyload_lib().bli_packm_acquire_mpart_tl2br.unwrap()(requested_part, ij, b, obj, sub_obj)
}

pub unsafe fn bli_packm_offset_to_panel_for(offmn: dim_t, p: *mut obj_t) -> dim_t {
    dyload_lib().bli_packm_offset_to_panel_for.unwrap()(offmn, p)
}

pub unsafe fn bli_packm_unb_var1(
    c: *mut obj_t,
    p: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    t: *mut thrinfo_t,
) {
    dyload_lib().bli_packm_unb_var1.unwrap()(c, p, cntx, cntl, t)
}

pub unsafe fn bli_packm_blk_var1(
    c: *mut obj_t,
    p: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    t: *mut thrinfo_t,
) {
    dyload_lib().bli_packm_blk_var1.unwrap()(c, p, cntx, cntl, t)
}

pub unsafe fn bli_spackm_unb_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_unb_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p,
        cs_p, cntx,
    )
}

pub unsafe fn bli_dpackm_unb_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_unb_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p,
        cs_p, cntx,
    )
}

pub unsafe fn bli_cpackm_unb_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_unb_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p,
        cs_p, cntx,
    )
}

pub unsafe fn bli_zpackm_unb_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_unb_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p,
        cs_p, cntx,
    )
}

pub unsafe fn bli_spackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    schema: pack_t,
    invdiag: bool,
    revifup: bool,
    reviflo: bool,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    packm_ker: void_fp,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, schema, invdiag, revifup, reviflo, m, n, m_max,
        n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p, packm_ker, cntx, thread,
    )
}

pub unsafe fn bli_dpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    schema: pack_t,
    invdiag: bool,
    revifup: bool,
    reviflo: bool,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    packm_ker: void_fp,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, schema, invdiag, revifup, reviflo, m, n, m_max,
        n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p, packm_ker, cntx, thread,
    )
}

pub unsafe fn bli_cpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    schema: pack_t,
    invdiag: bool,
    revifup: bool,
    reviflo: bool,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    packm_ker: void_fp,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, schema, invdiag, revifup, reviflo, m, n, m_max,
        n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p, packm_ker, cntx, thread,
    )
}

pub unsafe fn bli_zpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    schema: pack_t,
    invdiag: bool,
    revifup: bool,
    reviflo: bool,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    packm_ker: void_fp,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, schema, invdiag, revifup, reviflo, m, n, m_max,
        n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p, packm_ker, cntx, thread,
    )
}

pub unsafe fn bli_spackm_struc_cxk(
    strucc: struc_t,
    diagoffp: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_struc_cxk.unwrap()(
        strucc,
        diagoffp,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_dpackm_struc_cxk(
    strucc: struc_t,
    diagoffp: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_struc_cxk.unwrap()(
        strucc,
        diagoffp,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_cpackm_struc_cxk(
    strucc: struc_t,
    diagoffp: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_struc_cxk.unwrap()(
        strucc,
        diagoffp,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_zpackm_struc_cxk(
    strucc: struc_t,
    diagoffp: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_struc_cxk.unwrap()(
        strucc,
        diagoffp,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_spackm_herm_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_herm_cxk.unwrap()(
        strucc,
        diagoffc,
        uploc,
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_dpackm_herm_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_herm_cxk.unwrap()(
        strucc,
        diagoffc,
        uploc,
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_cpackm_herm_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_herm_cxk.unwrap()(
        strucc,
        diagoffc,
        uploc,
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_zpackm_herm_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_herm_cxk.unwrap()(
        strucc,
        diagoffc,
        uploc,
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_spackm_tri_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_tri_cxk.unwrap()(
        strucc,
        diagoffc,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_dpackm_tri_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_tri_cxk.unwrap()(
        strucc,
        diagoffc,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_cpackm_tri_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_tri_cxk.unwrap()(
        strucc,
        diagoffc,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_zpackm_tri_cxk(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_tri_cxk.unwrap()(
        strucc,
        diagoffc,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_cpackm_struc_cxk_1er(
    strucc: struc_t,
    diagoffp: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_struc_cxk_1er.unwrap()(
        strucc,
        diagoffp,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_zpackm_struc_cxk_1er(
    strucc: struc_t,
    diagoffp: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_struc_cxk_1er.unwrap()(
        strucc,
        diagoffp,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_cpackm_herm_cxk_1er(
    strucc: struc_t,
    diagoffc: doff_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_herm_cxk_1er.unwrap()(
        strucc,
        diagoffc,
        uploc,
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_zpackm_herm_cxk_1er(
    strucc: struc_t,
    diagoffc: doff_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_herm_cxk_1er.unwrap()(
        strucc,
        diagoffc,
        uploc,
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_cpackm_tri_cxk_1er(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_tri_cxk_1er.unwrap()(
        strucc,
        diagoffc,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_zpackm_tri_cxk_1er(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    conjc: conj_t,
    schema: pack_t,
    invdiag: bool,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    incc: inc_t,
    ldc: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_tri_cxk_1er.unwrap()(
        strucc,
        diagoffc,
        diagc,
        uploc,
        conjc,
        schema,
        invdiag,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        c,
        rs_c,
        cs_c,
        incc,
        ldc,
        p,
        rs_p,
        cs_p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_spackm_cxk(
    conja: conj_t,
    schema: pack_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_spackm_cxk.unwrap()(
        conja,
        schema,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        a,
        inca,
        lda,
        p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_dpackm_cxk(
    conja: conj_t,
    schema: pack_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dpackm_cxk.unwrap()(
        conja,
        schema,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        a,
        inca,
        lda,
        p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_cpackm_cxk(
    conja: conj_t,
    schema: pack_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_cxk.unwrap()(
        conja,
        schema,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        a,
        inca,
        lda,
        p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_zpackm_cxk(
    conja: conj_t,
    schema: pack_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_cxk.unwrap()(
        conja,
        schema,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        a,
        inca,
        lda,
        p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_cpackm_cxk_1er(
    conja: conj_t,
    schema: pack_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cpackm_cxk_1er.unwrap()(
        conja,
        schema,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        a,
        inca,
        lda,
        p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_zpackm_cxk_1er(
    conja: conj_t,
    schema: pack_t,
    panel_dim: dim_t,
    panel_dim_max: dim_t,
    panel_len: dim_t,
    panel_len_max: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zpackm_cxk_1er.unwrap()(
        conja,
        schema,
        panel_dim,
        panel_dim_max,
        panel_len,
        panel_len_max,
        kappa,
        a,
        inca,
        lda,
        p,
        ldp,
        cntx,
    )
}

pub unsafe fn bli_pack_full_init(
    identifier: *const c_char,
    alpha_obj: *mut obj_t,
    src_obj: *mut obj_t,
    dest_obj: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_pack_full_init.unwrap()(identifier, alpha_obj, src_obj, dest_obj, cntx, rntm)
}

pub unsafe fn bli_spackm_full(
    identifier: *const c_char,
    alpha_obj: *mut obj_t,
    src_obj: *mut obj_t,
    dest: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_full.unwrap()(identifier, alpha_obj, src_obj, dest, cntx, rntm, thread)
}

pub unsafe fn bli_dpackm_full(
    identifier: *const c_char,
    alpha_obj: *mut obj_t,
    src_obj: *mut obj_t,
    dest: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_full.unwrap()(identifier, alpha_obj, src_obj, dest, cntx, rntm, thread)
}

pub unsafe fn bli_packm_blk_var1_md(
    c: *mut obj_t,
    p: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    t: *mut thrinfo_t,
) {
    dyload_lib().bli_packm_blk_var1_md.unwrap()(c, p, cntx, cntl, t)
}

pub unsafe fn bli_sspackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sspackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_ddpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ddpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_ccpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ccpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_zzpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zzpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_sdpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sdpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_scpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_scpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_szpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_szpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_dspackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dspackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_dcpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dcpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_dzpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dzpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_cspackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cspackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_cdpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cdpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_czpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_czpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_zspackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zspackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_zdpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zdpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_zcpackm_blk_var1_md(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zcpackm_blk_var1_md.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, is_p, pd_p, ps_p,
        cntx, thread,
    )
}

pub unsafe fn bli_sspackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sspackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_ddpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ddpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_ccpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ccpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_zzpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zzpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_sdpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f64,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sdpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_scpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut scomplex,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_scpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_szpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_szpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_dspackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f32,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dspackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_dcpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut scomplex,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dcpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_dzpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dzpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_cspackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f32,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cspackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_cdpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f64,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cdpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_czpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_czpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_zspackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f32,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zspackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_zdpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut f64,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zdpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_zcpackm_struc_cxk_md(
    conjc: conj_t,
    schema: pack_t,
    m_panel: dim_t,
    n_panel: dim_t,
    m_panel_max: dim_t,
    n_panel_max: dim_t,
    kappa: *mut scomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    is_p: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zcpackm_struc_cxk_md.unwrap()(
        conjc,
        schema,
        m_panel,
        n_panel,
        m_panel_max,
        n_panel_max,
        kappa,
        c,
        rs_c,
        cs_c,
        p,
        rs_p,
        cs_p,
        is_p,
        cntx,
    )
}

pub unsafe fn bli_sspackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_sspackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_ddpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_ddpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_ccpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_ccpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zzpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_zzpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_sdpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_sdpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_scpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_scpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_szpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_szpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_dspackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_dspackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_dcpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_dcpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_dzpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_dzpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_cspackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_cspackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_cdpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_cdpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_czpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_czpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zspackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_zspackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zdpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_zdpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zcpackm_cxk_1e_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_zcpackm_cxk_1e_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_sspackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_sspackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_ddpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_ddpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_ccpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_ccpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zzpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_zzpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_sdpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_sdpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_scpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_scpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_szpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_szpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_dspackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_dspackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_dcpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_dcpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_dzpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_dzpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_cspackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_cspackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_cdpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_cdpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_czpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut dcomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_czpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zspackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f32,
    ldp: inc_t,
) {
    dyload_lib().bli_zspackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zdpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut f64,
    ldp: inc_t,
) {
    dyload_lib().bli_zdpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_zcpackm_cxk_1r_md(
    conja: conj_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    p: *mut scomplex,
    ldp: inc_t,
) {
    dyload_lib().bli_zcpackm_cxk_1r_md.unwrap()(conja, m, n, kappa, a, inca, lda, p, ldp)
}

pub unsafe fn bli_unpackm_cntl_create_node(
    rntm: *mut rntm_t,
    var_func: void_fp,
    unpackm_var_func: void_fp,
    sub_node: *mut cntl_t,
) -> *mut cntl_t {
    dyload_lib().bli_unpackm_cntl_create_node.unwrap()(rntm, var_func, unpackm_var_func, sub_node)
}

pub unsafe fn bli_unpackm_int_check(p: *mut obj_t, a: *mut obj_t, cntx: *mut cntx_t) {
    dyload_lib().bli_unpackm_int_check.unwrap()(p, a, cntx)
}

pub unsafe fn bli_unpackm_int(
    p: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_unpackm_int.unwrap()(p, a, cntx, cntl, thread)
}

pub unsafe fn bli_unpackm_unb_var1(
    p: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_unpackm_unb_var1.unwrap()(p, c, cntx, cntl, thread)
}

pub unsafe fn bli_sunpackm_unb_var1(
    diagoffp: doff_t,
    uplop: uplo_t,
    transp: trans_t,
    m: dim_t,
    n: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sunpackm_unb_var1.unwrap()(
        diagoffp, uplop, transp, m, n, p, rs_p, cs_p, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dunpackm_unb_var1(
    diagoffp: doff_t,
    uplop: uplo_t,
    transp: trans_t,
    m: dim_t,
    n: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dunpackm_unb_var1.unwrap()(
        diagoffp, uplop, transp, m, n, p, rs_p, cs_p, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cunpackm_unb_var1(
    diagoffp: doff_t,
    uplop: uplo_t,
    transp: trans_t,
    m: dim_t,
    n: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cunpackm_unb_var1.unwrap()(
        diagoffp, uplop, transp, m, n, p, rs_p, cs_p, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zunpackm_unb_var1(
    diagoffp: doff_t,
    uplop: uplo_t,
    transp: trans_t,
    m: dim_t,
    n: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zunpackm_unb_var1.unwrap()(
        diagoffp, uplop, transp, m, n, p, rs_p, cs_p, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_unpackm_blk_var1(
    p: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_unpackm_blk_var1.unwrap()(p, c, cntx, cntl, thread)
}

pub unsafe fn bli_sunpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_panel: dim_t,
    n_panel: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sunpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_panel, n_panel, p, rs_p, cs_p, pd_p, ps_p,
        c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dunpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_panel: dim_t,
    n_panel: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dunpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_panel, n_panel, p, rs_p, cs_p, pd_p, ps_p,
        c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cunpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_panel: dim_t,
    n_panel: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cunpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_panel, n_panel, p, rs_p, cs_p, pd_p, ps_p,
        c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zunpackm_blk_var1(
    strucc: struc_t,
    diagoffc: doff_t,
    diagc: diag_t,
    uploc: uplo_t,
    transc: trans_t,
    m: dim_t,
    n: dim_t,
    m_panel: dim_t,
    n_panel: dim_t,
    p: *mut c_void,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zunpackm_blk_var1.unwrap()(
        strucc, diagoffc, diagc, uploc, transc, m, n, m_panel, n_panel, p, rs_p, cs_p, pd_p, ps_p,
        c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sunpackm_cxk(
    conjp: conj_t,
    panel_dim: dim_t,
    panel_len: dim_t,
    kappa: *mut f32,
    p: *mut f32,
    ldp: inc_t,
    a: *mut f32,
    inca: inc_t,
    lda: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sunpackm_cxk.unwrap()(
        conjp, panel_dim, panel_len, kappa, p, ldp, a, inca, lda, cntx,
    )
}

pub unsafe fn bli_dunpackm_cxk(
    conjp: conj_t,
    panel_dim: dim_t,
    panel_len: dim_t,
    kappa: *mut f64,
    p: *mut f64,
    ldp: inc_t,
    a: *mut f64,
    inca: inc_t,
    lda: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dunpackm_cxk.unwrap()(
        conjp, panel_dim, panel_len, kappa, p, ldp, a, inca, lda, cntx,
    )
}

pub unsafe fn bli_cunpackm_cxk(
    conjp: conj_t,
    panel_dim: dim_t,
    panel_len: dim_t,
    kappa: *mut scomplex,
    p: *mut scomplex,
    ldp: inc_t,
    a: *mut scomplex,
    inca: inc_t,
    lda: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cunpackm_cxk.unwrap()(
        conjp, panel_dim, panel_len, kappa, p, ldp, a, inca, lda, cntx,
    )
}

pub unsafe fn bli_zunpackm_cxk(
    conjp: conj_t,
    panel_dim: dim_t,
    panel_len: dim_t,
    kappa: *mut dcomplex,
    p: *mut dcomplex,
    ldp: inc_t,
    a: *mut dcomplex,
    inca: inc_t,
    lda: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zunpackm_cxk.unwrap()(
        conjp, panel_dim, panel_len, kappa, p, ldp, a, inca, lda, cntx,
    )
}

pub unsafe fn bli_gemv_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_gemv_check.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_hemv_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_hemv_check.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_symv_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_symv_check.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_ger_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_ger_check.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_her2_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_her2_check.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_syr2_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_syr2_check.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_her_check(alpha: *mut obj_t, x: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_her_check.unwrap()(alpha, x, a)
}

pub unsafe fn bli_syr_check(alpha: *mut obj_t, x: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_syr_check.unwrap()(alpha, x, a)
}

pub unsafe fn bli_trmv_check(alpha: *mut obj_t, a: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_trmv_check.unwrap()(alpha, a, x)
}

pub unsafe fn bli_trsv_check(alpha: *mut obj_t, a: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_trsv_check.unwrap()(alpha, a, x)
}

pub unsafe fn bli_xxmv_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_xxmv_check.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_xxr_check(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_xxr_check.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_gemv_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_gemv_ex.unwrap()(alpha, a, x, beta, y, cntx, rntm)
}

pub unsafe fn bli_hemv_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_hemv_ex.unwrap()(alpha, a, x, beta, y, cntx, rntm)
}

pub unsafe fn bli_symv_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_symv_ex.unwrap()(alpha, a, x, beta, y, cntx, rntm)
}

pub unsafe fn bli_ger_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ger_ex.unwrap()(alpha, x, y, a, cntx, rntm)
}

pub unsafe fn bli_her2_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_her2_ex.unwrap()(alpha, x, y, a, cntx, rntm)
}

pub unsafe fn bli_syr2_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_syr2_ex.unwrap()(alpha, x, y, a, cntx, rntm)
}

pub unsafe fn bli_her_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_her_ex.unwrap()(alpha, x, a, cntx, rntm)
}

pub unsafe fn bli_syr_ex(
    alpha: *mut obj_t,
    x: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_syr_ex.unwrap()(alpha, x, a, cntx, rntm)
}

pub unsafe fn bli_trmv_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_trmv_ex.unwrap()(alpha, a, x, cntx, rntm)
}

pub unsafe fn bli_trsv_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_trsv_ex.unwrap()(alpha, a, x, cntx, rntm)
}

pub unsafe fn bli_gemv(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_gemv.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_hemv(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_hemv.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_symv(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
) {
    dyload_lib().bli_symv.unwrap()(alpha, a, x, beta, y)
}

pub unsafe fn bli_ger(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_ger.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_her2(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_her2.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_syr2(alpha: *mut obj_t, x: *mut obj_t, y: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_syr2.unwrap()(alpha, x, y, a)
}

pub unsafe fn bli_her(alpha: *mut obj_t, x: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_her.unwrap()(alpha, x, a)
}

pub unsafe fn bli_syr(alpha: *mut obj_t, x: *mut obj_t, a: *mut obj_t) {
    dyload_lib().bli_syr.unwrap()(alpha, x, a)
}

pub unsafe fn bli_trmv(alpha: *mut obj_t, a: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_trmv.unwrap()(alpha, a, x)
}

pub unsafe fn bli_trsv(alpha: *mut obj_t, a: *mut obj_t, x: *mut obj_t) {
    dyload_lib().bli_trsv.unwrap()(alpha, a, x)
}

pub unsafe fn bli_sgemv_ex(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sgemv_ex.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_dgemv_ex(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dgemv_ex.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_cgemv_ex(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cgemv_ex.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_zgemv_ex(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zgemv_ex.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_sger_ex(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sger_ex.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_dger_ex(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dger_ex.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_cger_ex(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cger_ex.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_zger_ex(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zger_ex.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_shemv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_shemv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_dhemv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dhemv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_chemv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_chemv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_zhemv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zhemv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_ssymv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssymv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_dsymv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsymv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_csymv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csymv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_zsymv_ex(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsymv_ex.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx, rntm,
    )
}

pub unsafe fn bli_sher_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sher_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dher_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dher_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cher_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut scomplex,
    incx: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cher_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zher_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut dcomplex,
    incx: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zher_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_ssyr_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssyr_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dsyr_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsyr_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_csyr_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csyr_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zsyr_ex(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsyr_ex.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_sher2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sher2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_dher2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dher2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_cher2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cher2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_zher2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zher2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_ssyr2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssyr2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_dsyr2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsyr2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_csyr2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csyr2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_zsyr2_ex(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsyr2_ex.unwrap()(
        uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx, rntm,
    )
}

pub unsafe fn bli_strmv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_strmv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_dtrmv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dtrmv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_ctrmv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ctrmv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_ztrmv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ztrmv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_strsv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_strsv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_dtrsv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dtrsv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_ctrsv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ctrsv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_ztrsv_ex(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ztrsv_ex.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx, rntm,
    )
}

pub unsafe fn bli_sgemv(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_sgemv.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_dgemv(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dgemv.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_cgemv(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_cgemv.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_zgemv(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zgemv.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_sger(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_sger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_dger(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_dger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_cger(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_cger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_zger(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_zger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_shemv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_shemv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_dhemv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dhemv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_chemv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_chemv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_zhemv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zhemv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_ssymv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
) {
    dyload_lib().bli_ssymv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_dsymv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
) {
    dyload_lib().bli_dsymv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_csymv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
) {
    dyload_lib().bli_csymv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_zsymv(
    uploa: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
) {
    dyload_lib().bli_zsymv.unwrap()(
        uploa, conja, conjx, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy,
    )
}

pub unsafe fn bli_sher(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_sher.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_dher(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_dher.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_cher(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut scomplex,
    incx: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_cher.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_zher(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut dcomplex,
    incx: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_zher.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_ssyr(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_ssyr.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_dsyr(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_dsyr.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_csyr(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_csyr.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_zsyr(
    uploa: uplo_t,
    conjx: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_zsyr.unwrap()(uploa, conjx, m, alpha, x, incx, a, rs_a, cs_a)
}

pub unsafe fn bli_sher2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_sher2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_dher2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_dher2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_cher2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_cher2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_zher2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_zher2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_ssyr2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_ssyr2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_dsyr2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_dsyr2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_csyr2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_csyr2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_zsyr2(
    uploa: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
) {
    dyload_lib().bli_zsyr2.unwrap()(uploa, conjx, conjy, m, alpha, x, incx, y, incy, a, rs_a, cs_a)
}

pub unsafe fn bli_strmv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
) {
    dyload_lib().bli_strmv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_dtrmv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
) {
    dyload_lib().bli_dtrmv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_ctrmv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
) {
    dyload_lib().bli_ctrmv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_ztrmv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
) {
    dyload_lib().bli_ztrmv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_strsv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
) {
    dyload_lib().bli_strsv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_dtrsv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
) {
    dyload_lib().bli_dtrsv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_ctrsv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
) {
    dyload_lib().bli_ctrsv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_ztrsv(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
) {
    dyload_lib().bli_ztrsv.unwrap()(uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx)
}

pub unsafe fn bli_gemv_ex_qfp(dt: num_t) -> gemv_ex_vft {
    dyload_lib().bli_gemv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_ger_ex_qfp(dt: num_t) -> ger_ex_vft {
    dyload_lib().bli_ger_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_ex_qfp(dt: num_t) -> hemv_ex_vft {
    dyload_lib().bli_hemv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_symv_ex_qfp(dt: num_t) -> symv_ex_vft {
    dyload_lib().bli_symv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_her_ex_qfp(dt: num_t) -> her_ex_vft {
    dyload_lib().bli_her_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_syr_ex_qfp(dt: num_t) -> syr_ex_vft {
    dyload_lib().bli_syr_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_ex_qfp(dt: num_t) -> her2_ex_vft {
    dyload_lib().bli_her2_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_syr2_ex_qfp(dt: num_t) -> syr2_ex_vft {
    dyload_lib().bli_syr2_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_trmv_ex_qfp(dt: num_t) -> trmv_ex_vft {
    dyload_lib().bli_trmv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsv_ex_qfp(dt: num_t) -> trsv_ex_vft {
    dyload_lib().bli_trsv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemv_unb_var1_qfp(dt: num_t) -> gemv_unb_vft {
    dyload_lib().bli_gemv_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemv_unb_var2_qfp(dt: num_t) -> gemv_unb_vft {
    dyload_lib().bli_gemv_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemv_unf_var1_qfp(dt: num_t) -> gemv_unb_vft {
    dyload_lib().bli_gemv_unf_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemv_unf_var2_qfp(dt: num_t) -> gemv_unb_vft {
    dyload_lib().bli_gemv_unf_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_ger_unb_var1_qfp(dt: num_t) -> ger_unb_vft {
    dyload_lib().bli_ger_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_ger_unb_var2_qfp(dt: num_t) -> ger_unb_vft {
    dyload_lib().bli_ger_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unb_var1_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unb_var2_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unb_var3_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unb_var3_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unb_var4_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unb_var4_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unf_var1_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unf_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unf_var3_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unf_var3_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unf_var1a_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unf_var1a_qfp.unwrap()(dt)
}

pub unsafe fn bli_hemv_unf_var3a_qfp(dt: num_t) -> hemv_unb_vft {
    dyload_lib().bli_hemv_unf_var3a_qfp.unwrap()(dt)
}

pub unsafe fn bli_her_unb_var1_qfp(dt: num_t) -> her_unb_vft {
    dyload_lib().bli_her_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_her_unb_var2_qfp(dt: num_t) -> her_unb_vft {
    dyload_lib().bli_her_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_unb_var1_qfp(dt: num_t) -> her2_unb_vft {
    dyload_lib().bli_her2_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_unb_var2_qfp(dt: num_t) -> her2_unb_vft {
    dyload_lib().bli_her2_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_unb_var3_qfp(dt: num_t) -> her2_unb_vft {
    dyload_lib().bli_her2_unb_var3_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_unb_var4_qfp(dt: num_t) -> her2_unb_vft {
    dyload_lib().bli_her2_unb_var4_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_unf_var1_qfp(dt: num_t) -> her2_unb_vft {
    dyload_lib().bli_her2_unf_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_her2_unf_var4_qfp(dt: num_t) -> her2_unb_vft {
    dyload_lib().bli_her2_unf_var4_qfp.unwrap()(dt)
}

pub unsafe fn bli_trmv_unb_var1_qfp(dt: num_t) -> trmv_unb_vft {
    dyload_lib().bli_trmv_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_trmv_unb_var2_qfp(dt: num_t) -> trmv_unb_vft {
    dyload_lib().bli_trmv_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_trmv_unf_var1_qfp(dt: num_t) -> trmv_unb_vft {
    dyload_lib().bli_trmv_unf_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_trmv_unf_var2_qfp(dt: num_t) -> trmv_unb_vft {
    dyload_lib().bli_trmv_unf_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsv_unb_var1_qfp(dt: num_t) -> trsv_unb_vft {
    dyload_lib().bli_trsv_unb_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsv_unb_var2_qfp(dt: num_t) -> trsv_unb_vft {
    dyload_lib().bli_trsv_unb_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsv_unf_var1_qfp(dt: num_t) -> trsv_unb_vft {
    dyload_lib().bli_trsv_unf_var1_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsv_unf_var2_qfp(dt: num_t) -> trsv_unb_vft {
    dyload_lib().bli_trsv_unf_var2_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemv_blk_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemv_blk_var1.unwrap()(alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_gemv_blk_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemv_blk_var2.unwrap()(alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_gemv_unb_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemv_unb_var1.unwrap()(alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_gemv_unb_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemv_unb_var2.unwrap()(alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_gemv_unf_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemv_unf_var1.unwrap()(alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_gemv_unf_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemv_unf_var2.unwrap()(alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_sgemv_unb_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemv_unb_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_unb_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_unb_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_cgemv_unb_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemv_unb_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zgemv_unb_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemv_unb_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_sgemv_unb_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemv_unb_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_unb_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_unb_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_cgemv_unb_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemv_unb_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zgemv_unb_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemv_unb_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_sgemv_unf_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemv_unf_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_unf_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_unf_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_cgemv_unf_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemv_unf_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zgemv_unf_var1(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemv_unf_var1.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_sgemv_unf_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemv_unf_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dgemv_unf_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemv_unf_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_cgemv_unf_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemv_unf_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zgemv_unf_var2(
    transa: trans_t,
    conjx: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemv_unf_var2.unwrap()(
        transa, conjx, m, n, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_ger_blk_var1(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_ger_blk_var1.unwrap()(alpha, x, y, a, cntx, cntl)
}

pub unsafe fn bli_ger_blk_var2(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_ger_blk_var2.unwrap()(alpha, x, y, a, cntx, cntl)
}

pub unsafe fn bli_ger_unb_var1(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_ger_unb_var1.unwrap()(alpha, x, y, a, cntx, cntl)
}

pub unsafe fn bli_ger_unb_var2(
    alpha: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    a: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_ger_unb_var2.unwrap()(alpha, x, y, a, cntx, cntl)
}

pub unsafe fn bli_sger_unb_var1(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sger_unb_var1.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_dger_unb_var1(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dger_unb_var1.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_cger_unb_var1(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cger_unb_var1.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_zger_unb_var1(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zger_unb_var1.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_sger_unb_var2(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sger_unb_var2.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_dger_unb_var2(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dger_unb_var2.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_cger_unb_var2(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cger_unb_var2.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_zger_unb_var2(
    conjx: conj_t,
    conjy: conj_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zger_unb_var2.unwrap()(
        conjx, conjy, m, n, alpha, x, incx, y, incy, a, rs_a, cs_a, cntx,
    )
}

pub unsafe fn bli_hemv_blk_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_blk_var1.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_blk_var2(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_blk_var2.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_blk_var3(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_blk_var3.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_blk_var4(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_blk_var4.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unb_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unb_var1.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unb_var2(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unb_var2.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unb_var3(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unb_var3.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unb_var4(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unb_var4.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unf_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unf_var1.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unf_var3(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unf_var3.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unf_var1a(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unf_var1a.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_hemv_unf_var3a(
    conjh: conj_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    beta: *mut obj_t,
    y: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemv_unf_var3a.unwrap()(conjh, alpha, a, x, beta, y, cntx, cntl)
}

pub unsafe fn bli_shemv_unb_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unb_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unb_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unb_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unb_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unb_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unb_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unb_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unb_var2(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unb_var2.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unb_var2(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unb_var2.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unb_var2(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unb_var2.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unb_var2(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unb_var2.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unb_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unb_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unb_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unb_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unb_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unb_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unb_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unb_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unb_var4(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unb_var4.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unb_var4(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unb_var4.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unb_var4(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unb_var4.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unb_var4(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unb_var4.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unf_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unf_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unf_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unf_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unf_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unf_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unf_var1(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unf_var1.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unf_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unf_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unf_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unf_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unf_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unf_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unf_var3(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unf_var3.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unf_var1a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unf_var1a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unf_var1a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unf_var1a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unf_var1a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unf_var1a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unf_var1a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unf_var1a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_shemv_unf_var3a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    beta: *mut f32,
    y: *mut f32,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_shemv_unf_var3a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_dhemv_unf_var3a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    beta: *mut f64,
    y: *mut f64,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dhemv_unf_var3a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_chemv_unf_var3a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    beta: *mut scomplex,
    y: *mut scomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_chemv_unf_var3a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_zhemv_unf_var3a(
    uplo: uplo_t,
    conja: conj_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    beta: *mut dcomplex,
    y: *mut dcomplex,
    incy: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zhemv_unf_var3a.unwrap()(
        uplo, conja, conjx, conjh, m, alpha, a, rs_a, cs_a, x, incx, beta, y, incy, cntx,
    )
}

pub unsafe fn bli_her_blk_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    x: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her_blk_var1.unwrap()(conjh, alpha, x, c, cntx, cntl)
}

pub unsafe fn bli_her_blk_var2(
    conjh: conj_t,
    alpha: *mut obj_t,
    x: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her_blk_var2.unwrap()(conjh, alpha, x, c, cntx, cntl)
}

pub unsafe fn bli_her_unb_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    x: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her_unb_var1.unwrap()(conjh, alpha, x, c, cntx, cntl)
}

pub unsafe fn bli_her_unb_var2(
    conjh: conj_t,
    alpha: *mut obj_t,
    x: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her_unb_var2.unwrap()(conjh, alpha, x, c, cntx, cntl)
}

pub unsafe fn bli_sher_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher_unb_var1.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher_unb_var1.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher_unb_var1.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher_unb_var1.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sher_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher_unb_var2.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher_unb_var2.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher_unb_var2.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher_unb_var2.unwrap()(
        uplo, conjx, conjh, m, alpha, x, incx, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_her2_blk_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_blk_var1.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_blk_var2(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_blk_var2.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_blk_var3(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_blk_var3.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_blk_var4(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_blk_var4.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_unb_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_unb_var1.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_unb_var2(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_unb_var2.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_unb_var3(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_unb_var3.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_unb_var4(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_unb_var4.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_unf_var1(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_unf_var1.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_her2_unf_var4(
    conjh: conj_t,
    alpha: *mut obj_t,
    alpha_conj: *mut obj_t,
    x: *mut obj_t,
    y: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2_unf_var4.unwrap()(conjh, alpha, alpha_conj, x, y, c, cntx, cntl)
}

pub unsafe fn bli_sher2_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher2_unb_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher2_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher2_unb_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher2_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher2_unb_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher2_unb_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher2_unb_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sher2_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher2_unb_var2.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher2_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher2_unb_var2.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher2_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher2_unb_var2.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher2_unb_var2(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher2_unb_var2.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sher2_unb_var3(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher2_unb_var3.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher2_unb_var3(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher2_unb_var3.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher2_unb_var3(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher2_unb_var3.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher2_unb_var3(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher2_unb_var3.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sher2_unb_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher2_unb_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher2_unb_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher2_unb_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher2_unb_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher2_unb_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher2_unb_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher2_unb_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sher2_unf_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher2_unf_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher2_unf_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher2_unf_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher2_unf_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher2_unf_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher2_unf_var1(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher2_unf_var1.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_sher2_unf_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f32,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sher2_unf_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_dher2_unf_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut f64,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dher2_unf_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_cher2_unf_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut scomplex,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cher2_unf_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_zher2_unf_var4(
    uplo: uplo_t,
    conjx: conj_t,
    conjy: conj_t,
    conjh: conj_t,
    m: dim_t,
    alpha: *mut dcomplex,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zher2_unf_var4.unwrap()(
        uplo, conjx, conjy, conjh, m, alpha, x, incx, y, incy, c, rs_c, cs_c, cntx,
    )
}

pub unsafe fn bli_trmv_l_blk_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_l_blk_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_l_blk_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_l_blk_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_u_blk_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_u_blk_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_u_blk_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_u_blk_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_unb_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_unb_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_unb_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_unb_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_unf_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_unf_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trmv_unf_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmv_unf_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_strmv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strmv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrmv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrmv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrmv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrmv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrmv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrmv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_strmv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strmv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrmv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrmv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrmv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrmv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrmv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrmv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_strmv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strmv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrmv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrmv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrmv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrmv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrmv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrmv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_strmv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strmv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrmv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrmv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrmv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrmv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrmv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrmv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_trsv_l_blk_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_l_blk_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_l_blk_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_l_blk_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_u_blk_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_u_blk_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_u_blk_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_u_blk_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_unb_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_unb_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_unb_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_unb_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_unf_var1(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_unf_var1.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_trsv_unf_var2(
    alpha: *mut obj_t,
    a: *mut obj_t,
    x: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsv_unf_var2.unwrap()(alpha, a, x, cntx, cntl)
}

pub unsafe fn bli_strsv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strsv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrsv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrsv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrsv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrsv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrsv_unb_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrsv_unb_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_strsv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strsv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrsv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrsv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrsv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrsv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrsv_unb_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrsv_unb_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_strsv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strsv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrsv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrsv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrsv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrsv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrsv_unf_var1(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrsv_unf_var1.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_strsv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strsv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_dtrsv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrsv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ctrsv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrsv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_ztrsv_unf_var2(
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrsv_unf_var2.unwrap()(
        uploa, transa, diaga, m, alpha, a, rs_a, cs_a, x, incx, cntx,
    )
}

pub unsafe fn bli_l3_cntl_create_if(
    family: opid_t,
    schema_a: pack_t,
    schema_b: pack_t,
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    rntm: *mut rntm_t,
    cntl_orig: *mut cntl_t,
    cntl_use: *mut *mut cntl_t,
) {
    dyload_lib().bli_l3_cntl_create_if.unwrap()(
        family, schema_a, schema_b, a, b, c, rntm, cntl_orig, cntl_use,
    )
}

pub unsafe fn bli_l3_cntl_free(rntm: *mut rntm_t, cntl_use: *mut cntl_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_l3_cntl_free.unwrap()(rntm, cntl_use, thread)
}

pub unsafe fn bli_gemm_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_gemm_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_gemmt_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_gemmt_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_her2k_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_her2k_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_syr2k_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_syr2k_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_hemm_check(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_hemm_check.unwrap()(side, alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_symm_check(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_symm_check.unwrap()(side, alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_trmm3_check(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_trmm3_check.unwrap()(side, alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_herk_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_herk_check.unwrap()(alpha, a, beta, c, cntx)
}

pub unsafe fn bli_syrk_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_syrk_check.unwrap()(alpha, a, beta, c, cntx)
}

pub unsafe fn bli_trmm_check(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_trmm_check.unwrap()(side, alpha, a, b, cntx)
}

pub unsafe fn bli_trsm_check(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_trsm_check.unwrap()(side, alpha, a, b, cntx)
}

pub unsafe fn bli_gemm_basic_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_gemm_basic_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_gemmt_basic_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_gemmt_basic_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_hemm_basic_check(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_hemm_basic_check.unwrap()(side, alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_herk_basic_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    ah: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_herk_basic_check.unwrap()(alpha, a, ah, beta, c, cntx)
}

pub unsafe fn bli_her2k_basic_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    bh: *mut obj_t,
    b: *mut obj_t,
    ah: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_her2k_basic_check.unwrap()(alpha, a, bh, b, ah, beta, c, cntx)
}

pub unsafe fn bli_l3_basic_check(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_l3_basic_check.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_l3_determine_kc(
    direct: dir_t,
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> dim_t {
    dyload_lib().bli_l3_determine_kc.unwrap()(direct, i, dim, a, b, bszid, cntx, cntl)
}

pub unsafe fn bli_gemm_determine_kc(
    direct: dir_t,
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_gemm_determine_kc.unwrap()(direct, i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_herk_determine_kc(
    direct: dir_t,
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_herk_determine_kc.unwrap()(direct, i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_trmm_determine_kc(
    direct: dir_t,
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_trmm_determine_kc.unwrap()(direct, i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_trsm_determine_kc(
    direct: dir_t,
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_trsm_determine_kc.unwrap()(direct, i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_gemm_determine_kc_f(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_gemm_determine_kc_f.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_gemm_determine_kc_b(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_gemm_determine_kc_b.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_herk_determine_kc_f(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_herk_determine_kc_f.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_herk_determine_kc_b(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_herk_determine_kc_b.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_trmm_determine_kc_f(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_trmm_determine_kc_f.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_trmm_determine_kc_b(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_trmm_determine_kc_b.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_trsm_determine_kc_f(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_trsm_determine_kc_f.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_trsm_determine_kc_b(
    i: dim_t,
    dim: dim_t,
    a: *mut obj_t,
    b: *mut obj_t,
    bszid: bszid_t,
    cntx: *mut cntx_t,
) -> dim_t {
    dyload_lib().bli_trsm_determine_kc_b.unwrap()(i, dim, a, b, bszid, cntx)
}

pub unsafe fn bli_l3_direct(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntl: *mut cntl_t,
) -> dir_t {
    dyload_lib().bli_l3_direct.unwrap()(a, b, c, cntl)
}

pub unsafe fn bli_gemm_direct(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) -> dir_t {
    dyload_lib().bli_gemm_direct.unwrap()(a, b, c)
}

pub unsafe fn bli_herk_direct(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) -> dir_t {
    dyload_lib().bli_herk_direct.unwrap()(a, b, c)
}

pub unsafe fn bli_trmm_direct(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) -> dir_t {
    dyload_lib().bli_trmm_direct.unwrap()(a, b, c)
}

pub unsafe fn bli_trsm_direct(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) -> dir_t {
    dyload_lib().bli_trsm_direct.unwrap()(a, b, c)
}

pub unsafe fn bli_l3_prune_unref_mparts_m(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_l3_prune_unref_mparts_m.unwrap()(a, b, c, cntl)
}

pub unsafe fn bli_l3_prune_unref_mparts_n(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_l3_prune_unref_mparts_n.unwrap()(a, b, c, cntl)
}

pub unsafe fn bli_l3_prune_unref_mparts_k(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_l3_prune_unref_mparts_k.unwrap()(a, b, c, cntl)
}

pub unsafe fn bli_gemm_prune_unref_mparts_m(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_gemm_prune_unref_mparts_m.unwrap()(a, b, c)
}

pub unsafe fn bli_gemm_prune_unref_mparts_n(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_gemm_prune_unref_mparts_n.unwrap()(a, b, c)
}

pub unsafe fn bli_gemm_prune_unref_mparts_k(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_gemm_prune_unref_mparts_k.unwrap()(a, b, c)
}

pub unsafe fn bli_herk_prune_unref_mparts_m(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_herk_prune_unref_mparts_m.unwrap()(a, b, c)
}

pub unsafe fn bli_herk_prune_unref_mparts_n(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_herk_prune_unref_mparts_n.unwrap()(a, b, c)
}

pub unsafe fn bli_herk_prune_unref_mparts_k(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_herk_prune_unref_mparts_k.unwrap()(a, b, c)
}

pub unsafe fn bli_trmm_prune_unref_mparts_m(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_trmm_prune_unref_mparts_m.unwrap()(a, b, c)
}

pub unsafe fn bli_trmm_prune_unref_mparts_n(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_trmm_prune_unref_mparts_n.unwrap()(a, b, c)
}

pub unsafe fn bli_trmm_prune_unref_mparts_k(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_trmm_prune_unref_mparts_k.unwrap()(a, b, c)
}

pub unsafe fn bli_trsm_prune_unref_mparts_m(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_trsm_prune_unref_mparts_m.unwrap()(a, b, c)
}

pub unsafe fn bli_trsm_prune_unref_mparts_n(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_trsm_prune_unref_mparts_n.unwrap()(a, b, c)
}

pub unsafe fn bli_trsm_prune_unref_mparts_k(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_trsm_prune_unref_mparts_k.unwrap()(a, b, c)
}

pub unsafe fn bli_l3_packm(
    x: *mut obj_t,
    x_pack: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_l3_packm.unwrap()(x, x_pack, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_l3_set_schemas(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t, cntx: *mut cntx_t) {
    dyload_lib().bli_l3_set_schemas.unwrap()(a, b, c, cntx)
}

pub unsafe fn bli_gemm(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_gemm.unwrap()(alpha, a, b, beta, c)
}

pub unsafe fn bli_gemmt(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_gemmt.unwrap()(alpha, a, b, beta, c)
}

pub unsafe fn bli_her2k(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_her2k.unwrap()(alpha, a, b, beta, c)
}

pub unsafe fn bli_syr2k(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_syr2k.unwrap()(alpha, a, b, beta, c)
}

pub unsafe fn bli_hemm(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_hemm.unwrap()(side, alpha, a, b, beta, c)
}

pub unsafe fn bli_symm(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_symm.unwrap()(side, alpha, a, b, beta, c)
}

pub unsafe fn bli_trmm3(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
) {
    dyload_lib().bli_trmm3.unwrap()(side, alpha, a, b, beta, c)
}

pub unsafe fn bli_herk(alpha: *mut obj_t, a: *mut obj_t, beta: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_herk.unwrap()(alpha, a, beta, c)
}

pub unsafe fn bli_syrk(alpha: *mut obj_t, a: *mut obj_t, beta: *mut obj_t, c: *mut obj_t) {
    dyload_lib().bli_syrk.unwrap()(alpha, a, beta, c)
}

pub unsafe fn bli_trmm(side: side_t, alpha: *mut obj_t, a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_trmm.unwrap()(side, alpha, a, b)
}

pub unsafe fn bli_trsm(side: side_t, alpha: *mut obj_t, a: *mut obj_t, b: *mut obj_t) {
    dyload_lib().bli_trsm.unwrap()(side, alpha, a, b)
}

pub unsafe fn bli_gemm_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_gemm_ex.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_gemmt_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_gemmt_ex.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_her2k_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_her2k_ex.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_syr2k_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_syr2k_ex.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_hemm_ex(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_hemm_ex.unwrap()(side, alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_symm_ex(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_symm_ex.unwrap()(side, alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_trmm3_ex(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_trmm3_ex.unwrap()(side, alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_herk_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_herk_ex.unwrap()(alpha, a, beta, c, cntx, rntm)
}

pub unsafe fn bli_syrk_ex(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_syrk_ex.unwrap()(alpha, a, beta, c, cntx, rntm)
}

pub unsafe fn bli_trmm_ex(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_trmm_ex.unwrap()(side, alpha, a, b, cntx, rntm)
}

pub unsafe fn bli_trsm_ex(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_trsm_ex.unwrap()(side, alpha, a, b, cntx, rntm)
}

pub unsafe fn bli_sgemm(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_sgemm.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dgemm(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dgemm.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_cgemm(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_cgemm.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zgemm(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zgemm.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_shemm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_shemm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dhemm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dhemm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_chemm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_chemm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zhemm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zhemm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_ssymm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_ssymm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dsymm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dsymm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_csymm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_csymm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zsymm(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zsymm.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_sherk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_sherk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_dherk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dherk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_cherk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f32,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_cherk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_zherk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f64,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zherk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_sher2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_sher2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dher2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dher2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_cher2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_cher2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zher2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zher2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_ssyrk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_ssyrk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_dsyrk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dsyrk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_csyrk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_csyrk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_zsyrk(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zsyrk.unwrap()(uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c)
}

pub unsafe fn bli_sgemmt(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_sgemmt.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dgemmt(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dgemmt.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_cgemmt(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_cgemmt.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zgemmt(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zgemmt.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_ssyr2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_ssyr2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dsyr2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dsyr2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_csyr2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_csyr2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zsyr2k(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zsyr2k.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_strmm3(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_strmm3.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c,
    )
}

pub unsafe fn bli_dtrmm3(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dtrmm3.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c,
    )
}

pub unsafe fn bli_ctrmm3(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_ctrmm3.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c,
    )
}

pub unsafe fn bli_ztrmm3(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_ztrmm3.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c,
    )
}

pub unsafe fn bli_strmm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_strmm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_dtrmm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dtrmm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_ctrmm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_ctrmm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_ztrmm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_ztrmm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_strsm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_strsm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_dtrsm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_dtrsm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_ctrsm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_ctrsm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_ztrsm(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
) {
    dyload_lib().bli_ztrsm.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b,
    )
}

pub unsafe fn bli_sgemm_ex(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sgemm_ex.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, cntx,
        rntm,
    )
}

pub unsafe fn bli_dgemm_ex(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dgemm_ex.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, cntx,
        rntm,
    )
}

pub unsafe fn bli_cgemm_ex(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cgemm_ex.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, cntx,
        rntm,
    )
}

pub unsafe fn bli_zgemm_ex(
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zgemm_ex.unwrap()(
        transa, transb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, cntx,
        rntm,
    )
}

pub unsafe fn bli_shemm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_shemm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_dhemm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dhemm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_chemm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_chemm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_zhemm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zhemm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_ssymm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssymm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_dsymm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsymm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_csymm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csymm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_zsymm_ex(
    side: side_t,
    uploa: uplo_t,
    conja: conj_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsymm_ex.unwrap()(
        side, uploa, conja, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_sherk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sherk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_dherk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dherk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_cherk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f32,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cherk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_zherk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f64,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zherk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_sher2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sher2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_dher2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dher2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_cher2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cher2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_zher2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zher2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_ssyrk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssyrk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_dsyrk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsyrk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_csyrk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csyrk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_zsyrk_ex(
    uploc: uplo_t,
    transa: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsyrk_ex.unwrap()(
        uploc, transa, m, k, alpha, a, rs_a, cs_a, beta, c, rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_sgemmt_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sgemmt_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_dgemmt_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dgemmt_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_cgemmt_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cgemmt_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_zgemmt_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zgemmt_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_ssyr2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssyr2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_dsyr2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsyr2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_csyr2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csyr2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_zsyr2k_ex(
    uploc: uplo_t,
    transa: trans_t,
    transb: trans_t,
    m: dim_t,
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsyr2k_ex.unwrap()(
        uploc, transa, transb, m, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        cntx, rntm,
    )
}

pub unsafe fn bli_strmm3_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_strmm3_ex.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_dtrmm3_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dtrmm3_ex.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_ctrmm3_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ctrmm3_ex.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_ztrmm3_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    transb: trans_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ztrmm3_ex.unwrap()(
        side, uploa, transa, diaga, transb, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c,
        rs_c, cs_c, cntx, rntm,
    )
}

pub unsafe fn bli_strmm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_strmm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_dtrmm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dtrmm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_ctrmm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ctrmm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_ztrmm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ztrmm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_strsm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_strsm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_dtrsm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dtrsm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_ctrsm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ctrsm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_ztrsm_ex(
    side: side_t,
    uploa: uplo_t,
    transa: trans_t,
    diaga: diag_t,
    m: dim_t,
    n: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ztrsm_ex.unwrap()(
        side, uploa, transa, diaga, m, n, alpha, a, rs_a, cs_a, b, rs_b, cs_b, cntx, rntm,
    )
}

pub unsafe fn bli_gemmsup(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_gemmsup.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_gemmtsup(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_gemmtsup.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_syrksup(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_syrksup.unwrap()(alpha, a, beta, c, cntx, rntm)
}

pub unsafe fn bli_gemmsup_ref(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_gemmsup_ref.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_gemmtsup_ref(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_gemmtsup_ref.unwrap()(alpha, a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_gemmsup_int(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) -> err_t {
    dyload_lib().bli_gemmsup_int.unwrap()(alpha, a, b, beta, c, cntx, rntm, thread)
}

pub unsafe fn bli_gemmtsup_int(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) -> err_t {
    dyload_lib().bli_gemmtsup_int.unwrap()(alpha, a, b, beta, c, cntx, rntm, thread)
}

pub unsafe fn bli_gemmsup_ref_var1(
    trans: trans_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmsup_ref_var1.unwrap()(
        trans, alpha, a, b, beta, c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemmsup_ref_var2(
    trans: trans_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmsup_ref_var2.unwrap()(
        trans, alpha, a, b, beta, c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemmsup_ref_var1n(
    trans: trans_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmsup_ref_var1n.unwrap()(
        trans, alpha, a, b, beta, c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemmsup_ref_var2m(
    trans: trans_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmsup_ref_var2m.unwrap()(
        trans, alpha, a, b, beta, c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmsup_ref_var1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmsup_ref_var1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmsup_ref_var1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmsup_ref_var1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmsup_ref_var1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmsup_ref_var1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmsup_ref_var1(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmsup_ref_var1.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmsup_ref_var2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmsup_ref_var2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmsup_ref_var2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmsup_ref_var2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmsup_ref_var2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmsup_ref_var2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmsup_ref_var2(
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmsup_ref_var2.unwrap()(
        conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c, eff_id,
        cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmsup_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmsup_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmsup_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmsup_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmsup_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmsup_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmsup_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmsup_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmsup_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmsup_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmsup_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmsup_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmsup_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmsup_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmsup_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmsup_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_spackm_sup_init_mem_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_init_mem_a.unwrap()(
        will_pack,
        pack_buf_type,
        m,
        k,
        mr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_dpackm_sup_init_mem_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_init_mem_a.unwrap()(
        will_pack,
        pack_buf_type,
        m,
        k,
        mr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_cpackm_sup_init_mem_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_init_mem_a.unwrap()(
        will_pack,
        pack_buf_type,
        m,
        k,
        mr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_zpackm_sup_init_mem_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_init_mem_a.unwrap()(
        will_pack,
        pack_buf_type,
        m,
        k,
        mr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_spackm_sup_finalize_mem_a(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_finalize_mem_a.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_dpackm_sup_finalize_mem_a(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_finalize_mem_a.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_cpackm_sup_finalize_mem_a(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_finalize_mem_a.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_zpackm_sup_finalize_mem_a(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_finalize_mem_a.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_spackm_sup_init_a(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    m_max: *mut dim_t,
    k_max: *mut dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut f32,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_init_a.unwrap()(
        will_pack, stor_id, schema, m, k, mr, m_max, k_max, a, rs_a, cs_a, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_dpackm_sup_init_a(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    m_max: *mut dim_t,
    k_max: *mut dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut f64,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_init_a.unwrap()(
        will_pack, stor_id, schema, m, k, mr, m_max, k_max, a, rs_a, cs_a, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_cpackm_sup_init_a(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    m_max: *mut dim_t,
    k_max: *mut dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut scomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_init_a.unwrap()(
        will_pack, stor_id, schema, m, k, mr, m_max, k_max, a, rs_a, cs_a, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_zpackm_sup_init_a(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    m_max: *mut dim_t,
    k_max: *mut dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut dcomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_init_a.unwrap()(
        will_pack, stor_id, schema, m, k, mr, m_max, k_max, a, rs_a, cs_a, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_spackm_sup_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    m_alloc: dim_t,
    k_alloc: dim_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    kappa: *mut f32,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut f32,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_a.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        m_alloc,
        k_alloc,
        m,
        k,
        mr,
        kappa,
        a,
        rs_a,
        cs_a,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_dpackm_sup_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    m_alloc: dim_t,
    k_alloc: dim_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    kappa: *mut f64,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut f64,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_a.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        m_alloc,
        k_alloc,
        m,
        k,
        mr,
        kappa,
        a,
        rs_a,
        cs_a,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_cpackm_sup_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    m_alloc: dim_t,
    k_alloc: dim_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    kappa: *mut scomplex,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut scomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_a.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        m_alloc,
        k_alloc,
        m,
        k,
        mr,
        kappa,
        a,
        rs_a,
        cs_a,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_zpackm_sup_a(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    m_alloc: dim_t,
    k_alloc: dim_t,
    m: dim_t,
    k: dim_t,
    mr: dim_t,
    kappa: *mut dcomplex,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    p: *mut *mut dcomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_a.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        m_alloc,
        k_alloc,
        m,
        k,
        mr,
        kappa,
        a,
        rs_a,
        cs_a,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_spackm_sup_init_mem_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_init_mem_b.unwrap()(
        will_pack,
        pack_buf_type,
        k,
        n,
        nr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_dpackm_sup_init_mem_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_init_mem_b.unwrap()(
        will_pack,
        pack_buf_type,
        k,
        n,
        nr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_cpackm_sup_init_mem_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_init_mem_b.unwrap()(
        will_pack,
        pack_buf_type,
        k,
        n,
        nr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_zpackm_sup_init_mem_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_init_mem_b.unwrap()(
        will_pack,
        pack_buf_type,
        k,
        n,
        nr,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_spackm_sup_finalize_mem_b(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_finalize_mem_b.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_dpackm_sup_finalize_mem_b(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_finalize_mem_b.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_cpackm_sup_finalize_mem_b(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_finalize_mem_b.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_zpackm_sup_finalize_mem_b(
    did_pack: bool,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_finalize_mem_b.unwrap()(did_pack, rntm, mem, thread)
}

pub unsafe fn bli_spackm_sup_init_b(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    k_max: *mut dim_t,
    n_max: *mut dim_t,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut f32,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_init_b.unwrap()(
        will_pack, stor_id, schema, k, n, nr, k_max, n_max, b, rs_b, cs_b, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_dpackm_sup_init_b(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    k_max: *mut dim_t,
    n_max: *mut dim_t,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut f64,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_init_b.unwrap()(
        will_pack, stor_id, schema, k, n, nr, k_max, n_max, b, rs_b, cs_b, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_cpackm_sup_init_b(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    k_max: *mut dim_t,
    n_max: *mut dim_t,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut scomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_init_b.unwrap()(
        will_pack, stor_id, schema, k, n, nr, k_max, n_max, b, rs_b, cs_b, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_zpackm_sup_init_b(
    will_pack: bool,
    stor_id: stor3_t,
    schema: *mut pack_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    k_max: *mut dim_t,
    n_max: *mut dim_t,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut dcomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    pd_p: *mut dim_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_init_b.unwrap()(
        will_pack, stor_id, schema, k, n, nr, k_max, n_max, b, rs_b, cs_b, p, rs_p, cs_p, pd_p,
        ps_p, cntx, mem, thread,
    )
}

pub unsafe fn bli_spackm_sup_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    k_alloc: dim_t,
    n_alloc: dim_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    kappa: *mut f32,
    b: *mut f32,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut f32,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_b.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        k_alloc,
        n_alloc,
        k,
        n,
        nr,
        kappa,
        b,
        rs_b,
        cs_b,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_dpackm_sup_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    k_alloc: dim_t,
    n_alloc: dim_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    kappa: *mut f64,
    b: *mut f64,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut f64,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_b.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        k_alloc,
        n_alloc,
        k,
        n,
        nr,
        kappa,
        b,
        rs_b,
        cs_b,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_cpackm_sup_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    k_alloc: dim_t,
    n_alloc: dim_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    kappa: *mut scomplex,
    b: *mut scomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut scomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_b.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        k_alloc,
        n_alloc,
        k,
        n,
        nr,
        kappa,
        b,
        rs_b,
        cs_b,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_zpackm_sup_b(
    will_pack: bool,
    pack_buf_type: packbuf_t,
    stor_id: stor3_t,
    transc: trans_t,
    k_alloc: dim_t,
    n_alloc: dim_t,
    k: dim_t,
    n: dim_t,
    nr: dim_t,
    kappa: *mut dcomplex,
    b: *mut dcomplex,
    rs_b: inc_t,
    cs_b: inc_t,
    p: *mut *mut dcomplex,
    rs_p: *mut inc_t,
    cs_p: *mut inc_t,
    ps_p: *mut inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    mem: *mut mem_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_b.unwrap()(
        will_pack,
        pack_buf_type,
        stor_id,
        transc,
        k_alloc,
        n_alloc,
        k,
        n,
        nr,
        kappa,
        b,
        rs_b,
        cs_b,
        p,
        rs_p,
        cs_p,
        ps_p,
        cntx,
        rntm,
        mem,
        thread,
    )
}

pub unsafe fn bli_spackm_sup_var1(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_var1.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, pd_p, ps_p, cntx,
        thread,
    )
}

pub unsafe fn bli_dpackm_sup_var1(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_var1.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, pd_p, ps_p, cntx,
        thread,
    )
}

pub unsafe fn bli_cpackm_sup_var1(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_var1.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, pd_p, ps_p, cntx,
        thread,
    )
}

pub unsafe fn bli_zpackm_sup_var1(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    m_max: dim_t,
    n_max: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    pd_p: dim_t,
    ps_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_var1.unwrap()(
        transc, schema, m, n, m_max, n_max, kappa, c, rs_c, cs_c, p, rs_p, cs_p, pd_p, ps_p, cntx,
        thread,
    )
}

pub unsafe fn bli_spackm_sup_var2(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f32,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_spackm_sup_var2.unwrap()(
        transc, schema, m, n, kappa, c, rs_c, cs_c, p, rs_p, cs_p, cntx, thread,
    )
}

pub unsafe fn bli_dpackm_sup_var2(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut f64,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dpackm_sup_var2.unwrap()(
        transc, schema, m, n, kappa, c, rs_c, cs_c, p, rs_p, cs_p, cntx, thread,
    )
}

pub unsafe fn bli_cpackm_sup_var2(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut scomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cpackm_sup_var2.unwrap()(
        transc, schema, m, n, kappa, c, rs_c, cs_c, p, rs_p, cs_p, cntx, thread,
    )
}

pub unsafe fn bli_zpackm_sup_var2(
    transc: trans_t,
    schema: pack_t,
    m: dim_t,
    n: dim_t,
    kappa: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    p: *mut dcomplex,
    rs_p: inc_t,
    cs_p: inc_t,
    cntx: *mut cntx_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zpackm_sup_var2.unwrap()(
        transc, schema, m, n, kappa, c, rs_c, cs_c, p, rs_p, cs_p, cntx, thread,
    )
}

pub unsafe fn bli_gemm_ukernel(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_gemm_ukernel.unwrap()(alpha, a, b, beta, c, cntx)
}

pub unsafe fn bli_gemmtrsm_ukernel(
    alpha: *mut obj_t,
    a1x: *mut obj_t,
    a11: *mut obj_t,
    bx1: *mut obj_t,
    b11: *mut obj_t,
    c11: *mut obj_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_gemmtrsm_ukernel.unwrap()(alpha, a1x, a11, bx1, b11, c11, cntx)
}

pub unsafe fn bli_trsm_ukernel(a: *mut obj_t, b: *mut obj_t, c: *mut obj_t, cntx: *mut cntx_t) {
    dyload_lib().bli_trsm_ukernel.unwrap()(a, b, c, cntx)
}

pub unsafe fn bli_sgemm_ukernel(
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    b: *mut f32,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemm_ukernel.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_dgemm_ukernel(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_ukernel.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_cgemm_ukernel(
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    b: *mut scomplex,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemm_ukernel.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemm_ukernel(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_ukernel.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_sgemmtrsm_l_ukernel(
    k: dim_t,
    alpha: *mut f32,
    a1x: *mut f32,
    a11: *mut f32,
    bx1: *mut f32,
    b11: *mut f32,
    c11: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmtrsm_l_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_l_ukernel(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_l_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmtrsm_l_ukernel(
    k: dim_t,
    alpha: *mut scomplex,
    a1x: *mut scomplex,
    a11: *mut scomplex,
    bx1: *mut scomplex,
    b11: *mut scomplex,
    c11: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmtrsm_l_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmtrsm_l_ukernel(
    k: dim_t,
    alpha: *mut dcomplex,
    a1x: *mut dcomplex,
    a11: *mut dcomplex,
    bx1: *mut dcomplex,
    b11: *mut dcomplex,
    c11: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmtrsm_l_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_sgemmtrsm_u_ukernel(
    k: dim_t,
    alpha: *mut f32,
    a1x: *mut f32,
    a11: *mut f32,
    bx1: *mut f32,
    b11: *mut f32,
    c11: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemmtrsm_u_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_dgemmtrsm_u_ukernel(
    k: dim_t,
    alpha: *mut f64,
    a1x: *mut f64,
    a11: *mut f64,
    bx1: *mut f64,
    b11: *mut f64,
    c11: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemmtrsm_u_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_cgemmtrsm_u_ukernel(
    k: dim_t,
    alpha: *mut scomplex,
    a1x: *mut scomplex,
    a11: *mut scomplex,
    bx1: *mut scomplex,
    b11: *mut scomplex,
    c11: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemmtrsm_u_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_zgemmtrsm_u_ukernel(
    k: dim_t,
    alpha: *mut dcomplex,
    a1x: *mut dcomplex,
    a11: *mut dcomplex,
    bx1: *mut dcomplex,
    b11: *mut dcomplex,
    c11: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemmtrsm_u_ukernel.unwrap()(
        k, alpha, a1x, a11, bx1, b11, c11, rs_c, cs_c, data, cntx,
    )
}

pub unsafe fn bli_strsm_l_ukernel(
    a: *mut f32,
    b: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strsm_l_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_dtrsm_l_ukernel(
    a: *mut f64,
    b: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrsm_l_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_ctrsm_l_ukernel(
    a: *mut scomplex,
    b: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrsm_l_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_ztrsm_l_ukernel(
    a: *mut dcomplex,
    b: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrsm_l_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_strsm_u_ukernel(
    a: *mut f32,
    b: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_strsm_u_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_dtrsm_u_ukernel(
    a: *mut f64,
    b: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dtrsm_u_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_ctrsm_u_ukernel(
    a: *mut scomplex,
    b: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ctrsm_u_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_ztrsm_u_ukernel(
    a: *mut dcomplex,
    b: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_ztrsm_u_ukernel.unwrap()(a, b, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_gemm_ukernel_qfp(dt: num_t) -> gemm_ukr_vft {
    dyload_lib().bli_gemm_ukernel_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemmtrsm_l_ukernel_qfp(dt: num_t) -> gemmtrsm_ukr_vft {
    dyload_lib().bli_gemmtrsm_l_ukernel_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemmtrsm_u_ukernel_qfp(dt: num_t) -> gemmtrsm_ukr_vft {
    dyload_lib().bli_gemmtrsm_u_ukernel_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsm_l_ukernel_qfp(dt: num_t) -> trsm_ukr_vft {
    dyload_lib().bli_trsm_l_ukernel_qfp.unwrap()(dt)
}

pub unsafe fn bli_trsm_u_ukernel_qfp(dt: num_t) -> trsm_ukr_vft {
    dyload_lib().bli_trsm_u_ukernel_qfp.unwrap()(dt)
}

pub unsafe fn bli_gemm_cntl_create(
    rntm: *mut rntm_t,
    family: opid_t,
    schema_a: pack_t,
    schema_b: pack_t,
) -> *mut cntl_t {
    dyload_lib().bli_gemm_cntl_create.unwrap()(rntm, family, schema_a, schema_b)
}

pub unsafe fn bli_gemmbp_cntl_create(
    rntm: *mut rntm_t,
    family: opid_t,
    schema_a: pack_t,
    schema_b: pack_t,
) -> *mut cntl_t {
    dyload_lib().bli_gemmbp_cntl_create.unwrap()(rntm, family, schema_a, schema_b)
}

pub unsafe fn bli_gemm_cntl_free(rntm: *mut rntm_t, cntl: *mut cntl_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_gemm_cntl_free.unwrap()(rntm, cntl, thread)
}

pub unsafe fn bli_gemm_cntl_create_node(
    rntm: *mut rntm_t,
    family: opid_t,
    bszid: bszid_t,
    var_func: void_fp,
    sub_node: *mut cntl_t,
) -> *mut cntl_t {
    dyload_lib().bli_gemm_cntl_create_node.unwrap()(rntm, family, bszid, var_func, sub_node)
}

pub unsafe fn bli_gemm_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemm_front.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_gemm_small(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    cntl: *mut cntl_t,
) -> err_t {
    dyload_lib().bli_gemm_small.unwrap()(alpha, a, b, beta, c, cntx, cntl)
}

pub unsafe fn bli_gemm_int(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_int.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_blk_var1(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_blk_var1.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_blk_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_blk_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_blk_var3(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_blk_var3.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_packa(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_packa.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_packb(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_packb.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_ker_var1(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_ker_var1.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_gemm_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_sgemm_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemm_ker_var2.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemm_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemm_ker_var2.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemm_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemm_ker_var2.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemm_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemm_ker_var2.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemm_tiny(
    transa: trans_t,
    transb: trans_t,
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    alpha: *const dcomplex,
    a: *const dcomplex,
    rs_a0: inc_t,
    cs_a0: inc_t,
    b: *const dcomplex,
    rs_b0: inc_t,
    cs_b0: inc_t,
    beta: *const dcomplex,
    c: *mut dcomplex,
    rs_c0: inc_t,
    cs_c0: inc_t,
    is_parallel: bool,
) -> err_t {
    dyload_lib().bli_zgemm_tiny.unwrap()(
        transa,
        transb,
        m0,
        n0,
        k0,
        alpha,
        a,
        rs_a0,
        cs_a0,
        b,
        rs_b0,
        cs_b0,
        beta,
        c,
        rs_c0,
        cs_c0,
        is_parallel,
    )
}

pub unsafe fn bli_sgemm_md_c2r_ref(
    k: dim_t,
    alpha: *mut f32,
    a: *mut f32,
    b: *mut f32,
    beta: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_sgemm_md_c2r_ref.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_dgemm_md_c2r_ref(
    k: dim_t,
    alpha: *mut f64,
    a: *mut f64,
    b: *mut f64,
    beta: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_dgemm_md_c2r_ref.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_cgemm_md_c2r_ref(
    k: dim_t,
    alpha: *mut scomplex,
    a: *mut scomplex,
    b: *mut scomplex,
    beta: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_cgemm_md_c2r_ref.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_zgemm_md_c2r_ref(
    k: dim_t,
    alpha: *mut dcomplex,
    a: *mut dcomplex,
    b: *mut dcomplex,
    beta: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
    data: *mut auxinfo_t,
    cntx: *mut cntx_t,
) {
    dyload_lib().bli_zgemm_md_c2r_ref.unwrap()(k, alpha, a, b, beta, c, rs_c, cs_c, data, cntx)
}

pub unsafe fn bli_gemm_md(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_local: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) {
    dyload_lib().bli_gemm_md.unwrap()(a, b, beta, c, cntx_local, cntx)
}

pub unsafe fn bli_gemm_md_ccc(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_ccc.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_ccr(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_ccr.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_crc(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_crc.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_rcc(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_rcc.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_rrc(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_rrc.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_rcr(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_rcr.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_crr(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_crr.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_rrr(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx_l: *mut cntx_t,
    cntx: *mut *mut cntx_t,
) -> mddm_t {
    dyload_lib().bli_gemm_md_rrr.unwrap()(a, b, beta, c, cntx_l, cntx)
}

pub unsafe fn bli_gemm_md_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemm_md_front.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_gemm_md_zgemm(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemm_md_zgemm.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_gemm_ker_var2_md(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_ker_var2_md.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_ssgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ssgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ddgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ddgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ccgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ccgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zzgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zzgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sdgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sdgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_scgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_scgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_szgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_szgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dsgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dsgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dcgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dcgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dzgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dzgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_csgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_csgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cdgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cdgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_czgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_czgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zsgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zsgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zdgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zdgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zcgemm_ker_var2_md(
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zcgemm_ker_var2_md.unwrap()(
        schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_hemm_front(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_hemm_front.unwrap()(side, alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_herk_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_herk_front.unwrap()(alpha, a, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_herk_x_ker_var2(
    a: *mut obj_t,
    ah: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_herk_x_ker_var2.unwrap()(a, ah, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_herk_l_ker_var2(
    a: *mut obj_t,
    ah: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_herk_l_ker_var2.unwrap()(a, ah, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_herk_u_ker_var2(
    a: *mut obj_t,
    ah: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_herk_u_ker_var2.unwrap()(a, ah, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_sherk_l_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sherk_l_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dherk_l_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dherk_l_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cherk_l_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cherk_l_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zherk_l_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zherk_l_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sherk_u_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sherk_u_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dherk_u_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dherk_u_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cherk_u_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cherk_u_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zherk_u_ker_var2(
    diagoffc: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zherk_u_ker_var2.unwrap()(
        diagoffc, schema_a, schema_b, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_her2k_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_her2k_front.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_symm_front(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_symm_front.unwrap()(side, alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_syrk_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_syrk_front.unwrap()(alpha, a, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_syr2k_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_syr2k_front.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_trmm_front(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmm_front.unwrap()(side, alpha, a, b, cntx, rntm, cntl)
}

pub unsafe fn bli_trmm_xx_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trmm_xx_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trmm_ll_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trmm_ll_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trmm_lu_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trmm_lu_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trmm_rl_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trmm_rl_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trmm_ru_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trmm_ru_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_strmm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strmm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrmm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrmm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrmm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrmm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrmm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrmm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_strmm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strmm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrmm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrmm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrmm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrmm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrmm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrmm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_strmm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strmm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrmm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrmm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrmm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrmm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrmm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrmm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_strmm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strmm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrmm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrmm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrmm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrmm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrmm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrmm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_trmm3_front(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trmm3_front.unwrap()(side, alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_trsm_cntl_create(
    rntm: *mut rntm_t,
    side: side_t,
    schema_a: pack_t,
    schema_b: pack_t,
) -> *mut cntl_t {
    dyload_lib().bli_trsm_cntl_create.unwrap()(rntm, side, schema_a, schema_b)
}

pub unsafe fn bli_trsm_l_cntl_create(
    rntm: *mut rntm_t,
    schema_a: pack_t,
    schema_b: pack_t,
) -> *mut cntl_t {
    dyload_lib().bli_trsm_l_cntl_create.unwrap()(rntm, schema_a, schema_b)
}

pub unsafe fn bli_trsm_r_cntl_create(
    rntm: *mut rntm_t,
    schema_a: pack_t,
    schema_b: pack_t,
) -> *mut cntl_t {
    dyload_lib().bli_trsm_r_cntl_create.unwrap()(rntm, schema_a, schema_b)
}

pub unsafe fn bli_trsm_cntl_free(rntm: *mut rntm_t, cntl: *mut cntl_t, thread: *mut thrinfo_t) {
    dyload_lib().bli_trsm_cntl_free.unwrap()(rntm, cntl, thread)
}

pub unsafe fn bli_trsm_cntl_create_node(
    rntm: *mut rntm_t,
    family: opid_t,
    bszid: bszid_t,
    var_func: void_fp,
    sub_node: *mut cntl_t,
) -> *mut cntl_t {
    dyload_lib().bli_trsm_cntl_create_node.unwrap()(rntm, family, bszid, var_func, sub_node)
}

pub unsafe fn bli_trsm_front(
    side: side_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_trsm_front.unwrap()(side, alpha, a, b, cntx, rntm, cntl)
}

pub unsafe fn bli_trsm_int(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_int.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_blk_var1(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_blk_var1.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_blk_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_blk_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_blk_var3(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_blk_var3.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_packa(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_packa.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_packb(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_packb.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_xx_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_xx_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_ll_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_ll_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_lu_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_lu_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_rl_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_rl_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_trsm_ru_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_trsm_ru_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_strsm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strsm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrsm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrsm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrsm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrsm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrsm_ll_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrsm_ll_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_strsm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strsm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrsm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrsm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrsm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrsm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrsm_lu_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrsm_lu_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_strsm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strsm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrsm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrsm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrsm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrsm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrsm_rl_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrsm_rl_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_strsm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_strsm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dtrsm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dtrsm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ctrsm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ctrsm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_ztrsm_ru_ker_var2(
    diagoff: doff_t,
    schema_a: pack_t,
    schema_b: pack_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha1: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    alpha2: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_ztrsm_ru_ker_var2.unwrap()(
        diagoff, schema_a, schema_b, m, n, k, alpha1, a, cs_a, pd_a, ps_a, b, rs_b, pd_b, ps_b,
        alpha2, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemmt_front(
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
) {
    dyload_lib().bli_gemmt_front.unwrap()(alpha, a, b, beta, c, cntx, rntm, cntl)
}

pub unsafe fn bli_gemmt_ker_var2(
    a: *mut obj_t,
    b: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    cntl: *mut cntl_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmt_ker_var2.unwrap()(a, b, c, cntx, rntm, cntl, thread)
}

pub unsafe fn bli_sgemmt_l_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmt_l_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmt_l_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmt_l_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmt_u_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmt_u_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmt_u_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmt_u_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmt_l_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmt_l_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmt_l_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmt_l_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmt_u_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmt_u_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmt_u_ker_var2(
    schema_a: pack_t,
    schema_b: pack_t,
    m_off: dim_t,
    n_off: dim_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    cs_a: inc_t,
    is_a: inc_t,
    pd_a: dim_t,
    ps_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    is_b: inc_t,
    pd_b: dim_t,
    ps_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmt_u_ker_var2.unwrap()(
        schema_a, schema_b, m_off, n_off, m, n, k, alpha, a, cs_a, is_a, pd_a, ps_a, b, rs_b, is_b,
        pd_b, ps_b, beta, c, rs_c, cs_c, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemmtsup_ref_var1n(
    trans: trans_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmtsup_ref_var1n.unwrap()(
        trans, alpha, a, b, beta, c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemmtsup_ref_var2m(
    trans: trans_t,
    alpha: *mut obj_t,
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemmtsup_ref_var2m.unwrap()(
        trans, alpha, a, b, beta, c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmtsup_l_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmtsup_l_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmtsup_l_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmtsup_l_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmtsup_u_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmtsup_u_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmtsup_u_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmtsup_u_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmtsup_l_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmtsup_l_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmtsup_l_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmtsup_l_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmtsup_u_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmtsup_u_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmtsup_u_ref_var1n(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmtsup_u_ref_var1n.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmtsup_l_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmtsup_l_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmtsup_l_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmtsup_l_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_sgemmtsup_u_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemmtsup_u_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemmtsup_u_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemmtsup_u_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmtsup_l_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmtsup_l_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmtsup_l_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmtsup_l_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemmtsup_u_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemmtsup_u_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemmtsup_u_ref_var2m(
    packa: bool,
    packb: bool,
    conja: conj_t,
    conjb: conj_t,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: *mut c_void,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    eff_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemmtsup_u_ref_var2m.unwrap()(
        packa, packb, conja, conjb, m, n, k, alpha, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c,
        cs_c, eff_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_gemm_smart_threading_sup(
    dt: num_t,
    elem_size: siz_t,
    is_rrr_rrc_rcr_crr: bool,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    max_available_nt: dim_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) -> err_t {
    dyload_lib().bli_gemm_smart_threading_sup.unwrap()(
        dt,
        elem_size,
        is_rrr_rrc_rcr_crr,
        m,
        n,
        k,
        max_available_nt,
        cntx,
        rntm,
    )
}

pub unsafe fn bli_gemm_compute_init(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_gemm_compute_init.unwrap()(a, b, beta, c, cntx, rntm)
}

pub unsafe fn bli_gemm_compute(
    a: *mut obj_t,
    b: *mut obj_t,
    beta: *mut obj_t,
    c: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_gemm_compute.unwrap()(a, b, beta, c, cntx, rntm, thread)
}

pub unsafe fn bli_sgemm_compute(
    packa: bool,
    packb: bool,
    packeda: bool,
    packedb: bool,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    stor_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_sgemm_compute.unwrap()(
        packa, packb, packeda, packedb, m, n, k, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        stor_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_dgemm_compute(
    packa: bool,
    packb: bool,
    packeda: bool,
    packedb: bool,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    stor_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_dgemm_compute.unwrap()(
        packa, packb, packeda, packedb, m, n, k, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        stor_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_cgemm_compute(
    packa: bool,
    packb: bool,
    packeda: bool,
    packedb: bool,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    stor_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_cgemm_compute.unwrap()(
        packa, packb, packeda, packedb, m, n, k, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        stor_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_zgemm_compute(
    packa: bool,
    packb: bool,
    packeda: bool,
    packedb: bool,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    a: *mut c_void,
    rs_a: inc_t,
    cs_a: inc_t,
    b: *mut c_void,
    rs_b: inc_t,
    cs_b: inc_t,
    beta: *mut c_void,
    c: *mut c_void,
    rs_c: inc_t,
    cs_c: inc_t,
    stor_id: stor3_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
    thread: *mut thrinfo_t,
) {
    dyload_lib().bli_zgemm_compute.unwrap()(
        packa, packb, packeda, packedb, m, n, k, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
        stor_id, cntx, rntm, thread,
    )
}

pub unsafe fn bli_asumv_check(x: *mut obj_t, asum: *mut obj_t) {
    dyload_lib().bli_asumv_check.unwrap()(x, asum)
}

pub unsafe fn bli_mkherm_check(x: *mut obj_t) {
    dyload_lib().bli_mkherm_check.unwrap()(x)
}

pub unsafe fn bli_mksymm_check(x: *mut obj_t) {
    dyload_lib().bli_mksymm_check.unwrap()(x)
}

pub unsafe fn bli_mktrim_check(x: *mut obj_t) {
    dyload_lib().bli_mktrim_check.unwrap()(x)
}

pub unsafe fn bli_norm1v_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_norm1v_check.unwrap()(x, norm)
}

pub unsafe fn bli_normfv_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normfv_check.unwrap()(x, norm)
}

pub unsafe fn bli_normiv_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normiv_check.unwrap()(x, norm)
}

pub unsafe fn bli_norm1m_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_norm1m_check.unwrap()(x, norm)
}

pub unsafe fn bli_normfm_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normfm_check.unwrap()(x, norm)
}

pub unsafe fn bli_normim_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normim_check.unwrap()(x, norm)
}

pub unsafe fn bli_randv_check(x: *mut obj_t) {
    dyload_lib().bli_randv_check.unwrap()(x)
}

pub unsafe fn bli_randnv_check(x: *mut obj_t) {
    dyload_lib().bli_randnv_check.unwrap()(x)
}

pub unsafe fn bli_randm_check(x: *mut obj_t) {
    dyload_lib().bli_randm_check.unwrap()(x)
}

pub unsafe fn bli_randnm_check(x: *mut obj_t) {
    dyload_lib().bli_randnm_check.unwrap()(x)
}

pub unsafe fn bli_sumsqv_check(x: *mut obj_t, scale: *mut obj_t, sumsq: *mut obj_t) {
    dyload_lib().bli_sumsqv_check.unwrap()(x, scale, sumsq)
}

pub unsafe fn bli_eqsc_check(chi: *mut obj_t, psi: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_eqsc_check.unwrap()(chi, psi, is_eq)
}

pub unsafe fn bli_eqv_check(x: *mut obj_t, y: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_eqv_check.unwrap()(x, y, is_eq)
}

pub unsafe fn bli_eqm_check(x: *mut obj_t, y: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_eqm_check.unwrap()(x, y, is_eq)
}

pub unsafe fn bli_fprintv_check(
    file: *mut FILE,
    s1: *mut c_char,
    x: *mut obj_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_fprintv_check.unwrap()(file, s1, x, format, s2)
}

pub unsafe fn bli_fprintm_check(
    file: *mut FILE,
    s1: *mut c_char,
    x: *mut obj_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_fprintm_check.unwrap()(file, s1, x, format, s2)
}

pub unsafe fn bli_utilv_xi_check(x: *mut obj_t, index: *mut obj_t) {
    dyload_lib().bli_utilv_xi_check.unwrap()(x, index)
}

pub unsafe fn bli_utilv_xa_check(x: *mut obj_t, asum: *mut obj_t) {
    dyload_lib().bli_utilv_xa_check.unwrap()(x, asum)
}

pub unsafe fn bli_utilm_mkhst_check(a: *mut obj_t) {
    dyload_lib().bli_utilm_mkhst_check.unwrap()(a)
}

pub unsafe fn bli_utilv_norm_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_utilv_norm_check.unwrap()(x, norm)
}

pub unsafe fn bli_utilm_norm_check(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_utilm_norm_check.unwrap()(x, norm)
}

pub unsafe fn bli_utilm_fprint_check(
    file: *mut FILE,
    s1: *mut c_char,
    x: *mut obj_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_utilm_fprint_check.unwrap()(file, s1, x, format, s2)
}

pub unsafe fn bli_utilm_rand_check(x: *mut obj_t) {
    dyload_lib().bli_utilm_rand_check.unwrap()(x)
}

pub unsafe fn bli_utilv_sumsqv_check(x: *mut obj_t, scale: *mut obj_t, sumsq: *mut obj_t) {
    dyload_lib().bli_utilv_sumsqv_check.unwrap()(x, scale, sumsq)
}

pub unsafe fn bli_asumv_ex(x: *mut obj_t, asum: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_asumv_ex.unwrap()(x, asum, cntx, rntm)
}

pub unsafe fn bli_mkherm_ex(a: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_mkherm_ex.unwrap()(a, cntx, rntm)
}

pub unsafe fn bli_mksymm_ex(a: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_mksymm_ex.unwrap()(a, cntx, rntm)
}

pub unsafe fn bli_mktrim_ex(a: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_mktrim_ex.unwrap()(a, cntx, rntm)
}

pub unsafe fn bli_norm1v_ex(x: *mut obj_t, norm: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_norm1v_ex.unwrap()(x, norm, cntx, rntm)
}

pub unsafe fn bli_normfv_ex(x: *mut obj_t, norm: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_normfv_ex.unwrap()(x, norm, cntx, rntm)
}

pub unsafe fn bli_normiv_ex(x: *mut obj_t, norm: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_normiv_ex.unwrap()(x, norm, cntx, rntm)
}

pub unsafe fn bli_norm1m_ex(x: *mut obj_t, norm: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_norm1m_ex.unwrap()(x, norm, cntx, rntm)
}

pub unsafe fn bli_normfm_ex(x: *mut obj_t, norm: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_normfm_ex.unwrap()(x, norm, cntx, rntm)
}

pub unsafe fn bli_normim_ex(x: *mut obj_t, norm: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_normim_ex.unwrap()(x, norm, cntx, rntm)
}

pub unsafe fn bli_randv_ex(x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_randv_ex.unwrap()(x, cntx, rntm)
}

pub unsafe fn bli_randnv_ex(x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_randnv_ex.unwrap()(x, cntx, rntm)
}

pub unsafe fn bli_randm_ex(x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_randm_ex.unwrap()(x, cntx, rntm)
}

pub unsafe fn bli_randnm_ex(x: *mut obj_t, cntx: *mut cntx_t, rntm: *mut rntm_t) {
    dyload_lib().bli_randnm_ex.unwrap()(x, cntx, rntm)
}

pub unsafe fn bli_sumsqv_ex(
    x: *mut obj_t,
    scale: *mut obj_t,
    sumsq: *mut obj_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sumsqv_ex.unwrap()(x, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_asumv(x: *mut obj_t, asum: *mut obj_t) {
    dyload_lib().bli_asumv.unwrap()(x, asum)
}

pub unsafe fn bli_mkherm(a: *mut obj_t) {
    dyload_lib().bli_mkherm.unwrap()(a)
}

pub unsafe fn bli_mksymm(a: *mut obj_t) {
    dyload_lib().bli_mksymm.unwrap()(a)
}

pub unsafe fn bli_mktrim(a: *mut obj_t) {
    dyload_lib().bli_mktrim.unwrap()(a)
}

pub unsafe fn bli_norm1v(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_norm1v.unwrap()(x, norm)
}

pub unsafe fn bli_normfv(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normfv.unwrap()(x, norm)
}

pub unsafe fn bli_normiv(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normiv.unwrap()(x, norm)
}

pub unsafe fn bli_norm1m(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_norm1m.unwrap()(x, norm)
}

pub unsafe fn bli_normfm(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normfm.unwrap()(x, norm)
}

pub unsafe fn bli_normim(x: *mut obj_t, norm: *mut obj_t) {
    dyload_lib().bli_normim.unwrap()(x, norm)
}

pub unsafe fn bli_randv(x: *mut obj_t) {
    dyload_lib().bli_randv.unwrap()(x)
}

pub unsafe fn bli_randnv(x: *mut obj_t) {
    dyload_lib().bli_randnv.unwrap()(x)
}

pub unsafe fn bli_randm(x: *mut obj_t) {
    dyload_lib().bli_randm.unwrap()(x)
}

pub unsafe fn bli_randnm(x: *mut obj_t) {
    dyload_lib().bli_randnm.unwrap()(x)
}

pub unsafe fn bli_sumsqv(x: *mut obj_t, scale: *mut obj_t, sumsq: *mut obj_t) {
    dyload_lib().bli_sumsqv.unwrap()(x, scale, sumsq)
}

pub unsafe fn bli_eqsc(x: *mut obj_t, y: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_eqsc.unwrap()(x, y, is_eq)
}

pub unsafe fn bli_eqv(x: *mut obj_t, y: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_eqv.unwrap()(x, y, is_eq)
}

pub unsafe fn bli_eqm(x: *mut obj_t, y: *mut obj_t, is_eq: *mut bool) {
    dyload_lib().bli_eqm.unwrap()(x, y, is_eq)
}

pub unsafe fn bli_fprintv(
    file: *mut FILE,
    s1: *mut c_char,
    x: *mut obj_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_fprintv.unwrap()(file, s1, x, format, s2)
}

pub unsafe fn bli_fprintm(
    file: *mut FILE,
    s1: *mut c_char,
    x: *mut obj_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_fprintm.unwrap()(file, s1, x, format, s2)
}

pub unsafe fn bli_printv(s1: *mut c_char, x: *mut obj_t, format: *mut c_char, s2: *mut c_char) {
    dyload_lib().bli_printv.unwrap()(s1, x, format, s2)
}

pub unsafe fn bli_printm(s1: *mut c_char, x: *mut obj_t, format: *mut c_char, s2: *mut c_char) {
    dyload_lib().bli_printm.unwrap()(s1, x, format, s2)
}

pub unsafe fn bli_sasumv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    asum: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sasumv_ex.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_dasumv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    asum: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dasumv_ex.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_casumv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    asum: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_casumv_ex.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_zasumv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    asum: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zasumv_ex.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_smkherm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_smkherm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dmkherm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dmkherm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cmkherm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cmkherm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zmkherm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zmkherm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_smksymm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_smksymm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dmksymm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dmksymm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cmksymm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cmksymm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zmksymm_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zmksymm_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_smktrim_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_smktrim_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dmktrim_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dmktrim_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cmktrim_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cmktrim_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zmktrim_ex(
    uploa: uplo_t,
    m: dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zmktrim_ex.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_snorm1v_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snorm1v_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_dnorm1v_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnorm1v_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_cnorm1v_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnorm1v_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_znorm1v_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znorm1v_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_snormfv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormfv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_dnormfv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormfv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_cnormfv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormfv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_znormfv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormfv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_snormiv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormiv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_dnormiv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormiv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_cnormiv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormiv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_znormiv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormiv_ex.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_snorm1m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snorm1m_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_dnorm1m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnorm1m_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_cnorm1m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnorm1m_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_znorm1m_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znorm1m_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_snormfm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormfm_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_dnormfm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormfm_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_cnormfm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormfm_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_znormfm_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormfm_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_snormim_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormim_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_dnormim_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormim_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_cnormim_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormim_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_znormim_ex(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormim_ex.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_srandv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_drandv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_crandv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_zrandv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_srandnv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandnv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_drandnv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandnv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_crandnv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandnv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_zrandnv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandnv_ex.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_srandm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_drandm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_crandm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zrandm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_srandnm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandnm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_drandnm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandnm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_crandnm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandnm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zrandnm_ex(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandnm_ex.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_ssumsqv_ex(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    scale: *mut f32,
    sumsq: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssumsqv_ex.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_dsumsqv_ex(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    scale: *mut f64,
    sumsq: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsumsqv_ex.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_csumsqv_ex(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    scale: *mut f32,
    sumsq: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csumsqv_ex.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_zsumsqv_ex(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    scale: *mut f64,
    sumsq: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsumsqv_ex.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_sasumv(n: dim_t, x: *mut f32, incx: inc_t, asum: *mut f32) {
    dyload_lib().bli_sasumv.unwrap()(n, x, incx, asum)
}

pub unsafe fn bli_dasumv(n: dim_t, x: *mut f64, incx: inc_t, asum: *mut f64) {
    dyload_lib().bli_dasumv.unwrap()(n, x, incx, asum)
}

pub unsafe fn bli_casumv(n: dim_t, x: *mut scomplex, incx: inc_t, asum: *mut f32) {
    dyload_lib().bli_casumv.unwrap()(n, x, incx, asum)
}

pub unsafe fn bli_zasumv(n: dim_t, x: *mut dcomplex, incx: inc_t, asum: *mut f64) {
    dyload_lib().bli_zasumv.unwrap()(n, x, incx, asum)
}

pub unsafe fn bli_smkherm(uploa: uplo_t, m: dim_t, a: *mut f32, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_smkherm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_dmkherm(uploa: uplo_t, m: dim_t, a: *mut f64, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_dmkherm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_cmkherm(uploa: uplo_t, m: dim_t, a: *mut scomplex, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_cmkherm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_zmkherm(uploa: uplo_t, m: dim_t, a: *mut dcomplex, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_zmkherm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_smksymm(uploa: uplo_t, m: dim_t, a: *mut f32, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_smksymm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_dmksymm(uploa: uplo_t, m: dim_t, a: *mut f64, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_dmksymm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_cmksymm(uploa: uplo_t, m: dim_t, a: *mut scomplex, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_cmksymm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_zmksymm(uploa: uplo_t, m: dim_t, a: *mut dcomplex, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_zmksymm.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_smktrim(uploa: uplo_t, m: dim_t, a: *mut f32, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_smktrim.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_dmktrim(uploa: uplo_t, m: dim_t, a: *mut f64, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_dmktrim.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_cmktrim(uploa: uplo_t, m: dim_t, a: *mut scomplex, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_cmktrim.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_zmktrim(uploa: uplo_t, m: dim_t, a: *mut dcomplex, rs_a: inc_t, cs_a: inc_t) {
    dyload_lib().bli_zmktrim.unwrap()(uploa, m, a, rs_a, cs_a)
}

pub unsafe fn bli_snorm1v(n: dim_t, x: *mut f32, incx: inc_t, norm: *mut f32) {
    dyload_lib().bli_snorm1v.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_dnorm1v(n: dim_t, x: *mut f64, incx: inc_t, norm: *mut f64) {
    dyload_lib().bli_dnorm1v.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_cnorm1v(n: dim_t, x: *mut scomplex, incx: inc_t, norm: *mut f32) {
    dyload_lib().bli_cnorm1v.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_znorm1v(n: dim_t, x: *mut dcomplex, incx: inc_t, norm: *mut f64) {
    dyload_lib().bli_znorm1v.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_snormfv(n: dim_t, x: *mut f32, incx: inc_t, norm: *mut f32) {
    dyload_lib().bli_snormfv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_dnormfv(n: dim_t, x: *mut f64, incx: inc_t, norm: *mut f64) {
    dyload_lib().bli_dnormfv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_cnormfv(n: dim_t, x: *mut scomplex, incx: inc_t, norm: *mut f32) {
    dyload_lib().bli_cnormfv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_znormfv(n: dim_t, x: *mut dcomplex, incx: inc_t, norm: *mut f64) {
    dyload_lib().bli_znormfv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_snormiv(n: dim_t, x: *mut f32, incx: inc_t, norm: *mut f32) {
    dyload_lib().bli_snormiv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_dnormiv(n: dim_t, x: *mut f64, incx: inc_t, norm: *mut f64) {
    dyload_lib().bli_dnormiv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_cnormiv(n: dim_t, x: *mut scomplex, incx: inc_t, norm: *mut f32) {
    dyload_lib().bli_cnormiv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_znormiv(n: dim_t, x: *mut dcomplex, incx: inc_t, norm: *mut f64) {
    dyload_lib().bli_znormiv.unwrap()(n, x, incx, norm)
}

pub unsafe fn bli_snorm1m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
) {
    dyload_lib().bli_snorm1m.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_dnorm1m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
) {
    dyload_lib().bli_dnorm1m.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_cnorm1m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
) {
    dyload_lib().bli_cnorm1m.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_znorm1m(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
) {
    dyload_lib().bli_znorm1m.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_snormfm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
) {
    dyload_lib().bli_snormfm.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_dnormfm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
) {
    dyload_lib().bli_dnormfm.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_cnormfm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
) {
    dyload_lib().bli_cnormfm.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_znormfm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
) {
    dyload_lib().bli_znormfm.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_snormim(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
) {
    dyload_lib().bli_snormim.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_dnormim(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
) {
    dyload_lib().bli_dnormim.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_cnormim(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
) {
    dyload_lib().bli_cnormim.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_znormim(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
) {
    dyload_lib().bli_znormim.unwrap()(diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm)
}

pub unsafe fn bli_srandv(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().bli_srandv.unwrap()(n, x, incx)
}

pub unsafe fn bli_drandv(n: dim_t, x: *mut f64, incx: inc_t) {
    dyload_lib().bli_drandv.unwrap()(n, x, incx)
}

pub unsafe fn bli_crandv(n: dim_t, x: *mut scomplex, incx: inc_t) {
    dyload_lib().bli_crandv.unwrap()(n, x, incx)
}

pub unsafe fn bli_zrandv(n: dim_t, x: *mut dcomplex, incx: inc_t) {
    dyload_lib().bli_zrandv.unwrap()(n, x, incx)
}

pub unsafe fn bli_srandnv(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().bli_srandnv.unwrap()(n, x, incx)
}

pub unsafe fn bli_drandnv(n: dim_t, x: *mut f64, incx: inc_t) {
    dyload_lib().bli_drandnv.unwrap()(n, x, incx)
}

pub unsafe fn bli_crandnv(n: dim_t, x: *mut scomplex, incx: inc_t) {
    dyload_lib().bli_crandnv.unwrap()(n, x, incx)
}

pub unsafe fn bli_zrandnv(n: dim_t, x: *mut dcomplex, incx: inc_t) {
    dyload_lib().bli_zrandnv.unwrap()(n, x, incx)
}

pub unsafe fn bli_srandm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_srandm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_drandm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_drandm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_crandm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_crandm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_zrandm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zrandm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_srandnm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_srandnm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_drandnm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_drandnm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_crandnm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_crandnm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_zrandnm(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
) {
    dyload_lib().bli_zrandnm.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x)
}

pub unsafe fn bli_ssumsqv(n: dim_t, x: *mut f32, incx: inc_t, scale: *mut f32, sumsq: *mut f32) {
    dyload_lib().bli_ssumsqv.unwrap()(n, x, incx, scale, sumsq)
}

pub unsafe fn bli_dsumsqv(n: dim_t, x: *mut f64, incx: inc_t, scale: *mut f64, sumsq: *mut f64) {
    dyload_lib().bli_dsumsqv.unwrap()(n, x, incx, scale, sumsq)
}

pub unsafe fn bli_csumsqv(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    scale: *mut f32,
    sumsq: *mut f32,
) {
    dyload_lib().bli_csumsqv.unwrap()(n, x, incx, scale, sumsq)
}

pub unsafe fn bli_zsumsqv(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    scale: *mut f64,
    sumsq: *mut f64,
) {
    dyload_lib().bli_zsumsqv.unwrap()(n, x, incx, scale, sumsq)
}

pub unsafe fn bli_seqsc(conjchi: conj_t, chi: *mut f32, psi: *mut f32, is_eq: *mut bool) {
    dyload_lib().bli_seqsc.unwrap()(conjchi, chi, psi, is_eq)
}

pub unsafe fn bli_deqsc(conjchi: conj_t, chi: *mut f64, psi: *mut f64, is_eq: *mut bool) {
    dyload_lib().bli_deqsc.unwrap()(conjchi, chi, psi, is_eq)
}

pub unsafe fn bli_ceqsc(conjchi: conj_t, chi: *mut scomplex, psi: *mut scomplex, is_eq: *mut bool) {
    dyload_lib().bli_ceqsc.unwrap()(conjchi, chi, psi, is_eq)
}

pub unsafe fn bli_zeqsc(conjchi: conj_t, chi: *mut dcomplex, psi: *mut dcomplex, is_eq: *mut bool) {
    dyload_lib().bli_zeqsc.unwrap()(conjchi, chi, psi, is_eq)
}

pub unsafe fn bli_seqv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_seqv.unwrap()(conjx, n, x, incx, y, incy, is_eq)
}

pub unsafe fn bli_deqv(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_deqv.unwrap()(conjx, n, x, incx, y, incy, is_eq)
}

pub unsafe fn bli_ceqv(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_ceqv.unwrap()(conjx, n, x, incx, y, incy, is_eq)
}

pub unsafe fn bli_zeqv(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_zeqv.unwrap()(conjx, n, x, incx, y, incy, is_eq)
}

pub unsafe fn bli_seqm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_seqm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq,
    )
}

pub unsafe fn bli_deqm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_deqm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq,
    )
}

pub unsafe fn bli_ceqm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_ceqm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq,
    )
}

pub unsafe fn bli_zeqm(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
    is_eq: *mut bool,
) {
    dyload_lib().bli_zeqm.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y, is_eq,
    )
}

pub unsafe fn bli_sprintv(
    s1: *mut c_char,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_sprintv.unwrap()(s1, n, x, incx, format, s2)
}

pub unsafe fn bli_dprintv(
    s1: *mut c_char,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_dprintv.unwrap()(s1, n, x, incx, format, s2)
}

pub unsafe fn bli_cprintv(
    s1: *mut c_char,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_cprintv.unwrap()(s1, n, x, incx, format, s2)
}

pub unsafe fn bli_zprintv(
    s1: *mut c_char,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_zprintv.unwrap()(s1, n, x, incx, format, s2)
}

pub unsafe fn bli_iprintv(
    s1: *mut c_char,
    n: dim_t,
    x: *mut c_void,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_iprintv.unwrap()(s1, n, x, incx, format, s2)
}

pub unsafe fn bli_sprintm(
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut c_void,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_sprintm.unwrap()(s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_dprintm(
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut c_void,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_dprintm.unwrap()(s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_cprintm(
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut c_void,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_cprintm.unwrap()(s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_zprintm(
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut c_void,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_zprintm.unwrap()(s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_iprintm(
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut c_void,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_iprintm.unwrap()(s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_asumv_ex_qfp(dt: num_t) -> asumv_ex_vft {
    dyload_lib().bli_asumv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_mkherm_ex_qfp(dt: num_t) -> mkherm_ex_vft {
    dyload_lib().bli_mkherm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_mksymm_ex_qfp(dt: num_t) -> mksymm_ex_vft {
    dyload_lib().bli_mksymm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_mktrim_ex_qfp(dt: num_t) -> mktrim_ex_vft {
    dyload_lib().bli_mktrim_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_norm1v_ex_qfp(dt: num_t) -> norm1v_ex_vft {
    dyload_lib().bli_norm1v_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_normfv_ex_qfp(dt: num_t) -> normfv_ex_vft {
    dyload_lib().bli_normfv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_normiv_ex_qfp(dt: num_t) -> normiv_ex_vft {
    dyload_lib().bli_normiv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_norm1m_ex_qfp(dt: num_t) -> norm1m_ex_vft {
    dyload_lib().bli_norm1m_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_normfm_ex_qfp(dt: num_t) -> normfm_ex_vft {
    dyload_lib().bli_normfm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_normim_ex_qfp(dt: num_t) -> normim_ex_vft {
    dyload_lib().bli_normim_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_randv_ex_qfp(dt: num_t) -> randv_ex_vft {
    dyload_lib().bli_randv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_randnv_ex_qfp(dt: num_t) -> randnv_ex_vft {
    dyload_lib().bli_randnv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_randm_ex_qfp(dt: num_t) -> randm_ex_vft {
    dyload_lib().bli_randm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_randnm_ex_qfp(dt: num_t) -> randnm_ex_vft {
    dyload_lib().bli_randnm_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_sumsqv_ex_qfp(dt: num_t) -> sumsqv_ex_vft {
    dyload_lib().bli_sumsqv_ex_qfp.unwrap()(dt)
}

pub unsafe fn bli_eqsc_qfp(dt: num_t) -> eqsc_vft {
    dyload_lib().bli_eqsc_qfp.unwrap()(dt)
}

pub unsafe fn bli_eqv_qfp(dt: num_t) -> eqv_vft {
    dyload_lib().bli_eqv_qfp.unwrap()(dt)
}

pub unsafe fn bli_eqm_qfp(dt: num_t) -> eqm_vft {
    dyload_lib().bli_eqm_qfp.unwrap()(dt)
}

pub unsafe fn bli_fprintv_qfp(dt: num_t) -> fprintv_vft {
    dyload_lib().bli_fprintv_qfp.unwrap()(dt)
}

pub unsafe fn bli_fprintm_qfp(dt: num_t) -> fprintm_vft {
    dyload_lib().bli_fprintm_qfp.unwrap()(dt)
}

pub unsafe fn bli_sasumv_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    asum: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_sasumv_unb_var1.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_dasumv_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    asum: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dasumv_unb_var1.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_casumv_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    asum: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_casumv_unb_var1.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_zasumv_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    asum: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zasumv_unb_var1.unwrap()(n, x, incx, asum, cntx, rntm)
}

pub unsafe fn bli_smkherm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_smkherm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dmkherm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dmkherm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cmkherm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cmkherm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zmkherm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zmkherm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_smksymm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_smksymm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dmksymm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dmksymm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cmksymm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cmksymm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zmksymm_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zmksymm_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_smktrim_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f32,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_smktrim_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_dmktrim_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut f64,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dmktrim_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_cmktrim_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut scomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cmktrim_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_zmktrim_unb_var1(
    uploa: uplo_t,
    m: dim_t,
    a: *mut dcomplex,
    rs_a: inc_t,
    cs_a: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zmktrim_unb_var1.unwrap()(uploa, m, a, rs_a, cs_a, cntx, rntm)
}

pub unsafe fn bli_snorm1v_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snorm1v_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_dnorm1v_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnorm1v_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_cnorm1v_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnorm1v_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_znorm1v_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znorm1v_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_snormfv_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormfv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_dnormfv_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormfv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_cnormfv_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormfv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_znormfv_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormfv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_snormiv_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormiv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_dnormiv_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormiv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_cnormiv_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormiv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_znormiv_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormiv_unb_var1.unwrap()(n, x, incx, norm, cntx, rntm)
}

pub unsafe fn bli_snorm1m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snorm1m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_dnorm1m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnorm1m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_cnorm1m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnorm1m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_znorm1m_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znorm1m_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_snormfm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormfm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_dnormfm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormfm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_cnormfm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormfm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_znormfm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormfm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_snormim_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_snormim_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_dnormim_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dnormim_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_cnormim_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_cnormim_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_znormim_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    norm: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_znormim_unb_var1.unwrap()(
        diagoffx, diagx, uplox, m, n, x, rs_x, cs_x, norm, cntx, rntm,
    )
}

pub unsafe fn bli_srandv_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_drandv_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_crandv_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_zrandv_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_srandnv_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandnv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_drandnv_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandnv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_crandnv_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandnv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_zrandnv_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandnv_unb_var1.unwrap()(n, x, incx, cntx, rntm)
}

pub unsafe fn bli_srandm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_drandm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_crandm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zrandm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_srandnm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_srandnm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_drandnm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_drandnm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_crandnm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_crandnm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_zrandnm_unb_var1(
    diagoffx: doff_t,
    uplox: uplo_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zrandnm_unb_var1.unwrap()(diagoffx, uplox, m, n, x, rs_x, cs_x, cntx, rntm)
}

pub unsafe fn bli_ssumsqv_unb_var1(
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    scale: *mut f32,
    sumsq: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_ssumsqv_unb_var1.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_dsumsqv_unb_var1(
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    scale: *mut f64,
    sumsq: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_dsumsqv_unb_var1.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_csumsqv_unb_var1(
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    scale: *mut f32,
    sumsq: *mut f32,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_csumsqv_unb_var1.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_zsumsqv_unb_var1(
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    scale: *mut f64,
    sumsq: *mut f64,
    cntx: *mut cntx_t,
    rntm: *mut rntm_t,
) {
    dyload_lib().bli_zsumsqv_unb_var1.unwrap()(n, x, incx, scale, sumsq, cntx, rntm)
}

pub unsafe fn bli_seqv_unb_var1(
    conjx: conj_t,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    y: *mut f32,
    incy: inc_t,
) -> bool {
    dyload_lib().bli_seqv_unb_var1.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_deqv_unb_var1(
    conjx: conj_t,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    y: *mut f64,
    incy: inc_t,
) -> bool {
    dyload_lib().bli_deqv_unb_var1.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_ceqv_unb_var1(
    conjx: conj_t,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    y: *mut scomplex,
    incy: inc_t,
) -> bool {
    dyload_lib().bli_ceqv_unb_var1.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_zeqv_unb_var1(
    conjx: conj_t,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    y: *mut dcomplex,
    incy: inc_t,
) -> bool {
    dyload_lib().bli_zeqv_unb_var1.unwrap()(conjx, n, x, incx, y, incy)
}

pub unsafe fn bli_seqm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f32,
    rs_y: inc_t,
    cs_y: inc_t,
) -> bool {
    dyload_lib().bli_seqm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_deqm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut f64,
    rs_y: inc_t,
    cs_y: inc_t,
) -> bool {
    dyload_lib().bli_deqm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_ceqm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut scomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) -> bool {
    dyload_lib().bli_ceqm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_zeqm_unb_var1(
    diagoffx: doff_t,
    diagx: diag_t,
    uplox: uplo_t,
    transx: trans_t,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    y: *mut dcomplex,
    rs_y: inc_t,
    cs_y: inc_t,
) -> bool {
    dyload_lib().bli_zeqm_unb_var1.unwrap()(
        diagoffx, diagx, uplox, transx, m, n, x, rs_x, cs_x, y, rs_y, cs_y,
    )
}

pub unsafe fn bli_sfprintv(
    file: *mut FILE,
    s1: *mut c_char,
    n: dim_t,
    x: *mut f32,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_sfprintv.unwrap()(file, s1, n, x, incx, format, s2)
}

pub unsafe fn bli_dfprintv(
    file: *mut FILE,
    s1: *mut c_char,
    n: dim_t,
    x: *mut f64,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_dfprintv.unwrap()(file, s1, n, x, incx, format, s2)
}

pub unsafe fn bli_cfprintv(
    file: *mut FILE,
    s1: *mut c_char,
    n: dim_t,
    x: *mut scomplex,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_cfprintv.unwrap()(file, s1, n, x, incx, format, s2)
}

pub unsafe fn bli_zfprintv(
    file: *mut FILE,
    s1: *mut c_char,
    n: dim_t,
    x: *mut dcomplex,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_zfprintv.unwrap()(file, s1, n, x, incx, format, s2)
}

pub unsafe fn bli_ifprintv(
    file: *mut FILE,
    s1: *mut c_char,
    n: dim_t,
    x: *mut gint_t,
    incx: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_ifprintv.unwrap()(file, s1, n, x, incx, format, s2)
}

pub unsafe fn bli_sfprintm(
    file: *mut FILE,
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut f32,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_sfprintm.unwrap()(file, s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_dfprintm(
    file: *mut FILE,
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut f64,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_dfprintm.unwrap()(file, s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_cfprintm(
    file: *mut FILE,
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut scomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_cfprintm.unwrap()(file, s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_zfprintm(
    file: *mut FILE,
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut dcomplex,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_zfprintm.unwrap()(file, s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_ifprintm(
    file: *mut FILE,
    s1: *mut c_char,
    m: dim_t,
    n: dim_t,
    x: *mut gint_t,
    rs_x: inc_t,
    cs_x: inc_t,
    format: *mut c_char,
    s2: *mut c_char,
) {
    dyload_lib().bli_ifprintm.unwrap()(file, s1, m, n, x, rs_x, cs_x, format, s2)
}

pub unsafe fn bli_supdate_lower_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut f32,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_supdate_lower_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dupdate_lower_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut f64,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dupdate_lower_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_cupdate_lower_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut scomplex,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_cupdate_lower_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zupdate_lower_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut dcomplex,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zupdate_lower_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_supdate_upper_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut f32,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut f32,
    c: *mut f32,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_supdate_upper_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_dupdate_upper_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut f64,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut f64,
    c: *mut f64,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_dupdate_upper_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_cupdate_upper_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut scomplex,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut scomplex,
    c: *mut scomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_cupdate_upper_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn bli_zupdate_upper_triang(
    m_off: dim_t,
    n_off: dim_t,
    m_cur: dim_t,
    n_cur: dim_t,
    ct: *mut dcomplex,
    rs_ct: inc_t,
    cs_ct: inc_t,
    beta_cast: *mut dcomplex,
    c: *mut dcomplex,
    rs_c: inc_t,
    cs_c: inc_t,
) {
    dyload_lib().bli_zupdate_upper_triang.unwrap()(
        m_off, n_off, m_cur, n_cur, ct, rs_ct, cs_ct, beta_cast, c, rs_c, cs_c,
    )
}

pub unsafe fn SROTG(sa: *mut f32, sb: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().SROTG.unwrap()(sa, sb, c, s)
}

pub unsafe fn srotg(sa: *mut f32, sb: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().srotg.unwrap()(sa, sb, c, s)
}

pub unsafe fn SROTG_(sa: *mut f32, sb: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().SROTG_.unwrap()(sa, sb, c, s)
}

pub unsafe fn SROTMG(
    sd1: *mut f32,
    sd2: *mut f32,
    sx1: *mut f32,
    sy1: *const f32,
    sparam: *mut f32,
) {
    dyload_lib().SROTMG.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn srotmg(
    sd1: *mut f32,
    sd2: *mut f32,
    sx1: *mut f32,
    sy1: *const f32,
    sparam: *mut f32,
) {
    dyload_lib().srotmg.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn SROTMG_(
    sd1: *mut f32,
    sd2: *mut f32,
    sx1: *mut f32,
    sy1: *const f32,
    sparam: *mut f32,
) {
    dyload_lib().SROTMG_.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn SROT(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().SROT.unwrap()(n, sx, incx, sy, incy, c, s)
}

pub unsafe fn srot(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().srot.unwrap()(n, sx, incx, sy, incy, c, s)
}

pub unsafe fn SROT_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().SROT_.unwrap()(n, sx, incx, sy, incy, c, s)
}

pub unsafe fn SROTM(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    sparam: *const f32,
) {
    dyload_lib().SROTM.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn srotm(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    sparam: *const f32,
) {
    dyload_lib().srotm.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn SROTM_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    sparam: *const f32,
) {
    dyload_lib().SROTM_.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn SSWAP(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSWAP.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn sswap(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sswap.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SSWAP_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSWAP_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SSCAL(n: *const f77_int, sa: *const f32, sx: *mut f32, incx: *const f77_int) {
    dyload_lib().SSCAL.unwrap()(n, sa, sx, incx)
}

pub unsafe fn sscal(n: *const f77_int, sa: *const f32, sx: *mut f32, incx: *const f77_int) {
    dyload_lib().sscal.unwrap()(n, sa, sx, incx)
}

pub unsafe fn SSCAL_(n: *const f77_int, sa: *const f32, sx: *mut f32, incx: *const f77_int) {
    dyload_lib().SSCAL_.unwrap()(n, sa, sx, incx)
}

pub unsafe fn SCOPY(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SCOPY.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn scopy(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().scopy.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SCOPY_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SCOPY_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SAXPY(
    n: *const f77_int,
    sa: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPY.unwrap()(n, sa, sx, incx, sy, incy)
}

pub unsafe fn saxpy(
    n: *const f77_int,
    sa: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpy.unwrap()(n, sa, sx, incx, sy, incy)
}

pub unsafe fn SAXPY_(
    n: *const f77_int,
    sa: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPY_.unwrap()(n, sa, sx, incx, sy, incy)
}

pub unsafe fn SDOT(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDOT.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn sdot(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdot.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SDOT_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDOT_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SDSDOT(
    n: *const f77_int,
    sb: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDSDOT.unwrap()(n, sb, sx, incx, sy, incy)
}

pub unsafe fn sdsdot(
    n: *const f77_int,
    sb: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdsdot.unwrap()(n, sb, sx, incx, sy, incy)
}

pub unsafe fn SDSDOT_(
    n: *const f77_int,
    sb: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDSDOT_.unwrap()(n, sb, sx, incx, sy, incy)
}

pub unsafe fn SNRM2(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SNRM2.unwrap()(n, x, incx)
}

pub unsafe fn snrm2(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().snrm2.unwrap()(n, x, incx)
}

pub unsafe fn SNRM2_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SNRM2_.unwrap()(n, x, incx)
}

pub unsafe fn SCNRM2(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().SCNRM2.unwrap()(n, x, incx)
}

pub unsafe fn scnrm2(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().scnrm2.unwrap()(n, x, incx)
}

pub unsafe fn SCNRM2_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().SCNRM2_.unwrap()(n, x, incx)
}

pub unsafe fn SASUM(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SASUM.unwrap()(n, sx, incx)
}

pub unsafe fn sasum(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().sasum.unwrap()(n, sx, incx)
}

pub unsafe fn SASUM_(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SASUM_.unwrap()(n, sx, incx)
}

pub unsafe fn ISAMAX(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMAX.unwrap()(n, sx, incx)
}

pub unsafe fn isamax(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamax.unwrap()(n, sx, incx)
}

pub unsafe fn ISAMAX_(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMAX_.unwrap()(n, sx, incx)
}

pub unsafe fn DROTG(da: *mut f64, db: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().DROTG.unwrap()(da, db, c, s)
}

pub unsafe fn drotg(da: *mut f64, db: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().drotg.unwrap()(da, db, c, s)
}

pub unsafe fn DROTG_(da: *mut f64, db: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().DROTG_.unwrap()(da, db, c, s)
}

pub unsafe fn DROTMG(
    dd1: *mut f64,
    dd2: *mut f64,
    dx1: *mut f64,
    dy1: *const f64,
    dparam: *mut f64,
) {
    dyload_lib().DROTMG.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn drotmg(
    dd1: *mut f64,
    dd2: *mut f64,
    dx1: *mut f64,
    dy1: *const f64,
    dparam: *mut f64,
) {
    dyload_lib().drotmg.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn DROTMG_(
    dd1: *mut f64,
    dd2: *mut f64,
    dx1: *mut f64,
    dy1: *const f64,
    dparam: *mut f64,
) {
    dyload_lib().DROTMG_.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn DROT(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().DROT.unwrap()(n, dx, incx, dy, incy, c, s)
}

pub unsafe fn drot(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().drot.unwrap()(n, dx, incx, dy, incy, c, s)
}

pub unsafe fn DROT_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().DROT_.unwrap()(n, dx, incx, dy, incy, c, s)
}

pub unsafe fn DROTM(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    dparam: *const f64,
) {
    dyload_lib().DROTM.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn drotm(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    dparam: *const f64,
) {
    dyload_lib().drotm.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn DROTM_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    dparam: *const f64,
) {
    dyload_lib().DROTM_.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn DSWAP(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSWAP.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn dswap(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dswap.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DSWAP_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSWAP_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DSCAL(n: *const f77_int, da: *const f64, dx: *mut f64, incx: *const f77_int) {
    dyload_lib().DSCAL.unwrap()(n, da, dx, incx)
}

pub unsafe fn dscal(n: *const f77_int, da: *const f64, dx: *mut f64, incx: *const f77_int) {
    dyload_lib().dscal.unwrap()(n, da, dx, incx)
}

pub unsafe fn DSCAL_(n: *const f77_int, da: *const f64, dx: *mut f64, incx: *const f77_int) {
    dyload_lib().DSCAL_.unwrap()(n, da, dx, incx)
}

pub unsafe fn DCOPY(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DCOPY.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn dcopy(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dcopy.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DCOPY_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DCOPY_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DAXPY(
    n: *const f77_int,
    da: *const f64,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPY.unwrap()(n, da, dx, incx, dy, incy)
}

pub unsafe fn daxpy(
    n: *const f77_int,
    da: *const f64,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpy.unwrap()(n, da, dx, incx, dy, incy)
}

pub unsafe fn DAXPY_(
    n: *const f77_int,
    da: *const f64,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPY_.unwrap()(n, da, dx, incx, dy, incy)
}

pub unsafe fn DDOT(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DDOT.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn ddot(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().ddot.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DDOT_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DDOT_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DSDOT(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DSDOT.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn dsdot(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().dsdot.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn DSDOT_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DSDOT_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn DNRM2(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DNRM2.unwrap()(n, x, incx)
}

pub unsafe fn dnrm2(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dnrm2.unwrap()(n, x, incx)
}

pub unsafe fn DNRM2_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DNRM2_.unwrap()(n, x, incx)
}

pub unsafe fn DZNRM2(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().DZNRM2.unwrap()(n, x, incx)
}

pub unsafe fn dznrm2(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().dznrm2.unwrap()(n, x, incx)
}

pub unsafe fn DZNRM2_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().DZNRM2_.unwrap()(n, x, incx)
}

pub unsafe fn DASUM(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DASUM.unwrap()(n, dx, incx)
}

pub unsafe fn dasum(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dasum.unwrap()(n, dx, incx)
}

pub unsafe fn DASUM_(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DASUM_.unwrap()(n, dx, incx)
}

pub unsafe fn IDAMAX(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMAX.unwrap()(n, dx, incx)
}

pub unsafe fn idamax(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamax.unwrap()(n, dx, incx)
}

pub unsafe fn IDAMAX_(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMAX_.unwrap()(n, dx, incx)
}

pub unsafe fn CROTG(ca: *mut scomplex, cb: *mut bla_scomplex, c: *mut bla_real, s: *mut scomplex) {
    dyload_lib().CROTG.unwrap()(ca, cb, c, s)
}

pub unsafe fn crotg(ca: *mut scomplex, cb: *mut bla_scomplex, c: *mut bla_real, s: *mut scomplex) {
    dyload_lib().crotg.unwrap()(ca, cb, c, s)
}

pub unsafe fn CROTG_(ca: *mut scomplex, cb: *mut bla_scomplex, c: *mut bla_real, s: *mut scomplex) {
    dyload_lib().CROTG_.unwrap()(ca, cb, c, s)
}

pub unsafe fn CSROT(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().CSROT.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn csrot(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().csrot.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn CSROT_(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().CSROT_.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn CSWAP(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CSWAP.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn cswap(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cswap.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CSWAP_(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CSWAP_.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CSCAL(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CSCAL.unwrap()(n, ca, cx, incx)
}

pub unsafe fn cscal(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().cscal.unwrap()(n, ca, cx, incx)
}

pub unsafe fn CSCAL_(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CSCAL_.unwrap()(n, ca, cx, incx)
}

pub unsafe fn CSSCAL(n: *const f77_int, sa: *const f32, cx: *mut scomplex, incx: *const f77_int) {
    dyload_lib().CSSCAL.unwrap()(n, sa, cx, incx)
}

pub unsafe fn csscal(n: *const f77_int, sa: *const f32, cx: *mut scomplex, incx: *const f77_int) {
    dyload_lib().csscal.unwrap()(n, sa, cx, incx)
}

pub unsafe fn CSSCAL_(n: *const f77_int, sa: *const f32, cx: *mut scomplex, incx: *const f77_int) {
    dyload_lib().CSSCAL_.unwrap()(n, sa, cx, incx)
}

pub unsafe fn CCOPY(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CCOPY.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn ccopy(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().ccopy.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CCOPY_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CCOPY_.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CAXPY(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPY.unwrap()(n, ca, cx, incx, cy, incy)
}

pub unsafe fn caxpy(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpy.unwrap()(n, ca, cx, incx, cy, incy)
}

pub unsafe fn CAXPY_(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPY_.unwrap()(n, ca, cx, incx, cy, incy)
}

pub unsafe fn CDOTC(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTC.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotc(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotc.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn CDOTC_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTC_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn CDOTU(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTU.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotu(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotu.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn CDOTU_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTU_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTC(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTC.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotc(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotc.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTC_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTC_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTU(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTU.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotu(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotu.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTU_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTU_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn SCASUM(n: *const f77_int, cx: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().SCASUM.unwrap()(n, cx, incx)
}

pub unsafe fn scasum(n: *const f77_int, cx: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().scasum.unwrap()(n, cx, incx)
}

pub unsafe fn SCASUM_(n: *const f77_int, cx: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().SCASUM_.unwrap()(n, cx, incx)
}

pub unsafe fn ICAMAX(n: *const f77_int, cx: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().ICAMAX.unwrap()(n, cx, incx)
}

pub unsafe fn icamax(n: *const f77_int, cx: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().icamax.unwrap()(n, cx, incx)
}

pub unsafe fn ICAMAX_(n: *const f77_int, cx: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().ICAMAX_.unwrap()(n, cx, incx)
}

pub unsafe fn ZROTG(
    ca: *mut dcomplex,
    cb: *mut bla_dcomplex,
    c: *mut bla_double,
    s: *mut dcomplex,
) {
    dyload_lib().ZROTG.unwrap()(ca, cb, c, s)
}

pub unsafe fn zrotg(
    ca: *mut dcomplex,
    cb: *mut bla_dcomplex,
    c: *mut bla_double,
    s: *mut dcomplex,
) {
    dyload_lib().zrotg.unwrap()(ca, cb, c, s)
}

pub unsafe fn ZROTG_(
    ca: *mut dcomplex,
    cb: *mut bla_dcomplex,
    c: *mut bla_double,
    s: *mut dcomplex,
) {
    dyload_lib().ZROTG_.unwrap()(ca, cb, c, s)
}

pub unsafe fn ZDROT(
    n: *const f77_int,
    cx: *mut dcomplex,
    incx: *const f77_int,
    cy: *mut dcomplex,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().ZDROT.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn zdrot(
    n: *const f77_int,
    cx: *mut dcomplex,
    incx: *const f77_int,
    cy: *mut dcomplex,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().zdrot.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn ZDROT_(
    n: *const f77_int,
    cx: *mut dcomplex,
    incx: *const f77_int,
    cy: *mut dcomplex,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().ZDROT_.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn ZSWAP(
    n: *const f77_int,
    zx: *mut dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZSWAP.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn zswap(
    n: *const f77_int,
    zx: *mut dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zswap.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZSWAP_(
    n: *const f77_int,
    zx: *mut dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZSWAP_.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZSCAL(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZSCAL.unwrap()(n, za, zx, incx)
}

pub unsafe fn zscal(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zscal.unwrap()(n, za, zx, incx)
}

pub unsafe fn ZSCAL_(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZSCAL_.unwrap()(n, za, zx, incx)
}

pub unsafe fn ZDSCAL(n: *const f77_int, da: *const f64, zx: *mut dcomplex, incx: *const f77_int) {
    dyload_lib().ZDSCAL.unwrap()(n, da, zx, incx)
}

pub unsafe fn zdscal(n: *const f77_int, da: *const f64, zx: *mut dcomplex, incx: *const f77_int) {
    dyload_lib().zdscal.unwrap()(n, da, zx, incx)
}

pub unsafe fn ZDSCAL_(n: *const f77_int, da: *const f64, zx: *mut dcomplex, incx: *const f77_int) {
    dyload_lib().ZDSCAL_.unwrap()(n, da, zx, incx)
}

pub unsafe fn ZCOPY(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZCOPY.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn zcopy(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zcopy.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZCOPY_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZCOPY_.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZAXPY(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPY.unwrap()(n, za, zx, incx, zy, incy)
}

pub unsafe fn zaxpy(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpy.unwrap()(n, za, zx, incx, zy, incy)
}

pub unsafe fn ZAXPY_(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPY_.unwrap()(n, za, zx, incx, zy, incy)
}

pub unsafe fn DZASUM(n: *const f77_int, zx: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().DZASUM.unwrap()(n, zx, incx)
}

pub unsafe fn dzasum(n: *const f77_int, zx: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().dzasum.unwrap()(n, zx, incx)
}

pub unsafe fn DZASUM_(n: *const f77_int, zx: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().DZASUM_.unwrap()(n, zx, incx)
}

pub unsafe fn IZAMAX(n: *const f77_int, zx: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().IZAMAX.unwrap()(n, zx, incx)
}

pub unsafe fn izamax(n: *const f77_int, zx: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().izamax.unwrap()(n, zx, incx)
}

pub unsafe fn IZAMAX_(n: *const f77_int, zx: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().IZAMAX_.unwrap()(n, zx, incx)
}

pub unsafe fn ICAMIN(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().ICAMIN.unwrap()(n, x, incx)
}

pub unsafe fn icamin(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().icamin.unwrap()(n, x, incx)
}

pub unsafe fn ICAMIN_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().ICAMIN_.unwrap()(n, x, incx)
}

pub unsafe fn IDAMIN(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMIN.unwrap()(n, x, incx)
}

pub unsafe fn idamin(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamin.unwrap()(n, x, incx)
}

pub unsafe fn IDAMIN_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMIN_.unwrap()(n, x, incx)
}

pub unsafe fn ISAMIN(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMIN.unwrap()(n, x, incx)
}

pub unsafe fn isamin(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamin.unwrap()(n, x, incx)
}

pub unsafe fn ISAMIN_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMIN_.unwrap()(n, x, incx)
}

pub unsafe fn IZAMIN(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().IZAMIN.unwrap()(n, x, incx)
}

pub unsafe fn izamin(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().izamin.unwrap()(n, x, incx)
}

pub unsafe fn IZAMIN_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().IZAMIN_.unwrap()(n, x, incx)
}

pub unsafe fn SGEMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGEMV.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sgemv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sgemv.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SGEMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGEMV_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SGBMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGBMV.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sgbmv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sgbmv.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SGBMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGBMV_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSYMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSYMV.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssymv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().ssymv.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSYMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSYMV_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSBMV(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSBMV.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssbmv(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().ssbmv.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSBMV_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSBMV_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSPMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    ap: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSPMV.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn sspmv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    ap: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sspmv.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn SSPMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    ap: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSPMV_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn STRMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRMV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn strmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strmv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STRMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRMV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STBMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBMV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stbmv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STBMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBMV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STPMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPMV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stpmv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn STPMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPMV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn STRSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRSV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn strsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strsv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STRSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRSV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STBSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBSV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stbsv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STBSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBSV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STPSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPSV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stpsv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn STPSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPSV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn SGER(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SGER.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn sger(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().sger.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SGER_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SGER_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SSYR(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ssyr(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn SSYR_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn SSPR(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn sspr(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().sspr.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn SSPR_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn SSYR2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ssyr2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SSYR2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SSPR2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn sspr2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().sspr2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn SSPR2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn DGEMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGEMV.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgemv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dgemv.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DGEMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGEMV_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DGBMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGBMV.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgbmv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dgbmv.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DGBMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGBMV_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSYMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSYMV.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsymv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dsymv.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSYMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSYMV_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSBMV(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSBMV.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsbmv(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dsbmv.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSBMV_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSBMV_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSPMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    ap: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSPMV.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn dspmv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    ap: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dspmv.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn DSPMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    ap: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSPMV_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn DTRMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRMV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn dtrmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrmv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTRMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRMV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTBMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBMV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtbmv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTBMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBMV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTPMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPMV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtpmv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DTPMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPMV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DTRSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRSV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn dtrsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrsv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTRSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRSV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTBSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBSV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtbsv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTBSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBSV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTPSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPSV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtpsv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DTPSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPSV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DGER(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DGER.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dger(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dger.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DGER_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DGER_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DSYR(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn dsyr(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn DSYR_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn DSPR(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn dspr(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().dspr.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn DSPR_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn DSYR2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dsyr2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DSYR2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DSPR2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn dspr2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().dspr2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn DSPR2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn CGEMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGEMV.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgemv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cgemv.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CGEMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGEMV_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CGBMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGBMV.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgbmv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cgbmv.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CGBMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGBMV_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHEMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHEMV.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn chemv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chemv.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHEMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHEMV_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHBMV(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHBMV.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn chbmv(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chbmv.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHBMV_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHBMV_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHPMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    ap: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHPMV.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn chpmv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    ap: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chpmv.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn CHPMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    ap: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHPMV_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn CTRMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRMV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ctrmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrmv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTRMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRMV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTBMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBMV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctbmv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTBMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBMV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTPMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPMV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctpmv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CTPMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPMV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CTRSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRSV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ctrsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrsv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTRSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRSV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTBSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBSV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctbsv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTBSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBSV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTPSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPSV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctpsv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CTPSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPSV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CGERC(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERC.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgerc(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgerc.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CGERC_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERC_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CGERU(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERU.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgeru(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgeru.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CGERU_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERU_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CHER(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn cher(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn CHER_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn CHPR(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn chpr(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().chpr.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn CHPR_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn CHER2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cher2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CHER2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CHPR2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn chpr2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().chpr2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn CHPR2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn ZGEMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGEMV.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgemv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zgemv.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZGEMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGEMV_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZGBMV(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGBMV.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgbmv(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zgbmv.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZGBMV_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGBMV_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHEMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHEMV.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhemv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhemv.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHEMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHEMV_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHBMV(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHBMV.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhbmv(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhbmv.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHBMV_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHBMV_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHPMV(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    ap: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHPMV.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn zhpmv(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    ap: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhpmv.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn ZHPMV_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    ap: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHPMV_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn ZTRMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRMV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ztrmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrmv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTRMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRMV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTBMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBMV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztbmv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTBMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBMV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTPMV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPMV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpmv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztpmv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZTPMV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPMV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZTRSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRSV.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ztrsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrsv.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTRSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRSV_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTBSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBSV.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztbsv.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTBSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBSV_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTPSV(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPSV.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpsv(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztpsv.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZTPSV_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPSV_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZGERU(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERU.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgeru(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgeru.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZGERU_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERU_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZGERC(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERC.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgerc(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgerc.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZGERC_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERC_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZHER(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn zher(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ZHER_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ZHPR(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const bla_double,
    x: *const dcomplex,
    incx: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn zhpr(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const bla_double,
    x: *const dcomplex,
    incx: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().zhpr.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn ZHPR_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const bla_double,
    x: *const dcomplex,
    incx: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn ZHER2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zher2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher2.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZHER2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER2_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZHPR2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn zhpr2(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().zhpr2.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn ZHPR2_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn SGEMM(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn sgemm(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SGEMM_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYMM(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYMM.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssymm(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssymm.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYMM_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYMM_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYRK(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYRK.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ssyrk(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyrk.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn SSYRK_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYRK_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn SSYR2K(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYR2K.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssyr2k(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyr2k.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYR2K_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYR2K_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn STRMM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRMM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strmm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strmm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn STRMM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRMM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn STRSM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRSM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strsm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strsm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn STRSM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRSM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DGEMM(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemm(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DGEMM_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DZGEMM(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().DZGEMM.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dzgemm(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().dzgemm.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DZGEMM_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().DZGEMM_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYMM(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYMM.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsymm(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsymm.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYMM_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYMM_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYRK(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYRK.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn dsyrk(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyrk.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn DSYRK_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYRK_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn DSYR2K(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYR2K.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsyr2k(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyr2k.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYR2K_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYR2K_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DTRMM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRMM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrmm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrmm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DTRMM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRMM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DTRSM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRSM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrsm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrsm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DTRSM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRSM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CGEMM(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemm(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CGEMM_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYMM(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYMM.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csymm(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csymm.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYMM_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYMM_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHEMM(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHEMM.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn chemm(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().chemm.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHEMM_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHEMM_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYRK(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYRK.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn csyrk(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyrk.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CSYRK_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYRK_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CHERK(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHERK.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn cherk(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cherk.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CHERK_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHERK_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CSYR2K(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYR2K.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csyr2k(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyr2k.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYR2K_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYR2K_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHER2K(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHER2K.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cher2k(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cher2k.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHER2K_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHER2K_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CTRMM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRMM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrmm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrmm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CTRMM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRMM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CTRSM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRSM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrsm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrsm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CTRSM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRSM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZGEMM(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemm(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZGEMM_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYMM(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYMM.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsymm(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsymm.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYMM_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYMM_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHEMM(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHEMM.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zhemm(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zhemm.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHEMM_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHEMM_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYRK(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYRK.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zsyrk(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyrk.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZSYRK_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYRK_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZHERK(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHERK.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zherk(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zherk.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZHERK_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHERK_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZSYR2K(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYR2K.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsyr2k(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyr2k.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYR2K_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYR2K_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHER2K(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHER2K.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zher2k(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zher2k.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHER2K_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHER2K_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZTRMM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRMM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrmm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrmm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZTRMM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRMM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZTRSM(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRSM.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrsm(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrsm.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZTRSM_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRSM_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CDOTCSUB(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTCSUB.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn cdotcsub(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotcsub.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn CDOTCSUB_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTCSUB_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn CDOTUSUB(
    n: *const f77_int,
    x: *const scomplex,
    incxy: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTUSUB.unwrap()(n, x, incxy, y, incy, rval)
}

pub unsafe fn cdotusub(
    n: *const f77_int,
    x: *const scomplex,
    incxy: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotusub.unwrap()(n, x, incxy, y, incy, rval)
}

pub unsafe fn CDOTUSUB_(
    n: *const f77_int,
    x: *const scomplex,
    incxy: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTUSUB_.unwrap()(n, x, incxy, y, incy, rval)
}

pub unsafe fn DASUMSUB(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().DASUMSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn dasumsub(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().dasumsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn DASUMSUB_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().DASUMSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DDOTSUB(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DDOTSUB.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ddotsub(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().ddotsub.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn DDOTSUB_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DDOTSUB_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn DNRM2SUB(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().DNRM2SUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn dnrm2sub(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().dnrm2sub.unwrap()(n, x, incx, rval)
}

pub unsafe fn DNRM2SUB_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().DNRM2SUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZASUMSUB(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZASUMSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn dzasumsub(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dzasumsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZASUMSUB_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZASUMSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZNRM2SUB(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZNRM2SUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn dznrm2sub(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dznrm2sub.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZNRM2SUB_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZNRM2SUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMAXSUB(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMAXSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn icamaxsub(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icamaxsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMAXSUB_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMAXSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMINSUB(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMINSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn icaminsub(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icaminsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMINSUB_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMINSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMAXSUB(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMAXSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn idamaxsub(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idamaxsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMAXSUB_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMAXSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMINSUB(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMINSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn idaminsub(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idaminsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMINSUB_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMINSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMAXSUB(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMAXSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn isamaxsub(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isamaxsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMAXSUB_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMAXSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMINSUB(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMINSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn isaminsub(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isaminsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMINSUB_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMINSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMINSUB(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMINSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn izaminsub(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izaminsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMINSUB_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMINSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMAXSUB(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMAXSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn izamaxsub(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izamaxsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMAXSUB_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMAXSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SASUMSUB(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().SASUMSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn sasumsub(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().sasumsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn SASUMSUB_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().SASUMSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCASUMSUB(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCASUMSUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn scasumsub(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scasumsub.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCASUMSUB_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCASUMSUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCNRM2SUB(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCNRM2SUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn scnrm2sub(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scnrm2sub.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCNRM2SUB_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCNRM2SUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SDOTSUB(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SDOTSUB.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn sdotsub(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sdotsub.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn SDOTSUB_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SDOTSUB_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn SNRM2SUB(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().SNRM2SUB.unwrap()(n, x, incx, rval)
}

pub unsafe fn snrm2sub(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().snrm2sub.unwrap()(n, x, incx, rval)
}

pub unsafe fn SNRM2SUB_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().SNRM2SUB_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ZDOTCSUB(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTCSUB.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotcsub(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotcsub.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ZDOTCSUB_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTCSUB_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ZDOTUSUB(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTUSUB.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotusub(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotusub.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ZDOTUSUB_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTUSUB_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn SDSDOTSUB(
    n: *const f77_int,
    sb: *mut f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f32,
) {
    dyload_lib().SDSDOTSUB.unwrap()(n, sb, x, incx, y, incy, dot)
}

pub unsafe fn sdsdotsub(
    n: *const f77_int,
    sb: *mut f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f32,
) {
    dyload_lib().sdsdotsub.unwrap()(n, sb, x, incx, y, incy, dot)
}

pub unsafe fn SDSDOTSUB_(
    n: *const f77_int,
    sb: *mut f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f32,
) {
    dyload_lib().SDSDOTSUB_.unwrap()(n, sb, x, incx, y, incy, dot)
}

pub unsafe fn DSDOTSUB(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f64,
) {
    dyload_lib().DSDOTSUB.unwrap()(n, x, incx, y, incy, dot)
}

pub unsafe fn dsdotsub(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f64,
) {
    dyload_lib().dsdotsub.unwrap()(n, x, incx, y, incy, dot)
}

pub unsafe fn DSDOTSUB_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f64,
) {
    dyload_lib().DSDOTSUB_.unwrap()(n, x, incx, y, incy, dot)
}

pub unsafe fn LSAME(ca: *const c_char, cb: *const c_char, a: f77_int, b: f77_int) -> f77_int {
    dyload_lib().LSAME.unwrap()(ca, cb, a, b)
}

pub unsafe fn lsame(ca: *const c_char, cb: *const c_char, a: f77_int, b: f77_int) -> f77_int {
    dyload_lib().lsame.unwrap()(ca, cb, a, b)
}

pub unsafe fn LSAME_(ca: *const c_char, cb: *const c_char, a: f77_int, b: f77_int) -> f77_int {
    dyload_lib().LSAME_.unwrap()(ca, cb, a, b)
}

pub unsafe fn XERBLA(srname: *const c_char, info: *const f77_int, n: ftnlen) {
    dyload_lib().XERBLA.unwrap()(srname, info, n)
}

pub unsafe fn xerbla(srname: *const c_char, info: *const f77_int, n: ftnlen) {
    dyload_lib().xerbla.unwrap()(srname, info, n)
}

pub unsafe fn XERBLA_(srname: *const c_char, info: *const f77_int, n: ftnlen) {
    dyload_lib().XERBLA_.unwrap()(srname, info, n)
}

pub unsafe fn DCABS1(z: *mut bla_dcomplex) -> f64 {
    dyload_lib().DCABS1.unwrap()(z)
}

pub unsafe fn dcabs1(z: *mut bla_dcomplex) -> f64 {
    dyload_lib().dcabs1.unwrap()(z)
}

pub unsafe fn DCABS1_(z: *mut bla_dcomplex) -> f64 {
    dyload_lib().DCABS1_.unwrap()(z)
}

pub unsafe fn SCABS1(z: *mut bla_scomplex) -> f32 {
    dyload_lib().SCABS1.unwrap()(z)
}

pub unsafe fn scabs1(z: *mut bla_scomplex) -> f32 {
    dyload_lib().scabs1.unwrap()(z)
}

pub unsafe fn SCABS1_(z: *mut bla_scomplex) -> f32 {
    dyload_lib().SCABS1_.unwrap()(z)
}

pub unsafe fn CAXPBY(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPBY.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn caxpby(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpby.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn CAXPBY_(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPBY_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn CGEMM3M(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM3M.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemm3m(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm3m.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CGEMM3M_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM3M_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CGEMM_BATCH(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().CGEMM_BATCH.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cgemm_batch(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().cgemm_batch.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn CGEMM_BATCH_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().CGEMM_BATCH_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn CGEMMT(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMMT.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemmt(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemmt.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CGEMMT_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMMT_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DAXPBY(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPBY.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn daxpby(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpby.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn DAXPBY_(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPBY_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn DGEMM_BATCH(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().DGEMM_BATCH.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn dgemm_batch(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().dgemm_batch.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn DGEMM_BATCH_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().DGEMM_BATCH_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn DGEMM_PACK_GET_SIZE(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().DGEMM_PACK_GET_SIZE.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn dgemm_pack_get_size(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().dgemm_pack_get_size.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn DGEMM_PACK_GET_SIZE_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().DGEMM_PACK_GET_SIZE_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn DGEMM_PACK(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().DGEMM_PACK.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn dgemm_pack(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().dgemm_pack.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn DGEMM_PACK_(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().DGEMM_PACK_.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn DGEMM_COMPUTE(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_COMPUTE.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemm_compute(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm_compute.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DGEMM_COMPUTE_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_COMPUTE_.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DGEMMT(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMMT.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemmt(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemmt.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DGEMMT_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMMT_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SAXPBY(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPBY.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn saxpby(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpby.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn SAXPBY_(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPBY_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn SGEMM_BATCH(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().SGEMM_BATCH.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn sgemm_batch(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().sgemm_batch.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn SGEMM_BATCH_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().SGEMM_BATCH_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn SGEMM_PACK_GET_SIZE(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().SGEMM_PACK_GET_SIZE.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn sgemm_pack_get_size(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().sgemm_pack_get_size.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn SGEMM_PACK_GET_SIZE_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().SGEMM_PACK_GET_SIZE_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn SGEMM_PACK(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().SGEMM_PACK.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn sgemm_pack(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().sgemm_pack.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn SGEMM_PACK_(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().SGEMM_PACK_.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn SGEMM_COMPUTE(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_COMPUTE.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn sgemm_compute(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm_compute.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SGEMM_COMPUTE_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_COMPUTE_.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SGEMMT(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMMT.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn sgemmt(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemmt.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SGEMMT_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMMT_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZAXPBY(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPBY.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn zaxpby(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpby.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn ZAXPBY_(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPBY_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn ZGEMM3M(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM3M.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemm3m(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm3m.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZGEMM3M_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM3M_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZGEMM_BATCH(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().ZGEMM_BATCH.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn zgemm_batch(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().zgemm_batch.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn ZGEMM_BATCH_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().ZGEMM_BATCH_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn ZGEMMT(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMMT.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemmt(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemmt.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZGEMMT_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMMT_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CIMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *mut scomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().CIMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn cimatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *mut scomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().cimatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn CIMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *mut scomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().CIMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn COMATADD(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const scomplex,
    A: *const scomplex,
    lda: *mut f77_int,
    beta: *const scomplex,
    B: *mut scomplex,
    ldb: *mut f77_int,
    C: *mut scomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().COMATADD.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn comatadd(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const scomplex,
    A: *const scomplex,
    lda: *mut f77_int,
    beta: *const scomplex,
    B: *mut scomplex,
    ldb: *mut f77_int,
    C: *mut scomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().comatadd.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn COMATADD_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const scomplex,
    A: *const scomplex,
    lda: *mut f77_int,
    beta: *const scomplex,
    B: *mut scomplex,
    ldb: *mut f77_int,
    C: *mut scomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().COMATADD_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn COMATCOPY2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().COMATCOPY2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn comatcopy2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().comatcopy2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn COMATCOPY2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().COMATCOPY2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn COMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().COMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn comatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().comatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn COMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().COMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn DOMATADD(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f64,
    A: *const f64,
    lda: *mut f77_int,
    beta: *const f64,
    B: *const f64,
    ldb: *mut f77_int,
    C: *mut f64,
    ldc: *mut f77_int,
) {
    dyload_lib().DOMATADD.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn domatadd(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f64,
    A: *const f64,
    lda: *mut f77_int,
    beta: *const f64,
    B: *const f64,
    ldb: *mut f77_int,
    C: *mut f64,
    ldc: *mut f77_int,
) {
    dyload_lib().domatadd.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn DOMATADD_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f64,
    A: *const f64,
    lda: *mut f77_int,
    beta: *const f64,
    B: *const f64,
    ldb: *mut f77_int,
    C: *mut f64,
    ldc: *mut f77_int,
) {
    dyload_lib().DOMATADD_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn DOMATCOPY2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().DOMATCOPY2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn domatcopy2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().domatcopy2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn DOMATCOPY2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().DOMATCOPY2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn DOMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
) {
    dyload_lib().DOMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn domatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
) {
    dyload_lib().domatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn DOMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
) {
    dyload_lib().DOMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn SIMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *mut f32,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().SIMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn simatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *mut f32,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().simatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn SIMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *mut f32,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().SIMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn SOMATADD(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f32,
    A: *const f32,
    lda: *mut f77_int,
    beta: *const f32,
    B: *const f32,
    ldb: *mut f77_int,
    C: *mut f32,
    ldc: *mut f77_int,
) {
    dyload_lib().SOMATADD.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn somatadd(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f32,
    A: *const f32,
    lda: *mut f77_int,
    beta: *const f32,
    B: *const f32,
    ldb: *mut f77_int,
    C: *mut f32,
    ldc: *mut f77_int,
) {
    dyload_lib().somatadd.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn SOMATADD_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f32,
    A: *const f32,
    lda: *mut f77_int,
    beta: *const f32,
    B: *const f32,
    ldb: *mut f77_int,
    C: *mut f32,
    ldc: *mut f77_int,
) {
    dyload_lib().SOMATADD_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn SOMATCOPY2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().SOMATCOPY2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn somatcopy2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().somatcopy2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn SOMATCOPY2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().SOMATCOPY2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn SOMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
) {
    dyload_lib().SOMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn somatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
) {
    dyload_lib().somatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn SOMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
) {
    dyload_lib().SOMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn ZIMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *mut dcomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().ZIMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn zimatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *mut dcomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().zimatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn ZIMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *mut dcomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().ZIMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn ZOMATADD(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const dcomplex,
    A: *const dcomplex,
    lda: *mut f77_int,
    beta: *const dcomplex,
    B: *mut dcomplex,
    ldb: *mut f77_int,
    C: *mut dcomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().ZOMATADD.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn zomatadd(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const dcomplex,
    A: *const dcomplex,
    lda: *mut f77_int,
    beta: *const dcomplex,
    B: *mut dcomplex,
    ldb: *mut f77_int,
    C: *mut dcomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().zomatadd.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn ZOMATADD_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const dcomplex,
    A: *const dcomplex,
    lda: *mut f77_int,
    beta: *const dcomplex,
    B: *mut dcomplex,
    ldb: *mut f77_int,
    C: *mut dcomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().ZOMATADD_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn ZOMATCOPY2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().ZOMATCOPY2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn zomatcopy2(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().zomatcopy2.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn ZOMATCOPY2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().ZOMATCOPY2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn ZOMATCOPY(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().ZOMATCOPY.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn zomatcopy(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().zomatcopy.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn ZOMATCOPY_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().ZOMATCOPY_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn SROTG_BLIS_IMPL(sa: *mut f32, sb: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().SROTG_BLIS_IMPL.unwrap()(sa, sb, c, s)
}

pub unsafe fn srotg_blis_impl_(sa: *mut f32, sb: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().srotg_blis_impl_.unwrap()(sa, sb, c, s)
}

pub unsafe fn SROTG_BLIS_IMPL_(sa: *mut f32, sb: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().SROTG_BLIS_IMPL_.unwrap()(sa, sb, c, s)
}

pub unsafe fn SROTMG_BLIS_IMPL(
    sd1: *mut f32,
    sd2: *mut f32,
    sx1: *mut f32,
    sy1: *const f32,
    sparam: *mut f32,
) {
    dyload_lib().SROTMG_BLIS_IMPL.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn srotmg_blis_impl_(
    sd1: *mut f32,
    sd2: *mut f32,
    sx1: *mut f32,
    sy1: *const f32,
    sparam: *mut f32,
) {
    dyload_lib().srotmg_blis_impl_.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn SROTMG_BLIS_IMPL_(
    sd1: *mut f32,
    sd2: *mut f32,
    sx1: *mut f32,
    sy1: *const f32,
    sparam: *mut f32,
) {
    dyload_lib().SROTMG_BLIS_IMPL_.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn SROT_BLIS_IMPL(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().SROT_BLIS_IMPL.unwrap()(n, sx, incx, sy, incy, c, s)
}

pub unsafe fn srot_blis_impl_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().srot_blis_impl_.unwrap()(n, sx, incx, sy, incy, c, s)
}

pub unsafe fn SROT_BLIS_IMPL_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().SROT_BLIS_IMPL_.unwrap()(n, sx, incx, sy, incy, c, s)
}

pub unsafe fn SROTM_BLIS_IMPL(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    sparam: *const f32,
) {
    dyload_lib().SROTM_BLIS_IMPL.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn srotm_blis_impl_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    sparam: *const f32,
) {
    dyload_lib().srotm_blis_impl_.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn SROTM_BLIS_IMPL_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
    sparam: *const f32,
) {
    dyload_lib().SROTM_BLIS_IMPL_.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn SSWAP_BLIS_IMPL(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSWAP_BLIS_IMPL.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn sswap_blis_impl_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sswap_blis_impl_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SSWAP_BLIS_IMPL_(
    n: *const f77_int,
    sx: *mut f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSWAP_BLIS_IMPL_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SSCAL_BLIS_IMPL(
    n: *const f77_int,
    sa: *const f32,
    sx: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().SSCAL_BLIS_IMPL.unwrap()(n, sa, sx, incx)
}

pub unsafe fn sscal_blis_impl_(
    n: *const f77_int,
    sa: *const f32,
    sx: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().sscal_blis_impl_.unwrap()(n, sa, sx, incx)
}

pub unsafe fn SSCAL_BLIS_IMPL_(
    n: *const f77_int,
    sa: *const f32,
    sx: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().SSCAL_BLIS_IMPL_.unwrap()(n, sa, sx, incx)
}

pub unsafe fn SCOPY_BLIS_IMPL(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SCOPY_BLIS_IMPL.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn scopy_blis_impl_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().scopy_blis_impl_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SCOPY_BLIS_IMPL_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SCOPY_BLIS_IMPL_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SAXPY_BLIS_IMPL(
    n: *const f77_int,
    sa: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPY_BLIS_IMPL.unwrap()(n, sa, sx, incx, sy, incy)
}

pub unsafe fn saxpy_blis_impl_(
    n: *const f77_int,
    sa: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpy_blis_impl_.unwrap()(n, sa, sx, incx, sy, incy)
}

pub unsafe fn SAXPY_BLIS_IMPL_(
    n: *const f77_int,
    sa: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPY_BLIS_IMPL_.unwrap()(n, sa, sx, incx, sy, incy)
}

pub unsafe fn SDOT_BLIS_IMPL(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDOT_BLIS_IMPL.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn sdot_blis_impl_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdot_blis_impl_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SDOT_BLIS_IMPL_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDOT_BLIS_IMPL_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn SDSDOT_BLIS_IMPL(
    n: *const f77_int,
    sb: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDSDOT_BLIS_IMPL.unwrap()(n, sb, sx, incx, sy, incy)
}

pub unsafe fn sdsdot_blis_impl_(
    n: *const f77_int,
    sb: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdsdot_blis_impl_.unwrap()(n, sb, sx, incx, sy, incy)
}

pub unsafe fn SDSDOT_BLIS_IMPL_(
    n: *const f77_int,
    sb: *const f32,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().SDSDOT_BLIS_IMPL_.unwrap()(n, sb, sx, incx, sy, incy)
}

pub unsafe fn SNRM2_BLIS_IMPL(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SNRM2_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn snrm2_blis_impl_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().snrm2_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn SNRM2_BLIS_IMPL_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SNRM2_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn SCNRM2_BLIS_IMPL(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().SCNRM2_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn scnrm2_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f32 {
    dyload_lib().scnrm2_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn SCNRM2_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f32 {
    dyload_lib().SCNRM2_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn SASUM_BLIS_IMPL(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SASUM_BLIS_IMPL.unwrap()(n, sx, incx)
}

pub unsafe fn sasum_blis_impl_(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().sasum_blis_impl_.unwrap()(n, sx, incx)
}

pub unsafe fn SASUM_BLIS_IMPL_(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().SASUM_BLIS_IMPL_.unwrap()(n, sx, incx)
}

pub unsafe fn ISAMAX_BLIS_IMPL(n: *const f77_int, sx: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMAX_BLIS_IMPL.unwrap()(n, sx, incx)
}

pub unsafe fn isamax_blis_impl_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().isamax_blis_impl_.unwrap()(n, sx, incx)
}

pub unsafe fn ISAMAX_BLIS_IMPL_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().ISAMAX_BLIS_IMPL_.unwrap()(n, sx, incx)
}

pub unsafe fn DROTG_BLIS_IMPL(da: *mut f64, db: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().DROTG_BLIS_IMPL.unwrap()(da, db, c, s)
}

pub unsafe fn drotg_blis_impl_(da: *mut f64, db: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().drotg_blis_impl_.unwrap()(da, db, c, s)
}

pub unsafe fn DROTG_BLIS_IMPL_(da: *mut f64, db: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().DROTG_BLIS_IMPL_.unwrap()(da, db, c, s)
}

pub unsafe fn DROTMG_BLIS_IMPL(
    dd1: *mut f64,
    dd2: *mut f64,
    dx1: *mut f64,
    dy1: *const f64,
    dparam: *mut f64,
) {
    dyload_lib().DROTMG_BLIS_IMPL.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn drotmg_blis_impl_(
    dd1: *mut f64,
    dd2: *mut f64,
    dx1: *mut f64,
    dy1: *const f64,
    dparam: *mut f64,
) {
    dyload_lib().drotmg_blis_impl_.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn DROTMG_BLIS_IMPL_(
    dd1: *mut f64,
    dd2: *mut f64,
    dx1: *mut f64,
    dy1: *const f64,
    dparam: *mut f64,
) {
    dyload_lib().DROTMG_BLIS_IMPL_.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn DROT_BLIS_IMPL(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().DROT_BLIS_IMPL.unwrap()(n, dx, incx, dy, incy, c, s)
}

pub unsafe fn drot_blis_impl_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().drot_blis_impl_.unwrap()(n, dx, incx, dy, incy, c, s)
}

pub unsafe fn DROT_BLIS_IMPL_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().DROT_BLIS_IMPL_.unwrap()(n, dx, incx, dy, incy, c, s)
}

pub unsafe fn DROTM_BLIS_IMPL(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    dparam: *const f64,
) {
    dyload_lib().DROTM_BLIS_IMPL.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn drotm_blis_impl_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    dparam: *const f64,
) {
    dyload_lib().drotm_blis_impl_.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn DROTM_BLIS_IMPL_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
    dparam: *const f64,
) {
    dyload_lib().DROTM_BLIS_IMPL_.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn DSWAP_BLIS_IMPL(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSWAP_BLIS_IMPL.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn dswap_blis_impl_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dswap_blis_impl_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DSWAP_BLIS_IMPL_(
    n: *const f77_int,
    dx: *mut f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSWAP_BLIS_IMPL_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DSCAL_BLIS_IMPL(
    n: *const f77_int,
    da: *const f64,
    dx: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DSCAL_BLIS_IMPL.unwrap()(n, da, dx, incx)
}

pub unsafe fn dscal_blis_impl_(
    n: *const f77_int,
    da: *const f64,
    dx: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dscal_blis_impl_.unwrap()(n, da, dx, incx)
}

pub unsafe fn DSCAL_BLIS_IMPL_(
    n: *const f77_int,
    da: *const f64,
    dx: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DSCAL_BLIS_IMPL_.unwrap()(n, da, dx, incx)
}

pub unsafe fn DCOPY_BLIS_IMPL(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DCOPY_BLIS_IMPL.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn dcopy_blis_impl_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dcopy_blis_impl_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DCOPY_BLIS_IMPL_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DCOPY_BLIS_IMPL_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DAXPY_BLIS_IMPL(
    n: *const f77_int,
    da: *const f64,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPY_BLIS_IMPL.unwrap()(n, da, dx, incx, dy, incy)
}

pub unsafe fn daxpy_blis_impl_(
    n: *const f77_int,
    da: *const f64,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpy_blis_impl_.unwrap()(n, da, dx, incx, dy, incy)
}

pub unsafe fn DAXPY_BLIS_IMPL_(
    n: *const f77_int,
    da: *const f64,
    dx: *const f64,
    incx: *const f77_int,
    dy: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPY_BLIS_IMPL_.unwrap()(n, da, dx, incx, dy, incy)
}

pub unsafe fn DDOT_BLIS_IMPL(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DDOT_BLIS_IMPL.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn ddot_blis_impl_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().ddot_blis_impl_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DDOT_BLIS_IMPL_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
    dy: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DDOT_BLIS_IMPL_.unwrap()(n, dx, incx, dy, incy)
}

pub unsafe fn DSDOT_BLIS_IMPL(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DSDOT_BLIS_IMPL.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn dsdot_blis_impl_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().dsdot_blis_impl_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn DSDOT_BLIS_IMPL_(
    n: *const f77_int,
    sx: *const f32,
    incx: *const f77_int,
    sy: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().DSDOT_BLIS_IMPL_.unwrap()(n, sx, incx, sy, incy)
}

pub unsafe fn DNRM2_BLIS_IMPL(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DNRM2_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn dnrm2_blis_impl_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dnrm2_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn DNRM2_BLIS_IMPL_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DNRM2_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn DZNRM2_BLIS_IMPL(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().DZNRM2_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn dznrm2_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f64 {
    dyload_lib().dznrm2_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn DZNRM2_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f64 {
    dyload_lib().DZNRM2_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn DASUM_BLIS_IMPL(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DASUM_BLIS_IMPL.unwrap()(n, dx, incx)
}

pub unsafe fn dasum_blis_impl_(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dasum_blis_impl_.unwrap()(n, dx, incx)
}

pub unsafe fn DASUM_BLIS_IMPL_(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().DASUM_BLIS_IMPL_.unwrap()(n, dx, incx)
}

pub unsafe fn IDAMAX_BLIS_IMPL(n: *const f77_int, dx: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMAX_BLIS_IMPL.unwrap()(n, dx, incx)
}

pub unsafe fn idamax_blis_impl_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().idamax_blis_impl_.unwrap()(n, dx, incx)
}

pub unsafe fn IDAMAX_BLIS_IMPL_(
    n: *const f77_int,
    dx: *const f64,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().IDAMAX_BLIS_IMPL_.unwrap()(n, dx, incx)
}

pub unsafe fn CROTG_BLIS_IMPL(
    ca: *mut scomplex,
    cb: *mut bla_scomplex,
    c: *mut bla_real,
    s: *mut scomplex,
) {
    dyload_lib().CROTG_BLIS_IMPL.unwrap()(ca, cb, c, s)
}

pub unsafe fn crotg_blis_impl_(
    ca: *mut scomplex,
    cb: *mut bla_scomplex,
    c: *mut bla_real,
    s: *mut scomplex,
) {
    dyload_lib().crotg_blis_impl_.unwrap()(ca, cb, c, s)
}

pub unsafe fn CROTG_BLIS_IMPL_(
    ca: *mut scomplex,
    cb: *mut bla_scomplex,
    c: *mut bla_real,
    s: *mut scomplex,
) {
    dyload_lib().CROTG_BLIS_IMPL_.unwrap()(ca, cb, c, s)
}

pub unsafe fn CSROT_BLIS_IMPL(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().CSROT_BLIS_IMPL.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn csrot_blis_impl_(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().csrot_blis_impl_.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn CSROT_BLIS_IMPL_(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
    c: *const f32,
    s: *const f32,
) {
    dyload_lib().CSROT_BLIS_IMPL_.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn CSWAP_BLIS_IMPL(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CSWAP_BLIS_IMPL.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn cswap_blis_impl_(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cswap_blis_impl_.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CSWAP_BLIS_IMPL_(
    n: *const f77_int,
    cx: *mut scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CSWAP_BLIS_IMPL_.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CSCAL_BLIS_IMPL(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CSCAL_BLIS_IMPL.unwrap()(n, ca, cx, incx)
}

pub unsafe fn cscal_blis_impl_(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().cscal_blis_impl_.unwrap()(n, ca, cx, incx)
}

pub unsafe fn CSCAL_BLIS_IMPL_(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CSCAL_BLIS_IMPL_.unwrap()(n, ca, cx, incx)
}

pub unsafe fn CSSCAL_BLIS_IMPL(
    n: *const f77_int,
    sa: *const f32,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CSSCAL_BLIS_IMPL.unwrap()(n, sa, cx, incx)
}

pub unsafe fn csscal_blis_impl_(
    n: *const f77_int,
    sa: *const f32,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().csscal_blis_impl_.unwrap()(n, sa, cx, incx)
}

pub unsafe fn CSSCAL_BLIS_IMPL_(
    n: *const f77_int,
    sa: *const f32,
    cx: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CSSCAL_BLIS_IMPL_.unwrap()(n, sa, cx, incx)
}

pub unsafe fn CCOPY_BLIS_IMPL(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CCOPY_BLIS_IMPL.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn ccopy_blis_impl_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().ccopy_blis_impl_.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CCOPY_BLIS_IMPL_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CCOPY_BLIS_IMPL_.unwrap()(n, cx, incx, cy, incy)
}

pub unsafe fn CAXPY_BLIS_IMPL(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPY_BLIS_IMPL.unwrap()(n, ca, cx, incx, cy, incy)
}

pub unsafe fn caxpy_blis_impl_(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpy_blis_impl_.unwrap()(n, ca, cx, incx, cy, incy)
}

pub unsafe fn CAXPY_BLIS_IMPL_(
    n: *const f77_int,
    ca: *const scomplex,
    cx: *const scomplex,
    incx: *const f77_int,
    cy: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPY_BLIS_IMPL_.unwrap()(n, ca, cx, incx, cy, incy)
}

pub unsafe fn CDOTC_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTC_BLIS_IMPL.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotc_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotc_blis_impl_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn CDOTC_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTC_BLIS_IMPL_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn CDOTU_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTU_BLIS_IMPL.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotu_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotu_blis_impl_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn CDOTU_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().CDOTU_BLIS_IMPL_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTC_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTC_BLIS_IMPL.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotc_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotc_blis_impl_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTC_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTC_BLIS_IMPL_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTU_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTU_BLIS_IMPL.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotu_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotu_blis_impl_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ZDOTU_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().ZDOTU_BLIS_IMPL_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn SCASUM_BLIS_IMPL(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
) -> f32 {
    dyload_lib().SCASUM_BLIS_IMPL.unwrap()(n, cx, incx)
}

pub unsafe fn scasum_blis_impl_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
) -> f32 {
    dyload_lib().scasum_blis_impl_.unwrap()(n, cx, incx)
}

pub unsafe fn SCASUM_BLIS_IMPL_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
) -> f32 {
    dyload_lib().SCASUM_BLIS_IMPL_.unwrap()(n, cx, incx)
}

pub unsafe fn ICAMAX_BLIS_IMPL(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().ICAMAX_BLIS_IMPL.unwrap()(n, cx, incx)
}

pub unsafe fn icamax_blis_impl_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().icamax_blis_impl_.unwrap()(n, cx, incx)
}

pub unsafe fn ICAMAX_BLIS_IMPL_(
    n: *const f77_int,
    cx: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().ICAMAX_BLIS_IMPL_.unwrap()(n, cx, incx)
}

pub unsafe fn ZROTG_BLIS_IMPL(
    ca: *mut dcomplex,
    cb: *mut bla_dcomplex,
    c: *mut bla_double,
    s: *mut dcomplex,
) {
    dyload_lib().ZROTG_BLIS_IMPL.unwrap()(ca, cb, c, s)
}

pub unsafe fn zrotg_blis_impl_(
    ca: *mut dcomplex,
    cb: *mut bla_dcomplex,
    c: *mut bla_double,
    s: *mut dcomplex,
) {
    dyload_lib().zrotg_blis_impl_.unwrap()(ca, cb, c, s)
}

pub unsafe fn ZROTG_BLIS_IMPL_(
    ca: *mut dcomplex,
    cb: *mut bla_dcomplex,
    c: *mut bla_double,
    s: *mut dcomplex,
) {
    dyload_lib().ZROTG_BLIS_IMPL_.unwrap()(ca, cb, c, s)
}

pub unsafe fn ZDROT_BLIS_IMPL(
    n: *const f77_int,
    cx: *mut dcomplex,
    incx: *const f77_int,
    cy: *mut dcomplex,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().ZDROT_BLIS_IMPL.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn zdrot_blis_impl_(
    n: *const f77_int,
    cx: *mut dcomplex,
    incx: *const f77_int,
    cy: *mut dcomplex,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().zdrot_blis_impl_.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn ZDROT_BLIS_IMPL_(
    n: *const f77_int,
    cx: *mut dcomplex,
    incx: *const f77_int,
    cy: *mut dcomplex,
    incy: *const f77_int,
    c: *const f64,
    s: *const f64,
) {
    dyload_lib().ZDROT_BLIS_IMPL_.unwrap()(n, cx, incx, cy, incy, c, s)
}

pub unsafe fn ZSWAP_BLIS_IMPL(
    n: *const f77_int,
    zx: *mut dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZSWAP_BLIS_IMPL.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn zswap_blis_impl_(
    n: *const f77_int,
    zx: *mut dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zswap_blis_impl_.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZSWAP_BLIS_IMPL_(
    n: *const f77_int,
    zx: *mut dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZSWAP_BLIS_IMPL_.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZSCAL_BLIS_IMPL(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZSCAL_BLIS_IMPL.unwrap()(n, za, zx, incx)
}

pub unsafe fn zscal_blis_impl_(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zscal_blis_impl_.unwrap()(n, za, zx, incx)
}

pub unsafe fn ZSCAL_BLIS_IMPL_(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZSCAL_BLIS_IMPL_.unwrap()(n, za, zx, incx)
}

pub unsafe fn ZDSCAL_BLIS_IMPL(
    n: *const f77_int,
    da: *const f64,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZDSCAL_BLIS_IMPL.unwrap()(n, da, zx, incx)
}

pub unsafe fn zdscal_blis_impl_(
    n: *const f77_int,
    da: *const f64,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zdscal_blis_impl_.unwrap()(n, da, zx, incx)
}

pub unsafe fn ZDSCAL_BLIS_IMPL_(
    n: *const f77_int,
    da: *const f64,
    zx: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZDSCAL_BLIS_IMPL_.unwrap()(n, da, zx, incx)
}

pub unsafe fn ZCOPY_BLIS_IMPL(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZCOPY_BLIS_IMPL.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn zcopy_blis_impl_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zcopy_blis_impl_.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZCOPY_BLIS_IMPL_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZCOPY_BLIS_IMPL_.unwrap()(n, zx, incx, zy, incy)
}

pub unsafe fn ZAXPY_BLIS_IMPL(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPY_BLIS_IMPL.unwrap()(n, za, zx, incx, zy, incy)
}

pub unsafe fn zaxpy_blis_impl_(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpy_blis_impl_.unwrap()(n, za, zx, incx, zy, incy)
}

pub unsafe fn ZAXPY_BLIS_IMPL_(
    n: *const f77_int,
    za: *const dcomplex,
    zx: *const dcomplex,
    incx: *const f77_int,
    zy: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPY_BLIS_IMPL_.unwrap()(n, za, zx, incx, zy, incy)
}

pub unsafe fn DZASUM_BLIS_IMPL(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
) -> f64 {
    dyload_lib().DZASUM_BLIS_IMPL.unwrap()(n, zx, incx)
}

pub unsafe fn dzasum_blis_impl_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
) -> f64 {
    dyload_lib().dzasum_blis_impl_.unwrap()(n, zx, incx)
}

pub unsafe fn DZASUM_BLIS_IMPL_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
) -> f64 {
    dyload_lib().DZASUM_BLIS_IMPL_.unwrap()(n, zx, incx)
}

pub unsafe fn IZAMAX_BLIS_IMPL(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().IZAMAX_BLIS_IMPL.unwrap()(n, zx, incx)
}

pub unsafe fn izamax_blis_impl_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().izamax_blis_impl_.unwrap()(n, zx, incx)
}

pub unsafe fn IZAMAX_BLIS_IMPL_(
    n: *const f77_int,
    zx: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().IZAMAX_BLIS_IMPL_.unwrap()(n, zx, incx)
}

pub unsafe fn ICAMIN_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().ICAMIN_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn icamin_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().icamin_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn ICAMIN_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().ICAMIN_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn IDAMIN_BLIS_IMPL(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMIN_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn idamin_blis_impl_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamin_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn IDAMIN_BLIS_IMPL_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().IDAMIN_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn ISAMIN_BLIS_IMPL(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMIN_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn isamin_blis_impl_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamin_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn ISAMIN_BLIS_IMPL_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().ISAMIN_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn IZAMIN_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().IZAMIN_BLIS_IMPL.unwrap()(n, x, incx)
}

pub unsafe fn izamin_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().izamin_blis_impl_.unwrap()(n, x, incx)
}

pub unsafe fn IZAMIN_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().IZAMIN_BLIS_IMPL_.unwrap()(n, x, incx)
}

pub unsafe fn SGEMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGEMV_BLIS_IMPL.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sgemv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sgemv_blis_impl_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SGEMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGEMV_BLIS_IMPL_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SGBMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGBMV_BLIS_IMPL.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn sgbmv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sgbmv_blis_impl_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn SGBMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SGBMV_BLIS_IMPL_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn SSYMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSYMV_BLIS_IMPL.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssymv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().ssymv_blis_impl_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSYMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSYMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSBMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSBMV_BLIS_IMPL.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssbmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().ssbmv_blis_impl_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSBMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSBMV_BLIS_IMPL_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn SSPMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    ap: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSPMV_BLIS_IMPL.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn sspmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    ap: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sspmv_blis_impl_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn SSPMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    ap: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SSPMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn STRMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn strmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strmv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STRMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STBMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stbmv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STBMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STPMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stpmv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn STPMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn STRSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn strsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strsv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STRSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STRSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn STBSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stbsv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STBSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STBSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn STPSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().stpsv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn STPSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().STPSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn SGER_BLIS_IMPL(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SGER_BLIS_IMPL.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn sger_blis_impl_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().sger_blis_impl_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SGER_BLIS_IMPL_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SGER_BLIS_IMPL_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SSYR_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ssyr_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr_blis_impl_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn SSYR_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn SSPR_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn sspr_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().sspr_blis_impl_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn SSPR_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn SSYR2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ssyr2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SSYR2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().SSYR2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn SSPR2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn sspr2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().sspr2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn SSPR2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    ap: *mut f32,
) {
    dyload_lib().SSPR2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn DGEMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGEMV_BLIS_IMPL.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgemv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dgemv_blis_impl_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DGEMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGEMV_BLIS_IMPL_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DGBMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGBMV_BLIS_IMPL.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn dgbmv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dgbmv_blis_impl_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn DGBMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DGBMV_BLIS_IMPL_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn DSYMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSYMV_BLIS_IMPL.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsymv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dsymv_blis_impl_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSYMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSYMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSBMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSBMV_BLIS_IMPL.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsbmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dsbmv_blis_impl_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSBMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSBMV_BLIS_IMPL_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn DSPMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    ap: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSPMV_BLIS_IMPL.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn dspmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    ap: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dspmv_blis_impl_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn DSPMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    ap: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DSPMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn DTRMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn dtrmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrmv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTRMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTBMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtbmv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTBMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTPMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtpmv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DTPMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DTRSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn dtrsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrsv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTRSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTRSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn DTBSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtbsv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTBSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTBSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn DTPSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtpsv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DTPSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().DTPSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn DGER_BLIS_IMPL(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DGER_BLIS_IMPL.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dger_blis_impl_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dger_blis_impl_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DGER_BLIS_IMPL_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DGER_BLIS_IMPL_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DSYR_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn dsyr_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr_blis_impl_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn DSYR_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn DSPR_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn dspr_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().dspr_blis_impl_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn DSPR_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn DSYR2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dsyr2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DSYR2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().DSYR2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn DSPR2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn dspr2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().dspr2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn DSPR2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    ap: *mut f64,
) {
    dyload_lib().DSPR2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn CGEMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGEMV_BLIS_IMPL.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgemv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cgemv_blis_impl_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CGEMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGEMV_BLIS_IMPL_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CGBMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGBMV_BLIS_IMPL.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn cgbmv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cgbmv_blis_impl_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn CGBMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CGBMV_BLIS_IMPL_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn CHEMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHEMV_BLIS_IMPL.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn chemv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chemv_blis_impl_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHEMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHEMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHBMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHBMV_BLIS_IMPL.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn chbmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chbmv_blis_impl_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHBMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHBMV_BLIS_IMPL_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn CHPMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    ap: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHPMV_BLIS_IMPL.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn chpmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    ap: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chpmv_blis_impl_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn CHPMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    ap: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CHPMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn CTRMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ctrmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrmv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTRMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTBMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctbmv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTBMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTPMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctpmv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CTPMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CTRSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ctrsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrsv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTRSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTRSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn CTBSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctbsv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTBSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTBSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn CTPSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctpsv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CTPSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().CTPSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn CGERC_BLIS_IMPL(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERC_BLIS_IMPL.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgerc_blis_impl_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgerc_blis_impl_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CGERC_BLIS_IMPL_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERC_BLIS_IMPL_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CGERU_BLIS_IMPL(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERU_BLIS_IMPL.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgeru_blis_impl_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgeru_blis_impl_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CGERU_BLIS_IMPL_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CGERU_BLIS_IMPL_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CHER_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn cher_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher_blis_impl_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn CHER_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn CHPR_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn chpr_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().chpr_blis_impl_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn CHPR_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn CHER2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cher2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CHER2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().CHER2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn CHPR2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn chpr2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().chpr2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn CHPR2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    ap: *mut scomplex,
) {
    dyload_lib().CHPR2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn ZGEMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGEMV_BLIS_IMPL.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgemv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zgemv_blis_impl_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZGEMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGEMV_BLIS_IMPL_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZGBMV_BLIS_IMPL(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGBMV_BLIS_IMPL.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn zgbmv_blis_impl_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zgbmv_blis_impl_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn ZGBMV_BLIS_IMPL_(
    trans: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    kl: *const f77_int,
    ku: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZGBMV_BLIS_IMPL_.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn ZHEMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHEMV_BLIS_IMPL.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhemv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhemv_blis_impl_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHEMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHEMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHBMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHBMV_BLIS_IMPL.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhbmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhbmv_blis_impl_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHBMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHBMV_BLIS_IMPL_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ZHPMV_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    ap: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHPMV_BLIS_IMPL.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn zhpmv_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    ap: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhpmv_blis_impl_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn ZHPMV_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    ap: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZHPMV_BLIS_IMPL_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn ZTRMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ztrmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrmv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTRMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTBMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztbmv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTBMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTPMV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPMV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpmv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztpmv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZTPMV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPMV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZTRSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ztrsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrsv_blis_impl_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTRSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTRSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, a, lda, x, incx)
}

pub unsafe fn ZTBSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztbsv_blis_impl_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTBSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTBSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ZTPSV_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPSV_BLIS_IMPL.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpsv_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztpsv_blis_impl_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZTPSV_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    diag: *const c_char,
    n: *const f77_int,
    ap: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ZTPSV_BLIS_IMPL_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ZGERU_BLIS_IMPL(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERU_BLIS_IMPL.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgeru_blis_impl_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgeru_blis_impl_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZGERU_BLIS_IMPL_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERU_BLIS_IMPL_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZGERC_BLIS_IMPL(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERC_BLIS_IMPL.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgerc_blis_impl_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgerc_blis_impl_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZGERC_BLIS_IMPL_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZGERC_BLIS_IMPL_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZHER_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn zher_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher_blis_impl_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ZHER_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, a, lda)
}

pub unsafe fn ZHPR_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const bla_double,
    x: *const dcomplex,
    incx: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn zhpr_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const bla_double,
    x: *const dcomplex,
    incx: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().zhpr_blis_impl_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn ZHPR_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const bla_double,
    x: *const dcomplex,
    incx: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn ZHER2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zher2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZHER2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().ZHER2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ZHPR2_BLIS_IMPL(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR2_BLIS_IMPL.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn zhpr2_blis_impl_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().zhpr2_blis_impl_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn ZHPR2_BLIS_IMPL_(
    uplo: *const c_char,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    ap: *mut dcomplex,
) {
    dyload_lib().ZHPR2_BLIS_IMPL_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn SGEMM_BLIS_IMPL(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn sgemm_blis_impl_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn SGEMM_BLIS_IMPL_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn SSYMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYMM_BLIS_IMPL.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssymm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssymm_blis_impl_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYMM_BLIS_IMPL_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYRK_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYRK_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ssyrk_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyrk_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn SSYRK_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYRK_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn SSYR2K_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYR2K_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssyr2k_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyr2k_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn SSYR2K_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SSYR2K_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn STRMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRMM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strmm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strmm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn STRMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRMM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn STRSM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRSM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strsm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strsm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn STRSM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().STRSM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DGEMM_BLIS_IMPL(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dgemm_blis_impl_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DGEMM_BLIS_IMPL_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DZGEMM_BLIS_IMPL(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().DZGEMM_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dzgemm_blis_impl_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().dzgemm_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DZGEMM_BLIS_IMPL_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().DZGEMM_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DSYMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYMM_BLIS_IMPL.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsymm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsymm_blis_impl_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYMM_BLIS_IMPL_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYRK_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYRK_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn dsyrk_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyrk_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn DSYRK_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYRK_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn DSYR2K_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYR2K_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsyr2k_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyr2k_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DSYR2K_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DSYR2K_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn DTRMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRMM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrmm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrmm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DTRMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRMM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DTRSM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRSM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrsm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrsm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn DTRSM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().DTRSM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CGEMM_BLIS_IMPL(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn cgemm_blis_impl_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn CGEMM_BLIS_IMPL_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn CSYMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYMM_BLIS_IMPL.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csymm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csymm_blis_impl_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYMM_BLIS_IMPL_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHEMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHEMM_BLIS_IMPL.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn chemm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().chemm_blis_impl_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHEMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHEMM_BLIS_IMPL_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYRK_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYRK_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn csyrk_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyrk_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CSYRK_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYRK_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CHERK_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHERK_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn cherk_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cherk_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CHERK_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHERK_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn CSYR2K_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYR2K_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csyr2k_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyr2k_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CSYR2K_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CSYR2K_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHER2K_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHER2K_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cher2k_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cher2k_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CHER2K_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CHER2K_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn CTRMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRMM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrmm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrmm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CTRMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRMM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CTRSM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRSM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrsm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrsm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CTRSM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().CTRSM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZGEMM_BLIS_IMPL(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn zgemm_blis_impl_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn ZGEMM_BLIS_IMPL_(
    transa: *const c_char,
    transb: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn ZSYMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYMM_BLIS_IMPL.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsymm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsymm_blis_impl_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYMM_BLIS_IMPL_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHEMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHEMM_BLIS_IMPL.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zhemm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zhemm_blis_impl_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHEMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHEMM_BLIS_IMPL_.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYRK_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYRK_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zsyrk_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyrk_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZSYRK_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYRK_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZHERK_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHERK_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zherk_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zherk_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZHERK_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHERK_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ZSYR2K_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYR2K_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsyr2k_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyr2k_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZSYR2K_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZSYR2K_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHER2K_BLIS_IMPL(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHER2K_BLIS_IMPL.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zher2k_blis_impl_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zher2k_blis_impl_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZHER2K_BLIS_IMPL_(
    uplo: *const c_char,
    trans: *const c_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZHER2K_BLIS_IMPL_.unwrap()(uplo, trans, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ZTRMM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRMM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrmm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrmm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZTRMM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRMM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZTRSM_BLIS_IMPL(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRSM_BLIS_IMPL.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrsm_blis_impl_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrsm_blis_impl_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ZTRSM_BLIS_IMPL_(
    side: *const c_char,
    uplo: *const c_char,
    transa: *const c_char,
    diag: *const c_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ZTRSM_BLIS_IMPL_.unwrap()(side, uplo, transa, diag, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn CDOTCSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTCSUB_BLIS_IMPL.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn cdotcsub_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotcsub_blis_impl_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn CDOTCSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTCSUB_BLIS_IMPL_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn CDOTUSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incxy: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTUSUB_BLIS_IMPL.unwrap()(n, x, incxy, y, incy, rval)
}

pub unsafe fn cdotusub_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incxy: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotusub_blis_impl_.unwrap()(n, x, incxy, y, incy, rval)
}

pub unsafe fn CDOTUSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incxy: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().CDOTUSUB_BLIS_IMPL_.unwrap()(n, x, incxy, y, incy, rval)
}

pub unsafe fn DASUMSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DASUMSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn dasumsub_blis_impl_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dasumsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DASUMSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DASUMSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DDOTSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DDOTSUB_BLIS_IMPL.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ddotsub_blis_impl_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().ddotsub_blis_impl_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn DDOTSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DDOTSUB_BLIS_IMPL_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn DNRM2SUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DNRM2SUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn dnrm2sub_blis_impl_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dnrm2sub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DNRM2SUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DNRM2SUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZASUMSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZASUMSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn dzasumsub_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dzasumsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZASUMSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZASUMSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZNRM2SUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZNRM2SUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn dznrm2sub_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dznrm2sub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn DZNRM2SUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().DZNRM2SUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMAXSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMAXSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn icamaxsub_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icamaxsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMAXSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMAXSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMINSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMINSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn icaminsub_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icaminsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ICAMINSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ICAMINSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMAXSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMAXSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn idamaxsub_blis_impl_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idamaxsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMAXSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMAXSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMINSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMINSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn idaminsub_blis_impl_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idaminsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IDAMINSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IDAMINSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMAXSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMAXSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn isamaxsub_blis_impl_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isamaxsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMAXSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMAXSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMINSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMINSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn isaminsub_blis_impl_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isaminsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ISAMINSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().ISAMINSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMINSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMINSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn izaminsub_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izaminsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMINSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMINSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMAXSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMAXSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn izamaxsub_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izamaxsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn IZAMAXSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().IZAMAXSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SASUMSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SASUMSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn sasumsub_blis_impl_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sasumsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SASUMSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SASUMSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCASUMSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCASUMSUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn scasumsub_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scasumsub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCASUMSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCASUMSUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCNRM2SUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCNRM2SUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn scnrm2sub_blis_impl_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scnrm2sub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SCNRM2SUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SCNRM2SUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SDOTSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SDOTSUB_BLIS_IMPL.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn sdotsub_blis_impl_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sdotsub_blis_impl_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn SDOTSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SDOTSUB_BLIS_IMPL_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn SNRM2SUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SNRM2SUB_BLIS_IMPL.unwrap()(n, x, incx, rval)
}

pub unsafe fn snrm2sub_blis_impl_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().snrm2sub_blis_impl_.unwrap()(n, x, incx, rval)
}

pub unsafe fn SNRM2SUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().SNRM2SUB_BLIS_IMPL_.unwrap()(n, x, incx, rval)
}

pub unsafe fn ZDOTCSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTCSUB_BLIS_IMPL.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotcsub_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotcsub_blis_impl_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ZDOTCSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTCSUB_BLIS_IMPL_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ZDOTUSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTUSUB_BLIS_IMPL.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotusub_blis_impl_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotusub_blis_impl_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ZDOTUSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().ZDOTUSUB_BLIS_IMPL_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn SDSDOTSUB_BLIS_IMPL(
    n: *const f77_int,
    sb: *mut f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f32,
) {
    dyload_lib().SDSDOTSUB_BLIS_IMPL.unwrap()(n, sb, x, incx, y, incy, dot)
}

pub unsafe fn sdsdotsub_blis_impl_(
    n: *const f77_int,
    sb: *mut f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f32,
) {
    dyload_lib().sdsdotsub_blis_impl_.unwrap()(n, sb, x, incx, y, incy, dot)
}

pub unsafe fn SDSDOTSUB_BLIS_IMPL_(
    n: *const f77_int,
    sb: *mut f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f32,
) {
    dyload_lib().SDSDOTSUB_BLIS_IMPL_.unwrap()(n, sb, x, incx, y, incy, dot)
}

pub unsafe fn DSDOTSUB_BLIS_IMPL(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f64,
) {
    dyload_lib().DSDOTSUB_BLIS_IMPL.unwrap()(n, x, incx, y, incy, dot)
}

pub unsafe fn dsdotsub_blis_impl_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f64,
) {
    dyload_lib().dsdotsub_blis_impl_.unwrap()(n, x, incx, y, incy, dot)
}

pub unsafe fn DSDOTSUB_BLIS_IMPL_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    dot: *mut f64,
) {
    dyload_lib().DSDOTSUB_BLIS_IMPL_.unwrap()(n, x, incx, y, incy, dot)
}

pub unsafe fn LSAME_BLIS_IMPL(
    ca: *const c_char,
    cb: *const c_char,
    a: f77_int,
    b: f77_int,
) -> f77_int {
    dyload_lib().LSAME_BLIS_IMPL.unwrap()(ca, cb, a, b)
}

pub unsafe fn lsame_blis_impl_(
    ca: *const c_char,
    cb: *const c_char,
    a: f77_int,
    b: f77_int,
) -> f77_int {
    dyload_lib().lsame_blis_impl_.unwrap()(ca, cb, a, b)
}

pub unsafe fn LSAME_BLIS_IMPL_(
    ca: *const c_char,
    cb: *const c_char,
    a: f77_int,
    b: f77_int,
) -> f77_int {
    dyload_lib().LSAME_BLIS_IMPL_.unwrap()(ca, cb, a, b)
}

pub unsafe fn XERBLA_BLIS_IMPL(srname: *const c_char, info: *const f77_int, n: ftnlen) {
    dyload_lib().XERBLA_BLIS_IMPL.unwrap()(srname, info, n)
}

pub unsafe fn xerbla_blis_impl_(srname: *const c_char, info: *const f77_int, n: ftnlen) {
    dyload_lib().xerbla_blis_impl_.unwrap()(srname, info, n)
}

pub unsafe fn XERBLA_BLIS_IMPL_(srname: *const c_char, info: *const f77_int, n: ftnlen) {
    dyload_lib().XERBLA_BLIS_IMPL_.unwrap()(srname, info, n)
}

pub unsafe fn DCABS1_BLIS_IMPL(z: *mut bla_dcomplex) -> f64 {
    dyload_lib().DCABS1_BLIS_IMPL.unwrap()(z)
}

pub unsafe fn dcabs1_blis_impl_(z: *mut bla_dcomplex) -> f64 {
    dyload_lib().dcabs1_blis_impl_.unwrap()(z)
}

pub unsafe fn DCABS1_BLIS_IMPL_(z: *mut bla_dcomplex) -> f64 {
    dyload_lib().DCABS1_BLIS_IMPL_.unwrap()(z)
}

pub unsafe fn SCABS1_BLIS_IMPL(z: *mut bla_scomplex) -> f32 {
    dyload_lib().SCABS1_BLIS_IMPL.unwrap()(z)
}

pub unsafe fn scabs1_blis_impl_(z: *mut bla_scomplex) -> f32 {
    dyload_lib().scabs1_blis_impl_.unwrap()(z)
}

pub unsafe fn SCABS1_BLIS_IMPL_(z: *mut bla_scomplex) -> f32 {
    dyload_lib().SCABS1_BLIS_IMPL_.unwrap()(z)
}

pub unsafe fn CAXPBY_BLIS_IMPL(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPBY_BLIS_IMPL.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn caxpby_blis_impl_(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpby_blis_impl_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn CAXPBY_BLIS_IMPL_(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().CAXPBY_BLIS_IMPL_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn CGEMM3M_BLIS_IMPL(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM3M_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn cgemm3m_blis_impl_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm3m_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn CGEMM3M_BLIS_IMPL_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMM3M_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn CGEMM_BATCH_BLIS_IMPL(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().CGEMM_BATCH_BLIS_IMPL.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cgemm_batch_blis_impl_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().cgemm_batch_blis_impl_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn CGEMM_BATCH_BLIS_IMPL_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().CGEMM_BATCH_BLIS_IMPL_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn CGEMMT_BLIS_IMPL(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMMT_BLIS_IMPL.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn cgemmt_blis_impl_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemmt_blis_impl_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn CGEMMT_BLIS_IMPL_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().CGEMMT_BLIS_IMPL_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DAXPBY_BLIS_IMPL(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPBY_BLIS_IMPL.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn daxpby_blis_impl_(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpby_blis_impl_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn DAXPBY_BLIS_IMPL_(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().DAXPBY_BLIS_IMPL_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn DGEMM_BATCH_BLIS_IMPL(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().DGEMM_BATCH_BLIS_IMPL.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn dgemm_batch_blis_impl_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().dgemm_batch_blis_impl_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn DGEMM_BATCH_BLIS_IMPL_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().DGEMM_BATCH_BLIS_IMPL_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn DGEMM_PACK_GET_SIZE_BLIS_IMPL(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().DGEMM_PACK_GET_SIZE_BLIS_IMPL.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn dgemm_pack_get_size_blis_impl_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().dgemm_pack_get_size_blis_impl_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn DGEMM_PACK_GET_SIZE_BLIS_IMPL_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().DGEMM_PACK_GET_SIZE_BLIS_IMPL_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn DGEMM_PACK_BLIS_IMPL(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().DGEMM_PACK_BLIS_IMPL.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn dgemm_pack_blis_impl_(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().dgemm_pack_blis_impl_.unwrap()(
        identifier, trans, mm, nn, kk, alpha, src, pld, dest,
    )
}

pub unsafe fn DGEMM_PACK_BLIS_IMPL_(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().DGEMM_PACK_BLIS_IMPL_.unwrap()(
        identifier, trans, mm, nn, kk, alpha, src, pld, dest,
    )
}

pub unsafe fn DGEMM_COMPUTE_BLIS_IMPL(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_COMPUTE_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dgemm_compute_blis_impl_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm_compute_blis_impl_.unwrap()(
        transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DGEMM_COMPUTE_BLIS_IMPL_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMM_COMPUTE_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DGEMMT_BLIS_IMPL(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMMT_BLIS_IMPL.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dgemmt_blis_impl_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemmt_blis_impl_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn DGEMMT_BLIS_IMPL_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().DGEMMT_BLIS_IMPL_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn SAXPBY_BLIS_IMPL(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPBY_BLIS_IMPL.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn saxpby_blis_impl_(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpby_blis_impl_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn SAXPBY_BLIS_IMPL_(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().SAXPBY_BLIS_IMPL_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn SGEMM_BATCH_BLIS_IMPL(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().SGEMM_BATCH_BLIS_IMPL.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn sgemm_batch_blis_impl_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().sgemm_batch_blis_impl_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn SGEMM_BATCH_BLIS_IMPL_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().SGEMM_BATCH_BLIS_IMPL_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn SGEMM_PACK_GET_SIZE_BLIS_IMPL(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().SGEMM_PACK_GET_SIZE_BLIS_IMPL.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn sgemm_pack_get_size_blis_impl_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().sgemm_pack_get_size_blis_impl_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn SGEMM_PACK_GET_SIZE_BLIS_IMPL_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().SGEMM_PACK_GET_SIZE_BLIS_IMPL_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn SGEMM_PACK_BLIS_IMPL(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().SGEMM_PACK_BLIS_IMPL.unwrap()(identifier, trans, mm, nn, kk, alpha, src, pld, dest)
}

pub unsafe fn sgemm_pack_blis_impl_(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().sgemm_pack_blis_impl_.unwrap()(
        identifier, trans, mm, nn, kk, alpha, src, pld, dest,
    )
}

pub unsafe fn SGEMM_PACK_BLIS_IMPL_(
    identifier: *const f77_char,
    trans: *const f77_char,
    mm: *const f77_int,
    nn: *const f77_int,
    kk: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().SGEMM_PACK_BLIS_IMPL_.unwrap()(
        identifier, trans, mm, nn, kk, alpha, src, pld, dest,
    )
}

pub unsafe fn SGEMM_COMPUTE_BLIS_IMPL(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_COMPUTE_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn sgemm_compute_blis_impl_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm_compute_blis_impl_.unwrap()(
        transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn SGEMM_COMPUTE_BLIS_IMPL_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMM_COMPUTE_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn SGEMMT_BLIS_IMPL(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMMT_BLIS_IMPL.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn sgemmt_blis_impl_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemmt_blis_impl_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn SGEMMT_BLIS_IMPL_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().SGEMMT_BLIS_IMPL_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn ZAXPBY_BLIS_IMPL(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPBY_BLIS_IMPL.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn zaxpby_blis_impl_(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpby_blis_impl_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn ZAXPBY_BLIS_IMPL_(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().ZAXPBY_BLIS_IMPL_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn ZGEMM3M_BLIS_IMPL(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM3M_BLIS_IMPL.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn zgemm3m_blis_impl_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm3m_blis_impl_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn ZGEMM3M_BLIS_IMPL_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMM3M_BLIS_IMPL_.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn ZGEMM_BATCH_BLIS_IMPL(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().ZGEMM_BATCH_BLIS_IMPL.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn zgemm_batch_blis_impl_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().zgemm_batch_blis_impl_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn ZGEMM_BATCH_BLIS_IMPL_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().ZGEMM_BATCH_BLIS_IMPL_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn ZGEMMT_BLIS_IMPL(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMMT_BLIS_IMPL.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn zgemmt_blis_impl_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemmt_blis_impl_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn ZGEMMT_BLIS_IMPL_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().ZGEMMT_BLIS_IMPL_.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn AOCL_BLIS_set_progress(func: AOCL_progress_callback) {
    dyload_lib().AOCL_BLIS_set_progress.unwrap()(func)
}

pub unsafe fn aocl_get_reorder_buf_size_f32f32f32of32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_f32f32f32of32.unwrap()(order, trans, mat_type, k, n)
}

pub unsafe fn aocl_get_reorder_buf_size_u8s8s32os32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_u8s8s32os32.unwrap()(order, trans, mat_type, k, n)
}

pub unsafe fn aocl_get_reorder_buf_size_bf16bf16f32of32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_bf16bf16f32of32.unwrap()(order, trans, mat_type, k, n)
}

pub unsafe fn aocl_get_reorder_buf_size_s8s8s32os32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_s8s8s32os32.unwrap()(order, trans, mat_type, k, n)
}

pub unsafe fn aocl_get_reorder_buf_size_u8s4s32os32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_u8s4s32os32.unwrap()(order, trans, mat_type, k, n)
}

pub unsafe fn aocl_get_reorder_buf_size_bf16s4f32of32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_bf16s4f32of32.unwrap()(order, trans, mat_type, k, n)
}

pub unsafe fn aocl_get_reorder_buf_size_s8s8s32os32_sym_quant(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    k: dim_t,
    n: dim_t,
    meta_data: *mut AOCL_SYMM_STAT_QUANT,
) -> siz_t {
    dyload_lib().aocl_get_reorder_buf_size_s8s8s32os32_sym_quant.unwrap()(
        order, trans, mat_type, k, n, meta_data,
    )
}

pub unsafe fn aocl_reorder_f32f32f32of32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const f32,
    reorder_buf_addr: *mut f32,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_f32f32f32of32.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_u8s8s32os32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const i8,
    reorder_buf_addr: *mut i8,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_u8s8s32os32.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_bf16bf16f32of32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const bfloat16,
    reorder_buf_addr: *mut bfloat16,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_bf16bf16f32of32.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_bf16bf16f32of32_reference(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const bfloat16,
    reorder_buf_addr: *mut bfloat16,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_bf16bf16f32of32_reference.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_s8s8s32os32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const i8,
    reorder_buf_addr: *mut i8,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_s8s8s32os32.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_u8s4s32os32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const i8,
    reorder_buf_addr: *mut i8,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_u8s4s32os32.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_bf16s4f32of32(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const i8,
    reorder_buf_addr: *mut i8,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_bf16s4f32of32.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_reorder_s8s8s32os32_sym_quant(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const i8,
    reorder_buf_addr: *mut i8,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
    meta_data: *mut AOCL_SYMM_STAT_QUANT,
) {
    dyload_lib().aocl_reorder_s8s8s32os32_sym_quant.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
        meta_data,
    )
}

pub unsafe fn aocl_reorder_f32obf16(
    order: c_char,
    trans: c_char,
    mat_type: c_char,
    input_buf_addr: *const f32,
    reorder_buf_addr: *mut bfloat16,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_reorder_f32obf16.unwrap()(
        order,
        trans,
        mat_type,
        input_buf_addr,
        reorder_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_unreorder_bf16bf16f32of32(
    order: c_char,
    mat_type: c_char,
    reorder_buf_addr: *const bfloat16,
    output_buf_addr: *mut bfloat16,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_unreorder_bf16bf16f32of32.unwrap()(
        order,
        mat_type,
        reorder_buf_addr,
        output_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_unreorder_bf16bf16f32of32_reference(
    order: c_char,
    mat_type: c_char,
    reorder_buf_addr: *const bfloat16,
    output_buf_addr: *mut bfloat16,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_unreorder_bf16bf16f32of32_reference.unwrap()(
        order,
        mat_type,
        reorder_buf_addr,
        output_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_unreorder_s8s8s32os32_reference(
    order: c_char,
    mat_type: c_char,
    reorder_buf_addr: *const i8,
    output_buf_addr: *mut i8,
    k: dim_t,
    n: dim_t,
    ldb: dim_t,
) {
    dyload_lib().aocl_unreorder_s8s8s32os32_reference.unwrap()(
        order,
        mat_type,
        reorder_buf_addr,
        output_buf_addr,
        k,
        n,
        ldb,
    )
}

pub unsafe fn aocl_gemm_u8s8s32os32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const u8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut i32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_u8s8s32os32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_u8s8s32os8(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const u8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut i8,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_u8s8s32os8.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_u8s8s32obf16(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const u8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut bfloat16,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_u8s8s32obf16.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_u8s8s32of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const u8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut f32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_u8s8s32of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_u8s8s32ou8(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const u8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut u8,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_u8s8s32ou8.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32os32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut i32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32os32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32os8(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut i8,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32os8.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32obf16(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut bfloat16,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32obf16.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut f32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32ou8(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut u8,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32ou8.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32of32_sym_quant(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut f32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32of32_sym_quant.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_s8s8s32obf16_sym_quant(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: i32,
    a: *const i8,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: i32,
    c: *mut bfloat16,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_s8s8s32obf16_sym_quant.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_bf16bf16f32obf16(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: f32,
    a: *const bfloat16,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const bfloat16,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: f32,
    c: *mut bfloat16,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_bf16bf16f32obf16.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_bf16bf16f32of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: f32,
    a: *const bfloat16,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const bfloat16,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: f32,
    c: *mut f32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_bf16bf16f32of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_bf16s4f32of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: f32,
    a: *const bfloat16,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: f32,
    c: *mut f32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_bf16s4f32of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_bf16s4f32obf16(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: f32,
    a: *const bfloat16,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const i8,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: f32,
    c: *mut bfloat16,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_bf16s4f32obf16.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_f32f32f32of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    k: dim_t,
    alpha: f32,
    a: *const f32,
    lda: dim_t,
    mem_format_a: c_char,
    b: *const f32,
    ldb: dim_t,
    mem_format_b: c_char,
    beta: f32,
    c: *mut f32,
    ldc: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_f32f32f32of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_bf16bf16f32of32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const f32,
    a: *mut *const bfloat16,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const bfloat16,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const f32,
    c: *mut *mut f32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_bf16bf16f32of32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_bf16bf16f32obf16(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const f32,
    a: *mut *const bfloat16,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const bfloat16,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const f32,
    c: *mut *mut bfloat16,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_bf16bf16f32obf16.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_bf16s4f32of32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const f32,
    a: *mut *const bfloat16,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const f32,
    c: *mut *mut f32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_bf16s4f32of32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_bf16s4f32obf16(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const f32,
    a: *mut *const bfloat16,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const f32,
    c: *mut *mut bfloat16,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_bf16s4f32obf16.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_f32f32f32of32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const f32,
    a: *mut *const f32,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const f32,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const f32,
    c: *mut *mut f32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_f32f32f32of32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_u8s8s32os32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const u8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut i32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_u8s8s32os32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_u8s8s32os8(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const u8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut i8,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_u8s8s32os8.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_u8s8s32of32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const u8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut f32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_u8s8s32of32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_u8s8s32obf16(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const u8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut bfloat16,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_u8s8s32obf16.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_u8s8s32ou8(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const u8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut u8,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_u8s8s32ou8.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_s8s8s32os32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const i8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut i32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_s8s8s32os32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_s8s8s32os8(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const i8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut i8,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_s8s8s32os8.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_s8s8s32of32(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const i8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut f32,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_s8s8s32of32.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_s8s8s32obf16(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const i8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut bfloat16,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_s8s8s32obf16.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_batch_gemm_s8s8s32ou8(
    order: *const c_char,
    transa: *const c_char,
    transb: *const c_char,
    batch_size: dim_t,
    m: *const dim_t,
    n: *const dim_t,
    k: *const dim_t,
    alpha: *const i32,
    a: *mut *const i8,
    lda: *const dim_t,
    mem_format_a: *const c_char,
    b: *mut *const i8,
    ldb: *const dim_t,
    mem_format_b: *const c_char,
    beta: *const i32,
    c: *mut *mut u8,
    ldc: *const dim_t,
    post_op_unparsed: *mut *mut aocl_post_op,
) {
    dyload_lib().aocl_batch_gemm_s8s8s32ou8.unwrap()(
        order,
        transa,
        transb,
        batch_size,
        m,
        n,
        k,
        alpha,
        a,
        lda,
        mem_format_a,
        b,
        ldb,
        mem_format_b,
        beta,
        c,
        ldc,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_gelu_tanh_f32(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().aocl_gemm_gelu_tanh_f32.unwrap()(n, x, incx)
}

pub unsafe fn aocl_gemm_gelu_erf_f32(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().aocl_gemm_gelu_erf_f32.unwrap()(n, x, incx)
}

pub unsafe fn aocl_gemm_softmax_f32(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().aocl_gemm_softmax_f32.unwrap()(n, x, incx)
}

pub unsafe fn aocl_gemm_eltwise_ops_bf16of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const bfloat16,
    lda: dim_t,
    b: *mut f32,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_bf16of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_eltwise_ops_bf16obf16(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const bfloat16,
    lda: dim_t,
    b: *mut bfloat16,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_bf16obf16.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_eltwise_ops_f32of32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const f32,
    lda: dim_t,
    b: *mut f32,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_f32of32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_eltwise_ops_f32obf16(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const f32,
    lda: dim_t,
    b: *mut bfloat16,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_f32obf16.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_eltwise_ops_f32os32(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const f32,
    lda: dim_t,
    b: *mut i32,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_f32os32.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_eltwise_ops_f32os8(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const f32,
    lda: dim_t,
    b: *mut i8,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_f32os8.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_gemm_eltwise_ops_f32ou8(
    order: c_char,
    transa: c_char,
    transb: c_char,
    m: dim_t,
    n: dim_t,
    a: *const f32,
    lda: dim_t,
    b: *mut u8,
    ldb: dim_t,
    post_op_unparsed: *mut aocl_post_op,
) {
    dyload_lib().aocl_gemm_eltwise_ops_f32ou8.unwrap()(
        order,
        transa,
        transb,
        m,
        n,
        a,
        lda,
        b,
        ldb,
        post_op_unparsed,
    )
}

pub unsafe fn aocl_lpgemm_init_global_cntx() {
    dyload_lib().aocl_lpgemm_init_global_cntx.unwrap()()
}

pub unsafe fn lpgemm_get_global_cntx_obj(op: AOCL_OPERATION_TYPE) -> *mut lpgemm_cntx_t {
    dyload_lib().lpgemm_get_global_cntx_obj.unwrap()(op)
}

pub unsafe fn lpgemm_util_get_global_cntx_obj(
    op: AOCL_UTIL_OPERATION_TYPE,
) -> *mut lpgemm_util_cntx_t {
    dyload_lib().lpgemm_util_get_global_cntx_obj.unwrap()(op)
}

pub unsafe fn lpgemm_eltwise_ops_get_global_cntx_obj(
    op: AOCL_ELTWISE_OPS_OPERATION_TYPE,
) -> *mut lpgemm_eltwise_ops_cntx_t {
    dyload_lib().lpgemm_eltwise_ops_get_global_cntx_obj.unwrap()(op)
}

pub unsafe fn lpgemm_get_block_size_MC_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_block_size_MC_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_block_size_NC_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_block_size_NC_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_block_size_KC_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_block_size_KC_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_block_size_NR_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_block_size_NR_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_block_size_MR_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_block_size_MR_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_sup_thres_MT_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_sup_thres_MT_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_sup_thres_NT_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_sup_thres_NT_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_sup_thres_KT_global_cntx(op_type: AOCL_OPERATION_TYPE) -> dim_t {
    dyload_lib().lpgemm_get_sup_thres_KT_global_cntx.unwrap()(op_type)
}

pub unsafe fn lpgemm_get_enabled_arch() -> arch_t {
    dyload_lib().lpgemm_get_enabled_arch.unwrap()()
}

pub unsafe fn lpgemm_get_packa_strides(lcntx: *mut lpgemm_cntx_t, rs: *mut dim_t, cs: *mut dim_t) {
    dyload_lib().lpgemm_get_packa_strides.unwrap()(lcntx, rs, cs)
}

pub unsafe fn lpgemm_get_packb_strides(lcntx: *mut lpgemm_cntx_t, rs: *mut dim_t, cs: *mut dim_t) {
    dyload_lib().lpgemm_get_packb_strides.unwrap()(lcntx, rs, cs)
}

pub unsafe fn lpgemm_set_jit_kernel(kernel_fp: *mut c_void, m_index: dim_t, n_index: dim_t) {
    dyload_lib().lpgemm_set_jit_kernel.unwrap()(kernel_fp, m_index, n_index)
}

pub unsafe fn lpgemm_get_jit_kernel(m_index: dim_t, n_index: dim_t) -> *mut c_void {
    dyload_lib().lpgemm_get_jit_kernel.unwrap()(m_index, n_index)
}

pub unsafe fn get_jit_kernels_generated() -> bool {
    dyload_lib().get_jit_kernels_generated.unwrap()()
}

pub unsafe fn lpgemm_mod_block_size_s16(
    m: dim_t,
    n: dim_t,
    k: dim_t,
    MC: *mut dim_t,
    NC: *mut dim_t,
    KC: *mut dim_t,
) {
    dyload_lib().lpgemm_mod_block_size_s16.unwrap()(m, n, k, MC, NC, KC)
}

pub unsafe fn lpgemm_translate_to_post_ops_list(
    post_op_unparsed: *mut aocl_post_op,
    post_op_list: *mut lpgemm_post_op,
    scale_buffer: *mut c_void,
    meta_arg: *mut c_void,
    m: dim_t,
    n: dim_t,
) -> err_t {
    dyload_lib().lpgemm_translate_to_post_ops_list.unwrap()(
        post_op_unparsed,
        post_op_list,
        scale_buffer,
        meta_arg,
        m,
        n,
    )
}

pub unsafe fn lpgemm_translate_to_pre_ops_list(
    pre_op_unparsed: *mut aocl_pre_op,
    pre_op_list: *mut lpgemm_pre_op,
    m: dim_t,
    n: dim_t,
    k: dim_t,
) -> err_t {
    dyload_lib().lpgemm_translate_to_pre_ops_list.unwrap()(pre_op_unparsed, pre_op_list, m, n, k)
}

pub unsafe fn lpgemm_translate_to_group_postops_list(
    post_op_unparsed: *mut aocl_group_post_op,
    post_op_list: *mut lpgemm_group_post_op,
    m: dim_t,
    n: dim_t,
    k: dim_t,
) -> err_t {
    dyload_lib().lpgemm_translate_to_group_postops_list.unwrap()(
        post_op_unparsed,
        post_op_list,
        m,
        n,
        k,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_6x64(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_6x64.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_6x64(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_6x64.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_6x16m(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_6x16m.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_6x64m(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_6x64m.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x64(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x64.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_6x64m(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_6x64m.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x64m_sym_quant(
    m0: dim_t,
    n0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x64m_sym_quant.unwrap()(
        m0,
        n0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_5x64(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_5x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_4x64(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_4x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_3x64(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_3x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_2x64(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_2x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_1x64(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_1x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_5x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_5x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_4x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_4x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_3x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_3x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_2x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_2x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_1x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_1x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_5x64(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_5x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_4x64(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_4x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_3x64(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_3x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_2x64(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_2x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_1x64(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_1x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_5x48(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_5x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_4x48(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_4x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_3x48(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_3x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_2x48(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_2x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_1x48(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_1x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_5x32(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_5x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_4x32(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_4x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_3x32(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_3x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_2x32(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_2x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_1x32(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_1x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_5x16(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_5x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_4x16(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_4x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_3x16(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_3x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_2x16(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_2x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_1x16(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_1x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_5x8(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_5x8.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_4x8(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_4x8.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_3x8(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_3x8.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_2x8(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_2x8.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_1x8(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_1x8.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_5x4(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_5x4.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_4x4(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_4x4.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_3x4(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_3x4.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_2x4(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_2x4.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_1x4(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_1x4.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_5x2(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_5x2.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_4x2(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_4x2.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_3x2(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_3x2.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_2x2(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_2x2.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_1x2(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_1x2.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_5x1(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_5x1.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_4x1(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_4x1.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_3x1(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_3x1.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_2x1(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_2x1.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_1x1(
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_1x1.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x64(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x64(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x64(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x64(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x64(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_5x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_5x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_4x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_4x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_3x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_3x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_2x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_2x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_1x64(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_1x64.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x64_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x64_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x64_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x64_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x64_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x64_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x64_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x64_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x64_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x64_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_6x16(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_6x16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_12x16(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_12x16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_6x32(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_6x32.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_9x32(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_9x32.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_6x48(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_6x48.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_6x16(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_6x16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_6x32(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_6x32.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_6x48(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_6x48.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_6x48m(
    m0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_6x48m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_avx512_6x32m(
    m0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_avx512_6x32m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_6x8m(
    m0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_6x8m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_6x4m(
    m0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_6x4m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_6x2m(
    m0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_6x2m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_f32f32f32of32_6x1m(
    m0: dim_t,
    k0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_f32f32f32of32_6x1m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x16(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x32(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x32.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x48(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x48.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_6x16m(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_6x16m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_6x32m(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_6x32m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_6x48m(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_6x48m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x48_sym_quant(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x48_sym_quant.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x32_sym_quant(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x32_sym_quant.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6x16_sym_quant(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6x16_sym_quant.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6xlt16_sym_quant(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6xlt16_sym_quant.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_6xlt16(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_6xlt16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_12xlt16(
    m0: dim_t,
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_12xlt16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_6xlt16(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_6xlt16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_6xlt16(
    m0: dim_t,
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_6xlt16.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_6xlt16m(
    m0: dim_t,
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    ps_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_6xlt16m.unwrap()(
        m0,
        k0,
        a,
        rs_a,
        cs_a,
        ps_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_5x16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_5x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_4x16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_4x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_3x16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_3x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_2x16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_2x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_1x16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_1x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_5x32(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_5x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_4x32(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_4x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_3x32(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_3x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_2x32(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_2x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_1x32(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_1x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_5x48(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_5x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_4x48(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_4x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_3x48(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_3x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_2x48(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_2x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_1x48(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_1x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_5x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_5x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_4x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_4x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_3x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_3x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_2x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_2x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_1x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_1x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_5x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_5x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_4x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_4x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_3x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_3x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_2x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_2x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_1x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_1x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_5x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_5x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_4x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_4x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_3x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_3x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_2x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_2x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_1x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_1x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x32(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x32(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x32(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x32(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x32(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x48(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x48(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x48(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x48(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x48(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_5x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_5x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_4x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_4x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_3x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_3x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_2x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_2x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_1x16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_1x16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_5x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_5x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_4x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_4x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_3x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_3x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_2x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_2x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_1x32(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_1x32.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_5x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_5x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_4x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_4x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_3x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_3x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_2x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_2x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_1x48(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_1x48.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x48_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x48_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x48_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x48_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x48_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x48_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x48_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x48_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x48_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x48_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x32_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x32_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x32_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x32_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x32_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x32_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x32_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x32_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x32_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x32_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5x16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5x16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4x16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4x16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3x16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3x16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2x16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2x16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1x16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1x16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_5xlt16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_5xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_4xlt16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_4xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_3xlt16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_3xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_2xlt16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_2xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_u8s8s32o32_1xlt16(
    k0: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_u8s8s32o32_1xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_5xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_5xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_4xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_4xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_3xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_3xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_2xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_2xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16bf16f32of32_1xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16bf16f32of32_1xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5xlt16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4xlt16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3xlt16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2xlt16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1xlt16(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut i32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_5xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_5xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_4xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_4xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_3xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_3xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_2xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_2xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_bf16s4f32of32_1xlt16(
    k0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: f32,
    beta: f32,
    n0_rem: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().lpgemm_rowvar_bf16s4f32of32_1xlt16.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        post_ops_list,
        post_ops_attr,
        pre_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_5xlt16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_5xlt16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_4xlt16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_4xlt16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_3xlt16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_3xlt16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_2xlt16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_2xlt16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_rowvar_s8s8s32os32_1xlt16_sym_quant(
    k0: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    c: *mut f32,
    rs_c: dim_t,
    alpha: i32,
    beta: i32,
    n0_rem: dim_t,
    grp_post_ops_attr: lpgemm_grp_post_op_attr,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_rowvar_s8s8s32os32_1xlt16_sym_quant.unwrap()(
        k0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        c,
        rs_c,
        alpha,
        beta,
        n0_rem,
        grp_post_ops_attr,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemv_m_one_f32f32f32of32(
    n0: dim_t,
    k: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    NR: dim_t,
    KC: dim_t,
    n_sub_updated: dim_t,
    jc_cur_loop_rem: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_m_one_f32f32f32of32.unwrap()(
        n0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        NR,
        KC,
        n_sub_updated,
        jc_cur_loop_rem,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_m_one_bf16bf16f32of32(
    n0: dim_t,
    k: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    NR: dim_t,
    KC: dim_t,
    n_sub_updated: dim_t,
    jc_cur_loop_rem: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_m_one_bf16bf16f32of32.unwrap()(
        n0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        NR,
        KC,
        n_sub_updated,
        jc_cur_loop_rem,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_m_one_u8s8s32os32(
    n0: dim_t,
    k: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut i32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    NR: dim_t,
    KC: dim_t,
    n_sub_updated: dim_t,
    jc_cur_loop_rem: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_m_one_u8s8s32os32.unwrap()(
        n0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        NR,
        KC,
        n_sub_updated,
        jc_cur_loop_rem,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_m_one_s8s8s32os32(
    n0: dim_t,
    k: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut i32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    NR: dim_t,
    KC: dim_t,
    n_sub_updated: dim_t,
    jc_cur_loop_rem: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_m_one_s8s8s32os32.unwrap()(
        n0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        NR,
        KC,
        n_sub_updated,
        jc_cur_loop_rem,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_n_one_f32f32f32of32(
    m0: dim_t,
    k: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    MR: dim_t,
    KC: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_n_one_f32f32f32of32.unwrap()(
        m0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        MR,
        KC,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_n_one_bf16bf16f32of32(
    m0: dim_t,
    k: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut f32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: f32,
    beta: f32,
    MR: dim_t,
    KC: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_n_one_bf16bf16f32of32.unwrap()(
        m0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        MR,
        KC,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_n_one_u8s8s32os32(
    m0: dim_t,
    k: dim_t,
    a: *const u8,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut i32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    MR: dim_t,
    KC: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_n_one_u8s8s32os32.unwrap()(
        m0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        MR,
        KC,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemv_n_one_s8s8s32os32(
    m0: dim_t,
    k: dim_t,
    a: *const i8,
    rs_a: dim_t,
    cs_a: dim_t,
    mtag_a: AOCL_MEMORY_TAG,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    mtag_b: AOCL_MEMORY_TAG,
    c: *mut i32,
    rs_c: dim_t,
    cs_c: dim_t,
    alpha: i32,
    beta: i32,
    MR: dim_t,
    KC: dim_t,
    post_op: *mut lpgemm_post_op,
    post_op_attr: *mut lpgemm_post_op_attr,
) {
    dyload_lib().lpgemv_n_one_s8s8s32os32.unwrap()(
        m0,
        k,
        a,
        rs_a,
        cs_a,
        mtag_a,
        b,
        rs_b,
        cs_b,
        mtag_b,
        c,
        rs_c,
        cs_c,
        alpha,
        beta,
        MR,
        KC,
        post_op,
        post_op_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_bf16of32_6x64(
    m0: dim_t,
    n0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_bf16of32_6x64.unwrap()(
        m0,
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_f32of32_6x64(
    m0: dim_t,
    n0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_f32of32_6x64.unwrap()(
        m0,
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_bf16of32_5x64(
    n0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_bf16of32_5x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_bf16of32_4x64(
    n0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_bf16of32_4x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_bf16of32_3x64(
    n0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_bf16of32_3x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_bf16of32_2x64(
    n0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_bf16of32_2x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_bf16of32_1x64(
    n0: dim_t,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_bf16of32_1x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_f32of32_5x64(
    n0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_f32of32_5x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_f32of32_4x64(
    n0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_f32of32_4x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_f32of32_3x64(
    n0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_f32of32_3x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_f32of32_2x64(
    n0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_f32of32_2x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_eltwise_ops_kernel_f32of32_1x64(
    n0: dim_t,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    b: *mut f32,
    rs_b: dim_t,
    cs_b: dim_t,
    post_ops_list: *mut lpgemm_post_op,
    post_ops_attr: lpgemm_post_op_attr,
) {
    dyload_lib().lpgemm_eltwise_ops_kernel_f32of32_1x64.unwrap()(
        n0,
        a,
        rs_a,
        cs_a,
        b,
        rs_b,
        cs_b,
        post_ops_list,
        post_ops_attr,
    )
}

pub unsafe fn lpgemm_util_f32_gelu_tanh_avx512_kernel(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().lpgemm_util_f32_gelu_tanh_avx512_kernel.unwrap()(n, x, incx)
}

pub unsafe fn lpgemm_util_f32_gelu_erf_avx512_kernel(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().lpgemm_util_f32_gelu_erf_avx512_kernel.unwrap()(n, x, incx)
}

pub unsafe fn lpgemm_util_f32_softmax_avx512_kernel(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().lpgemm_util_f32_softmax_avx512_kernel.unwrap()(n, x, incx)
}

pub unsafe fn lpgemm_util_f32_gelu_tanh_avx2_kernel(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().lpgemm_util_f32_gelu_tanh_avx2_kernel.unwrap()(n, x, incx)
}

pub unsafe fn lpgemm_util_f32_gelu_erf_avx2_kernel(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().lpgemm_util_f32_gelu_erf_avx2_kernel.unwrap()(n, x, incx)
}

pub unsafe fn lpgemm_util_f32_softmax_avx2_kernel(n: dim_t, x: *mut f32, incx: inc_t) {
    dyload_lib().lpgemm_util_f32_softmax_avx2_kernel.unwrap()(n, x, incx)
}

pub unsafe fn packb_mxp_nr64_f32obf16(
    pack_b_buffer_bf16bf16f32of32: *mut bfloat16,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_mxp_nr64_f32obf16.unwrap()(
        pack_b_buffer_bf16bf16f32of32,
        b,
        rs_b,
        cs_b,
        NC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn packb_nr64_bf16bf16f32of32(
    pack_b_buffer_bf16bf16f32of32: *mut bfloat16,
    b: *const bfloat16,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_nr64_bf16bf16f32of32.unwrap()(
        pack_b_buffer_bf16bf16f32of32,
        b,
        rs_b,
        cs_b,
        NC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn packb_nr64_bf16s4f32of32(
    pack_b_buffer: *mut i8,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
    pre_op: *mut lpgemm_pre_op,
    mtag: AOCL_MATRIX_TYPE,
) {
    dyload_lib().packb_nr64_bf16s4f32of32.unwrap()(
        pack_b_buffer,
        b,
        rs_b,
        cs_b,
        NC,
        KC,
        rs_p,
        cs_p,
        pre_op,
        mtag,
    )
}

pub unsafe fn packsclb_nr64_bf16s4f32of32(
    packb_bf16: *mut bfloat16,
    b: *const i8,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
    pre_ops_attr: lpgemm_pre_op_attr,
) {
    dyload_lib().packsclb_nr64_bf16s4f32of32.unwrap()(
        packb_bf16,
        b,
        NC,
        KC,
        rs_p,
        cs_p,
        pre_ops_attr,
    )
}

pub unsafe fn packa_mr16_bf16bf16f32of32(
    pack_a_buffer: *mut bfloat16,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packa_mr16_bf16bf16f32of32.unwrap()(
        pack_a_buffer,
        a,
        rs_a,
        cs_a,
        MC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn unpackb_nr64_bf16bf16f32of32(
    unpack_b_buffer_bf16bf16f32of32: *const bfloat16,
    b: *mut bfloat16,
    NC: dim_t,
    KC: dim_t,
    rs_b: dim_t,
    cs_b: dim_t,
) {
    dyload_lib().unpackb_nr64_bf16bf16f32of32.unwrap()(
        unpack_b_buffer_bf16bf16f32of32,
        b,
        NC,
        KC,
        rs_b,
        cs_b,
    )
}

pub unsafe fn unpackb_nr64_bf16_f32(
    b: *const bfloat16,
    unpack_b_buffer: *mut f32,
    NC: dim_t,
    KC: dim_t,
    rs_b: dim_t,
    cs_b: dim_t,
) {
    dyload_lib().unpackb_nr64_bf16_f32.unwrap()(b, unpack_b_buffer, NC, KC, rs_b, cs_b)
}

pub unsafe fn cvt_bf16_f32(
    cvt_buffer: *mut f32,
    a: *const bfloat16,
    rs_a: dim_t,
    cs_a: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_p: dim_t,
    cs_p: dim_t,
) {
    dyload_lib().cvt_bf16_f32.unwrap()(cvt_buffer, a, rs_a, cs_a, MC, KC, rs_p, cs_p)
}

pub unsafe fn packa_u8s8s32os32(
    pack_a_buffer_u8s8s32o32: *mut u8,
    a: *const u8,
    rs: dim_t,
    cs: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_a: *mut dim_t,
    cs_a: *mut dim_t,
) {
    dyload_lib().packa_u8s8s32os32.unwrap()(pack_a_buffer_u8s8s32o32, a, rs, cs, MC, KC, rs_a, cs_a)
}

pub unsafe fn packb_nr64_u8s8s32o32(
    pack_b_buffer_u8s8s32o32: *mut i8,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_nr64_u8s8s32o32.unwrap()(
        pack_b_buffer_u8s8s32o32,
        b,
        rs_b,
        cs_b,
        NC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn packb_nr64_u8s4s32o32(
    pack_b_buffer_u8s8s32o32: *mut i8,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_nr64_u8s4s32o32.unwrap()(
        pack_b_buffer_u8s8s32o32,
        b,
        rs_b,
        cs_b,
        NC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn packa_k64_s8s8s32os32(
    pack_a_buffer_s8s8s32o32: *mut i8,
    a: *const i8,
    lda: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_a: *mut dim_t,
    cs_a: *mut dim_t,
) {
    dyload_lib().packa_k64_s8s8s32os32.unwrap()(
        pack_a_buffer_s8s8s32o32,
        a,
        lda,
        MC,
        KC,
        rs_a,
        cs_a,
    )
}

pub unsafe fn packb_nr64_s8s8s32os32(
    pack_b_buffer_s8s8s32o32: *mut i8,
    pack_b_column_sum: *mut i32,
    b: *const i8,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_nr64_s8s8s32os32.unwrap()(
        pack_b_buffer_s8s8s32o32,
        pack_b_column_sum,
        b,
        rs_b,
        cs_b,
        NC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn packa_mr16_f32f32f32of32_col_major(
    pack_a_buffer: *mut f32,
    a: *const f32,
    rs_a: dim_t,
    cs_a: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packa_mr16_f32f32f32of32_col_major.unwrap()(
        pack_a_buffer,
        a,
        rs_a,
        cs_a,
        MC,
        KC,
        rs_p,
        cs_p,
    )
}

pub unsafe fn packa_mr6_f32f32f32of32_avx512(
    pack_a_buf: *mut f32,
    a: *const f32,
    rs: dim_t,
    cs: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_a: *mut dim_t,
    cs_a: *mut dim_t,
) {
    dyload_lib().packa_mr6_f32f32f32of32_avx512.unwrap()(pack_a_buf, a, rs, cs, MC, KC, rs_a, cs_a)
}

pub unsafe fn packa_mr6_f32f32f32of32_avx2(
    pack_a_buf: *mut f32,
    a: *const f32,
    rs: dim_t,
    cs: dim_t,
    MC: dim_t,
    KC: dim_t,
    rs_a: *mut dim_t,
    cs_a: *mut dim_t,
) {
    dyload_lib().packa_mr6_f32f32f32of32_avx2.unwrap()(pack_a_buf, a, rs, cs, MC, KC, rs_a, cs_a)
}

pub unsafe fn packb_nr64_f32f32f32of32(
    pack_b_buffer: *mut f32,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_nr64_f32f32f32of32.unwrap()(pack_b_buffer, b, rs_b, cs_b, NC, KC, rs_p, cs_p)
}

pub unsafe fn packb_nr16_f32f32f32of32(
    pack_b_buffer: *mut f32,
    b: *const f32,
    rs_b: dim_t,
    cs_b: dim_t,
    NC: dim_t,
    KC: dim_t,
    rs_p: *mut dim_t,
    cs_p: *mut dim_t,
) {
    dyload_lib().packb_nr16_f32f32f32of32.unwrap()(pack_b_buffer, b, rs_b, cs_b, NC, KC, rs_p, cs_p)
}

pub unsafe fn bla_r_sign(a: *const bla_real, b: *const bla_real) -> f64 {
    dyload_lib().bla_r_sign.unwrap()(a, b)
}

pub unsafe fn bla_d_sign(a: *const bla_double, b: *const bla_double) -> f64 {
    dyload_lib().bla_d_sign.unwrap()(a, b)
}

pub unsafe fn bla_r_cnjg(dest: *mut bla_scomplex, src: *const bla_scomplex) {
    dyload_lib().bla_r_cnjg.unwrap()(dest, src)
}

pub unsafe fn bla_d_cnjg(dest: *mut bla_dcomplex, src: *const bla_dcomplex) {
    dyload_lib().bla_d_cnjg.unwrap()(dest, src)
}

pub unsafe fn bla_r_imag(z: *const bla_scomplex) -> bla_real {
    dyload_lib().bla_r_imag.unwrap()(z)
}

pub unsafe fn bla_d_imag(z: *const bla_dcomplex) -> f64 {
    dyload_lib().bla_d_imag.unwrap()(z)
}

pub unsafe fn bla_c_div(cp: *mut bla_scomplex, ap: *const bla_scomplex, bp: *const bla_scomplex) {
    dyload_lib().bla_c_div.unwrap()(cp, ap, bp)
}

pub unsafe fn bla_z_div(cp: *mut bla_dcomplex, ap: *const bla_dcomplex, bp: *const bla_dcomplex) {
    dyload_lib().bla_z_div.unwrap()(cp, ap, bp)
}

pub unsafe fn bla_f__cabs(real: f64, imag: f64) -> f64 {
    dyload_lib().bla_f__cabs.unwrap()(real, imag)
}

pub unsafe fn bla_r_abs(x: *const bla_real) -> f64 {
    dyload_lib().bla_r_abs.unwrap()(x)
}

pub unsafe fn bla_d_abs(x: *const bla_double) -> f64 {
    dyload_lib().bla_d_abs.unwrap()(x)
}

pub unsafe fn bla_c_abs(z: *const bla_scomplex) -> f64 {
    dyload_lib().bla_c_abs.unwrap()(z)
}

pub unsafe fn bla_z_abs(z: *const bla_dcomplex) -> f64 {
    dyload_lib().bla_z_abs.unwrap()(z)
}

pub unsafe fn lsame_blis_impl(
    ca: *const c_char,
    cb: *const c_char,
    ca_len: c_int,
    cb_len: c_int,
) -> c_int {
    dyload_lib().lsame_blis_impl.unwrap()(ca, cb, ca_len, cb_len)
}

pub unsafe fn lsame_(ca: *const c_char, cb: *const c_char, ca_len: c_int, cb_len: c_int) -> c_int {
    dyload_lib().lsame_.unwrap()(ca, cb, ca_len, cb_len)
}

pub unsafe fn xerbla_blis_impl(
    srname: *const bla_character,
    info: *const bla_integer,
    srname_len: ftnlen,
) {
    dyload_lib().xerbla_blis_impl.unwrap()(srname, info, srname_len)
}

pub unsafe fn xerbla_(srname: *const bla_character, info: *const bla_integer, srname_len: ftnlen) {
    dyload_lib().xerbla_.unwrap()(srname, info, srname_len)
}

pub unsafe fn xerbla_array_blis_impl(
    srname: *const bla_character,
    srname_len: bla_integer,
    info: *const bla_integer,
) {
    dyload_lib().xerbla_array_blis_impl.unwrap()(srname, srname_len, info)
}

pub unsafe fn xerbla_array_(
    srname: *const bla_character,
    srname_len: bla_integer,
    info: *const bla_integer,
) {
    dyload_lib().xerbla_array_.unwrap()(srname, srname_len, info)
}

pub unsafe fn isamax_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamax_.unwrap()(n, x, incx)
}

pub unsafe fn isamax_blis_impl(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamax_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn idamax_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamax_.unwrap()(n, x, incx)
}

pub unsafe fn idamax_blis_impl(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamax_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn icamax_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().icamax_.unwrap()(n, x, incx)
}

pub unsafe fn icamax_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().icamax_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn izamax_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().izamax_.unwrap()(n, x, incx)
}

pub unsafe fn izamax_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().izamax_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn sasum_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().sasum_.unwrap()(n, x, incx)
}

pub unsafe fn sasum_blis_impl(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().sasum_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn dasum_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dasum_.unwrap()(n, x, incx)
}

pub unsafe fn dasum_blis_impl(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dasum_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn scasum_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().scasum_.unwrap()(n, x, incx)
}

pub unsafe fn scasum_blis_impl(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().scasum_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn dzasum_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().dzasum_.unwrap()(n, x, incx)
}

pub unsafe fn dzasum_blis_impl(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().dzasum_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn saxpy_(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn saxpy_blis_impl(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpy_blis_impl.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn daxpy_(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn daxpy_blis_impl(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpy_blis_impl.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn caxpy_(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn caxpy_blis_impl(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpy_blis_impl.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn zaxpy_(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpy_.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn zaxpy_blis_impl(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpy_blis_impl.unwrap()(n, alpha, x, incx, y, incy)
}

pub unsafe fn saxpby_(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpby_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn saxpby_blis_impl(
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().saxpby_blis_impl.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn daxpby_(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpby_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn daxpby_blis_impl(
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().daxpby_blis_impl.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn caxpby_(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpby_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn caxpby_blis_impl(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().caxpby_blis_impl.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn zaxpby_(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpby_.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn zaxpby_blis_impl(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zaxpby_blis_impl.unwrap()(n, alpha, x, incx, beta, y, incy)
}

pub unsafe fn scopy_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().scopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn scopy_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().scopy_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dcopy_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dcopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dcopy_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dcopy_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ccopy_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().ccopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ccopy_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().ccopy_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zcopy_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zcopy_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zcopy_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zcopy_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn sdot_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdot_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn sdot_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdot_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ddot_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().ddot_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn ddot_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().ddot_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotc_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotc_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotc_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotc_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotu_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotu_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cdotu_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
) -> scomplex {
    dyload_lib().cdotu_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotc_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotc_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotc_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotc_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotu_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotu_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zdotu_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
) -> dcomplex {
    dyload_lib().zdotu_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn sdsdot_(
    n: *const f77_int,
    sb: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdsdot_.unwrap()(n, sb, x, incx, y, incy)
}

pub unsafe fn sdsdot_blis_impl(
    n: *const f77_int,
    sb: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
) -> f32 {
    dyload_lib().sdsdot_blis_impl.unwrap()(n, sb, x, incx, y, incy)
}

pub unsafe fn dsdot_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().dsdot_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dsdot_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
) -> f64 {
    dyload_lib().dsdot_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn snrm2_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().snrm2_.unwrap()(n, x, incx)
}

pub unsafe fn snrm2_blis_impl(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f32 {
    dyload_lib().snrm2_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn dnrm2_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dnrm2_.unwrap()(n, x, incx)
}

pub unsafe fn dnrm2_blis_impl(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f64 {
    dyload_lib().dnrm2_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn scnrm2_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().scnrm2_.unwrap()(n, x, incx)
}

pub unsafe fn scnrm2_blis_impl(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f32 {
    dyload_lib().scnrm2_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn dznrm2_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().dznrm2_.unwrap()(n, x, incx)
}

pub unsafe fn dznrm2_blis_impl(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f64 {
    dyload_lib().dznrm2_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn srot_(
    n: *const bla_integer,
    sx: *mut bla_real,
    incx: *const bla_integer,
    sy: *mut bla_real,
    incy: *const bla_integer,
    c__: *const bla_real,
    s: *const bla_real,
) -> c_int {
    dyload_lib().srot_.unwrap()(n, sx, incx, sy, incy, c__, s)
}

pub unsafe fn drot_(
    n: *const bla_integer,
    dx: *mut bla_double,
    incx: *const bla_integer,
    dy: *mut bla_double,
    incy: *const bla_integer,
    c__: *const bla_double,
    s: *const bla_double,
) -> c_int {
    dyload_lib().drot_.unwrap()(n, dx, incx, dy, incy, c__, s)
}

pub unsafe fn csrot_(
    n: *const bla_integer,
    cx: *mut bla_scomplex,
    incx: *const bla_integer,
    cy: *mut bla_scomplex,
    incy: *const bla_integer,
    c__: *const bla_real,
    s: *const bla_real,
) -> c_int {
    dyload_lib().csrot_.unwrap()(n, cx, incx, cy, incy, c__, s)
}

pub unsafe fn zdrot_(
    n: *const bla_integer,
    zx: *mut bla_dcomplex,
    incx: *const bla_integer,
    zy: *mut bla_dcomplex,
    incy: *const bla_integer,
    c__: *const bla_double,
    s: *const bla_double,
) -> c_int {
    dyload_lib().zdrot_.unwrap()(n, zx, incx, zy, incy, c__, s)
}

pub unsafe fn srot_blis_impl(
    n: *const bla_integer,
    sx: *mut bla_real,
    incx: *const bla_integer,
    sy: *mut bla_real,
    incy: *const bla_integer,
    c__: *const bla_real,
    s: *const bla_real,
) -> c_int {
    dyload_lib().srot_blis_impl.unwrap()(n, sx, incx, sy, incy, c__, s)
}

pub unsafe fn drot_blis_impl(
    n: *const bla_integer,
    dx: *mut bla_double,
    incx: *const bla_integer,
    dy: *mut bla_double,
    incy: *const bla_integer,
    c__: *const bla_double,
    s: *const bla_double,
) -> c_int {
    dyload_lib().drot_blis_impl.unwrap()(n, dx, incx, dy, incy, c__, s)
}

pub unsafe fn csrot_blis_impl(
    n: *const bla_integer,
    cx: *mut bla_scomplex,
    incx: *const bla_integer,
    cy: *mut bla_scomplex,
    incy: *const bla_integer,
    c__: *const bla_real,
    s: *const bla_real,
) -> c_int {
    dyload_lib().csrot_blis_impl.unwrap()(n, cx, incx, cy, incy, c__, s)
}

pub unsafe fn zdrot_blis_impl(
    n: *const bla_integer,
    zx: *mut bla_dcomplex,
    incx: *const bla_integer,
    zy: *mut bla_dcomplex,
    incy: *const bla_integer,
    c__: *const bla_double,
    s: *const bla_double,
) -> c_int {
    dyload_lib().zdrot_blis_impl.unwrap()(n, zx, incx, zy, incy, c__, s)
}

pub unsafe fn srotg_(
    sa: *mut bla_real,
    sb: *mut bla_real,
    c__: *mut bla_real,
    s: *mut bla_real,
) -> c_int {
    dyload_lib().srotg_.unwrap()(sa, sb, c__, s)
}

pub unsafe fn drotg_(
    da: *mut bla_double,
    db: *mut bla_double,
    c__: *mut bla_double,
    s: *mut bla_double,
) -> c_int {
    dyload_lib().drotg_.unwrap()(da, db, c__, s)
}

pub unsafe fn crotg_(
    ca: *mut bla_scomplex,
    cb: *mut bla_scomplex,
    c__: *mut bla_real,
    s: *mut bla_scomplex,
) -> c_int {
    dyload_lib().crotg_.unwrap()(ca, cb, c__, s)
}

pub unsafe fn zrotg_(
    ca: *mut bla_dcomplex,
    cb: *mut bla_dcomplex,
    c__: *mut bla_double,
    s: *mut bla_dcomplex,
) -> c_int {
    dyload_lib().zrotg_.unwrap()(ca, cb, c__, s)
}

pub unsafe fn srotg_blis_impl(
    sa: *mut bla_real,
    sb: *mut bla_real,
    c__: *mut bla_real,
    s: *mut bla_real,
) -> c_int {
    dyload_lib().srotg_blis_impl.unwrap()(sa, sb, c__, s)
}

pub unsafe fn drotg_blis_impl(
    da: *mut bla_double,
    db: *mut bla_double,
    c__: *mut bla_double,
    s: *mut bla_double,
) -> c_int {
    dyload_lib().drotg_blis_impl.unwrap()(da, db, c__, s)
}

pub unsafe fn crotg_blis_impl(
    ca: *mut bla_scomplex,
    cb: *mut bla_scomplex,
    c__: *mut bla_real,
    s: *mut bla_scomplex,
) -> c_int {
    dyload_lib().crotg_blis_impl.unwrap()(ca, cb, c__, s)
}

pub unsafe fn zrotg_blis_impl(
    ca: *mut bla_dcomplex,
    cb: *mut bla_dcomplex,
    c__: *mut bla_double,
    s: *mut bla_dcomplex,
) -> c_int {
    dyload_lib().zrotg_blis_impl.unwrap()(ca, cb, c__, s)
}

pub unsafe fn srotm_(
    n: *const bla_integer,
    sx: *mut bla_real,
    incx: *const bla_integer,
    sy: *mut bla_real,
    incy: *const bla_integer,
    sparam: *const bla_real,
) -> c_int {
    dyload_lib().srotm_.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn drotm_(
    n: *const bla_integer,
    dx: *mut bla_double,
    incx: *const bla_integer,
    dy: *mut bla_double,
    incy: *const bla_integer,
    dparam: *const bla_double,
) -> c_int {
    dyload_lib().drotm_.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn srotm_blis_impl(
    n: *const bla_integer,
    sx: *mut bla_real,
    incx: *const bla_integer,
    sy: *mut bla_real,
    incy: *const bla_integer,
    sparam: *const bla_real,
) -> c_int {
    dyload_lib().srotm_blis_impl.unwrap()(n, sx, incx, sy, incy, sparam)
}

pub unsafe fn drotm_blis_impl(
    n: *const bla_integer,
    dx: *mut bla_double,
    incx: *const bla_integer,
    dy: *mut bla_double,
    incy: *const bla_integer,
    dparam: *const bla_double,
) -> c_int {
    dyload_lib().drotm_blis_impl.unwrap()(n, dx, incx, dy, incy, dparam)
}

pub unsafe fn srotmg_(
    sd1: *mut bla_real,
    sd2: *mut bla_real,
    sx1: *mut bla_real,
    sy1: *const bla_real,
    sparam: *mut bla_real,
) -> c_int {
    dyload_lib().srotmg_.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn drotmg_(
    dd1: *mut bla_double,
    dd2: *mut bla_double,
    dx1: *mut bla_double,
    dy1: *const bla_double,
    dparam: *mut bla_double,
) -> c_int {
    dyload_lib().drotmg_.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn srotmg_blis_impl(
    sd1: *mut bla_real,
    sd2: *mut bla_real,
    sx1: *mut bla_real,
    sy1: *const bla_real,
    sparam: *mut bla_real,
) -> c_int {
    dyload_lib().srotmg_blis_impl.unwrap()(sd1, sd2, sx1, sy1, sparam)
}

pub unsafe fn drotmg_blis_impl(
    dd1: *mut bla_double,
    dd2: *mut bla_double,
    dx1: *mut bla_double,
    dy1: *const bla_double,
    dparam: *mut bla_double,
) -> c_int {
    dyload_lib().drotmg_blis_impl.unwrap()(dd1, dd2, dx1, dy1, dparam)
}

pub unsafe fn sscal_(n: *const f77_int, alpha: *const f32, x: *mut f32, incx: *const f77_int) {
    dyload_lib().sscal_.unwrap()(n, alpha, x, incx)
}

pub unsafe fn sscal_blis_impl(
    n: *const f77_int,
    alpha: *const f32,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().sscal_blis_impl.unwrap()(n, alpha, x, incx)
}

pub unsafe fn dscal_(n: *const f77_int, alpha: *const f64, x: *mut f64, incx: *const f77_int) {
    dyload_lib().dscal_.unwrap()(n, alpha, x, incx)
}

pub unsafe fn dscal_blis_impl(
    n: *const f77_int,
    alpha: *const f64,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dscal_blis_impl.unwrap()(n, alpha, x, incx)
}

pub unsafe fn cscal_(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().cscal_.unwrap()(n, alpha, x, incx)
}

pub unsafe fn cscal_blis_impl(
    n: *const f77_int,
    alpha: *const scomplex,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().cscal_blis_impl.unwrap()(n, alpha, x, incx)
}

pub unsafe fn zscal_(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zscal_.unwrap()(n, alpha, x, incx)
}

pub unsafe fn zscal_blis_impl(
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zscal_blis_impl.unwrap()(n, alpha, x, incx)
}

pub unsafe fn csscal_(
    n: *const f77_int,
    alpha: *const f32,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().csscal_.unwrap()(n, alpha, x, incx)
}

pub unsafe fn csscal_blis_impl(
    n: *const f77_int,
    alpha: *const f32,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().csscal_blis_impl.unwrap()(n, alpha, x, incx)
}

pub unsafe fn zdscal_(
    n: *const f77_int,
    alpha: *const f64,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zdscal_.unwrap()(n, alpha, x, incx)
}

pub unsafe fn zdscal_blis_impl(
    n: *const f77_int,
    alpha: *const f64,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().zdscal_blis_impl.unwrap()(n, alpha, x, incx)
}

pub unsafe fn sswap_(
    n: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn sswap_blis_impl(
    n: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sswap_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dswap_(
    n: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn dswap_blis_impl(
    n: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dswap_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cswap_(
    n: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn cswap_blis_impl(
    n: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cswap_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zswap_(
    n: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zswap_.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn zswap_blis_impl(
    n: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zswap_blis_impl.unwrap()(n, x, incx, y, incy)
}

pub unsafe fn isamaxsub_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isamaxsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn isamaxsub_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isamaxsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn idamaxsub_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idamaxsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn idamaxsub_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idamaxsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn icamaxsub_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icamaxsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn icamaxsub_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icamaxsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn izamaxsub_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izamaxsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn izamaxsub_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izamaxsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn sasumsub_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().sasumsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn sasumsub_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sasumsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn dasumsub_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().dasumsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn dasumsub_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dasumsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn scasumsub_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scasumsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn scasumsub_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scasumsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn dzasumsub_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dzasumsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn dzasumsub_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dzasumsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn sdotsub_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sdotsub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn sdotsub_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sdotsub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ddotsub_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().ddotsub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn ddotsub_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().ddotsub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn cdotcsub_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotcsub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn cdotcsub_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotcsub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn cdotusub_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotusub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn cdotusub_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    rval: *mut scomplex,
) {
    dyload_lib().cdotusub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotcsub_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotcsub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotcsub_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotcsub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotusub_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotusub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn zdotusub_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    rval: *mut dcomplex,
) {
    dyload_lib().zdotusub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn sdsdotsub_(
    n: *const f77_int,
    sb: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sdsdotsub_.unwrap()(n, sb, x, incx, y, incy, rval)
}

pub unsafe fn sdsdotsub_blis_impl(
    n: *const f77_int,
    sb: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().sdsdotsub_blis_impl.unwrap()(n, sb, x, incx, y, incy, rval)
}

pub unsafe fn dsdotsub_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dsdotsub_.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn dsdotsub_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dsdotsub_blis_impl.unwrap()(n, x, incx, y, incy, rval)
}

pub unsafe fn snrm2sub_(n: *const f77_int, x: *const f32, incx: *const f77_int, rval: *mut f32) {
    dyload_lib().snrm2sub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn snrm2sub_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().snrm2sub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn dnrm2sub_(n: *const f77_int, x: *const f64, incx: *const f77_int, rval: *mut f64) {
    dyload_lib().dnrm2sub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn dnrm2sub_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dnrm2sub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn scnrm2sub_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scnrm2sub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn scnrm2sub_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f32,
) {
    dyload_lib().scnrm2sub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn dznrm2sub_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dznrm2sub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn dznrm2sub_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f64,
) {
    dyload_lib().dznrm2sub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn sgemv_(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sgemv_blis_impl(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().sgemv_blis_impl.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgemv_(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgemv_blis_impl(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dgemv_blis_impl.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgemv_(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgemv_blis_impl(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().cgemv_blis_impl.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgemv_(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zgemv_.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgemv_blis_impl(
    transa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zgemv_blis_impl.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sger_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().sger_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn sger_blis_impl(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().sger_blis_impl.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dger_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dger_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dger_blis_impl(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dger_blis_impl.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgerc_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgerc_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgerc_blis_impl(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgerc_blis_impl.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgeru_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgeru_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cgeru_blis_impl(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cgeru_blis_impl.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgerc_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgerc_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgerc_blis_impl(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgerc_blis_impl.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgeru_(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgeru_.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zgeru_blis_impl(
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zgeru_blis_impl.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn chemv_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chemv_.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn chemv_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    beta: *const scomplex,
    y: *mut scomplex,
    incy: *const f77_int,
) {
    dyload_lib().chemv_blis_impl.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhemv_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhemv_.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhemv_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    beta: *const dcomplex,
    y: *mut dcomplex,
    incy: *const f77_int,
) {
    dyload_lib().zhemv_blis_impl.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cher_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher_.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn cher_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    x: *const scomplex,
    incx: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher_blis_impl.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn zher_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher_.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn zher_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    x: *const dcomplex,
    incx: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher_blis_impl.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn cher2_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher2_.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn cher2_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const scomplex,
    x: *const scomplex,
    incx: *const f77_int,
    y: *const scomplex,
    incy: *const f77_int,
    a: *mut scomplex,
    lda: *const f77_int,
) {
    dyload_lib().cher2_blis_impl.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zher2_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher2_.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn zher2_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const dcomplex,
    x: *const dcomplex,
    incx: *const f77_int,
    y: *const dcomplex,
    incy: *const f77_int,
    a: *mut dcomplex,
    lda: *const f77_int,
) {
    dyload_lib().zher2_blis_impl.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ssymv_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().ssymv_.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssymv_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    beta: *const f32,
    y: *mut f32,
    incy: *const f77_int,
) {
    dyload_lib().ssymv_blis_impl.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsymv_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dsymv_.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsymv_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    beta: *const f64,
    y: *mut f64,
    incy: *const f77_int,
) {
    dyload_lib().dsymv_blis_impl.unwrap()(uploa, m, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssyr_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr_.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn ssyr_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr_blis_impl.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn dsyr_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr_.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn dsyr_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr_blis_impl.unwrap()(uploa, m, alpha, x, incx, a, lda)
}

pub unsafe fn ssyr2_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr2_.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn ssyr2_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f32,
    x: *const f32,
    incx: *const f77_int,
    y: *const f32,
    incy: *const f77_int,
    a: *mut f32,
    lda: *const f77_int,
) {
    dyload_lib().ssyr2_blis_impl.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dsyr2_(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr2_.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn dsyr2_blis_impl(
    uploa: *const f77_char,
    m: *const f77_int,
    alpha: *const f64,
    x: *const f64,
    incx: *const f77_int,
    y: *const f64,
    incy: *const f77_int,
    a: *mut f64,
    lda: *const f77_int,
) {
    dyload_lib().dsyr2_blis_impl.unwrap()(uploa, m, alpha, x, incx, y, incy, a, lda)
}

pub unsafe fn strmv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strmv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn strmv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strmv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn dtrmv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrmv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn dtrmv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrmv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ctrmv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrmv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ctrmv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrmv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ztrmv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrmv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ztrmv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrmv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn strsv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strsv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn strsv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    x: *mut f32,
    incx: *const f77_int,
) {
    dyload_lib().strsv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn dtrsv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrsv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn dtrsv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    x: *mut f64,
    incx: *const f77_int,
) {
    dyload_lib().dtrsv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ctrsv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrsv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ctrsv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const scomplex,
    lda: *const f77_int,
    x: *mut scomplex,
    incx: *const f77_int,
) {
    dyload_lib().ctrsv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ztrsv_(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrsv_.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn ztrsv_blis_impl(
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    a: *const dcomplex,
    lda: *const f77_int,
    x: *mut dcomplex,
    incx: *const f77_int,
) {
    dyload_lib().ztrsv_blis_impl.unwrap()(uploa, transa, diaga, m, a, lda, x, incx)
}

pub unsafe fn chpmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_scomplex,
    ap: *const bla_scomplex,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    beta: *const bla_scomplex,
    y: *mut bla_scomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().chpmv_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn zhpmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_dcomplex,
    ap: *const bla_dcomplex,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    beta: *const bla_dcomplex,
    y: *mut bla_dcomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().zhpmv_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn chpmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_scomplex,
    ap: *const bla_scomplex,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    beta: *const bla_scomplex,
    y: *mut bla_scomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().chpmv_blis_impl.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn zhpmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_dcomplex,
    ap: *const bla_dcomplex,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    beta: *const bla_dcomplex,
    y: *mut bla_dcomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().zhpmv_blis_impl.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn chpr_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    ap: *mut bla_scomplex,
) -> c_int {
    dyload_lib().chpr_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn zhpr_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    ap: *mut bla_dcomplex,
) -> c_int {
    dyload_lib().zhpr_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn chpr_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    ap: *mut bla_scomplex,
) -> c_int {
    dyload_lib().chpr_blis_impl.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn zhpr_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    ap: *mut bla_dcomplex,
) -> c_int {
    dyload_lib().zhpr_blis_impl.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn chpr2_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_scomplex,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    y: *const bla_scomplex,
    incy: *const bla_integer,
    ap: *mut bla_scomplex,
) -> c_int {
    dyload_lib().chpr2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn zhpr2_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_dcomplex,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    y: *const bla_dcomplex,
    incy: *const bla_integer,
    ap: *mut bla_dcomplex,
) -> c_int {
    dyload_lib().zhpr2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn chpr2_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_scomplex,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    y: *const bla_scomplex,
    incy: *const bla_integer,
    ap: *mut bla_scomplex,
) -> c_int {
    dyload_lib().chpr2_blis_impl.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn zhpr2_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_dcomplex,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    y: *const bla_dcomplex,
    incy: *const bla_integer,
    ap: *mut bla_dcomplex,
) -> c_int {
    dyload_lib().zhpr2_blis_impl.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn dspmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    ap: *const bla_double,
    x: *const bla_double,
    incx: *const bla_integer,
    beta: *const bla_double,
    y: *mut bla_double,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().dspmv_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn sspmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    ap: *const bla_real,
    x: *const bla_real,
    incx: *const bla_integer,
    beta: *const bla_real,
    y: *mut bla_real,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().sspmv_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn dspmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    ap: *const bla_double,
    x: *const bla_double,
    incx: *const bla_integer,
    beta: *const bla_double,
    y: *mut bla_double,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().dspmv_blis_impl.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn sspmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    ap: *const bla_real,
    x: *const bla_real,
    incx: *const bla_integer,
    beta: *const bla_real,
    y: *mut bla_real,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().sspmv_blis_impl.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
}

pub unsafe fn dspr_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    x: *const bla_double,
    incx: *const bla_integer,
    ap: *mut bla_double,
) -> c_int {
    dyload_lib().dspr_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn sspr_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    x: *const bla_real,
    incx: *const bla_integer,
    ap: *mut bla_real,
) -> c_int {
    dyload_lib().sspr_.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn dspr_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    x: *const bla_double,
    incx: *const bla_integer,
    ap: *mut bla_double,
) -> c_int {
    dyload_lib().dspr_blis_impl.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn sspr_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    x: *const bla_real,
    incx: *const bla_integer,
    ap: *mut bla_real,
) -> c_int {
    dyload_lib().sspr_blis_impl.unwrap()(uplo, n, alpha, x, incx, ap)
}

pub unsafe fn dspr2_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    x: *const bla_double,
    incx: *const bla_integer,
    y: *const bla_double,
    incy: *const bla_integer,
    ap: *mut bla_double,
) -> c_int {
    dyload_lib().dspr2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn sspr2_(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    x: *const bla_real,
    incx: *const bla_integer,
    y: *const bla_real,
    incy: *const bla_integer,
    ap: *mut bla_real,
) -> c_int {
    dyload_lib().sspr2_.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn dspr2_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_double,
    x: *const bla_double,
    incx: *const bla_integer,
    y: *const bla_double,
    incy: *const bla_integer,
    ap: *mut bla_double,
) -> c_int {
    dyload_lib().dspr2_blis_impl.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn sspr2_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    alpha: *const bla_real,
    x: *const bla_real,
    incx: *const bla_integer,
    y: *const bla_real,
    incy: *const bla_integer,
    ap: *mut bla_real,
) -> c_int {
    dyload_lib().sspr2_blis_impl.unwrap()(uplo, n, alpha, x, incx, y, incy, ap)
}

pub unsafe fn ctpmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_scomplex,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctpmv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_double,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtpmv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_real,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stpmv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_dcomplex,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztpmv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_scomplex,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctpmv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_double,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtpmv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_real,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stpmv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_dcomplex,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztpmv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_scomplex,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctpsv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_double,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtpsv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_real,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stpsv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_dcomplex,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztpsv_.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ctpsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_scomplex,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctpsv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn dtpsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_double,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtpsv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn stpsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_real,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stpsv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn ztpsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    ap: *const bla_dcomplex,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztpsv_blis_impl.unwrap()(uplo, trans, diag, n, ap, x, incx)
}

pub unsafe fn cgbmv_(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_scomplex,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    beta: *const bla_scomplex,
    y: *mut bla_scomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().cgbmv_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dgbmv_(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_double,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *const bla_double,
    incx: *const bla_integer,
    beta: *const bla_double,
    y: *mut bla_double,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().dgbmv_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn sgbmv_(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_real,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *const bla_real,
    incx: *const bla_integer,
    beta: *const bla_real,
    y: *mut bla_real,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().sgbmv_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zgbmv_(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_dcomplex,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    beta: *const bla_dcomplex,
    y: *mut bla_dcomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().zgbmv_.unwrap()(trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn cgbmv_blis_impl(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_scomplex,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    beta: *const bla_scomplex,
    y: *mut bla_scomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().cgbmv_blis_impl.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn dgbmv_blis_impl(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_double,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *const bla_double,
    incx: *const bla_integer,
    beta: *const bla_double,
    y: *mut bla_double,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().dgbmv_blis_impl.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn sgbmv_blis_impl(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_real,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *const bla_real,
    incx: *const bla_integer,
    beta: *const bla_real,
    y: *mut bla_real,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().sgbmv_blis_impl.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn zgbmv_blis_impl(
    trans: *const bla_character,
    m: *const bla_integer,
    n: *const bla_integer,
    kl: *const bla_integer,
    ku: *const bla_integer,
    alpha: *const bla_dcomplex,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    beta: *const bla_dcomplex,
    y: *mut bla_dcomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().zgbmv_blis_impl.unwrap()(
        trans, m, n, kl, ku, alpha, a, lda, x, incx, beta, y, incy,
    )
}

pub unsafe fn chbmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_scomplex,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    beta: *const bla_scomplex,
    y: *mut bla_scomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().chbmv_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhbmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_dcomplex,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    beta: *const bla_dcomplex,
    y: *mut bla_dcomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().zhbmv_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn chbmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_scomplex,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *const bla_scomplex,
    incx: *const bla_integer,
    beta: *const bla_scomplex,
    y: *mut bla_scomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().chbmv_blis_impl.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn zhbmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_dcomplex,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *const bla_dcomplex,
    incx: *const bla_integer,
    beta: *const bla_dcomplex,
    y: *mut bla_dcomplex,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().zhbmv_blis_impl.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsbmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_double,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *const bla_double,
    incx: *const bla_integer,
    beta: *const bla_double,
    y: *mut bla_double,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().dsbmv_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssbmv_(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_real,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *const bla_real,
    incx: *const bla_integer,
    beta: *const bla_real,
    y: *mut bla_real,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().ssbmv_.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn dsbmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_double,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *const bla_double,
    incx: *const bla_integer,
    beta: *const bla_double,
    y: *mut bla_double,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().dsbmv_blis_impl.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ssbmv_blis_impl(
    uplo: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    alpha: *const bla_real,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *const bla_real,
    incx: *const bla_integer,
    beta: *const bla_real,
    y: *mut bla_real,
    incy: *const bla_integer,
) -> c_int {
    dyload_lib().ssbmv_blis_impl.unwrap()(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy)
}

pub unsafe fn ctbmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctbmv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtbmv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stbmv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbmv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztbmv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctbmv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtbmv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stbmv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbmv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztbmv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctbsv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtbsv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stbsv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbsv_(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztbsv_.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ctbsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_scomplex,
    lda: *const bla_integer,
    x: *mut bla_scomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ctbsv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn dtbsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_double,
    lda: *const bla_integer,
    x: *mut bla_double,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().dtbsv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn stbsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_real,
    lda: *const bla_integer,
    x: *mut bla_real,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().stbsv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn ztbsv_blis_impl(
    uplo: *const bla_character,
    trans: *const bla_character,
    diag: *const bla_character,
    n: *const bla_integer,
    k: *const bla_integer,
    a: *const bla_dcomplex,
    lda: *const bla_integer,
    x: *mut bla_dcomplex,
    incx: *const bla_integer,
) -> c_int {
    dyload_lib().ztbsv_blis_impl.unwrap()(uplo, trans, diag, n, k, a, lda, x, incx)
}

pub unsafe fn sgemm_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn sgemm_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dgemm_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemm_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn cgemm_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemm_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn zgemm_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemm_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dzgemm_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().dzgemm_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dzgemm_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const f64,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().dzgemm_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn chemm_(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().chemm_.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn chemm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().chemm_blis_impl.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zhemm_(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zhemm_.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zhemm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zhemm_blis_impl.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cherk_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cherk_.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn cherk_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cherk_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zherk_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zherk_.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zherk_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zherk_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn cher2k_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cher2k_.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cher2k_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cher2k_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zher2k_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zher2k_.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zher2k_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zher2k_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssymm_(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssymm_.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssymm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssymm_blis_impl.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsymm_(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsymm_.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsymm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsymm_blis_impl.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csymm_(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csymm_.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csymm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csymm_blis_impl.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsymm_(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsymm_.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsymm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsymm_blis_impl.unwrap()(side, uploa, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssyrk_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyrk_.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ssyrk_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyrk_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn dsyrk_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyrk_.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn dsyrk_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyrk_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn csyrk_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyrk_.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn csyrk_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyrk_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zsyrk_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyrk_.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn zsyrk_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyrk_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, beta, c, ldc)
}

pub unsafe fn ssyr2k_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyr2k_.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn ssyr2k_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().ssyr2k_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsyr2k_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyr2k_.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dsyr2k_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dsyr2k_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csyr2k_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyr2k_.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn csyr2k_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().csyr2k_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsyr2k_(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyr2k_.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zsyr2k_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    m: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zsyr2k_blis_impl.unwrap()(uploc, transa, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn strmm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strmm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strmm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strmm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrmm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrmm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrmm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrmm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrmm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrmm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrmm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrmm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrmm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrmm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrmm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrmm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strsm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strsm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn strsm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *mut f32,
    ldb: *const f77_int,
) {
    dyload_lib().strsm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrsm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrsm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn dtrsm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *mut f64,
    ldb: *const f77_int,
) {
    dyload_lib().dtrsm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrsm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrsm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ctrsm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *mut scomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ctrsm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrsm_(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrsm_.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn ztrsm_blis_impl(
    side: *const f77_char,
    uploa: *const f77_char,
    transa: *const f77_char,
    diaga: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *mut dcomplex,
    ldb: *const f77_int,
) {
    dyload_lib().ztrsm_blis_impl.unwrap()(side, uploa, transa, diaga, m, n, alpha, a, lda, b, ldb)
}

pub unsafe fn sgemmt_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemmt_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn sgemmt_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemmt_blis_impl.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn dgemmt_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemmt_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemmt_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemmt_blis_impl.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn cgemmt_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemmt_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemmt_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemmt_blis_impl.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn zgemmt_(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemmt_.unwrap()(uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemmt_blis_impl(
    uploc: *const f77_char,
    transa: *const f77_char,
    transb: *const f77_char,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemmt_blis_impl.unwrap()(
        uploc, transa, transb, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn sgemm_compute_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    lda: *const f77_int,
    b: *const f32,
    ldb: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    ldc: *const f77_int,
) {
    dyload_lib().sgemm_compute_.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn sgemm_compute_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f32,
    rs_a: *const f77_int,
    cs_a: *const f77_int,
    b: *const f32,
    rs_b: *const f77_int,
    cs_b: *const f77_int,
    beta: *const f32,
    c: *mut f32,
    rs_c: *const f77_int,
    cs_c: *const f77_int,
) {
    dyload_lib().sgemm_compute_blis_impl.unwrap()(
        transa, transb, m, n, k, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn dgemm_compute_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    lda: *const f77_int,
    b: *const f64,
    ldb: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    ldc: *const f77_int,
) {
    dyload_lib().dgemm_compute_.unwrap()(transa, transb, m, n, k, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn dgemm_compute_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    a: *const f64,
    rs_a: *const f77_int,
    cs_a: *const f77_int,
    b: *const f64,
    rs_b: *const f77_int,
    cs_b: *const f77_int,
    beta: *const f64,
    c: *mut f64,
    rs_c: *const f77_int,
    cs_c: *const f77_int,
) {
    dyload_lib().dgemm_compute_blis_impl.unwrap()(
        transa, transb, m, n, k, a, rs_a, cs_a, b, rs_b, cs_b, beta, c, rs_c, cs_c,
    )
}

pub unsafe fn sgemm_batch_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().sgemm_batch_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn sgemm_batch_blis_impl(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f32,
    a_array: *mut *const f32,
    lda_array: *const f77_int,
    b_array: *mut *const f32,
    ldb_array: *const f77_int,
    beta_array: *const f32,
    c_array: *mut *mut f32,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().sgemm_batch_blis_impl.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn dgemm_batch_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().dgemm_batch_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn dgemm_batch_blis_impl(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const f64,
    a_array: *mut *const f64,
    lda_array: *const f77_int,
    b_array: *mut *const f64,
    ldb_array: *const f77_int,
    beta_array: *const f64,
    c_array: *mut *mut f64,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().dgemm_batch_blis_impl.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cgemm_batch_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().cgemm_batch_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cgemm_batch_blis_impl(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const scomplex,
    a_array: *mut *const scomplex,
    lda_array: *const f77_int,
    b_array: *mut *const scomplex,
    ldb_array: *const f77_int,
    beta_array: *const scomplex,
    c_array: *mut *mut scomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().cgemm_batch_blis_impl.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn zgemm_batch_(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().zgemm_batch_.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn zgemm_batch_blis_impl(
    transa_array: *const f77_char,
    transb_array: *const f77_char,
    m_array: *const f77_int,
    n_array: *const f77_int,
    k_array: *const f77_int,
    alpha_array: *const dcomplex,
    a_array: *mut *const dcomplex,
    lda_array: *const f77_int,
    b_array: *mut *const dcomplex,
    ldb_array: *const f77_int,
    beta_array: *const dcomplex,
    c_array: *mut *mut dcomplex,
    ldc_array: *const f77_int,
    group_count: *const f77_int,
    group_size: *const f77_int,
) {
    dyload_lib().zgemm_batch_blis_impl.unwrap()(
        transa_array,
        transb_array,
        m_array,
        n_array,
        k_array,
        alpha_array,
        a_array,
        lda_array,
        b_array,
        ldb_array,
        beta_array,
        c_array,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cgemm3m_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm3m_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn cgemm3m_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const scomplex,
    a: *const scomplex,
    lda: *const f77_int,
    b: *const scomplex,
    ldb: *const f77_int,
    beta: *const scomplex,
    c: *mut scomplex,
    ldc: *const f77_int,
) {
    dyload_lib().cgemm3m_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn zgemm3m_(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm3m_.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
}

pub unsafe fn zgemm3m_blis_impl(
    transa: *const f77_char,
    transb: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const dcomplex,
    a: *const dcomplex,
    lda: *const f77_int,
    b: *const dcomplex,
    ldb: *const f77_int,
    beta: *const dcomplex,
    c: *mut dcomplex,
    ldc: *const f77_int,
) {
    dyload_lib().zgemm3m_blis_impl.unwrap()(
        transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc,
    )
}

pub unsafe fn sgemm_pack_get_size_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().sgemm_pack_get_size_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn sgemm_pack_get_size_blis_impl(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().sgemm_pack_get_size_blis_impl.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn dgemm_pack_get_size_(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().dgemm_pack_get_size_.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn dgemm_pack_get_size_blis_impl(
    identifier: *const f77_char,
    pm: *const f77_int,
    pn: *const f77_int,
    pk: *const f77_int,
) -> f77_int {
    dyload_lib().dgemm_pack_get_size_blis_impl.unwrap()(identifier, pm, pn, pk)
}

pub unsafe fn sgemm_pack_(
    identifier: *const f77_char,
    trans: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().sgemm_pack_.unwrap()(identifier, trans, m, n, k, alpha, src, pld, dest)
}

pub unsafe fn sgemm_pack_blis_impl(
    identifier: *const f77_char,
    trans: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f32,
    src: *const f32,
    pld: *const f77_int,
    dest: *mut f32,
) {
    dyload_lib().sgemm_pack_blis_impl.unwrap()(identifier, trans, m, n, k, alpha, src, pld, dest)
}

pub unsafe fn dgemm_pack_(
    identifier: *const f77_char,
    trans: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().dgemm_pack_.unwrap()(identifier, trans, m, n, k, alpha, src, pld, dest)
}

pub unsafe fn dgemm_pack_blis_impl(
    identifier: *const f77_char,
    trans: *const f77_char,
    m: *const f77_int,
    n: *const f77_int,
    k: *const f77_int,
    alpha: *const f64,
    src: *const f64,
    pld: *const f77_int,
    dest: *mut f64,
) {
    dyload_lib().dgemm_pack_blis_impl.unwrap()(identifier, trans, m, n, k, alpha, src, pld, dest)
}

pub unsafe fn somatadd_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f32,
    A: *const f32,
    lda: *mut f77_int,
    beta: *const f32,
    B: *const f32,
    ldb: *mut f77_int,
    C: *mut f32,
    ldc: *mut f77_int,
) {
    dyload_lib().somatadd_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn domatadd_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const f64,
    A: *const f64,
    lda: *mut f77_int,
    beta: *const f64,
    B: *const f64,
    ldb: *mut f77_int,
    C: *mut f64,
    ldc: *mut f77_int,
) {
    dyload_lib().domatadd_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn comatadd_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const scomplex,
    A: *const scomplex,
    lda: *mut f77_int,
    beta: *const scomplex,
    B: *mut scomplex,
    ldb: *mut f77_int,
    C: *mut scomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().comatadd_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn zomatadd_(
    transa: *mut f77_char,
    transb: *mut f77_char,
    m: *mut f77_int,
    n: *mut f77_int,
    alpha: *const dcomplex,
    A: *const dcomplex,
    lda: *mut f77_int,
    beta: *const dcomplex,
    B: *mut dcomplex,
    ldb: *mut f77_int,
    C: *mut dcomplex,
    ldc: *mut f77_int,
) {
    dyload_lib().zomatadd_.unwrap()(transa, transb, m, n, alpha, A, lda, beta, B, ldb, C, ldc)
}

pub unsafe fn somatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
) {
    dyload_lib().somatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn domatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
) {
    dyload_lib().domatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn comatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().comatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn zomatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
) {
    dyload_lib().zomatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, bptr, ldb)
}

pub unsafe fn somatcopy2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *const f32,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f32,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().somatcopy2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn domatcopy2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *const f64,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut f64,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().domatcopy2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn comatcopy2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *const scomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut scomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().comatcopy2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn zomatcopy2_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *const dcomplex,
    lda: *mut f77_int,
    stridea: *mut f77_int,
    bptr: *mut dcomplex,
    ldb: *mut f77_int,
    strideb: *mut f77_int,
) {
    dyload_lib().zomatcopy2_.unwrap()(
        trans, rows, cols, alpha, aptr, lda, stridea, bptr, ldb, strideb,
    )
}

pub unsafe fn simatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f32,
    aptr: *mut f32,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().simatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn dimatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const f64,
    aptr: *mut f64,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().dimatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn cimatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const scomplex,
    aptr: *mut scomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().cimatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn zimatcopy_(
    trans: *mut f77_char,
    rows: *mut f77_int,
    cols: *mut f77_int,
    alpha: *const dcomplex,
    aptr: *mut dcomplex,
    lda: *mut f77_int,
    ldb: *mut f77_int,
) {
    dyload_lib().zimatcopy_.unwrap()(trans, rows, cols, alpha, aptr, lda, ldb)
}

pub unsafe fn bli_thread_set_ways_(
    jc: *const f77_int,
    pc: *const f77_int,
    ic: *const f77_int,
    jr: *const f77_int,
    ir: *const f77_int,
) {
    dyload_lib().bli_thread_set_ways_.unwrap()(jc, pc, ic, jr, ir)
}

pub unsafe fn bli_thread_set_num_threads_(nt: *const f77_int) {
    dyload_lib().bli_thread_set_num_threads_.unwrap()(nt)
}

pub unsafe fn bli_thread_get_jc_nt_() -> f77_int {
    dyload_lib().bli_thread_get_jc_nt_.unwrap()()
}

pub unsafe fn bli_thread_get_pc_nt_() -> f77_int {
    dyload_lib().bli_thread_get_pc_nt_.unwrap()()
}

pub unsafe fn bli_thread_get_ic_nt_() -> f77_int {
    dyload_lib().bli_thread_get_ic_nt_.unwrap()()
}

pub unsafe fn bli_thread_get_jr_nt_() -> f77_int {
    dyload_lib().bli_thread_get_jr_nt_.unwrap()()
}

pub unsafe fn bli_thread_get_ir_nt_() -> f77_int {
    dyload_lib().bli_thread_get_ir_nt_.unwrap()()
}

pub unsafe fn bli_thread_get_num_threads_() -> f77_int {
    dyload_lib().bli_thread_get_num_threads_.unwrap()()
}

pub unsafe fn bli_info_get_info_value_() -> f77_int {
    dyload_lib().bli_info_get_info_value_.unwrap()()
}

pub unsafe fn scabs1_(z: *mut bla_scomplex) -> bla_real {
    dyload_lib().scabs1_.unwrap()(z)
}

pub unsafe fn dcabs1_(z: *mut bla_dcomplex) -> bla_double {
    dyload_lib().dcabs1_.unwrap()(z)
}

pub unsafe fn scabs1_blis_impl(z: *mut bla_scomplex) -> bla_real {
    dyload_lib().scabs1_blis_impl.unwrap()(z)
}

pub unsafe fn dcabs1_blis_impl(z: *mut bla_dcomplex) -> bla_double {
    dyload_lib().dcabs1_blis_impl.unwrap()(z)
}

pub unsafe fn isamin_(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamin_.unwrap()(n, x, incx)
}

pub unsafe fn isamin_blis_impl(n: *const f77_int, x: *const f32, incx: *const f77_int) -> f77_int {
    dyload_lib().isamin_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn idamin_(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamin_.unwrap()(n, x, incx)
}

pub unsafe fn idamin_blis_impl(n: *const f77_int, x: *const f64, incx: *const f77_int) -> f77_int {
    dyload_lib().idamin_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn icamin_(n: *const f77_int, x: *const scomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().icamin_.unwrap()(n, x, incx)
}

pub unsafe fn icamin_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().icamin_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn izamin_(n: *const f77_int, x: *const dcomplex, incx: *const f77_int) -> f77_int {
    dyload_lib().izamin_.unwrap()(n, x, incx)
}

pub unsafe fn izamin_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
) -> f77_int {
    dyload_lib().izamin_blis_impl.unwrap()(n, x, incx)
}

pub unsafe fn isaminsub_(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isaminsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn isaminsub_blis_impl(
    n: *const f77_int,
    x: *const f32,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().isaminsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn idaminsub_(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idaminsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn idaminsub_blis_impl(
    n: *const f77_int,
    x: *const f64,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().idaminsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn icaminsub_(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icaminsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn icaminsub_blis_impl(
    n: *const f77_int,
    x: *const scomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().icaminsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn izaminsub_(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izaminsub_.unwrap()(n, x, incx, rval)
}

pub unsafe fn izaminsub_blis_impl(
    n: *const f77_int,
    x: *const dcomplex,
    incx: *const f77_int,
    rval: *mut f77_int,
) {
    dyload_lib().izaminsub_blis_impl.unwrap()(n, x, incx, rval)
}

pub unsafe fn cblas_sdsdot(
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    Y: *const f32,
    incY: f77_int,
) -> f32 {
    dyload_lib().cblas_sdsdot.unwrap()(N, alpha, X, incX, Y, incY)
}

pub unsafe fn cblas_dsdot(
    N: f77_int,
    X: *const f32,
    incX: f77_int,
    Y: *const f32,
    incY: f77_int,
) -> f64 {
    dyload_lib().cblas_dsdot.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_sdot(
    N: f77_int,
    X: *const f32,
    incX: f77_int,
    Y: *const f32,
    incY: f77_int,
) -> f32 {
    dyload_lib().cblas_sdot.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_ddot(
    N: f77_int,
    X: *const f64,
    incX: f77_int,
    Y: *const f64,
    incY: f77_int,
) -> f64 {
    dyload_lib().cblas_ddot.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_cdotu_sub(
    N: f77_int,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    dotu: *mut c_void,
) {
    dyload_lib().cblas_cdotu_sub.unwrap()(N, X, incX, Y, incY, dotu)
}

pub unsafe fn cblas_cdotc_sub(
    N: f77_int,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    dotc: *mut c_void,
) {
    dyload_lib().cblas_cdotc_sub.unwrap()(N, X, incX, Y, incY, dotc)
}

pub unsafe fn cblas_zdotu_sub(
    N: f77_int,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    dotu: *mut c_void,
) {
    dyload_lib().cblas_zdotu_sub.unwrap()(N, X, incX, Y, incY, dotu)
}

pub unsafe fn cblas_zdotc_sub(
    N: f77_int,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    dotc: *mut c_void,
) {
    dyload_lib().cblas_zdotc_sub.unwrap()(N, X, incX, Y, incY, dotc)
}

pub unsafe fn cblas_snrm2(N: f77_int, X: *const f32, incX: f77_int) -> f32 {
    dyload_lib().cblas_snrm2.unwrap()(N, X, incX)
}

pub unsafe fn cblas_sasum(N: f77_int, X: *const f32, incX: f77_int) -> f32 {
    dyload_lib().cblas_sasum.unwrap()(N, X, incX)
}

pub unsafe fn cblas_dnrm2(N: f77_int, X: *const f64, incX: f77_int) -> f64 {
    dyload_lib().cblas_dnrm2.unwrap()(N, X, incX)
}

pub unsafe fn cblas_dasum(N: f77_int, X: *const f64, incX: f77_int) -> f64 {
    dyload_lib().cblas_dasum.unwrap()(N, X, incX)
}

pub unsafe fn cblas_scnrm2(N: f77_int, X: *const c_void, incX: f77_int) -> f32 {
    dyload_lib().cblas_scnrm2.unwrap()(N, X, incX)
}

pub unsafe fn cblas_scasum(N: f77_int, X: *const c_void, incX: f77_int) -> f32 {
    dyload_lib().cblas_scasum.unwrap()(N, X, incX)
}

pub unsafe fn cblas_dznrm2(N: f77_int, X: *const c_void, incX: f77_int) -> f64 {
    dyload_lib().cblas_dznrm2.unwrap()(N, X, incX)
}

pub unsafe fn cblas_dzasum(N: f77_int, X: *const c_void, incX: f77_int) -> f64 {
    dyload_lib().cblas_dzasum.unwrap()(N, X, incX)
}

pub unsafe fn cblas_isamax(N: f77_int, X: *const f32, incX: f77_int) -> f77_int {
    dyload_lib().cblas_isamax.unwrap()(N, X, incX)
}

pub unsafe fn cblas_idamax(N: f77_int, X: *const f64, incX: f77_int) -> f77_int {
    dyload_lib().cblas_idamax.unwrap()(N, X, incX)
}

pub unsafe fn cblas_icamax(N: f77_int, X: *const c_void, incX: f77_int) -> f77_int {
    dyload_lib().cblas_icamax.unwrap()(N, X, incX)
}

pub unsafe fn cblas_izamax(N: f77_int, X: *const c_void, incX: f77_int) -> f77_int {
    dyload_lib().cblas_izamax.unwrap()(N, X, incX)
}

pub unsafe fn cblas_sswap(N: f77_int, X: *mut f32, incX: f77_int, Y: *mut f32, incY: f77_int) {
    dyload_lib().cblas_sswap.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_scopy(N: f77_int, X: *const f32, incX: f77_int, Y: *mut f32, incY: f77_int) {
    dyload_lib().cblas_scopy.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_saxpy(
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_saxpy.unwrap()(N, alpha, X, incX, Y, incY)
}

pub unsafe fn cblas_saxpby(
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    beta: f32,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_saxpby.unwrap()(N, alpha, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_dswap(N: f77_int, X: *mut f64, incX: f77_int, Y: *mut f64, incY: f77_int) {
    dyload_lib().cblas_dswap.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_dcopy(N: f77_int, X: *const f64, incX: f77_int, Y: *mut f64, incY: f77_int) {
    dyload_lib().cblas_dcopy.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_daxpy(
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_daxpy.unwrap()(N, alpha, X, incX, Y, incY)
}

pub unsafe fn cblas_daxpby(
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    beta: f64,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_daxpby.unwrap()(N, alpha, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_cswap(
    N: f77_int,
    X: *mut c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_cswap.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_ccopy(
    N: f77_int,
    X: *const c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_ccopy.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_caxpy(
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_caxpy.unwrap()(N, alpha, X, incX, Y, incY)
}

pub unsafe fn cblas_caxpby(
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_caxpby.unwrap()(N, alpha, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_zswap(
    N: f77_int,
    X: *mut c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zswap.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_zcopy(
    N: f77_int,
    X: *const c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zcopy.unwrap()(N, X, incX, Y, incY)
}

pub unsafe fn cblas_zaxpy(
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zaxpy.unwrap()(N, alpha, X, incX, Y, incY)
}

pub unsafe fn cblas_zaxpby(
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zaxpby.unwrap()(N, alpha, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_srotg(a: *mut f32, b: *mut f32, c: *mut f32, s: *mut f32) {
    dyload_lib().cblas_srotg.unwrap()(a, b, c, s)
}

pub unsafe fn cblas_srotmg(d1: *mut f32, d2: *mut f32, b1: *mut f32, b2: f32, P: *mut f32) {
    dyload_lib().cblas_srotmg.unwrap()(d1, d2, b1, b2, P)
}

pub unsafe fn cblas_srot(
    N: f77_int,
    X: *mut f32,
    incX: f77_int,
    Y: *mut f32,
    incY: f77_int,
    c: f32,
    s: f32,
) {
    dyload_lib().cblas_srot.unwrap()(N, X, incX, Y, incY, c, s)
}

pub unsafe fn cblas_srotm(
    N: f77_int,
    X: *mut f32,
    incX: f77_int,
    Y: *mut f32,
    incY: f77_int,
    P: *const f32,
) {
    dyload_lib().cblas_srotm.unwrap()(N, X, incX, Y, incY, P)
}

pub unsafe fn cblas_drotg(a: *mut f64, b: *mut f64, c: *mut f64, s: *mut f64) {
    dyload_lib().cblas_drotg.unwrap()(a, b, c, s)
}

pub unsafe fn cblas_drotmg(d1: *mut f64, d2: *mut f64, b1: *mut f64, b2: f64, P: *mut f64) {
    dyload_lib().cblas_drotmg.unwrap()(d1, d2, b1, b2, P)
}

pub unsafe fn cblas_drot(
    N: f77_int,
    X: *mut f64,
    incX: f77_int,
    Y: *mut f64,
    incY: f77_int,
    c: f64,
    s: f64,
) {
    dyload_lib().cblas_drot.unwrap()(N, X, incX, Y, incY, c, s)
}

pub unsafe fn cblas_drotm(
    N: f77_int,
    X: *mut f64,
    incX: f77_int,
    Y: *mut f64,
    incY: f77_int,
    P: *const f64,
) {
    dyload_lib().cblas_drotm.unwrap()(N, X, incX, Y, incY, P)
}

pub unsafe fn cblas_crotg(a: *mut c_void, b: *mut c_void, c: *mut f32, s: *mut c_void) {
    dyload_lib().cblas_crotg.unwrap()(a, b, c, s)
}

pub unsafe fn cblas_csrot(
    N: f77_int,
    X: *mut c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
    c: f32,
    s: f32,
) {
    dyload_lib().cblas_csrot.unwrap()(N, X, incX, Y, incY, c, s)
}

pub unsafe fn cblas_zrotg(a: *mut c_void, b: *mut c_void, c: *mut f64, s: *mut c_void) {
    dyload_lib().cblas_zrotg.unwrap()(a, b, c, s)
}

pub unsafe fn cblas_zdrot(
    N: f77_int,
    X: *mut c_void,
    incX: f77_int,
    Y: *mut c_void,
    incY: f77_int,
    c: f64,
    s: f64,
) {
    dyload_lib().cblas_zdrot.unwrap()(N, X, incX, Y, incY, c, s)
}

pub unsafe fn cblas_sscal(N: f77_int, alpha: f32, X: *mut f32, incX: f77_int) {
    dyload_lib().cblas_sscal.unwrap()(N, alpha, X, incX)
}

pub unsafe fn cblas_dscal(N: f77_int, alpha: f64, X: *mut f64, incX: f77_int) {
    dyload_lib().cblas_dscal.unwrap()(N, alpha, X, incX)
}

pub unsafe fn cblas_cscal(N: f77_int, alpha: *const c_void, X: *mut c_void, incX: f77_int) {
    dyload_lib().cblas_cscal.unwrap()(N, alpha, X, incX)
}

pub unsafe fn cblas_zscal(N: f77_int, alpha: *const c_void, X: *mut c_void, incX: f77_int) {
    dyload_lib().cblas_zscal.unwrap()(N, alpha, X, incX)
}

pub unsafe fn cblas_csscal(N: f77_int, alpha: f32, X: *mut c_void, incX: f77_int) {
    dyload_lib().cblas_csscal.unwrap()(N, alpha, X, incX)
}

pub unsafe fn cblas_zdscal(N: f77_int, alpha: f64, X: *mut c_void, incX: f77_int) {
    dyload_lib().cblas_zdscal.unwrap()(N, alpha, X, incX)
}

pub unsafe fn cblas_sgemv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    X: *const f32,
    incX: f77_int,
    beta: f32,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_sgemv.unwrap()(order, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_sgbmv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    KL: f77_int,
    KU: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    X: *const f32,
    incX: f77_int,
    beta: f32,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_sgbmv.unwrap()(
        order, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY,
    )
}

pub unsafe fn cblas_strmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const f32,
    lda: f77_int,
    X: *mut f32,
    incX: f77_int,
) {
    dyload_lib().cblas_strmv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_stbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const f32,
    lda: f77_int,
    X: *mut f32,
    incX: f77_int,
) {
    dyload_lib().cblas_stbmv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_stpmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const f32,
    X: *mut f32,
    incX: f77_int,
) {
    dyload_lib().cblas_stpmv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_strsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const f32,
    lda: f77_int,
    X: *mut f32,
    incX: f77_int,
) {
    dyload_lib().cblas_strsv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_stbsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const f32,
    lda: f77_int,
    X: *mut f32,
    incX: f77_int,
) {
    dyload_lib().cblas_stbsv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_stpsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const f32,
    X: *mut f32,
    incX: f77_int,
) {
    dyload_lib().cblas_stpsv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_dgemv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    X: *const f64,
    incX: f77_int,
    beta: f64,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_dgemv.unwrap()(order, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_dgbmv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    KL: f77_int,
    KU: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    X: *const f64,
    incX: f77_int,
    beta: f64,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_dgbmv.unwrap()(
        order, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY,
    )
}

pub unsafe fn cblas_dtrmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const f64,
    lda: f77_int,
    X: *mut f64,
    incX: f77_int,
) {
    dyload_lib().cblas_dtrmv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_dtbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const f64,
    lda: f77_int,
    X: *mut f64,
    incX: f77_int,
) {
    dyload_lib().cblas_dtbmv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_dtpmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const f64,
    X: *mut f64,
    incX: f77_int,
) {
    dyload_lib().cblas_dtpmv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_dtrsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const f64,
    lda: f77_int,
    X: *mut f64,
    incX: f77_int,
) {
    dyload_lib().cblas_dtrsv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_dtbsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const f64,
    lda: f77_int,
    X: *mut f64,
    incX: f77_int,
) {
    dyload_lib().cblas_dtbsv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_dtpsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const f64,
    X: *mut f64,
    incX: f77_int,
) {
    dyload_lib().cblas_dtpsv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_cgemv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_cgemv.unwrap()(order, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_cgbmv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    KL: f77_int,
    KU: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_cgbmv.unwrap()(
        order, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY,
    )
}

pub unsafe fn cblas_ctrmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ctrmv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_ctbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ctbmv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_ctpmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const c_void,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ctpmv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_ctrsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ctrsv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_ctbsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ctbsv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_ctpsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const c_void,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ctpsv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_zgemv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zgemv.unwrap()(order, TransA, M, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_zgbmv(
    order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    KL: f77_int,
    KU: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zgbmv.unwrap()(
        order, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY,
    )
}

pub unsafe fn cblas_ztrmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ztrmv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_ztbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ztbmv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_ztpmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const c_void,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ztpmv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_ztrsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ztrsv.unwrap()(order, Uplo, TransA, Diag, N, A, lda, X, incX)
}

pub unsafe fn cblas_ztbsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    K: f77_int,
    A: *const c_void,
    lda: f77_int,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ztbsv.unwrap()(order, Uplo, TransA, Diag, N, K, A, lda, X, incX)
}

pub unsafe fn cblas_ztpsv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    N: f77_int,
    Ap: *const c_void,
    X: *mut c_void,
    incX: f77_int,
) {
    dyload_lib().cblas_ztpsv.unwrap()(order, Uplo, TransA, Diag, N, Ap, X, incX)
}

pub unsafe fn cblas_ssymv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    X: *const f32,
    incX: f77_int,
    beta: f32,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_ssymv.unwrap()(order, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_ssbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    X: *const f32,
    incX: f77_int,
    beta: f32,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_ssbmv.unwrap()(order, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_sspmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    Ap: *const f32,
    X: *const f32,
    incX: f77_int,
    beta: f32,
    Y: *mut f32,
    incY: f77_int,
) {
    dyload_lib().cblas_sspmv.unwrap()(order, Uplo, N, alpha, Ap, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_sger(
    order: CBLAS_ORDER,
    M: f77_int,
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    Y: *const f32,
    incY: f77_int,
    A: *mut f32,
    lda: f77_int,
) {
    dyload_lib().cblas_sger.unwrap()(order, M, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_ssyr(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    A: *mut f32,
    lda: f77_int,
) {
    dyload_lib().cblas_ssyr.unwrap()(order, Uplo, N, alpha, X, incX, A, lda)
}

pub unsafe fn cblas_sspr(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    Ap: *mut f32,
) {
    dyload_lib().cblas_sspr.unwrap()(order, Uplo, N, alpha, X, incX, Ap)
}

pub unsafe fn cblas_ssyr2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    Y: *const f32,
    incY: f77_int,
    A: *mut f32,
    lda: f77_int,
) {
    dyload_lib().cblas_ssyr2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_sspr2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    X: *const f32,
    incX: f77_int,
    Y: *const f32,
    incY: f77_int,
    A: *mut f32,
) {
    dyload_lib().cblas_sspr2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, A)
}

pub unsafe fn cblas_dsymv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    X: *const f64,
    incX: f77_int,
    beta: f64,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_dsymv.unwrap()(order, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_dsbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    X: *const f64,
    incX: f77_int,
    beta: f64,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_dsbmv.unwrap()(order, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_dspmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    Ap: *const f64,
    X: *const f64,
    incX: f77_int,
    beta: f64,
    Y: *mut f64,
    incY: f77_int,
) {
    dyload_lib().cblas_dspmv.unwrap()(order, Uplo, N, alpha, Ap, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_dger(
    order: CBLAS_ORDER,
    M: f77_int,
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    Y: *const f64,
    incY: f77_int,
    A: *mut f64,
    lda: f77_int,
) {
    dyload_lib().cblas_dger.unwrap()(order, M, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_dsyr(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    A: *mut f64,
    lda: f77_int,
) {
    dyload_lib().cblas_dsyr.unwrap()(order, Uplo, N, alpha, X, incX, A, lda)
}

pub unsafe fn cblas_dspr(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    Ap: *mut f64,
) {
    dyload_lib().cblas_dspr.unwrap()(order, Uplo, N, alpha, X, incX, Ap)
}

pub unsafe fn cblas_dsyr2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    Y: *const f64,
    incY: f77_int,
    A: *mut f64,
    lda: f77_int,
) {
    dyload_lib().cblas_dsyr2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_dspr2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    X: *const f64,
    incX: f77_int,
    Y: *const f64,
    incY: f77_int,
    A: *mut f64,
) {
    dyload_lib().cblas_dspr2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, A)
}

pub unsafe fn cblas_chemv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_chemv.unwrap()(order, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_chbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_chbmv.unwrap()(order, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_chpmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    Ap: *const c_void,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_chpmv.unwrap()(order, Uplo, N, alpha, Ap, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_cgeru(
    order: CBLAS_ORDER,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_cgeru.unwrap()(order, M, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_cgerc(
    order: CBLAS_ORDER,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_cgerc.unwrap()(order, M, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_cher(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    X: *const c_void,
    incX: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_cher.unwrap()(order, Uplo, N, alpha, X, incX, A, lda)
}

pub unsafe fn cblas_chpr(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f32,
    X: *const c_void,
    incX: f77_int,
    A: *mut c_void,
) {
    dyload_lib().cblas_chpr.unwrap()(order, Uplo, N, alpha, X, incX, A)
}

pub unsafe fn cblas_cher2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_cher2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_chpr2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    Ap: *mut c_void,
) {
    dyload_lib().cblas_chpr2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, Ap)
}

pub unsafe fn cblas_zhemv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zhemv.unwrap()(order, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_zhbmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zhbmv.unwrap()(order, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_zhpmv(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    Ap: *const c_void,
    X: *const c_void,
    incX: f77_int,
    beta: *const c_void,
    Y: *mut c_void,
    incY: f77_int,
) {
    dyload_lib().cblas_zhpmv.unwrap()(order, Uplo, N, alpha, Ap, X, incX, beta, Y, incY)
}

pub unsafe fn cblas_zgeru(
    order: CBLAS_ORDER,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_zgeru.unwrap()(order, M, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_zgerc(
    order: CBLAS_ORDER,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_zgerc.unwrap()(order, M, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_zher(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    X: *const c_void,
    incX: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_zher.unwrap()(order, Uplo, N, alpha, X, incX, A, lda)
}

pub unsafe fn cblas_zhpr(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: f64,
    X: *const c_void,
    incX: f77_int,
    A: *mut c_void,
) {
    dyload_lib().cblas_zhpr.unwrap()(order, Uplo, N, alpha, X, incX, A)
}

pub unsafe fn cblas_zher2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    A: *mut c_void,
    lda: f77_int,
) {
    dyload_lib().cblas_zher2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, A, lda)
}

pub unsafe fn cblas_zhpr2(
    order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    N: f77_int,
    alpha: *const c_void,
    X: *const c_void,
    incX: f77_int,
    Y: *const c_void,
    incY: f77_int,
    Ap: *mut c_void,
) {
    dyload_lib().cblas_zhpr2.unwrap()(order, Uplo, N, alpha, X, incX, Y, incY, Ap)
}

pub unsafe fn cblas_sgemm(
    Order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    B: *const f32,
    ldb: f77_int,
    beta: f32,
    C: *mut f32,
    ldc: f77_int,
) {
    dyload_lib().cblas_sgemm.unwrap()(
        Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_ssymm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    M: f77_int,
    N: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    B: *const f32,
    ldb: f77_int,
    beta: f32,
    C: *mut f32,
    ldc: f77_int,
) {
    dyload_lib().cblas_ssymm.unwrap()(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc)
}

pub unsafe fn cblas_ssyrk(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    beta: f32,
    C: *mut f32,
    ldc: f77_int,
) {
    dyload_lib().cblas_ssyrk.unwrap()(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc)
}

pub unsafe fn cblas_ssyr2k(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    B: *const f32,
    ldb: f77_int,
    beta: f32,
    C: *mut f32,
    ldc: f77_int,
) {
    dyload_lib().cblas_ssyr2k.unwrap()(
        Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_strmm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    B: *mut f32,
    ldb: f77_int,
) {
    dyload_lib().cblas_strmm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_strsm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    B: *mut f32,
    ldb: f77_int,
) {
    dyload_lib().cblas_strsm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_sgemmt(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    A: *const f32,
    lda: f77_int,
    B: *const f32,
    ldb: f77_int,
    beta: f32,
    C: *mut f32,
    ldc: f77_int,
) {
    dyload_lib().cblas_sgemmt.unwrap()(
        Order, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_dgemm(
    Order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    B: *const f64,
    ldb: f77_int,
    beta: f64,
    C: *mut f64,
    ldc: f77_int,
) {
    dyload_lib().cblas_dgemm.unwrap()(
        Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_dsymm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    M: f77_int,
    N: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    B: *const f64,
    ldb: f77_int,
    beta: f64,
    C: *mut f64,
    ldc: f77_int,
) {
    dyload_lib().cblas_dsymm.unwrap()(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc)
}

pub unsafe fn cblas_dsyrk(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    beta: f64,
    C: *mut f64,
    ldc: f77_int,
) {
    dyload_lib().cblas_dsyrk.unwrap()(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc)
}

pub unsafe fn cblas_dsyr2k(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    B: *const f64,
    ldb: f77_int,
    beta: f64,
    C: *mut f64,
    ldc: f77_int,
) {
    dyload_lib().cblas_dsyr2k.unwrap()(
        Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_dtrmm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    B: *mut f64,
    ldb: f77_int,
) {
    dyload_lib().cblas_dtrmm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_dtrsm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    B: *mut f64,
    ldb: f77_int,
) {
    dyload_lib().cblas_dtrsm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_dgemmt(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    A: *const f64,
    lda: f77_int,
    B: *const f64,
    ldb: f77_int,
    beta: f64,
    C: *mut f64,
    ldc: f77_int,
) {
    dyload_lib().cblas_dgemmt.unwrap()(
        Order, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_cgemm(
    Order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_cgemm.unwrap()(
        Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_csymm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_csymm.unwrap()(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc)
}

pub unsafe fn cblas_csyrk(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_csyrk.unwrap()(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc)
}

pub unsafe fn cblas_csyr2k(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_csyr2k.unwrap()(
        Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_ctrmm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *mut c_void,
    ldb: f77_int,
) {
    dyload_lib().cblas_ctrmm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_ctrsm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *mut c_void,
    ldb: f77_int,
) {
    dyload_lib().cblas_ctrsm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_cgemmt(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_cgemmt.unwrap()(
        Order, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_zgemm(
    Order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zgemm.unwrap()(
        Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_zsymm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zsymm.unwrap()(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc)
}

pub unsafe fn cblas_zsyrk(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zsyrk.unwrap()(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc)
}

pub unsafe fn cblas_zsyr2k(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zsyr2k.unwrap()(
        Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_ztrmm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *mut c_void,
    ldb: f77_int,
) {
    dyload_lib().cblas_ztrmm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_ztrsm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    Diag: CBLAS_DIAG,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *mut c_void,
    ldb: f77_int,
) {
    dyload_lib().cblas_ztrsm.unwrap()(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb)
}

pub unsafe fn cblas_zgemmt(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zgemmt.unwrap()(
        Order, Uplo, TransA, TransB, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_chemm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_chemm.unwrap()(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc)
}

pub unsafe fn cblas_cherk(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    A: *const c_void,
    lda: f77_int,
    beta: f32,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_cherk.unwrap()(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc)
}

pub unsafe fn cblas_cher2k(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: f32,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_cher2k.unwrap()(
        Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_zhemm(
    Order: CBLAS_ORDER,
    Side: CBLAS_SIDE,
    Uplo: CBLAS_UPLO,
    M: f77_int,
    N: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zhemm.unwrap()(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc)
}

pub unsafe fn cblas_zherk(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    A: *const c_void,
    lda: f77_int,
    beta: f64,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zherk.unwrap()(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc)
}

pub unsafe fn cblas_zher2k(
    Order: CBLAS_ORDER,
    Uplo: CBLAS_UPLO,
    Trans: CBLAS_TRANSPOSE,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: f64,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zher2k.unwrap()(
        Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_xerbla(p: f77_int, rout: *const c_char, form: *const c_char) {
    dyload_lib().cblas_xerbla.unwrap()(p, rout, form)
}

pub unsafe fn cblas_scabs1(z: *const c_void) -> f32 {
    dyload_lib().cblas_scabs1.unwrap()(z)
}

pub unsafe fn cblas_dcabs1(z: *const c_void) -> f64 {
    dyload_lib().cblas_dcabs1.unwrap()(z)
}

pub unsafe fn cblas_sgemm_batch(
    Order: CBLAS_ORDER,
    TransA_array: *mut CBLAS_TRANSPOSE,
    TransB_array: *mut CBLAS_TRANSPOSE,
    M_array: *mut f77_int,
    N_array: *mut f77_int,
    K_array: *mut f77_int,
    alpha_array: *const f32,
    A: *mut *const f32,
    lda_array: *mut f77_int,
    B: *mut *const f32,
    ldb_array: *mut f77_int,
    beta_array: *const f32,
    C: *mut *mut f32,
    ldc_array: *mut f77_int,
    group_count: f77_int,
    group_size: *mut f77_int,
) {
    dyload_lib().cblas_sgemm_batch.unwrap()(
        Order,
        TransA_array,
        TransB_array,
        M_array,
        N_array,
        K_array,
        alpha_array,
        A,
        lda_array,
        B,
        ldb_array,
        beta_array,
        C,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cblas_dgemm_batch(
    Order: CBLAS_ORDER,
    TransA_array: *mut CBLAS_TRANSPOSE,
    TransB_array: *mut CBLAS_TRANSPOSE,
    M_array: *mut f77_int,
    N_array: *mut f77_int,
    K_array: *mut f77_int,
    alpha_array: *const f64,
    A: *mut *const f64,
    lda_array: *mut f77_int,
    B: *mut *const f64,
    ldb_array: *mut f77_int,
    beta_array: *const f64,
    C: *mut *mut f64,
    ldc_array: *mut f77_int,
    group_count: f77_int,
    group_size: *mut f77_int,
) {
    dyload_lib().cblas_dgemm_batch.unwrap()(
        Order,
        TransA_array,
        TransB_array,
        M_array,
        N_array,
        K_array,
        alpha_array,
        A,
        lda_array,
        B,
        ldb_array,
        beta_array,
        C,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cblas_cgemm_batch(
    Order: CBLAS_ORDER,
    TransA_array: *mut CBLAS_TRANSPOSE,
    TransB_array: *mut CBLAS_TRANSPOSE,
    M_array: *mut f77_int,
    N_array: *mut f77_int,
    K_array: *mut f77_int,
    alpha_array: *const c_void,
    A: *mut *const c_void,
    lda_array: *mut f77_int,
    B: *mut *const c_void,
    ldb_array: *mut f77_int,
    beta_array: *const c_void,
    C: *mut *mut c_void,
    ldc_array: *mut f77_int,
    group_count: f77_int,
    group_size: *mut f77_int,
) {
    dyload_lib().cblas_cgemm_batch.unwrap()(
        Order,
        TransA_array,
        TransB_array,
        M_array,
        N_array,
        K_array,
        alpha_array,
        A,
        lda_array,
        B,
        ldb_array,
        beta_array,
        C,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cblas_zgemm_batch(
    Order: CBLAS_ORDER,
    TransA_array: *mut CBLAS_TRANSPOSE,
    TransB_array: *mut CBLAS_TRANSPOSE,
    M_array: *mut f77_int,
    N_array: *mut f77_int,
    K_array: *mut f77_int,
    alpha_array: *const c_void,
    A: *mut *const c_void,
    lda_array: *mut f77_int,
    B: *mut *const c_void,
    ldb_array: *mut f77_int,
    beta_array: *const c_void,
    C: *mut *mut c_void,
    ldc_array: *mut f77_int,
    group_count: f77_int,
    group_size: *mut f77_int,
) {
    dyload_lib().cblas_zgemm_batch.unwrap()(
        Order,
        TransA_array,
        TransB_array,
        M_array,
        N_array,
        K_array,
        alpha_array,
        A,
        lda_array,
        B,
        ldb_array,
        beta_array,
        C,
        ldc_array,
        group_count,
        group_size,
    )
}

pub unsafe fn cblas_cgemm3m(
    Order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_cgemm3m.unwrap()(
        Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_zgemm3m(
    Order: CBLAS_ORDER,
    TransA: CBLAS_TRANSPOSE,
    TransB: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: *const c_void,
    A: *const c_void,
    lda: f77_int,
    B: *const c_void,
    ldb: f77_int,
    beta: *const c_void,
    C: *mut c_void,
    ldc: f77_int,
) {
    dyload_lib().cblas_zgemm3m.unwrap()(
        Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_isamin(N: f77_int, X: *const f32, incX: f77_int) -> f77_int {
    dyload_lib().cblas_isamin.unwrap()(N, X, incX)
}

pub unsafe fn cblas_idamin(N: f77_int, X: *const f64, incX: f77_int) -> f77_int {
    dyload_lib().cblas_idamin.unwrap()(N, X, incX)
}

pub unsafe fn cblas_icamin(N: f77_int, X: *const c_void, incX: f77_int) -> f77_int {
    dyload_lib().cblas_icamin.unwrap()(N, X, incX)
}

pub unsafe fn cblas_izamin(N: f77_int, X: *const c_void, incX: f77_int) -> f77_int {
    dyload_lib().cblas_izamin.unwrap()(N, X, incX)
}

pub unsafe fn cblas_sgemm_pack_get_size(
    Identifier: CBLAS_IDENTIFIER,
    M: f77_int,
    N: f77_int,
    K: f77_int,
) -> f77_int {
    dyload_lib().cblas_sgemm_pack_get_size.unwrap()(Identifier, M, N, K)
}

pub unsafe fn cblas_dgemm_pack_get_size(
    Identifier: CBLAS_IDENTIFIER,
    M: f77_int,
    N: f77_int,
    K: f77_int,
) -> f77_int {
    dyload_lib().cblas_dgemm_pack_get_size.unwrap()(Identifier, M, N, K)
}

pub unsafe fn cblas_sgemm_pack(
    Order: CBLAS_ORDER,
    Identifier: CBLAS_IDENTIFIER,
    Trans: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: f32,
    src: *const f32,
    ld: f77_int,
    dest: *mut f32,
) {
    dyload_lib().cblas_sgemm_pack.unwrap()(Order, Identifier, Trans, M, N, K, alpha, src, ld, dest)
}

pub unsafe fn cblas_dgemm_pack(
    Order: CBLAS_ORDER,
    Identifier: CBLAS_IDENTIFIER,
    Trans: CBLAS_TRANSPOSE,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    alpha: f64,
    src: *const f64,
    ld: f77_int,
    dest: *mut f64,
) {
    dyload_lib().cblas_dgemm_pack.unwrap()(Order, Identifier, Trans, M, N, K, alpha, src, ld, dest)
}

pub unsafe fn cblas_sgemm_compute(
    Order: CBLAS_ORDER,
    TransA: f77_int,
    TransB: f77_int,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    A: *const f32,
    lda: f77_int,
    B: *const f32,
    ldb: f77_int,
    beta: f32,
    C: *mut f32,
    ldc: f77_int,
) {
    dyload_lib().cblas_sgemm_compute.unwrap()(
        Order, TransA, TransB, M, N, K, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn cblas_dgemm_compute(
    Order: CBLAS_ORDER,
    TransA: f77_int,
    TransB: f77_int,
    M: f77_int,
    N: f77_int,
    K: f77_int,
    A: *const f64,
    lda: f77_int,
    B: *const f64,
    ldb: f77_int,
    beta: f64,
    C: *mut f64,
    ldc: f77_int,
) {
    dyload_lib().cblas_dgemm_compute.unwrap()(
        Order, TransA, TransB, M, N, K, A, lda, B, ldb, beta, C, ldc,
    )
}

pub unsafe fn bli_sleep(secs: c_uint) {
    dyload_lib().bli_sleep.unwrap()(secs)
}

pub unsafe fn AOCL_FAL_Close(fpFilePointer: *mut FILE) -> int32 {
    dyload_lib().AOCL_FAL_Close.unwrap()(fpFilePointer)
}

pub unsafe fn AOCL_FAL_Error(fpFilePointer: *mut FILE) -> int32 {
    dyload_lib().AOCL_FAL_Error.unwrap()(fpFilePointer)
}

pub unsafe fn AOCL_FAL_Open(pchFileName: *const int8, pchMode: *const int8) -> *mut FILE {
    dyload_lib().AOCL_FAL_Open.unwrap()(pchFileName, pchMode)
}

pub unsafe fn AOCL_FAL_Read(
    pvBuffer: *mut c_void,
    i32Size: int32,
    i32Count: int32,
    fpFilePointer: *mut FILE,
) -> int32 {
    dyload_lib().AOCL_FAL_Read.unwrap()(pvBuffer, i32Size, i32Count, fpFilePointer)
}

pub unsafe fn AOCL_FAL_Write(
    pvBuffer: *const c_void,
    i32Size: int32,
    iCount: int32,
    fpFilePointer: *mut FILE,
) -> int32 {
    dyload_lib().AOCL_FAL_Write.unwrap()(pvBuffer, i32Size, iCount, fpFilePointer)
}

pub unsafe fn AOCL_FLIST_IsEmpty(plist: *mut AOCL_FLIST_Node) -> Bool {
    dyload_lib().AOCL_FLIST_IsEmpty.unwrap()(plist)
}

pub unsafe fn AOCL_FLIST_GetNode(
    plist: *mut AOCL_FLIST_Node,
    tid: AOCL_TID,
) -> *mut AOCL_FLIST_Node {
    dyload_lib().AOCL_FLIST_GetNode.unwrap()(plist, tid)
}

pub unsafe fn AOCL_FLIST_GetFile(plist: *mut AOCL_FLIST_Node, tid: AOCL_TID) -> *mut FILE {
    dyload_lib().AOCL_FLIST_GetFile.unwrap()(plist, tid)
}

pub unsafe fn AOCL_FLIST_AddFile(
    pchFilePrefix: *const int8,
    plist: *mut *mut AOCL_FLIST_Node,
    tid: AOCL_TID,
) -> *mut FILE {
    dyload_lib().AOCL_FLIST_AddFile.unwrap()(pchFilePrefix, plist, tid)
}

pub unsafe fn AOCL_FLIST_CloseFile(plist: *mut AOCL_FLIST_Node, tid: AOCL_TID) {
    dyload_lib().AOCL_FLIST_CloseFile.unwrap()(plist, tid)
}

pub unsafe fn AOCL_FLIST_CloseAll(plist: *mut AOCL_FLIST_Node) {
    dyload_lib().AOCL_FLIST_CloseAll.unwrap()(plist)
}

pub unsafe fn AOCL_gettid() -> AOCL_TID {
    dyload_lib().AOCL_gettid.unwrap()()
}

pub unsafe fn AOCL_getpid() -> pid_t {
    dyload_lib().AOCL_getpid.unwrap()()
}

pub unsafe fn AOCL_getTimestamp() -> uint64 {
    dyload_lib().AOCL_getTimestamp.unwrap()()
}
