//! Base of current FFI.
//!
//! Declaration of types, enums, cargo feature controls, etc.
//!
//! This file is generated automatically.

pub(crate) use crate::blis_types::*;

/* automatically generated by rust-bindgen 0.71.1 */

pub const FLA_ENABLE_EXTRA_SYMBOLS: u32 = 1;
pub const FLA_ENABLE_NON_CRITICAL_CODE: u32 = 1;
pub const FLA_ENABLE_BLIS1_USE_OF_FLA_MALLOC: u32 = 1;
pub const FLA_ENABLE_LAPACK2FLAME: u32 = 1;
pub const FLA_ENABLE_EXTERNAL_LAPACK_INTERFACES: u32 = 1;
pub const FLA_ENABLE_PORTABLE_TIMER: u32 = 1;
pub const FLA_ENABLE_INTERNAL_ERROR_CHECKING: u32 = 1;
pub const FLA_INTERNAL_ERROR_CHECKING_LEVEL: u32 = 2;
pub const FLA_MULTITHREADING_MODEL: u32 = 1;
pub const FLA_ENABLE_AMD_OPT: u32 = 1;
pub const FLA_LIBFLAME_VERSION: &[u8; 21] = b"5.1.0\tBuild\t20250430\0";
pub const FLA_OPENMP_MULTITHREADING: u32 = 1;
pub const FLA_ENABLE_BLAS_EXT_GEMMT: u32 = 1;
pub const FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME: u32 = 1;
pub const FLA_VECTOR_INTRINSIC_TYPE: u32 = 0;
pub const HAVE_ASSERT_H: u32 = 1;
pub const HAVE_FCNTL_H: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_LIBM: u32 = 1;
pub const HAVE_MATH_H: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_SIGNAL_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const PROTOTYPES: u32 = 1;
pub const STDC_HEADERS: u32 = 1;
pub const TIME_WITH_SYS_TIME: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const __PROTOTYPES: u32 = 1;
pub const NULL: u32 = 0;
pub const ENABLE_THREAD_LOCAL_STORAGE: u32 = 1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const FLA_SUCCESS: i32 = -1;
pub const FLA_FAILURE: i32 = -2;
pub const FLA_TL: u32 = 11;
pub const FLA_TR: u32 = 12;
pub const FLA_BL: u32 = 21;
pub const FLA_BR: u32 = 22;
pub const FLA_FLOAT: u32 = 100;
pub const FLA_DOUBLE: u32 = 101;
pub const FLA_COMPLEX: u32 = 102;
pub const FLA_DOUBLE_COMPLEX: u32 = 103;
pub const FLA_INT: u32 = 104;
pub const FLA_CONSTANT: u32 = 105;
pub const FLA_MATRIX: u32 = 150;
pub const FLA_SCALAR: u32 = 151;
pub const FLA_TOP: u32 = 200;
pub const FLA_BOTTOM: u32 = 201;
pub const FLA_LEFT: u32 = 210;
pub const FLA_RIGHT: u32 = 211;
pub const FLA_SIDE_MASK: u32 = 1;
pub const FLA_LOWER_TRIANGULAR: u32 = 300;
pub const FLA_UPPER_TRIANGULAR: u32 = 301;
pub const FLA_ZERO_MATRIX: u32 = 310;
pub const FLA_FULL_MATRIX: u32 = 311;
pub const FLA_UPLO_MASK: u32 = 1;
pub const FLA_NO_TRANSPOSE: u32 = 400;
pub const FLA_TRANSPOSE: u32 = 401;
pub const FLA_CONJ_TRANSPOSE: u32 = 402;
pub const FLA_CONJ_NO_TRANSPOSE: u32 = 403;
pub const FLA_TRANS_MASK: u32 = 3;
pub const FLA_NO_CONJUGATE: u32 = 450;
pub const FLA_CONJUGATE: u32 = 451;
pub const FLA_UNIT_DIAG: u32 = 500;
pub const FLA_NONUNIT_DIAG: u32 = 501;
pub const FLA_ZERO_DIAG: u32 = 502;
pub const FLA_DIAG_MASK: u32 = 3;
pub const FLA_DIMENSION_M: u32 = 600;
pub const FLA_DIMENSION_K: u32 = 601;
pub const FLA_DIMENSION_N: u32 = 602;
pub const FLA_DIMENSION_MIN: u32 = 603;
pub const FLA_DIM_M_INDEX: u32 = 0;
pub const FLA_DIM_K_INDEX: u32 = 1;
pub const FLA_DIM_N_INDEX: u32 = 2;
pub const FLA_DIM_MIN_INDEX: u32 = 3;
pub const FLA_DIM_INDEX_MASK: u32 = 3;
pub const FLA_NATIVE_PIVOTS: u32 = 700;
pub const FLA_LAPACK_PIVOTS: u32 = 701;
pub const FLA_FORWARD: u32 = 800;
pub const FLA_BACKWARD: u32 = 801;
pub const FLA_COLUMNWISE: u32 = 900;
pub const FLA_ROWWISE: u32 = 901;
pub const FLA_FLAT: u32 = 1000;
pub const FLA_HIER: u32 = 1001;
pub const FLA_SINGLE_PRECISION: u32 = 1100;
pub const FLA_DOUBLE_PRECISION: u32 = 1101;
pub const FLA_REAL_DOMAIN: u32 = 1200;
pub const FLA_COMPLEX_DOMAIN: u32 = 1201;
pub const FLA_NO_INVERSE: u32 = 1300;
pub const FLA_INVERSE: u32 = 1301;
pub const FLA_EVD_WITHOUT_VECTORS: u32 = 1400;
pub const FLA_EVD_WITH_VECTORS: u32 = 1401;
pub const FLA_EVD_OF_TRIDIAG_WITH_VECTORS: u32 = 1402;
pub const FLA_SVD_VECTORS_ALL: u32 = 1500;
pub const FLA_SVD_VECTORS_MIN_COPY: u32 = 1501;
pub const FLA_SVD_VECTORS_MIN_OVERWRITE: u32 = 1502;
pub const FLA_SVD_VECTORS_NONE: u32 = 1503;
pub const FLA_MACH_START: u32 = 1600;
pub const FLA_MACH_EPS: u32 = 1600;
pub const FLA_MACH_SFMIN: u32 = 1601;
pub const FLA_MACH_BASE: u32 = 1602;
pub const FLA_MACH_PREC: u32 = 1603;
pub const FLA_MACH_NDIGMANT: u32 = 1604;
pub const FLA_MACH_RND: u32 = 1605;
pub const FLA_MACH_EMIN: u32 = 1606;
pub const FLA_MACH_RMIN: u32 = 1607;
pub const FLA_MACH_EMAX: u32 = 1608;
pub const FLA_MACH_RMAX: u32 = 1609;
pub const FLA_MACH_EPS2: u32 = 1610;
pub const FLA_MACH_N_VALS: u32 = 11;
pub const FLA_SUPER_DIAGONAL: u32 = 1;
pub const FLA_MAIN_DIAGONAL: u32 = 0;
pub const FLA_SUB_DIAGONAL: i32 = -1;
pub const FLA_OPENMP: u32 = 1;
pub const FLA_PTHREADS: u32 = 2;
pub const FLA_NO_INTRINSICS: u32 = 0;
pub const FLA_SSE_INTRINSICS: u32 = 3;
pub const FLA_FULL_ERROR_CHECKING: u32 = 2;
pub const FLA_MIN_ERROR_CHECKING: u32 = 1;
pub const FLA_NO_ERROR_CHECKING: u32 = 0;
pub const FLA_S_INDEX: u32 = 0;
pub const FLA_D_INDEX: u32 = 1;
pub const FLA_C_INDEX: u32 = 2;
pub const FLA_Z_INDEX: u32 = 3;
pub const FLA_DTYPE_INDEX_MASK: u32 = 3;
pub const FLA_SMALL_LU_BLOCKSIZE: u32 = 64;
pub const FLA_DEFAULT_M_BLOCKSIZE: u32 = 128;
pub const FLA_DEFAULT_K_BLOCKSIZE: u32 = 128;
pub const FLA_DEFAULT_N_BLOCKSIZE: u32 = 128;
pub const FLA_EXT_HIER_BLOCKSIZE: u32 = 128;
pub const FLA_QR_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_LQ_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_LU_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_UDDATE_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_HESS_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_TRIDIAG_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_BIDIAG_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_CAQR_INNER_TO_OUTER_B_RATIO: f64 = 0.25;
pub const FLA_GEQRF_STHRESH: u32 = 32;
pub const FLA_GEQRF_BLOCK_SIZE: u32 = 32;
pub const FLA_DELQF_TRAN_THRESH: u32 = 1280;
pub const FLA_POTRF_FLOAT_SMALL: u32 = 70;
pub const FLA_POTRF_DOUBLE_SMALL: u32 = 75;
pub const FLA_GETRF_SMALL: u32 = 85;
pub const FLA_GETRF_FLOAT: u32 = 1440;
pub const FLA_GETRF_COMPLEX: u32 = 670;
pub const FLA_GETRF_DOUBLE_COMPLEX: u32 = 1630;
pub const FLA_SGETRF_SMALL_THRESH1: u32 = 117;
pub const FLA_SGETRF_MEDIUM_THRESH0: u32 = 480;
pub const FLA_SGETRF_SMALL_THRESH0: u32 = 7;
pub const FLA_SGETRF_SMALL_AVX2_THRESH0: u32 = 31;
pub const FLA_SGETRF_SMALL_AVX512_THRESH0: u32 = 156;
pub const FLA_DGETRF_SMALL_THRESH0: u32 = 8;
pub const FLA_DGETRF_SMALL_AVX2_THRESH0: u32 = 81;
pub const FLA_DGETRF_SMALL_AVX512_THRESH0: u32 = 160;
pub const FLA_ZGETRF_SMALL_THRESH: u32 = 100;
pub const FLA_MN_SIZE: u32 = 373321;
pub const FLA_NFACT_PERCENT: f64 = 0.51;
pub const FLA_FULL_DGER_CONSTANT: u32 = 200;
pub const FLA_DGEMV_DGER_SIMD_SMALL_THRESH: u32 = 128;
pub const FLA_DGEMV_DGER_SIMD_SMALL_THRESH_M: u32 = 6;
pub const FLA_DGEMV_DGER_SIMD_AVX512_THRESH_M: u32 = 25;
pub const FLA_ZGEMV_ZGER_SIMD_AXV2_THRESH_M: u32 = 8;
pub const FLA_ZGEMV_ZGER_SIMD_AXV512_THRESH_M: u32 = 49;
pub const FLA_SSCAL_INLINE_SMALL: u32 = 512;
pub const FLA_DSCAL_INLINE_SMALL: u32 = 512;
pub const FLA_ZGERC_INLINE_SMALL_THRESH0: u32 = 128;
pub const FLA_ZGERC_INLINE_SMALL_THRESH1: u32 = 32;
pub const FLA_ZSCAL_INLINE_SMALL: u32 = 128;
pub const FLA_ZUNGQR_BLOCK_SMALL_THRESH: u32 = 32;
pub const FLA_ZLANGEM_SIMD_AVX512_THRESH_M: u32 = 15;
pub const FLA_CLANGEM_SIMD_AVX512_THRESH_M: u32 = 15;
pub const FLA_DNRM2_SMALL_THRESH0: u32 = 15;
pub const FLA_IDAMAX_INLINE_SMALL_THRESH: u32 = 128;
pub const FLA_DGEQP3_BLOCK_SMALL_THRESH: u32 = 32;
pub const FLA_ZGEQP3_BLOCK_SMALL_THRESH: u32 = 32;
pub const FLA_ERROR_CODE_MIN: i32 = -10;
pub const FLA_INVALID_SIDE: i32 = -10;
pub const FLA_INVALID_UPLO: i32 = -11;
pub const FLA_INVALID_TRANS: i32 = -12;
pub const FLA_INVALID_TRANS_GIVEN_DATATYPE: i32 = -13;
pub const FLA_INVALID_CONJ: i32 = -14;
pub const FLA_INVALID_DIRECT: i32 = -15;
pub const FLA_INVALID_STOREV: i32 = -16;
pub const FLA_INVALID_DATATYPE: i32 = -17;
pub const FLA_INVALID_INTEGER_DATATYPE: i32 = -18;
pub const FLA_INVALID_REAL_DATATYPE: i32 = -19;
pub const FLA_INVALID_COMPLEX_DATATYPE: i32 = -20;
pub const FLA_OBJECT_NOT_INTEGER: i32 = -21;
pub const FLA_OBJECT_NOT_REAL: i32 = -22;
pub const FLA_OBJECT_NOT_COMPLEX: i32 = -23;
pub const FLA_OBJECT_NOT_SQUARE: i32 = -24;
pub const FLA_OBJECT_NOT_SCALAR: i32 = -25;
pub const FLA_OBJECT_NOT_VECTOR: i32 = -26;
pub const FLA_INCONSISTENT_DATATYPES: i32 = -27;
pub const FLA_NONCONFORMAL_DIMENSIONS: i32 = -28;
pub const FLA_UNEQUAL_VECTOR_DIMS: i32 = -29;
pub const FLA_INVALID_HESSENBERG_INDICES: i32 = -30;
pub const FLA_NULL_POINTER: i32 = -32;
pub const FLA_SPECIFIED_OBJ_DIM_MISMATCH: i32 = -33;
pub const FLA_INVALID_PIVOT_TYPE: i32 = -35;
pub const FLA_MALLOC_RETURNED_NULL_POINTER: i32 = -37;
pub const FLA_OBJECT_BASE_BUFFER_MISMATCH: i32 = -38;
pub const FLA_OBJECTS_NOT_VERTICALLY_ADJ: i32 = -39;
pub const FLA_OBJECTS_NOT_HORIZONTALLY_ADJ: i32 = -40;
pub const FLA_ADJACENT_OBJECT_DIM_MISMATCH: i32 = -41;
pub const FLA_OBJECTS_NOT_VERTICALLY_ALIGNED: i32 = -42;
pub const FLA_OBJECTS_NOT_HORIZONTALLY_ALIGNED: i32 = -43;
pub const FLA_INVALID_FLOATING_DATATYPE: i32 = -44;
pub const FLA_OBJECT_NOT_FLOATING_POINT: i32 = -45;
pub const FLA_INVALID_BLOCKSIZE_VALUE: i32 = -46;
pub const FLA_OPEN_RETURNED_ERROR: i32 = -47;
pub const FLA_LSEEK_RETURNED_ERROR: i32 = -48;
pub const FLA_CLOSE_RETURNED_ERROR: i32 = -49;
pub const FLA_UNLINK_RETURNED_ERROR: i32 = -50;
pub const FLA_READ_RETURNED_ERROR: i32 = -51;
pub const FLA_WRITE_RETURNED_ERROR: i32 = -52;
pub const FLA_INVALID_QUADRANT: i32 = -53;
pub const FLA_NOT_YET_IMPLEMENTED: i32 = -54;
pub const FLA_EXPECTED_NONNEGATIVE_VALUE: i32 = -55;
pub const FLA_SUPERMATRIX_NOT_ENABLED: i32 = -56;
pub const FLA_UNDEFINED_ERROR_CODE: i32 = -57;
pub const FLA_INVALID_DIAG: i32 = -58;
pub const FLA_INCONSISTENT_OBJECT_PRECISION: i32 = -59;
pub const FLA_INVALID_BLOCKSIZE_OBJ: i32 = -60;
pub const FLA_VECTOR_DIM_BELOW_MIN: i32 = -61;
pub const FLA_PTHREAD_CREATE_RETURNED_ERROR: i32 = -63;
pub const FLA_PTHREAD_JOIN_RETURNED_ERROR: i32 = -64;
pub const FLA_INVALID_ISGN_VALUE: i32 = -65;
pub const FLA_CHOL_FAILED_MATRIX_NOT_SPD: i32 = -67;
pub const FLA_INVALID_ELEMTYPE: i32 = -68;
pub const FLA_POSIX_MEMALIGN_FAILED: i32 = -69;
pub const FLA_INVALID_SUBMATRIX_DIMS: i32 = -70;
pub const FLA_INVALID_SUBMATRIX_OFFSET: i32 = -71;
pub const FLA_OBJECT_NOT_SCALAR_ELEMTYPE: i32 = -72;
pub const FLA_OBJECT_NOT_MATRIX_ELEMTYPE: i32 = -73;
pub const FLA_ENCOUNTERED_NON_POSITIVE_NTHREADS: i32 = -74;
pub const FLA_INVALID_CONJ_GIVEN_DATATYPE: i32 = -75;
pub const FLA_INVALID_COMPLEX_TRANS: i32 = -76;
pub const FLA_INVALID_REAL_TRANS: i32 = -77;
pub const FLA_INVALID_BLAS_TRANS: i32 = -78;
pub const FLA_INVALID_NONCONSTANT_DATATYPE: i32 = -79;
pub const FLA_OBJECT_NOT_NONCONSTANT: i32 = -80;
pub const FLA_OBJECT_DATATYPES_NOT_EQUAL: i32 = -82;
pub const FLA_DIVIDE_BY_ZERO: i32 = -83;
pub const FLA_OBJECT_ELEMTYPES_NOT_EQUAL: i32 = -84;
pub const FLA_INVALID_PIVOT_INDEX_RANGE: i32 = -85;
pub const FLA_HOUSEH_PANEL_MATRIX_TOO_SMALL: i32 = -86;
pub const FLA_INVALID_OBJECT_LENGTH: i32 = -87;
pub const FLA_INVALID_OBJECT_WIDTH: i32 = -88;
pub const FLA_INVALID_ERROR_CHECKING_LEVEL: i32 = -89;
pub const FLA_ATTEMPTED_OVER_REPART_2X2: i32 = -90;
pub const FLA_ATTEMPTED_OVER_REPART_2X1: i32 = -91;
pub const FLA_ATTEMPTED_OVER_REPART_1X2: i32 = -92;
pub const FLA_EXTERNAL_LAPACK_NOT_IMPLEMENTED: i32 = -93;
pub const FLA_INVALID_ROW_STRIDE: i32 = -94;
pub const FLA_INVALID_COL_STRIDE: i32 = -95;
pub const FLA_INVALID_STRIDE_COMBINATION: i32 = -96;
pub const FLA_INVALID_VECTOR_DIM: i32 = -97;
pub const FLA_EXPECTED_ROW_VECTOR: i32 = -98;
pub const FLA_EXPECTED_COL_VECTOR: i32 = -99;
pub const FLA_INVALID_INVERSE: i32 = -100;
pub const FLA_MALLOC_GPU_RETURNED_NULL_POINTER: i32 = -101;
pub const FLA_INVALID_EVD_TYPE: i32 = -102;
pub const FLA_INVALID_SVD_TYPE: i32 = -103;
pub const FLA_INVALID_MACHVAL: i32 = -104;
pub const FLA_INVALID_DIAG_OFFSET: i32 = -105;
pub const FLA_EXPECTED_COL_STORAGE: i32 = -106;
pub const FLA_EXPECTED_ROW_STORAGE: i32 = -107;
pub const FLA_LAPAC2FLAME_INVALID_RETURN: i32 = -108;
pub const FLA_INVALID_SVD_TYPE_COMBINATION: i32 = -109;
pub const FLA_INVALID_SVD_TYPE_AND_TRANS_COMBINATION: i32 = -110;
pub const FLA_OBJECT_NOT_COMPARABLE: i32 = -111;
pub const FLA_ERROR_CODE_MAX: i32 = -111;
pub const FLA_MAX_NUM_ERROR_MSGS: u32 = 150;
pub const FLA_MAX_ERROR_MSG_LENGTH: u32 = 200;
pub const AOCL_DTL_TRACE_ENABLE: u32 = 0;
pub const AOCL_DTL_DUMP_ENABLE: u32 = 0;
pub const AOCL_DTL_LOG_ENABLE: u32 = 0;
pub const LF_AOCL_DTL_LOG_ENABLE: u32 = 0;
pub const LF_AOCL_DTL_TRACE_ENABLE: u32 = 0;
pub const AOCL_DTL_LEVEL_ALL: u32 = 14;
pub const AOCL_DTL_LEVEL_TRACE_8: u32 = 13;
pub const AOCL_DTL_LEVEL_TRACE_7: u32 = 12;
pub const AOCL_DTL_LEVEL_TRACE_6: u32 = 11;
pub const AOCL_DTL_LEVEL_TRACE_5: u32 = 10;
pub const AOCL_DTL_LEVEL_TRACE_4: u32 = 9;
pub const AOCL_DTL_LEVEL_TRACE_3: u32 = 8;
pub const AOCL_DTL_LEVEL_TRACE_2: u32 = 7;
pub const AOCL_DTL_LEVEL_TRACE_1: u32 = 6;
pub const AOCL_DTL_LEVEL_VERBOSE: u32 = 5;
pub const AOCL_DTL_LEVEL_INFO: u32 = 4;
pub const AOCL_DTL_LEVEL_MINOR: u32 = 3;
pub const AOCL_DTL_LEVEL_MAJOR: u32 = 2;
pub const AOCL_DTL_LEVEL_CRITICAL: u32 = 1;
pub const AOCL_DTL_TRACE_FILE: &[u8; 18] = b"aocldtl_trace.txt\0";
pub const AOCL_DTL_AUTO_TRACE_FILE: &[u8; 27] = b"aocldtl_auto_trace.rawfile\0";
pub const AOCL_DTL_LOG_FILE: &[u8; 16] = b"aocldtl_log.txt\0";
pub const AOCL_CHAR_DATA_TYPE: u32 = 1;
pub const AOCL_UINT16_DATA_TYPE: u32 = 2;
pub const AOCL_STRING_DATA_TYPE: u32 = 3;
pub const AOCL_UINT32_DATA_TYPE: u32 = 4;
pub const AOCL_LOG_HEX_VALUE: u8 = 120u8;
pub const AOCL_LOG_DECIMAL_VALUE: u8 = 100u8;
pub const AOCL_FAL_SUCCESS: u32 = 0;
pub const AOCL_FAL_CLOSE_ERROR: i32 = -1;
pub const AOCL_FAL_READ_ERROR: i32 = -2;
pub const AOCL_FAL_WRITE_ERROR: i32 = -3;
pub const AOCL_FAL_EOF_ERROR: i32 = -6;
pub const AOCL_FAL_FERROR: i32 = -7;
pub const TRACE_TYPE_FENTRY: u32 = 1;
pub const TRACE_TYPE_FEXIT: u32 = 2;
pub const TRACE_TYPE_LOG: u32 = 3;
pub const TRACE_TYPE_RAW: u32 = 4;
pub const AOCL_FLA_PROGRESS_H: u32 = 1;
pub const FLA_PTHREAD_ONCE_INIT: u32 = 0;
pub const FLA_IS: &[u8; 2] = b"d\0";
pub const FLA_SPFFRT2__NTHRESH1: u32 = 64;
pub const FLA_SPFFRT2__NTHRESH2: u32 = 201;
pub const FLA_SPFFRT2__NTHRESH3: u32 = 4096;
pub const FLA_SPFFRT2__NCOLTHRESH: u32 = 3;
pub const FLA_SPFFRT2__NCOLFRAC_THRESH1: u32 = 25;
pub const FLA_SPFFRT2__NCOLFRAC_THRESH2: u32 = 80;
pub const FLA_SPFFRT2__NCOLFRAC_THRESH3: u32 = 20;
pub const FLA_SPFFRT2__BSIZE_NL1: u32 = 256;
pub const FLA_SPFFRT2__BSIZE_NL2: u32 = 4096;
pub const FLA_SPFFRT2__BSIZE1: u32 = 8;
pub const FLA_SPFFRT2__BSIZE2: u32 = 32;
pub const FLA_SPFFRT2__BSIZE3: u32 = 64;
pub const TRUE_: u32 = 1;
pub const FALSE_: u32 = 0;
pub const F2C_proc_par_types: u32 = 1;
pub const BLIS1_VECTOR_INTRINSIC_TYPE: u32 = 0;
pub const BLIS1_NO_INTRINSICS: u32 = 0;
pub const BLIS1_SSE_INTRINSICS: u32 = 3;
pub const BLIS1_TRANS_BEGIN: u32 = 100;
pub const BLIS1_UPLO_BEGIN: u32 = 200;
pub const BLIS1_SIDE_BEGIN: u32 = 300;
pub const BLIS1_DIAG_BEGIN: u32 = 400;
pub const BLIS1_CONJ_BEGIN: u32 = 500;
pub const FLA_CONSTANT_I_OFFSET: u32 = 0;
pub const FLA_SUBPROBLEM: u32 = 0;
pub const FLA_UNBLOCKED_EXTERN: u32 = 10;
pub const FLA_BLOCKED_EXTERN: u32 = 13;
pub const FLA_UNB_VAR_OFFSET: u32 = 40;
pub const FLA_OPT_VAR_OFFSET: u32 = 80;
pub const FLA_BLK_VAR_OFFSET: u32 = 120;
pub const FLA_BLF_VAR_OFFSET: u32 = 160;
pub const FLA_UNBLOCKED_VARIANT1: u32 = 41;
pub const FLA_UNBLOCKED_VARIANT2: u32 = 42;
pub const FLA_UNBLOCKED_VARIANT3: u32 = 43;
pub const FLA_UNBLOCKED_VARIANT4: u32 = 44;
pub const FLA_UNBLOCKED_VARIANT5: u32 = 45;
pub const FLA_UNBLOCKED_VARIANT6: u32 = 46;
pub const FLA_UNBLOCKED_VARIANT7: u32 = 47;
pub const FLA_UNBLOCKED_VARIANT8: u32 = 48;
pub const FLA_UNBLOCKED_VARIANT9: u32 = 49;
pub const FLA_UNBLOCKED_VARIANT10: u32 = 50;
pub const FLA_UNB_OPT_VARIANT1: u32 = 81;
pub const FLA_UNB_OPT_VARIANT2: u32 = 82;
pub const FLA_UNB_OPT_VARIANT3: u32 = 83;
pub const FLA_UNB_OPT_VARIANT4: u32 = 84;
pub const FLA_UNB_OPT_VARIANT5: u32 = 85;
pub const FLA_UNB_OPT_VARIANT6: u32 = 86;
pub const FLA_UNB_OPT_VARIANT7: u32 = 87;
pub const FLA_UNB_OPT_VARIANT8: u32 = 88;
pub const FLA_UNB_OPT_VARIANT9: u32 = 89;
pub const FLA_UNB_OPT_VARIANT10: u32 = 90;
pub const FLA_BLOCKED_VARIANT1: u32 = 121;
pub const FLA_BLOCKED_VARIANT2: u32 = 122;
pub const FLA_BLOCKED_VARIANT3: u32 = 123;
pub const FLA_BLOCKED_VARIANT4: u32 = 124;
pub const FLA_BLOCKED_VARIANT5: u32 = 125;
pub const FLA_BLOCKED_VARIANT6: u32 = 126;
pub const FLA_BLOCKED_VARIANT7: u32 = 127;
pub const FLA_BLOCKED_VARIANT8: u32 = 128;
pub const FLA_BLOCKED_VARIANT9: u32 = 129;
pub const FLA_BLOCKED_VARIANT10: u32 = 130;
pub const FLA_BLOCKED_VARIANT11: u32 = 131;
pub const FLA_BLOCKED_VARIANT12: u32 = 132;
pub const FLA_BLOCKED_VARIANT13: u32 = 133;
pub const FLA_BLOCKED_VARIANT14: u32 = 134;
pub const FLA_BLOCKED_VARIANT15: u32 = 135;
pub const FLA_BLOCKED_VARIANT16: u32 = 136;
pub const FLA_BLOCKED_VARIANT17: u32 = 137;
pub const FLA_BLOCKED_VARIANT18: u32 = 138;
pub const FLA_BLOCKED_VARIANT19: u32 = 139;
pub const FLA_BLOCKED_VARIANT20: u32 = 140;
pub const FLA_BLK_FUS_VARIANT1: u32 = 161;
pub const FLA_BLK_FUS_VARIANT2: u32 = 162;
pub const FLA_BLK_FUS_VARIANT3: u32 = 163;
pub const FLA_BLK_FUS_VARIANT4: u32 = 164;
pub const FLA_BLK_FUS_VARIANT5: u32 = 165;
pub const FLA_BLK_FUS_VARIANT6: u32 = 166;
pub const FLA_BLK_FUS_VARIANT7: u32 = 167;
pub const FLA_BLK_FUS_VARIANT8: u32 = 168;
pub const FLA_BLK_FUS_VARIANT9: u32 = 169;
pub const FLA_BLK_FUS_VARIANT10: u32 = 170;
pub const FLA_FLAT_TO_HIER: u32 = 4000;
pub const FLA_HIER_TO_FLAT: u32 = 4001;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub type pid_t = __pid_t;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: c_int,
    pub _IO_read_ptr: *mut c_char,
    pub _IO_read_end: *mut c_char,
    pub _IO_read_base: *mut c_char,
    pub _IO_write_base: *mut c_char,
    pub _IO_write_ptr: *mut c_char,
    pub _IO_write_end: *mut c_char,
    pub _IO_buf_base: *mut c_char,
    pub _IO_buf_end: *mut c_char,
    pub _IO_save_base: *mut c_char,
    pub _IO_backup_base: *mut c_char,
    pub _IO_save_end: *mut c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: c_int,
    pub _flags2: c_int,
    pub _old_offset: __off_t,
    pub _cur_column: c_ushort,
    pub _vtable_offset: c_schar,
    pub _shortbuf: [c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut c_void,
    pub __pad5: usize,
    pub _mode: c_int,
    pub _unused2: [c_char; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: c_int,
    pub __count: c_uint,
    pub __owner: c_int,
    pub __nusers: c_uint,
    pub __kind: c_int,
    pub __spins: c_short,
    pub __elision: c_short,
    pub __list: __pthread_list_t,
}
pub type pthread_once_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [c_char; 40usize],
    pub __align: c_long,
}

#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct omp_lock_t {
    pub _x: [c_uchar; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scomplex {
    pub real: f32,
    pub imag: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcomplex {
    pub real: f64,
    pub imag: f64,
}
pub type FLA_Bool = c_int;
pub type FLA_Error = c_int;
pub type FLA_Quadrant = c_int;
pub type FLA_Datatype = c_int;
pub type FLA_Elemtype = c_int;
pub type FLA_Side = c_int;
pub type FLA_Uplo = c_int;
pub type FLA_Trans = c_int;
pub type FLA_Conj = c_int;
pub type FLA_Diag = c_int;
pub type FLA_Dimension = c_int;
pub type FLA_Pivot_type = c_int;
pub type FLA_Direct = c_int;
pub type FLA_Store = c_int;
pub type FLA_Matrix_type = c_int;
pub type FLA_Precision = c_int;
pub type FLA_Domain = c_int;
pub type FLA_Inv = c_int;
pub type FLA_Evd_type = c_int;
pub type FLA_Svd_type = c_int;
pub type FLA_Machval = c_int;
pub type FLA_Diag_off = c_int;
pub type fla_dim_t = uinteger;
pub type FLA_Lock = FLA_Lock_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLA_Lock_s {
    pub lock: omp_lock_t,
}
pub type FLASH_Thread = FLASH_Thread_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLA_Obj_struct {
    pub datatype: FLA_Datatype,
    pub elemtype: FLA_Elemtype,
    pub m: fla_dim_t,
    pub n: fla_dim_t,
    pub rs: fla_dim_t,
    pub cs: fla_dim_t,
    pub m_inner: fla_dim_t,
    pub n_inner: fla_dim_t,
    pub id: c_ulong,
    pub m_index: fla_dim_t,
    pub n_index: fla_dim_t,
    pub n_elem_alloc: fla_dim_t,
    pub buffer: *mut c_void,
    pub buffer_info: c_int,
    pub uplo: FLA_Uplo,
}
pub type FLA_Base_obj = FLA_Obj_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLA_Obj_view {
    pub offm: fla_dim_t,
    pub offn: fla_dim_t,
    pub m: fla_dim_t,
    pub n: fla_dim_t,
    pub m_inner: fla_dim_t,
    pub n_inner: fla_dim_t,
    pub base: *mut FLA_Base_obj,
}
pub type FLA_Obj = FLA_Obj_view;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_Thread_s {
    pub id: c_int,
    pub args: *mut c_void,
}
pub type Double = f64;
pub type Float = f32;
pub type Void = c_void;
pub type uint8 = c_uchar;
pub type uint16 = c_ushort;
pub type uint32 = c_uint;
pub type uint64 = c_ulong;
pub type STRING = *mut uint8;
pub type Bool = c_uchar;
pub type int8 = c_char;
pub type int32 = c_long;
pub type int16 = c_short;
pub type AOCL_HANDLE = *mut Void;
pub type AOCL_TID = pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AOCL_FLIST_Node_t {
    pub tid: AOCL_TID,
    pub fp: *mut FILE,
    pub pNext: *mut AOCL_FLIST_Node_t,
}
pub type AOCL_FLIST_Node = AOCL_FLIST_Node_t;
pub type aocl_fla_progress_callback = Option<
    extern "C" fn(
        api: *const c_char,
        lenapi: integer,
        progress: *const integer,
        current_thread: *const integer,
        total_threads: *const integer,
    ) -> c_int,
>;
pub type fla_pthread_mutex_t = pthread_mutex_t;
pub type fla_pthread_once_t = pthread_once_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum fla_arch_t {
    FLA_ARCH_GENERIC = 0,
    FLA_ARCH_SSE2 = 1,
    FLA_ARCH_AVX = 2,
    FLA_ARCH_AVX2 = 3,
    FLA_ARCH_AVX512 = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fla_context {
    pub num_threads: c_int,
    pub is_fma: FLA_Bool,
    pub is_avx2: FLA_Bool,
    pub is_avx512: FLA_Bool,
    pub arch_id: fla_arch_t,
    pub libflame_mt: FLA_Bool,
}
pub type fla_context = _fla_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fla_tl_context {
    pub num_threads: c_int,
    pub libflame_mt: FLA_Bool,
}
pub type fla_tl_context_t = _fla_tl_context;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum API_ID {
    FLA_LABRD = 0,
    FLA_ORMQR = 1,
    FLA_ORMLQ = 2,
}
pub type address = *mut c_char;
pub type shortint = c_short;
pub type real = f32;
pub type doublereal = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct complex {
    pub r: real,
    pub i: real,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct doublecomplex {
    pub r: doublereal,
    pub i: doublereal,
}
pub type logical = integer;
pub type shortlogical = c_short;
pub type logical1 = c_char;
pub type integer1 = c_char;
pub type flag = c_long;
pub type ftnlen = integer;
pub type ftnint = c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cilist {
    pub cierr: flag,
    pub ciunit: ftnint,
    pub ciend: flag,
    pub cifmt: *mut c_char,
    pub cirec: ftnint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icilist {
    pub icierr: flag,
    pub iciunit: *mut c_char,
    pub iciend: flag,
    pub icifmt: *mut c_char,
    pub icirlen: ftnint,
    pub icirnum: ftnint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct olist {
    pub oerr: flag,
    pub ounit: ftnint,
    pub ofnm: *mut c_char,
    pub ofnmlen: ftnlen,
    pub osta: *mut c_char,
    pub oacc: *mut c_char,
    pub ofm: *mut c_char,
    pub orl: ftnint,
    pub oblnk: *mut c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cllist {
    pub cerr: flag,
    pub cunit: ftnint,
    pub csta: *mut c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alist {
    pub aerr: flag,
    pub aunit: ftnint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inlist {
    pub inerr: flag,
    pub inunit: ftnint,
    pub infile: *mut c_char,
    pub infilen: ftnlen,
    pub inex: *mut ftnint,
    pub inopen: *mut ftnint,
    pub innum: *mut ftnint,
    pub innamed: *mut ftnint,
    pub inname: *mut c_char,
    pub innamlen: ftnlen,
    pub inacc: *mut c_char,
    pub inacclen: ftnlen,
    pub inseq: *mut c_char,
    pub inseqlen: ftnlen,
    pub indir: *mut c_char,
    pub indirlen: ftnlen,
    pub infmt: *mut c_char,
    pub infmtlen: ftnlen,
    pub inform: *mut c_char,
    pub informlen: ftnint,
    pub inunf: *mut c_char,
    pub inunflen: ftnlen,
    pub inrecl: *mut ftnint,
    pub innrec: *mut ftnint,
    pub inblank: *mut c_char,
    pub inblanklen: ftnlen,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Multitype {
    pub g: integer1,
    pub h: shortint,
    pub i: integer,
    pub r: real,
    pub d: doublereal,
    pub c: complex,
    pub z: doublecomplex,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vardesc {
    pub name: *mut c_char,
    pub addr: *mut c_char,
    pub dims: *mut ftnlen,
    pub type_: c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Namelist {
    pub name: *mut c_char,
    pub vars: *mut *mut Vardesc,
    pub nvars: c_int,
}
pub type U_fp = Option<extern "C" fn() -> c_int>;
pub type J_fp = Option<extern "C" fn() -> shortint>;
pub type I_fp = Option<extern "C" fn() -> integer>;
pub type R_fp = Option<extern "C" fn() -> real>;
pub type D_fp = Option<extern "C" fn() -> doublereal>;
pub type E_fp = Option<extern "C" fn() -> doublereal>;
pub type C_fp = Option<extern "C" fn()>;
pub type Z_fp = Option<extern "C" fn()>;
pub type L_fp = Option<extern "C" fn() -> logical>;
pub type L_fp1 = Option<extern "C" fn(arg1: *mut complex) -> logical>;
pub type L_fp2 = Option<extern "C" fn(arg1: *mut complex, arg2: *mut complex) -> logical>;
pub type L_fps2 = Option<extern "C" fn(arg1: *mut real, arg2: *mut real) -> logical>;
pub type L_fps3 =
    Option<extern "C" fn(arg1: *mut real, arg2: *mut real, arg3: *mut real) -> logical>;
pub type L_fpd2 = Option<extern "C" fn(arg1: *mut doublereal, arg2: *mut doublereal) -> logical>;
pub type L_fpd3 = Option<
    extern "C" fn(arg1: *mut doublereal, arg2: *mut doublereal, arg3: *mut doublereal) -> logical,
>;
pub type L_fpz1 = Option<extern "C" fn(arg1: *mut doublecomplex) -> logical>;
pub type L_fpz2 =
    Option<extern "C" fn(arg1: *mut doublecomplex, arg2: *mut doublecomplex) -> logical>;
pub type K_fp = Option<extern "C" fn() -> shortlogical>;
pub type H_fp = Option<extern "C" fn()>;
pub type S_fp = Option<extern "C" fn() -> c_int>;
pub type C_f = c_void;
pub type H_f = c_void;
pub type Z_f = c_void;
pub type E_f = doublereal;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum trans1_t {
    BLIS1_NO_TRANSPOSE = 100,
    BLIS1_TRANSPOSE = 101,
    BLIS1_CONJ_NO_TRANSPOSE = 102,
    BLIS1_CONJ_TRANSPOSE = 103,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum uplo1_t {
    BLIS1_LOWER_TRIANGULAR = 200,
    BLIS1_UPPER_TRIANGULAR = 201,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum side1_t {
    BLIS1_LEFT = 300,
    BLIS1_RIGHT = 301,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum diag1_t {
    BLIS1_NONUNIT_DIAG = 400,
    BLIS1_UNIT_DIAG = 401,
    BLIS1_ZERO_DIAG = 402,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum conj1_t {
    BLIS1_NO_CONJUGATE = 500,
    BLIS1_CONJUGATE = 501,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLA_Blocksize_s {
    pub s: fla_dim_t,
    pub d: fla_dim_t,
    pub c: fla_dim_t,
    pub z: fla_dim_t,
}
pub type fla_blocksize_t = FLA_Blocksize_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_axpy_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_axpy: *mut fla_axpy_s,
}
pub type fla_axpy_t = fla_axpy_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_axpyt_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_axpyt: *mut fla_axpyt_s,
}
pub type fla_axpyt_t = fla_axpyt_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_copy_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_copy: *mut fla_copy_s,
}
pub type fla_copy_t = fla_copy_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_copyt_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_copyt: *mut fla_copyt_s,
}
pub type fla_copyt_t = fla_copyt_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_copyr_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_copyr: *mut fla_copyr_s,
    pub sub_copy: *mut fla_copy_s,
}
pub type fla_copyr_t = fla_copyr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_scal_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
}
pub type fla_scal_t = fla_scal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_scalr_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scalr: *mut fla_scalr_s,
    pub sub_scal: *mut fla_scal_s,
}
pub type fla_scalr_t = fla_scalr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_swap_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_swap: *mut fla_swap_s,
}
pub type fla_swap_t = fla_swap_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_tpose_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_trans: *mut fla_tpose_s,
    pub sub_swap: *mut fla_swap_s,
}
pub type fla_tpose_t = fla_tpose_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_gemv_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_gemv: *mut fla_gemv_s,
}
pub type fla_gemv_t = fla_gemv_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_trsv_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_trsv: *mut fla_trsv_s,
    pub sub_gemv: *mut fla_gemv_s,
}
pub type fla_trsv_t = fla_trsv_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_gemm_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_gemm_t = fla_gemm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_hemm_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_hemm: *mut fla_hemm_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
}
pub type fla_hemm_t = fla_hemm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_herk_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scalr: *mut fla_scalr_s,
    pub sub_herk: *mut fla_herk_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_herk_t = fla_herk_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_her2k_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scalr: *mut fla_scalr_s,
    pub sub_her2k: *mut fla_her2k_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
}
pub type fla_her2k_t = fla_her2k_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_symm_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_symm: *mut fla_symm_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
}
pub type fla_symm_t = fla_symm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_syrk_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scalr: *mut fla_scalr_s,
    pub sub_syrk: *mut fla_syrk_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_syrk_t = fla_syrk_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_syr2k_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scalr: *mut fla_scalr_s,
    pub sub_syr2k: *mut fla_syr2k_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
}
pub type fla_syr2k_t = fla_syr2k_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_trmm_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_trmm: *mut fla_trmm_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_trmm_t = fla_trmm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_trsm_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_trsm_t = fla_trsm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_chol_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_chol: *mut fla_chol_s,
    pub sub_herk: *mut fla_herk_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_chol_t = fla_chol_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_ttmm_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_ttmm: *mut fla_ttmm_s,
    pub sub_herk: *mut fla_herk_s,
    pub sub_trmm: *mut fla_trmm_s,
    pub sub_gemm: *mut fla_gemm_s,
}
pub type fla_ttmm_t = fla_ttmm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_appiv_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_appiv: *mut fla_appiv_s,
}
pub type fla_appiv_t = fla_appiv_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_lu_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_lu: *mut fla_lu_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_gemm3: *mut fla_gemm_s,
    pub sub_trsm1: *mut fla_trsm_s,
    pub sub_trsm2: *mut fla_trsm_s,
    pub sub_appiv1: *mut fla_appiv_s,
    pub sub_appiv2: *mut fla_appiv_s,
}
pub type fla_lu_t = fla_lu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_qr_ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_qrut: *mut fla_qr_ut_s,
    pub sub_apqut: *mut fla_apqut_s,
}
pub type fla_qrut_t = fla_qr_ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_qr2_ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_qr2ut: *mut fla_qr2_ut_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_copy: *mut fla_copy_s,
    pub sub_axpy: *mut fla_axpy_s,
}
pub type fla_qr2ut_t = fla_qr2_ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_lq_ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_lqut: *mut fla_lq_ut_s,
    pub sub_apqut: *mut fla_apqut_s,
}
pub type fla_lqut_t = fla_lq_ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_caqr2ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_caqr2ut: *mut fla_caqr2ut_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_trmm1: *mut fla_trmm_s,
    pub sub_trmm2: *mut fla_trmm_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_axpy1: *mut fla_axpy_s,
    pub sub_axpy2: *mut fla_axpy_s,
    pub sub_axpy3: *mut fla_axpy_s,
    pub sub_copy: *mut fla_copy_s,
}
pub type fla_caqr2ut_t = fla_caqr2ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_hess_ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
}
pub type fla_hessut_t = fla_hess_ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_tridiag_ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
}
pub type fla_tridiagut_t = fla_tridiag_ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_bidiag_ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
}
pub type fla_bidiagut_t = fla_bidiag_ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_trinv_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_trinv: *mut fla_trinv_s,
    pub sub_gemm: *mut fla_gemm_s,
    pub sub_trmm: *mut fla_trmm_s,
    pub sub_trsm1: *mut fla_trsm_s,
    pub sub_trsm2: *mut fla_trsm_s,
}
pub type fla_trinv_t = fla_trinv_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_sylv_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_sylv1: *mut fla_sylv_s,
    pub sub_sylv2: *mut fla_sylv_s,
    pub sub_sylv3: *mut fla_sylv_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_gemm3: *mut fla_gemm_s,
    pub sub_gemm4: *mut fla_gemm_s,
    pub sub_gemm5: *mut fla_gemm_s,
    pub sub_gemm6: *mut fla_gemm_s,
    pub sub_gemm7: *mut fla_gemm_s,
    pub sub_gemm8: *mut fla_gemm_s,
}
pub type fla_sylv_t = fla_sylv_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_lyap_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_scal: *mut fla_scal_s,
    pub sub_lyap: *mut fla_lyap_s,
    pub sub_sylv: *mut fla_sylv_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_hemm: *mut fla_hemm_s,
    pub sub_her2k: *mut fla_her2k_s,
}
pub type fla_lyap_t = fla_lyap_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_spdinv_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_chol: *mut fla_chol_s,
    pub sub_trinv: *mut fla_trinv_s,
    pub sub_ttmm: *mut fla_ttmm_s,
}
pub type fla_spdinv_t = fla_spdinv_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apqut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apqut: *mut fla_apqut_s,
    pub sub_trmm1: *mut fla_trmm_s,
    pub sub_trmm2: *mut fla_trmm_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_copyt: *mut fla_copyt_s,
    pub sub_axpyt: *mut fla_axpyt_s,
}
pub type fla_apqut_t = fla_apqut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apq2ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apq2ut: *mut fla_apq2ut_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_copyt: *mut fla_copyt_s,
    pub sub_axpyt: *mut fla_axpyt_s,
}
pub type fla_apq2ut_t = fla_apq2ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_caqrutinc_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_caqr2ut: *mut fla_caqr2ut_s,
    pub sub_apcaq2ut: *mut fla_apcaq2ut_s,
}
pub type fla_caqrutinc_t = fla_caqrutinc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apcaqutinc_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apcaq2ut: *mut fla_apcaq2ut_s,
}
pub type fla_apcaqutinc_t = fla_apcaqutinc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apcaq2ut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apcaq2ut: *mut fla_apcaq2ut_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_trmm1: *mut fla_trmm_s,
    pub sub_trmm2: *mut fla_trmm_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_axpy1: *mut fla_axpy_s,
    pub sub_axpy2: *mut fla_axpy_s,
    pub sub_axpy3: *mut fla_axpy_s,
    pub sub_copy: *mut fla_copy_s,
}
pub type fla_apcaq2ut_t = fla_apcaq2ut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_qr_ut_inc_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_qrut: *mut fla_qr_ut_s,
    pub sub_qr2ut: *mut fla_qr2_ut_s,
    pub sub_apqut: *mut fla_apqut_s,
    pub sub_apq2ut: *mut fla_apq2ut_s,
}
pub type fla_qrutinc_t = fla_qr_ut_inc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apqutinc_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apqut: *mut fla_apqut_s,
    pub sub_apq2ut: *mut fla_apq2ut_s,
}
pub type fla_apqutinc_t = fla_apqutinc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_uddateut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_uddateut: *mut fla_uddateut_s,
    pub sub_apqudut: *mut fla_apqudut_s,
}
pub type fla_uddateut_t = fla_uddateut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apqudut_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apqudut: *mut fla_apqudut_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_gemm3: *mut fla_gemm_s,
    pub sub_gemm4: *mut fla_gemm_s,
    pub sub_trsm: *mut fla_trsm_s,
    pub sub_copyt: *mut fla_copyt_s,
    pub sub_axpyt: *mut fla_axpyt_s,
}
pub type fla_apqudut_t = fla_apqudut_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_uddateutinc_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_uddateut: *mut fla_uddateut_s,
    pub sub_apqudut: *mut fla_apqudut_s,
}
pub type fla_uddateutinc_t = fla_uddateutinc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_apqudutinc_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_apqudut: *mut fla_apqudut_s,
}
pub type fla_apqudutinc_t = fla_apqudutinc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fla_eig_gest_s {
    pub matrix_type: FLA_Matrix_type,
    pub variant: c_int,
    pub blocksize: *mut fla_blocksize_t,
    pub sub_eig_gest: *mut fla_eig_gest_s,
    pub sub_axpy1: *mut fla_axpy_s,
    pub sub_axpy2: *mut fla_axpy_s,
    pub sub_gemm1: *mut fla_gemm_s,
    pub sub_gemm2: *mut fla_gemm_s,
    pub sub_gemm3: *mut fla_gemm_s,
    pub sub_hemm: *mut fla_hemm_s,
    pub sub_her2k: *mut fla_her2k_s,
    pub sub_trmm1: *mut fla_trmm_s,
    pub sub_trmm2: *mut fla_trmm_s,
    pub sub_trsm1: *mut fla_trsm_s,
    pub sub_trsm2: *mut fla_trsm_s,
}
pub type fla_eig_gest_t = fla_eig_gest_s;
