
//! Compatible implementation for dynamic-loading.
//!
//! This requires custom `dyload_lib` definition in mod.rs, or visible from current layer of module.
//!
//! This file is generated automatically.

use super::*;

pub unsafe fn AOCL_FAL_Close(fpFilePointer: *mut FILE) -> int32 {
                dyload_lib().AOCL_FAL_Close.unwrap()(fpFilePointer)
            }

pub unsafe fn AOCL_FAL_Error(fpFilePointer: *mut FILE) -> int32 {
                dyload_lib().AOCL_FAL_Error.unwrap()(fpFilePointer)
            }

pub unsafe fn AOCL_FAL_Open(pchFileName: *const int8, pchMode: *const int8) -> *mut FILE {
                dyload_lib().AOCL_FAL_Open.unwrap()(pchFileName, pchMode)
            }

pub unsafe fn AOCL_FAL_Read(pvBuffer: *mut c_void, i32Size: int32, i32Count: int32, fpFilePointer: *mut FILE) -> int32 {
                dyload_lib().AOCL_FAL_Read.unwrap()(pvBuffer, i32Size, i32Count, fpFilePointer)
            }

pub unsafe fn AOCL_FAL_Write(pvBuffer: *const c_void, i32Size: int32, iCount: int32, fpFilePointer: *mut FILE) -> int32 {
                dyload_lib().AOCL_FAL_Write.unwrap()(pvBuffer, i32Size, iCount, fpFilePointer)
            }

pub unsafe fn AOCL_FLIST_IsEmpty(plist: *mut AOCL_FLIST_Node) -> Bool {
                dyload_lib().AOCL_FLIST_IsEmpty.unwrap()(plist)
            }

pub unsafe fn AOCL_FLIST_GetFile(plist: *mut AOCL_FLIST_Node, tid: AOCL_TID) -> *mut FILE {
                dyload_lib().AOCL_FLIST_GetFile.unwrap()(plist, tid)
            }

pub unsafe fn AOCL_FLIST_AddFile(pchFilePrefix: *const int8, plist: *mut *mut AOCL_FLIST_Node, tid: AOCL_TID) -> *mut FILE {
                dyload_lib().AOCL_FLIST_AddFile.unwrap()(pchFilePrefix, plist, tid)
            }

pub unsafe fn AOCL_FLIST_CloseFile(plist: *mut AOCL_FLIST_Node, tid: AOCL_TID) {
                dyload_lib().AOCL_FLIST_CloseFile.unwrap()(plist, tid)
            }

pub unsafe fn AOCL_FLIST_CloseAll(plist: *mut AOCL_FLIST_Node) {
                dyload_lib().AOCL_FLIST_CloseAll.unwrap()(plist)
            }

pub unsafe fn aocl_fla_set_progress(func: aocl_fla_progress_callback) {
                dyload_lib().aocl_fla_set_progress.unwrap()(func)
            }

pub unsafe fn aocl_fla_progress(api: *const c_char, lenapi: integer, progress: *const integer, current_thread: *const integer, total_threads: *const integer) -> c_int {
                dyload_lib().aocl_fla_progress.unwrap()(api, lenapi, progress, current_thread, total_threads)
            }

pub unsafe fn fla_pthread_mutex_lock(mutex: *mut fla_pthread_mutex_t) -> c_int {
                dyload_lib().fla_pthread_mutex_lock.unwrap()(mutex)
            }

pub unsafe fn fla_pthread_mutex_unlock(mutex: *mut fla_pthread_mutex_t) -> c_int {
                dyload_lib().fla_pthread_mutex_unlock.unwrap()(mutex)
            }

pub unsafe fn fla_pthread_once(once: *mut fla_pthread_once_t, init: Option<extern "C" fn()>) {
                dyload_lib().fla_pthread_once.unwrap()(once, init)
            }

pub unsafe fn aocl_fla_init() {
                dyload_lib().aocl_fla_init.unwrap()()
            }

pub unsafe fn aocl_fla_finalize() {
                dyload_lib().aocl_fla_finalize.unwrap()()
            }

pub unsafe fn FLA_Thread_get_subrange(thread_ID: c_int, num_threads: c_int, range: integer, sub_range: *mut integer, index: *mut integer) {
                dyload_lib().FLA_Thread_get_subrange.unwrap()(thread_ID, num_threads, range, sub_range, index)
            }

pub unsafe fn FLA_Thread_optimum(family: API_ID, actual_num_threads: *mut c_int) {
                dyload_lib().FLA_Thread_optimum.unwrap()(family, actual_num_threads)
            }

pub unsafe fn bl1_s2() -> f32 {
                dyload_lib().bl1_s2.unwrap()()
            }

pub unsafe fn bl1_d2() -> f64 {
                dyload_lib().bl1_d2.unwrap()()
            }

pub unsafe fn bl1_c2() -> scomplex {
                dyload_lib().bl1_c2.unwrap()()
            }

pub unsafe fn bl1_z2() -> dcomplex {
                dyload_lib().bl1_z2.unwrap()()
            }

pub unsafe fn bl1_s1() -> f32 {
                dyload_lib().bl1_s1.unwrap()()
            }

pub unsafe fn bl1_d1() -> f64 {
                dyload_lib().bl1_d1.unwrap()()
            }

pub unsafe fn bl1_c1() -> scomplex {
                dyload_lib().bl1_c1.unwrap()()
            }

pub unsafe fn bl1_z1() -> dcomplex {
                dyload_lib().bl1_z1.unwrap()()
            }

pub unsafe fn bl1_s1h() -> f32 {
                dyload_lib().bl1_s1h.unwrap()()
            }

pub unsafe fn bl1_d1h() -> f64 {
                dyload_lib().bl1_d1h.unwrap()()
            }

pub unsafe fn bl1_c1h() -> scomplex {
                dyload_lib().bl1_c1h.unwrap()()
            }

pub unsafe fn bl1_z1h() -> dcomplex {
                dyload_lib().bl1_z1h.unwrap()()
            }

pub unsafe fn bl1_s0() -> f32 {
                dyload_lib().bl1_s0.unwrap()()
            }

pub unsafe fn bl1_d0() -> f64 {
                dyload_lib().bl1_d0.unwrap()()
            }

pub unsafe fn bl1_c0() -> scomplex {
                dyload_lib().bl1_c0.unwrap()()
            }

pub unsafe fn bl1_z0() -> dcomplex {
                dyload_lib().bl1_z0.unwrap()()
            }

pub unsafe fn bl1_sm1h() -> f32 {
                dyload_lib().bl1_sm1h.unwrap()()
            }

pub unsafe fn bl1_dm1h() -> f64 {
                dyload_lib().bl1_dm1h.unwrap()()
            }

pub unsafe fn bl1_cm1h() -> scomplex {
                dyload_lib().bl1_cm1h.unwrap()()
            }

pub unsafe fn bl1_zm1h() -> dcomplex {
                dyload_lib().bl1_zm1h.unwrap()()
            }

pub unsafe fn bl1_sm1() -> f32 {
                dyload_lib().bl1_sm1.unwrap()()
            }

pub unsafe fn bl1_dm1() -> f64 {
                dyload_lib().bl1_dm1.unwrap()()
            }

pub unsafe fn bl1_cm1() -> scomplex {
                dyload_lib().bl1_cm1.unwrap()()
            }

pub unsafe fn bl1_zm1() -> dcomplex {
                dyload_lib().bl1_zm1.unwrap()()
            }

pub unsafe fn bl1_sm2() -> f32 {
                dyload_lib().bl1_sm2.unwrap()()
            }

pub unsafe fn bl1_dm2() -> f64 {
                dyload_lib().bl1_dm2.unwrap()()
            }

pub unsafe fn bl1_cm2() -> scomplex {
                dyload_lib().bl1_cm2.unwrap()()
            }

pub unsafe fn bl1_zm2() -> dcomplex {
                dyload_lib().bl1_zm2.unwrap()()
            }

pub unsafe fn bl1_vallocv(n_elem: uinteger, elem_size: uinteger) -> *mut c_void {
                dyload_lib().bl1_vallocv.unwrap()(n_elem, elem_size)
            }

pub unsafe fn bl1_iallocv(n_elem: uinteger) -> *mut integer {
                dyload_lib().bl1_iallocv.unwrap()(n_elem)
            }

pub unsafe fn bl1_sallocv(n_elem: uinteger) -> *mut f32 {
                dyload_lib().bl1_sallocv.unwrap()(n_elem)
            }

pub unsafe fn bl1_dallocv(n_elem: uinteger) -> *mut f64 {
                dyload_lib().bl1_dallocv.unwrap()(n_elem)
            }

pub unsafe fn bl1_callocv(n_elem: uinteger) -> *mut scomplex {
                dyload_lib().bl1_callocv.unwrap()(n_elem)
            }

pub unsafe fn bl1_zallocv(n_elem: uinteger) -> *mut dcomplex {
                dyload_lib().bl1_zallocv.unwrap()(n_elem)
            }

pub unsafe fn bl1_vallocm(m: uinteger, n: uinteger, elem_size: uinteger) -> *mut c_void {
                dyload_lib().bl1_vallocm.unwrap()(m, n, elem_size)
            }

pub unsafe fn bl1_iallocm(m: uinteger, n: uinteger) -> *mut integer {
                dyload_lib().bl1_iallocm.unwrap()(m, n)
            }

pub unsafe fn bl1_sallocm(m: uinteger, n: uinteger) -> *mut f32 {
                dyload_lib().bl1_sallocm.unwrap()(m, n)
            }

pub unsafe fn bl1_dallocm(m: uinteger, n: uinteger) -> *mut f64 {
                dyload_lib().bl1_dallocm.unwrap()(m, n)
            }

pub unsafe fn bl1_callocm(m: uinteger, n: uinteger) -> *mut scomplex {
                dyload_lib().bl1_callocm.unwrap()(m, n)
            }

pub unsafe fn bl1_zallocm(m: uinteger, n: uinteger) -> *mut dcomplex {
                dyload_lib().bl1_zallocm.unwrap()(m, n)
            }

pub unsafe fn bl1_sapdiagmv(side: side1_t, conj: conj1_t, m: integer, n: integer, x: *mut f32, incx: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dapdiagmv(side: side1_t, conj: conj1_t, m: integer, n: integer, x: *mut f64, incx: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csapdiagmv(side: side1_t, conj: conj1_t, m: integer, n: integer, x: *mut f32, incx: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_capdiagmv(side: side1_t, conj: conj1_t, m: integer, n: integer, x: *mut scomplex, incx: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_capdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zdapdiagmv(side: side1_t, conj: conj1_t, m: integer, n: integer, x: *mut f64, incx: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zdapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zapdiagmv(side: side1_t, conj: conj1_t, m: integer, n: integer, x: *mut dcomplex, incx: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zapdiagmv.unwrap()(side, conj, m, n, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_screate_contigm(m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_screate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dcreate_contigm(m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dcreate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ccreate_contigm(m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_ccreate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zcreate_contigm(m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zcreate_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_screate_contigmt(trans_dims: trans1_t, m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_screate_contigmt.unwrap()(trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dcreate_contigmt(trans_dims: trans1_t, m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dcreate_contigmt.unwrap()(trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ccreate_contigmt(trans_dims: trans1_t, m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_ccreate_contigmt.unwrap()(trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zcreate_contigmt(trans_dims: trans1_t, m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zcreate_contigmt.unwrap()(trans_dims, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_screate_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_screate_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dcreate_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dcreate_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ccreate_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_ccreate_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zcreate_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zcreate_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_screate_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_screate_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dcreate_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dcreate_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ccreate_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_ccreate_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zcreate_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zcreate_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sfree_contigm(a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_sfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dfree_contigm(a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cfree_contigm(a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_cfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zfree_contigm(a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zfree_contigm.unwrap()(a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sfree_saved_contigm(m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_sfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dfree_saved_contigm(m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cfree_saved_contigm(m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_cfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zfree_saved_contigm(m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zfree_saved_contigm.unwrap()(m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sfree_saved_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_sfree_saved_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dfree_saved_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dfree_saved_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cfree_saved_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_cfree_saved_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zfree_saved_contigmr(uplo: uplo1_t, m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zfree_saved_contigmr.unwrap()(uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sfree_saved_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut f32, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f32, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_sfree_saved_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dfree_saved_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut f64, a_rs_save: integer, a_cs_save: integer, a: *mut *mut f64, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_dfree_saved_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cfree_saved_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut scomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut scomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_cfree_saved_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zfree_saved_contigmsr(side: side1_t, uplo: uplo1_t, m: integer, n: integer, a_save: *mut dcomplex, a_rs_save: integer, a_cs_save: integer, a: *mut *mut dcomplex, a_rs: *mut integer, a_cs: *mut integer) {
                dyload_lib().bl1_zfree_saved_contigmsr.unwrap()(side, uplo, m, n, a_save, a_rs_save, a_cs_save, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sewinvscalv(conj: conj1_t, n: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_sewinvscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_dewinvscalv(conj: conj1_t, n: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dewinvscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_csewinvscalv(conj: conj1_t, n: integer, x: *mut f32, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_csewinvscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_cewinvscalv(conj: conj1_t, n: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_cewinvscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_zdewinvscalv(conj: conj1_t, n: integer, x: *mut f64, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zdewinvscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_zewinvscalv(conj: conj1_t, n: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zewinvscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_sewinvscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dewinvscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_csewinvscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_csewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cewinvscalmt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zdewinvscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zdewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zewinvscalmt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zewinvscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sewscalv(conj: conj1_t, n: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_sewscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_dewscalv(conj: conj1_t, n: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dewscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_csewscalv(conj: conj1_t, n: integer, x: *mut f32, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_csewscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_cewscalv(conj: conj1_t, n: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_cewscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_zdewscalv(conj: conj1_t, n: integer, x: *mut f64, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zdewscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_zewscalv(conj: conj1_t, n: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zewscalv.unwrap()(conj, n, x, incx, y, incy)
            }

pub unsafe fn bl1_sewscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dewscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_csewscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_csewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cewscalmt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zdewscalmt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zdewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zewscalmt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zewscalmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_vfree(p: *mut c_void) {
                dyload_lib().bl1_vfree.unwrap()(p)
            }

pub unsafe fn bl1_ifree(p: *mut integer) {
                dyload_lib().bl1_ifree.unwrap()(p)
            }

pub unsafe fn bl1_sfree(p: *mut f32) {
                dyload_lib().bl1_sfree.unwrap()(p)
            }

pub unsafe fn bl1_dfree(p: *mut f64) {
                dyload_lib().bl1_dfree.unwrap()(p)
            }

pub unsafe fn bl1_cfree(p: *mut scomplex) {
                dyload_lib().bl1_cfree.unwrap()(p)
            }

pub unsafe fn bl1_zfree(p: *mut dcomplex) {
                dyload_lib().bl1_zfree.unwrap()(p)
            }

pub unsafe fn bl1_sinverts(conj: conj1_t, alpha: *mut f32) {
                dyload_lib().bl1_sinverts.unwrap()(conj, alpha)
            }

pub unsafe fn bl1_dinverts(conj: conj1_t, alpha: *mut f64) {
                dyload_lib().bl1_dinverts.unwrap()(conj, alpha)
            }

pub unsafe fn bl1_cinverts(conj: conj1_t, alpha: *mut scomplex) {
                dyload_lib().bl1_cinverts.unwrap()(conj, alpha)
            }

pub unsafe fn bl1_zinverts(conj: conj1_t, alpha: *mut dcomplex) {
                dyload_lib().bl1_zinverts.unwrap()(conj, alpha)
            }

pub unsafe fn bl1_sinvert2s(conj: conj1_t, alpha: *mut f32, beta: *mut f32) {
                dyload_lib().bl1_sinvert2s.unwrap()(conj, alpha, beta)
            }

pub unsafe fn bl1_dinvert2s(conj: conj1_t, alpha: *mut f64, beta: *mut f64) {
                dyload_lib().bl1_dinvert2s.unwrap()(conj, alpha, beta)
            }

pub unsafe fn bl1_cinvert2s(conj: conj1_t, alpha: *mut scomplex, beta: *mut scomplex) {
                dyload_lib().bl1_cinvert2s.unwrap()(conj, alpha, beta)
            }

pub unsafe fn bl1_zinvert2s(conj: conj1_t, alpha: *mut dcomplex, beta: *mut dcomplex) {
                dyload_lib().bl1_zinvert2s.unwrap()(conj, alpha, beta)
            }

pub unsafe fn bl1_sinvertv(conj: conj1_t, n: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_sinvertv.unwrap()(conj, n, x, incx)
            }

pub unsafe fn bl1_dinvertv(conj: conj1_t, n: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dinvertv.unwrap()(conj, n, x, incx)
            }

pub unsafe fn bl1_cinvertv(conj: conj1_t, n: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_cinvertv.unwrap()(conj, n, x, incx)
            }

pub unsafe fn bl1_zinvertv(conj: conj1_t, n: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zinvertv.unwrap()(conj, n, x, incx)
            }

pub unsafe fn bl1_sident(m: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sident.unwrap()(m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dident(m: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dident.unwrap()(m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cident(m: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cident.unwrap()(m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zident(m: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zident.unwrap()(m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_smaxabsv(n: integer, x: *mut f32, incx: integer, maxabs: *mut f32) {
                dyload_lib().bl1_smaxabsv.unwrap()(n, x, incx, maxabs)
            }

pub unsafe fn bl1_dmaxabsv(n: integer, x: *mut f64, incx: integer, maxabs: *mut f64) {
                dyload_lib().bl1_dmaxabsv.unwrap()(n, x, incx, maxabs)
            }

pub unsafe fn bl1_cmaxabsv(n: integer, x: *mut scomplex, incx: integer, maxabs: *mut f32) {
                dyload_lib().bl1_cmaxabsv.unwrap()(n, x, incx, maxabs)
            }

pub unsafe fn bl1_zmaxabsv(n: integer, x: *mut dcomplex, incx: integer, maxabs: *mut f64) {
                dyload_lib().bl1_zmaxabsv.unwrap()(n, x, incx, maxabs)
            }

pub unsafe fn bl1_smaxabsm(m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, maxabs: *mut f32) {
                dyload_lib().bl1_smaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_dmaxabsm(m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, maxabs: *mut f64) {
                dyload_lib().bl1_dmaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_cmaxabsm(m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, maxabs: *mut f32) {
                dyload_lib().bl1_cmaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_zmaxabsm(m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, maxabs: *mut f64) {
                dyload_lib().bl1_zmaxabsm.unwrap()(m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_smaxabsmr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, maxabs: *mut f32) {
                dyload_lib().bl1_smaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_dmaxabsmr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, maxabs: *mut f64) {
                dyload_lib().bl1_dmaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_cmaxabsmr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, maxabs: *mut f32) {
                dyload_lib().bl1_cmaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_zmaxabsmr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, maxabs: *mut f64) {
                dyload_lib().bl1_zmaxabsmr.unwrap()(uplo, m, n, a, a_rs, a_cs, maxabs)
            }

pub unsafe fn bl1_srands(alpha: *mut f32) {
                dyload_lib().bl1_srands.unwrap()(alpha)
            }

pub unsafe fn bl1_drands(alpha: *mut f64) {
                dyload_lib().bl1_drands.unwrap()(alpha)
            }

pub unsafe fn bl1_crands(alpha: *mut scomplex) {
                dyload_lib().bl1_crands.unwrap()(alpha)
            }

pub unsafe fn bl1_zrands(alpha: *mut dcomplex) {
                dyload_lib().bl1_zrands.unwrap()(alpha)
            }

pub unsafe fn bl1_srandv(n: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_srandv.unwrap()(n, x, incx)
            }

pub unsafe fn bl1_drandv(n: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_drandv.unwrap()(n, x, incx)
            }

pub unsafe fn bl1_crandv(n: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_crandv.unwrap()(n, x, incx)
            }

pub unsafe fn bl1_zrandv(n: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zrandv.unwrap()(n, x, incx)
            }

pub unsafe fn bl1_srandm(m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_srandm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_drandm(m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_drandm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_crandm(m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_crandm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zrandm(m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zrandm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_srandmr(uplo: uplo1_t, diag: diag1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_srandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_drandmr(uplo: uplo1_t, diag: diag1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_drandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_crandmr(uplo: uplo1_t, diag: diag1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_crandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zrandmr(uplo: uplo1_t, diag: diag1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zrandmr.unwrap()(uplo, diag, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_set_contig_strides(m: integer, n: integer, rs: *mut integer, cs: *mut integer) {
                dyload_lib().bl1_set_contig_strides.unwrap()(m, n, rs, cs)
            }

pub unsafe fn bl1_set_dim_with_side(side: side1_t, m: integer, n: integer, dim_new: *mut integer) {
                dyload_lib().bl1_set_dim_with_side.unwrap()(side, m, n, dim_new)
            }

pub unsafe fn bl1_set_dims_with_trans(trans: trans1_t, m: integer, n: integer, m_new: *mut integer, n_new: *mut integer) {
                dyload_lib().bl1_set_dims_with_trans.unwrap()(trans, m, n, m_new, n_new)
            }

pub unsafe fn bl1_isetv(m: integer, sigma: *mut integer, x: *mut integer, incx: integer) {
                dyload_lib().bl1_isetv.unwrap()(m, sigma, x, incx)
            }

pub unsafe fn bl1_ssetv(m: integer, sigma: *mut f32, x: *mut f32, incx: integer) {
                dyload_lib().bl1_ssetv.unwrap()(m, sigma, x, incx)
            }

pub unsafe fn bl1_dsetv(m: integer, sigma: *mut f64, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dsetv.unwrap()(m, sigma, x, incx)
            }

pub unsafe fn bl1_csetv(m: integer, sigma: *mut scomplex, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_csetv.unwrap()(m, sigma, x, incx)
            }

pub unsafe fn bl1_zsetv(m: integer, sigma: *mut dcomplex, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zsetv.unwrap()(m, sigma, x, incx)
            }

pub unsafe fn bl1_isetm(m: integer, n: integer, sigma: *mut integer, a: *mut integer, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_isetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ssetm(m: integer, n: integer, sigma: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_ssetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dsetm(m: integer, n: integer, sigma: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dsetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csetm(m: integer, n: integer, sigma: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zsetm(m: integer, n: integer, sigma: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zsetm.unwrap()(m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ssetmr(uplo: uplo1_t, m: integer, n: integer, sigma: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_ssetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dsetmr(uplo: uplo1_t, m: integer, n: integer, sigma: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dsetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csetmr(uplo: uplo1_t, m: integer, n: integer, sigma: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zsetmr(uplo: uplo1_t, m: integer, n: integer, sigma: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zsetmr.unwrap()(uplo, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_isetdiag(offset: integer, m: integer, n: integer, sigma: *mut integer, a: *mut integer, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_isetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ssetdiag(offset: integer, m: integer, n: integer, sigma: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_ssetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dsetdiag(offset: integer, m: integer, n: integer, sigma: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dsetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csetdiag(offset: integer, m: integer, n: integer, sigma: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zsetdiag(offset: integer, m: integer, n: integer, sigma: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zsetdiag.unwrap()(offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sscalediag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dscalediag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cscalediag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zscalediag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csscalediag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f32, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zdscalediag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f64, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zdscalediag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sshiftdiag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dshiftdiag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cshiftdiag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zshiftdiag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csshiftdiag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f32, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zdshiftdiag(conj: conj1_t, offset: integer, m: integer, n: integer, sigma: *mut f64, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zdshiftdiag.unwrap()(conj, offset, m, n, sigma, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ssymmize(conj: conj1_t, uplo: uplo1_t, m: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_ssymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dsymmize(conj: conj1_t, uplo: uplo1_t, m: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dsymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csymmize(conj: conj1_t, uplo: uplo1_t, m: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zsymmize(conj: conj1_t, uplo: uplo1_t, m: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zsymmize.unwrap()(conj, uplo, m, a, a_rs, a_cs)
            }

pub unsafe fn bl1_does_trans(trans: trans1_t) -> c_int {
                dyload_lib().bl1_does_trans.unwrap()(trans)
            }

pub unsafe fn bl1_does_notrans(trans: trans1_t) -> c_int {
                dyload_lib().bl1_does_notrans.unwrap()(trans)
            }

pub unsafe fn bl1_does_conj(trans: trans1_t) -> c_int {
                dyload_lib().bl1_does_conj.unwrap()(trans)
            }

pub unsafe fn bl1_is_notrans(trans: trans1_t) -> c_int {
                dyload_lib().bl1_is_notrans.unwrap()(trans)
            }

pub unsafe fn bl1_is_trans(trans: trans1_t) -> c_int {
                dyload_lib().bl1_is_trans.unwrap()(trans)
            }

pub unsafe fn bl1_is_conjnotrans(trans: trans1_t) -> c_int {
                dyload_lib().bl1_is_conjnotrans.unwrap()(trans)
            }

pub unsafe fn bl1_is_conjtrans(trans: trans1_t) -> c_int {
                dyload_lib().bl1_is_conjtrans.unwrap()(trans)
            }

pub unsafe fn bl1_is_noconj(conj: conj1_t) -> c_int {
                dyload_lib().bl1_is_noconj.unwrap()(conj)
            }

pub unsafe fn bl1_is_conj(conj: conj1_t) -> c_int {
                dyload_lib().bl1_is_conj.unwrap()(conj)
            }

pub unsafe fn bl1_is_lower(uplo: uplo1_t) -> c_int {
                dyload_lib().bl1_is_lower.unwrap()(uplo)
            }

pub unsafe fn bl1_is_upper(uplo: uplo1_t) -> c_int {
                dyload_lib().bl1_is_upper.unwrap()(uplo)
            }

pub unsafe fn bl1_is_left(side: side1_t) -> c_int {
                dyload_lib().bl1_is_left.unwrap()(side)
            }

pub unsafe fn bl1_is_right(side: side1_t) -> c_int {
                dyload_lib().bl1_is_right.unwrap()(side)
            }

pub unsafe fn bl1_is_nonunit_diag(diag: diag1_t) -> c_int {
                dyload_lib().bl1_is_nonunit_diag.unwrap()(diag)
            }

pub unsafe fn bl1_is_unit_diag(diag: diag1_t) -> c_int {
                dyload_lib().bl1_is_unit_diag.unwrap()(diag)
            }

pub unsafe fn bl1_is_zero_diag(diag: diag1_t) -> c_int {
                dyload_lib().bl1_is_zero_diag.unwrap()(diag)
            }

pub unsafe fn bl1_proj_trans1_to_conj(trans: trans1_t) -> conj1_t {
                dyload_lib().bl1_proj_trans1_to_conj.unwrap()(trans)
            }

pub unsafe fn bl1_check_storage_3m(a_rs: integer, a_cs: integer, b_rs: integer, b_cs: integer, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_check_storage_3m.unwrap()(a_rs, a_cs, b_rs, b_cs, c_rs, c_cs)
            }

pub unsafe fn bl1_check_storage_2m(a_rs: integer, a_cs: integer, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_check_storage_2m.unwrap()(a_rs, a_cs, b_rs, b_cs)
            }

pub unsafe fn bl1_is_row_or_col_storage(rs: integer, cs: integer) -> c_int {
                dyload_lib().bl1_is_row_or_col_storage.unwrap()(rs, cs)
            }

pub unsafe fn bl1_is_row_storage(rs: integer, cs: integer) -> c_int {
                dyload_lib().bl1_is_row_storage.unwrap()(rs, cs)
            }

pub unsafe fn bl1_is_col_storage(rs: integer, cs: integer) -> c_int {
                dyload_lib().bl1_is_col_storage.unwrap()(rs, cs)
            }

pub unsafe fn bl1_is_gen_storage(rs: integer, cs: integer) -> c_int {
                dyload_lib().bl1_is_gen_storage.unwrap()(rs, cs)
            }

pub unsafe fn bl1_is_vector(m: integer, n: integer) -> c_int {
                dyload_lib().bl1_is_vector.unwrap()(m, n)
            }

pub unsafe fn bl1_vector_dim(m: integer, n: integer) -> c_int {
                dyload_lib().bl1_vector_dim.unwrap()(m, n)
            }

pub unsafe fn bl1_vector_inc(trans: trans1_t, m: integer, n: integer, rs: integer, cs: integer) -> c_int {
                dyload_lib().bl1_vector_inc.unwrap()(trans, m, n, rs, cs)
            }

pub unsafe fn bl1_zero_dim1(m: integer) -> c_int {
                dyload_lib().bl1_zero_dim1.unwrap()(m)
            }

pub unsafe fn bl1_zero_dim2(m: integer, n: integer) -> c_int {
                dyload_lib().bl1_zero_dim2.unwrap()(m, n)
            }

pub unsafe fn bl1_zero_dim3(m: integer, k: integer, n: integer) -> c_int {
                dyload_lib().bl1_zero_dim3.unwrap()(m, k, n)
            }

pub unsafe fn bl1_abort() {
                dyload_lib().bl1_abort.unwrap()()
            }

pub unsafe fn bl1_abort_msg(message: *mut c_char) {
                dyload_lib().bl1_abort_msg.unwrap()(message)
            }

pub unsafe fn bl1_param_map_to_netlib_trans(blis_trans: trans1_t, blas_trans: *mut c_void) {
                dyload_lib().bl1_param_map_to_netlib_trans.unwrap()(blis_trans, blas_trans)
            }

pub unsafe fn bl1_param_map_to_netlib_uplo(blis_uplo: uplo1_t, blas_uplo: *mut c_void) {
                dyload_lib().bl1_param_map_to_netlib_uplo.unwrap()(blis_uplo, blas_uplo)
            }

pub unsafe fn bl1_param_map_to_netlib_side(blis_side: side1_t, blas_side: *mut c_void) {
                dyload_lib().bl1_param_map_to_netlib_side.unwrap()(blis_side, blas_side)
            }

pub unsafe fn bl1_param_map_to_netlib_diag(blis_diag: diag1_t, blas_diag: *mut c_void) {
                dyload_lib().bl1_param_map_to_netlib_diag.unwrap()(blis_diag, blas_diag)
            }

pub unsafe fn bl1_samax(n: integer, x: *mut f32, incx: integer, index: *mut integer) {
                dyload_lib().bl1_samax.unwrap()(n, x, incx, index)
            }

pub unsafe fn bl1_damax(n: integer, x: *mut f64, incx: integer, index: *mut integer) {
                dyload_lib().bl1_damax.unwrap()(n, x, incx, index)
            }

pub unsafe fn bl1_camax(n: integer, x: *mut scomplex, incx: integer, index: *mut integer) {
                dyload_lib().bl1_camax.unwrap()(n, x, incx, index)
            }

pub unsafe fn bl1_zamax(n: integer, x: *mut dcomplex, incx: integer, index: *mut integer) {
                dyload_lib().bl1_zamax.unwrap()(n, x, incx, index)
            }

pub unsafe fn bl1_sasum(n: integer, x: *mut f32, incx: integer, norm: *mut f32) {
                dyload_lib().bl1_sasum.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_dasum(n: integer, x: *mut f64, incx: integer, norm: *mut f64) {
                dyload_lib().bl1_dasum.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_casum(n: integer, x: *mut scomplex, incx: integer, norm: *mut f32) {
                dyload_lib().bl1_casum.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_zasum(n: integer, x: *mut dcomplex, incx: integer, norm: *mut f64) {
                dyload_lib().bl1_zasum.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_saxpy(n: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_saxpy.unwrap()(n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_daxpy(n: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_daxpy.unwrap()(n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_caxpy(n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_caxpy.unwrap()(n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_zaxpy(n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zaxpy.unwrap()(n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_saxpyv(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_saxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_daxpyv(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_daxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_caxpyv(conj: conj1_t, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_caxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_zaxpyv(conj: conj1_t, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zaxpyv.unwrap()(conj, n, alpha, x, incx, y, incy)
            }

pub unsafe fn bl1_saxpymt(trans: trans1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_saxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_daxpymt(trans: trans1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_daxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_caxpymt(trans: trans1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_caxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zaxpymt(trans: trans1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zaxpymt.unwrap()(trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_saxpymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_saxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_daxpymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_daxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_caxpymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_caxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zaxpymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zaxpymrt.unwrap()(uplo, trans, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_saxpysv(n: integer, alpha0: *mut f32, alpha1: *mut f32, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_saxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_daxpysv(n: integer, alpha0: *mut f64, alpha1: *mut f64, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_daxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_caxpysv(n: integer, alpha0: *mut scomplex, alpha1: *mut scomplex, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_caxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zaxpysv(n: integer, alpha0: *mut dcomplex, alpha1: *mut dcomplex, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zaxpysv.unwrap()(n, alpha0, alpha1, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_saxpysmt(trans: trans1_t, m: integer, n: integer, alpha0: *mut f32, alpha1: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, beta: *mut f32, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_saxpysmt.unwrap()(trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs)
            }

pub unsafe fn bl1_daxpysmt(trans: trans1_t, m: integer, n: integer, alpha0: *mut f64, alpha1: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, beta: *mut f64, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_daxpysmt.unwrap()(trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs)
            }

pub unsafe fn bl1_caxpysmt(trans: trans1_t, m: integer, n: integer, alpha0: *mut scomplex, alpha1: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, beta: *mut scomplex, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_caxpysmt.unwrap()(trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zaxpysmt(trans: trans1_t, m: integer, n: integer, alpha0: *mut dcomplex, alpha1: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, beta: *mut dcomplex, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zaxpysmt.unwrap()(trans, m, n, alpha0, alpha1, a, a_rs, a_cs, beta, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sconjv(m: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_sconjv.unwrap()(m, x, incx)
            }

pub unsafe fn bl1_dconjv(m: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dconjv.unwrap()(m, x, incx)
            }

pub unsafe fn bl1_cconjv(m: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_cconjv.unwrap()(m, x, incx)
            }

pub unsafe fn bl1_zconjv(m: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zconjv.unwrap()(m, x, incx)
            }

pub unsafe fn bl1_sconjm(m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sconjm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dconjm(m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dconjm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cconjm(m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cconjm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zconjm(m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zconjm.unwrap()(m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sconjmr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dconjmr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cconjmr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zconjmr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zconjmr.unwrap()(uplo, m, n, a, a_rs, a_cs)
            }

pub unsafe fn bl1_scopy(m: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_scopy.unwrap()(m, x, incx, y, incy)
            }

pub unsafe fn bl1_dcopy(m: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dcopy.unwrap()(m, x, incx, y, incy)
            }

pub unsafe fn bl1_ccopy(m: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_ccopy.unwrap()(m, x, incx, y, incy)
            }

pub unsafe fn bl1_zcopy(m: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zcopy.unwrap()(m, x, incx, y, incy)
            }

pub unsafe fn bl1_icopyv(conj: conj1_t, m: integer, x: *mut integer, incx: integer, y: *mut integer, incy: integer) {
                dyload_lib().bl1_icopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_scopyv(conj: conj1_t, m: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_scopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_dcopyv(conj: conj1_t, m: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_ccopyv(conj: conj1_t, m: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_ccopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_zcopyv(conj: conj1_t, m: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_sdcopyv(conj: conj1_t, m: integer, x: *mut f32, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_sdcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_dscopyv(conj: conj1_t, m: integer, x: *mut f64, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_dscopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_sccopyv(conj: conj1_t, m: integer, x: *mut f32, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_sccopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_cscopyv(conj: conj1_t, m: integer, x: *mut scomplex, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_cscopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_szcopyv(conj: conj1_t, m: integer, x: *mut f32, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_szcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_zscopyv(conj: conj1_t, m: integer, x: *mut dcomplex, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_zscopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_dccopyv(conj: conj1_t, m: integer, x: *mut f64, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_dccopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_cdcopyv(conj: conj1_t, m: integer, x: *mut scomplex, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_cdcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_dzcopyv(conj: conj1_t, m: integer, x: *mut f64, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_dzcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_zdcopyv(conj: conj1_t, m: integer, x: *mut dcomplex, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_zdcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_czcopyv(conj: conj1_t, m: integer, x: *mut scomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_czcopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_zccopyv(conj: conj1_t, m: integer, x: *mut dcomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_zccopyv.unwrap()(conj, m, x, incx, y, incy)
            }

pub unsafe fn bl1_scopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_scopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ccopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sscopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sdcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sdcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dscopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sccopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cscopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_szcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_szcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zscopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zscopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ddcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ddcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dccopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cdcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cdcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dzcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dzcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zdcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zdcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cccopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_czcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_czcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zccopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zccopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zzcopymr(uplo: uplo1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zzcopymr.unwrap()(uplo, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_scopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_scopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ccopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sscopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sdcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sdcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sccopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_szcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_szcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dscopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ddcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ddcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dccopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dzcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dzcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cscopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cdcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cdcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cccopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_czcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_czcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zscopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zscopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zdcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zdcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zccopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zccopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zzcopymrt(uplo: uplo1_t, trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zzcopymrt.unwrap()(uplo, trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_icopymt(trans: trans1_t, m: integer, n: integer, a: *mut integer, a_rs: integer, a_cs: integer, b: *mut integer, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_icopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_scopymt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_scopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dcopymt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ccopymt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zcopymt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sscopymt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sdcopymt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sdcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dscopymt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sccopymt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cscopymt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_szcopymt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_szcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zscopymt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zscopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ddcopymt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ddcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dccopymt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cdcopymt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cdcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dzcopymt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dzcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zdcopymt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zdcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cccopymt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_czcopymt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_czcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zccopymt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zccopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zzcopymt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zzcopymt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cdot_in(conj: conj1_t, n: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, rho: *mut scomplex) {
                dyload_lib().bl1_cdot_in.unwrap()(conj, n, x, incx, y, incy, rho)
            }

pub unsafe fn bl1_zdot_in(conj: conj1_t, n: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, rho: *mut dcomplex) {
                dyload_lib().bl1_zdot_in.unwrap()(conj, n, x, incx, y, incy, rho)
            }

pub unsafe fn bl1_sdot(conj: conj1_t, n: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer, rho: *mut f32) {
                dyload_lib().bl1_sdot.unwrap()(conj, n, x, incx, y, incy, rho)
            }

pub unsafe fn bl1_ddot(conj: conj1_t, n: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer, rho: *mut f64) {
                dyload_lib().bl1_ddot.unwrap()(conj, n, x, incx, y, incy, rho)
            }

pub unsafe fn bl1_cdot(conj: conj1_t, n: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, rho: *mut scomplex) {
                dyload_lib().bl1_cdot.unwrap()(conj, n, x, incx, y, incy, rho)
            }

pub unsafe fn bl1_zdot(conj: conj1_t, n: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, rho: *mut dcomplex) {
                dyload_lib().bl1_zdot.unwrap()(conj, n, x, incx, y, incy, rho)
            }

pub unsafe fn bl1_sdots(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, beta: *mut f32, rho: *mut f32) {
                dyload_lib().bl1_sdots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_ddots(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, beta: *mut f64, rho: *mut f64) {
                dyload_lib().bl1_ddots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_cdots(conj: conj1_t, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, beta: *mut scomplex, rho: *mut scomplex) {
                dyload_lib().bl1_cdots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_zdots(conj: conj1_t, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, beta: *mut dcomplex, rho: *mut dcomplex) {
                dyload_lib().bl1_zdots.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_sdot2s(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, beta: *mut f32, rho: *mut f32) {
                dyload_lib().bl1_sdot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_ddot2s(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, beta: *mut f64, rho: *mut f64) {
                dyload_lib().bl1_ddot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_cdot2s(conj: conj1_t, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, beta: *mut scomplex, rho: *mut scomplex) {
                dyload_lib().bl1_cdot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_zdot2s(conj: conj1_t, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, beta: *mut dcomplex, rho: *mut dcomplex) {
                dyload_lib().bl1_zdot2s.unwrap()(conj, n, alpha, x, incx, y, incy, beta, rho)
            }

pub unsafe fn bl1_sfnorm(m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, norm: *mut f32) {
                dyload_lib().bl1_sfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
            }

pub unsafe fn bl1_dfnorm(m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, norm: *mut f64) {
                dyload_lib().bl1_dfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
            }

pub unsafe fn bl1_cfnorm(m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, norm: *mut f32) {
                dyload_lib().bl1_cfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
            }

pub unsafe fn bl1_zfnorm(m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, norm: *mut f64) {
                dyload_lib().bl1_zfnorm.unwrap()(m, n, a, a_rs, a_cs, norm)
            }

pub unsafe fn bl1_sinvscalv(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut f32, incx: integer) {
                dyload_lib().bl1_sinvscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_dinvscalv(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dinvscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_csinvscalv(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_csinvscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_cinvscalv(conj: conj1_t, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_cinvscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_zdinvscalv(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zdinvscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_zinvscalv(conj: conj1_t, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zinvscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_sinvscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dinvscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csinvscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f32, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cinvscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zdinvscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f64, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zdinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zinvscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zinvscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_snrm2(n: integer, x: *mut f32, incx: integer, norm: *mut f32) {
                dyload_lib().bl1_snrm2.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_dnrm2(n: integer, x: *mut f64, incx: integer, norm: *mut f64) {
                dyload_lib().bl1_dnrm2.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_cnrm2(n: integer, x: *mut scomplex, incx: integer, norm: *mut f32) {
                dyload_lib().bl1_cnrm2.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_znrm2(n: integer, x: *mut dcomplex, incx: integer, norm: *mut f64) {
                dyload_lib().bl1_znrm2.unwrap()(n, x, incx, norm)
            }

pub unsafe fn bl1_sscal(n: integer, alpha: *mut f32, x: *mut f32, incx: integer) {
                dyload_lib().bl1_sscal.unwrap()(n, alpha, x, incx)
            }

pub unsafe fn bl1_dscal(n: integer, alpha: *mut f64, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dscal.unwrap()(n, alpha, x, incx)
            }

pub unsafe fn bl1_csscal(n: integer, alpha: *mut f32, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_csscal.unwrap()(n, alpha, x, incx)
            }

pub unsafe fn bl1_cscal(n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_cscal.unwrap()(n, alpha, x, incx)
            }

pub unsafe fn bl1_zdscal(n: integer, alpha: *mut f64, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zdscal.unwrap()(n, alpha, x, incx)
            }

pub unsafe fn bl1_zscal(n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zscal.unwrap()(n, alpha, x, incx)
            }

pub unsafe fn bl1_sscalv(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut f32, incx: integer) {
                dyload_lib().bl1_sscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_dscalv(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_csscalv(conj: conj1_t, n: integer, alpha: *mut f32, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_csscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_cscalv(conj: conj1_t, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_cscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_zdscalv(conj: conj1_t, n: integer, alpha: *mut f64, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zdscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_zscalv(conj: conj1_t, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_zscalv.unwrap()(conj, n, alpha, x, incx)
            }

pub unsafe fn bl1_sscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f32, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zdscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut f64, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zdscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zscalm(conj: conj1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zscalm.unwrap()(conj, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sscalmr(uplo: uplo1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dscalmr(uplo: uplo1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csscalmr(uplo: uplo1_t, m: integer, n: integer, alpha: *mut f32, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cscalmr(uplo: uplo1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zdscalmr(uplo: uplo1_t, m: integer, n: integer, alpha: *mut f64, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zdscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zscalmr(uplo: uplo1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zscalmr.unwrap()(uplo, m, n, alpha, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sswap(n: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_sswap.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_dswap(n: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dswap.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_cswap(n: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_cswap.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_zswap(n: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zswap.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_sswapv(n: integer, x: *mut f32, incx: integer, y: *mut f32, incy: integer) {
                dyload_lib().bl1_sswapv.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_dswapv(n: integer, x: *mut f64, incx: integer, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dswapv.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_cswapv(n: integer, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_cswapv.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_zswapv(n: integer, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zswapv.unwrap()(n, x, incx, y, incy)
            }

pub unsafe fn bl1_sswapmt(trans: trans1_t, m: integer, n: integer, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_sswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dswapmt(trans: trans1_t, m: integer, n: integer, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_cswapmt(trans: trans1_t, m: integer, n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_cswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_zswapmt(trans: trans1_t, m: integer, n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_zswapmt.unwrap()(trans, m, n, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_sgemv(transa: trans1_t, conjx: conj1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_sgemv.unwrap()(transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dgemv(transa: trans1_t, conjx: conj1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dgemv.unwrap()(transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_cgemv(transa: trans1_t, conjx: conj1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_cgemv.unwrap()(transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zgemv(transa: trans1_t, conjx: conj1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zgemv.unwrap()(transa, conjx, m, n, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_sgemv_blas(transa: trans1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, lda: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_sgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dgemv_blas(transa: trans1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, lda: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_cgemv_blas(transa: trans1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_cgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zgemv_blas(transa: trans1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zgemv_blas.unwrap()(transa, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_sger(conjx: conj1_t, conjy: conj1_t, m: integer, n: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dger(conjx: conj1_t, conjy: conj1_t, m: integer, n: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cger(conjx: conj1_t, conjy: conj1_t, m: integer, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zger(conjx: conj1_t, conjy: conj1_t, m: integer, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zger.unwrap()(conjx, conjy, m, n, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_sger_blas(m: integer, n: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, a: *mut f32, lda: integer) {
                dyload_lib().bl1_sger_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_dger_blas(m: integer, n: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, a: *mut f64, lda: integer) {
                dyload_lib().bl1_dger_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_cgerc_blas(m: integer, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, lda: integer) {
                dyload_lib().bl1_cgerc_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_cgeru_blas(m: integer, n: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, lda: integer) {
                dyload_lib().bl1_cgeru_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_zgerc_blas(m: integer, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, lda: integer) {
                dyload_lib().bl1_zgerc_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_zgeru_blas(m: integer, n: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, lda: integer) {
                dyload_lib().bl1_zgeru_blas.unwrap()(m, n, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_shemv(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_shemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dhemv(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dhemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_chemv(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_chemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zhemv(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zhemv.unwrap()(uplo, conj, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_chemv_blas(uplo: uplo1_t, m: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_chemv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zhemv_blas(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zhemv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_sher(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f32, x: *mut f32, incx: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dher(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f64, x: *mut f64, incx: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cher(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f32, x: *mut scomplex, incx: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zher(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f64, x: *mut dcomplex, incx: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zher.unwrap()(uplo, conj, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cher_blas(uplo: uplo1_t, m: integer, alpha: *mut f32, x: *mut scomplex, incx: integer, a: *mut scomplex, lda: integer) {
                dyload_lib().bl1_cher_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
            }

pub unsafe fn bl1_zher_blas(uplo: uplo1_t, m: integer, alpha: *mut f64, x: *mut dcomplex, incx: integer, a: *mut dcomplex, lda: integer) {
                dyload_lib().bl1_zher_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
            }

pub unsafe fn bl1_sher2(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_sher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dher2(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cher2(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_cher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zher2(uplo: uplo1_t, conj: conj1_t, m: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zher2.unwrap()(uplo, conj, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_cher2_blas(uplo: uplo1_t, m: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, lda: integer) {
                dyload_lib().bl1_cher2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_zher2_blas(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, lda: integer) {
                dyload_lib().bl1_zher2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_ssymv(uplo: uplo1_t, m: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_ssymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dsymv(uplo: uplo1_t, m: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dsymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_csymv(uplo: uplo1_t, m: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_csymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zsymv(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zsymv.unwrap()(uplo, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_ssymv_blas(uplo: uplo1_t, m: integer, alpha: *mut f32, a: *mut f32, lda: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_ssymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dsymv_blas(uplo: uplo1_t, m: integer, alpha: *mut f64, a: *mut f64, lda: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dsymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_csymv_blas(uplo: uplo1_t, m: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_csymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_zsymv_blas(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_zsymv_blas.unwrap()(uplo, m, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_ssyr(uplo: uplo1_t, m: integer, alpha: *mut f32, x: *mut f32, incx: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_ssyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dsyr(uplo: uplo1_t, m: integer, alpha: *mut f64, x: *mut f64, incx: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dsyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csyr(uplo: uplo1_t, m: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zsyr(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zsyr.unwrap()(uplo, m, alpha, x, incx, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ssyr_blas(uplo: uplo1_t, m: integer, alpha: *mut f32, x: *mut f32, incx: integer, a: *mut f32, lda: integer) {
                dyload_lib().bl1_ssyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
            }

pub unsafe fn bl1_dsyr_blas(uplo: uplo1_t, m: integer, alpha: *mut f64, x: *mut f64, incx: integer, a: *mut f64, lda: integer) {
                dyload_lib().bl1_dsyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
            }

pub unsafe fn bl1_csyr_blas(uplo: uplo1_t, m: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, a: *mut scomplex, lda: integer) {
                dyload_lib().bl1_csyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
            }

pub unsafe fn bl1_zsyr_blas(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, a: *mut dcomplex, lda: integer) {
                dyload_lib().bl1_zsyr_blas.unwrap()(uplo, m, alpha, x, incx, a, lda)
            }

pub unsafe fn bl1_ssyr2(uplo: uplo1_t, m: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, a: *mut f32, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_ssyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_dsyr2(uplo: uplo1_t, m: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, a: *mut f64, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_dsyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_csyr2(uplo: uplo1_t, m: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_csyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_zsyr2(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer) {
                dyload_lib().bl1_zsyr2.unwrap()(uplo, m, alpha, x, incx, y, incy, a, a_rs, a_cs)
            }

pub unsafe fn bl1_ssyr2_blas(uplo: uplo1_t, m: integer, alpha: *mut f32, x: *mut f32, incx: integer, y: *mut f32, incy: integer, a: *mut f32, lda: integer) {
                dyload_lib().bl1_ssyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_dsyr2_blas(uplo: uplo1_t, m: integer, alpha: *mut f64, x: *mut f64, incx: integer, y: *mut f64, incy: integer, a: *mut f64, lda: integer) {
                dyload_lib().bl1_dsyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_csyr2_blas(uplo: uplo1_t, m: integer, alpha: *mut scomplex, x: *mut scomplex, incx: integer, y: *mut scomplex, incy: integer, a: *mut scomplex, lda: integer) {
                dyload_lib().bl1_csyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_zsyr2_blas(uplo: uplo1_t, m: integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: integer, y: *mut dcomplex, incy: integer, a: *mut dcomplex, lda: integer) {
                dyload_lib().bl1_zsyr2_blas.unwrap()(uplo, m, alpha, x, incx, y, incy, a, lda)
            }

pub unsafe fn bl1_strmv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_strmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_dtrmv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dtrmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_ctrmv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_ctrmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_ztrmv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_ztrmv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_strmv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f32, lda: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_strmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_dtrmv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f64, lda: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dtrmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_ctrmv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut scomplex, lda: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_ctrmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_ztrmv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut dcomplex, lda: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_ztrmv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_strsv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_strsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_dtrsv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dtrsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_ctrsv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_ctrsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_ztrsv(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_ztrsv.unwrap()(uplo, trans, diag, m, a, a_rs, a_cs, x, incx)
            }

pub unsafe fn bl1_strsv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f32, lda: integer, x: *mut f32, incx: integer) {
                dyload_lib().bl1_strsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_dtrsv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut f64, lda: integer, x: *mut f64, incx: integer) {
                dyload_lib().bl1_dtrsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_ctrsv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut scomplex, lda: integer, x: *mut scomplex, incx: integer) {
                dyload_lib().bl1_ctrsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_ztrsv_blas(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, a: *mut dcomplex, lda: integer, x: *mut dcomplex, incx: integer) {
                dyload_lib().bl1_ztrsv_blas.unwrap()(uplo, trans, diag, m, a, lda, x, incx)
            }

pub unsafe fn bl1_strmvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_strmvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dtrmvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dtrmvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_ctrmvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_ctrmvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_ztrmvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_ztrmvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_strsvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, x: *mut f32, incx: integer, beta: *mut f32, y: *mut f32, incy: integer) {
                dyload_lib().bl1_strsvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_dtrsvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, x: *mut f64, incx: integer, beta: *mut f64, y: *mut f64, incy: integer) {
                dyload_lib().bl1_dtrsvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_ctrsvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, x: *mut scomplex, incx: integer, beta: *mut scomplex, y: *mut scomplex, incy: integer) {
                dyload_lib().bl1_ctrsvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_ztrsvsx(uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, x: *mut dcomplex, incx: integer, beta: *mut dcomplex, y: *mut dcomplex, incy: integer) {
                dyload_lib().bl1_ztrsvsx.unwrap()(uplo, trans, diag, m, alpha, a, a_rs, a_cs, x, incx, beta, y, incy)
            }

pub unsafe fn bl1_sgemm(transa: trans1_t, transb: trans1_t, m: integer, k: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_sgemm.unwrap()(transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dgemm(transa: trans1_t, transb: trans1_t, m: integer, k: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dgemm.unwrap()(transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_cgemm(transa: trans1_t, transb: trans1_t, m: integer, k: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_cgemm.unwrap()(transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zgemm(transa: trans1_t, transb: trans1_t, m: integer, k: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zgemm.unwrap()(transa, transb, m, k, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_sgemm_blas(transa: trans1_t, transb: trans1_t, m: integer, n: integer, k: integer, alpha: *mut f32, a: *mut f32, lda: integer, b: *mut f32, ldb: integer, beta: *mut f32, c: *mut f32, ldc: integer) {
                dyload_lib().bl1_sgemm_blas.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_dgemm_blas(transa: trans1_t, transb: trans1_t, m: integer, n: integer, k: integer, alpha: *mut f64, a: *mut f64, lda: integer, b: *mut f64, ldb: integer, beta: *mut f64, c: *mut f64, ldc: integer) {
                dyload_lib().bl1_dgemm_blas.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_cgemm_blas(transa: trans1_t, transb: trans1_t, m: integer, n: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer, beta: *mut scomplex, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_cgemm_blas.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_zgemm_blas(transa: trans1_t, transb: trans1_t, m: integer, n: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer, beta: *mut dcomplex, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zgemm_blas.unwrap()(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_shemm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_shemm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dhemm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dhemm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_chemm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_chemm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zhemm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zhemm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_chemm_blas(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer, beta: *mut scomplex, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_chemm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_zhemm_blas(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer, beta: *mut dcomplex, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zhemm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_sherk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_sherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dherk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_cherk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut scomplex, a_rs: integer, a_cs: integer, beta: *mut f32, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_cherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zherk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut dcomplex, a_rs: integer, a_cs: integer, beta: *mut f64, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zherk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_cherk_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut scomplex, lda: integer, beta: *mut f32, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_cherk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
            }

pub unsafe fn bl1_zherk_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut dcomplex, lda: integer, beta: *mut f64, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zherk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
            }

pub unsafe fn bl1_sher2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_sher2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dher2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dher2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_cher2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_cher2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zher2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zher2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_cher2k_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer, beta: *mut f32, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_cher2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_zher2k_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer, beta: *mut f64, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zher2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_ssymm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ssymm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dsymm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dsymm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_csymm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_csymm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zsymm(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zsymm.unwrap()(side, uplo, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ssymm_blas(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, lda: integer, b: *mut f32, ldb: integer, beta: *mut f32, c: *mut f32, ldc: integer) {
                dyload_lib().bl1_ssymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_dsymm_blas(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, lda: integer, b: *mut f64, ldb: integer, beta: *mut f64, c: *mut f64, ldc: integer) {
                dyload_lib().bl1_dsymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_csymm_blas(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer, beta: *mut scomplex, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_csymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_zsymm_blas(side: side1_t, uplo: uplo1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer, beta: *mut dcomplex, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zsymm_blas.unwrap()(side, uplo, m, n, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_ssyrk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ssyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dsyrk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dsyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_csyrk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_csyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zsyrk(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zsyrk.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ssyrk_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut f32, lda: integer, beta: *mut f32, c: *mut f32, ldc: integer) {
                dyload_lib().bl1_ssyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
            }

pub unsafe fn bl1_dsyrk_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut f64, lda: integer, beta: *mut f64, c: *mut f64, ldc: integer) {
                dyload_lib().bl1_dsyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
            }

pub unsafe fn bl1_csyrk_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, beta: *mut scomplex, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_csyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
            }

pub unsafe fn bl1_zsyrk_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, beta: *mut dcomplex, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zsyrk_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, beta, c, ldc)
            }

pub unsafe fn bl1_ssyr2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ssyr2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dsyr2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dsyr2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_csyr2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_csyr2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_zsyr2k(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_zsyr2k.unwrap()(uplo, trans, m, k, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ssyr2k_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f32, a: *mut f32, lda: integer, b: *mut f32, ldb: integer, beta: *mut f32, c: *mut f32, ldc: integer) {
                dyload_lib().bl1_ssyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_dsyr2k_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut f64, a: *mut f64, lda: integer, b: *mut f64, ldb: integer, beta: *mut f64, c: *mut f64, ldc: integer) {
                dyload_lib().bl1_dsyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_csyr2k_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer, beta: *mut scomplex, c: *mut scomplex, ldc: integer) {
                dyload_lib().bl1_csyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_zsyr2k_blas(uplo: uplo1_t, trans: trans1_t, m: integer, k: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer, beta: *mut dcomplex, c: *mut dcomplex, ldc: integer) {
                dyload_lib().bl1_zsyr2k_blas.unwrap()(uplo, trans, m, k, alpha, a, lda, b, ldb, beta, c, ldc)
            }

pub unsafe fn bl1_strmm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_strmm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dtrmm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dtrmm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ctrmm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ctrmm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ztrmm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ztrmm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_strmm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, lda: integer, b: *mut f32, ldb: integer) {
                dyload_lib().bl1_strmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_dtrmm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, lda: integer, b: *mut f64, ldb: integer) {
                dyload_lib().bl1_dtrmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_ctrmm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer) {
                dyload_lib().bl1_ctrmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_ztrmm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer) {
                dyload_lib().bl1_ztrmm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_strsm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_strsm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_dtrsm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_dtrsm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ctrsm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ctrsm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_ztrsm(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer) {
                dyload_lib().bl1_ztrsm.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs)
            }

pub unsafe fn bl1_strsm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, lda: integer, b: *mut f32, ldb: integer) {
                dyload_lib().bl1_strsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_dtrsm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, lda: integer, b: *mut f64, ldb: integer) {
                dyload_lib().bl1_dtrsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_ctrsm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, lda: integer, b: *mut scomplex, ldb: integer) {
                dyload_lib().bl1_ctrsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_ztrsm_blas(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: integer, b: *mut dcomplex, ldb: integer) {
                dyload_lib().bl1_ztrsm_blas.unwrap()(side, uplo, trans, diag, m, n, alpha, a, lda, b, ldb)
            }

pub unsafe fn bl1_strmmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_strmmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dtrmmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dtrmmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ctrmmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ctrmmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ztrmmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ztrmmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_strsmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f32, a: *mut f32, a_rs: integer, a_cs: integer, b: *mut f32, b_rs: integer, b_cs: integer, beta: *mut f32, c: *mut f32, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_strsmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_dtrsmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut f64, a: *mut f64, a_rs: integer, a_cs: integer, b: *mut f64, b_rs: integer, b_cs: integer, beta: *mut f64, c: *mut f64, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_dtrsmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ctrsmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut scomplex, a: *mut scomplex, a_rs: integer, a_cs: integer, b: *mut scomplex, b_rs: integer, b_cs: integer, beta: *mut scomplex, c: *mut scomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ctrsmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_ztrsmsx(side: side1_t, uplo: uplo1_t, trans: trans1_t, diag: diag1_t, m: integer, n: integer, alpha: *mut dcomplex, a: *mut dcomplex, a_rs: integer, a_cs: integer, b: *mut dcomplex, b_rs: integer, b_cs: integer, beta: *mut dcomplex, c: *mut dcomplex, c_rs: integer, c_cs: integer) {
                dyload_lib().bl1_ztrsmsx.unwrap()(side, uplo, trans, diag, m, n, alpha, a, a_rs, a_cs, b, b_rs, b_cs, beta, c, c_rs, c_cs)
            }

pub unsafe fn bl1_saxmyv2(conjx: conj1_t, n: integer, alpha: *mut f32, beta: *mut f32, x: *mut f32, inc_x: integer, y: *mut f32, inc_y: integer, z: *mut f32, inc_z: integer) {
                dyload_lib().bl1_saxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_daxmyv2(conjx: conj1_t, n: integer, alpha: *mut f64, beta: *mut f64, x: *mut f64, inc_x: integer, y: *mut f64, inc_y: integer, z: *mut f64, inc_z: integer) {
                dyload_lib().bl1_daxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_caxmyv2(conjx: conj1_t, n: integer, alpha: *mut scomplex, beta: *mut scomplex, x: *mut scomplex, inc_x: integer, y: *mut scomplex, inc_y: integer, z: *mut scomplex, inc_z: integer) {
                dyload_lib().bl1_caxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_zaxmyv2(conjx: conj1_t, n: integer, alpha: *mut dcomplex, beta: *mut dcomplex, x: *mut dcomplex, inc_x: integer, y: *mut dcomplex, inc_y: integer, z: *mut dcomplex, inc_z: integer) {
                dyload_lib().bl1_zaxmyv2.unwrap()(conjx, n, alpha, beta, x, inc_x, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_saxpyv2b(n: integer, beta1: *mut f32, beta2: *mut f32, a1: *mut f32, inc_a1: integer, a2: *mut f32, inc_a2: integer, w: *mut f32, inc_w: integer) {
                dyload_lib().bl1_saxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
            }

pub unsafe fn bl1_daxpyv2b(n: integer, beta1: *mut f64, beta2: *mut f64, a1: *mut f64, inc_a1: integer, a2: *mut f64, inc_a2: integer, w: *mut f64, inc_w: integer) {
                dyload_lib().bl1_daxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
            }

pub unsafe fn bl1_caxpyv2b(n: integer, beta1: *mut scomplex, beta2: *mut scomplex, a1: *mut scomplex, inc_a1: integer, a2: *mut scomplex, inc_a2: integer, w: *mut scomplex, inc_w: integer) {
                dyload_lib().bl1_caxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
            }

pub unsafe fn bl1_zaxpyv2b(n: integer, beta1: *mut dcomplex, beta2: *mut dcomplex, a1: *mut dcomplex, inc_a1: integer, a2: *mut dcomplex, inc_a2: integer, w: *mut dcomplex, inc_w: integer) {
                dyload_lib().bl1_zaxpyv2b.unwrap()(n, beta1, beta2, a1, inc_a1, a2, inc_a2, w, inc_w)
            }

pub unsafe fn bl1_saxpyv3b(n: integer, beta1: *mut f32, beta2: *mut f32, beta3: *mut f32, a1: *mut f32, inc_a1: integer, a2: *mut f32, inc_a2: integer, a3: *mut f32, inc_a3: integer, w: *mut f32, inc_w: integer) {
                dyload_lib().bl1_saxpyv3b.unwrap()(n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w)
            }

pub unsafe fn bl1_daxpyv3b(n: integer, beta1: *mut f64, beta2: *mut f64, beta3: *mut f64, a1: *mut f64, inc_a1: integer, a2: *mut f64, inc_a2: integer, a3: *mut f64, inc_a3: integer, w: *mut f64, inc_w: integer) {
                dyload_lib().bl1_daxpyv3b.unwrap()(n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w)
            }

pub unsafe fn bl1_caxpyv3b(n: integer, beta1: *mut scomplex, beta2: *mut scomplex, beta3: *mut scomplex, a1: *mut scomplex, inc_a1: integer, a2: *mut scomplex, inc_a2: integer, a3: *mut scomplex, inc_a3: integer, w: *mut scomplex, inc_w: integer) {
                dyload_lib().bl1_caxpyv3b.unwrap()(n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w)
            }

pub unsafe fn bl1_zaxpyv3b(n: integer, beta1: *mut dcomplex, beta2: *mut dcomplex, beta3: *mut dcomplex, a1: *mut dcomplex, inc_a1: integer, a2: *mut dcomplex, inc_a2: integer, a3: *mut dcomplex, inc_a3: integer, w: *mut dcomplex, inc_w: integer) {
                dyload_lib().bl1_zaxpyv3b.unwrap()(n, beta1, beta2, beta3, a1, inc_a1, a2, inc_a2, a3, inc_a3, w, inc_w)
            }

pub unsafe fn bl1_saxpyv2bdotaxpy(n: integer, beta: *mut f32, u: *mut f32, inc_u: integer, gamma: *mut f32, z: *mut f32, inc_z: integer, a: *mut f32, inc_a: integer, x: *mut f32, inc_x: integer, kappa: *mut f32, rho: *mut f32, w: *mut f32, inc_w: integer) {
                dyload_lib().bl1_saxpyv2bdotaxpy.unwrap()(n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_daxpyv2bdotaxpy(n: integer, beta: *mut f64, u: *mut f64, inc_u: integer, gamma: *mut f64, z: *mut f64, inc_z: integer, a: *mut f64, inc_a: integer, x: *mut f64, inc_x: integer, kappa: *mut f64, rho: *mut f64, w: *mut f64, inc_w: integer) {
                dyload_lib().bl1_daxpyv2bdotaxpy.unwrap()(n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_caxpyv2bdotaxpy(n: integer, beta: *mut scomplex, u: *mut scomplex, inc_u: integer, gamma: *mut scomplex, z: *mut scomplex, inc_z: integer, a: *mut scomplex, inc_a: integer, x: *mut scomplex, inc_x: integer, kappa: *mut scomplex, rho: *mut scomplex, w: *mut scomplex, inc_w: integer) {
                dyload_lib().bl1_caxpyv2bdotaxpy.unwrap()(n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_zaxpyv2bdotaxpy(n: integer, beta: *mut dcomplex, u: *mut dcomplex, inc_u: integer, gamma: *mut dcomplex, z: *mut dcomplex, inc_z: integer, a: *mut dcomplex, inc_a: integer, x: *mut dcomplex, inc_x: integer, kappa: *mut dcomplex, rho: *mut dcomplex, w: *mut dcomplex, inc_w: integer) {
                dyload_lib().bl1_zaxpyv2bdotaxpy.unwrap()(n, beta, u, inc_u, gamma, z, inc_z, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_sdotsv2(conjxy: conj1_t, n: integer, x: *mut f32, inc_x: integer, y: *mut f32, inc_y: integer, z: *mut f32, inc_z: integer, beta: *mut f32, rho_xz: *mut f32, rho_yz: *mut f32) {
                dyload_lib().bl1_sdotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
            }

pub unsafe fn bl1_ddotsv2(conjxy: conj1_t, n: integer, x: *mut f64, inc_x: integer, y: *mut f64, inc_y: integer, z: *mut f64, inc_z: integer, beta: *mut f64, rho_xz: *mut f64, rho_yz: *mut f64) {
                dyload_lib().bl1_ddotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
            }

pub unsafe fn bl1_cdotsv2(conjxy: conj1_t, n: integer, x: *mut scomplex, inc_x: integer, y: *mut scomplex, inc_y: integer, z: *mut scomplex, inc_z: integer, beta: *mut scomplex, rho_xz: *mut scomplex, rho_yz: *mut scomplex) {
                dyload_lib().bl1_cdotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
            }

pub unsafe fn bl1_zdotsv2(conjxy: conj1_t, n: integer, x: *mut dcomplex, inc_x: integer, y: *mut dcomplex, inc_y: integer, z: *mut dcomplex, inc_z: integer, beta: *mut dcomplex, rho_xz: *mut dcomplex, rho_yz: *mut dcomplex) {
                dyload_lib().bl1_zdotsv2.unwrap()(conjxy, n, x, inc_x, y, inc_y, z, inc_z, beta, rho_xz, rho_yz)
            }

pub unsafe fn bl1_sdotsv3(conjxyw: conj1_t, n: integer, x: *mut f32, inc_x: integer, y: *mut f32, inc_y: integer, w: *mut f32, inc_w: integer, z: *mut f32, inc_z: integer, beta: *mut f32, rho_xz: *mut f32, rho_yz: *mut f32, rho_wz: *mut f32) {
                dyload_lib().bl1_sdotsv3.unwrap()(conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz)
            }

pub unsafe fn bl1_ddotsv3(conjxyw: conj1_t, n: integer, x: *mut f64, inc_x: integer, y: *mut f64, inc_y: integer, w: *mut f64, inc_w: integer, z: *mut f64, inc_z: integer, beta: *mut f64, rho_xz: *mut f64, rho_yz: *mut f64, rho_wz: *mut f64) {
                dyload_lib().bl1_ddotsv3.unwrap()(conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz)
            }

pub unsafe fn bl1_cdotsv3(conjxyw: conj1_t, n: integer, x: *mut scomplex, inc_x: integer, y: *mut scomplex, inc_y: integer, w: *mut scomplex, inc_w: integer, z: *mut scomplex, inc_z: integer, beta: *mut scomplex, rho_xz: *mut scomplex, rho_yz: *mut scomplex, rho_wz: *mut scomplex) {
                dyload_lib().bl1_cdotsv3.unwrap()(conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz)
            }

pub unsafe fn bl1_zdotsv3(conjxyw: conj1_t, n: integer, x: *mut dcomplex, inc_x: integer, y: *mut dcomplex, inc_y: integer, w: *mut dcomplex, inc_w: integer, z: *mut dcomplex, inc_z: integer, beta: *mut dcomplex, rho_xz: *mut dcomplex, rho_yz: *mut dcomplex, rho_wz: *mut dcomplex) {
                dyload_lib().bl1_zdotsv3.unwrap()(conjxyw, n, x, inc_x, y, inc_y, w, inc_w, z, inc_z, beta, rho_xz, rho_yz, rho_wz)
            }

pub unsafe fn bl1_sdotaxpy(n: integer, a: *mut f32, inc_a: integer, x: *mut f32, inc_x: integer, kappa: *mut f32, rho: *mut f32, w: *mut f32, inc_w: integer) {
                dyload_lib().bl1_sdotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_ddotaxpy(n: integer, a: *mut f64, inc_a: integer, x: *mut f64, inc_x: integer, kappa: *mut f64, rho: *mut f64, w: *mut f64, inc_w: integer) {
                dyload_lib().bl1_ddotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_cdotaxpy(n: integer, a: *mut scomplex, inc_a: integer, x: *mut scomplex, inc_x: integer, kappa: *mut scomplex, rho: *mut scomplex, w: *mut scomplex, inc_w: integer) {
                dyload_lib().bl1_cdotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_zdotaxpy(n: integer, a: *mut dcomplex, inc_a: integer, x: *mut dcomplex, inc_x: integer, kappa: *mut dcomplex, rho: *mut dcomplex, w: *mut dcomplex, inc_w: integer) {
                dyload_lib().bl1_zdotaxpy.unwrap()(n, a, inc_a, x, inc_x, kappa, rho, w, inc_w)
            }

pub unsafe fn bl1_sdotaxmyv2(n: integer, alpha: *mut f32, beta: *mut f32, x: *mut f32, inc_x: integer, u: *mut f32, inc_u: integer, rho: *mut f32, y: *mut f32, inc_y: integer, z: *mut f32, inc_z: integer) {
                dyload_lib().bl1_sdotaxmyv2.unwrap()(n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_ddotaxmyv2(n: integer, alpha: *mut f64, beta: *mut f64, x: *mut f64, inc_x: integer, u: *mut f64, inc_u: integer, rho: *mut f64, y: *mut f64, inc_y: integer, z: *mut f64, inc_z: integer) {
                dyload_lib().bl1_ddotaxmyv2.unwrap()(n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_cdotaxmyv2(n: integer, alpha: *mut scomplex, beta: *mut scomplex, x: *mut scomplex, inc_x: integer, u: *mut scomplex, inc_u: integer, rho: *mut scomplex, y: *mut scomplex, inc_y: integer, z: *mut scomplex, inc_z: integer) {
                dyload_lib().bl1_cdotaxmyv2.unwrap()(n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_zdotaxmyv2(n: integer, alpha: *mut dcomplex, beta: *mut dcomplex, x: *mut dcomplex, inc_x: integer, u: *mut dcomplex, inc_u: integer, rho: *mut dcomplex, y: *mut dcomplex, inc_y: integer, z: *mut dcomplex, inc_z: integer) {
                dyload_lib().bl1_zdotaxmyv2.unwrap()(n, alpha, beta, x, inc_x, u, inc_u, rho, y, inc_y, z, inc_z)
            }

pub unsafe fn bl1_sdotv2axpyv2b(n: integer, a1: *mut f32, inc_a1: integer, a2: *mut f32, inc_a2: integer, x: *mut f32, inc_x: integer, kappa1: *mut f32, kappa2: *mut f32, rho1: *mut f32, rho2: *mut f32, w: *mut f32, inc_w: integer) {
                dyload_lib().bl1_sdotv2axpyv2b.unwrap()(n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w)
            }

pub unsafe fn bl1_ddotv2axpyv2b(n: integer, a1: *mut f64, inc_a1: integer, a2: *mut f64, inc_a2: integer, x: *mut f64, inc_x: integer, kappa1: *mut f64, kappa2: *mut f64, rho1: *mut f64, rho2: *mut f64, w: *mut f64, inc_w: integer) {
                dyload_lib().bl1_ddotv2axpyv2b.unwrap()(n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w)
            }

pub unsafe fn bl1_cdotv2axpyv2b(n: integer, a1: *mut scomplex, inc_a1: integer, a2: *mut scomplex, inc_a2: integer, x: *mut scomplex, inc_x: integer, kappa1: *mut scomplex, kappa2: *mut scomplex, rho1: *mut scomplex, rho2: *mut scomplex, w: *mut scomplex, inc_w: integer) {
                dyload_lib().bl1_cdotv2axpyv2b.unwrap()(n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w)
            }

pub unsafe fn bl1_zdotv2axpyv2b(n: integer, a1: *mut dcomplex, inc_a1: integer, a2: *mut dcomplex, inc_a2: integer, x: *mut dcomplex, inc_x: integer, kappa1: *mut dcomplex, kappa2: *mut dcomplex, rho1: *mut dcomplex, rho2: *mut dcomplex, w: *mut dcomplex, inc_w: integer) {
                dyload_lib().bl1_zdotv2axpyv2b.unwrap()(n, a1, inc_a1, a2, inc_a2, x, inc_x, kappa1, kappa2, rho1, rho2, w, inc_w)
            }

pub unsafe fn bl1_zaxpyv2bdots(n: integer, alpha1: *mut dcomplex, alpha2: *mut dcomplex, x1: *mut dcomplex, inc_x1: integer, x2: *mut dcomplex, inc_x2: integer, y: *mut dcomplex, inc_y: integer, u: *mut dcomplex, inc_u: integer, beta: *mut dcomplex, rho: *mut dcomplex) {
                dyload_lib().bl1_zaxpyv2bdots.unwrap()(n, alpha1, alpha2, x1, inc_x1, x2, inc_x2, y, inc_y, u, inc_u, beta, rho)
            }

pub unsafe fn FLA_Cntl_obj_free(cntl: *mut c_void) {
                dyload_lib().FLA_Cntl_obj_free.unwrap()(cntl)
            }

pub unsafe fn FLA_Cntl_axpy_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_axpy: *mut fla_axpy_t) -> *mut fla_axpy_t {
                dyload_lib().FLA_Cntl_axpy_obj_create.unwrap()(matrix_type, variant, blocksize, sub_axpy)
            }

pub unsafe fn FLA_Cntl_axpyt_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_axpyt: *mut fla_axpyt_t) -> *mut fla_axpyt_t {
                dyload_lib().FLA_Cntl_axpyt_obj_create.unwrap()(matrix_type, variant, blocksize, sub_axpyt)
            }

pub unsafe fn FLA_Cntl_copy_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_copy: *mut fla_copy_t) -> *mut fla_copy_t {
                dyload_lib().FLA_Cntl_copy_obj_create.unwrap()(matrix_type, variant, blocksize, sub_copy)
            }

pub unsafe fn FLA_Cntl_copyt_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_copyt: *mut fla_copyt_t) -> *mut fla_copyt_t {
                dyload_lib().FLA_Cntl_copyt_obj_create.unwrap()(matrix_type, variant, blocksize, sub_copyt)
            }

pub unsafe fn FLA_Cntl_copyr_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_copyr: *mut fla_copyr_t, sub_copy: *mut fla_copy_t) -> *mut fla_copyr_t {
                dyload_lib().FLA_Cntl_copyr_obj_create.unwrap()(matrix_type, variant, blocksize, sub_copyr, sub_copy)
            }

pub unsafe fn FLA_Cntl_scal_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t) -> *mut fla_scal_t {
                dyload_lib().FLA_Cntl_scal_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal)
            }

pub unsafe fn FLA_Cntl_scalr_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scalr: *mut fla_scalr_t, sub_scal: *mut fla_scal_t) -> *mut fla_scalr_t {
                dyload_lib().FLA_Cntl_scalr_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scalr, sub_scal)
            }

pub unsafe fn FLA_Cntl_swap_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_swap: *mut fla_swap_t) -> *mut fla_swap_t {
                dyload_lib().FLA_Cntl_swap_obj_create.unwrap()(matrix_type, variant, blocksize, sub_swap)
            }

pub unsafe fn FLA_Cntl_tpose_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_trans: *mut fla_tpose_t, sub_swap: *mut fla_swap_t) -> *mut fla_tpose_t {
                dyload_lib().FLA_Cntl_tpose_obj_create.unwrap()(matrix_type, variant, blocksize, sub_trans, sub_swap)
            }

pub unsafe fn FLA_Cntl_gemv_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_gemv: *mut fla_gemv_t) -> *mut fla_gemv_t {
                dyload_lib().FLA_Cntl_gemv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_gemv)
            }

pub unsafe fn FLA_Cntl_trsv_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_trsv: *mut fla_trsv_t, sub_gemv: *mut fla_gemv_t) -> *mut fla_trsv_t {
                dyload_lib().FLA_Cntl_trsv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_trsv, sub_gemv)
            }

pub unsafe fn FLA_Cntl_gemm_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_gemm_t {
                dyload_lib().FLA_Cntl_gemm_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_gemm)
            }

pub unsafe fn FLA_Cntl_hemm_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_hemm: *mut fla_hemm_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t) -> *mut fla_hemm_t {
                dyload_lib().FLA_Cntl_hemm_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_hemm, sub_gemm1, sub_gemm2)
            }

pub unsafe fn FLA_Cntl_herk_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scalr: *mut fla_scalr_t, sub_herk: *mut fla_herk_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_herk_t {
                dyload_lib().FLA_Cntl_herk_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scalr, sub_herk, sub_gemm)
            }

pub unsafe fn FLA_Cntl_her2k_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scalr: *mut fla_scalr_t, sub_her2k: *mut fla_her2k_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t) -> *mut fla_her2k_t {
                dyload_lib().FLA_Cntl_her2k_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scalr, sub_her2k, sub_gemm1, sub_gemm2)
            }

pub unsafe fn FLA_Cntl_symm_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_symm: *mut fla_symm_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t) -> *mut fla_symm_t {
                dyload_lib().FLA_Cntl_symm_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_symm, sub_gemm1, sub_gemm2)
            }

pub unsafe fn FLA_Cntl_syrk_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scalr: *mut fla_scalr_t, sub_syrk: *mut fla_syrk_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_syrk_t {
                dyload_lib().FLA_Cntl_syrk_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scalr, sub_syrk, sub_gemm)
            }

pub unsafe fn FLA_Cntl_syr2k_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scalr: *mut fla_scalr_t, sub_syr2k: *mut fla_syr2k_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t) -> *mut fla_syr2k_t {
                dyload_lib().FLA_Cntl_syr2k_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scalr, sub_syr2k, sub_gemm1, sub_gemm2)
            }

pub unsafe fn FLA_Cntl_trmm_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_trmm: *mut fla_trmm_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_trmm_t {
                dyload_lib().FLA_Cntl_trmm_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_trmm, sub_gemm)
            }

pub unsafe fn FLA_Cntl_trsm_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_trsm: *mut fla_trsm_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_trsm_t {
                dyload_lib().FLA_Cntl_trsm_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_trsm, sub_gemm)
            }

pub unsafe fn FLA_Cntl_chol_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_chol: *mut fla_chol_t, sub_herk: *mut fla_herk_t, sub_trsm: *mut fla_trsm_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_chol_t {
                dyload_lib().FLA_Cntl_chol_obj_create.unwrap()(matrix_type, variant, blocksize, sub_chol, sub_herk, sub_trsm, sub_gemm)
            }

pub unsafe fn FLA_Cntl_lu_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_lu: *mut fla_lu_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_gemm3: *mut fla_gemm_t, sub_trsm1: *mut fla_trsm_t, sub_trsm2: *mut fla_trsm_t, sub_appiv1: *mut fla_appiv_t, sub_appiv2: *mut fla_appiv_t) -> *mut fla_lu_t {
                dyload_lib().FLA_Cntl_lu_obj_create.unwrap()(matrix_type, variant, blocksize, sub_lu, sub_gemm1, sub_gemm2, sub_gemm3, sub_trsm1, sub_trsm2, sub_appiv1, sub_appiv2)
            }

pub unsafe fn FLA_Cntl_appiv_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_appiv: *mut fla_appiv_t) -> *mut fla_appiv_t {
                dyload_lib().FLA_Cntl_appiv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_appiv)
            }

pub unsafe fn FLA_Cntl_qrut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_qrut: *mut fla_qrut_t, sub_apqut: *mut fla_apqut_t) -> *mut fla_qrut_t {
                dyload_lib().FLA_Cntl_qrut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_qrut, sub_apqut)
            }

pub unsafe fn FLA_Cntl_qr2ut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_qr2ut: *mut fla_qr2ut_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_trsm: *mut fla_trsm_t, sub_copy: *mut fla_copy_t, sub_axpy: *mut fla_axpy_t) -> *mut fla_qr2ut_t {
                dyload_lib().FLA_Cntl_qr2ut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_qr2ut, sub_gemm1, sub_gemm2, sub_trsm, sub_copy, sub_axpy)
            }

pub unsafe fn FLA_Cntl_lqut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_lqut: *mut fla_lqut_t, sub_apqut: *mut fla_apqut_t) -> *mut fla_lqut_t {
                dyload_lib().FLA_Cntl_lqut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_lqut, sub_apqut)
            }

pub unsafe fn FLA_Cntl_caqr2ut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_caqr2ut: *mut fla_caqr2ut_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_trmm1: *mut fla_trmm_t, sub_trmm2: *mut fla_trmm_t, sub_trsm: *mut fla_trsm_t, sub_axpy1: *mut fla_axpy_t, sub_axpy2: *mut fla_axpy_t, sub_axpy3: *mut fla_axpy_t, sub_copy: *mut fla_copy_t) -> *mut fla_caqr2ut_t {
                dyload_lib().FLA_Cntl_caqr2ut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_caqr2ut, sub_gemm1, sub_gemm2, sub_trmm1, sub_trmm2, sub_trsm, sub_axpy1, sub_axpy2, sub_axpy3, sub_copy)
            }

pub unsafe fn FLA_Cntl_hessut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t) -> *mut fla_hessut_t {
                dyload_lib().FLA_Cntl_hessut_obj_create.unwrap()(matrix_type, variant, blocksize)
            }

pub unsafe fn FLA_Cntl_tridiagut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t) -> *mut fla_tridiagut_t {
                dyload_lib().FLA_Cntl_tridiagut_obj_create.unwrap()(matrix_type, variant, blocksize)
            }

pub unsafe fn FLA_Cntl_bidiagut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t) -> *mut fla_bidiagut_t {
                dyload_lib().FLA_Cntl_bidiagut_obj_create.unwrap()(matrix_type, variant, blocksize)
            }

pub unsafe fn FLA_Cntl_trinv_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_trinv: *mut fla_trinv_t, sub_trmm: *mut fla_trmm_t, sub_trsm1: *mut fla_trsm_t, sub_trsm2: *mut fla_trsm_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_trinv_t {
                dyload_lib().FLA_Cntl_trinv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_trinv, sub_trmm, sub_trsm1, sub_trsm2, sub_gemm)
            }

pub unsafe fn FLA_Cntl_ttmm_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_ttmm: *mut fla_ttmm_t, sub_herk: *mut fla_herk_t, sub_trmm: *mut fla_trmm_t, sub_gemm: *mut fla_gemm_t) -> *mut fla_ttmm_t {
                dyload_lib().FLA_Cntl_ttmm_obj_create.unwrap()(matrix_type, variant, blocksize, sub_ttmm, sub_herk, sub_trmm, sub_gemm)
            }

pub unsafe fn FLA_Cntl_sylv_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_sylv1: *mut fla_sylv_t, sub_sylv2: *mut fla_sylv_t, sub_sylv3: *mut fla_sylv_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_gemm3: *mut fla_gemm_t, sub_gemm4: *mut fla_gemm_t, sub_gemm5: *mut fla_gemm_t, sub_gemm6: *mut fla_gemm_t, sub_gemm7: *mut fla_gemm_t, sub_gemm8: *mut fla_gemm_t) -> *mut fla_sylv_t {
                dyload_lib().FLA_Cntl_sylv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_sylv1, sub_sylv2, sub_sylv3, sub_gemm1, sub_gemm2, sub_gemm3, sub_gemm4, sub_gemm5, sub_gemm6, sub_gemm7, sub_gemm8)
            }

pub unsafe fn FLA_Cntl_lyap_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_scal: *mut fla_scal_t, sub_lyap: *mut fla_lyap_t, sub_sylv: *mut fla_sylv_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_hemm: *mut fla_hemm_t, sub_her2k: *mut fla_her2k_t) -> *mut fla_lyap_t {
                dyload_lib().FLA_Cntl_lyap_obj_create.unwrap()(matrix_type, variant, blocksize, sub_scal, sub_lyap, sub_sylv, sub_gemm1, sub_gemm2, sub_hemm, sub_her2k)
            }

pub unsafe fn FLA_Cntl_spdinv_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_chol: *mut fla_chol_t, sub_trinv: *mut fla_trinv_t, sub_ttmm: *mut fla_ttmm_t) -> *mut fla_spdinv_t {
                dyload_lib().FLA_Cntl_spdinv_obj_create.unwrap()(matrix_type, variant, blocksize, sub_chol, sub_trinv, sub_ttmm)
            }

pub unsafe fn FLA_Cntl_apqut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apqut: *mut fla_apqut_t, sub_trmm1: *mut fla_trmm_t, sub_trmm2: *mut fla_trmm_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_trsm: *mut fla_trsm_t, sub_copyt: *mut fla_copyt_t, sub_axpyt: *mut fla_axpyt_t) -> *mut fla_apqut_t {
                dyload_lib().FLA_Cntl_apqut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apqut, sub_trmm1, sub_trmm2, sub_gemm1, sub_gemm2, sub_trsm, sub_copyt, sub_axpyt)
            }

pub unsafe fn FLA_Cntl_apq2ut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apq2ut: *mut fla_apq2ut_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_trsm: *mut fla_trsm_t, sub_copyt: *mut fla_copyt_t, sub_axpyt: *mut fla_axpyt_t) -> *mut fla_apq2ut_t {
                dyload_lib().FLA_Cntl_apq2ut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apq2ut, sub_gemm1, sub_gemm2, sub_trsm, sub_copyt, sub_axpyt)
            }

pub unsafe fn FLA_Cntl_apcaq2ut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apcaq2ut: *mut fla_apcaq2ut_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_trmm1: *mut fla_trmm_t, sub_trmm2: *mut fla_trmm_t, sub_trsm: *mut fla_trsm_t, sub_axpy1: *mut fla_axpy_t, sub_axpy2: *mut fla_axpy_t, sub_axpy3: *mut fla_axpy_t, sub_copy: *mut fla_copy_t) -> *mut fla_apcaq2ut_t {
                dyload_lib().FLA_Cntl_apcaq2ut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apcaq2ut, sub_gemm1, sub_gemm2, sub_trmm1, sub_trmm2, sub_trsm, sub_axpy1, sub_axpy2, sub_axpy3, sub_copy)
            }

pub unsafe fn FLA_Cntl_qrutinc_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_qrut: *mut fla_qrut_t, sub_apqut: *mut fla_apqut_t, sub_qr2ut: *mut fla_qr2ut_t, sub_apq2ut: *mut fla_apq2ut_t) -> *mut fla_qrutinc_t {
                dyload_lib().FLA_Cntl_qrutinc_obj_create.unwrap()(matrix_type, variant, blocksize, sub_qrut, sub_apqut, sub_qr2ut, sub_apq2ut)
            }

pub unsafe fn FLA_Cntl_apqutinc_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apqut: *mut fla_apqut_t, sub_apq2ut: *mut fla_apq2ut_t) -> *mut fla_apqutinc_t {
                dyload_lib().FLA_Cntl_apqutinc_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apqut, sub_apq2ut)
            }

pub unsafe fn FLA_Cntl_caqrutinc_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_caqr2ut: *mut fla_caqr2ut_t, sub_apcaq2ut: *mut fla_apcaq2ut_t) -> *mut fla_caqrutinc_t {
                dyload_lib().FLA_Cntl_caqrutinc_obj_create.unwrap()(matrix_type, variant, blocksize, sub_caqr2ut, sub_apcaq2ut)
            }

pub unsafe fn FLA_Cntl_apcaqutinc_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apcaq2ut: *mut fla_apcaq2ut_t) -> *mut fla_apcaqutinc_t {
                dyload_lib().FLA_Cntl_apcaqutinc_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apcaq2ut)
            }

pub unsafe fn FLA_Cntl_uddateut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_uddateut: *mut fla_uddateut_t, sub_apqudut: *mut fla_apqudut_t) -> *mut fla_uddateut_t {
                dyload_lib().FLA_Cntl_uddateut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_uddateut, sub_apqudut)
            }

pub unsafe fn FLA_Cntl_apqudut_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apq2ut: *mut fla_apqudut_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_gemm3: *mut fla_gemm_t, sub_gemm4: *mut fla_gemm_t, sub_trsm: *mut fla_trsm_t, sub_copyt: *mut fla_copyt_t, sub_axpyt: *mut fla_axpyt_t) -> *mut fla_apqudut_t {
                dyload_lib().FLA_Cntl_apqudut_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apq2ut, sub_gemm1, sub_gemm2, sub_gemm3, sub_gemm4, sub_trsm, sub_copyt, sub_axpyt)
            }

pub unsafe fn FLA_Cntl_uddateutinc_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_uddateut: *mut fla_uddateut_t, sub_apqudut: *mut fla_apqudut_t) -> *mut fla_uddateutinc_t {
                dyload_lib().FLA_Cntl_uddateutinc_obj_create.unwrap()(matrix_type, variant, blocksize, sub_uddateut, sub_apqudut)
            }

pub unsafe fn FLA_Cntl_apqudutinc_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_apqudut: *mut fla_apqudut_t) -> *mut fla_apqudutinc_t {
                dyload_lib().FLA_Cntl_apqudutinc_obj_create.unwrap()(matrix_type, variant, blocksize, sub_apqudut)
            }

pub unsafe fn FLA_Cntl_eig_gest_obj_create(matrix_type: FLA_Matrix_type, variant: c_int, blocksize: *mut fla_blocksize_t, sub_eig_gest: *mut fla_eig_gest_t, sub_axpy1: *mut fla_axpy_t, sub_axpy2: *mut fla_axpy_t, sub_gemm1: *mut fla_gemm_t, sub_gemm2: *mut fla_gemm_t, sub_gemm3: *mut fla_gemm_t, sub_hemm: *mut fla_hemm_t, sub_her2k: *mut fla_her2k_t, sub_trmm1: *mut fla_trmm_t, sub_trmm2: *mut fla_trmm_t, sub_trsm1: *mut fla_trsm_t, sub_trsm2: *mut fla_trsm_t) -> *mut fla_eig_gest_t {
                dyload_lib().FLA_Cntl_eig_gest_obj_create.unwrap()(matrix_type, variant, blocksize, sub_eig_gest, sub_axpy1, sub_axpy2, sub_gemm1, sub_gemm2, sub_gemm3, sub_hemm, sub_her2k, sub_trmm1, sub_trmm2, sub_trsm1, sub_trsm2)
            }

pub unsafe fn FLA_Cntl_init_flamec() {
                dyload_lib().FLA_Cntl_init_flamec.unwrap()()
            }

pub unsafe fn FLA_Cntl_finalize_flamec() {
                dyload_lib().FLA_Cntl_finalize_flamec.unwrap()()
            }

pub unsafe fn FLA_Transpose_cntl_init() {
                dyload_lib().FLA_Transpose_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Transpose_cntl_finalize() {
                dyload_lib().FLA_Transpose_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Axpy_cntl_init() {
                dyload_lib().FLA_Axpy_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Axpyt_cntl_init() {
                dyload_lib().FLA_Axpyt_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Copy_cntl_init() {
                dyload_lib().FLA_Copy_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Copyt_cntl_init() {
                dyload_lib().FLA_Copyt_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Copyr_cntl_init() {
                dyload_lib().FLA_Copyr_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Scal_cntl_init() {
                dyload_lib().FLA_Scal_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Scalr_cntl_init() {
                dyload_lib().FLA_Scalr_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Axpy_cntl_finalize() {
                dyload_lib().FLA_Axpy_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Axpyt_cntl_finalize() {
                dyload_lib().FLA_Axpyt_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Copy_cntl_finalize() {
                dyload_lib().FLA_Copy_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Copyt_cntl_finalize() {
                dyload_lib().FLA_Copyt_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Copyr_cntl_finalize() {
                dyload_lib().FLA_Copyr_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Scal_cntl_finalize() {
                dyload_lib().FLA_Scal_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Scalr_cntl_finalize() {
                dyload_lib().FLA_Scalr_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Gemv_cntl_init() {
                dyload_lib().FLA_Gemv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Trsv_cntl_init() {
                dyload_lib().FLA_Trsv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Gemv_cntl_finalize() {
                dyload_lib().FLA_Gemv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Trsv_cntl_finalize() {
                dyload_lib().FLA_Trsv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Gemm_cntl_init() {
                dyload_lib().FLA_Gemm_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Hemm_cntl_init() {
                dyload_lib().FLA_Hemm_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Herk_cntl_init() {
                dyload_lib().FLA_Herk_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Her2k_cntl_init() {
                dyload_lib().FLA_Her2k_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Symm_cntl_init() {
                dyload_lib().FLA_Symm_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Syrk_cntl_init() {
                dyload_lib().FLA_Syrk_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Syr2k_cntl_init() {
                dyload_lib().FLA_Syr2k_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Trmm_cntl_init() {
                dyload_lib().FLA_Trmm_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Trsm_cntl_init() {
                dyload_lib().FLA_Trsm_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Gemm_cntl_finalize() {
                dyload_lib().FLA_Gemm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Hemm_cntl_finalize() {
                dyload_lib().FLA_Hemm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Herk_cntl_finalize() {
                dyload_lib().FLA_Herk_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Her2k_cntl_finalize() {
                dyload_lib().FLA_Her2k_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Symm_cntl_finalize() {
                dyload_lib().FLA_Symm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Syrk_cntl_finalize() {
                dyload_lib().FLA_Syrk_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Syr2k_cntl_finalize() {
                dyload_lib().FLA_Syr2k_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Trmm_cntl_finalize() {
                dyload_lib().FLA_Trmm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Trsm_cntl_finalize() {
                dyload_lib().FLA_Trsm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Apply_pivots_cntl_init() {
                dyload_lib().FLA_Apply_pivots_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Chol_cntl_init() {
                dyload_lib().FLA_Chol_cntl_init.unwrap()()
            }

pub unsafe fn FLA_LU_piv_cntl_init() {
                dyload_lib().FLA_LU_piv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_LU_nopiv_cntl_init() {
                dyload_lib().FLA_LU_nopiv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_QR_UT_cntl_init() {
                dyload_lib().FLA_QR_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_QR2_UT_cntl_init() {
                dyload_lib().FLA_QR2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_LQ_UT_cntl_init() {
                dyload_lib().FLA_LQ_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_CAQR2_UT_cntl_init() {
                dyload_lib().FLA_CAQR2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_UDdate_UT_cntl_init() {
                dyload_lib().FLA_UDdate_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Hess_UT_cntl_init() {
                dyload_lib().FLA_Hess_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Tridiag_UT_cntl_init() {
                dyload_lib().FLA_Tridiag_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Bidiag_UT_cntl_init() {
                dyload_lib().FLA_Bidiag_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Trinv_cntl_init() {
                dyload_lib().FLA_Trinv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Ttmm_cntl_init() {
                dyload_lib().FLA_Ttmm_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Sylv_cntl_init() {
                dyload_lib().FLA_Sylv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Lyap_cntl_init() {
                dyload_lib().FLA_Lyap_cntl_init.unwrap()()
            }

pub unsafe fn FLA_SPDinv_cntl_init() {
                dyload_lib().FLA_SPDinv_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Apply_Q_UT_cntl_init() {
                dyload_lib().FLA_Apply_Q_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Apply_Q2_UT_cntl_init() {
                dyload_lib().FLA_Apply_Q2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Apply_CAQ2_UT_cntl_init() {
                dyload_lib().FLA_Apply_CAQ2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Apply_QUD_UT_cntl_init() {
                dyload_lib().FLA_Apply_QUD_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Eig_gest_cntl_init() {
                dyload_lib().FLA_Eig_gest_cntl_init.unwrap()()
            }

pub unsafe fn FLA_Apply_pivots_cntl_finalize() {
                dyload_lib().FLA_Apply_pivots_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Chol_cntl_finalize() {
                dyload_lib().FLA_Chol_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_LU_piv_cntl_finalize() {
                dyload_lib().FLA_LU_piv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_LU_nopiv_cntl_finalize() {
                dyload_lib().FLA_LU_nopiv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_QR_UT_cntl_finalize() {
                dyload_lib().FLA_QR_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_QR2_UT_cntl_finalize() {
                dyload_lib().FLA_QR2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_LQ_UT_cntl_finalize() {
                dyload_lib().FLA_LQ_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_CAQR2_UT_cntl_finalize() {
                dyload_lib().FLA_CAQR2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_UDdate_UT_cntl_finalize() {
                dyload_lib().FLA_UDdate_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Hess_UT_cntl_finalize() {
                dyload_lib().FLA_Hess_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Tridiag_UT_cntl_finalize() {
                dyload_lib().FLA_Tridiag_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Bidiag_UT_cntl_finalize() {
                dyload_lib().FLA_Bidiag_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Trinv_cntl_finalize() {
                dyload_lib().FLA_Trinv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Ttmm_cntl_finalize() {
                dyload_lib().FLA_Ttmm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Sylv_cntl_finalize() {
                dyload_lib().FLA_Sylv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Lyap_cntl_finalize() {
                dyload_lib().FLA_Lyap_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_SPDinv_cntl_finalize() {
                dyload_lib().FLA_SPDinv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Apply_Q_UT_cntl_finalize() {
                dyload_lib().FLA_Apply_Q_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Apply_Q2_UT_cntl_finalize() {
                dyload_lib().FLA_Apply_Q2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Apply_CAQ2_UT_cntl_finalize() {
                dyload_lib().FLA_Apply_CAQ2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Apply_QUD_UT_cntl_finalize() {
                dyload_lib().FLA_Apply_QUD_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Eig_gest_cntl_finalize() {
                dyload_lib().FLA_Eig_gest_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Cntl_init_flash() {
                dyload_lib().FLA_Cntl_init_flash.unwrap()()
            }

pub unsafe fn FLA_Cntl_finalize_flash() {
                dyload_lib().FLA_Cntl_finalize_flash.unwrap()()
            }

pub unsafe fn FLASH_Transpose_cntl_init() {
                dyload_lib().FLASH_Transpose_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Transpose_cntl_finalize() {
                dyload_lib().FLASH_Transpose_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Axpy_cntl_init() {
                dyload_lib().FLASH_Axpy_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Axpyt_cntl_init() {
                dyload_lib().FLASH_Axpyt_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Copy_cntl_init() {
                dyload_lib().FLASH_Copy_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Copyt_cntl_init() {
                dyload_lib().FLASH_Copyt_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Copyr_cntl_init() {
                dyload_lib().FLASH_Copyr_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Scal_cntl_init() {
                dyload_lib().FLASH_Scal_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Scalr_cntl_init() {
                dyload_lib().FLASH_Scalr_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Axpy_cntl_finalize() {
                dyload_lib().FLASH_Axpy_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Axpyt_cntl_finalize() {
                dyload_lib().FLASH_Axpyt_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Copy_cntl_finalize() {
                dyload_lib().FLASH_Copy_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Copyt_cntl_finalize() {
                dyload_lib().FLASH_Copyt_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Copyr_cntl_finalize() {
                dyload_lib().FLASH_Copyr_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Scal_cntl_finalize() {
                dyload_lib().FLASH_Scal_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Scalr_cntl_finalize() {
                dyload_lib().FLASH_Scalr_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Gemv_cntl_init() {
                dyload_lib().FLASH_Gemv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Trsv_cntl_init() {
                dyload_lib().FLASH_Trsv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Gemv_cntl_finalize() {
                dyload_lib().FLASH_Gemv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Trsv_cntl_finalize() {
                dyload_lib().FLASH_Trsv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Gemm_cntl_init() {
                dyload_lib().FLASH_Gemm_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Hemm_cntl_init() {
                dyload_lib().FLASH_Hemm_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Herk_cntl_init() {
                dyload_lib().FLASH_Herk_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Her2k_cntl_init() {
                dyload_lib().FLASH_Her2k_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Symm_cntl_init() {
                dyload_lib().FLASH_Symm_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Syrk_cntl_init() {
                dyload_lib().FLASH_Syrk_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Syr2k_cntl_init() {
                dyload_lib().FLASH_Syr2k_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Trmm_cntl_init() {
                dyload_lib().FLASH_Trmm_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Trsm_cntl_init() {
                dyload_lib().FLASH_Trsm_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Gemm_cntl_finalize() {
                dyload_lib().FLASH_Gemm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Hemm_cntl_finalize() {
                dyload_lib().FLASH_Hemm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Herk_cntl_finalize() {
                dyload_lib().FLASH_Herk_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Her2k_cntl_finalize() {
                dyload_lib().FLASH_Her2k_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Symm_cntl_finalize() {
                dyload_lib().FLASH_Symm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Syrk_cntl_finalize() {
                dyload_lib().FLASH_Syrk_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Syr2k_cntl_finalize() {
                dyload_lib().FLASH_Syr2k_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Trmm_cntl_finalize() {
                dyload_lib().FLASH_Trmm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Trsm_cntl_finalize() {
                dyload_lib().FLASH_Trsm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_pivots_cntl_init() {
                dyload_lib().FLASH_Apply_pivots_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Chol_cntl_init() {
                dyload_lib().FLASH_Chol_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_LU_nopiv_cntl_init() {
                dyload_lib().FLASH_LU_nopiv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_LU_piv_cntl_init() {
                dyload_lib().FLASH_LU_piv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_LU_incpiv_cntl_init() {
                dyload_lib().FLASH_LU_incpiv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Trinv_cntl_init() {
                dyload_lib().FLASH_Trinv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Ttmm_cntl_init() {
                dyload_lib().FLASH_Ttmm_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_SPDinv_cntl_init() {
                dyload_lib().FLASH_SPDinv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Sylv_cntl_init() {
                dyload_lib().FLASH_Sylv_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Lyap_cntl_init() {
                dyload_lib().FLASH_Lyap_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_QR_UT_cntl_init() {
                dyload_lib().FLASH_QR_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_QR2_UT_cntl_init() {
                dyload_lib().FLASH_QR2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_LQ_UT_cntl_init() {
                dyload_lib().FLASH_LQ_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_CAQR2_UT_cntl_init() {
                dyload_lib().FLASH_CAQR2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_UDdate_UT_cntl_init() {
                dyload_lib().FLASH_UDdate_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_QR_UT_inc_cntl_init() {
                dyload_lib().FLASH_QR_UT_inc_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_CAQR_UT_inc_cntl_init() {
                dyload_lib().FLASH_CAQR_UT_inc_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_UDdate_UT_inc_cntl_init() {
                dyload_lib().FLASH_UDdate_UT_inc_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_Q_UT_cntl_init() {
                dyload_lib().FLASH_Apply_Q_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_Q2_UT_cntl_init() {
                dyload_lib().FLASH_Apply_Q2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_CAQ2_UT_cntl_init() {
                dyload_lib().FLASH_Apply_CAQ2_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_QUD_UT_cntl_init() {
                dyload_lib().FLASH_Apply_QUD_UT_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_Q_UT_inc_cntl_init() {
                dyload_lib().FLASH_Apply_Q_UT_inc_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_CAQ_UT_inc_cntl_init() {
                dyload_lib().FLASH_Apply_CAQ_UT_inc_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_QUD_UT_inc_cntl_init() {
                dyload_lib().FLASH_Apply_QUD_UT_inc_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Eig_gest_cntl_init() {
                dyload_lib().FLASH_Eig_gest_cntl_init.unwrap()()
            }

pub unsafe fn FLASH_Apply_pivots_cntl_finalize() {
                dyload_lib().FLASH_Apply_pivots_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Chol_cntl_finalize() {
                dyload_lib().FLASH_Chol_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_LU_nopiv_cntl_finalize() {
                dyload_lib().FLASH_LU_nopiv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_LU_piv_cntl_finalize() {
                dyload_lib().FLASH_LU_piv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_LU_incpiv_cntl_finalize() {
                dyload_lib().FLASH_LU_incpiv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Trinv_cntl_finalize() {
                dyload_lib().FLASH_Trinv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Ttmm_cntl_finalize() {
                dyload_lib().FLASH_Ttmm_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_SPDinv_cntl_finalize() {
                dyload_lib().FLASH_SPDinv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Sylv_cntl_finalize() {
                dyload_lib().FLASH_Sylv_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Lyap_cntl_finalize() {
                dyload_lib().FLASH_Lyap_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_QR_UT_cntl_finalize() {
                dyload_lib().FLASH_QR_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_QR2_UT_cntl_finalize() {
                dyload_lib().FLASH_QR2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_LQ_UT_cntl_finalize() {
                dyload_lib().FLASH_LQ_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_CAQR2_UT_cntl_finalize() {
                dyload_lib().FLASH_CAQR2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_UDdate_UT_cntl_finalize() {
                dyload_lib().FLASH_UDdate_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_QR_UT_inc_cntl_finalize() {
                dyload_lib().FLASH_QR_UT_inc_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_CAQR_UT_inc_cntl_finalize() {
                dyload_lib().FLASH_CAQR_UT_inc_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_UDdate_UT_inc_cntl_finalize() {
                dyload_lib().FLASH_UDdate_UT_inc_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_Q_UT_cntl_finalize() {
                dyload_lib().FLASH_Apply_Q_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_Q2_UT_cntl_finalize() {
                dyload_lib().FLASH_Apply_Q2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_CAQ2_UT_cntl_finalize() {
                dyload_lib().FLASH_Apply_CAQ2_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_QUD_UT_cntl_finalize() {
                dyload_lib().FLASH_Apply_QUD_UT_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_Q_UT_inc_cntl_finalize() {
                dyload_lib().FLASH_Apply_Q_UT_inc_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_CAQ_UT_inc_cntl_finalize() {
                dyload_lib().FLASH_Apply_CAQ_UT_inc_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Apply_QUD_UT_inc_cntl_finalize() {
                dyload_lib().FLASH_Apply_QUD_UT_inc_cntl_finalize.unwrap()()
            }

pub unsafe fn FLASH_Eig_gest_cntl_finalize() {
                dyload_lib().FLASH_Eig_gest_cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Cntl_init() {
                dyload_lib().FLA_Cntl_init.unwrap()()
            }

pub unsafe fn FLA_Cntl_finalize() {
                dyload_lib().FLA_Cntl_finalize.unwrap()()
            }

pub unsafe fn FLA_Blocksize_create(b_s: fla_dim_t, b_d: fla_dim_t, b_c: fla_dim_t, b_z: fla_dim_t) -> *mut fla_blocksize_t {
                dyload_lib().FLA_Blocksize_create.unwrap()(b_s, b_d, b_c, b_z)
            }

pub unsafe fn FLA_Blocksize_create_copy(bp: *mut fla_blocksize_t) -> *mut fla_blocksize_t {
                dyload_lib().FLA_Blocksize_create_copy.unwrap()(bp)
            }

pub unsafe fn FLA_Blocksize_set(bp: *mut fla_blocksize_t, b_s: fla_dim_t, b_d: fla_dim_t, b_c: fla_dim_t, b_z: fla_dim_t) {
                dyload_lib().FLA_Blocksize_set.unwrap()(bp, b_s, b_d, b_c, b_z)
            }

pub unsafe fn FLA_Blocksize_scale(bp: *mut fla_blocksize_t, factor: f64) {
                dyload_lib().FLA_Blocksize_scale.unwrap()(bp, factor)
            }

pub unsafe fn FLA_Blocksize_free(bp: *mut fla_blocksize_t) {
                dyload_lib().FLA_Blocksize_free.unwrap()(bp)
            }

pub unsafe fn FLA_Blocksize_extract(dt: FLA_Datatype, bp: *mut fla_blocksize_t) -> fla_dim_t {
                dyload_lib().FLA_Blocksize_extract.unwrap()(dt, bp)
            }

pub unsafe fn FLA_Query_blocksizes(dim: FLA_Dimension) -> *mut fla_blocksize_t {
                dyload_lib().FLA_Query_blocksizes.unwrap()(dim)
            }

pub unsafe fn FLA_Query_blocksize(dt: FLA_Datatype, dim: FLA_Dimension) -> fla_dim_t {
                dyload_lib().FLA_Query_blocksize.unwrap()(dt, dim)
            }

pub unsafe fn FLA_Determine_blocksize(A_unproc: FLA_Obj, to_dir: FLA_Quadrant, cntl_blocksizes: *mut fla_blocksize_t) -> fla_dim_t {
                dyload_lib().FLA_Determine_blocksize.unwrap()(A_unproc, to_dir, cntl_blocksizes)
            }

pub unsafe fn FLA_determine_matrix_size(A_unproc: FLA_Obj, to_dir: FLA_Quadrant) -> fla_dim_t {
                dyload_lib().FLA_determine_matrix_size.unwrap()(A_unproc, to_dir)
            }

pub unsafe fn FLA_Check_error_level() -> c_uint {
                dyload_lib().FLA_Check_error_level.unwrap()()
            }

pub unsafe fn FLA_Check_error_level_set(level: c_uint) -> c_uint {
                dyload_lib().FLA_Check_error_level_set.unwrap()(level)
            }

pub unsafe fn FLA_Check_error_code_helper(code: c_int, file: *mut c_char, line: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_error_code_helper.unwrap()(code, file, line)
            }

pub unsafe fn FLA_Check_valid_side(side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Check_valid_side.unwrap()(side)
            }

pub unsafe fn FLA_Check_valid_uplo(uplo: FLA_Uplo) -> FLA_Error {
                dyload_lib().FLA_Check_valid_uplo.unwrap()(uplo)
            }

pub unsafe fn FLA_Check_valid_trans(trans: FLA_Trans) -> FLA_Error {
                dyload_lib().FLA_Check_valid_trans.unwrap()(trans)
            }

pub unsafe fn FLA_Check_valid_diag(diag: FLA_Diag) -> FLA_Error {
                dyload_lib().FLA_Check_valid_diag.unwrap()(diag)
            }

pub unsafe fn FLA_Check_valid_conj(conj: FLA_Conj) -> FLA_Error {
                dyload_lib().FLA_Check_valid_conj.unwrap()(conj)
            }

pub unsafe fn FLA_Check_valid_direct(direct: FLA_Conj) -> FLA_Error {
                dyload_lib().FLA_Check_valid_direct.unwrap()(direct)
            }

pub unsafe fn FLA_Check_valid_storev(storev: FLA_Conj) -> FLA_Error {
                dyload_lib().FLA_Check_valid_storev.unwrap()(storev)
            }

pub unsafe fn FLA_Check_valid_inverse(inv: FLA_Inv) -> FLA_Error {
                dyload_lib().FLA_Check_valid_inverse.unwrap()(inv)
            }

pub unsafe fn FLA_Check_valid_datatype(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Check_valid_datatype.unwrap()(datatype)
            }

pub unsafe fn FLA_Check_valid_object_datatype(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_valid_object_datatype.unwrap()(A)
            }

pub unsafe fn FLA_Check_valid_evd_type(evd_type: FLA_Evd_type) -> FLA_Error {
                dyload_lib().FLA_Check_valid_evd_type.unwrap()(evd_type)
            }

pub unsafe fn FLA_Check_valid_svd_type(svd_type: FLA_Svd_type) -> FLA_Error {
                dyload_lib().FLA_Check_valid_svd_type.unwrap()(svd_type)
            }

pub unsafe fn FLA_Check_valid_svd_type_combination(svd_type_u: FLA_Svd_type, svd_type_v: FLA_Svd_type) -> FLA_Error {
                dyload_lib().FLA_Check_valid_svd_type_combination.unwrap()(svd_type_u, svd_type_v)
            }

pub unsafe fn FLA_Check_valid_svd_type_and_trans_combination(svd_type_u: FLA_Svd_type, transu: FLA_Trans, svd_type_v: FLA_Svd_type, transv: FLA_Trans) -> FLA_Error {
                dyload_lib().FLA_Check_valid_svd_type_and_trans_combination.unwrap()(svd_type_u, transu, svd_type_v, transv)
            }

pub unsafe fn FLA_Check_floating_datatype(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Check_floating_datatype.unwrap()(datatype)
            }

pub unsafe fn FLA_Check_int_datatype(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Check_int_datatype.unwrap()(datatype)
            }

pub unsafe fn FLA_Check_real_datatype(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Check_real_datatype.unwrap()(datatype)
            }

pub unsafe fn FLA_Check_complex_datatype(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Check_complex_datatype.unwrap()(datatype)
            }

pub unsafe fn FLA_Check_floating_object(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_floating_object.unwrap()(A)
            }

pub unsafe fn FLA_Check_int_object(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_int_object.unwrap()(A)
            }

pub unsafe fn FLA_Check_real_object(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_real_object.unwrap()(A)
            }

pub unsafe fn FLA_Check_comparable_object(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_comparable_object.unwrap()(A)
            }

pub unsafe fn FLA_Check_complex_object(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_complex_object.unwrap()(A)
            }

pub unsafe fn FLA_Check_consistent_datatype(datatype: FLA_Datatype, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_consistent_datatype.unwrap()(datatype, A)
            }

pub unsafe fn FLA_Check_consistent_object_datatype(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_consistent_object_datatype.unwrap()(A, B)
            }

pub unsafe fn FLA_Check_identical_object_precision(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_identical_object_precision.unwrap()(A, B)
            }

pub unsafe fn FLA_Check_square(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_square.unwrap()(A)
            }

pub unsafe fn FLA_Check_if_scalar(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_if_scalar.unwrap()(A)
            }

pub unsafe fn FLA_Check_if_vector(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_if_vector.unwrap()(A)
            }

pub unsafe fn FLA_Check_conformal_dims(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_conformal_dims.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Check_matrix_matrix_dims(transa: FLA_Trans, transb: FLA_Trans, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_matrix_matrix_dims.unwrap()(transa, transb, A, B, C)
            }

pub unsafe fn FLA_Check_matrix_vector_dims(trans: FLA_Trans, A: FLA_Obj, x: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_matrix_vector_dims.unwrap()(trans, A, x, y)
            }

pub unsafe fn FLA_Check_equal_vector_dims(x: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_equal_vector_dims.unwrap()(x, y)
            }

pub unsafe fn FLA_Check_conj1_trans_and_datatype(trans: FLA_Trans, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_conj1_trans_and_datatype.unwrap()(trans, A)
            }

pub unsafe fn FLA_Check_hess_indices(A: FLA_Obj, ilo: c_int, ihi: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_hess_indices.unwrap()(A, ilo, ihi)
            }

pub unsafe fn FLA_Check_null_pointer(ptr: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Check_null_pointer.unwrap()(ptr)
            }

pub unsafe fn FLA_Check_object_dims(trans: FLA_Trans, m: fla_dim_t, n: fla_dim_t, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_object_dims.unwrap()(trans, m, n, A)
            }

pub unsafe fn FLA_Check_valid_pivot_type(ptype: FLA_Pivot_type) -> FLA_Error {
                dyload_lib().FLA_Check_valid_pivot_type.unwrap()(ptype)
            }

pub unsafe fn FLA_Check_malloc_pointer(ptr: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Check_malloc_pointer.unwrap()(ptr)
            }

pub unsafe fn FLA_Check_base_buffer_mismatch(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_base_buffer_mismatch.unwrap()(A, B)
            }

pub unsafe fn FLA_Check_adjacent_objects_2x2(A11: FLA_Obj, A12: FLA_Obj, A21: FLA_Obj, A22: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_adjacent_objects_2x2.unwrap()(A11, A12, A21, A22)
            }

pub unsafe fn FLA_Check_adjacent_objects_2x1(AT: FLA_Obj, AB: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_adjacent_objects_2x1.unwrap()(AT, AB)
            }

pub unsafe fn FLA_Check_adjacent_objects_1x2(AL: FLA_Obj, AR: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_adjacent_objects_1x2.unwrap()(AL, AR)
            }

pub unsafe fn FLA_Check_blocksize_value(b: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_blocksize_value.unwrap()(b)
            }

pub unsafe fn FLA_Check_blocksize_object(datatype: FLA_Datatype, bp: *mut fla_blocksize_t) -> FLA_Error {
                dyload_lib().FLA_Check_blocksize_object.unwrap()(datatype, bp)
            }

pub unsafe fn FLA_Check_file_descriptor(fd: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_file_descriptor.unwrap()(fd)
            }

pub unsafe fn FLA_Check_lseek_result(requested_offset: c_int, lseek_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_lseek_result.unwrap()(requested_offset, lseek_r_val)
            }

pub unsafe fn FLA_Check_close_result(close_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_close_result.unwrap()(close_r_val)
            }

pub unsafe fn FLA_Check_unlink_result(unlink_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_unlink_result.unwrap()(unlink_r_val)
            }

pub unsafe fn FLA_Check_read_result(requested_size: c_int, read_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_read_result.unwrap()(requested_size, read_r_val)
            }

pub unsafe fn FLA_Check_write_result(requested_size: c_int, write_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_write_result.unwrap()(requested_size, write_r_val)
            }

pub unsafe fn FLA_Check_valid_quadrant(quad: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Check_valid_quadrant.unwrap()(quad)
            }

pub unsafe fn FLA_Check_vector_dim_min(x: FLA_Obj, min_dim: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_vector_dim_min.unwrap()(x, min_dim)
            }

pub unsafe fn FLA_Check_pthread_create_result(pthread_create_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_pthread_create_result.unwrap()(pthread_create_r_val)
            }

pub unsafe fn FLA_Check_pthread_join_result(pthread_join_r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_pthread_join_result.unwrap()(pthread_join_r_val)
            }

pub unsafe fn FLA_Check_valid_isgn_value(isgn: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_valid_isgn_value.unwrap()(isgn)
            }

pub unsafe fn FLA_Check_sylv_matrix_dims(A: FLA_Obj, B: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_sylv_matrix_dims.unwrap()(A, B, C)
            }

pub unsafe fn FLA_Check_chol_failure(r_val: FLA_Error) -> FLA_Error {
                dyload_lib().FLA_Check_chol_failure.unwrap()(r_val)
            }

pub unsafe fn FLA_Check_valid_elemtype(elemtype: FLA_Elemtype) -> FLA_Error {
                dyload_lib().FLA_Check_valid_elemtype.unwrap()(elemtype)
            }

pub unsafe fn FLA_Check_posix_memalign_failure(r_val: c_int) -> FLA_Error {
                dyload_lib().FLA_Check_posix_memalign_failure.unwrap()(r_val)
            }

pub unsafe fn FLA_Check_submatrix_dims_and_offset(m: fla_dim_t, n: fla_dim_t, i: fla_dim_t, j: fla_dim_t, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_submatrix_dims_and_offset.unwrap()(m, n, i, j, A)
            }

pub unsafe fn FLA_Check_object_scalar_elemtype(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_object_scalar_elemtype.unwrap()(A)
            }

pub unsafe fn FLA_Check_object_matrix_elemtype(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_object_matrix_elemtype.unwrap()(A)
            }

pub unsafe fn FLA_Check_num_threads(n_threads: c_uint) -> FLA_Error {
                dyload_lib().FLA_Check_num_threads.unwrap()(n_threads)
            }

pub unsafe fn FLA_Check_conj_and_datatype(conj: FLA_Conj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_conj_and_datatype.unwrap()(conj, A)
            }

pub unsafe fn FLA_Check_valid_complex_trans(trans: FLA_Trans) -> FLA_Error {
                dyload_lib().FLA_Check_valid_complex_trans.unwrap()(trans)
            }

pub unsafe fn FLA_Check_valid_real_trans(trans: FLA_Trans) -> FLA_Error {
                dyload_lib().FLA_Check_valid_real_trans.unwrap()(trans)
            }

pub unsafe fn FLA_Check_valid_blas_trans(trans: FLA_Trans) -> FLA_Error {
                dyload_lib().FLA_Check_valid_blas_trans.unwrap()(trans)
            }

pub unsafe fn FLA_Check_nonconstant_datatype(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Check_nonconstant_datatype.unwrap()(datatype)
            }

pub unsafe fn FLA_Check_nonconstant_object(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_nonconstant_object.unwrap()(A)
            }

pub unsafe fn FLA_Check_identical_object_datatype(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_identical_object_datatype.unwrap()(A, B)
            }

pub unsafe fn FLA_Check_divide_by_zero(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_divide_by_zero.unwrap()(alpha)
            }

pub unsafe fn FLA_Check_identical_object_elemtype(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_identical_object_elemtype.unwrap()(A, B)
            }

pub unsafe fn FLA_Check_pivot_index_range(p: FLA_Obj, k1: fla_dim_t, k2: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_pivot_index_range.unwrap()(p, k1, k2)
            }

pub unsafe fn FLA_Check_householder_panel_dims(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_householder_panel_dims.unwrap()(A, T)
            }

pub unsafe fn FLA_Check_object_length_equals(A: FLA_Obj, m: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_object_length_equals.unwrap()(A, m)
            }

pub unsafe fn FLA_Check_object_width_equals(A: FLA_Obj, n: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_object_width_equals.unwrap()(A, n)
            }

pub unsafe fn FLA_Check_object_length_min(A: FLA_Obj, m: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_object_length_min.unwrap()(A, m)
            }

pub unsafe fn FLA_Check_object_width_min(A: FLA_Obj, n: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_object_width_min.unwrap()(A, n)
            }

pub unsafe fn FLA_Check_valid_error_level(level: c_uint) -> FLA_Error {
                dyload_lib().FLA_Check_valid_error_level.unwrap()(level)
            }

pub unsafe fn FLA_Check_attempted_repart_2x2(A_quad: FLA_Obj, b_m: fla_dim_t, b_n: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_attempted_repart_2x2.unwrap()(A_quad, b_m, b_n)
            }

pub unsafe fn FLA_Check_attempted_repart_2x1(A_side: FLA_Obj, b_m: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_attempted_repart_2x1.unwrap()(A_side, b_m)
            }

pub unsafe fn FLA_Check_attempted_repart_1x2(A_side: FLA_Obj, b_n: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_attempted_repart_1x2.unwrap()(A_side, b_n)
            }

pub unsafe fn FLA_Check_valid_leftright_side(side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Check_valid_leftright_side.unwrap()(side)
            }

pub unsafe fn FLA_Check_valid_topbottom_side(side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Check_valid_topbottom_side.unwrap()(side)
            }

pub unsafe fn FLA_Check_matrix_strides(m: fla_dim_t, n: fla_dim_t, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_matrix_strides.unwrap()(m, n, rs, cs)
            }

pub unsafe fn FLA_Check_vector_dim(x: FLA_Obj, expected_length: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Check_vector_dim.unwrap()(x, expected_length)
            }

pub unsafe fn FLA_Check_row_vector(x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_row_vector.unwrap()(x)
            }

pub unsafe fn FLA_Check_col_vector(x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_col_vector.unwrap()(x)
            }

pub unsafe fn FLA_Check_valid_machval(val: FLA_Machval) -> FLA_Error {
                dyload_lib().FLA_Check_valid_machval.unwrap()(val)
            }

pub unsafe fn FLA_Check_valid_diag_offset(A: FLA_Obj, offset: FLA_Diag_off) -> FLA_Error {
                dyload_lib().FLA_Check_valid_diag_offset.unwrap()(A, offset)
            }

pub unsafe fn FLA_Check_col_storage(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_col_storage.unwrap()(A)
            }

pub unsafe fn FLA_Check_row_storage(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Check_row_storage.unwrap()(A)
            }

pub unsafe fn FLA_Error_string_for_code(code: c_int) -> *mut c_char {
                dyload_lib().FLA_Error_string_for_code.unwrap()(code)
            }

pub unsafe fn FLA_Error_messages_init() {
                dyload_lib().FLA_Error_messages_init.unwrap()()
            }

pub unsafe fn FLA_Print_message(str_: *mut c_char, file: *mut c_char, line: c_int) {
                dyload_lib().FLA_Print_message.unwrap()(str_, file, line)
            }

pub unsafe fn FLA_Abort() {
                dyload_lib().FLA_Abort.unwrap()()
            }

pub unsafe fn FLA_Init() {
                dyload_lib().FLA_Init.unwrap()()
            }

pub unsafe fn FLA_Finalize() {
                dyload_lib().FLA_Finalize.unwrap()()
            }

pub unsafe fn FLA_Initialized() -> FLA_Bool {
                dyload_lib().FLA_Initialized.unwrap()()
            }

pub unsafe fn FLA_Init_safe(init_result: *mut FLA_Error) {
                dyload_lib().FLA_Init_safe.unwrap()(init_result)
            }

pub unsafe fn FLA_Finalize_safe(init_result: FLA_Error) {
                dyload_lib().FLA_Finalize_safe.unwrap()(init_result)
            }

pub unsafe fn FLA_Init_constants() {
                dyload_lib().FLA_Init_constants.unwrap()()
            }

pub unsafe fn FLA_Finalize_constants() {
                dyload_lib().FLA_Finalize_constants.unwrap()()
            }

pub unsafe fn FLA_Init_numerical_constants() {
                dyload_lib().FLA_Init_numerical_constants.unwrap()()
            }

pub unsafe fn FLA_Finalize_numerical_constants() {
                dyload_lib().FLA_Finalize_numerical_constants.unwrap()()
            }

pub unsafe fn FLA_Get_AOCL_Version() -> *mut c_char {
                dyload_lib().FLA_Get_AOCL_Version.unwrap()()
            }

pub unsafe fn FLA_Lock_init(fla_lock_ptr: *mut FLA_Lock) {
                dyload_lib().FLA_Lock_init.unwrap()(fla_lock_ptr)
            }

pub unsafe fn FLA_Lock_destroy(fla_lock_ptr: *mut FLA_Lock) {
                dyload_lib().FLA_Lock_destroy.unwrap()(fla_lock_ptr)
            }

pub unsafe fn FLA_Lock_acquire(fla_lock_ptr: *mut FLA_Lock) {
                dyload_lib().FLA_Lock_acquire.unwrap()(fla_lock_ptr)
            }

pub unsafe fn FLA_Lock_release(fla_lock_ptr: *mut FLA_Lock) {
                dyload_lib().FLA_Lock_release.unwrap()(fla_lock_ptr)
            }

pub unsafe fn FLA_Memory_leak_counter_init() {
                dyload_lib().FLA_Memory_leak_counter_init.unwrap()()
            }

pub unsafe fn FLA_Memory_leak_counter_finalize() {
                dyload_lib().FLA_Memory_leak_counter_finalize.unwrap()()
            }

pub unsafe fn FLA_Memory_leak_counter_status() -> FLA_Bool {
                dyload_lib().FLA_Memory_leak_counter_status.unwrap()()
            }

pub unsafe fn FLA_Memory_leak_counter_set(new_status: FLA_Bool) -> FLA_Bool {
                dyload_lib().FLA_Memory_leak_counter_set.unwrap()(new_status)
            }

pub unsafe fn FLA_malloc(size: usize) -> *mut c_void {
                dyload_lib().FLA_malloc.unwrap()(size)
            }

pub unsafe fn FLA_realloc(old_ptr: *mut c_void, size: usize) -> *mut c_void {
                dyload_lib().FLA_realloc.unwrap()(old_ptr, size)
            }

pub unsafe fn FLA_free(ptr: *mut c_void) {
                dyload_lib().FLA_free.unwrap()(ptr)
            }

pub unsafe fn FLA_Obj_copy_view(A: FLA_Obj, B: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_copy_view.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_extract_real_scalar(alpha: FLA_Obj, alpha_value: *mut f64) {
                dyload_lib().FLA_Obj_extract_real_scalar.unwrap()(alpha, alpha_value)
            }

pub unsafe fn FLA_Obj_extract_complex_scalar(alpha: FLA_Obj, alpha_value: *mut dcomplex) {
                dyload_lib().FLA_Obj_extract_complex_scalar.unwrap()(alpha, alpha_value)
            }

pub unsafe fn FLA_Obj_extract_real_part(alpha: FLA_Obj, beta: FLA_Obj) {
                dyload_lib().FLA_Obj_extract_real_part.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_extract_imag_part(alpha: FLA_Obj, beta: FLA_Obj) {
                dyload_lib().FLA_Obj_extract_imag_part.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_set_real_part(alpha: FLA_Obj, beta: FLA_Obj) {
                dyload_lib().FLA_Obj_set_real_part.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_set_imag_part(alpha: FLA_Obj, beta: FLA_Obj) {
                dyload_lib().FLA_Obj_set_imag_part.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_show(s1: *mut c_char, A: FLA_Obj, format: *mut c_char, s2: *mut c_char) -> FLA_Error {
                dyload_lib().FLA_Obj_show.unwrap()(s1, A, format, s2)
            }

pub unsafe fn FLA_Obj_fshow(file: *mut FILE, s1: *mut c_char, A: FLA_Obj, format: *mut c_char, s2: *mut c_char) -> FLA_Error {
                dyload_lib().FLA_Obj_fshow.unwrap()(file, s1, A, format, s2)
            }

pub unsafe fn FLA_Obj_copy_view_check(A: FLA_Obj, B: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_copy_view_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_extract_real_scalar_check(alpha: FLA_Obj, alpha_value: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Obj_extract_real_scalar_check.unwrap()(alpha, alpha_value)
            }

pub unsafe fn FLA_Obj_extract_complex_scalar_check(alpha: FLA_Obj, alpha_value: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Obj_extract_complex_scalar_check.unwrap()(alpha, alpha_value)
            }

pub unsafe fn FLA_Obj_extract_real_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_extract_real_part_check.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_extract_imag_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_extract_imag_part_check.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_set_real_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_set_real_part_check.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_set_imag_part_check(alpha: FLA_Obj, beta: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_set_imag_part_check.unwrap()(alpha, beta)
            }

pub unsafe fn FLA_Obj_show_check(s1: *mut c_char, obj: FLA_Obj, format: *mut c_char, s2: *mut c_char) -> FLA_Error {
                dyload_lib().FLA_Obj_show_check.unwrap()(s1, obj, format, s2)
            }

pub unsafe fn FLA_Obj_fshow_check(file: *mut FILE, s1: *mut c_char, obj: FLA_Obj, format: *mut c_char, s2: *mut c_char) -> FLA_Error {
                dyload_lib().FLA_Obj_fshow_check.unwrap()(file, s1, obj, format, s2)
            }

pub unsafe fn FLA_Copy_buffer_to_object(trans: FLA_Trans, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, i: fla_dim_t, j: fla_dim_t, obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copy_buffer_to_object.unwrap()(trans, m, n, buffer, rs, cs, i, j, obj)
            }

pub unsafe fn FLA_Copy_object_to_buffer(trans: FLA_Trans, i: fla_dim_t, j: fla_dim_t, obj: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Copy_object_to_buffer.unwrap()(trans, i, j, obj, m, n, buffer, rs, cs)
            }

pub unsafe fn FLA_Copy_buffer_to_object_check(trans: FLA_Trans, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, i: fla_dim_t, j: fla_dim_t, obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copy_buffer_to_object_check.unwrap()(trans, m, n, buffer, rs, cs, i, j, obj)
            }

pub unsafe fn FLA_Copy_object_to_buffer_check(trans: FLA_Trans, i: fla_dim_t, j: fla_dim_t, obj: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Copy_object_to_buffer_check.unwrap()(trans, i, j, obj, m, n, buffer, rs, cs)
            }

pub unsafe fn FLA_Axpy_buffer_to_object(trans: FLA_Trans, alpha: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, i: fla_dim_t, j: fla_dim_t, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpy_buffer_to_object.unwrap()(trans, alpha, m, n, buffer, rs, cs, i, j, C)
            }

pub unsafe fn FLA_Axpy_object_to_buffer(trans: FLA_Trans, alpha: FLA_Obj, i: fla_dim_t, j: fla_dim_t, C: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_object_to_buffer.unwrap()(trans, alpha, i, j, C, m, n, buffer, rs, cs)
            }

pub unsafe fn FLA_Axpy_buffer_to_object_check(trans: FLA_Trans, alpha: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, i: fla_dim_t, j: fla_dim_t, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpy_buffer_to_object_check.unwrap()(trans, alpha, m, n, buffer, rs, cs, i, j, C)
            }

pub unsafe fn FLA_Axpy_object_to_buffer_check(trans: FLA_Trans, alpha: FLA_Obj, i: fla_dim_t, j: fla_dim_t, C: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_object_to_buffer_check.unwrap()(trans, alpha, i, j, C, m, n, buffer, rs, cs)
            }

pub unsafe fn FLA_Obj_nullify(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_nullify.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_create(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create.unwrap()(datatype, m, n, rs, cs, obj)
            }

pub unsafe fn FLA_Obj_create_ext(datatype: FLA_Datatype, elemtype: FLA_Elemtype, m: fla_dim_t, n: fla_dim_t, m_inner: fla_dim_t, n_inner: fla_dim_t, rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_ext.unwrap()(datatype, elemtype, m, n, m_inner, n_inner, rs, cs, obj)
            }

pub unsafe fn FLA_Obj_create_conf_to(trans: FLA_Trans, old: FLA_Obj, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_conf_to.unwrap()(trans, old, obj)
            }

pub unsafe fn FLA_Obj_create_copy_of(trans: FLA_Trans, old: FLA_Obj, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_copy_of.unwrap()(trans, old, obj)
            }

pub unsafe fn FLA_Obj_create_without_buffer(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_without_buffer.unwrap()(datatype, m, n, obj)
            }

pub unsafe fn FLA_Obj_create_constant(const_real: f64, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_constant.unwrap()(const_real, obj)
            }

pub unsafe fn FLA_Obj_create_constant_ext(const_s: f32, const_d: f64, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_constant_ext.unwrap()(const_s, const_d, obj)
            }

pub unsafe fn FLA_Obj_create_complex_constant(const_real: f64, const_imag: f64, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_complex_constant.unwrap()(const_real, const_imag, obj)
            }

pub unsafe fn FLA_Obj_attach_buffer(buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_attach_buffer.unwrap()(buffer, rs, cs, obj)
            }

pub unsafe fn FLA_Obj_create_buffer(rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_buffer.unwrap()(rs, cs, obj)
            }

pub unsafe fn FLA_Obj_free(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_free.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_free_without_buffer(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_free_without_buffer.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_free_buffer(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_free_buffer.unwrap()(obj)
            }

pub unsafe fn FLA_align_ldim(ldim: fla_dim_t, elem_size: fla_dim_t) -> fla_dim_t {
                dyload_lib().FLA_align_ldim.unwrap()(ldim, elem_size)
            }

pub unsafe fn FLA_compute_num_elem(elem_size: fla_dim_t, m: fla_dim_t, n: fla_dim_t, rs: *mut fla_dim_t, cs: *mut fla_dim_t) -> fla_dim_t {
                dyload_lib().FLA_compute_num_elem.unwrap()(elem_size, m, n, rs, cs)
            }

pub unsafe fn FLA_adjust_strides(m: fla_dim_t, n: fla_dim_t, rs: *mut fla_dim_t, cs: *mut fla_dim_t) {
                dyload_lib().FLA_adjust_strides.unwrap()(m, n, rs, cs)
            }

pub unsafe fn FLA_Obj_flip_base(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_flip_base.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_flip_view(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_flip_view.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_create_ext_check(datatype: FLA_Datatype, elemtype: FLA_Elemtype, m: fla_dim_t, n: fla_dim_t, m_inner: fla_dim_t, n_inner: fla_dim_t, rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_ext_check.unwrap()(datatype, elemtype, m, n, m_inner, n_inner, rs, cs, obj)
            }

pub unsafe fn FLA_Obj_create_conf_to_check(trans: FLA_Trans, obj_old: FLA_Obj, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_conf_to_check.unwrap()(trans, obj_old, obj)
            }

pub unsafe fn FLA_Obj_create_without_buffer_check(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_without_buffer_check.unwrap()(datatype, m, n, obj)
            }

pub unsafe fn FLA_Obj_create_constant_check(const_real: f64, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_constant_check.unwrap()(const_real, obj)
            }

pub unsafe fn FLA_Obj_create_constant_ext_check(const_s: f32, const_d: f64, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_constant_ext_check.unwrap()(const_s, const_d, obj)
            }

pub unsafe fn FLA_Obj_create_complex_constant_check(const_real: f64, const_imag: f64, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_complex_constant_check.unwrap()(const_real, const_imag, obj)
            }

pub unsafe fn FLA_Obj_attach_buffer_check(buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_attach_buffer_check.unwrap()(buffer, rs, cs, obj)
            }

pub unsafe fn FLA_Obj_create_buffer_check(rs: fla_dim_t, cs: fla_dim_t, obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_create_buffer_check.unwrap()(rs, cs, obj)
            }

pub unsafe fn FLA_Obj_free_check(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_free_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_free_without_buffer_check(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_free_without_buffer_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_free_buffer_check(obj: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_free_buffer_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_create_buffer_task(rs: fla_dim_t, cs: fla_dim_t, obj: FLA_Obj, cntl: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Obj_create_buffer_task.unwrap()(rs, cs, obj, cntl)
            }

pub unsafe fn FLA_Obj_free_buffer_task(obj: FLA_Obj, cntl: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Obj_free_buffer_task.unwrap()(obj, cntl)
            }

pub unsafe fn FLA_Obj_datatype(obj: FLA_Obj) -> FLA_Datatype {
                dyload_lib().FLA_Obj_datatype.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_datatype_proj_to_real(A: FLA_Obj) -> FLA_Datatype {
                dyload_lib().FLA_Obj_datatype_proj_to_real.unwrap()(A)
            }

pub unsafe fn FLA_Obj_datatype_proj_to_complex(A: FLA_Obj) -> FLA_Datatype {
                dyload_lib().FLA_Obj_datatype_proj_to_complex.unwrap()(A)
            }

pub unsafe fn FLA_Obj_elemtype(obj: FLA_Obj) -> FLA_Elemtype {
                dyload_lib().FLA_Obj_elemtype.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_datatype_size(datatype: FLA_Datatype) -> fla_dim_t {
                dyload_lib().FLA_Obj_datatype_size.unwrap()(datatype)
            }

pub unsafe fn FLA_Obj_elem_size(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_elem_size.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_length(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_length.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_width(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_width.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_structure(obj: FLA_Obj) -> FLA_Uplo {
                dyload_lib().FLA_Obj_structure.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_vector_dim(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_vector_dim.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_vector_inc(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_vector_inc.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_min_dim(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_min_dim.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_max_dim(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_max_dim.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_row_stride(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_row_stride.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_col_stride(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_col_stride.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_row_offset(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_row_offset.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_col_offset(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_col_offset.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_base_length(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_base_length.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_base_width(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_base_width.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_num_elem_alloc(obj: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_Obj_num_elem_alloc.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_base_buffer(obj: FLA_Obj) -> *mut c_void {
                dyload_lib().FLA_Obj_base_buffer.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_buffer_at_view(obj: FLA_Obj) -> *mut c_void {
                dyload_lib().FLA_Obj_buffer_at_view.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_buffer_is_null(obj: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_buffer_is_null.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_is_int(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_int.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_floating_point(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_floating_point.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_constant(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_constant.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_real(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_real.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_complex(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_complex.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_single_precision(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_single_precision.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_double_precision(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_double_precision.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_scalar(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_scalar.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_vector(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_vector.unwrap()(A)
            }

pub unsafe fn FLA_Obj_has_zero_dim(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_has_zero_dim.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_row_major(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_row_major.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_col_major(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_col_major.unwrap()(A)
            }

pub unsafe fn FLA_Obj_is_conformal_to(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_conformal_to.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Obj_is(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_is_identical(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_identical.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_is_overlapped(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_is_overlapped.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_equals(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_equals.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_gt(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_gt.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_ge(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_ge.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_lt(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_lt.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_le(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_le.unwrap()(A, B)
            }

pub unsafe fn FLA_Submatrix_at(datatype: FLA_Datatype, buffer: *mut c_void, i: fla_dim_t, j: fla_dim_t, rs: fla_dim_t, cs: fla_dim_t) -> *mut c_void {
                dyload_lib().FLA_Submatrix_at.unwrap()(datatype, buffer, i, j, rs, cs)
            }

pub unsafe fn FLA_Obj_has_nan(A: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_has_nan.unwrap()(A)
            }

pub unsafe fn FLA_Obj_datatype_check(obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_datatype_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_datatype_proj_to_real_check(obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_datatype_proj_to_real_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_elemtype_check(obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_elemtype_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_datatype_size_check(datatype: FLA_Datatype) -> FLA_Error {
                dyload_lib().FLA_Obj_datatype_size_check.unwrap()(datatype)
            }

pub unsafe fn FLA_Obj_elem_size_check(obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_elem_size_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_buffer_at_view_check(obj: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_buffer_at_view_check.unwrap()(obj)
            }

pub unsafe fn FLA_Obj_equals_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_equals_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_gt_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_gt_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_ge_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_ge_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_lt_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_lt_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Obj_le_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Bool {
                dyload_lib().FLA_Obj_le_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Submatrix_at_check(datatype: FLA_Datatype, buffer: *mut c_void, i: fla_dim_t, j: fla_dim_t, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Submatrix_at_check.unwrap()(datatype, buffer, i, j, rs, cs)
            }

pub unsafe fn FLA_Obj_has_nan_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Obj_has_nan_check.unwrap()(A)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_trans(trans: FLA_Trans, blas_trans: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_trans.unwrap()(trans, blas_trans)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_uplo(uplo: FLA_Uplo, blas_uplo: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_uplo.unwrap()(uplo, blas_uplo)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_side(side: FLA_Uplo, blas_side: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_side.unwrap()(side, blas_side)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_diag(diag: FLA_Diag, blas_diag: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_diag.unwrap()(diag, blas_diag)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_direct(direct: FLA_Direct, lapack_direct: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_direct.unwrap()(direct, lapack_direct)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_storev(storev: FLA_Store, lapack_storev: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_storev.unwrap()(storev, lapack_storev)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_evd_type(evd_type: FLA_Evd_type, lapack_evd_type: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_evd_type.unwrap()(evd_type, lapack_evd_type)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_svd_type(svd_type: FLA_Svd_type, lapack_svd_type: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_svd_type.unwrap()(svd_type, lapack_svd_type)
            }

pub unsafe fn FLA_Param_map_flame_to_netlib_machval(machval: FLA_Machval, blas_machval: *mut c_void) {
                dyload_lib().FLA_Param_map_flame_to_netlib_machval.unwrap()(machval, blas_machval)
            }

pub unsafe fn FLA_Param_map_flame_to_blis_trans(trans: FLA_Trans, blis_trans: *mut trans1_t) {
                dyload_lib().FLA_Param_map_flame_to_blis_trans.unwrap()(trans, blis_trans)
            }

pub unsafe fn FLA_Param_map_flame_to_blis_conj(conj: FLA_Conj, blis_conj: *mut conj1_t) {
                dyload_lib().FLA_Param_map_flame_to_blis_conj.unwrap()(conj, blis_conj)
            }

pub unsafe fn FLA_Param_map_flame_to_blis_uplo(uplo: FLA_Uplo, blis_uplo: *mut uplo1_t) {
                dyload_lib().FLA_Param_map_flame_to_blis_uplo.unwrap()(uplo, blis_uplo)
            }

pub unsafe fn FLA_Param_map_flame_to_blis_side(side: FLA_Uplo, blis_side: *mut side1_t) {
                dyload_lib().FLA_Param_map_flame_to_blis_side.unwrap()(side, blis_side)
            }

pub unsafe fn FLA_Param_map_flame_to_blis_diag(diag: FLA_Diag, blis_diag: *mut diag1_t) {
                dyload_lib().FLA_Param_map_flame_to_blis_diag.unwrap()(diag, blis_diag)
            }

pub unsafe fn FLA_Param_map_blis_to_flame_trans(trans: trans1_t, flame_trans: *mut FLA_Trans) {
                dyload_lib().FLA_Param_map_blis_to_flame_trans.unwrap()(trans, flame_trans)
            }

pub unsafe fn FLA_Param_map_blis_to_flame_uplo(uplo: uplo1_t, flame_uplo: *mut FLA_Uplo) {
                dyload_lib().FLA_Param_map_blis_to_flame_uplo.unwrap()(uplo, flame_uplo)
            }

pub unsafe fn FLA_Param_map_blis_to_flame_side(side: side1_t, flame_side: *mut FLA_Side) {
                dyload_lib().FLA_Param_map_blis_to_flame_side.unwrap()(side, flame_side)
            }

pub unsafe fn FLA_Param_map_blis_to_flame_diag(diag: diag1_t, flame_diag: *mut FLA_Diag) {
                dyload_lib().FLA_Param_map_blis_to_flame_diag.unwrap()(diag, flame_diag)
            }

pub unsafe fn FLA_Param_map_char_to_flame_trans(trans: *mut c_char, flame_trans: *mut FLA_Trans) {
                dyload_lib().FLA_Param_map_char_to_flame_trans.unwrap()(trans, flame_trans)
            }

pub unsafe fn FLA_Param_map_char_to_flame_uplo(uplo: *mut c_char, flame_uplo: *mut FLA_Uplo) {
                dyload_lib().FLA_Param_map_char_to_flame_uplo.unwrap()(uplo, flame_uplo)
            }

pub unsafe fn FLA_Param_map_char_to_flame_side(side: *mut c_char, flame_side: *mut FLA_Side) {
                dyload_lib().FLA_Param_map_char_to_flame_side.unwrap()(side, flame_side)
            }

pub unsafe fn FLA_Param_map_char_to_flame_diag(diag: *mut c_char, flame_diag: *mut FLA_Diag) {
                dyload_lib().FLA_Param_map_char_to_flame_diag.unwrap()(diag, flame_diag)
            }

pub unsafe fn FLA_Param_map_char_to_flame_storev(storev: *mut c_char, flame_storev: *mut FLA_Direct) {
                dyload_lib().FLA_Param_map_char_to_flame_storev.unwrap()(storev, flame_storev)
            }

pub unsafe fn FLA_Param_map_char_to_flame_direct(direct: *mut c_char, flame_direct: *mut FLA_Direct) {
                dyload_lib().FLA_Param_map_char_to_flame_direct.unwrap()(direct, flame_direct)
            }

pub unsafe fn FLA_Param_map_char_to_flame_inv(inv: *mut c_char, flame_inv: *mut FLA_Inv) {
                dyload_lib().FLA_Param_map_char_to_flame_inv.unwrap()(inv, flame_inv)
            }

pub unsafe fn FLA_Param_map_netlib_to_flame_trans(trans: *mut c_char, flame_trans: *mut FLA_Trans) {
                dyload_lib().FLA_Param_map_netlib_to_flame_trans.unwrap()(trans, flame_trans)
            }

pub unsafe fn FLA_Param_map_netlib_to_flame_uplo(uplo: *mut c_char, flame_uplo: *mut FLA_Uplo) {
                dyload_lib().FLA_Param_map_netlib_to_flame_uplo.unwrap()(uplo, flame_uplo)
            }

pub unsafe fn FLA_Param_map_netlib_to_flame_side(side: *mut c_char, flame_side: *mut FLA_Side) {
                dyload_lib().FLA_Param_map_netlib_to_flame_side.unwrap()(side, flame_side)
            }

pub unsafe fn FLA_Param_map_netlib_to_flame_diag(diag: *mut c_char, flame_diag: *mut FLA_Diag) {
                dyload_lib().FLA_Param_map_netlib_to_flame_diag.unwrap()(diag, flame_diag)
            }

pub unsafe fn FLA_Param_map_netlib_to_flame_inv(itype: *mut c_int, flame_inv: *mut FLA_Inv) {
                dyload_lib().FLA_Param_map_netlib_to_flame_inv.unwrap()(itype, flame_inv)
            }

pub unsafe fn FLA_Param_map_netlib_to_flame_svd_type(svd: *mut c_char, flame_svd: *mut FLA_Svd_type) {
                dyload_lib().FLA_Param_map_netlib_to_flame_svd_type.unwrap()(svd, flame_svd)
            }

pub unsafe fn FLA_Part_2x2(A: FLA_Obj, A11: *mut FLA_Obj, A12: *mut FLA_Obj, A21: *mut FLA_Obj, A22: *mut FLA_Obj, mb: fla_dim_t, nb: fla_dim_t, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Part_2x2.unwrap()(A, A11, A12, A21, A22, mb, nb, quadrant)
            }

pub unsafe fn FLA_Part_2x1(A: FLA_Obj, A1: *mut FLA_Obj, A2: *mut FLA_Obj, mb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Part_2x1.unwrap()(A, A1, A2, mb, side)
            }

pub unsafe fn FLA_Part_1x2(A: FLA_Obj, A1: *mut FLA_Obj, A2: *mut FLA_Obj, nb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Part_1x2.unwrap()(A, A1, A2, nb, side)
            }

pub unsafe fn FLA_Merge_2x2(A11: FLA_Obj, A12: FLA_Obj, A21: FLA_Obj, A22: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Merge_2x2.unwrap()(A11, A12, A21, A22, A)
            }

pub unsafe fn FLA_Merge_2x1(AT: FLA_Obj, AB: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Merge_2x1.unwrap()(AT, AB, A)
            }

pub unsafe fn FLA_Merge_1x2(AL: FLA_Obj, AR: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Merge_1x2.unwrap()(AL, AR, A)
            }

pub unsafe fn FLA_Repart_2x2_to_3x3(ATL: FLA_Obj, ATR: FLA_Obj, A00: *mut FLA_Obj, A01: *mut FLA_Obj, A02: *mut FLA_Obj, A10: *mut FLA_Obj, A11: *mut FLA_Obj, A12: *mut FLA_Obj, ABL: FLA_Obj, ABR: FLA_Obj, A20: *mut FLA_Obj, A21: *mut FLA_Obj, A22: *mut FLA_Obj, mb: fla_dim_t, nb: fla_dim_t, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Repart_2x2_to_3x3.unwrap()(ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, mb, nb, quadrant)
            }

pub unsafe fn FLA_Repart_2x1_to_3x1(AT: FLA_Obj, A0: *mut FLA_Obj, A1: *mut FLA_Obj, AB: FLA_Obj, A2: *mut FLA_Obj, mb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Repart_2x1_to_3x1.unwrap()(AT, A0, A1, AB, A2, mb, side)
            }

pub unsafe fn FLA_Repart_1x2_to_1x3(AL: FLA_Obj, AR: FLA_Obj, A0: *mut FLA_Obj, A1: *mut FLA_Obj, A2: *mut FLA_Obj, nb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Repart_1x2_to_1x3.unwrap()(AL, AR, A0, A1, A2, nb, side)
            }

pub unsafe fn FLA_Cont_with_3x3_to_2x2(ATL: *mut FLA_Obj, ATR: *mut FLA_Obj, A00: FLA_Obj, A01: FLA_Obj, A02: FLA_Obj, A10: FLA_Obj, A11: FLA_Obj, A12: FLA_Obj, ABL: *mut FLA_Obj, ABR: *mut FLA_Obj, A20: FLA_Obj, A21: FLA_Obj, A22: FLA_Obj, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Cont_with_3x3_to_2x2.unwrap()(ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, quadrant)
            }

pub unsafe fn FLA_Cont_with_3x1_to_2x1(AT: *mut FLA_Obj, A0: FLA_Obj, A1: FLA_Obj, AB: *mut FLA_Obj, A2: FLA_Obj, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Cont_with_3x1_to_2x1.unwrap()(AT, A0, A1, AB, A2, side)
            }

pub unsafe fn FLA_Cont_with_1x3_to_1x2(AL: *mut FLA_Obj, AR: *mut FLA_Obj, A0: FLA_Obj, A1: FLA_Obj, A2: FLA_Obj, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Cont_with_1x3_to_1x2.unwrap()(AL, AR, A0, A1, A2, side)
            }

pub unsafe fn FLA_Repart_3x3_to_5x5(ATL: FLA_Obj, ATM: FLA_Obj, ATR: FLA_Obj, AML: FLA_Obj, AMM: FLA_Obj, AMR: FLA_Obj, ABL: FLA_Obj, ABM: FLA_Obj, ABR: FLA_Obj, A00: *mut FLA_Obj, A01: *mut FLA_Obj, A02: *mut FLA_Obj, A03: *mut FLA_Obj, A04: *mut FLA_Obj, A10: *mut FLA_Obj, A11: *mut FLA_Obj, A12: *mut FLA_Obj, A13: *mut FLA_Obj, A14: *mut FLA_Obj, A20: *mut FLA_Obj, A21: *mut FLA_Obj, A22: *mut FLA_Obj, A23: *mut FLA_Obj, A24: *mut FLA_Obj, A30: *mut FLA_Obj, A31: *mut FLA_Obj, A32: *mut FLA_Obj, A33: *mut FLA_Obj, A34: *mut FLA_Obj, A40: *mut FLA_Obj, A41: *mut FLA_Obj, A42: *mut FLA_Obj, A43: *mut FLA_Obj, A44: *mut FLA_Obj, b: fla_dim_t, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Repart_3x3_to_5x5.unwrap()(ATL, ATM, ATR, AML, AMM, AMR, ABL, ABM, ABR, A00, A01, A02, A03, A04, A10, A11, A12, A13, A14, A20, A21, A22, A23, A24, A30, A31, A32, A33, A34, A40, A41, A42, A43, A44, b, quadrant)
            }

pub unsafe fn FLA_Cont_with_5x5_to_3x3(ATL: *mut FLA_Obj, ATM: *mut FLA_Obj, ATR: *mut FLA_Obj, AML: *mut FLA_Obj, AMM: *mut FLA_Obj, AMR: *mut FLA_Obj, ABL: *mut FLA_Obj, ABM: *mut FLA_Obj, ABR: *mut FLA_Obj, A00: FLA_Obj, A01: FLA_Obj, A02: FLA_Obj, A03: FLA_Obj, A04: FLA_Obj, A10: FLA_Obj, A11: FLA_Obj, A12: FLA_Obj, A13: FLA_Obj, A14: FLA_Obj, A20: FLA_Obj, A21: FLA_Obj, A22: FLA_Obj, A23: FLA_Obj, A24: FLA_Obj, A30: FLA_Obj, A31: FLA_Obj, A32: FLA_Obj, A33: FLA_Obj, A34: FLA_Obj, A40: FLA_Obj, A41: FLA_Obj, A42: FLA_Obj, A43: FLA_Obj, A44: FLA_Obj, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Cont_with_5x5_to_3x3.unwrap()(ATL, ATM, ATR, AML, AMM, AMR, ABL, ABM, ABR, A00, A01, A02, A03, A04, A10, A11, A12, A13, A14, A20, A21, A22, A23, A24, A30, A31, A32, A33, A34, A40, A41, A42, A43, A44, quadrant)
            }

pub unsafe fn FLA_Part_2x2_check(A: FLA_Obj, A11: *mut FLA_Obj, A12: *mut FLA_Obj, A21: *mut FLA_Obj, A22: *mut FLA_Obj, mb: fla_dim_t, nb: fla_dim_t, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Part_2x2_check.unwrap()(A, A11, A12, A21, A22, mb, nb, quadrant)
            }

pub unsafe fn FLA_Part_2x1_check(A: FLA_Obj, A1: *mut FLA_Obj, A2: *mut FLA_Obj, mb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Part_2x1_check.unwrap()(A, A1, A2, mb, side)
            }

pub unsafe fn FLA_Part_1x2_check(A: FLA_Obj, A1: *mut FLA_Obj, A2: *mut FLA_Obj, nb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Part_1x2_check.unwrap()(A, A1, A2, nb, side)
            }

pub unsafe fn FLA_Merge_2x2_check(A11: FLA_Obj, A12: FLA_Obj, A21: FLA_Obj, A22: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Merge_2x2_check.unwrap()(A11, A12, A21, A22, A)
            }

pub unsafe fn FLA_Merge_2x1_check(AT: FLA_Obj, AB: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Merge_2x1_check.unwrap()(AT, AB, A)
            }

pub unsafe fn FLA_Merge_1x2_check(AL: FLA_Obj, AR: FLA_Obj, A: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Merge_1x2_check.unwrap()(AL, AR, A)
            }

pub unsafe fn FLA_Repart_2x2_to_3x3_check(ATL: FLA_Obj, ATR: FLA_Obj, A00: *mut FLA_Obj, A01: *mut FLA_Obj, A02: *mut FLA_Obj, A10: *mut FLA_Obj, A11: *mut FLA_Obj, A12: *mut FLA_Obj, ABL: FLA_Obj, ABR: FLA_Obj, A20: *mut FLA_Obj, A21: *mut FLA_Obj, A22: *mut FLA_Obj, mb: fla_dim_t, nb: fla_dim_t, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Repart_2x2_to_3x3_check.unwrap()(ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, mb, nb, quadrant)
            }

pub unsafe fn FLA_Repart_2x1_to_3x1_check(AT: FLA_Obj, A0: *mut FLA_Obj, A1: *mut FLA_Obj, AB: FLA_Obj, A2: *mut FLA_Obj, mb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Repart_2x1_to_3x1_check.unwrap()(AT, A0, A1, AB, A2, mb, side)
            }

pub unsafe fn FLA_Repart_1x2_to_1x3_check(AL: FLA_Obj, AR: FLA_Obj, A0: *mut FLA_Obj, A1: *mut FLA_Obj, A2: *mut FLA_Obj, nb: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Repart_1x2_to_1x3_check.unwrap()(AL, AR, A0, A1, A2, nb, side)
            }

pub unsafe fn FLA_Cont_with_3x3_to_2x2_check(ATL: *mut FLA_Obj, ATR: *mut FLA_Obj, A00: FLA_Obj, A01: FLA_Obj, A02: FLA_Obj, A10: FLA_Obj, A11: FLA_Obj, A12: FLA_Obj, ABL: *mut FLA_Obj, ABR: *mut FLA_Obj, A20: FLA_Obj, A21: FLA_Obj, A22: FLA_Obj, quadrant: FLA_Quadrant) -> FLA_Error {
                dyload_lib().FLA_Cont_with_3x3_to_2x2_check.unwrap()(ATL, ATR, A00, A01, A02, A10, A11, A12, ABL, ABR, A20, A21, A22, quadrant)
            }

pub unsafe fn FLA_Cont_with_3x1_to_2x1_check(AT: *mut FLA_Obj, A0: FLA_Obj, A1: FLA_Obj, AB: *mut FLA_Obj, A2: FLA_Obj, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Cont_with_3x1_to_2x1_check.unwrap()(AT, A0, A1, AB, A2, side)
            }

pub unsafe fn FLA_Cont_with_1x3_to_1x2_check(AL: *mut FLA_Obj, AR: *mut FLA_Obj, A0: FLA_Obj, A1: FLA_Obj, A2: FLA_Obj, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLA_Cont_with_1x3_to_1x2_check.unwrap()(AL, AR, A0, A1, A2, side)
            }

pub unsafe fn FLA_random_float() -> f32 {
                dyload_lib().FLA_random_float.unwrap()()
            }

pub unsafe fn FLA_random_double() -> f64 {
                dyload_lib().FLA_random_double.unwrap()()
            }

pub unsafe fn FLA_random_scomplex() -> scomplex {
                dyload_lib().FLA_random_scomplex.unwrap()()
            }

pub unsafe fn FLA_random_dcomplex() -> dcomplex {
                dyload_lib().FLA_random_dcomplex.unwrap()()
            }

pub unsafe fn FLA_Absolute_square(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Absolute_square.unwrap()(alpha)
            }

pub unsafe fn FLA_Absolute_value(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Absolute_value.unwrap()(alpha)
            }

pub unsafe fn FLA_Clock() -> f64 {
                dyload_lib().FLA_Clock.unwrap()()
            }

pub unsafe fn FLA_Conjugate(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Conjugate.unwrap()(A)
            }

pub unsafe fn FLA_Conjugate_r(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Conjugate_r.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Fill_with_linear_dist(shift: FLA_Obj, delta: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_linear_dist.unwrap()(shift, delta, x)
            }

pub unsafe fn FLA_Fill_with_inverse_dist(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_inverse_dist.unwrap()(alpha, x)
            }

pub unsafe fn FLA_Fill_with_geometric_dist(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_geometric_dist.unwrap()(alpha, x)
            }

pub unsafe fn FLA_Fill_with_random_dist(shift: FLA_Obj, max: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_random_dist.unwrap()(shift, max, x)
            }

pub unsafe fn FLA_Fill_with_logarithmic_dist(max: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_logarithmic_dist.unwrap()(max, x)
            }

pub unsafe fn FLA_Fill_with_cluster_dist(n_clusters: FLA_Obj, cluster_width: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_cluster_dist.unwrap()(n_clusters, cluster_width, x)
            }

pub unsafe fn FLA_Hermitianize(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hermitianize.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Invert(conj: FLA_Conj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Invert.unwrap()(conj, x)
            }

pub unsafe fn FLA_Inv_scal_elemwise(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scal_elemwise.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Max_abs_value(A: FLA_Obj, amax: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Max_abs_value.unwrap()(A, amax)
            }

pub unsafe fn FLA_Max_abs_value_herm(uplo: FLA_Uplo, A: FLA_Obj, maxabs: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Max_abs_value_herm.unwrap()(uplo, A, maxabs)
            }

pub unsafe fn FLA_Max_elemwise_diff(A: FLA_Obj, B: FLA_Obj) -> f64 {
                dyload_lib().FLA_Max_elemwise_diff.unwrap()(A, B)
            }

pub unsafe fn FLA_Mult_add(alpha: FLA_Obj, beta: FLA_Obj, gamma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Mult_add.unwrap()(alpha, beta, gamma)
            }

pub unsafe fn FLA_Negate(x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Negate.unwrap()(x)
            }

pub unsafe fn FLA_Norm1(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm1.unwrap()(A, norm)
            }

pub unsafe fn FLA_Norm_inf(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm_inf.unwrap()(A, norm)
            }

pub unsafe fn FLA_Norm_frob(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm_frob.unwrap()(A, norm)
            }

pub unsafe fn FLA_Pow(base: FLA_Obj, exp: FLA_Obj, btoe: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Pow.unwrap()(base, exp, btoe)
            }

pub unsafe fn FLA_Random_matrix(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_matrix.unwrap()(A)
            }

pub unsafe fn FLA_Random_herm_matrix(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_herm_matrix.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Random_symm_matrix(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_symm_matrix.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Random_spd_matrix(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_spd_matrix.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Random_tri_matrix(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_tri_matrix.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Random_unitary_matrix(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_unitary_matrix.unwrap()(A)
            }

pub unsafe fn FLA_Scal_elemwise(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scal_elemwise.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Setr(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Setr.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Shift_pivots_to_check(ptype: FLA_Pivot_type, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Shift_pivots_to_check.unwrap()(ptype, p)
            }

pub unsafe fn FLA_Sqrt(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sqrt.unwrap()(alpha)
            }

pub unsafe fn FLA_Symmetrize(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symmetrize.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Triangularize(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Triangularize.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Transpose(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Transpose.unwrap()(A)
            }

pub unsafe fn FLA_Set(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Set_diag(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_diag.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Set_offdiag(offset: integer, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_offdiag.unwrap()(offset, alpha, A)
            }

pub unsafe fn FLA_Set_to_identity(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_to_identity.unwrap()(A)
            }

pub unsafe fn FLA_Add_to_diag(diag_value: *mut c_void, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Add_to_diag.unwrap()(diag_value, A)
            }

pub unsafe fn FLA_Shift_diag(conj: FLA_Conj, sigma: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Shift_diag.unwrap()(conj, sigma, A)
            }

pub unsafe fn FLA_Scale_diag(conj: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scale_diag.unwrap()(conj, alpha, A)
            }

pub unsafe fn FLA_Set_diagonal_vector(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_diagonal_vector.unwrap()(A, d)
            }

pub unsafe fn FLA_Set_diagonal_matrix(d: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_diagonal_matrix.unwrap()(d, A)
            }

pub unsafe fn FLA_Absolute_square_check(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Absolute_square_check.unwrap()(alpha)
            }

pub unsafe fn FLA_Absolute_value_check(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Absolute_value_check.unwrap()(alpha)
            }

pub unsafe fn FLA_Conjugate_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Conjugate_check.unwrap()(A)
            }

pub unsafe fn FLA_Conjugate_r_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Conjugate_r_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Fill_with_linear_dist_check(shift: FLA_Obj, delta: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_linear_dist_check.unwrap()(shift, delta, x)
            }

pub unsafe fn FLA_Fill_with_inverse_dist_check(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_inverse_dist_check.unwrap()(alpha, x)
            }

pub unsafe fn FLA_Fill_with_geometric_dist_check(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_geometric_dist_check.unwrap()(alpha, x)
            }

pub unsafe fn FLA_Fill_with_random_dist_check(shift: FLA_Obj, max: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_random_dist_check.unwrap()(shift, max, x)
            }

pub unsafe fn FLA_Fill_with_logarithmic_dist_check(alpha: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_logarithmic_dist_check.unwrap()(alpha, x)
            }

pub unsafe fn FLA_Fill_with_cluster_dist_check(n_clusters: FLA_Obj, cluster_width: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fill_with_cluster_dist_check.unwrap()(n_clusters, cluster_width, x)
            }

pub unsafe fn FLA_Hermitianize_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hermitianize_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Invert_check(conj: FLA_Conj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Invert_check.unwrap()(conj, x)
            }

pub unsafe fn FLA_Inv_scal_elemwise_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scal_elemwise_check.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Max_abs_value_check(A: FLA_Obj, amax: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Max_abs_value_check.unwrap()(A, amax)
            }

pub unsafe fn FLA_Max_abs_value_herm_check(uplo: FLA_Uplo, A: FLA_Obj, maxabs: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Max_abs_value_herm_check.unwrap()(uplo, A, maxabs)
            }

pub unsafe fn FLA_Max_elemwise_diff_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Max_elemwise_diff_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Mult_add_check(alpha: FLA_Obj, beta: FLA_Obj, gamma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Mult_add_check.unwrap()(alpha, beta, gamma)
            }

pub unsafe fn FLA_Negate_check(x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Negate_check.unwrap()(x)
            }

pub unsafe fn FLA_Norm1_check(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm1_check.unwrap()(A, norm)
            }

pub unsafe fn FLA_Norm_inf_check(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm_inf_check.unwrap()(A, norm)
            }

pub unsafe fn FLA_Norm_frob_check(A: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm_frob_check.unwrap()(A, norm)
            }

pub unsafe fn FLA_Pow_check(base: FLA_Obj, exp: FLA_Obj, btoe: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Pow_check.unwrap()(base, exp, btoe)
            }

pub unsafe fn FLA_Random_matrix_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_matrix_check.unwrap()(A)
            }

pub unsafe fn FLA_Random_herm_matrix_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_herm_matrix_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Random_symm_matrix_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_symm_matrix_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Random_spd_matrix_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_spd_matrix_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Random_tri_matrix_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_tri_matrix_check.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Random_unitary_matrix_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Random_unitary_matrix_check.unwrap()(A)
            }

pub unsafe fn FLA_Scal_elemwise_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scal_elemwise_check.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Setr_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Setr_check.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Sort_check(direct: FLA_Direct, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort_check.unwrap()(direct, x)
            }

pub unsafe fn FLA_Sqrt_check(alpha: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sqrt_check.unwrap()(alpha)
            }

pub unsafe fn FLA_Symmetrize_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symmetrize_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Triangularize_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Triangularize_check.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Transpose_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Transpose_check.unwrap()(A)
            }

pub unsafe fn FLA_Set_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_check.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Set_diag_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_diag_check.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Set_to_identity_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Set_to_identity_check.unwrap()(A)
            }

pub unsafe fn FLA_Add_to_diag_check(diag_value: *mut c_void, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Add_to_diag_check.unwrap()(diag_value, A)
            }

pub unsafe fn FLA_Shift_diag_check(conj: FLA_Conj, sigma: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Shift_diag_check.unwrap()(conj, sigma, A)
            }

pub unsafe fn FLA_Scale_diag_check(conj: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scale_diag_check.unwrap()(conj, alpha, A)
            }

pub unsafe fn FLA_Transpose_blk_var1(A: FLA_Obj, cntl: *mut fla_tpose_t) -> FLA_Error {
                dyload_lib().FLA_Transpose_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Transpose_blk_var2(A: FLA_Obj, cntl: *mut fla_tpose_t) -> FLA_Error {
                dyload_lib().FLA_Transpose_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Transpose_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Transpose_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Transpose_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Transpose_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Swap_t_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_swap_t) -> FLA_Error {
                dyload_lib().FLA_Swap_t_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Swap_t_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_swap_t) -> FLA_Error {
                dyload_lib().FLA_Swap_t_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Sort(direct: FLA_Direct, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort.unwrap()(direct, x)
            }

pub unsafe fn FLA_Sort_f_ops(m_x: integer, x: *mut f32, inc_x: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_f_ops.unwrap()(m_x, x, inc_x)
            }

pub unsafe fn FLA_Sort_b_ops(m_x: integer, x: *mut f32, inc_x: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_b_ops.unwrap()(m_x, x, inc_x)
            }

pub unsafe fn FLA_Sort_f_opd(m_x: integer, x: *mut f64, inc_x: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_f_opd.unwrap()(m_x, x, inc_x)
            }

pub unsafe fn FLA_Sort_b_opd(m_x: integer, x: *mut f64, inc_x: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_b_opd.unwrap()(m_x, x, inc_x)
            }

pub unsafe fn FLA_Househ2_UT(side: FLA_Side, chi_1: FLA_Obj, x2: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT.unwrap()(side, chi_1, x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_l_ops(m_x2: integer, chi_1: *mut f32, x2: *mut f32, inc_x2: integer, tau: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_l_ops.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_l_opd(m_x2: integer, chi_1: *mut f64, x2: *mut f64, inc_x2: integer, tau: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_l_opd.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_l_opc(m_x2: integer, chi_1: *mut scomplex, x2: *mut scomplex, inc_x2: integer, tau: *mut scomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_l_opc.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_l_opz(m_x2: integer, chi_1: *mut dcomplex, x2: *mut dcomplex, inc_x2: integer, tau: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_l_opz.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_r_ops(m_x2: integer, chi_1: *mut f32, x2: *mut f32, inc_x2: integer, tau: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_r_ops.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_r_opd(m_x2: integer, chi_1: *mut f64, x2: *mut f64, inc_x2: integer, tau: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_r_opd.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_r_opc(m_x2: integer, chi_1: *mut scomplex, x2: *mut scomplex, inc_x2: integer, tau: *mut scomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_r_opc.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ2_UT_r_opz(m_x2: integer, chi_1: *mut dcomplex, x2: *mut dcomplex, inc_x2: integer, tau: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_r_opz.unwrap()(m_x2, chi_1, x2, inc_x2, tau)
            }

pub unsafe fn FLA_Househ3UD_UT(chi_1: FLA_Obj, x2: FLA_Obj, y2: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Househ3UD_UT.unwrap()(chi_1, x2, y2, tau)
            }

pub unsafe fn FLA_Househ3UD_UT_ops(m_x2: integer, m_y2: integer, chi_1: *mut f32, x2: *mut f32, inc_x2: integer, y2: *mut f32, inc_y2: integer, tau: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Househ3UD_UT_ops.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
            }

pub unsafe fn FLA_Househ3UD_UT_opd(m_x2: integer, m_y2: integer, chi_1: *mut f64, x2: *mut f64, inc_x2: integer, y2: *mut f64, inc_y2: integer, tau: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Househ3UD_UT_opd.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
            }

pub unsafe fn FLA_Househ3UD_UT_opc(m_x2: integer, m_y2: integer, chi_1: *mut scomplex, x2: *mut scomplex, inc_x2: integer, y2: *mut scomplex, inc_y2: integer, tau: *mut scomplex) -> FLA_Error {
                dyload_lib().FLA_Househ3UD_UT_opc.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
            }

pub unsafe fn FLA_Househ3UD_UT_opz(m_x2: integer, m_y2: integer, chi_1: *mut dcomplex, x2: *mut dcomplex, inc_x2: integer, y2: *mut dcomplex, inc_y2: integer, tau: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Househ3UD_UT_opz.unwrap()(m_x2, m_y2, chi_1, x2, inc_x2, y2, inc_y2, tau)
            }

pub unsafe fn FLA_Househ2s_UT(side: FLA_Side, chi_1: FLA_Obj, x2: FLA_Obj, alpha: FLA_Obj, chi_1_minus_alpha: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT.unwrap()(side, chi_1, x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_l_ops(m_x2: integer, chi_1: *mut f32, x2: *mut f32, inc_x2: integer, alpha: *mut f32, chi_1_minus_alpha: *mut f32, tau: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_l_ops.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_l_opd(m_x2: integer, chi_1: *mut f64, x2: *mut f64, inc_x2: integer, alpha: *mut f64, chi_1_minus_alpha: *mut f64, tau: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_l_opd.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_l_opc(m_x2: integer, chi_1: *mut scomplex, x2: *mut scomplex, inc_x2: integer, alpha: *mut scomplex, chi_1_minus_alpha: *mut scomplex, tau: *mut scomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_l_opc.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_l_opz(m_x2: integer, chi_1: *mut dcomplex, x2: *mut dcomplex, inc_x2: integer, alpha: *mut dcomplex, chi_1_minus_alpha: *mut dcomplex, tau: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_l_opz.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_r_ops(m_x2: integer, chi_1: *mut f32, x2: *mut f32, inc_x2: integer, alpha: *mut f32, chi_1_minus_alpha: *mut f32, tau: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_r_ops.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_r_opd(m_x2: integer, chi_1: *mut f64, x2: *mut f64, inc_x2: integer, alpha: *mut f64, chi_1_minus_alpha: *mut f64, tau: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_r_opd.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_r_opc(m_x2: integer, chi_1: *mut scomplex, x2: *mut scomplex, inc_x2: integer, alpha: *mut scomplex, chi_1_minus_alpha: *mut scomplex, tau: *mut scomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_r_opc.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Househ2s_UT_r_opz(m_x2: integer, chi_1: *mut dcomplex, x2: *mut dcomplex, inc_x2: integer, alpha: *mut dcomplex, chi_1_minus_alpha: *mut dcomplex, tau: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_r_opz.unwrap()(m_x2, chi_1, x2, inc_x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Hev_2x2(alpha11: FLA_Obj, alpha21: FLA_Obj, alpha22: FLA_Obj, lambda1: FLA_Obj, lambda2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hev_2x2.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2)
            }

pub unsafe fn FLA_Hev_2x2_ops(buff_alpha11: *mut f32, buff_alpha21: *mut f32, buff_alpha22: *mut f32, buff_lambda1: *mut f32, buff_lambda2: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Hev_2x2_ops.unwrap()(buff_alpha11, buff_alpha21, buff_alpha22, buff_lambda1, buff_lambda2)
            }

pub unsafe fn FLA_Hev_2x2_opd(buff_alpha11: *mut f64, buff_alpha21: *mut f64, buff_alpha22: *mut f64, buff_lambda1: *mut f64, buff_lambda2: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Hev_2x2_opd.unwrap()(buff_alpha11, buff_alpha21, buff_alpha22, buff_lambda1, buff_lambda2)
            }

pub unsafe fn FLA_Hevv_2x2(alpha11: FLA_Obj, alpha21: FLA_Obj, alpha22: FLA_Obj, lambda1: FLA_Obj, lambda2: FLA_Obj, gamma1: FLA_Obj, sigma1: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevv_2x2.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1)
            }

pub unsafe fn FLA_Hevv_2x2_ops(alpha11: *mut f32, alpha21: *mut f32, alpha22: *mut f32, lambda1: *mut f32, lambda2: *mut f32, gamma1: *mut f32, sigma1: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Hevv_2x2_ops.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1)
            }

pub unsafe fn FLA_Hevv_2x2_opd(alpha11: *mut f64, alpha21: *mut f64, alpha22: *mut f64, lambda1: *mut f64, lambda2: *mut f64, gamma1: *mut f64, sigma1: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Hevv_2x2_opd.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1)
            }

pub unsafe fn FLA_Hevv_2x2_opc(alpha11: *mut scomplex, alpha21: *mut scomplex, alpha22: *mut scomplex, lambda1: *mut f32, lambda2: *mut f32, gamma1: *mut f32, sigma1: *mut scomplex) -> FLA_Error {
                dyload_lib().FLA_Hevv_2x2_opc.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1)
            }

pub unsafe fn FLA_Hevv_2x2_opz(alpha11: *mut dcomplex, alpha21: *mut dcomplex, alpha22: *mut dcomplex, lambda1: *mut f64, lambda2: *mut f64, gamma1: *mut f64, sigma1: *mut dcomplex) -> FLA_Error {
                dyload_lib().FLA_Hevv_2x2_opz.unwrap()(alpha11, alpha21, alpha22, lambda1, lambda2, gamma1, sigma1)
            }

pub unsafe fn FLA_Wilkshift_tridiag(delta1: FLA_Obj, epsilon: FLA_Obj, delta2: FLA_Obj, kappa: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Wilkshift_tridiag.unwrap()(delta1, epsilon, delta2, kappa)
            }

pub unsafe fn FLA_Wilkshift_tridiag_ops(delta1: f32, epsilon: f32, delta2: f32, kappa: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Wilkshift_tridiag_ops.unwrap()(delta1, epsilon, delta2, kappa)
            }

pub unsafe fn FLA_Wilkshift_tridiag_opd(delta1: f64, epsilon: f64, delta2: f64, kappa: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Wilkshift_tridiag_opd.unwrap()(delta1, epsilon, delta2, kappa)
            }

pub unsafe fn FLA_Pythag2(chi: FLA_Obj, psi: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Pythag2.unwrap()(chi, psi, rho)
            }

pub unsafe fn FLA_Pythag2_ops(chi: *mut f32, psi: *mut f32, rho: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Pythag2_ops.unwrap()(chi, psi, rho)
            }

pub unsafe fn FLA_Pythag2_opd(chi: *mut f64, psi: *mut f64, rho: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Pythag2_opd.unwrap()(chi, psi, rho)
            }

pub unsafe fn FLA_Pythag3(chi: FLA_Obj, psi: FLA_Obj, zeta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Pythag3.unwrap()(chi, psi, zeta, rho)
            }

pub unsafe fn FLA_Pythag3_ops(chi: *mut f32, psi: *mut f32, zeta: *mut f32, rho: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Pythag3_ops.unwrap()(chi, psi, zeta, rho)
            }

pub unsafe fn FLA_Pythag3_opd(chi: *mut f64, psi: *mut f64, zeta: *mut f64, rho: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Pythag3_opd.unwrap()(chi, psi, zeta, rho)
            }

pub unsafe fn FLA_Sort_evd(direct: FLA_Direct, l: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort_evd.unwrap()(direct, l, V)
            }

pub unsafe fn FLA_Sort_evd_f_ops(m_A: integer, l: *mut f32, inc_l: integer, V: *mut f32, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_f_ops.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_b_ops(m_A: integer, l: *mut f32, inc_l: integer, V: *mut f32, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_b_ops.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_f_opd(m_A: integer, l: *mut f64, inc_l: integer, V: *mut f64, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_f_opd.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_b_opd(m_A: integer, l: *mut f64, inc_l: integer, V: *mut f64, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_b_opd.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_f_opc(m_A: integer, l: *mut f32, inc_l: integer, V: *mut scomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_f_opc.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_b_opc(m_A: integer, l: *mut f32, inc_l: integer, V: *mut scomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_b_opc.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_f_opz(m_A: integer, l: *mut f64, inc_l: integer, V: *mut dcomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_f_opz.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_evd_b_opz(m_A: integer, l: *mut f64, inc_l: integer, V: *mut dcomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_b_opz.unwrap()(m_A, l, inc_l, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_bsvd_ext(direct: FLA_Direct, s: FLA_Obj, apply_U: FLA_Bool, U: FLA_Obj, apply_V: FLA_Bool, V: FLA_Obj, apply_C: FLA_Bool, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext.unwrap()(direct, s, apply_U, U, apply_V, V, apply_C, C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_f_ops(m_s: integer, s: *mut f32, inc_s: integer, m_U: integer, U: *mut f32, rs_U: integer, cs_U: integer, m_V: integer, V: *mut f32, rs_V: integer, cs_V: integer, n_C: integer, C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_f_ops.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_b_ops(m_s: integer, s: *mut f32, inc_s: integer, m_U: integer, U: *mut f32, rs_U: integer, cs_U: integer, m_V: integer, V: *mut f32, rs_V: integer, cs_V: integer, n_C: integer, C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_b_ops.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_f_opd(m_s: integer, s: *mut f64, inc_s: integer, m_U: integer, U: *mut f64, rs_U: integer, cs_U: integer, m_V: integer, V: *mut f64, rs_V: integer, cs_V: integer, n_C: integer, C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_f_opd.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_b_opd(m_s: integer, s: *mut f64, inc_s: integer, m_U: integer, U: *mut f64, rs_U: integer, cs_U: integer, m_V: integer, V: *mut f64, rs_V: integer, cs_V: integer, n_C: integer, C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_b_opd.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_f_opc(m_s: integer, s: *mut f32, inc_s: integer, m_U: integer, U: *mut scomplex, rs_U: integer, cs_U: integer, m_V: integer, V: *mut scomplex, rs_V: integer, cs_V: integer, n_C: integer, C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_f_opc.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_b_opc(m_s: integer, s: *mut f32, inc_s: integer, m_U: integer, U: *mut scomplex, rs_U: integer, cs_U: integer, m_V: integer, V: *mut scomplex, rs_V: integer, cs_V: integer, n_C: integer, C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_b_opc.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_f_opz(m_s: integer, s: *mut f64, inc_s: integer, m_U: integer, U: *mut dcomplex, rs_U: integer, cs_U: integer, m_V: integer, V: *mut dcomplex, rs_V: integer, cs_V: integer, n_C: integer, C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_f_opz.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_bsvd_ext_b_opz(m_s: integer, s: *mut f64, inc_s: integer, m_U: integer, U: *mut dcomplex, rs_U: integer, cs_U: integer, m_V: integer, V: *mut dcomplex, rs_V: integer, cs_V: integer, n_C: integer, C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_bsvd_ext_b_opz.unwrap()(m_s, s, inc_s, m_U, U, rs_U, cs_U, m_V, V, rs_V, cs_V, n_C, C, rs_C, cs_C)
            }

pub unsafe fn FLA_Sort_svd(direct: FLA_Direct, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort_svd.unwrap()(direct, s, U, V)
            }

pub unsafe fn FLA_Sort_svd_f_ops(m_U: integer, n_V: integer, s: *mut f32, inc_s: integer, U: *mut f32, rs_U: integer, cs_U: integer, V: *mut f32, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_f_ops.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_b_ops(m_U: integer, n_V: integer, s: *mut f32, inc_s: integer, U: *mut f32, rs_U: integer, cs_U: integer, V: *mut f32, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_b_ops.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_f_opd(m_U: integer, n_V: integer, s: *mut f64, inc_s: integer, U: *mut f64, rs_U: integer, cs_U: integer, V: *mut f64, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_f_opd.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_b_opd(m_U: integer, n_V: integer, s: *mut f64, inc_s: integer, U: *mut f64, rs_U: integer, cs_U: integer, V: *mut f64, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_b_opd.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_f_opc(m_U: integer, n_V: integer, s: *mut f32, inc_s: integer, U: *mut scomplex, rs_U: integer, cs_U: integer, V: *mut scomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_f_opc.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_b_opc(m_U: integer, n_V: integer, s: *mut f32, inc_s: integer, U: *mut scomplex, rs_U: integer, cs_U: integer, V: *mut scomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_b_opc.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_f_opz(m_U: integer, n_V: integer, s: *mut f64, inc_s: integer, U: *mut dcomplex, rs_U: integer, cs_U: integer, V: *mut dcomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_f_opz.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sort_svd_b_opz(m_U: integer, n_V: integer, s: *mut f64, inc_s: integer, U: *mut dcomplex, rs_U: integer, cs_U: integer, V: *mut dcomplex, rs_V: integer, cs_V: integer) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_b_opz.unwrap()(m_U, n_V, s, inc_s, U, rs_U, cs_U, V, rs_V, cs_V)
            }

pub unsafe fn FLA_Sv_2x2(alpha11: FLA_Obj, alpha12: FLA_Obj, alpha22: FLA_Obj, sigma1: FLA_Obj, sigma2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sv_2x2.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2)
            }

pub unsafe fn FLA_Sv_2x2_ops(alpha11: *mut f32, alpha12: *mut f32, alpha22: *mut f32, sigma1: *mut f32, sigma2: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Sv_2x2_ops.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2)
            }

pub unsafe fn FLA_Sv_2x2_opd(alpha11: *mut f64, alpha12: *mut f64, alpha22: *mut f64, sigma1: *mut f64, sigma2: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Sv_2x2_opd.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2)
            }

pub unsafe fn FLA_Svv_2x2(alpha11: FLA_Obj, alpha12: FLA_Obj, alpha22: FLA_Obj, sigma1: FLA_Obj, sigma2: FLA_Obj, gammaL: FLA_Obj, sigmaL: FLA_Obj, gammaR: FLA_Obj, sigmaR: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svv_2x2.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2, gammaL, sigmaL, gammaR, sigmaR)
            }

pub unsafe fn FLA_Svv_2x2_ops(alpha11: *mut f32, alpha12: *mut f32, alpha22: *mut f32, sigma1: *mut f32, sigma2: *mut f32, gammaL: *mut f32, sigmaL: *mut f32, gammaR: *mut f32, sigmaR: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Svv_2x2_ops.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2, gammaL, sigmaL, gammaR, sigmaR)
            }

pub unsafe fn FLA_Svv_2x2_opd(alpha11: *mut f64, alpha12: *mut f64, alpha22: *mut f64, sigma1: *mut f64, sigma2: *mut f64, gammaL: *mut f64, sigmaL: *mut f64, gammaR: *mut f64, sigmaR: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Svv_2x2_opd.unwrap()(alpha11, alpha12, alpha22, sigma1, sigma2, gammaL, sigmaL, gammaR, sigmaR)
            }

pub unsafe fn FLA_Mach_params(machval: FLA_Machval, val: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Mach_params.unwrap()(machval, val)
            }

pub unsafe fn FLA_Mach_params_ops(machval: FLA_Machval) -> f32 {
                dyload_lib().FLA_Mach_params_ops.unwrap()(machval)
            }

pub unsafe fn FLA_Mach_params_opd(machval: FLA_Machval) -> f64 {
                dyload_lib().FLA_Mach_params_opd.unwrap()(machval)
            }

pub unsafe fn FLA_Apply_diag_matrix(side: FLA_Side, conj: FLA_Conj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_diag_matrix.unwrap()(side, conj, x, A)
            }

pub unsafe fn FLA_Shift_pivots_to(ptype: FLA_Pivot_type, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Shift_pivots_to.unwrap()(ptype, p)
            }

pub unsafe fn FLA_Form_perm_matrix(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Form_perm_matrix.unwrap()(p, A)
            }

pub unsafe fn FLA_LU_find_zero_on_diagonal(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_find_zero_on_diagonal.unwrap()(A)
            }

pub unsafe fn fla_dlamch(cmach: *mut c_char, cmach_len: ftnlen) -> doublereal {
                dyload_lib().fla_dlamch.unwrap()(cmach, cmach_len)
            }

pub unsafe fn fla_slamch(cmach: *mut c_char, cmach_len: ftnlen) -> real {
                dyload_lib().fla_slamch.unwrap()(cmach, cmach_len)
            }

pub unsafe fn fla_lsame(ca: *mut c_char, cb: *mut c_char, ca_len: ftnlen, cb_len: ftnlen) -> logical {
                dyload_lib().fla_lsame.unwrap()(ca, cb, ca_len, cb_len)
            }

pub unsafe fn fla_pow_di(a: *mut doublereal, n: *mut integer) -> f64 {
                dyload_lib().fla_pow_di.unwrap()(a, n)
            }

pub unsafe fn fla_pow_ri(a: *mut real, n: *mut integer) -> real {
                dyload_lib().fla_pow_ri.unwrap()(a, n)
            }

pub unsafe fn FLA_Househ2_UT_check(side: FLA_Side, chi_1: FLA_Obj, x2: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Househ2_UT_check.unwrap()(side, chi_1, x2, tau)
            }

pub unsafe fn FLA_Househ3UD_UT_check(chi_1: FLA_Obj, x2: FLA_Obj, y2: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Househ3UD_UT_check.unwrap()(chi_1, x2, y2, tau)
            }

pub unsafe fn FLA_Househ2s_UT_check(side: FLA_Side, chi_1: FLA_Obj, x2: FLA_Obj, alpha: FLA_Obj, chi_1_minus_alpha: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Househ2s_UT_check.unwrap()(side, chi_1, x2, alpha, chi_1_minus_alpha, tau)
            }

pub unsafe fn FLA_Givens2_check(chi_1: FLA_Obj, chi_2: FLA_Obj, gamma: FLA_Obj, sigma: FLA_Obj, chi_1_new: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Givens2_check.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
            }

pub unsafe fn FLA_Apply_GTG_check(gamma: FLA_Obj, sigma: FLA_Obj, delta1: FLA_Obj, epsilon1: FLA_Obj, delta2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_GTG_check.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
            }

pub unsafe fn FLA_Apply_G_1x2_check(gamma: FLA_Obj, sigma: FLA_Obj, beta: FLA_Obj, epsilon: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_1x2_check.unwrap()(gamma, sigma, beta, epsilon)
            }

pub unsafe fn FLA_Apply_G_mx2_check(gamma: FLA_Obj, sigma: FLA_Obj, a1: FLA_Obj, a2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_mx2_check.unwrap()(gamma, sigma, a1, a2)
            }

pub unsafe fn FLA_Apply_G_check(side: FLA_Side, direct: FLA_Direct, G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_check.unwrap()(side, direct, G, A)
            }

pub unsafe fn FLA_Wilkshift_tridiag_check(delta1: FLA_Obj, epsilon: FLA_Obj, delta2: FLA_Obj, kappa: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Wilkshift_tridiag_check.unwrap()(delta1, epsilon, delta2, kappa)
            }

pub unsafe fn FLA_Wilkshift_bidiag_check(epsilon1: FLA_Obj, delta1: FLA_Obj, epsilon2: FLA_Obj, delta2: FLA_Obj, kappa: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Wilkshift_bidiag_check.unwrap()(epsilon1, delta1, epsilon2, delta2, kappa)
            }

pub unsafe fn FLA_Introduce_bulge_check(shift: FLA_Obj, gamma: FLA_Obj, sigma: FLA_Obj, delta1: FLA_Obj, epsilon1: FLA_Obj, delta2: FLA_Obj, beta: FLA_Obj, epsilon2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Introduce_bulge_check.unwrap()(shift, gamma, sigma, delta1, epsilon1, delta2, beta, epsilon2)
            }

pub unsafe fn FLA_Mach_params_check(machval: FLA_Machval, val: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Mach_params_check.unwrap()(machval, val)
            }

pub unsafe fn FLA_Sort_evd_check(direct: FLA_Direct, l: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort_evd_check.unwrap()(direct, l, V)
            }

pub unsafe fn FLA_Sort_svd_check(direct: FLA_Direct, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sort_svd_check.unwrap()(direct, s, U, V)
            }

pub unsafe fn FLA_Apply_diag_matrix_check(side: FLA_Side, conj: FLA_Conj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_diag_matrix_check.unwrap()(side, conj, x, A)
            }

pub unsafe fn FLA_Form_perm_matrix_check(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Form_perm_matrix_check.unwrap()(p, A)
            }

pub unsafe fn FLA_LU_find_zero_on_diagonal_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_find_zero_on_diagonal_check.unwrap()(A)
            }

pub unsafe fn FLA_Asum(x: FLA_Obj, asum_x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Asum.unwrap()(x, asum_x)
            }

pub unsafe fn FLA_Axpy(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpy.unwrap()(alpha, A, B)
            }

pub unsafe fn FLA_Axpys(alpha0: FLA_Obj, alpha1: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpys.unwrap()(alpha0, alpha1, A, beta, B)
            }

pub unsafe fn FLA_Axpyt(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpyt.unwrap()(trans, alpha, A, B)
            }

pub unsafe fn FLA_Axpyrt(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpyrt.unwrap()(uplo, trans, alpha, A, B)
            }

pub unsafe fn FLA_Copy(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copy.unwrap()(A, B)
            }

pub unsafe fn FLA_Copyr(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyr.unwrap()(uplo, A, B)
            }

pub unsafe fn FLA_Copyrt(uplo: FLA_Uplo, trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyrt.unwrap()(uplo, trans, A, B)
            }

pub unsafe fn FLA_Copyt(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyt.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Dot(x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot.unwrap()(x, y, rho)
            }

pub unsafe fn FLA_Dot2cs(conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot2cs.unwrap()(conj, alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dot2s(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot2s.unwrap()(alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dotc(conj: FLA_Conj, x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dotc.unwrap()(conj, x, y, rho)
            }

pub unsafe fn FLA_Dotcs(conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dotcs.unwrap()(conj, alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dots(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dots.unwrap()(alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Amax(x: FLA_Obj, index: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Amax.unwrap()(x, index)
            }

pub unsafe fn FLA_Inv_scal(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scal.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Inv_scalc(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scalc.unwrap()(conjalpha, alpha, A)
            }

pub unsafe fn FLA_Nrm2(x: FLA_Obj, norm_x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Nrm2.unwrap()(x, norm_x)
            }

pub unsafe fn FLA_Scal(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scal.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Scalc(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scalc.unwrap()(conjalpha, alpha, A)
            }

pub unsafe fn FLA_Scalr(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scalr.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Swap(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Swap.unwrap()(A, B)
            }

pub unsafe fn FLA_Swapt(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Swapt.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Axpy_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_task.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_task(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_task.unwrap()(trans, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Copy_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_task(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_task.unwrap()(trans, A, B, cntl)
            }

pub unsafe fn FLA_Copyr_task(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_task.unwrap()(uplo, A, B, cntl)
            }

pub unsafe fn FLA_Scal_task(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_task.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_task(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_task.unwrap()(uplo, alpha, A, cntl)
            }

pub unsafe fn FLA_Axpyt_n_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_n_task.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_t_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_t_task.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_c_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_c_task.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_h_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_h_task.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Copyt_n_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_n_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_t_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_t_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_c_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_c_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_h_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_h_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_l_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_l_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_u_task(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_u_task.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Scalr_l_task(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_l_task.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_u_task(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_u_task.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Asum_external(x: FLA_Obj, asum_x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Asum_external.unwrap()(x, asum_x)
            }

pub unsafe fn FLA_Axpy_external(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpy_external.unwrap()(alpha, A, B)
            }

pub unsafe fn FLA_Axpys_external(alpha0: FLA_Obj, alpha1: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpys_external.unwrap()(alpha0, alpha1, A, beta, B)
            }

pub unsafe fn FLA_Axpyt_external(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpyt_external.unwrap()(trans, alpha, A, B)
            }

pub unsafe fn FLA_Axpyrt_external(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpyrt_external.unwrap()(uplo, trans, alpha, A, B)
            }

pub unsafe fn FLA_Copy_external(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copy_external.unwrap()(A, B)
            }

pub unsafe fn FLA_Copyr_external(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyr_external.unwrap()(uplo, A, B)
            }

pub unsafe fn FLA_Copyrt_external(uplo: FLA_Uplo, trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyrt_external.unwrap()(uplo, trans, A, B)
            }

pub unsafe fn FLA_Copyt_external(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyt_external.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Dot_external(x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot_external.unwrap()(x, y, rho)
            }

pub unsafe fn FLA_Dotc_external(conj: FLA_Conj, x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dotc_external.unwrap()(conj, x, y, rho)
            }

pub unsafe fn FLA_Dots_external(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dots_external.unwrap()(alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dotcs_external(conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dotcs_external.unwrap()(conj, alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dot2s_external(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot2s_external.unwrap()(alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dot2cs_external(conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot2cs_external.unwrap()(conj, alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Amax_external(x: FLA_Obj, index: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Amax_external.unwrap()(x, index)
            }

pub unsafe fn FLA_Inv_scal_external(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scal_external.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Inv_scalc_external(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scalc_external.unwrap()(conjalpha, alpha, A)
            }

pub unsafe fn FLA_Nrm2_external(x: FLA_Obj, nrm_x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Nrm2_external.unwrap()(x, nrm_x)
            }

pub unsafe fn FLA_Scal_external(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scal_external.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Scalc_external(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scalc_external.unwrap()(conjalpha, alpha, A)
            }

pub unsafe fn FLA_Scalr_external(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scalr_external.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Swap_external(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Swap_external.unwrap()(A, B)
            }

pub unsafe fn FLA_Swapt_external(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Swapt_external.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Axpy_external_gpu(alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Axpy_external_gpu.unwrap()(alpha, A, A_gpu, B, B_gpu)
            }

pub unsafe fn FLA_Copy_external_gpu(A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Copy_external_gpu.unwrap()(A, A_gpu, B, B_gpu)
            }

pub unsafe fn FLA_Scal_external_gpu(alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Scal_external_gpu.unwrap()(alpha, A, A_gpu)
            }

pub unsafe fn FLA_Scalr_external_gpu(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Scalr_external_gpu.unwrap()(uplo, alpha, A, A_gpu)
            }

pub unsafe fn FLA_Asum_check(x: FLA_Obj, asum_x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Asum_check.unwrap()(x, asum_x)
            }

pub unsafe fn FLA_Axpy_check(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpy_check.unwrap()(alpha, A, B)
            }

pub unsafe fn FLA_Axpys_check(alpha0: FLA_Obj, alpha1: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpys_check.unwrap()(alpha0, alpha1, A, beta, B)
            }

pub unsafe fn FLA_Axpyt_check(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpyt_check.unwrap()(trans, alpha, A, B)
            }

pub unsafe fn FLA_Axpyrt_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Axpyrt_check.unwrap()(uplo, trans, alpha, A, B)
            }

pub unsafe fn FLA_Copy_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copy_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Copyr_check(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyr_check.unwrap()(uplo, A, B)
            }

pub unsafe fn FLA_Copyrt_check(uplo: FLA_Uplo, trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyrt_check.unwrap()(uplo, trans, A, B)
            }

pub unsafe fn FLA_Copyt_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Copyt_check.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Dot_check(x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot_check.unwrap()(x, y, rho)
            }

pub unsafe fn FLA_Dotc_check(conj: FLA_Conj, x: FLA_Obj, y: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dotc_check.unwrap()(conj, x, y, rho)
            }

pub unsafe fn FLA_Dots_check(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dots_check.unwrap()(alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dotcs_check(conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dotcs_check.unwrap()(conj, alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dot2s_check(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot2s_check.unwrap()(alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Dot2cs_check(conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, beta: FLA_Obj, rho: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Dot2cs_check.unwrap()(conj, alpha, x, y, beta, rho)
            }

pub unsafe fn FLA_Amax_check(x: FLA_Obj, index: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Amax_check.unwrap()(x, index)
            }

pub unsafe fn FLA_Inv_scal_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scal_check.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Inv_scalc_check(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Inv_scalc_check.unwrap()(conjalpha, alpha, A)
            }

pub unsafe fn FLA_Nrm2_check(x: FLA_Obj, nrm_x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Nrm2_check.unwrap()(x, nrm_x)
            }

pub unsafe fn FLA_Scal_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scal_check.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Scalc_check(conjalpha: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scalc_check.unwrap()(conjalpha, alpha, A)
            }

pub unsafe fn FLA_Scalr_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Scalr_check.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Swap_check(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Swap_check.unwrap()(A, B)
            }

pub unsafe fn FLA_Swapt_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Swapt_check.unwrap()(trans, A, B)
            }

pub unsafe fn FLA_Axpy_internal_check(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_internal_check.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_internal_check(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_internal_check.unwrap()(trans, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Copy_internal_check(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_internal_check.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_internal_check(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_internal_check.unwrap()(trans, A, B, cntl)
            }

pub unsafe fn FLA_Copyr_internal_check(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_internal_check.unwrap()(uplo, A, B, cntl)
            }

pub unsafe fn FLA_Scal_internal_check(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_internal_check.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_internal_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_internal_check.unwrap()(uplo, alpha, A, cntl)
            }

pub unsafe fn FLA_Gemv(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemv.unwrap()(transa, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Gemvc(transa: FLA_Trans, conjx: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemvc.unwrap()(transa, conjx, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Ger(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ger.unwrap()(alpha, x, y, A)
            }

pub unsafe fn FLA_Gerc(conjx: FLA_Conj, conjy: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gerc.unwrap()(conjx, conjy, alpha, x, y, A)
            }

pub unsafe fn FLA_Hemv(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemv.unwrap()(uplo, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Hemvc(uplo: FLA_Uplo, conja: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemvc.unwrap()(uplo, conja, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Her(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her.unwrap()(uplo, alpha, x, A)
            }

pub unsafe fn FLA_Herc(uplo: FLA_Uplo, conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herc.unwrap()(uplo, conj, alpha, x, A)
            }

pub unsafe fn FLA_Her2(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2.unwrap()(uplo, alpha, x, y, A)
            }

pub unsafe fn FLA_Her2c(uplo: FLA_Uplo, conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2c.unwrap()(uplo, conj, alpha, x, y, A)
            }

pub unsafe fn FLA_Symv(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symv.unwrap()(uplo, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Syr(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr.unwrap()(uplo, alpha, x, A)
            }

pub unsafe fn FLA_Syr2(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2.unwrap()(uplo, alpha, x, y, A)
            }

pub unsafe fn FLA_Trmv(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmv.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLA_Trmvsx(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmvsx.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Trsv(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsv.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLA_Trsvsx(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsvsx.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Gemv_task(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_task.unwrap()(transa, alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Trsv_task(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_task.unwrap()(uplo, transa, diag, A, x, cntl)
            }

pub unsafe fn FLA_Gemv_h_task(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_h_task.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_n_task(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_n_task.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_t_task(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_t_task.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Trsv_lc_task(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lc_task.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ln_task(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ln_task.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_lt_task(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lt_task.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_uc_task(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_uc_task.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_un_task(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_un_task.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ut_task(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ut_task.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Gemv_external(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemv_external.unwrap()(transa, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Gemvc_external(transa: FLA_Trans, conjx: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemvc_external.unwrap()(transa, conjx, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Ger_external(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ger_external.unwrap()(alpha, x, y, A)
            }

pub unsafe fn FLA_Gerc_external(conjx: FLA_Conj, conjy: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gerc_external.unwrap()(conjx, conjy, alpha, x, y, A)
            }

pub unsafe fn FLA_Hemv_external(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemv_external.unwrap()(uplo, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Hemvc_external(uplo: FLA_Uplo, conja: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemvc_external.unwrap()(uplo, conja, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Her_external(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her_external.unwrap()(uplo, alpha, x, A)
            }

pub unsafe fn FLA_Herc_external(uplo: FLA_Uplo, conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herc_external.unwrap()(uplo, conj, alpha, x, A)
            }

pub unsafe fn FLA_Her2_external(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2_external.unwrap()(uplo, alpha, x, y, A)
            }

pub unsafe fn FLA_Her2c_external(uplo: FLA_Uplo, conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2c_external.unwrap()(uplo, conj, alpha, x, y, A)
            }

pub unsafe fn FLA_Symv_external(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symv_external.unwrap()(uplo, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Syr_external(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr_external.unwrap()(uplo, alpha, x, A)
            }

pub unsafe fn FLA_Syr2_external(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2_external.unwrap()(uplo, alpha, x, y, A)
            }

pub unsafe fn FLA_Trmv_external(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmv_external.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLA_Trmvsx_external(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmvsx_external.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Trsv_external(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsv_external.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLA_Trsvsx_external(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsvsx_external.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Gemv_external_gpu(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, x: FLA_Obj, x_gpu: *mut c_void, beta: FLA_Obj, y: FLA_Obj, y_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Gemv_external_gpu.unwrap()(transa, alpha, A, A_gpu, x, x_gpu, beta, y, y_gpu)
            }

pub unsafe fn FLA_Trsv_external_gpu(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, A_gpu: *mut c_void, x: FLA_Obj, x_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Trsv_external_gpu.unwrap()(uplo, transa, diag, A, A_gpu, x, x_gpu)
            }

pub unsafe fn FLA_Gemv_check(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemv_check.unwrap()(transa, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Gemvc_check(transa: FLA_Trans, conjx: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemvc_check.unwrap()(transa, conjx, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Ger_check(alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ger_check.unwrap()(alpha, x, y, A)
            }

pub unsafe fn FLA_Gerc_check(conjx: FLA_Conj, conjy: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gerc_check.unwrap()(conjx, conjy, alpha, x, y, A)
            }

pub unsafe fn FLA_Hemv_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemv_check.unwrap()(uplo, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Hemvc_check(uplo: FLA_Uplo, conja: FLA_Conj, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemvc_check.unwrap()(uplo, conja, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Her_check(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her_check.unwrap()(uplo, alpha, x, A)
            }

pub unsafe fn FLA_Herc_check(uplo: FLA_Uplo, conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herc_check.unwrap()(uplo, conj, alpha, x, A)
            }

pub unsafe fn FLA_Her2_check(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2_check.unwrap()(uplo, alpha, x, y, A)
            }

pub unsafe fn FLA_Her2c_check(uplo: FLA_Uplo, conj: FLA_Conj, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2c_check.unwrap()(uplo, conj, alpha, x, y, A)
            }

pub unsafe fn FLA_Symv_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symv_check.unwrap()(uplo, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Syr_check(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr_check.unwrap()(uplo, alpha, x, A)
            }

pub unsafe fn FLA_Syr2_check(uplo: FLA_Uplo, alpha: FLA_Obj, x: FLA_Obj, y: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2_check.unwrap()(uplo, alpha, x, y, A)
            }

pub unsafe fn FLA_Trmv_check(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmv_check.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLA_Trmvsx_check(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmvsx_check.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Trsv_check(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsv_check.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLA_Trsvsx_check(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsvsx_check.unwrap()(uplo, transa, diag, alpha, A, x, beta, y)
            }

pub unsafe fn FLA_Gemv_internal_check(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_internal_check.unwrap()(transa, alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Trsv_internal_check(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_internal_check.unwrap()(uplo, transa, diag, A, x, cntl)
            }

pub unsafe fn FLA_Gemm(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Herk(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLA_Her2k(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syrk(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLA_Syr2k(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Trmm(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm.unwrap()(side, uplo, trans, diag, alpha, A, B)
            }

pub unsafe fn FLA_Trmmsx(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmmsx.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Trsm(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm.unwrap()(side, uplo, trans, diag, alpha, A, B)
            }

pub unsafe fn FLA_Trsmsx(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsmsx.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemp(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemp.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gepm(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gepm.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gepp(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gepp.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_task(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_task.unwrap()(transa, transb, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_task(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_task.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_task(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_task.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_task(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_task.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_task(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_task.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_task(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_task.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_task(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_task.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Trmm_task(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_task.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_task(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_task.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Gemm_cc_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_task(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_task.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_task(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_task.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Trmm_llc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lln_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llt_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lun_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lut_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rln_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlt_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_run_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rut_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lln_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llt_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lun_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lut_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rln_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlt_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruc_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruh_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_run_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rut_task(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_task.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Gemm_external(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_external.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_external(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_external.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Herk_external(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_external.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLA_Her2k_external(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_external.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_external(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_external.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syrk_external(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_external.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLA_Syr2k_external(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_external.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Trmm_external(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_external.unwrap()(side, uplo, trans, diag, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_external(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_external.unwrap()(side, uplo, trans, diag, alpha, A, B)
            }

pub unsafe fn FLA_Trmmsx_external(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmmsx_external.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Trsmsx_external(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsmsx_external.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_external_gpu(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Gemm_external_gpu.unwrap()(transa, transb, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Hemm_external_gpu(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Hemm_external_gpu.unwrap()(side, uplo, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Herk_external_gpu(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Herk_external_gpu.unwrap()(uplo, trans, alpha, A, A_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Her2k_external_gpu(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Her2k_external_gpu.unwrap()(uplo, trans, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Symm_external_gpu(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Symm_external_gpu.unwrap()(side, uplo, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Syrk_external_gpu(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Syrk_external_gpu.unwrap()(uplo, trans, alpha, A, A_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Syr2k_external_gpu(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void, beta: FLA_Obj, C: FLA_Obj, C_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Syr2k_external_gpu.unwrap()(uplo, trans, alpha, A, A_gpu, B, B_gpu, beta, C, C_gpu)
            }

pub unsafe fn FLA_Trmm_external_gpu(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Trmm_external_gpu.unwrap()(side, uplo, trans, diag, alpha, A, A_gpu, B, B_gpu)
            }

pub unsafe fn FLA_Trsm_external_gpu(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, A_gpu: *mut c_void, B: FLA_Obj, B_gpu: *mut c_void) -> FLA_Error {
                dyload_lib().FLA_Trsm_external_gpu.unwrap()(side, uplo, trans, diag, alpha, A, A_gpu, B, B_gpu)
            }

pub unsafe fn FLA_Gemm_check(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_check.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_check(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_check.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_check.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Herk_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_check.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLA_Symm_check(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_check.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_check.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syrk_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_check.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLA_Trmm_check(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_check.unwrap()(side, uplo, transa, diag, alpha, A, B)
            }

pub unsafe fn FLA_Trmmsx_check(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmmsx_check.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Trsm_check(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_check.unwrap()(side, uplo, transa, diag, alpha, A, B)
            }

pub unsafe fn FLA_Trsmsx_check(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsmsx_check.unwrap()(side, uplo, transa, diag, alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_internal_check(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_internal_check.unwrap()(transa, transb, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_internal_check(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_internal_check.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_internal_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_internal_check.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_internal_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_internal_check.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_internal_check(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_internal_check.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_internal_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_internal_check.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_internal_check(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_internal_check.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Trmm_internal_check(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_internal_check.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_internal_check(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_internal_check.unwrap()(side, uplo, trans, diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Chol(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol.unwrap()(uplo, A)
            }

pub unsafe fn FLA_LU_nopiv(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv.unwrap()(A)
            }

pub unsafe fn FLA_LU_piv(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv.unwrap()(A, p)
            }

pub unsafe fn FLA_QR_UT(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT.unwrap()(A, T)
            }

pub unsafe fn FLA_QR_UT_piv(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv.unwrap()(A, T, w, p)
            }

pub unsafe fn FLA_LQ_UT(A: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT.unwrap()(A, S)
            }

pub unsafe fn FLA_Trinv(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Ttmm(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Sylv(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv.unwrap()(transa, transb, isgn, A, B, C, scale)
            }

pub unsafe fn FLA_SPDinv(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_SPDinv.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Hess_UT(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT.unwrap()(A, T)
            }

pub unsafe fn FLA_Eig_gest(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest.unwrap()(inv, uplo, A, B)
            }

pub unsafe fn FLA_Accum_T_UT(direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, tau: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT.unwrap()(direct, storev, A, tau, T)
            }

pub unsafe fn FLA_Apply_H2_UT(side: FLA_Side, tau: FLA_Obj, u2: FLA_Obj, a1: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT.unwrap()(side, tau, u2, a1, A2)
            }

pub unsafe fn FLA_Apply_HUD_UT(side: FLA_Side, tau: FLA_Obj, w12t: FLA_Obj, u2: FLA_Obj, v2: FLA_Obj, r12t: FLA_Obj, C2: FLA_Obj, D2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT.unwrap()(side, tau, w12t, u2, v2, r12t, C2, D2)
            }

pub unsafe fn FLA_Apply_Q_UT(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT.unwrap()(side, trans, direct, storev, A, T, W, B)
            }

pub unsafe fn FLA_Apply_pivots(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots.unwrap()(side, trans, p, A)
            }

pub unsafe fn FLA_Chol_task(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_task.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_Chol_l_task(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_l_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_u_task(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_u_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_piv_macro_task(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_macro_task.unwrap()(A, p, cntl)
            }

pub unsafe fn FLA_Apply_pivots_task(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_task.unwrap()(side, trans, p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_ln_task(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_task.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_macro_task(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_macro_task.unwrap()(side, trans, p, A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_task(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_piv_task(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_task.unwrap()(A, p, cntl)
            }

pub unsafe fn FLA_LU_piv_copy_task(A: FLA_Obj, p: FLA_Obj, U: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_copy_task.unwrap()(A, p, U, cntl)
            }

pub unsafe fn FLA_Trsm_piv_task(A: FLA_Obj, B: FLA_Obj, p: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_piv_task.unwrap()(A, B, p, cntl)
            }

pub unsafe fn FLA_SA_LU_task(U: FLA_Obj, D: FLA_Obj, p: FLA_Obj, L: FLA_Obj, nb_alg: fla_dim_t, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_SA_LU_task.unwrap()(U, D, p, L, nb_alg, cntl)
            }

pub unsafe fn FLA_SA_FS_task(L: FLA_Obj, D: FLA_Obj, p: FLA_Obj, C: FLA_Obj, E: FLA_Obj, nb_alg: fla_dim_t, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_SA_FS_task.unwrap()(L, D, p, C, E, nb_alg, cntl)
            }

pub unsafe fn FLA_Trinv_task(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_task.unwrap()(uplo, diag, A, cntl)
            }

pub unsafe fn FLA_Trinv_ln_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_lu_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_un_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_uu_task(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_task(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_task.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_Ttmm_l_task(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_u_task(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_task.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Sylv_task(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_task.unwrap()(transa, transb, isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_task(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_task.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_task(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_task.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_task(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_task.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_task(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_task.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_task(trans: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_task.unwrap()(trans, isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_n_task(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_task.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_h_task(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_task.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_task(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_task.unwrap()(side, trans, direct, storev, A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfc_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfc_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfr_task(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfr_task.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_task(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_task.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lhfc_task(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lhfc_task.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_task(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_task.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_task(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_lhfc_task.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_QR2_UT_task(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qr2ut_t) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_task.unwrap()(B, D, T, cntl)
            }

pub unsafe fn FLA_CAQR2_UT_task(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_caqr2ut_t) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_task.unwrap()(B, D, T, cntl)
            }

pub unsafe fn FLA_QR_UT_macro_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_macro_task.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_task.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_copy_task(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_copy_task.unwrap()(A, T, U, cntl)
            }

pub unsafe fn FLA_LQ_UT_macro_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_macro_task.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_LQ_UT_task(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_task.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_UDdate_UT_task(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_uddateut_t) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_task.unwrap()(R, C, D, T, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_task(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_task.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_lhfc_task(T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_lhfc_task.unwrap()(T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Eig_gest_task(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_task.unwrap()(inv, uplo, A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_task(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_task.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu_task(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_task.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl_task(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_task.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu_task(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_task.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_blk_external(side: FLA_Side, trans: FLA_Trans, storev: FLA_Store, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_blk_external.unwrap()(side, trans, storev, A, t, B)
            }

pub unsafe fn FLA_Apply_pivots_unb_external(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_unb_external.unwrap()(side, trans, p, A)
            }

pub unsafe fn FLA_Apply_pivots_ln_unb_ext(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_unb_ext.unwrap()(p, A)
            }

pub unsafe fn FLA_Apply_pivots_macro_external(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_macro_external.unwrap()(side, trans, p, A)
            }

pub unsafe fn FLA_Chol_blk_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_blk_external.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Chol_l_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Chol_unb_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_unb_external.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Chol_l_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_LU_piv_blk_external(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_blk_external.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_blk_ext(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_blk_ext.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_unb_external(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_unb_external.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_unb_ext(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_unb_ext.unwrap()(A, p)
            }

pub unsafe fn FLA_QR_blk_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_blk_external.unwrap()(A, t)
            }

pub unsafe fn FLA_QR_unb_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_unb_external.unwrap()(A, t)
            }

pub unsafe fn FLA_LQ_blk_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_blk_external.unwrap()(A, t)
            }

pub unsafe fn FLA_LQ_unb_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_unb_external.unwrap()(A, t)
            }

pub unsafe fn FLA_Hess_blk_external(A: FLA_Obj, t: FLA_Obj, ilo: integer, ihi: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_blk_external.unwrap()(A, t, ilo, ihi)
            }

pub unsafe fn FLA_Hess_unb_external(A: FLA_Obj, t: FLA_Obj, ilo: integer, ihi: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_unb_external.unwrap()(A, t, ilo, ihi)
            }

pub unsafe fn FLA_Tridiag_blk_external(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_blk_external.unwrap()(uplo, A, t)
            }

pub unsafe fn FLA_Tridiag_unb_external(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_unb_external.unwrap()(uplo, A, t)
            }

pub unsafe fn FLA_Bidiag_blk_external(A: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_blk_external.unwrap()(A, tu, tv)
            }

pub unsafe fn FLA_Bidiag_unb_external(A: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_unb_external.unwrap()(A, tu, tv)
            }

pub unsafe fn FLA_QR_form_Q_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_form_Q_external.unwrap()(A, t)
            }

pub unsafe fn FLA_Tridiag_form_Q_external(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_form_Q_external.unwrap()(uplo, A, t)
            }

pub unsafe fn FLA_Tridiag_apply_Q_external(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_apply_Q_external.unwrap()(side, uplo, trans, A, t, B)
            }

pub unsafe fn FLA_Bidiag_form_U_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_form_U_external.unwrap()(A, t)
            }

pub unsafe fn FLA_Bidiag_form_V_external(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_form_V_external.unwrap()(A, t)
            }

pub unsafe fn FLA_Bidiag_apply_U_external(side: FLA_Side, trans: FLA_Trans, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_apply_U_external.unwrap()(side, trans, A, t, B)
            }

pub unsafe fn FLA_Bidiag_apply_V_external(side: FLA_Side, trans: FLA_Trans, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_apply_V_external.unwrap()(side, trans, A, t, B)
            }

pub unsafe fn FLA_Trinv_blk_external(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_blk_external.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Trinv_ln_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_unb_external(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_unb_external.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Trinv_ln_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_blk_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_blk_external.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Ttmm_l_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_blk_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_blk_ext.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_unb_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_unb_external.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Ttmm_l_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_unb_ext(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_unb_ext.unwrap()(A)
            }

pub unsafe fn FLA_Sylv_blk_external(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_blk_external.unwrap()(transa, transb, isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_blk_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_blk_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_blk_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_blk_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_unb_external(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_unb_external.unwrap()(transa, transb, isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_unb_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_unb_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_unb_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_unb_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_unb_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_unb_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_unb_ext(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_unb_ext.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_SPDinv_blk_external(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_SPDinv_blk_external.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Eig_gest_blk_external(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_blk_external.unwrap()(inv, uplo, A, B)
            }

pub unsafe fn FLA_Eig_gest_il_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_blk_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_iu_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_blk_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_nl_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_blk_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_nu_blk_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_blk_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_unb_external(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_unb_external.unwrap()(inv, uplo, A, B)
            }

pub unsafe fn FLA_Eig_gest_il_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_unb_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_iu_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_unb_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_nl_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_unb_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Eig_gest_nu_unb_ext(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_unb_ext.unwrap()(A, B)
            }

pub unsafe fn FLA_Tevd_external(jobz: FLA_Evd_type, d: FLA_Obj, e: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_external.unwrap()(jobz, d, e, A)
            }

pub unsafe fn FLA_Tevdd_external(jobz: FLA_Evd_type, d: FLA_Obj, e: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevdd_external.unwrap()(jobz, d, e, A)
            }

pub unsafe fn FLA_Tevdr_external(jobz: FLA_Evd_type, d: FLA_Obj, e: FLA_Obj, l: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevdr_external.unwrap()(jobz, d, e, l, A)
            }

pub unsafe fn FLA_Hevd_external(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevd_external.unwrap()(jobz, uplo, A, l)
            }

pub unsafe fn FLA_Hevdd_external(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevdd_external.unwrap()(jobz, uplo, A, l)
            }

pub unsafe fn FLA_Hevdr_external(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj, Z: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevdr_external.unwrap()(jobz, uplo, A, l, Z)
            }

pub unsafe fn FLA_Bsvd_external(uplo: FLA_Uplo, d: FLA_Obj, e: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_external.unwrap()(uplo, d, e, U, V)
            }

pub unsafe fn FLA_Bsvdd_external(uplo: FLA_Uplo, d: FLA_Obj, e: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvdd_external.unwrap()(uplo, d, e, U, V)
            }

pub unsafe fn FLA_Svd_external(jobu: FLA_Svd_type, jobv: FLA_Svd_type, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd_external.unwrap()(jobu, jobv, A, s, U, V)
            }

pub unsafe fn FLA_Svdd_external(jobz: FLA_Svd_type, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svdd_external.unwrap()(jobz, A, s, U, V)
            }

pub unsafe fn FLA_Chol_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Chol_solve_check(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_solve_check.unwrap()(uplo, A, B, X)
            }

pub unsafe fn FLA_LU_nopiv_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_check.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_solve_check(A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_solve_check.unwrap()(A, B, X)
            }

pub unsafe fn FLA_LU_piv_check(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_check.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_solve_check(A: FLA_Obj, p: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_solve_check.unwrap()(A, p, B, X)
            }

pub unsafe fn FLA_LU_incpiv_check(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_incpiv_check.unwrap()(A, p, L)
            }

pub unsafe fn FLA_LU_incpiv_solve_check(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_incpiv_solve_check.unwrap()(A, p, L, B, X)
            }

pub unsafe fn FLA_FS_incpiv_check(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, b: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_FS_incpiv_check.unwrap()(A, p, L, b)
            }

pub unsafe fn FLA_QR_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_check.unwrap()(A, t)
            }

pub unsafe fn FLA_QR_UT_check(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_check.unwrap()(A, T)
            }

pub unsafe fn FLA_QR_UT_solve_check(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_solve_check.unwrap()(A, T, B, X)
            }

pub unsafe fn FLA_QR_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_recover_tau_check.unwrap()(T, tau)
            }

pub unsafe fn FLA_QR_UT_form_Q_check(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_check.unwrap()(A, T, Q)
            }

pub unsafe fn FLA_LQ_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_check.unwrap()(A, t)
            }

pub unsafe fn FLA_LQ_UT_check(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_check.unwrap()(A, T)
            }

pub unsafe fn FLA_LQ_UT_solve_check(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_solve_check.unwrap()(A, T, B, X)
            }

pub unsafe fn FLA_LQ_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_recover_tau_check.unwrap()(T, tau)
            }

pub unsafe fn FLA_LQ_UT_form_Q_check(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_form_Q_check.unwrap()(A, T, Q)
            }

pub unsafe fn FLA_Hess_check(A: FLA_Obj, t: FLA_Obj, ilo: integer, ihi: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_check.unwrap()(A, t, ilo, ihi)
            }

pub unsafe fn FLA_Hess_UT_check(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_check.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_recover_tau_check.unwrap()(T, tau)
            }

pub unsafe fn FLA_Tridiag_check(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_check.unwrap()(uplo, A, t)
            }

pub unsafe fn FLA_Tridiag_UT_check(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_check.unwrap()(uplo, A, T)
            }

pub unsafe fn FLA_Tridiag_UT_recover_tau_check(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_recover_tau_check.unwrap()(T, tau)
            }

pub unsafe fn FLA_Tridiag_UT_scale_diagonals_check(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_scale_diagonals_check.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Tridiag_UT_extract_diagonals_check(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_extract_diagonals_check.unwrap()(uplo, A, d, e)
            }

pub unsafe fn FLA_Tridiag_UT_extract_real_diagonals_check(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_extract_real_diagonals_check.unwrap()(uplo, A, d, e)
            }

pub unsafe fn FLA_Tridiag_UT_realify_check(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_realify_check.unwrap()(uplo, A, d)
            }

pub unsafe fn FLA_Tridiag_UT_realify_subdiagonal_check(b: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_realify_subdiagonal_check.unwrap()(b, d)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_check(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_check.unwrap()(uplo, A, T, Q)
            }

pub unsafe fn FLA_Trinv_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_check.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLA_Bidiag_check(A: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_check.unwrap()(A, tu, tv)
            }

pub unsafe fn FLA_Bidiag_UT_check(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_check.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_recover_tau_check(TU: FLA_Obj, TV: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_recover_tau_check.unwrap()(TU, TV, tu, tv)
            }

pub unsafe fn FLA_Bidiag_UT_extract_diagonals_check(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_extract_diagonals_check.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_extract_real_diagonals_check(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_extract_real_diagonals_check.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_scale_diagonals_check(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_scale_diagonals_check.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Bidiag_UT_realify_check(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_realify_check.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_realify_diagonals_check(uplo: FLA_Uplo, a: FLA_Obj, b: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_realify_diagonals_check.unwrap()(uplo, a, b, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_form_U_check(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_form_U_check.unwrap()(A, T, U)
            }

pub unsafe fn FLA_Bidiag_UT_form_V_check(A: FLA_Obj, S: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_form_V_check.unwrap()(A, S, V)
            }

pub unsafe fn FLA_Ttmm_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Sylv_check(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_check.unwrap()(transa, transb, isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Lyap_check(trans: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_check.unwrap()(trans, isgn, A, C, scale)
            }

pub unsafe fn FLA_SPDinv_check(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_SPDinv_check.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Eig_gest_check(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_check.unwrap()(inv, uplo, A, B)
            }

pub unsafe fn FLA_Apply_Q_check(side: FLA_Side, trans: FLA_Trans, storev: FLA_Store, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_check.unwrap()(side, trans, storev, A, t, B)
            }

pub unsafe fn FLA_QR_form_Q_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_form_Q_check.unwrap()(A, t)
            }

pub unsafe fn FLA_Tridiag_form_Q_check(uplo: FLA_Uplo, A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_form_Q_check.unwrap()(uplo, A, t)
            }

pub unsafe fn FLA_Tridiag_apply_Q_check(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_apply_Q_check.unwrap()(side, uplo, trans, A, t, B)
            }

pub unsafe fn FLA_Bidiag_form_U_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_form_U_check.unwrap()(A, t)
            }

pub unsafe fn FLA_Bidiag_form_V_check(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_form_V_check.unwrap()(A, t)
            }

pub unsafe fn FLA_Bidiag_apply_U_check(side: FLA_Side, trans: FLA_Trans, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_apply_U_check.unwrap()(side, trans, A, t, B)
            }

pub unsafe fn FLA_Bidiag_apply_V_check(side: FLA_Side, trans: FLA_Trans, A: FLA_Obj, t: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_apply_V_check.unwrap()(side, trans, A, t, B)
            }

pub unsafe fn FLA_Apply_Q_UT_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_check.unwrap()(side, trans, direct, storev, A, T, W, B)
            }

pub unsafe fn FLA_Apply_Q2_UT_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_check.unwrap()(side, trans, direct, storev, D, T, W, C, E)
            }

pub unsafe fn FLA_Apply_QUD_UT_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_check.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
            }

pub unsafe fn FLA_Apply_pivots_check(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_check.unwrap()(side, trans, p, A)
            }

pub unsafe fn FLA_QR2_UT_check(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_check.unwrap()(B, D, T)
            }

pub unsafe fn FLA_CAQR2_UT_check(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_check.unwrap()(B, D, T)
            }

pub unsafe fn FLA_QR_UT_inc_check(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_inc_check.unwrap()(A, TW)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_check.unwrap()(side, trans, direct, storev, A, TW, W1, B)
            }

pub unsafe fn FLA_Apply_CAQ_UT_inc_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ_UT_inc_check.unwrap()(side, trans, direct, storev, A, ATW, R, RTW, W1, B)
            }

pub unsafe fn FLA_QR_UT_inc_solve_check(A: FLA_Obj, TW: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_inc_solve_check.unwrap()(A, TW, B, X)
            }

pub unsafe fn FLA_CAQR_UT_inc_solve_check(p: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR_UT_inc_solve_check.unwrap()(p, A, ATW, R, RTW, B, X)
            }

pub unsafe fn FLA_UDdate_UT_check(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_check.unwrap()(R, C, D, T)
            }

pub unsafe fn FLA_UDdate_UT_update_rhs_check(T: FLA_Obj, bR: FLA_Obj, C: FLA_Obj, bC: FLA_Obj, D: FLA_Obj, bD: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_update_rhs_check.unwrap()(T, bR, C, bC, D, bD)
            }

pub unsafe fn FLA_UDdate_UT_solve_check(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_solve_check.unwrap()(R, bR, x)
            }

pub unsafe fn FLA_UDdate_UT_inc_check(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_inc_check.unwrap()(R, C, D, T, W)
            }

pub unsafe fn FLA_UDdate_UT_inc_update_rhs_check(T: FLA_Obj, bR: FLA_Obj, C: FLA_Obj, bC: FLA_Obj, D: FLA_Obj, bD: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_inc_update_rhs_check.unwrap()(T, bR, C, bC, D, bD)
            }

pub unsafe fn FLA_UDdate_UT_inc_solve_check(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_inc_solve_check.unwrap()(R, bR, x)
            }

pub unsafe fn FLA_CAQR_UT_inc_check(p: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR_UT_inc_check.unwrap()(p, A, ATW, R, RTW)
            }

pub unsafe fn FLA_Apply_QUD_UT_inc_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_inc_check.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
            }

pub unsafe fn FLA_Apply_H2_UT_check(side: FLA_Side, tau: FLA_Obj, u2: FLA_Obj, a1t: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_check.unwrap()(side, tau, u2, a1t, A2)
            }

pub unsafe fn FLA_Apply_HUD_UT_check(side: FLA_Side, tau: FLA_Obj, w12t: FLA_Obj, u2: FLA_Obj, v2: FLA_Obj, r12t: FLA_Obj, C2: FLA_Obj, D2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_check.unwrap()(side, tau, w12t, u2, v2, r12t, C2, D2)
            }

pub unsafe fn FLA_Accum_T_UT_check(direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, tau: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_check.unwrap()(direct, storev, A, tau, T)
            }

pub unsafe fn FLA_Tevd_compute_scaling_check(d: FLA_Obj, e: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_compute_scaling_check.unwrap()(d, e, sigma)
            }

pub unsafe fn FLA_Hevd_compute_scaling_check(uplo: FLA_Uplo, A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevd_compute_scaling_check.unwrap()(uplo, A, sigma)
            }

pub unsafe fn FLA_Hevd_check(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevd_check.unwrap()(jobz, uplo, A, l)
            }

pub unsafe fn FLA_Hevdd_check(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevdd_check.unwrap()(jobz, uplo, A, l)
            }

pub unsafe fn FLA_Hevdr_check(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj, Z: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevdr_check.unwrap()(jobz, uplo, A, l, Z)
            }

pub unsafe fn FLA_Bsvd_check(uplo: FLA_Uplo, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, jobu: FLA_Svd_type, U: FLA_Obj, jobv: FLA_Svd_type, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_check.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V)
            }

pub unsafe fn FLA_Bsvd_ext_check(uplo: FLA_Uplo, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, jobu: FLA_Svd_type, U: FLA_Obj, jobv: FLA_Svd_type, V: FLA_Obj, apply_Uh2C: FLA_Bool, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext_check.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V, apply_Uh2C, C)
            }

pub unsafe fn FLA_Bsvd_compute_scaling_check(d: FLA_Obj, e: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_scaling_check.unwrap()(d, e, sigma)
            }

pub unsafe fn FLA_Svd_compute_scaling_check(A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd_compute_scaling_check.unwrap()(A, sigma)
            }

pub unsafe fn FLA_Svd_check(jobu: FLA_Svd_type, jobv: FLA_Svd_type, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd_check.unwrap()(jobu, jobv, A, s, U, V)
            }

pub unsafe fn FLA_Svd_ext_check(jobu: FLA_Svd_type, transu: FLA_Trans, jobv: FLA_Svd_type, transv: FLA_Trans, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd_ext_check.unwrap()(jobu, transu, jobv, transv, A, s, U, V)
            }

pub unsafe fn FLA_Svdd_check(jobz: FLA_Svd_type, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svdd_check.unwrap()(jobz, A, s, U, V)
            }

pub unsafe fn FLA_Chol_internal_check(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_internal_check.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_internal_check(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_internal_check.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_internal_check(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_internal_check.unwrap()(uplo, diag, A, cntl)
            }

pub unsafe fn FLA_Ttmm_internal_check(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_internal_check.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_SPDinv_internal_check(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_spdinv_t) -> FLA_Error {
                dyload_lib().FLA_SPDinv_internal_check.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_Sylv_internal_check(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_internal_check.unwrap()(transa, transb, isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_internal_check(trans: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_internal_check.unwrap()(trans, isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_QR_UT_internal_check(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_internal_check.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_copy_internal_check(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_copy_internal_check.unwrap()(A, T, U, cntl)
            }

pub unsafe fn FLA_QR2_UT_internal_check(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qr2ut_t) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_internal_check.unwrap()(B, D, T, cntl)
            }

pub unsafe fn FLA_CAQR2_UT_internal_check(B: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_caqr2ut_t) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_internal_check.unwrap()(B, D, T, cntl)
            }

pub unsafe fn FLA_LQ_UT_internal_check(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_internal_check.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_Hess_UT_internal_check(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_hessut_t) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_internal_check.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_Tridiag_UT_internal_check(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_tridiagut_t) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_internal_check.unwrap()(uplo, A, T, cntl)
            }

pub unsafe fn FLA_Bidiag_UT_internal_check(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj, cntl: *mut fla_bidiagut_t) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_internal_check.unwrap()(A, TU, TV, cntl)
            }

pub unsafe fn FLA_UDdate_UT_internal_check(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_uddateut_t) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_internal_check.unwrap()(R, C, D, T, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_internal_check.unwrap()(side, trans, direct, storev, A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_internal_check.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_internal_check.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_internal_check.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_internal_check.unwrap()(side, trans, direct, storev, A, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_CAQ_UT_inc_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, R: FLA_Obj, TW: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apcaqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ_UT_inc_internal_check.unwrap()(side, trans, direct, storev, R, TW, W, B, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_inc_internal_check(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_inc_internal_check.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Eig_gest_internal_check(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_internal_check.unwrap()(inv, uplo, A, Y, B, cntl)
            }

pub unsafe fn FLA_Axpy_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_blk_var1.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpy_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_blk_var2.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpy_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_blk_var3.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpy_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_blk_var4.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpy_internal(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpy_t) -> FLA_Error {
                dyload_lib().FLA_Axpy_internal.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_n_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_n_blk_var1.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_n_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_n_blk_var2.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_n_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_n_blk_var3.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_n_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_n_blk_var4.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_t_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_t_blk_var1.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_t_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_t_blk_var2.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_t_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_t_blk_var3.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_t_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_t_blk_var4.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_c_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_c_blk_var1.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_c_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_c_blk_var2.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_c_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_c_blk_var3.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_c_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_c_blk_var4.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_h_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_h_blk_var1.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_h_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_h_blk_var2.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_h_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_h_blk_var3.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_h_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_h_blk_var4.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_internal(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_internal.unwrap()(trans, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_n(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_n.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_t(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_t.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_c(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_c.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Axpyt_h(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_axpyt_t) -> FLA_Error {
                dyload_lib().FLA_Axpyt_h.unwrap()(alpha, A, B, cntl)
            }

pub unsafe fn FLA_Copy_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copy_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copy_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copy_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copy_internal(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copy_t) -> FLA_Error {
                dyload_lib().FLA_Copy_internal.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_n_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_n_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_n_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_n_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_n_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_n_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_n_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_n_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_t_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_t_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_t_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_t_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_t_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_t_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_t_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_t_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_c_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_c_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_c_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_c_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_c_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_c_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_c_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_c_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_h_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_h_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_h_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_h_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_h_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_h_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_h_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_h_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_internal(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_internal.unwrap()(trans, A, B, cntl)
            }

pub unsafe fn FLA_Copyt_n(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_n.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_t(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_t.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_c(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_c.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyt_h(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyt_t) -> FLA_Error {
                dyload_lib().FLA_Copyt_h.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_l_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_l_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_l_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_l_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_l_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_l_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_l_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_l_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_u_blk_var1(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_u_blk_var1.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_u_blk_var2(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_u_blk_var2.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_u_blk_var3(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_u_blk_var3.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_u_blk_var4(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_u_blk_var4.unwrap()(A, B, cntl)
            }

pub unsafe fn FLASH_Copyr(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copyr.unwrap()(uplo, A, B)
            }

pub unsafe fn FLA_Copyr_internal(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_internal.unwrap()(uplo, A, B, cntl)
            }

pub unsafe fn FLA_Copyr_l(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_l.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Copyr_u(A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_copyr_t) -> FLA_Error {
                dyload_lib().FLA_Copyr_u.unwrap()(A, B, cntl)
            }

pub unsafe fn FLA_Scal_blk_var1(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_blk_var1.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scal_blk_var2(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_blk_var2.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scal_blk_var3(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_blk_var3.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scal_blk_var4(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_blk_var4.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scal_internal(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scal_t) -> FLA_Error {
                dyload_lib().FLA_Scal_internal.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_l_blk_var1(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_l_blk_var1.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_l_blk_var2(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_l_blk_var2.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_l_blk_var3(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_l_blk_var3.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_l_blk_var4(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_l_blk_var4.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_u_blk_var1(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_u_blk_var1.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_u_blk_var2(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_u_blk_var2.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_u_blk_var3(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_u_blk_var3.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_u_blk_var4(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_u_blk_var4.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_internal(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_internal.unwrap()(uplo, alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_l(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_l.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Scalr_u(alpha: FLA_Obj, A: FLA_Obj, cntl: *mut fla_scalr_t) -> FLA_Error {
                dyload_lib().FLA_Scalr_u.unwrap()(alpha, A, cntl)
            }

pub unsafe fn FLA_Gemv_h_blk_var1(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_h_blk_var1.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_h_blk_var2(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_h_blk_var2.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_h_blk_var5(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_h_blk_var5.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_h_blk_var6(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_h_blk_var6.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_n_blk_var1(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_n_blk_var1.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_n_blk_var2(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_n_blk_var2.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_n_blk_var5(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_n_blk_var5.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_n_blk_var6(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_n_blk_var6.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_t_blk_var1(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_t_blk_var1.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_t_blk_var2(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_t_blk_var2.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_t_blk_var5(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_t_blk_var5.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_t_blk_var6(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_t_blk_var6.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_internal(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_internal.unwrap()(transa, alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_h(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_h.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_n(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_n.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Gemv_t(alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, cntl: *mut fla_gemv_t) -> FLA_Error {
                dyload_lib().FLA_Gemv_t.unwrap()(alpha, A, x, beta, y, cntl)
            }

pub unsafe fn FLA_Trsv_lc_blk_var1(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lc_blk_var1.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_lc_blk_var2(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lc_blk_var2.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ln_blk_var1(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ln_blk_var1.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ln_blk_var2(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ln_blk_var2.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_lt_blk_var1(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lt_blk_var1.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_lt_blk_var2(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lt_blk_var2.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_uc_blk_var1(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_uc_blk_var1.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_uc_blk_var2(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_uc_blk_var2.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_un_blk_var1(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_un_blk_var1.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_un_blk_var2(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_un_blk_var2.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ut_blk_var1(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ut_blk_var1.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ut_blk_var2(diagA: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ut_blk_var2.unwrap()(diagA, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_internal(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_internal.unwrap()(uplo, transa, diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_lc(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lc.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ln(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ln.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_lt(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_lt.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_uc(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_uc.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_un(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_un.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Trsv_ut(diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj, cntl: *mut fla_trsv_t) -> FLA_Error {
                dyload_lib().FLA_Trsv_ut.unwrap()(diag, A, x, cntl)
            }

pub unsafe fn FLA_Gemm_cc_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cc_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cc_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cc_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cc_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cc_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ch_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ch_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ch_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ch_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ch_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ch_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cn_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cn_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cn_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cn_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cn_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_cn_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ct_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ct_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ct_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ct_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ct_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ct_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hc_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hc_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hc_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hc_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hc_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hc_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hh_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hh_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hh_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hh_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hh_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hh_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hn_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hn_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hn_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hn_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hn_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_hn_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ht_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ht_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ht_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ht_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ht_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_ht_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nc_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nc_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nc_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nc_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nc_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nc_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nh_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nh_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nh_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nh_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nh_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nh_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nn_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nn_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nn_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nn_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nn_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nn_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nt_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nt_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nt_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nt_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nt_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_nt_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tc_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tc_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tc_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tc_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tc_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tc_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_th_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_th_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_th_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_th_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_th_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_th_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_th_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tn_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tn_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tn_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tn_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tn_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tn_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tt_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tt_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tt_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tt_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tt_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_tt_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Gemm_internal(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_internal.unwrap()(transa, transb, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cc(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cc.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ch(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ch.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_cn(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_cn.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ct(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ct.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hc(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hc.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hh(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hh.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_hn(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_hn.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_ht(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_ht.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nc(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nc.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nh(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nh.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nn(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nn.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_nt(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_nt.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tc(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tc.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_th(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_th.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tn(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tn.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Gemm_tt(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLA_Gemm_tt.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ll_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_lu_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_rl_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_ru_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Hemm_internal(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_internal.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ll(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ll.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_lu(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_lu.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_rl(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_rl.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Hemm_ru(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_hemm_t) -> FLA_Error {
                dyload_lib().FLA_Hemm_ru.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_lh_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_lh_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_lh_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_lh_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_lh_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_lh_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_ln_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_ln_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_ln_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_ln_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_ln_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_ln_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_ln_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_uh_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_uh_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_uh_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_uh_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_uh_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_uh_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_uh_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_un_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_un_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_un_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_un_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_un_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_un_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_un_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_un_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_un_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_un_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_un_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Herk_un_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Herk_internal(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_internal.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_lh(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_lh.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_ln(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_ln.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_uh(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_uh.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Herk_un(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_herk_t) -> FLA_Error {
                dyload_lib().FLA_Herk_un.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_lh_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_ln_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_uh_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_un_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Her2k_un_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Her2k_internal(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_internal.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_lh(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_lh.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_ln(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_ln.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_uh(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_uh.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Her2k_un(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_her2k_t) -> FLA_Error {
                dyload_lib().FLA_Her2k_un.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ll_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ll_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_lu_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_lu_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_rl_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_rl_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_ru_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Symm_ru_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Symm_internal(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_internal.unwrap()(side, uplo, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ll(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ll.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_lu(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_lu.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_rl(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_rl.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Symm_ru(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_symm_t) -> FLA_Error {
                dyload_lib().FLA_Symm_ru.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ln_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ln_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ln_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ln_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ln_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_lt_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_lt_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_lt_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_lt_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_lt_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_lt_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_un_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_un_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_un_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_un_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_un_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_un_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_un_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ut_blk_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_blk_var1.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_blk_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_blk_var2.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_blk_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_blk_var3.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_blk_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_blk_var4.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_blk_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_blk_var5.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_blk_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_blk_var6.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut_unb_var1(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_unb_var1.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ut_unb_var2(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_unb_var2.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ut_unb_var3(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_unb_var3.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ut_unb_var4(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_unb_var4.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ut_unb_var5(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_unb_var5.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_ut_unb_var6(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut_unb_var6.unwrap()(alpha, A, beta, C)
            }

pub unsafe fn FLA_Syrk_internal(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_internal.unwrap()(uplo, trans, alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ln(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ln.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_lt(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_lt.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_un(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_un.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syrk_ut(alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syrk_t) -> FLA_Error {
                dyload_lib().FLA_Syrk_ut.unwrap()(alpha, A, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ln_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_lt_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_un_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var1.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var2.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var3.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var4.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var5.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var6.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var7.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var8.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var9.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_blk_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_blk_var10.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var1(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var1.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var2(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var2.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var3(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var3.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var4(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var4.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var5(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var5.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var6(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var6.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var7(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var7.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var8(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var8.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var9(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var9.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_ut_unb_var10(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut_unb_var10.unwrap()(alpha, A, B, beta, C)
            }

pub unsafe fn FLA_Syr2k_internal(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_internal.unwrap()(uplo, trans, alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ln(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ln.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_lt(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_lt.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_un(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_un.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Syr2k_ut(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj, cntl: *mut fla_syr2k_t) -> FLA_Error {
                dyload_lib().FLA_Syr2k_ut.unwrap()(alpha, A, B, beta, C, cntl)
            }

pub unsafe fn FLA_Trmm_llc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lln_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lln_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lln_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lln_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lln_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lln_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lln_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lln_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llt_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llt_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llt_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llt_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llt_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llt_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llt_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_llt_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_luh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lun_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lun_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lun_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lun_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lun_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lun_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lun_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lun_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lut_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lut_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lut_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lut_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lut_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lut_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lut_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_lut_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rln_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rln_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rln_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rln_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rln_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rln_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rln_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rln_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlt_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlt_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlt_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlt_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlt_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlt_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlt_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rlt_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_ruh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_run_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_run_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_run_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_run_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_run_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_run_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_run_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_run_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_run_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rut_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rut_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rut_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rut_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rut_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rut_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rut_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_rut_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trmm_internal(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_internal.unwrap()(side, uplo, transa, diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lln(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lln.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_llt(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_llt.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_luh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_luh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lun(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lun.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_lut(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_lut.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rln(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rln.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rlt(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rlt.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_ruh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_ruh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_run(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_run.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trmm_rut(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trmm_t) -> FLA_Error {
                dyload_lib().FLA_Trmm_rut.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lln_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lln_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lln_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lln_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lln_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lln_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lln_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lln_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llt_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llt_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llt_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llt_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llt_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llt_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llt_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_llt_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_luh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lun_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lun_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lun_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lun_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lun_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lun_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lun_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lun_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lut_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lut_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lut_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lut_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lut_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lut_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lut_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_lut_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rln_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rln_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rln_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rln_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rln_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rln_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rln_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rln_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlt_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlt_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlt_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlt_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlt_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlt_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlt_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rlt_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruc_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruc_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruc_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruc_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruc_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruc_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruc_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruc_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruh_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruh_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruh_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruh_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruh_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruh_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruh_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_ruh_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_run_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_run_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_run_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_run_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_run_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_run_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_run_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_run_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_run_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rut_blk_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_blk_var1.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rut_blk_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_blk_var2.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rut_blk_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_blk_var3.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rut_blk_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_blk_var4.unwrap()(diagA, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rut_unb_var1(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_unb_var1.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rut_unb_var2(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_unb_var2.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rut_unb_var3(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_unb_var3.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_rut_unb_var4(diagA: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut_unb_var4.unwrap()(diagA, alpha, A, B)
            }

pub unsafe fn FLA_Trsm_internal(side: FLA_Side, uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_internal.unwrap()(side, uplo, transa, diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lln(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lln.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_llt(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_llt.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_luh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_luh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lun(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lun.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_lut(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_lut.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rln(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rln.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rlt(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rlt.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruc(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruc.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_ruh(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_ruh.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_run(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_run.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Trsm_rut(diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLA_Trsm_rut.unwrap()(diag, alpha, A, B, cntl)
            }

pub unsafe fn FLA_Chol_l_blk_var1(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_l_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_l_blk_var2(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_l_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_l_blk_var3(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_l_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_l_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Chol_l_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Chol_l_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Chol_l_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Chol_l_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Chol_l_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Chol_l_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_l_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_l_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_blk_var1(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_u_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_u_blk_var2(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_u_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_u_blk_var3(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_u_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_u_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Chol_u_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_u_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Chol_u_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Chol_internal(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_internal.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_Chol_l(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_l.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_u(A: FLA_Obj, cntl: *mut fla_chol_t) -> FLA_Error {
                dyload_lib().FLA_Chol_u.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Chol_solve(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Chol_solve.unwrap()(uplo, A, B, X)
            }

pub unsafe fn FLASH_Chol_solve(uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Chol_solve.unwrap()(uplo, A, B, X)
            }

pub unsafe fn FLA_LU_nopiv_blk_var1(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_blk_var2(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_blk_var3(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_blk_var4(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_blk_var4.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_blk_var5(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_blk_var5.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_unb_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_unb_var4.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_unb_var5(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_unb_var5.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_ops_var1(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opd_var1(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opc_var1(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opz_var1(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_ops_var2(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ops_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opd_var2(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opd_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opc_var2(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opc_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opz_var2(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opz_var2.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_ops_var3(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ops_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opd_var3(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opd_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opc_var3(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opc_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opz_var3(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opz_var3.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opt_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opt_var4.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_ops_var4(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ops_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opd_var4(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opd_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opc_var4(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opc_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opz_var4(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opz_var4.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opt_var5(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opt_var5.unwrap()(A)
            }

pub unsafe fn FLA_LU_nopiv_ops_var5(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ops_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opd_var5(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opd_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opc_var5(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opc_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_opz_var5(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_opz_var5.unwrap()(m_A, n_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_is_blk_var1(m_A: integer, n_A: integer, A: FLA_Obj, buff_A: *mut f32, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_is_blk_var1.unwrap()(m_A, n_A, A, buff_A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_id_blk_var1(m_A: integer, n_A: integer, A: FLA_Obj, buff_A: *mut f64, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_id_blk_var1.unwrap()(m_A, n_A, A, buff_A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_ic_blk_var1(m_A: integer, n_A: integer, A: FLA_Obj, buff_A: *mut scomplex, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ic_blk_var1.unwrap()(m_A, n_A, A, buff_A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_iz_blk_var1(m_A: integer, n_A: integer, A: FLA_Obj, buff_A: *mut dcomplex, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_iz_blk_var1.unwrap()(m_A, n_A, A, buff_A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_is_unblk_var1(m_A: integer, n_A: integer, A: *mut f32, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_is_unblk_var1.unwrap()(m_A, n_A, A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_id_unblk_var1(m_A: integer, n_A: integer, A: *mut f64, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_id_unblk_var1.unwrap()(m_A, n_A, A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_ic_unblk_var1(m_A: integer, n_A: integer, A: *mut scomplex, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_ic_unblk_var1.unwrap()(m_A, n_A, A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_iz_unblk_var1(m_A: integer, n_A: integer, A: *mut dcomplex, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_iz_unblk_var1.unwrap()(m_A, n_A, A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_id_unblk_var2(m_A: integer, n_A: integer, A: *mut f64, nfact: integer, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_id_unblk_var2.unwrap()(m_A, n_A, A, nfact, rs_A, cs_A)
            }

pub unsafe fn FLA_LU_nopiv_internal(A: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_internal.unwrap()(A, cntl)
            }

pub unsafe fn FLA_LU_nopiv_solve(A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_nopiv_solve.unwrap()(A, B, X)
            }

pub unsafe fn FLASH_LU_nopiv_solve(A: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_nopiv_solve.unwrap()(A, B, X)
            }

pub unsafe fn FLA_LU_piv_blk_var3(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_blk_var3.unwrap()(A, p, cntl)
            }

pub unsafe fn FLA_LU_piv_blk_var4(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_blk_var4.unwrap()(A, p, cntl)
            }

pub unsafe fn FLA_LU_piv_blk_var5(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_blk_var5.unwrap()(A, p, cntl)
            }

pub unsafe fn FLA_LU_piv_unb_var3(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_unb_var3.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_unb_var3b(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_unb_var3b.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_unb_var4(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_unb_var4.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_unb_var5(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_unb_var5.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_opt_var3(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opt_var3.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_ops_var3(m_A: integer, n_A: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_ops_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opd_var3(m_A: integer, n_A: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opd_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opc_var3(m_A: integer, n_A: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opc_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opz_var3(m_A: integer, n_A: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opz_var3.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opt_var4(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opt_var4.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_ops_var4(m_A: integer, n_A: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_ops_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opd_var4(m_A: integer, n_A: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opd_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opc_var4(m_A: integer, n_A: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opc_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opz_var4(m_A: integer, n_A: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opz_var4.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opt_var5(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opt_var5.unwrap()(A, p)
            }

pub unsafe fn FLA_LU_piv_ops_var5(m_A: integer, n_A: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_ops_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opd_var5(m_A: integer, n_A: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opd_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opc_var5(m_A: integer, n_A: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opc_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_opz_var5(m_A: integer, n_A: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_p: *mut integer, inc_p: integer) -> FLA_Error {
                dyload_lib().FLA_LU_piv_opz_var5.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_p, inc_p)
            }

pub unsafe fn FLA_LU_piv_internal(A: FLA_Obj, p: FLA_Obj, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLA_LU_piv_internal.unwrap()(A, p, cntl)
            }

pub unsafe fn FLA_LU_piv_small_s_var0(m: *mut integer, n: *mut integer, a: *mut real, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().FLA_LU_piv_small_s_var0.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_small_s_var1(m: *mut integer, n: *mut integer, a: *mut real, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().FLA_LU_piv_small_s_var1.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_small_d_var0(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().FLA_LU_piv_small_d_var0.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_small_d_var1(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().FLA_LU_piv_small_d_var1.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_small_d_var2(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().FLA_LU_piv_small_d_var2.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_small_z_var0(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().FLA_LU_piv_small_z_var0.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_z_var0(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().FLA_LU_piv_z_var0.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_z_parallel(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().FLA_LU_piv_z_parallel.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_z_var1_parallel(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().FLA_LU_piv_z_var1_parallel.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_d_parallel(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().FLA_LU_piv_d_parallel.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_s_parallel(m: *mut integer, n: *mut integer, a: *mut real, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().FLA_LU_piv_s_parallel.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_LU_piv_solve(A: FLA_Obj, p: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LU_piv_solve.unwrap()(A, p, B, X)
            }

pub unsafe fn FLASH_LU_piv_solve(A: FLA_Obj, p: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_piv_solve.unwrap()(A, p, B, X)
            }

pub unsafe fn lapack_cgetf2(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_cgetf2.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn lapack_cgetrf(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_cgetrf.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn lapack_dgetrf(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_dgetrf.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn lapack_sgetf2(m: *mut integer, n: *mut integer, a: *mut real, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_sgetf2.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn lapack_sgetrf(m: *mut integer, n: *mut integer, a: *mut real, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_sgetrf.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn lapack_zgetf2(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_zgetf2.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn lapack_zgetrf(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) -> integer {
                dyload_lib().lapack_zgetrf.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn FLA_SA_Apply_pivots(C: FLA_Obj, E: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_SA_Apply_pivots.unwrap()(C, E, p)
            }

pub unsafe fn FLA_SA_LU_blk(U: FLA_Obj, D: FLA_Obj, p: FLA_Obj, L: FLA_Obj, nb_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_SA_LU_blk.unwrap()(U, D, p, L, nb_alg)
            }

pub unsafe fn FLA_SA_LU_unb(U: FLA_Obj, D: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_SA_LU_unb.unwrap()(U, D, p, L)
            }

pub unsafe fn FLA_SA_FS_blk(L: FLA_Obj, D: FLA_Obj, p: FLA_Obj, C: FLA_Obj, E: FLA_Obj, nb_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_SA_FS_blk.unwrap()(L, D, p, C, E, nb_alg)
            }

pub unsafe fn FLASH_LU_incpiv_var1(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, nb_alg: fla_dim_t, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv_var1.unwrap()(A, p, L, nb_alg, cntl)
            }

pub unsafe fn FLASH_LU_incpiv_var2(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, U: FLA_Obj, nb_alg: fla_dim_t, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv_var2.unwrap()(A, p, L, U, nb_alg, cntl)
            }

pub unsafe fn FLASH_Trsm_piv(A: FLA_Obj, B: FLA_Obj, p: FLA_Obj, cntl: *mut fla_trsm_t) -> FLA_Error {
                dyload_lib().FLASH_Trsm_piv.unwrap()(A, B, p, cntl)
            }

pub unsafe fn FLASH_SA_LU(B: FLA_Obj, C: FLA_Obj, D: FLA_Obj, E: FLA_Obj, p: FLA_Obj, L: FLA_Obj, nb_alg: fla_dim_t, cntl: *mut fla_lu_t) -> FLA_Error {
                dyload_lib().FLASH_SA_LU.unwrap()(B, C, D, E, p, L, nb_alg, cntl)
            }

pub unsafe fn FLASH_SA_FS(L: FLA_Obj, D: FLA_Obj, p: FLA_Obj, C: FLA_Obj, E: FLA_Obj, nb_alg: fla_dim_t, cntl: *mut fla_gemm_t) -> FLA_Error {
                dyload_lib().FLASH_SA_FS.unwrap()(L, D, p, C, E, nb_alg, cntl)
            }

pub unsafe fn FLASH_FS_incpiv_aux1(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, b: FLA_Obj, nb_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_FS_incpiv_aux1.unwrap()(A, p, L, b, nb_alg)
            }

pub unsafe fn FLASH_FS_incpiv_aux2(L: FLA_Obj, D: FLA_Obj, p: FLA_Obj, C: FLA_Obj, E: FLA_Obj, nb_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_FS_incpiv_aux2.unwrap()(L, D, p, C, E, nb_alg)
            }

pub unsafe fn FLASH_LU_incpiv_create_hier_matrices(A_flat: FLA_Obj, depth: fla_dim_t, b_flash: *mut fla_dim_t, b_alg: fla_dim_t, A: *mut FLA_Obj, p: *mut FLA_Obj, L: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv_create_hier_matrices.unwrap()(A_flat, depth, b_flash, b_alg, A, p, L)
            }

pub unsafe fn FLASH_LU_incpiv_determine_alg_blocksize(A: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_LU_incpiv_determine_alg_blocksize.unwrap()(A)
            }

pub unsafe fn FLASH_LU_incpiv_noopt(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv_noopt.unwrap()(A, p, L)
            }

pub unsafe fn FLASH_LU_incpiv_opt1(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv_opt1.unwrap()(A, p, L)
            }

pub unsafe fn FLASH_LU_incpiv_solve(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv_solve.unwrap()(A, p, L, B, X)
            }

pub unsafe fn FLA_QR_UT_unb_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_unb_var1.unwrap()(A, t)
            }

pub unsafe fn FLA_QR_UT_blk_var1(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_blk_var1.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_opt_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opt_var1.unwrap()(A, t)
            }

pub unsafe fn FLA_QR_UT_ops_var1(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer, t: *mut f32, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_QR_UT_opd_var1(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer, t: *mut f64, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_QR_UT_opc_var1(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer, t: *mut scomplex, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_QR_UT_opz_var1(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer, t: *mut dcomplex, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_QR_UT_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_unb_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_QR_UT_blk_var2(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_blk_var2.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opt_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_QR_UT_ops_var2(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_ops_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_opd_var2(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opd_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_opc_var2(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opc_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_opz_var2(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_opz_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_blk_var3(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_blk_var3.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_internal(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_internal.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_QR_UT_copy_internal(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_copy_internal.unwrap()(A, T, U, cntl)
            }

pub unsafe fn FLA_QR_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_create_T.unwrap()(A, T)
            }

pub unsafe fn FLA_QR_UT_recover_tau(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_recover_tau.unwrap()(T, tau)
            }

pub unsafe fn FLA_QR_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_solve.unwrap()(A, T, B, X)
            }

pub unsafe fn FLASH_QR_UT(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT.unwrap()(A, TW)
            }

pub unsafe fn FLASH_QR_UT_create_hier_matrices(A_flat: FLA_Obj, depth: fla_dim_t, b_flash: *mut fla_dim_t, A: *mut FLA_Obj, TW: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_create_hier_matrices.unwrap()(A_flat, depth, b_flash, A, TW)
            }

pub unsafe fn FLASH_QR_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_solve.unwrap()(A, T, B, X)
            }

pub unsafe fn FLA_QR_UT_form_Q(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q.unwrap()(A, T, Q)
            }

pub unsafe fn FLA_QR_UT_form_Q_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_blk_var1.unwrap()(A, T, W)
            }

pub unsafe fn FLA_QR_UT_form_Q_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_opt_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_QR_UT_form_Q_ops_var1(m_A: integer, n_AT: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_ops_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_form_Q_opd_var1(m_A: integer, n_AT: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_opd_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_form_Q_opc_var1(m_A: integer, n_AT: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_opc_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_form_Q_opz_var1(m_A: integer, n_AT: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR_UT_form_Q_opz_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR_UT_piv_unb_var1(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_unb_var1.unwrap()(A, T, w, p)
            }

pub unsafe fn FLA_QR_UT_piv_blk_var1(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_blk_var1.unwrap()(A, T, w, p, cntl)
            }

pub unsafe fn FLA_QR_UT_piv_unb_var2(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_unb_var2.unwrap()(A, T, w, p)
            }

pub unsafe fn FLA_QR_UT_piv_blk_var2(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_blk_var2.unwrap()(A, T, w, p, cntl)
            }

pub unsafe fn FLA_Apply_H2_UT_piv_row(tau: FLA_Obj, a1t: FLA_Obj, u1t: FLA_Obj, W: FLA_Obj, u2: FLA_Obj, A2: FLA_Obj, U2: FLA_Obj, w1t: FLA_Obj, vt: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_piv_row.unwrap()(tau, a1t, u1t, W, u2, A2, U2, w1t, vt)
            }

pub unsafe fn FLA_QR_UT_piv_internal(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_internal.unwrap()(A, T, w, p, cntl)
            }

pub unsafe fn FLA_QR_UT_piv_colnorm(alpha: FLA_Obj, A: FLA_Obj, b: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_colnorm.unwrap()(alpha, A, b)
            }

pub unsafe fn FLA_QR_UT_piv_check(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_check.unwrap()(A, T, w, p)
            }

pub unsafe fn FLA_QR_UT_piv_internal_check(A: FLA_Obj, T: FLA_Obj, w: FLA_Obj, p: FLA_Obj, cntl: *mut fla_qrut_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_internal_check.unwrap()(A, T, w, p, cntl)
            }

pub unsafe fn FLA_QR_UT_piv_colnorm_check(alpha: FLA_Obj, A: FLA_Obj, b: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR_UT_piv_colnorm_check.unwrap()(alpha, A, b)
            }

pub unsafe fn FLA_EXT_sgeqrf(m_A: integer, n_A: integer, buff_A: *mut f32, cs_A: integer, buff_t: *mut f32, buff_w: *mut f32, lwork: *mut integer, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_EXT_sgeqrf.unwrap()(m_A, n_A, buff_A, cs_A, buff_t, buff_w, lwork, info)
            }

pub unsafe fn FLA_EXT_dgeqrf(m_A: integer, n_A: integer, buff_A: *mut f64, cs_A: integer, buff_t: *mut f64, buff_w: *mut f64, lwork: *mut integer, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_EXT_dgeqrf.unwrap()(m_A, n_A, buff_A, cs_A, buff_t, buff_w, lwork, info)
            }

pub unsafe fn FLA_QR2_UT_blk_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qr2ut_t) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_blk_var1.unwrap()(U, D, T, cntl)
            }

pub unsafe fn FLA_QR2_UT_blk_var2(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qr2ut_t) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_blk_var2.unwrap()(U, D, T, cntl)
            }

pub unsafe fn FLA_QR2_UT_unb_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_unb_var1.unwrap()(U, D, T)
            }

pub unsafe fn FLA_QR2_UT_opt_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_opt_var1.unwrap()(U, D, T)
            }

pub unsafe fn FLA_QR2_UT_ops_var1(m_UT: integer, m_D: integer, U: *mut f32, rs_U: integer, cs_U: integer, D: *mut f32, rs_D: integer, cs_D: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_ops_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR2_UT_opd_var1(m_UT: integer, m_D: integer, U: *mut f64, rs_U: integer, cs_U: integer, D: *mut f64, rs_D: integer, cs_D: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_opd_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR2_UT_opc_var1(m_UT: integer, m_D: integer, U: *mut scomplex, rs_U: integer, cs_U: integer, D: *mut scomplex, rs_D: integer, cs_D: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_opc_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_QR2_UT_opz_var1(m_UT: integer, m_D: integer, U: *mut dcomplex, rs_U: integer, cs_U: integer, D: *mut dcomplex, rs_D: integer, cs_D: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_opz_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLASH_QR2_UT(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR2_UT.unwrap()(U, D, T)
            }

pub unsafe fn FLA_QR2_UT_internal(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_qr2ut_t) -> FLA_Error {
                dyload_lib().FLA_QR2_UT_internal.unwrap()(U, D, T, cntl)
            }

pub unsafe fn FLASH_QR_UT_inc(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_inc.unwrap()(A, TW)
            }

pub unsafe fn FLASH_QR_UT_inc_noopt(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_inc_noopt.unwrap()(A, TW)
            }

pub unsafe fn FLASH_QR_UT_inc_opt1(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_inc_opt1.unwrap()(A, TW)
            }

pub unsafe fn FLA_QR_UT_inc_blk_var1(A: FLA_Obj, TW: FLA_Obj, cntl: *mut fla_qrutinc_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_inc_blk_var1.unwrap()(A, TW, cntl)
            }

pub unsafe fn FLA_QR_UT_inc_blk_var2(A: FLA_Obj, TW: FLA_Obj, U: FLA_Obj, cntl: *mut fla_qrutinc_t) -> FLA_Error {
                dyload_lib().FLA_QR_UT_inc_blk_var2.unwrap()(A, TW, U, cntl)
            }

pub unsafe fn FLASH_QR_UT_inc_create_hier_matrices(A_flat: FLA_Obj, depth: fla_dim_t, b_flash: *mut fla_dim_t, b_alg: fla_dim_t, A: *mut FLA_Obj, TW: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_inc_create_hier_matrices.unwrap()(A_flat, depth, b_flash, b_alg, A, TW)
            }

pub unsafe fn FLASH_QR_UT_inc_determine_alg_blocksize(A: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_QR_UT_inc_determine_alg_blocksize.unwrap()(A)
            }

pub unsafe fn FLASH_QR_UT_inc_solve(A: FLA_Obj, TW: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_QR_UT_inc_solve.unwrap()(A, TW, B, X)
            }

pub unsafe fn FLA_LQ_UT_unb_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_unb_var1.unwrap()(A, t)
            }

pub unsafe fn FLA_LQ_UT_blk_var1(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_blk_var1.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_LQ_UT_opt_var1(A: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opt_var1.unwrap()(A, t)
            }

pub unsafe fn FLA_LQ_UT_ops_var1(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer, t: *mut f32, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_LQ_UT_opd_var1(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer, t: *mut f64, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_LQ_UT_opc_var1(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer, t: *mut scomplex, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_LQ_UT_opz_var1(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer, t: *mut dcomplex, inc_t: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, t, inc_t)
            }

pub unsafe fn FLA_LQ_UT_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_unb_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_LQ_UT_blk_var2(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_blk_var2.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_LQ_UT_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opt_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_LQ_UT_ops_var2(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_ops_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_LQ_UT_opd_var2(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opd_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_LQ_UT_opc_var2(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opc_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_LQ_UT_opz_var2(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_opz_var2.unwrap()(m_A, n_A, A, rs_A, cs_A, T, rs_T, cs_T)
            }

pub unsafe fn FLA_LQ_UT_blk_var3(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_blk_var3.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_LQ_UT_internal(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_lqut_t) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_internal.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_LQ_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_create_T.unwrap()(A, T)
            }

pub unsafe fn FLA_LQ_UT_recover_tau(T: FLA_Obj, tau: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_recover_tau.unwrap()(T, tau)
            }

pub unsafe fn FLA_LQ_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_solve.unwrap()(A, T, B, X)
            }

pub unsafe fn FLASH_LQ_UT(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LQ_UT.unwrap()(A, TW)
            }

pub unsafe fn FLASH_LQ_UT_create_hier_matrices(A_flat: FLA_Obj, depth: fla_dim_t, b_flash: *mut fla_dim_t, A: *mut FLA_Obj, TW: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LQ_UT_create_hier_matrices.unwrap()(A_flat, depth, b_flash, A, TW)
            }

pub unsafe fn FLASH_LQ_UT_solve(A: FLA_Obj, T: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LQ_UT_solve.unwrap()(A, T, B, X)
            }

pub unsafe fn FLA_LQ_UT_form_Q(A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_LQ_UT_form_Q.unwrap()(A, T, Q)
            }

pub unsafe fn FLA_CAQR2_UT_blk_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_caqr2ut_t) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_blk_var1.unwrap()(U, D, T, cntl)
            }

pub unsafe fn FLA_CAQR2_UT_blk_var2(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_caqr2ut_t) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_blk_var2.unwrap()(U, D, T, cntl)
            }

pub unsafe fn FLA_CAQR2_UT_unb_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_unb_var1.unwrap()(U, D, T)
            }

pub unsafe fn FLA_CAQR2_UT_opt_var1(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_opt_var1.unwrap()(U, D, T)
            }

pub unsafe fn FLA_CAQR2_UT_ops_var1(m_UT: integer, m_D: integer, U: *mut f32, rs_U: integer, cs_U: integer, D: *mut f32, rs_D: integer, cs_D: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_ops_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_CAQR2_UT_opd_var1(m_UT: integer, m_D: integer, U: *mut f64, rs_U: integer, cs_U: integer, D: *mut f64, rs_D: integer, cs_D: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_opd_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_CAQR2_UT_opc_var1(m_UT: integer, m_D: integer, U: *mut scomplex, rs_U: integer, cs_U: integer, D: *mut scomplex, rs_D: integer, cs_D: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_opc_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_CAQR2_UT_opz_var1(m_UT: integer, m_D: integer, U: *mut dcomplex, rs_U: integer, cs_U: integer, D: *mut dcomplex, rs_D: integer, cs_D: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_opz_var1.unwrap()(m_UT, m_D, U, rs_U, cs_U, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_CAQR2_UT_internal(U: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_caqr2ut_t) -> FLA_Error {
                dyload_lib().FLA_CAQR2_UT_internal.unwrap()(U, D, T, cntl)
            }

pub unsafe fn FLASH_CAQR_UT_inc(p: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_CAQR_UT_inc.unwrap()(p, A, ATW, R, RTW)
            }

pub unsafe fn FLASH_CAQR_UT_inc_noopt(p: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_CAQR_UT_inc_noopt.unwrap()(p, A, ATW, R, RTW)
            }

pub unsafe fn FLASH_CAQR_UT_inc_create_hier_matrices(p: fla_dim_t, A_flat: FLA_Obj, depth: fla_dim_t, b_flash: *mut fla_dim_t, b_alg: fla_dim_t, A: *mut FLA_Obj, ATW: *mut FLA_Obj, R: *mut FLA_Obj, RTW: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_CAQR_UT_inc_create_hier_matrices.unwrap()(p, A_flat, depth, b_flash, b_alg, A, ATW, R, RTW)
            }

pub unsafe fn FLASH_CAQR_UT_inc_determine_alg_blocksize(A: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_CAQR_UT_inc_determine_alg_blocksize.unwrap()(A)
            }

pub unsafe fn FLASH_CAQR_UT_inc_adjust_views(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_CAQR_UT_inc_adjust_views.unwrap()(A, TW)
            }

pub unsafe fn FLA_CAQR_UT_inc_init_structure(p: fla_dim_t, nb_part: fla_dim_t, R: FLA_Obj) {
                dyload_lib().FLA_CAQR_UT_inc_init_structure.unwrap()(p, nb_part, R)
            }

pub unsafe fn FLA_CAQR_UT_inc_compute_blocks_per_part(p: fla_dim_t, A: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLA_CAQR_UT_inc_compute_blocks_per_part.unwrap()(p, A)
            }

pub unsafe fn FLA_CAQR_UT_inc_factorize_panels(nb_part: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR_UT_inc_factorize_panels.unwrap()(nb_part, A, ATW)
            }

pub unsafe fn FLA_CAQR_UT_inc_copy_triangles(nb_part: fla_dim_t, A: FLA_Obj, R: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_CAQR_UT_inc_copy_triangles.unwrap()(nb_part, A, R)
            }

pub unsafe fn FLA_CAQR_UT_inc_blk_var1(R: FLA_Obj, TW: FLA_Obj, cntl: *mut fla_caqrutinc_t) -> FLA_Error {
                dyload_lib().FLA_CAQR_UT_inc_blk_var1.unwrap()(R, TW, cntl)
            }

pub unsafe fn FLASH_CAQR_UT_inc_solve(p: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj, B: FLA_Obj, X: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_CAQR_UT_inc_solve.unwrap()(p, A, ATW, R, RTW, B, X)
            }

pub unsafe fn FLA_Hevd_ln_unb_var1(A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevd_ln_unb_var1.unwrap()(A, l)
            }

pub unsafe fn FLA_Hevd_lv_unb_var1(n_iter_max: fla_dim_t, A: FLA_Obj, l: FLA_Obj, k_accum: fla_dim_t, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Hevd_lv_unb_var1.unwrap()(n_iter_max, A, l, k_accum, b_alg)
            }

pub unsafe fn FLA_Hevd_lv_unb_var2(n_iter_max: fla_dim_t, A: FLA_Obj, l: FLA_Obj, k_accum: fla_dim_t, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Hevd_lv_unb_var2.unwrap()(n_iter_max, A, l, k_accum, b_alg)
            }

pub unsafe fn FLA_Hevd_compute_scaling(uplo: FLA_Uplo, A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevd_compute_scaling.unwrap()(uplo, A, sigma)
            }

pub unsafe fn FLA_Hevd(jobz: FLA_Evd_type, uplo: FLA_Uplo, A: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hevd.unwrap()(jobz, uplo, A, l)
            }

pub unsafe fn FLA_Tevd_iteracc_n_ops_var1(m_A: integer, n_G: integer, ijTL: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_iteracc_n_ops_var1.unwrap()(m_A, n_G, ijTL, buff_d, inc_d, buff_e, inc_e, n_iter_perf)
            }

pub unsafe fn FLA_Tevd_iteracc_n_opd_var1(m_A: integer, n_G: integer, ijTL: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_iteracc_n_opd_var1.unwrap()(m_A, n_G, ijTL, buff_d, inc_d, buff_e, inc_e, n_iter_perf)
            }

pub unsafe fn FLA_Tevd_eigval_n_opt_var1(G: FLA_Obj, d: FLA_Obj, e: FLA_Obj, n_iter: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_n_opt_var1.unwrap()(G, d, e, n_iter)
            }

pub unsafe fn FLA_Tevd_eigval_n_ops_var1(m_A: integer, n_G: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_n_ops_var1.unwrap()(m_A, n_G, buff_d, inc_d, buff_e, inc_e, n_iter)
            }

pub unsafe fn FLA_Tevd_eigval_n_opd_var1(m_A: integer, n_G: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_n_opd_var1.unwrap()(m_A, n_G, buff_d, inc_d, buff_e, inc_e, n_iter)
            }

pub unsafe fn FLA_Tevd_francis_n_opt_var1(shift: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_francis_n_opt_var1.unwrap()(shift, d, e)
            }

pub unsafe fn FLA_Tevd_francis_n_ops_var1(m_A: integer, buff_shift: *mut f32, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_francis_n_ops_var1.unwrap()(m_A, buff_shift, buff_d, inc_d, buff_e, inc_e)
            }

pub unsafe fn FLA_Tevd_francis_n_opd_var1(m_A: integer, buff_shift: *mut f64, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_francis_n_opd_var1.unwrap()(m_A, buff_shift, buff_d, inc_d, buff_e, inc_e)
            }

pub unsafe fn FLA_Tevd_find_submatrix_ops(m_A: integer, ij_begin: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, ijTL: *mut integer, ijBR: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_find_submatrix_ops.unwrap()(m_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR)
            }

pub unsafe fn FLA_Tevd_find_submatrix_opd(m_A: integer, ij_begin: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, ijTL: *mut integer, ijBR: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_find_submatrix_opd.unwrap()(m_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR)
            }

pub unsafe fn FLA_Norm1_tridiag(d: FLA_Obj, e: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Norm1_tridiag.unwrap()(d, e, norm)
            }

pub unsafe fn FLA_Norm1_tridiag_ops(m_A: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, norm: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Norm1_tridiag_ops.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, norm)
            }

pub unsafe fn FLA_Norm1_tridiag_opd(m_A: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, norm: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Norm1_tridiag_opd.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, norm)
            }

pub unsafe fn FLA_Tevd_n_opt_var1(n_iter_max: fla_dim_t, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, U: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_n_opt_var1.unwrap()(n_iter_max, d, e, G, U)
            }

pub unsafe fn FLA_Tevd_n_ops_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_n_ops_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G)
            }

pub unsafe fn FLA_Tevd_n_opd_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_n_opd_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G)
            }

pub unsafe fn FLA_Tevd_n_opc_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_n_opc_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G)
            }

pub unsafe fn FLA_Tevd_n_opz_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_n_opz_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G)
            }

pub unsafe fn FLA_Tevd_iteracc_v_ops_var1(m_A: integer, n_G: integer, ijTL: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_iteracc_v_ops_var1.unwrap()(m_A, n_G, ijTL, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, n_iter_perf)
            }

pub unsafe fn FLA_Tevd_iteracc_v_opd_var1(m_A: integer, n_G: integer, ijTL: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_iteracc_v_opd_var1.unwrap()(m_A, n_G, ijTL, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, n_iter_perf)
            }

pub unsafe fn FLA_Tevd_iteracc_v_ops_var3(m_A: integer, m_U: integer, n_G: integer, ijTL: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_l: *mut f32, inc_l: integer, buff_ls: *mut integer, inc_ls: integer, buff_pu: *mut f32, inc_pu: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_iteracc_v_ops_var3.unwrap()(m_A, m_U, n_G, ijTL, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_ls, inc_ls, buff_pu, inc_pu, buff_G, rs_G, cs_G, n_iter_perf)
            }

pub unsafe fn FLA_Tevd_iteracc_v_opd_var3(m_A: integer, m_U: integer, n_G: integer, ijTL: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_l: *mut f64, inc_l: integer, buff_ls: *mut integer, inc_ls: integer, buff_pu: *mut f64, inc_pu: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_iteracc_v_opd_var3.unwrap()(m_A, m_U, n_G, ijTL, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_ls, inc_ls, buff_pu, inc_pu, buff_G, rs_G, cs_G, n_iter_perf)
            }

pub unsafe fn FLA_Tevd_eigval_v_opt_var1(G: FLA_Obj, d: FLA_Obj, e: FLA_Obj, n_iter: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_v_opt_var1.unwrap()(G, d, e, n_iter)
            }

pub unsafe fn FLA_Tevd_eigval_v_ops_var1(m_A: integer, n_G: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_v_ops_var1.unwrap()(m_A, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, n_iter)
            }

pub unsafe fn FLA_Tevd_eigval_v_opd_var1(m_A: integer, n_G: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_v_opd_var1.unwrap()(m_A, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, n_iter)
            }

pub unsafe fn FLA_Tevd_eigval_v_ops_var3(m_A: integer, m_U: integer, n_G: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_l: *mut f32, inc_l: integer, buff_ls: *mut integer, inc_ls: integer, buff_pu: *mut f32, inc_pu: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_v_ops_var3.unwrap()(m_A, m_U, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_ls, inc_ls, buff_pu, inc_pu, n_iter)
            }

pub unsafe fn FLA_Tevd_eigval_v_opd_var3(m_A: integer, m_U: integer, n_G: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_l: *mut f64, inc_l: integer, buff_ls: *mut integer, inc_ls: integer, buff_pu: *mut f64, inc_pu: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_eigval_v_opd_var3.unwrap()(m_A, m_U, n_G, buff_G, rs_G, cs_G, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_ls, inc_ls, buff_pu, inc_pu, n_iter)
            }

pub unsafe fn FLA_Tevd_francis_v_opt_var1(shift: FLA_Obj, g: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd_francis_v_opt_var1.unwrap()(shift, g, d, e)
            }

pub unsafe fn FLA_Tevd_francis_v_ops_var1(m_A: integer, buff_shift: *mut f32, buff_g: *mut scomplex, inc_g: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_francis_v_ops_var1.unwrap()(m_A, buff_shift, buff_g, inc_g, buff_d, inc_d, buff_e, inc_e)
            }

pub unsafe fn FLA_Tevd_francis_v_opd_var1(m_A: integer, buff_shift: *mut f64, buff_g: *mut dcomplex, inc_g: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_francis_v_opd_var1.unwrap()(m_A, buff_shift, buff_g, inc_g, buff_d, inc_d, buff_e, inc_e)
            }

pub unsafe fn FLA_Tevd_compute_scaling_ops(m_A: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, sigma: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Tevd_compute_scaling_ops.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, sigma)
            }

pub unsafe fn FLA_Tevd_compute_scaling_opd(m_A: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, sigma: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Tevd_compute_scaling_opd.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, sigma)
            }

pub unsafe fn FLA_Tevd_find_perfshift_ops(m_d: integer, m_l: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_l: *mut f32, inc_l: integer, buff_lstat: *mut integer, inc_lstat: integer, buff_pu: *mut f32, inc_pu: integer, ij_shift: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_find_perfshift_ops.unwrap()(m_d, m_l, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_lstat, inc_lstat, buff_pu, inc_pu, ij_shift)
            }

pub unsafe fn FLA_Tevd_find_perfshift_opd(m_d: integer, m_l: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_l: *mut f64, inc_l: integer, buff_lstat: *mut integer, inc_lstat: integer, buff_pu: *mut f64, inc_pu: integer, ij_shift: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_find_perfshift_opd.unwrap()(m_d, m_l, buff_d, inc_d, buff_e, inc_e, buff_l, inc_l, buff_lstat, inc_lstat, buff_pu, inc_pu, ij_shift)
            }

pub unsafe fn FLA_Tevd_v_opt_var1(n_iter_max: fla_dim_t, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, U: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opt_var1.unwrap()(n_iter_max, d, e, G, U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_ops_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_U: *mut f32, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_ops_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opd_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_U: *mut f64, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opd_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opc_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opc_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opz_var1(m_A: integer, m_U: integer, n_G: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opz_var1.unwrap()(m_A, m_U, n_G, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opt_var2(n_iter_max: fla_dim_t, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, R: FLA_Obj, W: FLA_Obj, U: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opt_var2.unwrap()(n_iter_max, d, e, G, R, W, U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_ops_var2(m_A: integer, m_U: integer, n_G: integer, n_G_extra: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_R: *mut f32, rs_R: integer, cs_R: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_U: *mut f32, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_ops_var2.unwrap()(m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R, cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opd_var2(m_A: integer, m_U: integer, n_G: integer, n_G_extra: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_R: *mut f64, rs_R: integer, cs_R: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_U: *mut f64, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opd_var2.unwrap()(m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R, cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opc_var2(m_A: integer, m_U: integer, n_G: integer, n_G_extra: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_R: *mut f32, rs_R: integer, cs_R: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opc_var2.unwrap()(m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R, cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd_v_opz_var2(m_A: integer, m_U: integer, n_G: integer, n_G_extra: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_R: *mut f64, rs_R: integer, cs_R: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Tevd_v_opz_var2.unwrap()(m_A, m_U, n_G, n_G_extra, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_R, rs_R, cs_R, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, b_alg)
            }

pub unsafe fn FLA_Tevd(jobz: FLA_Evd_type, U: FLA_Obj, d: FLA_Obj, e: FLA_Obj, l: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tevd.unwrap()(jobz, U, d, e, l)
            }

pub unsafe fn FLA_Svd_ext_u_unb_var1(jobu: FLA_Svd_type, jobv: FLA_Svd_type, n_iter_max: fla_dim_t, A: FLA_Obj, s: FLA_Obj, V: FLA_Obj, U: FLA_Obj, k_accum: fla_dim_t, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Svd_ext_u_unb_var1.unwrap()(jobu, jobv, n_iter_max, A, s, V, U, k_accum, b_alg)
            }

pub unsafe fn lapack_dbdsqr(uplo: *mut c_char, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d__: *mut doublereal, e: *mut doublereal, vt: *mut doublereal, ldvt: *mut integer, u: *mut doublereal, ldu: *mut integer, c__: *mut doublereal, ldc: *mut integer, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dbdsqr.unwrap()(uplo, n, ncvt, nru, ncc, d__, e, vt, ldvt, u, ldu, c__, ldc, work, info)
            }

pub unsafe fn lapack_dbdsqr_small(uplo: *mut c_char, n: *mut integer, ncvt: *mut integer, nru: *mut integer, d__: *mut doublereal, e: *mut doublereal, vt: *mut doublereal, ldvt: *mut integer, u: *mut doublereal, ldu: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dbdsqr_small.unwrap()(uplo, n, ncvt, nru, d__, e, vt, ldvt, u, ldu, info)
            }

pub unsafe fn lapack_dgebd2(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, d__: *mut doublereal, e: *mut doublereal, tauq: *mut doublereal, taup: *mut doublereal, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dgebd2.unwrap()(m, n, a, lda, d__, e, tauq, taup, work, info)
            }

pub unsafe fn lapack_dgebrd(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, d__: *mut doublereal, e: *mut doublereal, tauq: *mut doublereal, taup: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dgebrd.unwrap()(m, n, a, lda, d__, e, tauq, taup, work, lwork, info)
            }

pub unsafe fn lapack_dgelqf(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dgelqf.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn lapack_dgelq2(m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dgelq2.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn lapack_dgesvd(jobu: *mut c_char, jobvt: *mut c_char, m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, s: *mut doublereal, u: *mut doublereal, ldu: *mut integer, vt: *mut doublereal, ldvt: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dgesvd.unwrap()(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)
            }

pub unsafe fn lapack_dorg2r(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorg2r.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn lapack_dorgbr(vect: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorgbr.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn lapack_dorgl2(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorgl2.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn lapack_dorglq(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorglq.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn lapack_dorgqr(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorgqr.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn lapack_dorm2r(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, c__: *mut doublereal, ldc: *mut integer, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorm2r.unwrap()(side, trans, m, n, k, a, lda, tau, c__, ldc, work, info)
            }

pub unsafe fn lapack_dormbr(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, c__: *mut doublereal, ldc: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dormbr.unwrap()(vect, side, trans, m, n, k, a, lda, tau, c__, ldc, work, lwork, info)
            }

pub unsafe fn lapack_dormlq(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, c__: *mut doublereal, ldc: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dormlq.unwrap()(side, trans, m, n, k, a, lda, tau, c__, ldc, work, lwork, info)
            }

pub unsafe fn lapack_dorml2(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, c__: *mut doublereal, ldc: *mut integer, work: *mut doublereal, info: *mut integer) -> c_int {
                dyload_lib().lapack_dorml2.unwrap()(side, trans, m, n, k, a, lda, tau, c__, ldc, work, info)
            }

pub unsafe fn lapack_dormqr(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut doublereal, lda: *mut integer, tau: *mut doublereal, c__: *mut doublereal, ldc: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().lapack_dormqr.unwrap()(side, trans, m, n, k, a, lda, tau, c__, ldc, work, lwork, info)
            }

pub unsafe fn dgesvd2x2(jobu: *mut c_char, jobvt: *mut c_char, m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, s: *mut doublereal, u: *mut doublereal, ldu: *mut integer, vt: *mut doublereal, ldvt: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) -> c_int {
                dyload_lib().dgesvd2x2.unwrap()(jobu, jobvt, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)
            }

pub unsafe fn FLA_Svd_uv_unb_var1(n_iter_max: fla_dim_t, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj, k_accum: fla_dim_t, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Svd_uv_unb_var1.unwrap()(n_iter_max, A, s, U, V, k_accum, b_alg)
            }

pub unsafe fn FLA_Svd_uv_unb_var2(n_iter_max: fla_dim_t, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj, k_accum: fla_dim_t, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Svd_uv_unb_var2.unwrap()(n_iter_max, A, s, U, V, k_accum, b_alg)
            }

pub unsafe fn FLA_Svd_compute_scaling(A: FLA_Obj, sigma: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd_compute_scaling.unwrap()(A, sigma)
            }

pub unsafe fn FLA_Svd(jobu: FLA_Svd_type, jobv: FLA_Svd_type, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd.unwrap()(jobu, jobv, A, s, U, V)
            }

pub unsafe fn FLA_Svd_ext(jobu: FLA_Svd_type, transu: FLA_Trans, jobv: FLA_Svd_type, transv: FLA_Trans, A: FLA_Obj, s: FLA_Obj, U: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Svd_ext.unwrap()(jobu, transu, jobv, transv, A, s, U, V)
            }

pub unsafe fn FLA_Bsvd_iteracc_v_ops_var1(m_A: integer, n_GH: integer, ijTL: integer, tol: f32, thresh: f32, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_iteracc_v_ops_var1.unwrap()(m_A, n_GH, ijTL, tol, thresh, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, n_iter_perf)
            }

pub unsafe fn FLA_Bsvd_iteracc_v_opd_var1(m_A: integer, n_GH: integer, ijTL: integer, tol: f64, thresh: f64, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, n_iter_perf: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_iteracc_v_opd_var1.unwrap()(m_A, n_GH, ijTL, tol, thresh, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, n_iter_perf)
            }

pub unsafe fn FLA_Bsvd_sinval_v_opt_var1(tol: FLA_Obj, thresh: FLA_Obj, G: FLA_Obj, H: FLA_Obj, d: FLA_Obj, e: FLA_Obj, n_iter: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_sinval_v_opt_var1.unwrap()(tol, thresh, G, H, d, e, n_iter)
            }

pub unsafe fn FLA_Bsvd_sinval_v_ops_var1(m_A: integer, n_GH: integer, n_iter_allowed: integer, tol: f32, thresh: f32, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_sinval_v_ops_var1.unwrap()(m_A, n_GH, n_iter_allowed, tol, thresh, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_d, inc_d, buff_e, inc_e, n_iter)
            }

pub unsafe fn FLA_Bsvd_sinval_v_opd_var1(m_A: integer, n_GH: integer, n_iter_allowed: integer, tol: f64, thresh: f64, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, n_iter: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_sinval_v_opd_var1.unwrap()(m_A, n_GH, n_iter_allowed, tol, thresh, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_d, inc_d, buff_e, inc_e, n_iter)
            }

pub unsafe fn FLA_Bsvd_francis_v_opt_var1(shift: FLA_Obj, g: FLA_Obj, h: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_francis_v_opt_var1.unwrap()(shift, g, h, d, e)
            }

pub unsafe fn FLA_Bsvd_francis_v_ops_var1(m_A: integer, shift: f32, buff_g: *mut scomplex, inc_g: integer, buff_h: *mut scomplex, inc_h: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_francis_v_ops_var1.unwrap()(m_A, shift, buff_g, inc_g, buff_h, inc_h, buff_d, inc_d, buff_e, inc_e)
            }

pub unsafe fn FLA_Bsvd_francis_v_opd_var1(m_A: integer, shift: f64, buff_g: *mut dcomplex, inc_g: integer, buff_h: *mut dcomplex, inc_h: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_francis_v_opd_var1.unwrap()(m_A, shift, buff_g, inc_g, buff_h, inc_h, buff_d, inc_d, buff_e, inc_e)
            }

pub unsafe fn FLA_Bsvd_compute_shift(tol: FLA_Obj, sminl: FLA_Obj, smax: FLA_Obj, d: FLA_Obj, e: FLA_Obj, shift: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_shift.unwrap()(tol, sminl, smax, d, e, shift)
            }

pub unsafe fn FLA_Bsvd_compute_shift_ops(m_A: integer, tol: f32, sminl: f32, smax: f32, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, shift: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_shift_ops.unwrap()(m_A, tol, sminl, smax, buff_d, inc_d, buff_e, inc_e, shift)
            }

pub unsafe fn FLA_Bsvd_compute_shift_opd(m_A: integer, tol: f64, sminl: f64, smax: f64, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, shift: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_shift_opd.unwrap()(m_A, tol, sminl, smax, buff_d, inc_d, buff_e, inc_e, shift)
            }

pub unsafe fn FLA_Bsvd_compute_tol_thresh(tolmul: FLA_Obj, maxit: FLA_Obj, d: FLA_Obj, e: FLA_Obj, tol: FLA_Obj, thresh: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_tol_thresh.unwrap()(tolmul, maxit, d, e, tol, thresh)
            }

pub unsafe fn FLA_Bsvd_compute_tol_thresh_ops(m_A: integer, tolmul: f32, maxit: f32, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, tol: *mut f32, thresh: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_tol_thresh_ops.unwrap()(m_A, tolmul, maxit, buff_d, inc_d, buff_e, inc_e, tol, thresh)
            }

pub unsafe fn FLA_Bsvd_compute_tol_thresh_opd(m_A: integer, tolmul: f64, maxit: f64, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, tol: *mut f64, thresh: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Bsvd_compute_tol_thresh_opd.unwrap()(m_A, tolmul, maxit, buff_d, inc_d, buff_e, inc_e, tol, thresh)
            }

pub unsafe fn FLA_Bsvd_find_converged(tol: FLA_Obj, d: FLA_Obj, e: FLA_Obj, sminl: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_converged.unwrap()(tol, d, e, sminl)
            }

pub unsafe fn FLA_Bsvd_find_converged_ops(m_A: integer, tol: f32, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, sminl: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_converged_ops.unwrap()(m_A, tol, buff_d, inc_d, buff_e, inc_e, sminl)
            }

pub unsafe fn FLA_Bsvd_find_converged_opd(m_A: integer, tol: f64, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, sminl: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_converged_opd.unwrap()(m_A, tol, buff_d, inc_d, buff_e, inc_e, sminl)
            }

pub unsafe fn FLA_Bsvd_find_max_fla_min(d: FLA_Obj, e: FLA_Obj, smax: FLA_Obj, smin: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_max_fla_min.unwrap()(d, e, smax, smin)
            }

pub unsafe fn FLA_Bsvd_find_max_min_ops(m_A: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, smax: *mut f32, smin: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_max_min_ops.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, smax, smin)
            }

pub unsafe fn FLA_Bsvd_find_max_min_opd(m_A: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, smax: *mut f64, smin: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_max_min_opd.unwrap()(m_A, buff_d, inc_d, buff_e, inc_e, smax, smin)
            }

pub unsafe fn FLA_Bsvd_find_submatrix_ops(mn_A: integer, ij_begin: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, ijTL: *mut integer, ijBR: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_submatrix_ops.unwrap()(mn_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR)
            }

pub unsafe fn FLA_Bsvd_find_submatrix_opd(mn_A: integer, ij_begin: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, ijTL: *mut integer, ijBR: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_find_submatrix_opd.unwrap()(mn_A, ij_begin, buff_d, inc_d, buff_e, inc_e, ijTL, ijBR)
            }

pub unsafe fn FLA_Bsvd_v_opt_var1(n_iter_max: fla_dim_t, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, U: FLA_Obj, V: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opt_var1.unwrap()(n_iter_max, d, e, G, H, U, V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_ops_var1(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_V: *mut f32, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_ops_var1.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opd_var1(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_V: *mut f64, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opd_var1.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opc_var1(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_V: *mut scomplex, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opc_var1.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opz_var1(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_V: *mut dcomplex, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opz_var1.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opt_var2(n_iter_max: fla_dim_t, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, RG: FLA_Obj, RH: FLA_Obj, W: FLA_Obj, U: FLA_Obj, V: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opt_var2.unwrap()(n_iter_max, d, e, G, H, RG, RH, W, U, V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_ops_var2(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_RG: *mut f32, rs_RG: integer, cs_RG: integer, buff_RH: *mut f32, rs_RH: integer, cs_RH: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_V: *mut f32, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_ops_var2.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opd_var2(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_RG: *mut f64, rs_RG: integer, cs_RG: integer, buff_RH: *mut f64, rs_RH: integer, cs_RH: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_V: *mut f64, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opd_var2.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opc_var2(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_RG: *mut f32, rs_RG: integer, cs_RG: integer, buff_RH: *mut f32, rs_RH: integer, cs_RH: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_V: *mut scomplex, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opc_var2.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_v_opz_var2(min_m_n: integer, m_U: integer, m_V: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_RG: *mut f64, rs_RG: integer, cs_RG: integer, buff_RH: *mut f64, rs_RH: integer, cs_RH: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_V: *mut dcomplex, rs_V: integer, cs_V: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_v_opz_var2.unwrap()(min_m_n, m_U, m_V, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_RG, rs_RG, cs_RG, buff_RH, rs_RH, cs_RH, buff_W, rs_W, cs_W, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, b_alg)
            }

pub unsafe fn FLA_Bsvd_ext_opt_var1(n_iter_max: fla_dim_t, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, jobu: FLA_Svd_type, U: FLA_Obj, jobv: FLA_Svd_type, V: FLA_Obj, apply_Uh2C: FLA_Bool, C: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext_opt_var1.unwrap()(n_iter_max, d, e, G, H, jobu, U, jobv, V, apply_Uh2C, C, b_alg)
            }

pub unsafe fn FLA_Bsvd_ext_ops_var1(m_d: integer, m_U: integer, m_V: integer, m_C: integer, n_C: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_V: *mut f32, rs_V: integer, cs_V: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext_ops_var1.unwrap()(m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C, b_alg)
            }

pub unsafe fn FLA_Bsvd_ext_opd_var1(m_d: integer, m_U: integer, m_V: integer, m_C: integer, n_C: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_V: *mut f64, rs_V: integer, cs_V: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext_opd_var1.unwrap()(m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C, b_alg)
            }

pub unsafe fn FLA_Bsvd_ext_opc_var1(m_d: integer, m_U: integer, m_V: integer, m_C: integer, n_C: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f32, inc_d: integer, buff_e: *mut f32, inc_e: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_H: *mut scomplex, rs_H: integer, cs_H: integer, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_V: *mut scomplex, rs_V: integer, cs_V: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext_opc_var1.unwrap()(m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C, b_alg)
            }

pub unsafe fn FLA_Bsvd_ext_opz_var1(m_d: integer, m_U: integer, m_V: integer, m_C: integer, n_C: integer, n_GH: integer, n_iter_max: integer, buff_d: *mut f64, inc_d: integer, buff_e: *mut f64, inc_e: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_H: *mut dcomplex, rs_H: integer, cs_H: integer, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_V: *mut dcomplex, rs_V: integer, cs_V: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext_opz_var1.unwrap()(m_d, m_U, m_V, m_C, n_C, n_GH, n_iter_max, buff_d, inc_d, buff_e, inc_e, buff_G, rs_G, cs_G, buff_H, rs_H, cs_H, buff_U, rs_U, cs_U, buff_V, rs_V, cs_V, buff_C, rs_C, cs_C, b_alg)
            }

pub unsafe fn FLA_Bsvd_create_workspace(d: FLA_Obj, G: *mut FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_create_workspace.unwrap()(d, G, H)
            }

pub unsafe fn FLA_Bsvd(uplo: FLA_Uplo, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, jobu: FLA_Svd_type, U: FLA_Obj, jobv: FLA_Svd_type, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V)
            }

pub unsafe fn FLA_Bsvd_ext(uplo: FLA_Uplo, d: FLA_Obj, e: FLA_Obj, G: FLA_Obj, H: FLA_Obj, jobu: FLA_Svd_type, U: FLA_Obj, jobv: FLA_Svd_type, V: FLA_Obj, apply_Uh2C: FLA_Bool, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bsvd_ext.unwrap()(uplo, d, e, G, H, jobu, U, jobv, V, apply_Uh2C, C)
            }

pub unsafe fn FLA_Trinv_ln_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_ln_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_ln_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_ln_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_blk_var4.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_ln_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_unb_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_unb_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opt_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opt_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_ln_ops_var4(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opd_var4(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opc_var4(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_ln_opz_var4(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_lu_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_lu_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_lu_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_blk_var4.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_lu_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_unb_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_unb_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opt_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opt_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_lu_ops_var4(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opd_var4(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opc_var4(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_lu_opz_var4(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn lapack_dtrtri(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut doublereal, lda: *mut integer, info: *mut integer) {
                dyload_lib().lapack_dtrtri.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn lapack_dtrti2(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut doublereal, lda: *mut integer, info: *mut integer) {
                dyload_lib().lapack_dtrti2.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn FLA_Trinv_un_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_un_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_un_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_un_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_blk_var4.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_un_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_unb_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_unb_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opt_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opt_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_un_ops_var4(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opd_var4(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opc_var4(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_un_opz_var4(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_un_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_blk_var1(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_uu_blk_var2(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_uu_blk_var3(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_uu_blk_var4(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_blk_var4.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_uu_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_unb_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_unb_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opt_var4(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opt_var4.unwrap()(A)
            }

pub unsafe fn FLA_Trinv_uu_ops_var4(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_ops_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opd_var4(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opd_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opc_var4(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opc_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_uu_opz_var4(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu_opz_var4.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Trinv_internal(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_internal.unwrap()(uplo, diag, A, cntl)
            }

pub unsafe fn FLA_Trinv_ln(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_ln.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_lu(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_lu.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_un(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_un.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Trinv_uu(A: FLA_Obj, cntl: *mut fla_trinv_t) -> FLA_Error {
                dyload_lib().FLA_Trinv_uu.unwrap()(A, cntl)
            }

pub unsafe fn FLA_SPDinv_internal(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_spdinv_t) -> FLA_Error {
                dyload_lib().FLA_SPDinv_internal.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_Hess_UT_blk_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blk_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_unb_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_unb_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_blk_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blk_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_blf_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blf_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_unb_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_unb_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_blk_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blk_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_blf_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blf_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_unb_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_unb_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_unb_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_unb_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_blk_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blk_var4.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_blf_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blf_var4.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_unb_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_unb_var4.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_unb_var4(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_unb_var4.unwrap()(A, Y, Z, T)
            }

pub unsafe fn FLA_Hess_UT_blk_var5(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_blk_var5.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_unb_var5(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_unb_var5.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_unb_var5(A: FLA_Obj, U: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_unb_var5.unwrap()(A, U, Z, T)
            }

pub unsafe fn FLA_Hess_UT_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_opt_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opt_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ops_var1(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ops_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opd_var1(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opd_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opc_var1(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opc_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opz_var1(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opz_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_opt_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opt_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ops_var2(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ops_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opd_var2(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opd_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opc_var2(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opc_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opz_var2(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opz_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_opt_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_opt_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_opt_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opt_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ops_var3(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ops_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opd_var3(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opd_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opc_var3(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opc_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opz_var3(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opz_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_opt_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_opt_var4.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_opt_var4(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opt_var4.unwrap()(A, Y, Z, T)
            }

pub unsafe fn FLA_Hess_UT_step_ops_var4(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ops_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opd_var4(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opd_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opc_var4(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opc_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opz_var4(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opz_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_opt_var5(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_opt_var5.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_opt_var5(A: FLA_Obj, U: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opt_var5.unwrap()(A, U, Z, T)
            }

pub unsafe fn FLA_Hess_UT_step_ops_var5(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ops_var5.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opd_var5(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opd_var5.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opc_var5(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opc_var5.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_opz_var5(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_opz_var5.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_ofu_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofu_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofs_var1(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofs_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofd_var1(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofd_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofc_var1(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofc_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofz_var1(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofz_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_ofu_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofu_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofs_var2(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofs_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofd_var2(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofd_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofc_var2(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofc_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofz_var2(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofz_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_ofu_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_ofu_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofu_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofu_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofs_var3(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofs_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofd_var3(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofd_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofc_var3(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofc_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofz_var3(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofz_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_ofu_var4(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_ofu_var4.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofu_var4(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofu_var4.unwrap()(A, Y, Z, T)
            }

pub unsafe fn FLA_Hess_UT_step_ofs_var4(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofs_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofd_var4(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofd_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofc_var4(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofc_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Hess_UT_step_ofz_var4(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_step_ofz_var4.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Fused_Ahx_Ax_ops_var1(m_A: integer, n_A: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_x: *mut f32, inc_x: integer, buff_v: *mut f32, inc_v: integer, buff_w: *mut f32, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Ax_ops_var1.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Ahx_Ax_opd_var1(m_A: integer, n_A: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_x: *mut f64, inc_x: integer, buff_v: *mut f64, inc_v: integer, buff_w: *mut f64, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Ax_opd_var1.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Ahx_Ax_opc_var1(m_A: integer, n_A: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_x: *mut scomplex, inc_x: integer, buff_v: *mut scomplex, inc_v: integer, buff_w: *mut scomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Ax_opc_var1.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Ahx_Ax_opz_var1(m_A: integer, n_A: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_x: *mut dcomplex, inc_x: integer, buff_v: *mut dcomplex, inc_v: integer, buff_w: *mut dcomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Ax_opz_var1.unwrap()(m_A, n_A, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_ops_var1(m_A: integer, n_A: integer, buff_alpha: *mut f32, buff_u: *mut f32, inc_u: integer, buff_y: *mut f32, inc_y: integer, buff_z: *mut f32, inc_z: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_x: *mut f32, inc_x: integer, buff_v: *mut f32, inc_v: integer, buff_w: *mut f32, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_ops_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_opd_var1(m_A: integer, n_A: integer, buff_alpha: *mut f64, buff_u: *mut f64, inc_u: integer, buff_y: *mut f64, inc_y: integer, buff_z: *mut f64, inc_z: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_x: *mut f64, inc_x: integer, buff_v: *mut f64, inc_v: integer, buff_w: *mut f64, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_opd_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_opc_var1(m_A: integer, n_A: integer, buff_alpha: *mut scomplex, buff_u: *mut scomplex, inc_u: integer, buff_y: *mut scomplex, inc_y: integer, buff_z: *mut scomplex, inc_z: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_x: *mut scomplex, inc_x: integer, buff_v: *mut scomplex, inc_v: integer, buff_w: *mut scomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_opc_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Ax_opz_var1(m_A: integer, n_A: integer, buff_alpha: *mut dcomplex, buff_u: *mut dcomplex, inc_u: integer, buff_y: *mut dcomplex, inc_y: integer, buff_z: *mut dcomplex, inc_z: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_x: *mut dcomplex, inc_x: integer, buff_v: *mut dcomplex, inc_v: integer, buff_w: *mut dcomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Ax_opz_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_v, inc_v, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_ops_var1(m_U: integer, n_U: integer, buff_delta: *mut f32, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_t: *mut f32, inc_t: integer, buff_u: *mut f32, inc_u: integer, buff_y: *mut f32, inc_y: integer, buff_z: *mut f32, inc_z: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_ops_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z)
            }

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_opd_var1(m_U: integer, n_U: integer, buff_delta: *mut f64, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_t: *mut f64, inc_t: integer, buff_u: *mut f64, inc_u: integer, buff_y: *mut f64, inc_y: integer, buff_z: *mut f64, inc_z: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_opd_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z)
            }

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_opc_var1(m_U: integer, n_U: integer, buff_delta: *mut scomplex, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_t: *mut scomplex, inc_t: integer, buff_u: *mut scomplex, inc_u: integer, buff_y: *mut scomplex, inc_y: integer, buff_z: *mut scomplex, inc_z: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_opc_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z)
            }

pub unsafe fn FLA_Fused_Uhu_Yhu_Zhu_opz_var1(m_U: integer, n_U: integer, buff_delta: *mut dcomplex, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_t: *mut dcomplex, inc_t: integer, buff_u: *mut dcomplex, inc_u: integer, buff_y: *mut dcomplex, inc_y: integer, buff_z: *mut dcomplex, inc_z: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Uhu_Yhu_Zhu_opz_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z)
            }

pub unsafe fn FLA_Hess_UT_internal(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_hessut_t) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_internal.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_Hess_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_create_T.unwrap()(A, T)
            }

pub unsafe fn FLA_Hess_UT_recover_tau(T: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Hess_UT_recover_tau.unwrap()(T, t)
            }

pub unsafe fn FLA_Tridiag_UT_l_blk_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_blk_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_unb_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_unb_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_unb_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_blk_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_blk_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_blf_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_blf_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_unb_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_unb_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_unb_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_blk_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_blk_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_blf_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_blf_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_unb_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_unb_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_unb_var3(A: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_unb_var3.unwrap()(A, Z, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_opt_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opt_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ops_var1(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ops_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opd_var1(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opd_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opc_var1(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opc_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opz_var1(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opz_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_opt_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opt_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opt_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ops_var2(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ops_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opd_var2(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opd_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opc_var2(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opc_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opz_var2(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opz_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_opt_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_opt_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opt_var3(A: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opt_var3.unwrap()(A, Z, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ops_var3(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ops_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opd_var3(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opd_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opc_var3(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opc_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_opz_var3(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_opz_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_ofu_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofu_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofu_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofs_var1(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofs_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofd_var1(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofd_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofc_var1(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofc_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofz_var1(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofz_var1.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_ofu_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofu_var2(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofu_var2.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofs_var2(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofs_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofd_var2(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofd_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofc_var2(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofc_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofz_var2(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofz_var2.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_ofu_var3(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_ofu_var3.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofu_var3(A: FLA_Obj, Z: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofu_var3.unwrap()(A, Z, T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofs_var3(m_A: integer, m_T: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofs_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofd_var3(m_A: integer, m_T: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofd_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofc_var3(m_A: integer, m_T: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofc_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_l_step_ofz_var3(m_A: integer, m_T: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_step_ofz_var3.unwrap()(m_A, m_T, buff_A, rs_A, cs_A, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Fused_Her2_Ax_l_opt_var1(alpha: FLA_Obj, u: FLA_Obj, z: FLA_Obj, A: FLA_Obj, x: FLA_Obj, w: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fused_Her2_Ax_l_opt_var1.unwrap()(alpha, u, z, A, x, w)
            }

pub unsafe fn FLA_Fused_Her2_Ax_l_ops_var1(m_A: integer, buff_alpha: *mut f32, buff_u: *mut f32, inc_u: integer, buff_z: *mut f32, inc_z: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_x: *mut f32, inc_x: integer, buff_w: *mut f32, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Her2_Ax_l_ops_var1.unwrap()(m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Her2_Ax_l_opd_var1(m_A: integer, buff_alpha: *mut f64, buff_u: *mut f64, inc_u: integer, buff_z: *mut f64, inc_z: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_x: *mut f64, inc_x: integer, buff_w: *mut f64, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Her2_Ax_l_opd_var1.unwrap()(m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Her2_Ax_l_opc_var1(m_A: integer, buff_alpha: *mut scomplex, buff_u: *mut scomplex, inc_u: integer, buff_z: *mut scomplex, inc_z: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_x: *mut scomplex, inc_x: integer, buff_w: *mut scomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Her2_Ax_l_opc_var1.unwrap()(m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Her2_Ax_l_opz_var1(m_A: integer, buff_alpha: *mut dcomplex, buff_u: *mut dcomplex, inc_u: integer, buff_z: *mut dcomplex, inc_z: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_x: *mut dcomplex, inc_x: integer, buff_w: *mut dcomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Her2_Ax_l_opz_var1.unwrap()(m_A, buff_alpha, buff_u, inc_u, buff_z, inc_z, buff_A, rs_A, cs_A, buff_x, inc_x, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_UZhu_ZUhu_opt_var1(delta: FLA_Obj, U: FLA_Obj, Z: FLA_Obj, t: FLA_Obj, u: FLA_Obj, w: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fused_UZhu_ZUhu_opt_var1.unwrap()(delta, U, Z, t, u, w)
            }

pub unsafe fn FLA_Fused_UZhu_ZUhu_ops_var1(m_U: integer, n_U: integer, buff_delta: *mut f32, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_t: *mut f32, inc_t: integer, buff_u: *mut f32, inc_u: integer, buff_w: *mut f32, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UZhu_ZUhu_ops_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_UZhu_ZUhu_opd_var1(m_U: integer, n_U: integer, buff_delta: *mut f64, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_t: *mut f64, inc_t: integer, buff_u: *mut f64, inc_u: integer, buff_w: *mut f64, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UZhu_ZUhu_opd_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_UZhu_ZUhu_opc_var1(m_U: integer, n_U: integer, buff_delta: *mut scomplex, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_t: *mut scomplex, inc_t: integer, buff_u: *mut scomplex, inc_u: integer, buff_w: *mut scomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UZhu_ZUhu_opc_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_UZhu_ZUhu_opz_var1(m_U: integer, n_U: integer, buff_delta: *mut dcomplex, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_t: *mut dcomplex, inc_t: integer, buff_u: *mut dcomplex, inc_u: integer, buff_w: *mut dcomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UZhu_ZUhu_opz_var1.unwrap()(m_U, n_U, buff_delta, buff_U, rs_U, cs_U, buff_Z, rs_Z, cs_Z, buff_t, inc_t, buff_u, inc_u, buff_w, inc_w)
            }

pub unsafe fn FLA_Tridiag_UT(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT.unwrap()(uplo, A, T)
            }

pub unsafe fn FLA_Tridiag_UT_internal(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_tridiagut_t) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_internal.unwrap()(uplo, A, T, cntl)
            }

pub unsafe fn FLA_Tridiag_UT_l(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_tridiagut_t) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_Tridiag_UT_u(A: FLA_Obj, T: FLA_Obj, cntl: *mut fla_tridiagut_t) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_u.unwrap()(A, T, cntl)
            }

pub unsafe fn FLA_Tridiag_UT_create_T(A: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_create_T.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_recover_tau(T: FLA_Obj, t: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_recover_tau.unwrap()(T, t)
            }

pub unsafe fn FLA_Tridiag_UT_scale_diagonals(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_scale_diagonals.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLA_Tridiag_UT_extract_diagonals(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_extract_diagonals.unwrap()(uplo, A, d, e)
            }

pub unsafe fn FLA_Tridiag_UT_extract_real_diagonals(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_extract_real_diagonals.unwrap()(uplo, A, d, e)
            }

pub unsafe fn FLA_Tridiag_UT_realify(uplo: FLA_Uplo, A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_realify.unwrap()(uplo, A, d)
            }

pub unsafe fn FLA_Tridiag_UT_l_realify_unb(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_realify_unb.unwrap()(A, d)
            }

pub unsafe fn FLA_Tridiag_UT_l_realify_opt(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_l_realify_opt.unwrap()(A, d)
            }

pub unsafe fn FLA_Tridiag_UT_u_realify_unb(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_u_realify_unb.unwrap()(A, d)
            }

pub unsafe fn FLA_Tridiag_UT_u_realify_opt(A: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_u_realify_opt.unwrap()(A, d)
            }

pub unsafe fn FLA_Tridiag_UT_realify_subdiagonal(b: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_realify_subdiagonal.unwrap()(b, d)
            }

pub unsafe fn FLA_Tridiag_UT_realify_subdiagonal_opt(b: FLA_Obj, d: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_realify_subdiagonal_opt.unwrap()(b, d)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U.unwrap()(uplo, A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_l_ops(m_A: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_l_ops.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_u_ops(m_A: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_u_ops.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_l_opd(m_A: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_l_opd.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_u_opd(m_A: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_u_opd.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_l_opc(m_A: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_l_opc.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_u_opc(m_A: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_u_opc.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_l_opz(m_A: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_l_opz.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_shift_U_u_opz(m_A: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_shift_U_u_opz.unwrap()(m_A, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj, Q: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q.unwrap()(uplo, A, T, Q)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_l_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_l_blk_var1.unwrap()(A, T, W)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_u_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_u_blk_var1.unwrap()(A, T, W)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opt_var1(A: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_l_opt_var1.unwrap()(A, T)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_l_ops_var1(m_A: integer, n_AT: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_l_ops_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opd_var1(m_A: integer, n_AT: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_l_opd_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opc_var1(m_A: integer, n_AT: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_l_opc_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Tridiag_UT_form_Q_l_opz_var1(m_A: integer, n_AT: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Tridiag_UT_form_Q_l_opz_var1.unwrap()(m_A, n_AT, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T)
            }

pub unsafe fn FLA_Bidiag_UT_u_unb_var1(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_unb_var1.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blk_var1(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blk_var1.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var1(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_unb_var1.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_unb_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_unb_var2.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blk_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blk_var2.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blf_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blf_var2.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var2(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_unb_var2.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_unb_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_unb_var3.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blk_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blk_var3.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blf_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blf_var3.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var3(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_unb_var3.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_unb_var4(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_unb_var4.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blk_var4(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blk_var4.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blf_var4(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blf_var4.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var4(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_unb_var4.unwrap()(A, Y, Z, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_unb_var5(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_unb_var5.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_blk_var5(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_blk_var5.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_unb_var5(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_unb_var5.unwrap()(A, Y, Z, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_u_opt_var1(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_opt_var1.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var1(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opt_var1.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var1(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ops_var1.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var1(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opd_var1.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var1(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opc_var1.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var1(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opz_var1.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_opt_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_opt_var2.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opt_var2.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ops_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opd_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opc_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opz_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_opt_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_opt_var3.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opt_var3.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ops_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opd_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opc_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opz_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_opt_var4(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_opt_var4.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var4(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opt_var4.unwrap()(A, Y, Z, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ops_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opd_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opc_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opz_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_opt_var5(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_opt_var5.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opt_var5(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opt_var5.unwrap()(A, Y, Z, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ops_var5(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ops_var5.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opd_var5(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opd_var5.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opc_var5(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opc_var5.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_opz_var5(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_opz_var5.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_ofu_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_ofu_var2.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofu_var2(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofu_var2.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofs_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofs_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofd_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofd_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofc_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofc_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofz_var2(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofz_var2.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_ofu_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_ofu_var3.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofu_var3(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofu_var3.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofs_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofs_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofd_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofd_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofc_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofc_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofz_var3(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofz_var3.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_ofu_var4(A: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_ofu_var4.unwrap()(A, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofu_var4(A: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, T: FLA_Obj, S: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofu_var4.unwrap()(A, Y, Z, T, S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofs_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_T: *mut f32, rs_T: integer, cs_T: integer, buff_S: *mut f32, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofs_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofd_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_T: *mut f64, rs_T: integer, cs_T: integer, buff_S: *mut f64, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofd_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofc_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut scomplex, rs_T: integer, cs_T: integer, buff_S: *mut scomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofc_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Bidiag_UT_u_step_ofz_var4(m_A: integer, n_A: integer, m_TS: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_T: *mut dcomplex, rs_T: integer, cs_T: integer, buff_S: *mut dcomplex, rs_S: integer, cs_S: integer) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_step_ofz_var4.unwrap()(m_A, n_A, m_TS, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_T, rs_T, cs_T, buff_S, rs_S, cs_S)
            }

pub unsafe fn FLA_Fused_Gerc2_opt_var1(alpha: FLA_Obj, u: FLA_Obj, y: FLA_Obj, z: FLA_Obj, v: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_opt_var1.unwrap()(alpha, u, y, z, v, A)
            }

pub unsafe fn FLA_Fused_Gerc2_ops_var1(m_A: integer, n_A: integer, buff_alpha: *mut f32, buff_u: *mut f32, inc_u: integer, buff_y: *mut f32, inc_y: integer, buff_z: *mut f32, inc_z: integer, buff_v: *mut f32, inc_v: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_ops_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Fused_Gerc2_opd_var1(m_A: integer, n_A: integer, buff_alpha: *mut f64, buff_u: *mut f64, inc_u: integer, buff_y: *mut f64, inc_y: integer, buff_z: *mut f64, inc_z: integer, buff_v: *mut f64, inc_v: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_opd_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Fused_Gerc2_opc_var1(m_A: integer, n_A: integer, buff_alpha: *mut scomplex, buff_u: *mut scomplex, inc_u: integer, buff_y: *mut scomplex, inc_y: integer, buff_z: *mut scomplex, inc_z: integer, buff_v: *mut scomplex, inc_v: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_opc_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Fused_Gerc2_opz_var1(m_A: integer, n_A: integer, buff_alpha: *mut dcomplex, buff_u: *mut dcomplex, inc_u: integer, buff_y: *mut dcomplex, inc_y: integer, buff_z: *mut dcomplex, inc_z: integer, buff_v: *mut dcomplex, inc_v: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_opz_var1.unwrap()(m_A, n_A, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opt_var1(A: FLA_Obj, u: FLA_Obj, tau: FLA_Obj, a: FLA_Obj, beta: FLA_Obj, y: FLA_Obj, w: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opt_var1.unwrap()(A, u, tau, a, beta, y, w)
            }

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_ops_var1(m_A: integer, n_A: integer, buff_tau: *mut f32, buff_beta: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_u: *mut f32, inc_u: integer, buff_a: *mut f32, inc_a: integer, buff_y: *mut f32, inc_y: integer, buff_w: *mut f32, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Axpy_Ax_ops_var1.unwrap()(m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y, inc_y, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opd_var1(m_A: integer, n_A: integer, buff_tau: *mut f64, buff_beta: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_u: *mut f64, inc_u: integer, buff_a: *mut f64, inc_a: integer, buff_y: *mut f64, inc_y: integer, buff_w: *mut f64, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opd_var1.unwrap()(m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y, inc_y, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opc_var1(m_A: integer, n_A: integer, buff_tau: *mut scomplex, buff_beta: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_u: *mut scomplex, inc_u: integer, buff_a: *mut scomplex, inc_a: integer, buff_y: *mut scomplex, inc_y: integer, buff_w: *mut scomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opc_var1.unwrap()(m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y, inc_y, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Ahx_Axpy_Ax_opz_var1(m_A: integer, n_A: integer, buff_tau: *mut dcomplex, buff_beta: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_u: *mut dcomplex, inc_u: integer, buff_a: *mut dcomplex, inc_a: integer, buff_y: *mut dcomplex, inc_y: integer, buff_w: *mut dcomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Ahx_Axpy_Ax_opz_var1.unwrap()(m_A, n_A, buff_tau, buff_beta, buff_A, rs_A, cs_A, buff_u, inc_u, buff_a, inc_a, buff_y, inc_y, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opt_var1(alpha: FLA_Obj, tau: FLA_Obj, u: FLA_Obj, y: FLA_Obj, z: FLA_Obj, v: FLA_Obj, A: FLA_Obj, up: FLA_Obj, a: FLA_Obj, w: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opt_var1.unwrap()(alpha, tau, u, y, z, v, A, up, a, w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_ops_var1(m_A: integer, n_A: integer, buff_tau: *mut f32, buff_alpha: *mut f32, buff_u: *mut f32, inc_u: integer, buff_y: *mut f32, inc_y: integer, buff_z: *mut f32, inc_z: integer, buff_v: *mut f32, inc_v: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_up: *mut f32, inc_up: integer, buff_a: *mut f32, inc_a: integer, buff_w: *mut f32, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_ops_var1.unwrap()(m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opd_var1(m_A: integer, n_A: integer, buff_tau: *mut f64, buff_alpha: *mut f64, buff_u: *mut f64, inc_u: integer, buff_y: *mut f64, inc_y: integer, buff_z: *mut f64, inc_z: integer, buff_v: *mut f64, inc_v: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_up: *mut f64, inc_up: integer, buff_a: *mut f64, inc_a: integer, buff_w: *mut f64, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opd_var1.unwrap()(m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opc_var1(m_A: integer, n_A: integer, buff_tau: *mut scomplex, buff_alpha: *mut scomplex, buff_u: *mut scomplex, inc_u: integer, buff_y: *mut scomplex, inc_y: integer, buff_z: *mut scomplex, inc_z: integer, buff_v: *mut scomplex, inc_v: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_up: *mut scomplex, inc_up: integer, buff_a: *mut scomplex, inc_a: integer, buff_w: *mut scomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opc_var1.unwrap()(m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_Gerc2_Ahx_Axpy_Ax_opz_var1(m_A: integer, n_A: integer, buff_tau: *mut dcomplex, buff_alpha: *mut dcomplex, buff_u: *mut dcomplex, inc_u: integer, buff_y: *mut dcomplex, inc_y: integer, buff_z: *mut dcomplex, inc_z: integer, buff_v: *mut dcomplex, inc_v: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_up: *mut dcomplex, inc_up: integer, buff_a: *mut dcomplex, inc_a: integer, buff_w: *mut dcomplex, inc_w: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_Gerc2_Ahx_Axpy_Ax_opz_var1.unwrap()(m_A, n_A, buff_tau, buff_alpha, buff_u, inc_u, buff_y, inc_y, buff_z, inc_z, buff_v, inc_v, buff_A, rs_A, cs_A, buff_up, inc_up, buff_a, inc_a, buff_w, inc_w)
            }

pub unsafe fn FLA_Fused_UYx_ZVx_opt_var1(delta: FLA_Obj, a: FLA_Obj, U: FLA_Obj, Y: FLA_Obj, Z: FLA_Obj, V: FLA_Obj, A: FLA_Obj, temp: FLA_Obj, t: FLA_Obj, w: FLA_Obj, al: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Fused_UYx_ZVx_opt_var1.unwrap()(delta, a, U, Y, Z, V, A, temp, t, w, al)
            }

pub unsafe fn FLA_Fused_UYx_ZVx_ops_var1(m_U: integer, n_U: integer, m_V: integer, n_V: integer, buff_delta: *mut f32, buff_U: *mut f32, rs_U: integer, cs_U: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_Z: *mut f32, rs_Z: integer, cs_Z: integer, buff_V: *mut f32, rs_V: integer, cs_V: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_temp: *mut f32, inc_temp: integer, buff_t: *mut f32, inc_t: integer, buff_a: *mut f32, inc_a: integer, buff_w: *mut f32, inc_w: integer, buff_al: *mut f32, inc_al: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UYx_ZVx_ops_var1.unwrap()(m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a, buff_w, inc_w, buff_al, inc_al)
            }

pub unsafe fn FLA_Fused_UYx_ZVx_opd_var1(m_U: integer, n_U: integer, m_V: integer, n_V: integer, buff_delta: *mut f64, buff_U: *mut f64, rs_U: integer, cs_U: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_Z: *mut f64, rs_Z: integer, cs_Z: integer, buff_V: *mut f64, rs_V: integer, cs_V: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_temp: *mut f64, inc_temp: integer, buff_t: *mut f64, inc_t: integer, buff_a: *mut f64, inc_a: integer, buff_w: *mut f64, inc_w: integer, buff_al: *mut f64, inc_al: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UYx_ZVx_opd_var1.unwrap()(m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a, buff_w, inc_w, buff_al, inc_al)
            }

pub unsafe fn FLA_Fused_UYx_ZVx_opc_var1(m_U: integer, n_U: integer, m_V: integer, n_V: integer, buff_delta: *mut scomplex, buff_U: *mut scomplex, rs_U: integer, cs_U: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut scomplex, rs_Z: integer, cs_Z: integer, buff_V: *mut scomplex, rs_V: integer, cs_V: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_temp: *mut scomplex, inc_temp: integer, buff_t: *mut scomplex, inc_t: integer, buff_a: *mut scomplex, inc_a: integer, buff_w: *mut scomplex, inc_w: integer, buff_al: *mut scomplex, inc_al: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UYx_ZVx_opc_var1.unwrap()(m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a, buff_w, inc_w, buff_al, inc_al)
            }

pub unsafe fn FLA_Fused_UYx_ZVx_opz_var1(m_U: integer, n_U: integer, m_V: integer, n_V: integer, buff_delta: *mut dcomplex, buff_U: *mut dcomplex, rs_U: integer, cs_U: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_Z: *mut dcomplex, rs_Z: integer, cs_Z: integer, buff_V: *mut dcomplex, rs_V: integer, cs_V: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_temp: *mut dcomplex, inc_temp: integer, buff_t: *mut dcomplex, inc_t: integer, buff_a: *mut dcomplex, inc_a: integer, buff_w: *mut dcomplex, inc_w: integer, buff_al: *mut dcomplex, inc_al: integer) -> FLA_Error {
                dyload_lib().FLA_Fused_UYx_ZVx_opz_var1.unwrap()(m_U, n_U, m_V, n_V, buff_delta, buff_U, rs_U, cs_U, buff_Y, rs_Y, cs_Y, buff_Z, rs_Z, cs_Z, buff_V, rs_V, cs_V, buff_A, rs_A, cs_A, buff_temp, inc_temp, buff_t, inc_t, buff_a, inc_a, buff_w, inc_w, buff_al, inc_al)
            }

pub unsafe fn FLA_Bidiag_UT(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_internal(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj, cntl: *mut fla_bidiagut_t) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_internal.unwrap()(A, TU, TV, cntl)
            }

pub unsafe fn FLA_Bidiag_UT_l(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj, cntl: *mut fla_bidiagut_t) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_l.unwrap()(A, TU, TV, cntl)
            }

pub unsafe fn FLA_Bidiag_UT_u(A: FLA_Obj, TU: FLA_Obj, TV: FLA_Obj, cntl: *mut fla_bidiagut_t) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u.unwrap()(A, TU, TV, cntl)
            }

pub unsafe fn FLA_Bidiag_UT_create_T(A: FLA_Obj, TU: *mut FLA_Obj, TV: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_create_T.unwrap()(A, TU, TV)
            }

pub unsafe fn FLA_Bidiag_UT_recover_tau(TU: FLA_Obj, TV: FLA_Obj, tu: FLA_Obj, tv: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_recover_tau.unwrap()(TU, TV, tu, tv)
            }

pub unsafe fn FLA_Bidiag_UT_extract_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_extract_diagonals.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_u_extract_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_extract_diagonals.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_l_extract_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_l_extract_diagonals.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_extract_real_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_extract_real_diagonals.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_u_extract_real_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_extract_real_diagonals.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_l_extract_real_diagonals(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_l_extract_real_diagonals.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_scale_diagonals(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_scale_diagonals.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Bidiag_UT_u_scale_diagonals(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_scale_diagonals.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Bidiag_UT_l_scale_diagonals(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_l_scale_diagonals.unwrap()(alpha, A)
            }

pub unsafe fn FLA_Bidiag_UT_realify(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_realify.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_l_realify_unb(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_l_realify_unb.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_l_realify_opt(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_l_realify_opt.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_u_realify_unb(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_realify_unb.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_u_realify_opt(A: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_u_realify_opt.unwrap()(A, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_realify_diagonals(uplo: FLA_Uplo, a: FLA_Obj, b: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_realify_diagonals.unwrap()(uplo, a, b, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_realify_diagonals_opt(a: FLA_Obj, b: FLA_Obj, d: FLA_Obj, e: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_realify_diagonals_opt.unwrap()(a, b, d, e)
            }

pub unsafe fn FLA_Bidiag_UT_form_U(A: FLA_Obj, T: FLA_Obj, U: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_form_U.unwrap()(A, T, U)
            }

pub unsafe fn FLA_Bidiag_UT_form_V(A: FLA_Obj, S: FLA_Obj, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_form_V.unwrap()(A, S, V)
            }

pub unsafe fn FLA_Bidiag_UT_form_U_ext(uplo: FLA_Uplo, A: FLA_Obj, T: FLA_Obj, transu: FLA_Trans, U: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_form_U_ext.unwrap()(uplo, A, T, transu, U)
            }

pub unsafe fn FLA_Bidiag_UT_form_V_ext(uplo: FLA_Uplo, A: FLA_Obj, S: FLA_Obj, transv: FLA_Trans, V: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Bidiag_UT_form_V_ext.unwrap()(uplo, A, S, transv, V)
            }

pub unsafe fn FLA_Lyap_n_unb_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_unb_var1.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_unb_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_unb_var2.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_unb_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_unb_var3.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_unb_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_unb_var4.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_blk_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_blk_var1.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_n_blk_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_blk_var2.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_n_blk_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_blk_var3.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_n_blk_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_blk_var4.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_n_opt_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opt_var1.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_ops_var1(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_ops_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opd_var1(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opd_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opc_var1(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opc_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opz_var1(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opz_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opt_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opt_var2.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_ops_var2(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_ops_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opd_var2(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opd_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opc_var2(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opc_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opz_var2(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opz_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opt_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opt_var3.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_ops_var3(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_ops_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opd_var3(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opd_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opc_var3(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opc_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opz_var3(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opz_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opt_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opt_var4.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_n_ops_var4(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_ops_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opd_var4(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opd_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opc_var4(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opc_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_n_opz_var4(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_n_opz_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_unb_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_unb_var1.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_unb_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_unb_var2.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_unb_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_unb_var3.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_unb_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_unb_var4.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_blk_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_blk_var1.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_h_blk_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_blk_var2.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_h_blk_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_blk_var3.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_h_blk_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_blk_var4.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_h_opt_var1(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opt_var1.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_ops_var1(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_ops_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opd_var1(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opd_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opc_var1(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opc_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opz_var1(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opz_var1.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opt_var2(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opt_var2.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_ops_var2(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_ops_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opd_var2(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opd_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opc_var2(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opc_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opz_var2(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opz_var2.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opt_var3(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opt_var3.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_ops_var3(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_ops_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opd_var3(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opd_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opc_var3(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opc_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opz_var3(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opz_var3.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opt_var4(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opt_var4.unwrap()(isgn, A, C)
            }

pub unsafe fn FLA_Lyap_h_ops_var4(m_AC: integer, buff_sgn: *mut f32, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_W: *mut f32, rs_W: integer, cs_W: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_ops_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opd_var4(m_AC: integer, buff_sgn: *mut f64, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_W: *mut f64, rs_W: integer, cs_W: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opd_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opc_var4(m_AC: integer, buff_sgn: *mut scomplex, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_W: *mut scomplex, rs_W: integer, cs_W: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opc_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLA_Lyap_h_opz_var4(m_AC: integer, buff_sgn: *mut dcomplex, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_W: *mut dcomplex, rs_W: integer, cs_W: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer) -> FLA_Error {
                dyload_lib().FLA_Lyap_h_opz_var4.unwrap()(m_AC, buff_sgn, buff_A, rs_A, cs_A, buff_W, rs_W, cs_W, buff_C, rs_C, cs_C)
            }

pub unsafe fn FLASH_Lyap(trans: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Lyap.unwrap()(trans, isgn, A, C, scale)
            }

pub unsafe fn FLA_Lyap(trans: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Lyap.unwrap()(trans, isgn, A, C, scale)
            }

pub unsafe fn FLA_Lyap_internal(trans: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_internal.unwrap()(trans, isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_n(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_n.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Lyap_h(isgn: FLA_Obj, A: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_lyap_t) -> FLA_Error {
                dyload_lib().FLA_Lyap_h.unwrap()(isgn, A, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_blk_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn_opt_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var1.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var2.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var3.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var4.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var5.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var6.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var7.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var8.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var9.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var10.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var11.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var12.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var13.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var14.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var15.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var16.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var17.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_opt_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opt_var18.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nn_ops_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer, buff_scale: *mut f32, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_ops_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nn_opd_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer, buff_scale: *mut f64, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opd_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nn_opc_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer, buff_scale: *mut scomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opc_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nn_opz_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer, buff_scale: *mut dcomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn_opz_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nh_blk_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_blk_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh_opt_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var1.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var2.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var3.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var4.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var5.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var6.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var7.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var8.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var9.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var10.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var11.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var12.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var13.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var14.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var15.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var16.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var17.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_opt_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opt_var18.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_nh_ops_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer, buff_scale: *mut f32, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_ops_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nh_opd_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer, buff_scale: *mut f64, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opd_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nh_opc_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer, buff_scale: *mut scomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opc_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_nh_opz_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer, buff_scale: *mut dcomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh_opz_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hn_blk_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_blk_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn_opt_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var1.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var2.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var3.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var4.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var5.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var6.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var7.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var8.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var9.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var10.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var11.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var12.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var13.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var14.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var15.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var16.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var17.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_opt_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opt_var18.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hn_ops_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer, buff_scale: *mut f32, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_ops_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hn_opd_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer, buff_scale: *mut f64, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opd_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hn_opc_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer, buff_scale: *mut scomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opc_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hn_opz_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer, buff_scale: *mut dcomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn_opz_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hh_blk_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var1.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var2.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var3.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var4.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var5.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var6.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var7.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var8.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var9.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var10.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var11.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var12.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var13.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var14.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var15.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var16.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var17.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_blk_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_blk_var18.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh_opt_var1(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var1.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var2(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var2.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var3(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var3.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var4(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var4.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var5(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var5.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var6(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var6.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var7(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var7.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var8(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var8.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var9(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var9.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var10(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var10.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var11(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var11.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var12(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var12.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var13(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var13.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var14(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var14.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var15(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var15.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var16(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var16.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var17(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var17.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_opt_var18(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opt_var18.unwrap()(isgn, A, B, C, scale)
            }

pub unsafe fn FLA_Sylv_hh_ops_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer, buff_C: *mut f32, rs_C: integer, cs_C: integer, buff_scale: *mut f32, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_ops_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hh_opd_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer, buff_C: *mut f64, rs_C: integer, cs_C: integer, buff_scale: *mut f64, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opd_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hh_opc_var1(sgn: f32, m_C: integer, n_C: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer, buff_C: *mut scomplex, rs_C: integer, cs_C: integer, buff_scale: *mut scomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opc_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_hh_opz_var1(sgn: f64, m_C: integer, n_C: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer, buff_C: *mut dcomplex, rs_C: integer, cs_C: integer, buff_scale: *mut dcomplex, info: *mut integer) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh_opz_var1.unwrap()(sgn, m_C, n_C, buff_A, rs_A, cs_A, buff_B, rs_B, cs_B, buff_C, rs_C, cs_C, buff_scale, info)
            }

pub unsafe fn FLA_Sylv_internal(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_internal.unwrap()(transa, transb, isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nn(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nn.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_nh(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_nh.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hn(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hn.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Sylv_hh(isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj, cntl: *mut fla_sylv_t) -> FLA_Error {
                dyload_lib().FLA_Sylv_hh.unwrap()(isgn, A, B, C, scale, cntl)
            }

pub unsafe fn FLA_Ttmm_l_blk_var1(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_l_blk_var2(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_l_blk_var3(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_l_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_l_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_l_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_l_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_l_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_l_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_l_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_l_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_blk_var1(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_blk_var1.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_u_blk_var2(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_blk_var2.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_u_blk_var3(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_blk_var3.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_u_unb_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_unb_var1.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_unb_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_unb_var2.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_unb_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_unb_var3.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_opt_var1(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opt_var1.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_ops_var1(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_ops_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opd_var1(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opd_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opc_var1(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opc_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opz_var1(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opz_var1.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opt_var2(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opt_var2.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_ops_var2(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_ops_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opd_var2(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opd_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opc_var2(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opc_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opz_var2(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opz_var2.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opt_var3(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opt_var3.unwrap()(A)
            }

pub unsafe fn FLA_Ttmm_u_ops_var3(mn_A: integer, A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_ops_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opd_var3(mn_A: integer, A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opd_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opc_var3(mn_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opc_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_u_opz_var3(mn_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u_opz_var3.unwrap()(mn_A, A, rs_A, cs_A)
            }

pub unsafe fn FLA_Ttmm_internal(uplo: FLA_Uplo, A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_internal.unwrap()(uplo, A, cntl)
            }

pub unsafe fn FLA_Ttmm_l(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_l.unwrap()(A, cntl)
            }

pub unsafe fn FLA_Ttmm_u(A: FLA_Obj, cntl: *mut fla_ttmm_t) -> FLA_Error {
                dyload_lib().FLA_Ttmm_u.unwrap()(A, cntl)
            }

pub unsafe fn FLA_UDdate_UT_blk_var1(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_uddateut_t) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_blk_var1.unwrap()(R, C, D, T, cntl)
            }

pub unsafe fn FLA_UDdate_UT_blk_var2(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_uddateut_t) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_blk_var2.unwrap()(R, C, D, T, cntl)
            }

pub unsafe fn FLA_UDdate_UT_unb_var1(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_unb_var1.unwrap()(R, C, D, T)
            }

pub unsafe fn FLA_UDdate_UT_opt_var1(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_opt_var1.unwrap()(R, C, D, T)
            }

pub unsafe fn FLA_UDdate_UT_ops_var1(mn_RT: integer, m_C: integer, m_D: integer, R: *mut f32, rs_R: integer, cs_R: integer, C: *mut f32, rs_C: integer, cs_C: integer, D: *mut f32, rs_D: integer, cs_D: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_ops_var1.unwrap()(mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_UDdate_UT_opd_var1(mn_RT: integer, m_C: integer, m_D: integer, R: *mut f64, rs_R: integer, cs_R: integer, C: *mut f64, rs_C: integer, cs_C: integer, D: *mut f64, rs_D: integer, cs_D: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_opd_var1.unwrap()(mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_UDdate_UT_opc_var1(mn_RT: integer, m_C: integer, m_D: integer, R: *mut scomplex, rs_R: integer, cs_R: integer, C: *mut scomplex, rs_C: integer, cs_C: integer, D: *mut scomplex, rs_D: integer, cs_D: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_opc_var1.unwrap()(mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_UDdate_UT_opz_var1(mn_RT: integer, m_C: integer, m_D: integer, R: *mut dcomplex, rs_R: integer, cs_R: integer, C: *mut dcomplex, rs_C: integer, cs_C: integer, D: *mut dcomplex, rs_D: integer, cs_D: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_opz_var1.unwrap()(mn_RT, m_C, m_D, R, rs_R, cs_R, C, rs_C, cs_C, D, rs_D, cs_D, T, rs_T, cs_T)
            }

pub unsafe fn FLA_UDdate_UT(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT.unwrap()(R, C, D, T)
            }

pub unsafe fn FLA_UDdate_UT_internal(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, cntl: *mut fla_uddateut_t) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_internal.unwrap()(R, C, D, T, cntl)
            }

pub unsafe fn FLA_UDdate_UT_create_T(R: FLA_Obj, T: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_create_T.unwrap()(R, T)
            }

pub unsafe fn FLA_UDdate_UT_update_rhs(T: FLA_Obj, bR: FLA_Obj, C: FLA_Obj, bC: FLA_Obj, D: FLA_Obj, bD: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_update_rhs.unwrap()(T, bR, C, bC, D, bD)
            }

pub unsafe fn FLA_UDdate_UT_solve(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_solve.unwrap()(R, bR, x)
            }

pub unsafe fn FLASH_UDdate_UT_inc(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_UDdate_UT_inc.unwrap()(R, C, D, T, W)
            }

pub unsafe fn FLA_UDdate_UT_inc_blk_var1(R: FLA_Obj, C: FLA_Obj, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, cntl: *mut fla_uddateutinc_t) -> FLA_Error {
                dyload_lib().FLA_UDdate_UT_inc_blk_var1.unwrap()(R, C, D, T, W, cntl)
            }

pub unsafe fn FLASH_UDdate_UT_inc_create_hier_matrices(R_flat: FLA_Obj, C_flat: FLA_Obj, D_flat: FLA_Obj, depth: fla_dim_t, b_flash: *mut fla_dim_t, b_alg: fla_dim_t, R: *mut FLA_Obj, C: *mut FLA_Obj, D: *mut FLA_Obj, T: *mut FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_UDdate_UT_inc_create_hier_matrices.unwrap()(R_flat, C_flat, D_flat, depth, b_flash, b_alg, R, C, D, T, W)
            }

pub unsafe fn FLASH_UDdate_UT_inc_determine_alg_blocksize(R: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_UDdate_UT_inc_determine_alg_blocksize.unwrap()(R)
            }

pub unsafe fn FLASH_UDdate_UT_inc_update_rhs(T: FLA_Obj, bR: FLA_Obj, C: FLA_Obj, bC: FLA_Obj, D: FLA_Obj, bD: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_UDdate_UT_inc_update_rhs.unwrap()(T, bR, C, bC, D, bD)
            }

pub unsafe fn FLASH_UDdate_UT_inc_solve(R: FLA_Obj, bR: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_UDdate_UT_inc_solve.unwrap()(R, bR, x)
            }

pub unsafe fn fla_idamax(n: *mut integer, dx: *mut doublereal, incx: *mut integer) -> integer {
                dyload_lib().fla_idamax.unwrap()(n, dx, incx)
            }

pub unsafe fn fla_idamax_small(n: *mut integer, dx: *mut doublereal, incx: *mut integer) -> integer {
                dyload_lib().fla_idamax_small.unwrap()(n, dx, incx)
            }

pub unsafe fn FLA_Accum_T_UT_fc_unb_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_unb_var1.unwrap()(A, t, T)
            }

pub unsafe fn FLA_Accum_T_UT_fc_blk_var2(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_blk_var2.unwrap()(A, t, T)
            }

pub unsafe fn FLA_Accum_T_UT_fc_opt_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_opt_var1.unwrap()(A, t, T)
            }

pub unsafe fn FLA_Accum_T_UT_fc_ops_var1(m_A: integer, n_AT: integer, A: *mut f32, rs_A: integer, cs_A: integer, m_t: integer, t: *mut f32, inc_t: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_ops_var1.unwrap()(m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fc_opd_var1(m_A: integer, n_AT: integer, A: *mut f64, rs_A: integer, cs_A: integer, m_t: integer, t: *mut f64, inc_t: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_opd_var1.unwrap()(m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fc_opc_var1(m_A: integer, n_AT: integer, A: *mut scomplex, rs_A: integer, cs_A: integer, m_t: integer, t: *mut scomplex, inc_t: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_opc_var1.unwrap()(m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fc_opz_var1(m_A: integer, n_AT: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer, m_t: integer, t: *mut dcomplex, inc_t: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fc_opz_var1.unwrap()(m_A, n_AT, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_unb_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_unb_var1.unwrap()(A, t, T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_blk_var2(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_blk_var2.unwrap()(A, t, T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_opt_var1(A: FLA_Obj, t: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_opt_var1.unwrap()(A, t, T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_ops_var1(m_A: integer, n_A: integer, A: *mut f32, rs_A: integer, cs_A: integer, m_t: integer, t: *mut f32, inc_t: integer, T: *mut f32, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_ops_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_opd_var1(m_A: integer, n_A: integer, A: *mut f64, rs_A: integer, cs_A: integer, m_t: integer, t: *mut f64, inc_t: integer, T: *mut f64, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_opd_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_opc_var1(m_A: integer, n_A: integer, A: *mut scomplex, rs_A: integer, cs_A: integer, m_t: integer, t: *mut scomplex, inc_t: integer, T: *mut scomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_opc_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_fr_opz_var1(m_A: integer, n_A: integer, A: *mut dcomplex, rs_A: integer, cs_A: integer, m_t: integer, t: *mut dcomplex, inc_t: integer, T: *mut dcomplex, rs_T: integer, cs_T: integer) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_fr_opz_var1.unwrap()(m_A, n_A, A, rs_A, cs_A, m_t, t, inc_t, T, rs_T, cs_T)
            }

pub unsafe fn FLA_Accum_T_UT_internal(direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, tau: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Accum_T_UT_internal.unwrap()(direct, storev, A, tau, T)
            }

pub unsafe fn FLA_Apply_G_lf_opt_var1(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lf_opt_var1.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_lf_blk_var3(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lf_blk_var3.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_lb_opt_var1(c: FLA_Obj, s: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lb_opt_var1.unwrap()(c, s, A)
            }

pub unsafe fn FLA_Apply_G_lb_ops_var1(m_A: integer, n_A: integer, buff_c: *mut f32, inc_c: integer, buff_s: *mut f32, inc_s: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lb_ops_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_lb_opd_var1(m_A: integer, n_A: integer, buff_c: *mut f64, inc_c: integer, buff_s: *mut f64, inc_s: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lb_opd_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_lb_opc_var1(m_A: integer, n_A: integer, buff_c: *mut f32, inc_c: integer, buff_s: *mut f32, inc_s: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lb_opc_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_lb_opz_var1(m_A: integer, n_A: integer, buff_c: *mut f64, inc_c: integer, buff_s: *mut f64, inc_s: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_lb_opz_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var1(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var1.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var1(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var1.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var1(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var1.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var1(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var1.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var2(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var2.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var2(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var2.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var2(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var2.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var2(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var2.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var3(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var3.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var3(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var3.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var3(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var3.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var4(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var4.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var4(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var4.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var4(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var4.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var4(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var4.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var5(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var5.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var5(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var5.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var5(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var5.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var5(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var5.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var6(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var6.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var6(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var6.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var6(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var6.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var6(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var6.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var7(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var7.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var7(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var7.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var7(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var7.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var7(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var7.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var8(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var8.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var8(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var8.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var8(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var8.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var8(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var8.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_opt_var9(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opt_var9.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ops_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ops_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opd_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opd_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opc_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opc_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_opz_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_opz_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var9(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var9.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var9(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var9.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var9(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var9.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var3b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var3b.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var3b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var3b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var3b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var3b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var3b(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var3b.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var3b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var3b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var3b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var3b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var3b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var5b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var5b.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var5b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var5b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var5b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var5b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var5b(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var5b.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var5b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var5b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var5b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var5b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var5b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var6b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var6b.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var6b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var6b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var6b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var6b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var6b(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var6b.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var6b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var6b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var6b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var6b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var6b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var8b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var8b.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var8b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var8b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var8b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var8b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var8b(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var8b.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var8b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var8b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var8b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var8b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var8b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bhs_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bhs_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bhd_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bhd_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bhc_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bhc_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bhz_var3(k_G: integer, m_A: integer, n_A: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut FLA_Obj, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bhz_var3.unwrap()(k_G, m_A, n_A, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_asm_var9b(G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asm_var9b.unwrap()(G, A)
            }

pub unsafe fn FLA_Apply_G_rf_ass_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_ass_var9b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asd_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asd_var9b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asc_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asc_var9b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_asz_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, iTL: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_asz_var9b.unwrap()(k_G, m_A, n_A, i_k, iTL, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rf_blk_var9b(G: FLA_Obj, A: FLA_Obj, b_alg: fla_dim_t) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blk_var9b.unwrap()(G, A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bls_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bls_var9b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_bld_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_bld_var9b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blc_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut scomplex, rs_G: integer, cs_G: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blc_var9b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rf_blz_var9b(k_G: integer, m_A: integer, n_A: integer, i_k: integer, buff_G: *mut dcomplex, rs_G: integer, cs_G: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, b_alg: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rf_blz_var9b.unwrap()(k_G, m_A, n_A, i_k, buff_G, rs_G, cs_G, buff_A, rs_A, cs_A, b_alg)
            }

pub unsafe fn FLA_Apply_G_rb_opt_var1(c: FLA_Obj, s: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rb_opt_var1.unwrap()(c, s, A)
            }

pub unsafe fn FLA_Apply_G_rb_ops_var1(m_A: integer, n_A: integer, buff_c: *mut f32, inc_c: integer, buff_s: *mut f32, inc_s: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rb_ops_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rb_opd_var1(m_A: integer, n_A: integer, buff_c: *mut f64, inc_c: integer, buff_s: *mut f64, inc_s: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rb_opd_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rb_opc_var1(m_A: integer, n_A: integer, buff_c: *mut f32, inc_c: integer, buff_s: *mut f32, inc_s: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rb_opc_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G_rb_opz_var1(m_A: integer, n_A: integer, buff_c: *mut f64, inc_c: integer, buff_s: *mut f64, inc_s: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_G_rb_opz_var1.unwrap()(m_A, n_A, buff_c, inc_c, buff_s, inc_s, buff_A, rs_A, cs_A)
            }

pub unsafe fn FLA_Apply_G(side: FLA_Side, direct: FLA_Direct, G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G.unwrap()(side, direct, G, A)
            }

pub unsafe fn FLA_Apply_G_internal(side: FLA_Side, direct: FLA_Direct, G: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_G_internal.unwrap()(side, direct, G, A)
            }

pub unsafe fn FLA_Givens2(chi_1: FLA_Obj, chi_2: FLA_Obj, gamma: FLA_Obj, sigma: FLA_Obj, chi_1_new: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Givens2.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
            }

pub unsafe fn FLA_Givens2_ops(chi_1: *mut f32, chi_2: *mut f32, gamma: *mut f32, sigma: *mut f32, chi_1_new: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Givens2_ops.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
            }

pub unsafe fn FLA_Givens2_opd(chi_1: *mut f64, chi_2: *mut f64, gamma: *mut f64, sigma: *mut f64, chi_1_new: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Givens2_opd.unwrap()(chi_1, chi_2, gamma, sigma, chi_1_new)
            }

pub unsafe fn FLA_Apply_GTG(gamma: FLA_Obj, sigma: FLA_Obj, delta1: FLA_Obj, epsilon1: FLA_Obj, delta2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_GTG.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
            }

pub unsafe fn FLA_Apply_GTG_ops(gamma: *mut f32, sigma: *mut f32, delta1: *mut f32, epsilon1: *mut f32, delta2: *mut f32) -> FLA_Error {
                dyload_lib().FLA_Apply_GTG_ops.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
            }

pub unsafe fn FLA_Apply_GTG_opd(gamma: *mut f64, sigma: *mut f64, delta1: *mut f64, epsilon1: *mut f64, delta2: *mut f64) -> FLA_Error {
                dyload_lib().FLA_Apply_GTG_opd.unwrap()(gamma, sigma, delta1, epsilon1, delta2)
            }

pub unsafe fn FLA_Apply_H2_UT_l_unb_var1(tau: FLA_Obj, u2: FLA_Obj, a1t: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_l_unb_var1.unwrap()(tau, u2, a1t, A2)
            }

pub unsafe fn FLA_Apply_H2_UT_l_opt_var1(tau: FLA_Obj, u2: FLA_Obj, a1t: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_l_opt_var1.unwrap()(tau, u2, a1t, A2)
            }

pub unsafe fn FLA_Apply_H2_UT_l_ops_var1(m_u2_A2: integer, n_a1t: integer, tau: *mut f32, u2: *mut f32, inc_u2: integer, a1t: *mut f32, inc_a1t: integer, A2: *mut f32, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_l_ops_var1.unwrap()(m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_l_opd_var1(m_u2_A2: integer, n_a1t: integer, tau: *mut f64, u2: *mut f64, inc_u2: integer, a1t: *mut f64, inc_a1t: integer, A2: *mut f64, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_l_opd_var1.unwrap()(m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_l_opc_var1(m_u2_A2: integer, n_a1t: integer, tau: *mut scomplex, u2: *mut scomplex, inc_u2: integer, a1t: *mut scomplex, inc_a1t: integer, A2: *mut scomplex, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_l_opc_var1.unwrap()(m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_l_opz_var1(m_u2_A2: integer, n_a1t: integer, tau: *mut dcomplex, u2: *mut dcomplex, inc_u2: integer, a1t: *mut dcomplex, inc_a1t: integer, A2: *mut dcomplex, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_l_opz_var1.unwrap()(m_u2_A2, n_a1t, tau, u2, inc_u2, a1t, inc_a1t, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_r_unb_var1(tau: FLA_Obj, u2h: FLA_Obj, a1: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_r_unb_var1.unwrap()(tau, u2h, a1, A2)
            }

pub unsafe fn FLA_Apply_H2_UT_r_opt_var1(tau: FLA_Obj, u2h: FLA_Obj, a1: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_r_opt_var1.unwrap()(tau, u2h, a1, A2)
            }

pub unsafe fn FLA_Apply_H2_UT_r_ops_var1(n_u2h_A2: integer, m_a1: integer, tau: *mut f32, u2h: *mut f32, inc_u2h: integer, a1: *mut f32, inc_a1: integer, A2: *mut f32, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_r_ops_var1.unwrap()(n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_r_opd_var1(n_u2h_A2: integer, m_a1: integer, tau: *mut f64, u2h: *mut f64, inc_u2h: integer, a1: *mut f64, inc_a1: integer, A2: *mut f64, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_r_opd_var1.unwrap()(n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_r_opc_var1(n_u2h_A2: integer, m_a1: integer, tau: *mut scomplex, u2h: *mut scomplex, inc_u2h: integer, a1: *mut scomplex, inc_a1: integer, A2: *mut scomplex, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_r_opc_var1.unwrap()(n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_r_opz_var1(n_u2h_A2: integer, m_a1: integer, tau: *mut dcomplex, u2h: *mut dcomplex, inc_u2h: integer, a1: *mut dcomplex, inc_a1: integer, A2: *mut dcomplex, rs_A2: integer, cs_A2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_r_opz_var1.unwrap()(n_u2h_A2, m_a1, tau, u2h, inc_u2h, a1, inc_a1, A2, rs_A2, cs_A2)
            }

pub unsafe fn FLA_Apply_H2_UT_internal(side: FLA_Side, tau: FLA_Obj, u2: FLA_Obj, a1: FLA_Obj, A2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_H2_UT_internal.unwrap()(side, tau, u2, a1, A2)
            }

pub unsafe fn FLA_Apply_HUD_UT_l_unb_var1(tau: FLA_Obj, w12t: FLA_Obj, r12t: FLA_Obj, u1: FLA_Obj, C2: FLA_Obj, v1: FLA_Obj, D2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_l_unb_var1.unwrap()(tau, w12t, r12t, u1, C2, v1, D2)
            }

pub unsafe fn FLA_Apply_HUD_UT_l_opt_var1(tau: FLA_Obj, w12t: FLA_Obj, r12t: FLA_Obj, u1: FLA_Obj, C2: FLA_Obj, v1: FLA_Obj, D2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_l_opt_var1.unwrap()(tau, w12t, r12t, u1, C2, v1, D2)
            }

pub unsafe fn FLA_Apply_HUD_UT_l_ops_var1(m_u1_C2: integer, m_v1_D2: integer, n_r12t: integer, tau: *mut f32, w12t: *mut f32, inc_w12t: integer, r12t: *mut f32, inc_r12t: integer, u1: *mut f32, inc_u1: integer, C2: *mut f32, rs_C2: integer, cs_C2: integer, v1: *mut f32, inc_v1: integer, D2: *mut f32, rs_D2: integer, cs_D2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_l_ops_var1.unwrap()(m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2, cs_C2, v1, inc_v1, D2, rs_D2, cs_D2)
            }

pub unsafe fn FLA_Apply_HUD_UT_l_opd_var1(m_u1_C2: integer, m_v1_D2: integer, n_r12t: integer, tau: *mut f64, w12t: *mut f64, inc_w12t: integer, r12t: *mut f64, inc_r12t: integer, u1: *mut f64, inc_u1: integer, C2: *mut f64, rs_C2: integer, cs_C2: integer, v1: *mut f64, inc_v1: integer, D2: *mut f64, rs_D2: integer, cs_D2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_l_opd_var1.unwrap()(m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2, cs_C2, v1, inc_v1, D2, rs_D2, cs_D2)
            }

pub unsafe fn FLA_Apply_HUD_UT_l_opc_var1(m_u1_C2: integer, m_v1_D2: integer, n_r12t: integer, tau: *mut scomplex, w12t: *mut scomplex, inc_w12t: integer, r12t: *mut scomplex, inc_r12t: integer, u1: *mut scomplex, inc_u1: integer, C2: *mut scomplex, rs_C2: integer, cs_C2: integer, v1: *mut scomplex, inc_v1: integer, D2: *mut scomplex, rs_D2: integer, cs_D2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_l_opc_var1.unwrap()(m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2, cs_C2, v1, inc_v1, D2, rs_D2, cs_D2)
            }

pub unsafe fn FLA_Apply_HUD_UT_l_opz_var1(m_u1_C2: integer, m_v1_D2: integer, n_r12t: integer, tau: *mut dcomplex, w12t: *mut dcomplex, inc_w12t: integer, r12t: *mut dcomplex, inc_r12t: integer, u1: *mut dcomplex, inc_u1: integer, C2: *mut dcomplex, rs_C2: integer, cs_C2: integer, v1: *mut dcomplex, inc_v1: integer, D2: *mut dcomplex, rs_D2: integer, cs_D2: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_l_opz_var1.unwrap()(m_u1_C2, m_v1_D2, n_r12t, tau, w12t, inc_w12t, r12t, inc_r12t, u1, inc_u1, C2, rs_C2, cs_C2, v1, inc_v1, D2, rs_D2, cs_D2)
            }

pub unsafe fn FLA_Apply_HUD_UT_internal(side: FLA_Side, tau: FLA_Obj, w12t: FLA_Obj, r12t: FLA_Obj, u1: FLA_Obj, C2: FLA_Obj, v1: FLA_Obj, D2: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_HUD_UT_internal.unwrap()(side, tau, w12t, r12t, u1, C2, v1, D2)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfc_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfc_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfc_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfc_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfc_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfc_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfr_blk_var1(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfr_blk_var1.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfr_blk_var2(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfr_blk_var2.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfr_blk_var3(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfr_blk_var3.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_internal.unwrap()(side, trans, direct, storev, A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnfr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnfr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lnbr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lnbr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhfr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhfr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_lhbr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_lhbr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhbr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhbr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rhfr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rhfr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnbr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnbr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfc(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfc.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_rnfr(A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_rnfr.unwrap()(A, T, W, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_create_workspace(T: FLA_Obj, B: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_create_workspace.unwrap()(T, B, W)
            }

pub unsafe fn FLA_Apply_Q_UT_create_workspace_side(side: FLA_Side, T: FLA_Obj, B: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_create_workspace_side.unwrap()(side, T, B, W)
            }

pub unsafe fn FLASH_Apply_Q_UT(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, T: FLA_Obj, W: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_Q_UT.unwrap()(side, trans, direct, storev, A, T, W, B)
            }

pub unsafe fn FLASH_Apply_Q_UT_create_workspace(TW: FLA_Obj, B: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_Q_UT_create_workspace.unwrap()(TW, B, W)
            }

pub unsafe fn FLA_Apply_Q2_UT_lhfc_blk_var1(D: FLA_Obj, T: FLA_Obj, W1: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lhfc_blk_var1.unwrap()(D, T, W1, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lhfc_blk_var2(D: FLA_Obj, T: FLA_Obj, W1: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lhfc_blk_var2.unwrap()(D, T, W1, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lhfc_blk_var3(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lhfc_blk_var3.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lnfc_blk_var1(D: FLA_Obj, T: FLA_Obj, W1: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lnfc_blk_var1.unwrap()(D, T, W1, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lnfc_blk_var2(D: FLA_Obj, T: FLA_Obj, W1: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lnfc_blk_var2.unwrap()(D, T, W1, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lnfc_blk_var3(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lnfc_blk_var3.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLASH_Apply_Q2_UT(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_Q2_UT.unwrap()(side, trans, direct, storev, D, T, W, C, E)
            }

pub unsafe fn FLA_Apply_Q2_UT_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_internal.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lhfc(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lhfc.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_Q2_UT_lnfc(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q2_UT_lnfc.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_blk_var1(D: FLA_Obj, T: FLA_Obj, W1: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_lhfc_blk_var1.unwrap()(D, T, W1, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_blk_var2(D: FLA_Obj, T: FLA_Obj, W1: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_lhfc_blk_var2.unwrap()(D, T, W1, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc_blk_var3(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_lhfc_blk_var3.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_internal.unwrap()(side, trans, direct, storev, D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_CAQ2_UT_lhfc(D: FLA_Obj, T: FLA_Obj, W: FLA_Obj, C: FLA_Obj, E: FLA_Obj, cntl: *mut fla_apcaq2ut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ2_UT_lhfc.unwrap()(D, T, W, C, E, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_lhfc_blk_var1(T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_lhfc_blk_var1.unwrap()(T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_lhfc_blk_var2(T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_lhfc_blk_var2.unwrap()(T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_lhfc_blk_var3(T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_lhfc_blk_var3.unwrap()(T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
            }

pub unsafe fn FLA_Apply_QUD_UT_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_internal.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_lhfc(T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudut_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_lhfc.unwrap()(T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_create_workspace(T: FLA_Obj, R: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_create_workspace.unwrap()(T, R, W)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_lhfc_blk_var1(A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_lhfc_blk_var1.unwrap()(A, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_lnfc_blk_var1(A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_lnfc_blk_var1.unwrap()(A, TW, W1, B, cntl)
            }

pub unsafe fn FLASH_Apply_Q_UT_inc(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_Q_UT_inc.unwrap()(side, trans, direct, storev, A, TW, W1, B)
            }

pub unsafe fn FLASH_Apply_Q_UT_inc_create_workspace(TW: FLA_Obj, B: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_Q_UT_inc_create_workspace.unwrap()(TW, B, W)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_internal.unwrap()(side, trans, direct, storev, A, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_lhfc(A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_lhfc.unwrap()(A, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_Q_UT_inc_lnfc(A: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_Q_UT_inc_lnfc.unwrap()(A, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_CAQ_UT_inc_lhfc_blk_var1(R: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apcaqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ_UT_inc_lhfc_blk_var1.unwrap()(R, TW, W1, B, cntl)
            }

pub unsafe fn FLASH_Apply_CAQ_UT_inc(p: fla_dim_t, side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, A: FLA_Obj, ATW: FLA_Obj, R: FLA_Obj, RTW: FLA_Obj, W: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_CAQ_UT_inc.unwrap()(p, side, trans, direct, storev, A, ATW, R, RTW, W, B)
            }

pub unsafe fn FLA_Apply_CAQ_UT_inc_apply_panels(nb_part: fla_dim_t, A: FLA_Obj, ATW: FLA_Obj, W: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ_UT_inc_apply_panels.unwrap()(nb_part, A, ATW, W, B)
            }

pub unsafe fn FLASH_Apply_CAQ_UT_inc_create_workspace(p: fla_dim_t, TW: FLA_Obj, B: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_CAQ_UT_inc_create_workspace.unwrap()(p, TW, B, W)
            }

pub unsafe fn FLA_Apply_CAQ_UT_inc_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, R: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apcaqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ_UT_inc_internal.unwrap()(side, trans, direct, storev, R, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_CAQ_UT_inc_lhfc(R: FLA_Obj, TW: FLA_Obj, W1: FLA_Obj, B: FLA_Obj, cntl: *mut fla_apcaqutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_CAQ_UT_inc_lhfc.unwrap()(R, TW, W1, B, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_inc_lhfc_blk_var1(T: FLA_Obj, W: FLA_Obj, B: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_inc_lhfc_blk_var1.unwrap()(T, W, B, U, C, V, D, cntl)
            }

pub unsafe fn FLASH_Apply_QUD_UT_inc(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_QUD_UT_inc.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D)
            }

pub unsafe fn FLA_Apply_QUD_UT_inc_internal(side: FLA_Side, trans: FLA_Trans, direct: FLA_Direct, storev: FLA_Store, T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_inc_internal.unwrap()(side, trans, direct, storev, T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLA_Apply_QUD_UT_inc_lhfc(T: FLA_Obj, W: FLA_Obj, R: FLA_Obj, U: FLA_Obj, C: FLA_Obj, V: FLA_Obj, D: FLA_Obj, cntl: *mut fla_apqudutinc_t) -> FLA_Error {
                dyload_lib().FLA_Apply_QUD_UT_inc_lhfc.unwrap()(T, W, R, U, C, V, D, cntl)
            }

pub unsafe fn FLASH_Apply_QUD_UT_inc_create_workspace(T: FLA_Obj, R: FLA_Obj, W: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_QUD_UT_inc_create_workspace.unwrap()(T, R, W)
            }

pub unsafe fn FLA_Apply_pivots_ln_blk_var1(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_blk_var1.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_ln_blk_var2(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_blk_var2.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_ln_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_opt_var1.unwrap()(p, A)
            }

pub unsafe fn FLA_Apply_pivots_ln_opi_var1(n: integer, a: *mut integer, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_opi_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_ln_ops_var1(n: integer, a: *mut f32, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_ops_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_ln_opd_var1(n: integer, a: *mut f64, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_opd_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_ln_opc_var1(n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_opc_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_ln_opz_var1(n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln_opz_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_lt_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_lt_opt_var1.unwrap()(p, A)
            }

pub unsafe fn FLA_Apply_pivots_rn_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rn_opt_var1.unwrap()(p, A)
            }

pub unsafe fn FLA_Apply_pivots_rn_ops_var1(n: integer, a: *mut f32, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rn_ops_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_rn_opd_var1(n: integer, a: *mut f64, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rn_opd_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_rn_opc_var1(n: integer, a: *mut scomplex, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rn_opc_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_rn_opz_var1(n: integer, a: *mut dcomplex, a_rs: integer, a_cs: integer, k1: integer, k2: integer, p: *mut integer, incp: integer) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rn_opz_var1.unwrap()(n, a, a_rs, a_cs, k1, k2, p, incp)
            }

pub unsafe fn FLA_Apply_pivots_rt_opt_var1(p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rt_opt_var1.unwrap()(p, A)
            }

pub unsafe fn FLA_Apply_pivots_internal(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_internal.unwrap()(side, trans, p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_ln(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_ln.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_lt(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_lt.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_rn(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rn.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Apply_pivots_rt(p: FLA_Obj, A: FLA_Obj, cntl: *mut fla_appiv_t) -> FLA_Error {
                dyload_lib().FLA_Apply_pivots_rt.unwrap()(p, A, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_blk_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_blk_var1.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_blk_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_blk_var2.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_blk_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_blk_var3.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_blk_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_blk_var4.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_blk_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_blk_var5.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_unb_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_unb_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_unb_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_unb_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_unb_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opt_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_ops_var1(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_ops_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opd_var1(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opd_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opc_var1(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opc_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opz_var1(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opz_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opt_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_ops_var2(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_ops_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opd_var2(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opd_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opc_var2(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opc_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opz_var2(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opz_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opt_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_ops_var3(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_ops_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opd_var3(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opd_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opc_var3(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opc_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opz_var3(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opz_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opt_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_ops_var4(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_ops_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opd_var4(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opd_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opc_var4(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opc_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opz_var4(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opz_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opt_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_il_ops_var5(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_ops_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opd_var5(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opd_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opc_var5(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opc_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_il_opz_var5(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il_opz_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_blk_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_blk_var1.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu_blk_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_blk_var2.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu_blk_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_blk_var3.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu_blk_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_blk_var4.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu_blk_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_blk_var5.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_unb_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_unb_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_unb_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_unb_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_unb_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opt_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_ops_var1(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_ops_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opd_var1(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opd_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opc_var1(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opc_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opz_var1(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opz_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opt_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_ops_var2(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_ops_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opd_var2(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opd_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opc_var2(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opc_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opz_var2(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opz_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opt_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_ops_var3(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_Y: *mut f32, rs_Y: integer, cs_Y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_ops_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opd_var3(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_Y: *mut f64, rs_Y: integer, cs_Y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opd_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opc_var3(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_Y: *mut scomplex, rs_Y: integer, cs_Y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opc_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opz_var3(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_Y: *mut dcomplex, rs_Y: integer, cs_Y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opz_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_Y, rs_Y, cs_Y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opt_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_ops_var4(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_ops_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opd_var4(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opd_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opc_var4(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opc_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opz_var4(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opz_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opt_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_iu_ops_var5(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_ops_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opd_var5(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opd_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opc_var5(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opc_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_iu_opz_var5(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu_opz_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_blk_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_blk_var1.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl_blk_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_blk_var2.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl_blk_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_blk_var3.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl_blk_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_blk_var4.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl_blk_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_blk_var5.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_unb_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_unb_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_unb_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_unb_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_unb_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opt_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_ops_var1(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_ops_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opd_var1(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opd_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opc_var1(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opc_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opz_var1(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opz_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opt_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_ops_var2(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_ops_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opd_var2(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opd_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opc_var2(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opc_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opz_var2(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opz_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opt_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_ops_var3(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_ops_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opd_var3(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opd_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opc_var3(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opc_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opz_var3(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opz_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opt_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_ops_var4(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_ops_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opd_var4(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opd_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opc_var4(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opc_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opz_var4(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opz_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opt_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nl_ops_var5(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_ops_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opd_var5(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opd_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opc_var5(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opc_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nl_opz_var5(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl_opz_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_blk_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_blk_var1.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu_blk_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_blk_var2.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu_blk_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_blk_var3.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu_blk_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_blk_var4.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu_blk_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_blk_var5.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu_unb_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_unb_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_unb_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_unb_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_unb_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_unb_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_unb_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_unb_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_unb_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_unb_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_opt_var1(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opt_var1.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_ops_var1(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_ops_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opd_var1(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opd_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opc_var1(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opc_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opz_var1(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opz_var1.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opt_var2(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opt_var2.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_ops_var2(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_ops_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opd_var2(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opd_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opc_var2(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opc_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opz_var2(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opz_var2.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opt_var3(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opt_var3.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_ops_var3(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_ops_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opd_var3(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opd_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opc_var3(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opc_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opz_var3(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opz_var3.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opt_var4(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opt_var4.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_ops_var4(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_ops_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opd_var4(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opd_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opc_var4(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opc_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opz_var4(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opz_var4.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opt_var5(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opt_var5.unwrap()(A, Y, B)
            }

pub unsafe fn FLA_Eig_gest_nu_ops_var5(m_AB: integer, buff_A: *mut f32, rs_A: integer, cs_A: integer, buff_y: *mut f32, inc_y: integer, buff_B: *mut f32, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_ops_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opd_var5(m_AB: integer, buff_A: *mut f64, rs_A: integer, cs_A: integer, buff_y: *mut f64, inc_y: integer, buff_B: *mut f64, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opd_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opc_var5(m_AB: integer, buff_A: *mut scomplex, rs_A: integer, cs_A: integer, buff_y: *mut scomplex, inc_y: integer, buff_B: *mut scomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opc_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_nu_opz_var5(m_AB: integer, buff_A: *mut dcomplex, rs_A: integer, cs_A: integer, buff_y: *mut dcomplex, inc_y: integer, buff_B: *mut dcomplex, rs_B: integer, cs_B: integer) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu_opz_var5.unwrap()(m_AB, buff_A, rs_A, cs_A, buff_y, inc_y, buff_B, rs_B, cs_B)
            }

pub unsafe fn FLA_Eig_gest_internal(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_internal.unwrap()(inv, uplo, A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_il(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_il.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_iu(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_iu.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nl(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nl.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLA_Eig_gest_nu(A: FLA_Obj, Y: FLA_Obj, B: FLA_Obj, cntl: *mut fla_eig_gest_t) -> FLA_Error {
                dyload_lib().FLA_Eig_gest_nu.unwrap()(A, Y, B, cntl)
            }

pub unsafe fn FLASH_Obj_blocksizes_check(H: FLA_Obj, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_Obj_blocksizes_check.unwrap()(H, b_m, b_n)
            }

pub unsafe fn FLASH_Obj_create_helper_check(without_buffer: FLA_Bool, datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_helper_check.unwrap()(without_buffer, datatype, m, n, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_hierarchy_check(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, elem_sizes_m: *mut fla_dim_t, elem_sizes_n: *mut fla_dim_t, flat_matrix: FLA_Obj, H: *mut FLA_Obj, id: c_ulong, depth_overall: fla_dim_t, depth_sizes_m: *mut fla_dim_t, depth_sizes_n: *mut fla_dim_t, m_offsets: *mut fla_dim_t, n_offsets: *mut fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hierarchy_check.unwrap()(datatype, m, n, depth, elem_sizes_m, elem_sizes_n, flat_matrix, H, id, depth_overall, depth_sizes_m, depth_sizes_n, m_offsets, n_offsets)
            }

pub unsafe fn FLASH_Obj_create_conf_to_check(trans: FLA_Trans, H_cur: FLA_Obj, H_new: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_conf_to_check.unwrap()(trans, H_cur, H_new)
            }

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat_check(trans: FLA_Trans, F: FLA_Obj, depth: fla_dim_t, b_mn: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_conf_to_flat_check.unwrap()(trans, F, depth, b_mn, H)
            }

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat_ext_check(trans: FLA_Trans, F: FLA_Obj, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_conf_to_flat_ext_check.unwrap()(trans, F, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_flat_conf_to_hier_check(trans: FLA_Trans, H: FLA_Obj, F: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_flat_conf_to_hier_check.unwrap()(trans, H, F)
            }

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat_check(F: FLA_Obj, depth: fla_dim_t, b_mn: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_copy_of_flat_check.unwrap()(F, depth, b_mn, H)
            }

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat_ext_check(F: FLA_Obj, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_copy_of_flat_ext_check.unwrap()(F, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_flat_copy_of_hier_check(H: FLA_Obj, F: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_flat_copy_of_hier_check.unwrap()(H, F)
            }

pub unsafe fn FLASH_Obj_free_check(H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_free_check.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_free_without_buffer_check(H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_free_without_buffer_check.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_free_hierarchy_check(H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_free_hierarchy_check.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_attach_buffer_check(buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_attach_buffer_check.unwrap()(buffer, rs, cs, H)
            }

pub unsafe fn FLASH_Obj_attach_buffer_hierarchy_check(F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_attach_buffer_hierarchy_check.unwrap()(F, H)
            }

pub unsafe fn FLASH_Part_create_2x1(A: FLA_Obj, AT: *mut FLA_Obj, AB: *mut FLA_Obj, n_rows: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLASH_Part_create_2x1.unwrap()(A, AT, AB, n_rows, side)
            }

pub unsafe fn FLASH_Part_create_1x2(A: FLA_Obj, AL: *mut FLA_Obj, AR: *mut FLA_Obj, n_cols: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLASH_Part_create_1x2.unwrap()(A, AL, AR, n_cols, side)
            }

pub unsafe fn FLASH_Part_create_2x2(A: FLA_Obj, ATL: *mut FLA_Obj, ATR: *mut FLA_Obj, ABL: *mut FLA_Obj, ABR: *mut FLA_Obj, n_rows: fla_dim_t, n_cols: fla_dim_t, side: FLA_Side) -> FLA_Error {
                dyload_lib().FLASH_Part_create_2x2.unwrap()(A, ATL, ATR, ABL, ABR, n_rows, n_cols, side)
            }

pub unsafe fn FLASH_Part_free_2x1(AT: *mut FLA_Obj, AB: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Part_free_2x1.unwrap()(AT, AB)
            }

pub unsafe fn FLASH_Part_free_1x2(AL: *mut FLA_Obj, AR: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Part_free_1x2.unwrap()(AL, AR)
            }

pub unsafe fn FLASH_Part_free_2x2(ATL: *mut FLA_Obj, ATR: *mut FLA_Obj, ABL: *mut FLA_Obj, ABR: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Part_free_2x2.unwrap()(ATL, ATR, ABL, ABR)
            }

pub unsafe fn FLASH_Obj_adjust_views(attach_buffer: FLA_Bool, offm: fla_dim_t, offn: fla_dim_t, m: fla_dim_t, n: fla_dim_t, A: FLA_Obj, S: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_adjust_views.unwrap()(attach_buffer, offm, offn, m, n, A, S)
            }

pub unsafe fn FLASH_Obj_adjust_views_hierarchy(attach_buffer: FLA_Bool, offm: fla_dim_t, offn: fla_dim_t, m: fla_dim_t, n: fla_dim_t, A: FLA_Obj, S: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_adjust_views_hierarchy.unwrap()(attach_buffer, offm, offn, m, n, A, S)
            }

pub unsafe fn FLASH_Obj_scalar_length(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_length.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_width(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_width.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_min_dim(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_min_dim.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_max_dim(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_max_dim.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_vector_dim(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_vector_dim.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_row_offset(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_row_offset.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_col_offset(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_col_offset.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_length_tl(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_length_tl.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_scalar_width_tl(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_scalar_width_tl.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_base_scalar_length(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_base_scalar_length.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_base_scalar_width(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_base_scalar_width.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_show(header: *mut c_char, H: FLA_Obj, elem_format: *mut c_char, footer: *mut c_char) -> FLA_Error {
                dyload_lib().FLASH_Obj_show.unwrap()(header, H, elem_format, footer)
            }

pub unsafe fn FLASH_Obj_show_hierarchy(H: FLA_Obj, i: fla_dim_t, elem_format: *mut c_char) -> FLA_Error {
                dyload_lib().FLASH_Obj_show_hierarchy.unwrap()(H, i, elem_format)
            }

pub unsafe fn FLASH_Axpy_buffer_to_hier(alpha: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, i: fla_dim_t, j: fla_dim_t, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Axpy_buffer_to_hier.unwrap()(alpha, m, n, buffer, rs, cs, i, j, H)
            }

pub unsafe fn FLASH_Axpy_hier_to_buffer(alpha: FLA_Obj, i: fla_dim_t, j: fla_dim_t, H: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_Axpy_hier_to_buffer.unwrap()(alpha, i, j, H, m, n, buffer, rs, cs)
            }

pub unsafe fn FLASH_Axpy_flat_to_hier(alpha: FLA_Obj, F: FLA_Obj, i: fla_dim_t, j: fla_dim_t, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Axpy_flat_to_hier.unwrap()(alpha, F, i, j, H)
            }

pub unsafe fn FLASH_Axpy_hier_to_flat(alpha: FLA_Obj, i: fla_dim_t, j: fla_dim_t, H: FLA_Obj, F: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Axpy_hier_to_flat.unwrap()(alpha, i, j, H, F)
            }

pub unsafe fn FLASH_Axpy_hierarchy(direction: c_int, alpha: FLA_Obj, F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Axpy_hierarchy.unwrap()(direction, alpha, F, H)
            }

pub unsafe fn FLASH_Copy_buffer_to_hier(m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, i: fla_dim_t, j: fla_dim_t, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copy_buffer_to_hier.unwrap()(m, n, buffer, rs, cs, i, j, H)
            }

pub unsafe fn FLASH_Copy_hier_to_buffer(i: fla_dim_t, j: fla_dim_t, H: FLA_Obj, m: fla_dim_t, n: fla_dim_t, buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_Copy_hier_to_buffer.unwrap()(i, j, H, m, n, buffer, rs, cs)
            }

pub unsafe fn FLASH_Copy_flat_to_hier(F: FLA_Obj, i: fla_dim_t, j: fla_dim_t, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copy_flat_to_hier.unwrap()(F, i, j, H)
            }

pub unsafe fn FLASH_Copy_hier_to_flat(i: fla_dim_t, j: fla_dim_t, H: FLA_Obj, F: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copy_hier_to_flat.unwrap()(i, j, H, F)
            }

pub unsafe fn FLASH_Copy_hierarchy(direction: c_int, F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copy_hierarchy.unwrap()(direction, F, H)
            }

pub unsafe fn FLASH_Obj_datatype(H: FLA_Obj) -> FLA_Datatype {
                dyload_lib().FLASH_Obj_datatype.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_depth(H: FLA_Obj) -> fla_dim_t {
                dyload_lib().FLASH_Obj_depth.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_blocksizes(H: FLA_Obj, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t) -> fla_dim_t {
                dyload_lib().FLASH_Obj_blocksizes.unwrap()(H, b_m, b_n)
            }

pub unsafe fn FLASH_Obj_create(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, b_mn: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create.unwrap()(datatype, m, n, depth, b_mn, H)
            }

pub unsafe fn FLASH_Obj_create_ext(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_ext.unwrap()(datatype, m, n, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_without_buffer(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, b_mn: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_without_buffer.unwrap()(datatype, m, n, depth, b_mn, H)
            }

pub unsafe fn FLASH_Obj_create_without_buffer_ext(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_without_buffer_ext.unwrap()(datatype, m, n, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_helper(without_buffer: FLA_Bool, datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_helper.unwrap()(without_buffer, datatype, m, n, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_hierarchy(datatype: FLA_Datatype, m: fla_dim_t, n: fla_dim_t, depth: fla_dim_t, elem_sizes_m: *mut fla_dim_t, elem_sizes_n: *mut fla_dim_t, flat_matrix: FLA_Obj, H: *mut FLA_Obj, id: c_ulong, depth_overall: fla_dim_t, depth_sizes_m: *mut fla_dim_t, depth_sizes_n: *mut fla_dim_t, m_offsets: *mut fla_dim_t, n_offsets: *mut fla_dim_t) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hierarchy.unwrap()(datatype, m, n, depth, elem_sizes_m, elem_sizes_n, flat_matrix, H, id, depth_overall, depth_sizes_m, depth_sizes_n, m_offsets, n_offsets)
            }

pub unsafe fn FLASH_Obj_create_conf_to(trans: FLA_Trans, H_cur: FLA_Obj, H_new: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_conf_to.unwrap()(trans, H_cur, H_new)
            }

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat(trans: FLA_Trans, F: FLA_Obj, depth: fla_dim_t, b_mn: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_conf_to_flat.unwrap()(trans, F, depth, b_mn, H)
            }

pub unsafe fn FLASH_Obj_create_hier_conf_to_flat_ext(trans: FLA_Trans, F: FLA_Obj, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_conf_to_flat_ext.unwrap()(trans, F, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_flat_conf_to_hier(trans: FLA_Trans, H: FLA_Obj, F: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_flat_conf_to_hier.unwrap()(trans, H, F)
            }

pub unsafe fn FLASH_Obj_create_copy_of(trans: FLA_Trans, H_cur: FLA_Obj, H_new: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_copy_of.unwrap()(trans, H_cur, H_new)
            }

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat(F: FLA_Obj, depth: fla_dim_t, b_mn: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_copy_of_flat.unwrap()(F, depth, b_mn, H)
            }

pub unsafe fn FLASH_Obj_create_hier_copy_of_flat_ext(F: FLA_Obj, depth: fla_dim_t, b_m: *mut fla_dim_t, b_n: *mut fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_hier_copy_of_flat_ext.unwrap()(F, depth, b_m, b_n, H)
            }

pub unsafe fn FLASH_Obj_create_flat_copy_of_hier(H: FLA_Obj, F: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_flat_copy_of_hier.unwrap()(H, F)
            }

pub unsafe fn FLASH_Obj_free(H: *mut FLA_Obj) {
                dyload_lib().FLASH_Obj_free.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_free_hierarchy(H: *mut FLA_Obj) {
                dyload_lib().FLASH_Obj_free_hierarchy.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_free_without_buffer(H: *mut FLA_Obj) {
                dyload_lib().FLASH_Obj_free_without_buffer.unwrap()(H)
            }

pub unsafe fn FLASH_Obj_attach_buffer(buffer: *mut c_void, rs: fla_dim_t, cs: fla_dim_t, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_attach_buffer.unwrap()(buffer, rs, cs, H)
            }

pub unsafe fn FLASH_Obj_attach_buffer_hierarchy(F: FLA_Obj, H: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_attach_buffer_hierarchy.unwrap()(F, H)
            }

pub unsafe fn FLASH_Obj_flatten(H: FLA_Obj, F: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_flatten.unwrap()(H, F)
            }

pub unsafe fn FLASH_Obj_hierarchify(F: FLA_Obj, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_hierarchify.unwrap()(F, H)
            }

pub unsafe fn FLASH_Obj_extract_buffer(H: FLA_Obj) -> *mut c_void {
                dyload_lib().FLASH_Obj_extract_buffer.unwrap()(H)
            }

pub unsafe fn FLASH_print_struct(H: FLA_Obj) {
                dyload_lib().FLASH_print_struct.unwrap()(H)
            }

pub unsafe fn FLASH_print_struct_helper(H: FLA_Obj, indent: c_int) {
                dyload_lib().FLASH_print_struct_helper.unwrap()(H, indent)
            }

pub unsafe fn FLASH_Max_elemwise_diff(A: FLA_Obj, B: FLA_Obj) -> f64 {
                dyload_lib().FLASH_Max_elemwise_diff.unwrap()(A, B)
            }

pub unsafe fn FLASH_Random_matrix(H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Random_matrix.unwrap()(H)
            }

pub unsafe fn FLASH_Random_spd_matrix(uplo: FLA_Uplo, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Random_spd_matrix.unwrap()(uplo, H)
            }

pub unsafe fn FLASH_Norm1(H: FLA_Obj, norm: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Norm1.unwrap()(H, norm)
            }

pub unsafe fn FLASH_Obj_shift_diagonal(conj: FLA_Conj, sigma: FLA_Obj, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_shift_diagonal.unwrap()(conj, sigma, H)
            }

pub unsafe fn FLASH_Set(alpha: FLA_Obj, H: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Set.unwrap()(alpha, H)
            }

pub unsafe fn FLASH_Obj_create_diag_panel(A: FLA_Obj, U: *mut FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Obj_create_diag_panel.unwrap()(A, U)
            }

pub unsafe fn FLASH_LU_find_zero_on_diagonal(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_find_zero_on_diagonal.unwrap()(A)
            }

pub unsafe fn FLASH_Triangularize(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Triangularize.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLASH_Hermitianize(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Hermitianize.unwrap()(uplo, A)
            }

pub unsafe fn FLASH_LU_find_zero_on_diagonal_check(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_find_zero_on_diagonal_check.unwrap()(A)
            }

pub unsafe fn FLASH_Axpy(alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Axpy.unwrap()(alpha, A, B)
            }

pub unsafe fn FLASH_Axpyt(trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Axpyt.unwrap()(trans, alpha, A, B)
            }

pub unsafe fn FLASH_Copy(A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copy.unwrap()(A, B)
            }

pub unsafe fn FLASH_Copyt(trans: FLA_Trans, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Copyt.unwrap()(trans, A, B)
            }

pub unsafe fn FLASH_Scal(alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Scal.unwrap()(alpha, A)
            }

pub unsafe fn FLASH_Scalr(uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Scalr.unwrap()(uplo, alpha, A)
            }

pub unsafe fn FLASH_Gemv(transa: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, x: FLA_Obj, beta: FLA_Obj, y: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Gemv.unwrap()(transa, alpha, A, x, beta, y)
            }

pub unsafe fn FLASH_Trsv(uplo: FLA_Uplo, transa: FLA_Trans, diag: FLA_Diag, A: FLA_Obj, x: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Trsv.unwrap()(uplo, transa, diag, A, x)
            }

pub unsafe fn FLASH_Gemm(transa: FLA_Trans, transb: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Gemm.unwrap()(transa, transb, alpha, A, B, beta, C)
            }

pub unsafe fn FLASH_Hemm(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Hemm.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLASH_Herk(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Herk.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLASH_Her2k(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Her2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLASH_Symm(side: FLA_Side, uplo: FLA_Uplo, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Symm.unwrap()(side, uplo, alpha, A, B, beta, C)
            }

pub unsafe fn FLASH_Syrk(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Syrk.unwrap()(uplo, trans, alpha, A, beta, C)
            }

pub unsafe fn FLASH_Syr2k(uplo: FLA_Uplo, trans: FLA_Trans, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj, beta: FLA_Obj, C: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Syr2k.unwrap()(uplo, trans, alpha, A, B, beta, C)
            }

pub unsafe fn FLASH_Trmm(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Trmm.unwrap()(side, uplo, trans, diag, alpha, A, B)
            }

pub unsafe fn FLASH_Trsm(side: FLA_Side, uplo: FLA_Uplo, trans: FLA_Trans, diag: FLA_Diag, alpha: FLA_Obj, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Trsm.unwrap()(side, uplo, trans, diag, alpha, A, B)
            }

pub unsafe fn FLASH_Chol(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Chol.unwrap()(uplo, A)
            }

pub unsafe fn FLASH_LU_nopiv(A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_nopiv.unwrap()(A)
            }

pub unsafe fn FLASH_LU_piv(A: FLA_Obj, p: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_piv.unwrap()(A, p)
            }

pub unsafe fn FLASH_LU_incpiv(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LU_incpiv.unwrap()(A, p, L)
            }

pub unsafe fn FLASH_FS_incpiv(A: FLA_Obj, p: FLA_Obj, L: FLA_Obj, b: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_FS_incpiv.unwrap()(A, p, L, b)
            }

pub unsafe fn FLASH_Trinv(uplo: FLA_Uplo, diag: FLA_Diag, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Trinv.unwrap()(uplo, diag, A)
            }

pub unsafe fn FLASH_Ttmm(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Ttmm.unwrap()(uplo, A)
            }

pub unsafe fn FLASH_SPDinv(uplo: FLA_Uplo, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_SPDinv.unwrap()(uplo, A)
            }

pub unsafe fn FLASH_Sylv(transa: FLA_Trans, transb: FLA_Trans, isgn: FLA_Obj, A: FLA_Obj, B: FLA_Obj, C: FLA_Obj, scale: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Sylv.unwrap()(transa, transb, isgn, A, B, C, scale)
            }

pub unsafe fn FLASH_Apply_pivots(side: FLA_Side, trans: FLA_Trans, p: FLA_Obj, A: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Apply_pivots.unwrap()(side, trans, p, A)
            }

pub unsafe fn FLASH_Eig_gest(inv: FLA_Inv, uplo: FLA_Uplo, A: FLA_Obj, B: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_Eig_gest.unwrap()(inv, uplo, A, B)
            }

pub unsafe fn FLASH_LQ_UT_inv(A: FLA_Obj, TW: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LQ_UT_inv.unwrap()(A, TW)
            }

pub unsafe fn FLASH_LQ2_UT(B: FLA_Obj, C: FLA_Obj, T: FLA_Obj) -> FLA_Error {
                dyload_lib().FLASH_LQ2_UT.unwrap()(B, C, T)
            }

pub unsafe fn FLASH_Queue_begin() {
                dyload_lib().FLASH_Queue_begin.unwrap()()
            }

pub unsafe fn FLASH_Queue_end() {
                dyload_lib().FLASH_Queue_end.unwrap()()
            }

pub unsafe fn FLASH_Queue_stack_depth() -> uinteger {
                dyload_lib().FLASH_Queue_stack_depth.unwrap()()
            }

pub unsafe fn FLASH_Queue_enable() -> FLA_Error {
                dyload_lib().FLASH_Queue_enable.unwrap()()
            }

pub unsafe fn FLASH_Queue_disable() -> FLA_Error {
                dyload_lib().FLASH_Queue_disable.unwrap()()
            }

pub unsafe fn FLASH_Queue_get_enabled() -> FLA_Bool {
                dyload_lib().FLASH_Queue_get_enabled.unwrap()()
            }

pub unsafe fn FLASH_Queue_set_num_threads(n_threads: uinteger) {
                dyload_lib().FLASH_Queue_set_num_threads.unwrap()(n_threads)
            }

pub unsafe fn FLASH_Queue_get_num_threads() -> uinteger {
                dyload_lib().FLASH_Queue_get_num_threads.unwrap()()
            }

pub unsafe fn cgelst_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgelst_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn clatrs3_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, x: *mut scomplex, ldx: *mut integer, scale: *mut real, cnorm: *mut real, work: *mut real, lwork: *mut integer, info: *mut integer) {
                dyload_lib().clatrs3_.unwrap()(uplo, trans, diag, normin, n, nrhs, a, lda, x, ldx, scale, cnorm, work, lwork, info)
            }

pub unsafe fn ctrsyl3_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, c__: *mut scomplex, ldc: *mut integer, scale: *mut real, swork: *mut real, ldswork: *mut integer, info: *mut integer) {
                dyload_lib().ctrsyl3_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c__, ldc, scale, swork, ldswork, info)
            }

pub unsafe fn dgelst_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgelst_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn dlarmm_(anorm: *mut doublereal, bnorm: *mut doublereal, cnorm: *mut doublereal) -> doublereal {
                dyload_lib().dlarmm_.unwrap()(anorm, bnorm, cnorm)
            }

pub unsafe fn dlatrs3_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut doublereal, lda: *mut integer, x: *mut doublereal, ldx: *mut integer, scale: *mut doublereal, cnorm: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlatrs3_.unwrap()(uplo, trans, diag, normin, n, nrhs, a, lda, x, ldx, scale, cnorm, work, lwork, info)
            }

pub unsafe fn dtrsyl3_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, c__: *mut doublereal, ldc: *mut integer, scale: *mut doublereal, iwork: *mut integer, liwork: *mut integer, swork: *mut doublereal, ldswork: *mut integer, info: *mut integer) {
                dyload_lib().dtrsyl3_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c__, ldc, scale, iwork, liwork, swork, ldswork, info)
            }

pub unsafe fn sgelst_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, work: *mut real, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgelst_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn slarmm_(anorm: *mut real, bnorm: *mut real, cnorm: *mut real) -> real {
                dyload_lib().slarmm_.unwrap()(anorm, bnorm, cnorm)
            }

pub unsafe fn slatrs3_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut real, lda: *mut integer, x: *mut real, ldx: *mut integer, scale: *mut real, cnorm: *mut real, work: *mut real, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slatrs3_.unwrap()(uplo, trans, diag, normin, n, nrhs, a, lda, x, ldx, scale, cnorm, work, lwork, info)
            }

pub unsafe fn strsyl3_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, c__: *mut real, ldc: *mut integer, scale: *mut real, iwork: *mut integer, liwork: *mut integer, swork: *mut real, ldswork: *mut integer, info: *mut integer) {
                dyload_lib().strsyl3_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c__, ldc, scale, iwork, liwork, swork, ldswork, info)
            }

pub unsafe fn zgelst_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgelst_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn zlatrs3_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, x: *mut dcomplex, ldx: *mut integer, scale: *mut doublereal, cnorm: *mut doublereal, work: *mut doublereal, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlatrs3_.unwrap()(uplo, trans, diag, normin, n, nrhs, a, lda, x, ldx, scale, cnorm, work, lwork, info)
            }

pub unsafe fn ztrsyl3_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, c__: *mut dcomplex, ldc: *mut integer, scale: *mut doublereal, swork: *mut doublereal, ldswork: *mut integer, info: *mut integer) {
                dyload_lib().ztrsyl3_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c__, ldc, scale, swork, ldswork, info)
            }

pub unsafe fn dlamch_(cmach: *mut c_char) -> f64 {
                dyload_lib().dlamch_.unwrap()(cmach)
            }

pub unsafe fn dlamc3_(a: *mut f64, b: *mut f64) -> f64 {
                dyload_lib().dlamc3_.unwrap()(a, b)
            }

pub unsafe fn dladiv2_(a: *mut doublereal, b: *mut doublereal, c__: *mut doublereal, d__: *mut doublereal, r__: *mut doublereal, t: *mut doublereal) -> doublereal {
                dyload_lib().dladiv2_.unwrap()(a, b, c__, d__, r__, t)
            }

pub unsafe fn dladiv1_(a: *mut doublereal, b: *mut doublereal, c__: *mut doublereal, d__: *mut doublereal, p: *mut doublereal, q: *mut doublereal) {
                dyload_lib().dladiv1_.unwrap()(a, b, c__, d__, p, q)
            }

pub unsafe fn sladiv2_(b: *mut f32, c: *mut f32, d: *mut f32, r: *mut f32, t: *mut f32) -> f64 {
                dyload_lib().sladiv2_.unwrap()(b, c, d, r, t)
            }

pub unsafe fn sladiv1_(a: *mut f32, b: *mut f32, c: *mut f32, d: *mut f32, p: *mut f32, q: *mut f32) {
                dyload_lib().sladiv1_.unwrap()(a, b, c, d, p, q)
            }

pub unsafe fn iparmq_(ispec: *mut integer, name: *mut c_char, opts: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, lwork: *mut integer) -> integer {
                dyload_lib().iparmq_.unwrap()(ispec, name, opts, n, ilo, ihi, lwork)
            }

pub unsafe fn ilaenv_(ispec: *mut integer, name: *mut c_char, opts: *mut c_char, n1: *mut integer, n2: *mut integer, n3: *mut integer, n4: *mut integer) -> integer {
                dyload_lib().ilaenv_.unwrap()(ispec, name, opts, n1, n2, n3, n4)
            }

pub unsafe fn ieeeck_(ispec: *mut integer, zero: *mut f32, one: *mut f32) -> integer {
                dyload_lib().ieeeck_.unwrap()(ispec, zero, one)
            }

pub unsafe fn lsamen_(n: *const integer, ca: *const c_char, cb: *const c_char, ca_len: integer, cb_len: integer) -> logical {
                dyload_lib().lsamen_.unwrap()(n, ca, cb, ca_len, cb_len)
            }

pub unsafe fn slamc3_(a: *mut f32, b: *mut f32) -> f32 {
                dyload_lib().slamc3_.unwrap()(a, b)
            }

pub unsafe fn slamch_(cmach: *mut c_char) -> f32 {
                dyload_lib().slamch_.unwrap()(cmach)
            }

pub unsafe fn cgetsqrhrt_(m: *mut integer, n: *mut integer, mb1: *mut integer, nb1: *mut integer, nb2: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgetsqrhrt_.unwrap()(m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn claqz0_(wants: *mut c_char, wantq: *mut c_char, wantz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, q: *mut scomplex, ldq: *mut integer, z__: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut real, rec: *mut integer, info: *mut integer) {
                dyload_lib().claqz0_.unwrap()(wants, wantq, wantz, n, ilo, ihi, a, lda, b, ldb, alpha, beta, q, ldq, z__, ldz, work, lwork, rwork, rec, info)
            }

pub unsafe fn claqz1_(ilq: *mut logical, ilz: *mut logical, k: *mut integer, istartm: *mut integer, istopm: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, nq: *mut integer, qstart: *mut integer, q: *mut scomplex, ldq: *mut integer, nz: *mut integer, zstart: *mut integer, z__: *mut scomplex, ldz: *mut integer) {
                dyload_lib().claqz1_.unwrap()(ilq, ilz, k, istartm, istopm, ihi, a, lda, b, ldb, nq, qstart, q, ldq, nz, zstart, z__, ldz)
            }

pub unsafe fn claqz2_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nw: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, q: *mut scomplex, ldq: *mut integer, z__: *mut scomplex, ldz: *mut integer, ns: *mut integer, nd: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, qc: *mut scomplex, ldqc: *mut integer, zc: *mut scomplex, ldzc: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut real, rec: *mut integer, info: *mut integer) {
                dyload_lib().claqz2_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nw, a, lda, b, ldb, q, ldq, z__, ldz, ns, nd, alpha, beta, qc, ldqc, zc, ldzc, work, lwork, rwork, rec, info)
            }

pub unsafe fn claqz3_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nshifts: *mut integer, nblock_desired__: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, q: *mut scomplex, ldq: *mut integer, z__: *mut scomplex, ldz: *mut integer, qc: *mut scomplex, ldqc: *mut integer, zc: *mut scomplex, ldzc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().claqz3_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nshifts, nblock_desired__, alpha, beta, a, lda, b, ldb, q, ldq, z__, ldz, qc, ldqc, zc, ldzc, work, lwork, info)
            }

pub unsafe fn clarfb_gett_(ident: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, t: *mut scomplex, ldt: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, ldwork: *mut integer) {
                dyload_lib().clarfb_gett_.unwrap()(ident, m, n, k, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn cungtsqr_row_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungtsqr_row_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn dgetsqrhrt_(m: *mut integer, n: *mut integer, mb1: *mut integer, nb1: *mut integer, nb2: *mut integer, a: *mut doublereal, lda: *mut integer, t: *mut doublereal, ldt: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgetsqrhrt_.unwrap()(m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn dlaqz0_(wants: *mut c_char, wantq: *mut c_char, wantz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, alphar: *mut doublereal, alphai: *mut doublereal, beta: *mut doublereal, q: *mut doublereal, ldq: *mut integer, z__: *mut doublereal, ldz: *mut integer, work: *mut doublereal, lwork: *mut integer, rec: *mut integer, info: *mut integer) {
                dyload_lib().dlaqz0_.unwrap()(wants, wantq, wantz, n, ilo, ihi, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z__, ldz, work, lwork, rec, info)
            }

pub unsafe fn dlaqz1_(a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, sr1: *mut doublereal, sr2: *mut doublereal, si: *mut doublereal, beta1: *mut doublereal, beta2: *mut doublereal, v: *mut doublereal) {
                dyload_lib().dlaqz1_.unwrap()(a, lda, b, ldb, sr1, sr2, si, beta1, beta2, v)
            }

pub unsafe fn dlaqz2_(ilq: *mut logical, ilz: *mut logical, k: *mut integer, istartm: *mut integer, istopm: *mut integer, ihi: *mut integer, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, nq: *mut integer, qstart: *mut integer, q: *mut doublereal, ldq: *mut integer, nz: *mut integer, zstart: *mut integer, z__: *mut doublereal, ldz: *mut integer) {
                dyload_lib().dlaqz2_.unwrap()(ilq, ilz, k, istartm, istopm, ihi, a, lda, b, ldb, nq, qstart, q, ldq, nz, zstart, z__, ldz)
            }

pub unsafe fn dlaqz3_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nw: *mut integer, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, q: *mut doublereal, ldq: *mut integer, z__: *mut doublereal, ldz: *mut integer, ns: *mut integer, nd: *mut integer, alphar: *mut doublereal, alphai: *mut doublereal, beta: *mut doublereal, qc: *mut doublereal, ldqc: *mut integer, zc: *mut doublereal, ldzc: *mut integer, work: *mut doublereal, lwork: *mut integer, rec: *mut integer, info: *mut integer) {
                dyload_lib().dlaqz3_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nw, a, lda, b, ldb, q, ldq, z__, ldz, ns, nd, alphar, alphai, beta, qc, ldqc, zc, ldzc, work, lwork, rec, info)
            }

pub unsafe fn dlaqz4_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nshifts: *mut integer, nblock_desired__: *mut integer, sr: *mut doublereal, si: *mut doublereal, ss: *mut doublereal, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, q: *mut doublereal, ldq: *mut integer, z__: *mut doublereal, ldz: *mut integer, qc: *mut doublereal, ldqc: *mut integer, zc: *mut doublereal, ldzc: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaqz4_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nshifts, nblock_desired__, sr, si, ss, a, lda, b, ldb, q, ldq, z__, ldz, qc, ldqc, zc, ldzc, work, lwork, info)
            }

pub unsafe fn dlarfb_gett_(ident: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, t: *mut doublereal, ldt: *mut integer, a: *mut doublereal, lda: *mut integer, b: *mut doublereal, ldb: *mut integer, work: *mut doublereal, ldwork: *mut integer) {
                dyload_lib().dlarfb_gett_.unwrap()(ident, m, n, k, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn dorgtsqr_row_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut doublereal, lda: *mut integer, t: *mut doublereal, ldt: *mut integer, work: *mut doublereal, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgtsqr_row_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn sgetsqrhrt_(m: *mut integer, n: *mut integer, mb1: *mut integer, nb1: *mut integer, nb2: *mut integer, a: *mut real, lda: *mut integer, t: *mut real, ldt: *mut integer, work: *mut real, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgetsqrhrt_.unwrap()(m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn slaqz0_(wants: *mut c_char, wantq: *mut c_char, wantz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, alphar: *mut real, alphai: *mut real, beta: *mut real, q: *mut real, ldq: *mut integer, z__: *mut real, ldz: *mut integer, work: *mut real, lwork: *mut integer, rec: *mut integer, info: *mut integer) {
                dyload_lib().slaqz0_.unwrap()(wants, wantq, wantz, n, ilo, ihi, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z__, ldz, work, lwork, rec, info)
            }

pub unsafe fn slaqz1_(a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, sr1: *mut real, sr2: *mut real, si: *mut real, beta1: *mut real, beta2: *mut real, v: *mut real) {
                dyload_lib().slaqz1_.unwrap()(a, lda, b, ldb, sr1, sr2, si, beta1, beta2, v)
            }

pub unsafe fn slaqz2_(ilq: *mut logical, ilz: *mut logical, k: *mut integer, istartm: *mut integer, istopm: *mut integer, ihi: *mut integer, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, nq: *mut integer, qstart: *mut integer, q: *mut real, ldq: *mut integer, nz: *mut integer, zstart: *mut integer, z__: *mut real, ldz: *mut integer) {
                dyload_lib().slaqz2_.unwrap()(ilq, ilz, k, istartm, istopm, ihi, a, lda, b, ldb, nq, qstart, q, ldq, nz, zstart, z__, ldz)
            }

pub unsafe fn slaqz3_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nw: *mut integer, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, q: *mut real, ldq: *mut integer, z__: *mut real, ldz: *mut integer, ns: *mut integer, nd: *mut integer, alphar: *mut real, alphai: *mut real, beta: *mut real, qc: *mut real, ldqc: *mut integer, zc: *mut real, ldzc: *mut integer, work: *mut real, lwork: *mut integer, rec: *mut integer, info: *mut integer) {
                dyload_lib().slaqz3_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nw, a, lda, b, ldb, q, ldq, z__, ldz, ns, nd, alphar, alphai, beta, qc, ldqc, zc, ldzc, work, lwork, rec, info)
            }

pub unsafe fn slaqz4_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nshifts: *mut integer, nblock_desired__: *mut integer, sr: *mut real, si: *mut real, ss: *mut real, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, q: *mut real, ldq: *mut integer, z__: *mut real, ldz: *mut integer, qc: *mut real, ldqc: *mut integer, zc: *mut real, ldzc: *mut integer, work: *mut real, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slaqz4_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nshifts, nblock_desired__, sr, si, ss, a, lda, b, ldb, q, ldq, z__, ldz, qc, ldqc, zc, ldzc, work, lwork, info)
            }

pub unsafe fn slarfb_gett_(ident: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, t: *mut real, ldt: *mut integer, a: *mut real, lda: *mut integer, b: *mut real, ldb: *mut integer, work: *mut real, ldwork: *mut integer) {
                dyload_lib().slarfb_gett_.unwrap()(ident, m, n, k, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn sorgtsqr_row_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut real, lda: *mut integer, t: *mut real, ldt: *mut integer, work: *mut real, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgtsqr_row_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn zgetsqrhrt_(m: *mut integer, n: *mut integer, mb1: *mut integer, nb1: *mut integer, nb2: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgetsqrhrt_.unwrap()(m, n, mb1, nb1, nb2, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn zlaqz0_(wants: *mut c_char, wantq: *mut c_char, wantz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, q: *mut dcomplex, ldq: *mut integer, z__: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut doublereal, rec: *mut integer, info: *mut integer) {
                dyload_lib().zlaqz0_.unwrap()(wants, wantq, wantz, n, ilo, ihi, a, lda, b, ldb, alpha, beta, q, ldq, z__, ldz, work, lwork, rwork, rec, info)
            }

pub unsafe fn zlaqz1_(ilq: *mut logical, ilz: *mut logical, k: *mut integer, istartm: *mut integer, istopm: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, nq: *mut integer, qstart: *mut integer, q: *mut dcomplex, ldq: *mut integer, nz: *mut integer, zstart: *mut integer, z__: *mut dcomplex, ldz: *mut integer) {
                dyload_lib().zlaqz1_.unwrap()(ilq, ilz, k, istartm, istopm, ihi, a, lda, b, ldb, nq, qstart, q, ldq, nz, zstart, z__, ldz)
            }

pub unsafe fn zlaqz2_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nw: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, q: *mut dcomplex, ldq: *mut integer, z__: *mut dcomplex, ldz: *mut integer, ns: *mut integer, nd: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, qc: *mut dcomplex, ldqc: *mut integer, zc: *mut dcomplex, ldzc: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut doublereal, rec: *mut integer, info: *mut integer) {
                dyload_lib().zlaqz2_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nw, a, lda, b, ldb, q, ldq, z__, ldz, ns, nd, alpha, beta, qc, ldqc, zc, ldzc, work, lwork, rwork, rec, info)
            }

pub unsafe fn zlaqz3_(ilschur: *mut logical, ilq: *mut logical, ilz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, nshifts: *mut integer, nblock_desired__: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, q: *mut dcomplex, ldq: *mut integer, z__: *mut dcomplex, ldz: *mut integer, qc: *mut dcomplex, ldqc: *mut integer, zc: *mut dcomplex, ldzc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlaqz3_.unwrap()(ilschur, ilq, ilz, n, ilo, ihi, nshifts, nblock_desired__, alpha, beta, a, lda, b, ldb, q, ldq, z__, ldz, qc, ldqc, zc, ldzc, work, lwork, info)
            }

pub unsafe fn zlarfb_gett_(ident: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, t: *mut dcomplex, ldt: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, ldwork: *mut integer) {
                dyload_lib().zlarfb_gett_.unwrap()(ident, m, n, k, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn zungtsqr_row_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungtsqr_row_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn dla_gbrcond_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, ipiv: *mut integer, cmode: *mut integer, c: *mut f64, info: *mut integer, work: *mut f64, iwork: *mut integer) -> f64 {
                dyload_lib().dla_gbrcond_.unwrap()(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork)
            }

pub unsafe fn dla_gbrpvgrw_(n: *mut integer, kl: *mut integer, ku: *mut integer, ncols: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer) -> f64 {
                dyload_lib().dla_gbrpvgrw_.unwrap()(n, kl, ku, ncols, ab, ldab, afb, ldafb)
            }

pub unsafe fn dla_gercond_(trans: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, cmode: *mut integer, c: *mut f64, info: *mut integer, work: *mut f64, iwork: *mut integer) -> f64 {
                dyload_lib().dla_gercond_.unwrap()(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork)
            }

pub unsafe fn dla_gerpvgrw_(n: *mut integer, ncols: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer) -> f64 {
                dyload_lib().dla_gerpvgrw_.unwrap()(n, ncols, a, lda, af, ldaf)
            }

pub unsafe fn dlangb_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlangb_.unwrap()(norm, n, kl, ku, ab, ldab, work)
            }

pub unsafe fn dlange_(norm: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlange_.unwrap()(norm, m, n, a, lda, work)
            }

pub unsafe fn dlangt_(norm: *mut c_char, n: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64) -> f64 {
                dyload_lib().dlangt_.unwrap()(norm, n, dl, d, du)
            }

pub unsafe fn dlanhs_(norm: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlanhs_.unwrap()(norm, n, a, lda, work)
            }

pub unsafe fn dlansb_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut f64, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlansb_.unwrap()(norm, uplo, n, k, ab, ldab, work)
            }

pub unsafe fn dlansf_(norm: *mut c_char, transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, work: *mut f64) -> f64 {
                dyload_lib().dlansf_.unwrap()(norm, transr, uplo, n, a, work)
            }

pub unsafe fn dlansp_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, work: *mut f64) -> f64 {
                dyload_lib().dlansp_.unwrap()(norm, uplo, n, ap, work)
            }

pub unsafe fn dlanst_(norm: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64) -> f64 {
                dyload_lib().dlanst_.unwrap()(norm, n, d, e)
            }

pub unsafe fn dlansy_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlansy_.unwrap()(norm, uplo, n, a, lda, work)
            }

pub unsafe fn dlantb_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut f64, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlantb_.unwrap()(norm, uplo, diag, n, k, ab, ldab, work)
            }

pub unsafe fn dlantp_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut f64, work: *mut f64) -> f64 {
                dyload_lib().dlantp_.unwrap()(norm, uplo, diag, n, ap, work)
            }

pub unsafe fn dlantr_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dlantr_.unwrap()(norm, uplo, diag, m, n, a, lda, work)
            }

pub unsafe fn dla_porcond_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, cmode: *mut integer, c: *mut f64, info: *mut integer, work: *mut f64, iwork: *mut integer) -> f64 {
                dyload_lib().dla_porcond_.unwrap()(uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork)
            }

pub unsafe fn dla_porpvgrw_(uplo: *mut c_char, ncols: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dla_porpvgrw_.unwrap()(uplo, ncols, a, lda, af, ldaf, work)
            }

pub unsafe fn dlapy2_(x: *mut f64, y: *mut f64) -> f64 {
                dyload_lib().dlapy2_.unwrap()(x, y)
            }

pub unsafe fn dlapy3_(x: *mut f64, y: *mut f64, z__: *mut f64) -> f64 {
                dyload_lib().dlapy3_.unwrap()(x, y, z__)
            }

pub unsafe fn dla_syrcond_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, cmode: *mut integer, c: *mut f64, info: *mut integer, work: *mut f64, iwork: *mut integer) -> f64 {
                dyload_lib().dla_syrcond_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork)
            }

pub unsafe fn dla_syrpvgrw_(uplo: *mut c_char, n: *mut integer, info: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().dla_syrpvgrw_.unwrap()(uplo, n, info, a, lda, af, ldaf, ipiv, work)
            }

pub unsafe fn dzsum1_(n: *mut integer, cx: *mut dcomplex, incx: *mut integer) -> f64 {
                dyload_lib().dzsum1_.unwrap()(n, cx, incx)
            }

pub unsafe fn zla_gbrcond_c_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, c: *mut f64, capply: *mut logical, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_gbrcond_c_.unwrap()(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn zla_gbrcond_x_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, x: *mut dcomplex, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_gbrcond_x_.unwrap()(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork)
            }

pub unsafe fn zla_gbrpvgrw_(n: *mut integer, kl: *mut integer, ku: *mut integer, ncols: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer) -> f64 {
                dyload_lib().zla_gbrpvgrw_.unwrap()(n, kl, ku, ncols, ab, ldab, afb, ldafb)
            }

pub unsafe fn zla_gercond_c_(trans: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, c: *mut f64, capply: *mut logical, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_gercond_c_.unwrap()(trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn zla_gercond_x_(trans: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, x: *mut dcomplex, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_gercond_x_.unwrap()(trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)
            }

pub unsafe fn zla_gerpvgrw_(n: *mut integer, ncols: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer) -> f64 {
                dyload_lib().zla_gerpvgrw_.unwrap()(n, ncols, a, lda, af, ldaf)
            }

pub unsafe fn zla_hercond_c_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, c: *mut f64, capply: *mut logical, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_hercond_c_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn zla_hercond_x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, x: *mut dcomplex, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_hercond_x_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)
            }

pub unsafe fn zla_herpvgrw_(uplo: *mut c_char, n: *mut integer, info: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zla_herpvgrw_.unwrap()(uplo, n, info, a, lda, af, ldaf, ipiv, work)
            }

pub unsafe fn zlangb_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlangb_.unwrap()(norm, n, kl, ku, ab, ldab, work)
            }

pub unsafe fn zlange_(norm: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlange_.unwrap()(norm, m, n, a, lda, work)
            }

pub unsafe fn zlangt_(norm: *mut c_char, n: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex) -> f64 {
                dyload_lib().zlangt_.unwrap()(norm, n, dl, d, du)
            }

pub unsafe fn zlanhb_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut dcomplex, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlanhb_.unwrap()(norm, uplo, n, k, ab, ldab, work)
            }

pub unsafe fn zlanhe_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlanhe_.unwrap()(norm, uplo, n, a, lda, work)
            }

pub unsafe fn zlanhf_(norm: *mut c_char, transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, work: *mut f64) -> f64 {
                dyload_lib().zlanhf_.unwrap()(norm, transr, uplo, n, a, work)
            }

pub unsafe fn zlanhp_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, work: *mut f64) -> f64 {
                dyload_lib().zlanhp_.unwrap()(norm, uplo, n, ap, work)
            }

pub unsafe fn zlanhs_(norm: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlanhs_.unwrap()(norm, n, a, lda, work)
            }

pub unsafe fn zlanht_(norm: *mut c_char, n: *mut integer, d: *mut f64, e: *mut dcomplex) -> f64 {
                dyload_lib().zlanht_.unwrap()(norm, n, d, e)
            }

pub unsafe fn zlansb_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut dcomplex, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlansb_.unwrap()(norm, uplo, n, k, ab, ldab, work)
            }

pub unsafe fn zlansp_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, work: *mut f64) -> f64 {
                dyload_lib().zlansp_.unwrap()(norm, uplo, n, ap, work)
            }

pub unsafe fn zlansy_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlansy_.unwrap()(norm, uplo, n, a, lda, work)
            }

pub unsafe fn zlantb_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut dcomplex, ldab: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlantb_.unwrap()(norm, uplo, diag, n, k, ab, ldab, work)
            }

pub unsafe fn zlantp_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut dcomplex, work: *mut f64) -> f64 {
                dyload_lib().zlantp_.unwrap()(norm, uplo, diag, n, ap, work)
            }

pub unsafe fn zlantr_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zlantr_.unwrap()(norm, uplo, diag, m, n, a, lda, work)
            }

pub unsafe fn zla_porcond_c_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, c: *mut f64, capply: *mut logical, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_porcond_c_.unwrap()(uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork)
            }

pub unsafe fn zla_porcond_x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, x: *mut dcomplex, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_porcond_x_.unwrap()(uplo, n, a, lda, af, ldaf, x, info, work, rwork)
            }

pub unsafe fn zla_porpvgrw_(uplo: *mut c_char, ncols: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zla_porpvgrw_.unwrap()(uplo, ncols, a, lda, af, ldaf, work)
            }

pub unsafe fn zla_syrcond_c_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, c: *mut f64, capply: *mut logical, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_syrcond_c_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn zla_syrcond_x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, x: *mut dcomplex, info: *mut integer, work: *mut dcomplex, rwork: *mut f64) -> f64 {
                dyload_lib().zla_syrcond_x_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)
            }

pub unsafe fn zla_syrpvgrw_(uplo: *mut c_char, n: *mut integer, info: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, work: *mut f64) -> f64 {
                dyload_lib().zla_syrpvgrw_.unwrap()(uplo, n, info, a, lda, af, ldaf, ipiv, work)
            }

pub unsafe fn cla_gbrcond_c_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, c: *mut f32, capply: *mut logical, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_gbrcond_c_.unwrap()(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn cla_gbrcond_x_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, x: *mut scomplex, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_gbrcond_x_.unwrap()(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, x, info, work, rwork)
            }

pub unsafe fn cla_gbrpvgrw_(n: *mut integer, kl: *mut integer, ku: *mut integer, ncols: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer) -> f32 {
                dyload_lib().cla_gbrpvgrw_.unwrap()(n, kl, ku, ncols, ab, ldab, afb, ldafb)
            }

pub unsafe fn cla_gercond_c_(trans: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, c: *mut f32, capply: *mut logical, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_gercond_c_.unwrap()(trans, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn cla_gercond_x_(trans: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, x: *mut scomplex, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_gercond_x_.unwrap()(trans, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)
            }

pub unsafe fn cla_gerpvgrw_(n: *mut integer, ncols: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer) -> f32 {
                dyload_lib().cla_gerpvgrw_.unwrap()(n, ncols, a, lda, af, ldaf)
            }

pub unsafe fn cla_hercond_c_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, c: *mut f32, capply: *mut logical, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_hercond_c_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn cla_hercond_x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, x: *mut scomplex, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_hercond_x_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)
            }

pub unsafe fn cla_herpvgrw_(uplo: *mut c_char, n: *mut integer, info: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().cla_herpvgrw_.unwrap()(uplo, n, info, a, lda, af, ldaf, ipiv, work)
            }

pub unsafe fn clangb_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clangb_.unwrap()(norm, n, kl, ku, ab, ldab, work)
            }

pub unsafe fn clange_(norm: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clange_.unwrap()(norm, m, n, a, lda, work)
            }

pub unsafe fn clangt_(norm: *mut c_char, n: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex) -> f32 {
                dyload_lib().clangt_.unwrap()(norm, n, dl, d, du)
            }

pub unsafe fn clanhb_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut scomplex, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clanhb_.unwrap()(norm, uplo, n, k, ab, ldab, work)
            }

pub unsafe fn clanhe_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clanhe_.unwrap()(norm, uplo, n, a, lda, work)
            }

pub unsafe fn clanhf_(norm: *mut c_char, transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, work: *mut f32) -> f32 {
                dyload_lib().clanhf_.unwrap()(norm, transr, uplo, n, a, work)
            }

pub unsafe fn clanhp_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, work: *mut f32) -> f32 {
                dyload_lib().clanhp_.unwrap()(norm, uplo, n, ap, work)
            }

pub unsafe fn clanhs_(norm: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clanhs_.unwrap()(norm, n, a, lda, work)
            }

pub unsafe fn clanht_(norm: *mut c_char, n: *mut integer, d: *mut f32, e: *mut scomplex) -> f32 {
                dyload_lib().clanht_.unwrap()(norm, n, d, e)
            }

pub unsafe fn clansb_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut scomplex, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clansb_.unwrap()(norm, uplo, n, k, ab, ldab, work)
            }

pub unsafe fn clansp_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, work: *mut f32) -> f32 {
                dyload_lib().clansp_.unwrap()(norm, uplo, n, ap, work)
            }

pub unsafe fn clansy_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clansy_.unwrap()(norm, uplo, n, a, lda, work)
            }

pub unsafe fn clantb_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut scomplex, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clantb_.unwrap()(norm, uplo, diag, n, k, ab, ldab, work)
            }

pub unsafe fn clantp_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut scomplex, work: *mut f32) -> f32 {
                dyload_lib().clantp_.unwrap()(norm, uplo, diag, n, ap, work)
            }

pub unsafe fn clantr_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().clantr_.unwrap()(norm, uplo, diag, m, n, a, lda, work)
            }

pub unsafe fn cla_porcond_c_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, c: *mut f32, capply: *mut logical, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_porcond_c_.unwrap()(uplo, n, a, lda, af, ldaf, c, capply, info, work, rwork)
            }

pub unsafe fn cla_porcond_x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, x: *mut scomplex, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_porcond_x_.unwrap()(uplo, n, a, lda, af, ldaf, x, info, work, rwork)
            }

pub unsafe fn cla_porpvgrw_(uplo: *mut c_char, ncols: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().cla_porpvgrw_.unwrap()(uplo, ncols, a, lda, af, ldaf, work)
            }

pub unsafe fn cla_syrcond_c_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, c: *mut f32, capply: *mut logical, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_syrcond_c_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, c, capply, info, work, rwork)
            }

pub unsafe fn cla_syrcond_x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, x: *mut scomplex, info: *mut integer, work: *mut scomplex, rwork: *mut f32) -> f32 {
                dyload_lib().cla_syrcond_x_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, x, info, work, rwork)
            }

pub unsafe fn cla_syrpvgrw_(uplo: *mut c_char, n: *mut integer, info: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().cla_syrpvgrw_.unwrap()(uplo, n, info, a, lda, af, ldaf, ipiv, work)
            }

pub unsafe fn scsum1_(n: *mut integer, cx: *mut scomplex, incx: *mut integer) -> f32 {
                dyload_lib().scsum1_.unwrap()(n, cx, incx)
            }

pub unsafe fn sla_gbrcond_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, ipiv: *mut integer, cmode: *mut integer, c: *mut f32, info: *mut integer, work: *mut f32, iwork: *mut integer) -> f32 {
                dyload_lib().sla_gbrcond_.unwrap()(trans, n, kl, ku, ab, ldab, afb, ldafb, ipiv, cmode, c, info, work, iwork)
            }

pub unsafe fn sla_gbrpvgrw_(n: *mut integer, kl: *mut integer, ku: *mut integer, ncols: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer) -> f32 {
                dyload_lib().sla_gbrpvgrw_.unwrap()(n, kl, ku, ncols, ab, ldab, afb, ldafb)
            }

pub unsafe fn sla_gercond_(trans: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, cmode: *mut integer, c: *mut f32, info: *mut integer, work: *mut f32, iwork: *mut integer) -> f32 {
                dyload_lib().sla_gercond_.unwrap()(trans, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork)
            }

pub unsafe fn sla_gerpvgrw_(n: *mut integer, ncols: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer) -> f32 {
                dyload_lib().sla_gerpvgrw_.unwrap()(n, ncols, a, lda, af, ldaf)
            }

pub unsafe fn slangb_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slangb_.unwrap()(norm, n, kl, ku, ab, ldab, work)
            }

pub unsafe fn slange_(norm: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slange_.unwrap()(norm, m, n, a, lda, work)
            }

pub unsafe fn slangt_(norm: *mut c_char, n: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32) -> f32 {
                dyload_lib().slangt_.unwrap()(norm, n, dl, d, du)
            }

pub unsafe fn slanhs_(norm: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slanhs_.unwrap()(norm, n, a, lda, work)
            }

pub unsafe fn slansb_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut f32, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slansb_.unwrap()(norm, uplo, n, k, ab, ldab, work)
            }

pub unsafe fn slansf_(norm: *mut c_char, transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, work: *mut f32) -> f32 {
                dyload_lib().slansf_.unwrap()(norm, transr, uplo, n, a, work)
            }

pub unsafe fn slansp_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, work: *mut f32) -> f32 {
                dyload_lib().slansp_.unwrap()(norm, uplo, n, ap, work)
            }

pub unsafe fn slanst_(norm: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32) -> f32 {
                dyload_lib().slanst_.unwrap()(norm, n, d, e)
            }

pub unsafe fn slansy_(norm: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slansy_.unwrap()(norm, uplo, n, a, lda, work)
            }

pub unsafe fn slantb_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, k: *mut integer, ab: *mut f32, ldab: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slantb_.unwrap()(norm, uplo, diag, n, k, ab, ldab, work)
            }

pub unsafe fn slantp_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut f32, work: *mut f32) -> f32 {
                dyload_lib().slantp_.unwrap()(norm, uplo, diag, n, ap, work)
            }

pub unsafe fn slantr_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().slantr_.unwrap()(norm, uplo, diag, m, n, a, lda, work)
            }

pub unsafe fn sla_porcond_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, cmode: *mut integer, c: *mut f32, info: *mut integer, work: *mut f32, iwork: *mut integer) -> f32 {
                dyload_lib().sla_porcond_.unwrap()(uplo, n, a, lda, af, ldaf, cmode, c, info, work, iwork)
            }

pub unsafe fn sla_porpvgrw_(uplo: *mut c_char, ncols: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().sla_porpvgrw_.unwrap()(uplo, ncols, a, lda, af, ldaf, work)
            }

pub unsafe fn slapy2_(x: *mut f32, y: *mut f32) -> f32 {
                dyload_lib().slapy2_.unwrap()(x, y)
            }

pub unsafe fn slapy3_(x: *mut f32, y: *mut f32, z__: *mut f32) -> f32 {
                dyload_lib().slapy3_.unwrap()(x, y, z__)
            }

pub unsafe fn sla_syrcond_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, cmode: *mut integer, c: *mut f32, info: *mut integer, work: *mut f32, iwork: *mut integer) -> f32 {
                dyload_lib().sla_syrcond_.unwrap()(uplo, n, a, lda, af, ldaf, ipiv, cmode, c, info, work, iwork)
            }

pub unsafe fn sla_syrpvgrw_(uplo: *mut c_char, n: *mut integer, info: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, work: *mut f32) -> f32 {
                dyload_lib().sla_syrpvgrw_.unwrap()(uplo, n, info, a, lda, af, ldaf, ipiv, work)
            }

pub unsafe fn cbbcsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, theta: *mut f32, phi: *mut f32, u1: *mut scomplex, ldu1: *mut integer, u2: *mut scomplex, ldu2: *mut integer, v1t: *mut scomplex, ldv1t: *mut integer, v2t: *mut scomplex, ldv2t: *mut integer, b11d: *mut f32, b11e: *mut f32, b12d: *mut f32, b12e: *mut f32, b21d: *mut f32, b21e: *mut f32, b22d: *mut f32, b22e: *mut f32, rwork: *mut f32, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().cbbcsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork, info)
            }

pub unsafe fn cbdsqr_(uplo: *mut c_char, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d: *mut f32, e: *mut f32, vt: *mut scomplex, ldvt: *mut integer, u: *mut scomplex, ldu: *mut integer, c: *mut scomplex, ldc: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cbdsqr_.unwrap()(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info)
            }

pub unsafe fn cgbbrd_(vect: *mut c_char, m: *mut integer, n: *mut integer, ncc: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, d: *mut f32, e: *mut f32, q: *mut scomplex, ldq: *mut integer, pt: *mut scomplex, ldpt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgbbrd_.unwrap()(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info)
            }

pub unsafe fn cgbcon_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgbcon_.unwrap()(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork, info)
            }

pub unsafe fn cgbequb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cgbequb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn cgbequ_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cgbequ_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn cgbrfs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgbrfs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cgbrfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, r: *mut f32, c: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgbrfsx_.unwrap()(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cgbsv_(n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cgbsv_.unwrap()(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn cgbsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgbsvx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cgbsvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgbsvxx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cgbtf2_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().cgbtf2_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn cgbtrf_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().cgbtrf_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn cgbtrs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cgbtrs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn cgebak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f32, m: *mut integer, v: *mut scomplex, ldv: *mut integer, info: *mut integer) {
                dyload_lib().cgebak_.unwrap()(job, side, n, ilo, ihi, scale, m, v, ldv, info)
            }

pub unsafe fn cgebal_(job: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f32, info: *mut integer) {
                dyload_lib().cgebal_.unwrap()(job, n, a, lda, ilo, ihi, scale, info)
            }

pub unsafe fn cgebd2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut f32, e: *mut f32, tauq: *mut scomplex, taup: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
            }

pub unsafe fn cgebrd_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut f32, e: *mut f32, tauq: *mut scomplex, taup: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
            }

pub unsafe fn cgecon_(norm: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgecon_.unwrap()(norm, n, a, lda, anorm, rcond, work, rwork, info)
            }

pub unsafe fn cgeequb_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cgeequb_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn cgeequ_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cgeequ_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn cgees_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, n: *mut integer, a: *mut scomplex, lda: *mut integer, sdim: *mut integer, w: *mut scomplex, vs: *mut scomplex, ldvs: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, bwork: *mut logical, info: *mut integer) {
                dyload_lib().cgees_.unwrap()(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info)
            }

pub unsafe fn cgeesx_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, sense: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, sdim: *mut integer, w: *mut scomplex, vs: *mut scomplex, ldvs: *mut integer, rconde: *mut f32, rcondv: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, bwork: *mut logical, info: *mut integer) {
                dyload_lib().cgeesx_.unwrap()(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info)
            }

pub unsafe fn cgeev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, w: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgeev_.unwrap()(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn cgeevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, w: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f32, abnrm: *mut f32, rconde: *mut f32, rcondv: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgeevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info)
            }

pub unsafe fn cgegs_(jobvsl: *mut c_char, jobvsr: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vsl: *mut scomplex, ldvsl: *mut integer, vsr: *mut scomplex, ldvsr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgegs_.unwrap()(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info)
            }

pub unsafe fn cgegv_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgegv_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn cgehd2_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
            }

pub unsafe fn cgehrd_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cgejsv_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, sva: *mut f32, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, cwork: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cgejsv_.unwrap()(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, cwork, lwork, rwork, lrwork, iwork, info)
            }

pub unsafe fn cgelq2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgelq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn cgelqf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cgelq_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, tsize: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgelq_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn cgelqt3_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().cgelqt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn cgelqt_(m: *mut integer, n: *mut integer, mb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgelqt_.unwrap()(m, n, mb, a, lda, t, ldt, work, info)
            }

pub unsafe fn cgels_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgels_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn cgelsd_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, s: *mut f32, rcond: *mut f32, rank: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cgelsd_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info)
            }

pub unsafe fn cgelss_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, s: *mut f32, rcond: *mut f32, rank: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgelss_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info)
            }

pub unsafe fn cgelsx_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f32, rank: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgelsx_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info)
            }

pub unsafe fn cgelsy_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f32, rank: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgelsy_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info)
            }

pub unsafe fn cgemlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, tsize: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgemlq_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn cgemlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgemlqt_.unwrap()(side, trans, m, n, k, mb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn cgemqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, tsize: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgemqr_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn cgemqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, nb: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgemqrt_.unwrap()(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn cgeql2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgeql2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn cgeqlf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgeqlf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cgeqp3_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, rwork, info)
            }

pub unsafe fn cgeqpf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut scomplex, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, rwork, info)
            }

pub unsafe fn cgeqr2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn cgeqr2p_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgeqr2p_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn cgeqrf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cgeqrfp_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgeqrfp_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cgeqr_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, tsize: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgeqr_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn cgeqrt2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().cgeqrt2_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn cgeqrt3_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().cgeqrt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn cgeqrt_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgeqrt_.unwrap()(m, n, nb, a, lda, t, ldt, work, info)
            }

pub unsafe fn cgerfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgerfs_.unwrap()(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cgerfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, r: *mut f32, c: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgerfsx_.unwrap()(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cgerq2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgerq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn cgerqf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgerqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cgesc2_(n: *mut integer, a: *mut scomplex, lda: *mut integer, rhs: *mut scomplex, ipiv: *mut integer, jpiv: *mut integer, scale: *mut f32) {
                dyload_lib().cgesc2_.unwrap()(n, a, lda, rhs, ipiv, jpiv, scale)
            }

pub unsafe fn cgesdd_(jobz: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, u: *mut scomplex, ldu: *mut integer, vt: *mut scomplex, ldvt: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cgesdd_.unwrap()(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info)
            }

pub unsafe fn cgesvd_(jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, u: *mut scomplex, ldu: *mut integer, vt: *mut scomplex, ldvt: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgesvd_.unwrap()(jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info)
            }

pub unsafe fn cgesvdq_(joba: *mut c_char, jobp: *mut c_char, jobr: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, numrank: *mut integer, iwork: *mut integer, liwork: *mut integer, cwork: *mut scomplex, lcwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().cgesvdq_.unwrap()(joba, jobp, jobr, jobu, jobv, m, n, a, lda, s, u, ldu, v, ldv, numrank, iwork, liwork, cwork, lcwork, rwork, lrwork, info)
            }

pub unsafe fn cgesvdx_(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, ns: *mut integer, s: *mut f32, u: *mut scomplex, ldu: *mut integer, vt: *mut scomplex, ldvt: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cgesvdx_.unwrap()(jobu, jobvt, range, m, n, a, lda, vl, vu, il, iu, ns, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info)
            }

pub unsafe fn cgesv_(n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cgesv_.unwrap()(n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn cgesvj_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, sva: *mut f32, mv: *mut integer, v: *mut scomplex, ldv: *mut integer, cwork: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().cgesvj_.unwrap()(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, cwork, lwork, rwork, lrwork, info)
            }

pub unsafe fn cgesvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgesvx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cgesvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgesvxx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cgetc2_(n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, jpiv: *mut integer, info: *mut integer) {
                dyload_lib().cgetc2_.unwrap()(n, a, lda, ipiv, jpiv, info)
            }

pub unsafe fn cgetf2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().cgetf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn cgetrf2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().cgetrf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn cgetrf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().cgetrf_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn cgetri_(n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgetri_.unwrap()(n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn cgetrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cgetrs_.unwrap()(trans, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn cgetsls_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgetsls_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn cggbak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f32, rscale: *mut f32, m: *mut integer, v: *mut scomplex, ldv: *mut integer, info: *mut integer) {
                dyload_lib().cggbak_.unwrap()(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info)
            }

pub unsafe fn cggbal_(job: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f32, rscale: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().cggbal_.unwrap()(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info)
            }

pub unsafe fn cgges3_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, sdim: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vsl: *mut scomplex, ldvsl: *mut integer, vsr: *mut scomplex, ldvsr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, bwork: *mut logical, info: *mut integer) {
                dyload_lib().cgges3_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info)
            }

pub unsafe fn cgges_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, sdim: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vsl: *mut scomplex, ldvsl: *mut integer, vsr: *mut scomplex, ldvsr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, bwork: *mut logical, info: *mut integer) {
                dyload_lib().cgges_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info)
            }

pub unsafe fn cggesx_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, sense: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, sdim: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vsl: *mut scomplex, ldvsl: *mut integer, vsr: *mut scomplex, ldvsr: *mut integer, rconde: *mut f32, rcondv: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, liwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().cggesx_.unwrap()(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info)
            }

pub unsafe fn cggev3_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cggev3_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn cggev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cggev_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn cggevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f32, rscale: *mut f32, abnrm: *mut f32, bbnrm: *mut f32, rconde: *mut f32, rcondv: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().cggevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info)
            }

pub unsafe fn cggglm_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, d: *mut scomplex, x: *mut scomplex, y: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cggglm_.unwrap()(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info)
            }

pub unsafe fn cgghd3_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, q: *mut scomplex, ldq: *mut integer, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgghd3_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, work, lwork, info)
            }

pub unsafe fn cgghrd_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, q: *mut scomplex, ldq: *mut integer, z: *mut scomplex, ldz: *mut integer, info: *mut integer) {
                dyload_lib().cgghrd_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info)
            }

pub unsafe fn cgglse_(m: *mut integer, n: *mut integer, p: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, c: *mut scomplex, d: *mut scomplex, x: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgglse_.unwrap()(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info)
            }

pub unsafe fn cggqrf_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut scomplex, lda: *mut integer, taua: *mut scomplex, b: *mut scomplex, ldb: *mut integer, taub: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cggqrf_.unwrap()(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn cggrqf_(m: *mut integer, p: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, taua: *mut scomplex, b: *mut scomplex, ldb: *mut integer, taub: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cggrqf_.unwrap()(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn cggsvd3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut f32, beta: *mut f32, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, q: *mut scomplex, ldq: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cggsvd3_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, lwork, rwork, iwork, info)
            }

pub unsafe fn cggsvd_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut f32, beta: *mut f32, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, q: *mut scomplex, ldq: *mut integer, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cggsvd_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info)
            }

pub unsafe fn cggsvp3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, tola: *mut f32, tolb: *mut f32, k: *mut integer, l: *mut integer, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, q: *mut scomplex, ldq: *mut integer, iwork: *mut integer, rwork: *mut f32, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cggsvp3_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, lwork, info)
            }

pub unsafe fn cggsvp_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, tola: *mut f32, tolb: *mut f32, k: *mut integer, l: *mut integer, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, q: *mut scomplex, ldq: *mut integer, iwork: *mut integer, rwork: *mut f32, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cggsvp_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info)
            }

pub unsafe fn cgsvj0_(jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut scomplex, sva: *mut f32, mv: *mut integer, v: *mut scomplex, ldv: *mut integer, eps: *mut f32, sfmin: *mut f32, tol: *mut f32, nsweep: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgsvj0_.unwrap()(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn cgsvj1_(jobv: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut scomplex, sva: *mut f32, mv: *mut integer, v: *mut scomplex, ldv: *mut integer, eps: *mut f32, sfmin: *mut f32, tol: *mut f32, nsweep: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cgsvj1_.unwrap()(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn cgtcon_(norm: *mut c_char, n: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, du2: *mut scomplex, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cgtcon_.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn cgtrfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, dlf: *mut scomplex, df: *mut scomplex, duf: *mut scomplex, du2: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgtrfs_.unwrap()(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cgtsv_(n: *mut integer, nrhs: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cgtsv_.unwrap()(n, nrhs, dl, d, du, b, ldb, info)
            }

pub unsafe fn cgtsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, dlf: *mut scomplex, df: *mut scomplex, duf: *mut scomplex, du2: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cgtsvx_.unwrap()(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cgttrf_(n: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, du2: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().cgttrf_.unwrap()(n, dl, d, du, du2, ipiv, info)
            }

pub unsafe fn cgttrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, du2: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cgttrs_.unwrap()(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info)
            }

pub unsafe fn cgtts2_(itrans: *mut integer, n: *mut integer, nrhs: *mut integer, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, du2: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer) {
                dyload_lib().cgtts2_.unwrap()(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb)
            }

pub unsafe fn chb2st_kernels_(uplo: *mut c_char, wantz: *mut logical, ttype: *mut integer, st: *mut integer, ed: *mut integer, sweep: *mut integer, n: *mut integer, nb: *mut integer, ib: *mut integer, a: *mut scomplex, lda: *mut integer, v: *mut scomplex, tau: *mut scomplex, ldvt: *mut integer, work: *mut scomplex) {
                dyload_lib().chb2st_kernels_.unwrap()(uplo, wantz, ttype, st, ed, sweep, n, nb, ib, a, lda, v, tau, ldvt, work)
            }

pub unsafe fn chbev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chbev_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, info)
            }

pub unsafe fn chbev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chbev_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info)
            }

pub unsafe fn chbevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().chbevd_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn chbevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().chbevd_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn chbevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, q: *mut scomplex, ldq: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().chbevx_2stage_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn chbevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, q: *mut scomplex, ldq: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().chbevx_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn chbgst_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut scomplex, ldab: *mut integer, bb: *mut scomplex, ldbb: *mut integer, x: *mut scomplex, ldx: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chbgst_.unwrap()(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info)
            }

pub unsafe fn chbgv_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut scomplex, ldab: *mut integer, bb: *mut scomplex, ldbb: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chbgv_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info)
            }

pub unsafe fn chbgvd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut scomplex, ldab: *mut integer, bb: *mut scomplex, ldbb: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().chbgvd_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn chbgvx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut scomplex, ldab: *mut integer, bb: *mut scomplex, ldbb: *mut integer, q: *mut scomplex, ldq: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().chbgvx_.unwrap()(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn chbtrd_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, d: *mut f32, e: *mut f32, q: *mut scomplex, ldq: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().chbtrd_.unwrap()(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info)
            }

pub unsafe fn checon_3_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().checon_3_.unwrap()(uplo, n, a, lda, e, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn checon_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().checon_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn checon_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().checon_rook_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn cheequb_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cheequb_.unwrap()(uplo, n, a, lda, s, scond, amax, work, info)
            }

pub unsafe fn cheev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cheev_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
            }

pub unsafe fn cheev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cheev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
            }

pub unsafe fn cheevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cheevd_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn cheevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cheevd_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn cheevr_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cheevr_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn cheevr_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cheevr_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn cheevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().cheevx_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn cheevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().cheevx_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn chegs2_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chegs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn chegst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chegst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn chegv_2stage_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chegv_2stage_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info)
            }

pub unsafe fn chegvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().chegvd_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn chegv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, w: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chegv_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info)
            }

pub unsafe fn chegvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().chegvx_.unwrap()(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn cherfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cherfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cherfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cherfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn chesv_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, tb: *mut scomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chesv_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork, info)
            }

pub unsafe fn chesv_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chesv_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn chesv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chesv_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn chesv_rk_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chesv_rk_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn chesv_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chesv_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn chesvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chesvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info)
            }

pub unsafe fn chesvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chesvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cheswapr_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, i1: *mut integer, i2: *mut integer) {
                dyload_lib().cheswapr_.unwrap()(uplo, n, a, lda, i1, i2)
            }

pub unsafe fn chetd2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut f32, e: *mut f32, tau: *mut scomplex, info: *mut integer) {
                dyload_lib().chetd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
            }

pub unsafe fn chetf2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().chetf2_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn chetf2_rk_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().chetf2_rk_.unwrap()(uplo, n, a, lda, e, ipiv, info)
            }

pub unsafe fn chetf2_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().chetf2_rook_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn chetrd_2stage_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut f32, e: *mut f32, tau: *mut scomplex, hous2: *mut scomplex, lhous2: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrd_2stage_.unwrap()(vect, uplo, n, a, lda, d, e, tau, hous2, lhous2, work, lwork, info)
            }

pub unsafe fn chetrd_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut f32, e: *mut f32, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
            }

pub unsafe fn chetrd_hb2st_(stage1: *mut c_char, vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, d: *mut f32, e: *mut f32, hous: *mut scomplex, lhous: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrd_hb2st_.unwrap()(stage1, vect, uplo, n, kd, ab, ldab, d, e, hous, lhous, work, lwork, info)
            }

pub unsafe fn chetrd_he2hb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, a: *mut scomplex, lda: *mut integer, ab: *mut scomplex, ldab: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrd_he2hb_.unwrap()(uplo, n, kd, a, lda, ab, ldab, tau, work, lwork, info)
            }

pub unsafe fn chetrf_aa_2stage_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, tb: *mut scomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrf_aa_2stage_.unwrap()(uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork, info)
            }

pub unsafe fn chetrf_aa_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrf_aa_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn chetrf_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrf_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn chetrf_rk_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrf_rk_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn chetrf_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrf_rook_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn chetri2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetri2_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn chetri2x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().chetri2x_.unwrap()(uplo, n, a, lda, ipiv, work, nb, info)
            }

pub unsafe fn chetri_3_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetri_3_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn chetri_3x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().chetri_3x_.unwrap()(uplo, n, a, lda, e, ipiv, work, nb, info)
            }

pub unsafe fn chetri_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().chetri_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn chetri_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().chetri_rook_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn chetrs2_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().chetrs2_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)
            }

pub unsafe fn chetrs_3_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chetrs_3_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, info)
            }

pub unsafe fn chetrs_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, tb: *mut scomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chetrs_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, info)
            }

pub unsafe fn chetrs_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chetrs_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn chetrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chetrs_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn chetrs_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chetrs_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn chfrk_(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut integer, k: *mut integer, alpha: *mut f32, a: *mut scomplex, lda: *mut integer, beta: *mut f32, c__: *mut scomplex) {
                dyload_lib().chfrk_.unwrap()(transr, uplo, trans, n, k, alpha, a, lda, beta, c__)
            }

pub unsafe fn chgeqz_(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut scomplex, ldh: *mut integer, t: *mut scomplex, ldt: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, q: *mut scomplex, ldq: *mut integer, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chgeqz_.unwrap()(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info)
            }

pub unsafe fn chpcon_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().chpcon_.unwrap()(uplo, n, ap, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn chpev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chpev_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, rwork, info)
            }

pub unsafe fn chpevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().chpevd_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn chpevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().chpevx_.unwrap()(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn chpgst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, bp: *mut scomplex, info: *mut integer) {
                dyload_lib().chpgst_.unwrap()(itype, uplo, n, ap, bp, info)
            }

pub unsafe fn chpgvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, bp: *mut scomplex, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().chpgvd_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn chpgv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, bp: *mut scomplex, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chpgv_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info)
            }

pub unsafe fn chpgvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, bp: *mut scomplex, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().chpgvx_.unwrap()(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn chprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, afp: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chprfs_.unwrap()(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn chpsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chpsv_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn chpsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, afp: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().chpsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn chptrd_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, d: *mut f32, e: *mut f32, tau: *mut scomplex, info: *mut integer) {
                dyload_lib().chptrd_.unwrap()(uplo, n, ap, d, e, tau, info)
            }

pub unsafe fn chptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().chptrf_.unwrap()(uplo, n, ap, ipiv, info)
            }

pub unsafe fn chptri_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().chptri_.unwrap()(uplo, n, ap, ipiv, work, info)
            }

pub unsafe fn chptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().chptrs_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn chsein_(side: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char, select: *mut logical, n: *mut integer, h: *mut scomplex, ldh: *mut integer, w: *mut scomplex, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut scomplex, rwork: *mut f32, ifaill: *mut integer, ifailr: *mut integer, info: *mut integer) {
                dyload_lib().chsein_.unwrap()(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info)
            }

pub unsafe fn chseqr_(job: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut scomplex, ldh: *mut integer, w: *mut scomplex, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().chseqr_.unwrap()(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info)
            }

pub unsafe fn clabrd_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut f32, e: *mut f32, tauq: *mut scomplex, taup: *mut scomplex, x: *mut scomplex, ldx: *mut integer, y: *mut scomplex, ldy: *mut integer) {
                dyload_lib().clabrd_.unwrap()(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy)
            }

pub unsafe fn clacgv_(n: *mut integer, x: *mut scomplex, incx: *mut integer) {
                dyload_lib().clacgv_.unwrap()(n, x, incx)
            }

pub unsafe fn clacn2_(n: *mut integer, v: *mut scomplex, x: *mut scomplex, est: *mut f32, kase: *mut integer, isave: *mut integer) {
                dyload_lib().clacn2_.unwrap()(n, v, x, est, kase, isave)
            }

pub unsafe fn clacon_(n: *mut integer, v: *mut scomplex, x: *mut scomplex, est: *mut f32, kase: *mut integer) {
                dyload_lib().clacon_.unwrap()(n, v, x, est, kase)
            }

pub unsafe fn clacp2_(uplo: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut scomplex, ldb: *mut integer) {
                dyload_lib().clacp2_.unwrap()(uplo, m, n, a, lda, b, ldb)
            }

pub unsafe fn clacpy_(uplo: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer) {
                dyload_lib().clacpy_.unwrap()(uplo, m, n, a, lda, b, ldb)
            }

pub unsafe fn clacrm_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut f32, ldb: *mut integer, c: *mut scomplex, ldc: *mut integer, rwork: *mut f32) {
                dyload_lib().clacrm_.unwrap()(m, n, a, lda, b, ldb, c, ldc, rwork)
            }

pub unsafe fn clacrt_(n: *mut integer, cx: *mut scomplex, incx: *mut integer, cy: *mut scomplex, incy: *mut integer, c: *mut scomplex, s: *mut scomplex) {
                dyload_lib().clacrt_.unwrap()(n, cx, incx, cy, incy, c, s)
            }

pub unsafe fn claed0_(qsiz: *mut integer, n: *mut integer, d: *mut f32, e: *mut f32, q: *mut scomplex, ldq: *mut integer, qstore: *mut scomplex, ldqs: *mut integer, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().claed0_.unwrap()(qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info)
            }

pub unsafe fn claed7_(n: *mut integer, cutpnt: *mut integer, qsiz: *mut integer, tlvls: *mut integer, curlvl: *mut integer, curpbm: *mut integer, d: *mut f32, q: *mut scomplex, ldq: *mut integer, rho: *mut f32, indxq: *mut integer, qstore: *mut f32, qptr: *mut integer, prmptr: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f32, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().claed7_.unwrap()(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info)
            }

pub unsafe fn claed8_(k: *mut integer, n: *mut integer, qsiz: *mut integer, q: *mut scomplex, ldq: *mut integer, d: *mut f32, rho: *mut f32, cutpnt: *mut integer, z: *mut f32, dlamda: *mut f32, q2: *mut scomplex, ldq2: *mut integer, w: *mut f32, indxp: *mut integer, indx: *mut integer, indxq: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f32, info: *mut integer) {
                dyload_lib().claed8_.unwrap()(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info)
            }

pub unsafe fn claein_(rightv: *mut logical, noinit: *mut logical, n: *mut integer, h: *mut scomplex, ldh: *mut integer, w: *mut scomplex, v: *mut scomplex, b: *mut scomplex, ldb: *mut integer, rwork: *mut f32, eps3: *mut f32, smlnum: *mut f32, info: *mut integer) {
                dyload_lib().claein_.unwrap()(rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info)
            }

pub unsafe fn claesy_(a: *mut scomplex, b: *mut scomplex, c: *mut scomplex, rt1: *mut scomplex, rt2: *mut scomplex, evscal: *mut scomplex, cs1: *mut scomplex, sn1: *mut scomplex) {
                dyload_lib().claesy_.unwrap()(a, b, c, rt1, rt2, evscal, cs1, sn1)
            }

pub unsafe fn claev2_(a: *mut scomplex, b: *mut scomplex, c: *mut scomplex, rt1: *mut f32, rt2: *mut f32, cs1: *mut f32, sn1: *mut scomplex) {
                dyload_lib().claev2_.unwrap()(a, b, c, rt1, rt2, cs1, sn1)
            }

pub unsafe fn clag2z_(m: *mut integer, n: *mut integer, sa: *mut scomplex, ldsa: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().clag2z_.unwrap()(m, n, sa, ldsa, a, lda, info)
            }

pub unsafe fn cla_gbamv_(trans: *mut integer, m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, alpha: *mut f32, ab: *mut scomplex, ldab: *mut integer, x: *mut scomplex, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().cla_gbamv_.unwrap()(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy)
            }

pub unsafe fn cla_gbrfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut scomplex, ldb: *mut integer, y: *mut scomplex, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut scomplex, ayb: *mut f32, dy: *mut scomplex, y_tail: *mut scomplex, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().cla_gbrfsx_extended_.unwrap()(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn cla_geamv_(trans: *mut integer, m: *mut integer, n: *mut integer, alpha: *mut f32, a: *mut scomplex, lda: *mut integer, x: *mut scomplex, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().cla_geamv_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn cla_gerfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut scomplex, ldb: *mut integer, y: *mut scomplex, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, errs_n: *mut f32, errs_c: *mut f32, res: *mut scomplex, ayb: *mut f32, dy: *mut scomplex, y_tail: *mut scomplex, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().cla_gerfsx_extended_.unwrap()(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn clags2_(upper: *mut logical, a1: *mut f32, a2: *mut scomplex, a3: *mut f32, b1: *mut f32, b2: *mut scomplex, b3: *mut f32, csu: *mut f32, snu: *mut scomplex, csv: *mut f32, snv: *mut scomplex, csq: *mut f32, snq: *mut scomplex) {
                dyload_lib().clags2_.unwrap()(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq)
            }

pub unsafe fn clagtm_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, alpha: *mut f32, dl: *mut scomplex, d: *mut scomplex, du: *mut scomplex, x: *mut scomplex, ldx: *mut integer, beta: *mut f32, b: *mut scomplex, ldb: *mut integer) {
                dyload_lib().clagtm_.unwrap()(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb)
            }

pub unsafe fn cla_heamv_(uplo: *mut integer, n: *mut integer, alpha: *mut f32, a: *mut scomplex, lda: *mut integer, x: *mut scomplex, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().cla_heamv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn clahef_aa_(uplo: *mut c_char, j1: *mut integer, m: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, h: *mut scomplex, ldh: *mut integer, work: *mut scomplex) {
                dyload_lib().clahef_aa_.unwrap()(uplo, j1, m, nb, a, lda, ipiv, h, ldh, work)
            }

pub unsafe fn clahef_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, w: *mut scomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().clahef_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn clahef_rk_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, w: *mut scomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().clahef_rk_.unwrap()(uplo, n, nb, kb, a, lda, e, ipiv, w, ldw, info)
            }

pub unsafe fn clahef_rook_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, w: *mut scomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().clahef_rook_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn cla_herfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut scomplex, ldb: *mut integer, y: *mut scomplex, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut scomplex, ayb: *mut f32, dy: *mut scomplex, y_tail: *mut scomplex, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().cla_herfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn clahqr_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut scomplex, ldh: *mut integer, w: *mut scomplex, iloz: *mut integer, ihiz: *mut integer, z: *mut scomplex, ldz: *mut integer, info: *mut integer) {
                dyload_lib().clahqr_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info)
            }

pub unsafe fn clahr2_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, t: *mut scomplex, ldt: *mut integer, y: *mut scomplex, ldy: *mut integer) {
                dyload_lib().clahr2_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn clahrd_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, t: *mut scomplex, ldt: *mut integer, y: *mut scomplex, ldy: *mut integer) {
                dyload_lib().clahrd_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn claic1_(job: *mut integer, j: *mut integer, x: *mut scomplex, sest: *mut f32, w: *mut scomplex, gamma: *mut scomplex, sestpr: *mut f32, s: *mut scomplex, c__: *mut scomplex) {
                dyload_lib().claic1_.unwrap()(job, j, x, sest, w, gamma, sestpr, s, c__)
            }

pub unsafe fn cla_lin_berr_(n: *mut integer, nz: *mut integer, nrhs: *mut integer, res: *mut scomplex, ayb: *mut f32, berr: *mut f32) {
                dyload_lib().cla_lin_berr_.unwrap()(n, nz, nrhs, res, ayb, berr)
            }

pub unsafe fn clals0_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, nrhs: *mut integer, b: *mut scomplex, ldb: *mut integer, bx: *mut scomplex, ldbx: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f32, ldgnum: *mut integer, poles: *mut f32, difl: *mut f32, difr: *mut f32, z: *mut f32, k: *mut integer, c: *mut f32, s: *mut f32, rwork: *mut f32, info: *mut integer) {
                dyload_lib().clals0_.unwrap()(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, rwork, info)
            }

pub unsafe fn clalsa_(icompq: *mut integer, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, b: *mut scomplex, ldb: *mut integer, bx: *mut scomplex, ldbx: *mut integer, u: *mut f32, ldu: *mut integer, vt: *mut f32, k: *mut integer, difl: *mut f32, difr: *mut f32, z: *mut f32, poles: *mut f32, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, perm: *mut integer, givnum: *mut f32, c: *mut f32, s: *mut f32, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().clalsa_.unwrap()(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, rwork, iwork, info)
            }

pub unsafe fn clalsd_(uplo: *mut c_char, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, b: *mut scomplex, ldb: *mut integer, rcond: *mut f32, rank: *mut integer, work: *mut scomplex, rwork: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().clalsd_.unwrap()(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info)
            }

pub unsafe fn clamswlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().clamswlq_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn clamtsqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().clamtsqr_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn clapll_(n: *mut integer, x: *mut scomplex, incx: *mut integer, y: *mut scomplex, incy: *mut integer, ssmin: *mut f32) {
                dyload_lib().clapll_.unwrap()(n, x, incx, y, incy, ssmin)
            }

pub unsafe fn clapmr_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut scomplex, ldx: *mut integer, k: *mut integer) {
                dyload_lib().clapmr_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn clapmt_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut scomplex, ldx: *mut integer, k: *mut integer) {
                dyload_lib().clapmt_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn cla_porfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut scomplex, ldb: *mut integer, y: *mut scomplex, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut scomplex, ayb: *mut f32, dy: *mut scomplex, y_tail: *mut scomplex, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().cla_porfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn claqgb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut scomplex, ldab: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqgb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn claqge_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqge_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn claqhb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqhb_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, equed)
            }

pub unsafe fn claqhe_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqhe_.unwrap()(uplo, n, a, lda, s, scond, amax, equed)
            }

pub unsafe fn claqhp_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqhp_.unwrap()(uplo, n, ap, s, scond, amax, equed)
            }

pub unsafe fn claqp2_(m: *mut integer, n: *mut integer, offset: *mut integer, a: *mut scomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut scomplex, vn1: *mut f32, vn2: *mut f32, work: *mut scomplex) {
                dyload_lib().claqp2_.unwrap()(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work)
            }

pub unsafe fn claqps_(m: *mut integer, n: *mut integer, offset: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut scomplex, vn1: *mut f32, vn2: *mut f32, auxv: *mut scomplex, f: *mut scomplex, ldf: *mut integer) {
                dyload_lib().claqps_.unwrap()(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf)
            }

pub unsafe fn claqr0_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut scomplex, ldh: *mut integer, w: *mut scomplex, iloz: *mut integer, ihiz: *mut integer, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().claqr0_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn claqr1_(n: *mut integer, h: *mut scomplex, ldh: *mut integer, s1: *mut scomplex, s2: *mut scomplex, v: *mut scomplex) {
                dyload_lib().claqr1_.unwrap()(n, h, ldh, s1, s2, v)
            }

pub unsafe fn claqr2_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut scomplex, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut scomplex, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sh: *mut scomplex, v: *mut scomplex, ldv: *mut integer, nh: *mut integer, t: *mut scomplex, ldt: *mut integer, nv: *mut integer, wv: *mut scomplex, ldwv: *mut integer, work: *mut scomplex, lwork: *mut integer) {
                dyload_lib().claqr2_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn claqr3_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut scomplex, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut scomplex, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sh: *mut scomplex, v: *mut scomplex, ldv: *mut integer, nh: *mut integer, t: *mut scomplex, ldt: *mut integer, nv: *mut integer, wv: *mut scomplex, ldwv: *mut integer, work: *mut scomplex, lwork: *mut integer) {
                dyload_lib().claqr3_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn claqr4_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut scomplex, ldh: *mut integer, w: *mut scomplex, iloz: *mut integer, ihiz: *mut integer, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().claqr4_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn claqr5_(wantt: *mut logical, wantz: *mut logical, kacc22: *mut integer, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nshfts: *mut integer, s: *mut scomplex, h: *mut scomplex, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut scomplex, ldz: *mut integer, v: *mut scomplex, ldv: *mut integer, u: *mut scomplex, ldu: *mut integer, nv: *mut integer, wv: *mut scomplex, ldwv: *mut integer, nh: *mut integer, wh: *mut scomplex, ldwh: *mut integer) {
                dyload_lib().claqr5_.unwrap()(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)
            }

pub unsafe fn claqsb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqsb_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, equed)
            }

pub unsafe fn claqsp_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqsp_.unwrap()(uplo, n, ap, s, scond, amax, equed)
            }

pub unsafe fn claqsy_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().claqsy_.unwrap()(uplo, n, a, lda, s, scond, amax, equed)
            }

pub unsafe fn clar1v_(n: *mut integer, b1: *mut integer, bn: *mut integer, lambda: *mut f32, d: *mut f32, l: *mut f32, ld: *mut f32, lld: *mut f32, pivmin: *mut f32, gaptol: *mut f32, z: *mut scomplex, wantnc: *mut logical, negcnt: *mut integer, ztz: *mut f32, mingma: *mut f32, r: *mut integer, isuppz: *mut integer, nrminv: *mut f32, resid: *mut f32, rqcorr: *mut f32, work: *mut f32) {
                dyload_lib().clar1v_.unwrap()(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work)
            }

pub unsafe fn clar2v_(n: *mut integer, x: *mut scomplex, y: *mut scomplex, z: *mut scomplex, incx: *mut integer, c: *mut f32, s: *mut scomplex, incc: *mut integer) {
                dyload_lib().clar2v_.unwrap()(n, x, y, z, incx, c, s, incc)
            }

pub unsafe fn clarcm_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, c: *mut scomplex, ldc: *mut integer, rwork: *mut f32) {
                dyload_lib().clarcm_.unwrap()(m, n, a, lda, b, ldb, c, ldc, rwork)
            }

pub unsafe fn clarfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, ldwork: *mut integer) {
                dyload_lib().clarfb_.unwrap()(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn clarf_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut scomplex, incv: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex) {
                dyload_lib().clarf_.unwrap()(side, m, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn clarfg_(n: *mut integer, alpha: *mut scomplex, x: *mut scomplex, incx: *mut integer, tau: *mut scomplex) {
                dyload_lib().clarfg_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn clarfgp_(n: *mut integer, alpha: *mut scomplex, x: *mut scomplex, incx: *mut integer, tau: *mut scomplex) {
                dyload_lib().clarfgp_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn clarft_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut scomplex, ldv: *mut integer, tau: *mut scomplex, t: *mut scomplex, ldt: *mut integer) {
                dyload_lib().clarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn clarfx_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut scomplex, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex) {
                dyload_lib().clarfx_.unwrap()(side, m, n, v, tau, c, ldc, work)
            }

pub unsafe fn clarfy_(uplo: *mut c_char, n: *mut integer, v: *mut scomplex, incv: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex) {
                dyload_lib().clarfy_.unwrap()(uplo, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn clargv_(n: *mut integer, x: *mut scomplex, incx: *mut integer, y: *mut scomplex, incy: *mut integer, c: *mut f32, incc: *mut integer) {
                dyload_lib().clargv_.unwrap()(n, x, incx, y, incy, c, incc)
            }

pub unsafe fn clarnv_(idist: *mut integer, iseed: *mut integer, n: *mut integer, x: *mut scomplex) {
                dyload_lib().clarnv_.unwrap()(idist, iseed, n, x)
            }

pub unsafe fn clarrv_(n: *mut integer, vl: *mut f32, vu: *mut f32, d: *mut f32, l: *mut f32, pivmin: *mut f32, isplit: *mut integer, m: *mut integer, dol: *mut integer, dou: *mut integer, minrgp: *mut f32, rtol1: *mut f32, rtol2: *mut f32, w: *mut f32, werr: *mut f32, wgap: *mut f32, iblock: *mut integer, indexw: *mut integer, gers: *mut f32, z: *mut scomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().clarrv_.unwrap()(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info)
            }

pub unsafe fn clarscl2_(m: *mut integer, n: *mut integer, d: *mut f32, x: *mut scomplex, ldx: *mut integer) {
                dyload_lib().clarscl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn clartg_(f: *mut scomplex, g: *mut scomplex, cs: *mut f32, sn: *mut scomplex, r__: *mut scomplex) {
                dyload_lib().clartg_.unwrap()(f, g, cs, sn, r__)
            }

pub unsafe fn clartv_(n: *mut integer, x: *mut scomplex, incx: *mut integer, y: *mut scomplex, incy: *mut integer, c: *mut f32, s: *mut scomplex, incc: *mut integer) {
                dyload_lib().clartv_.unwrap()(n, x, incx, y, incy, c, s, incc)
            }

pub unsafe fn clarzb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, ldwork: *mut integer) {
                dyload_lib().clarzb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn clarz_(side: *mut c_char, m: *mut integer, n: *mut integer, l: *mut integer, v: *mut scomplex, incv: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex) {
                dyload_lib().clarz_.unwrap()(side, m, n, l, v, incv, tau, c, ldc, work)
            }

pub unsafe fn clarzt_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut scomplex, ldv: *mut integer, tau: *mut scomplex, t: *mut scomplex, ldt: *mut integer) {
                dyload_lib().clarzt_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn clascl2_(m: *mut integer, n: *mut integer, d: *mut f32, x: *mut scomplex, ldx: *mut integer) {
                dyload_lib().clascl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn clascl_(type_: *mut c_char, kl: *mut integer, ku: *mut integer, cfrom: *mut f32, cto: *mut f32, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().clascl_.unwrap()(type_, kl, ku, cfrom, cto, m, n, a, lda, info)
            }

pub unsafe fn claset_(uplo: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, a: *mut scomplex, lda: *mut integer) {
                dyload_lib().claset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
            }

pub unsafe fn clasr_(side: *mut c_char, pivot: *mut c_char, direct: *mut c_char, m: *mut integer, n: *mut integer, c: *mut f32, s: *mut f32, a: *mut scomplex, lda: *mut integer) {
                dyload_lib().clasr_.unwrap()(side, pivot, direct, m, n, c, s, a, lda)
            }

pub unsafe fn classq_(n: *mut integer, x: *mut scomplex, incx: *mut integer, scale: *mut f32, sumsq: *mut f32) {
                dyload_lib().classq_.unwrap()(n, x, incx, scale, sumsq)
            }

pub unsafe fn claswlq_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().claswlq_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn claswp_(n: *mut integer, a: *mut scomplex, lda: *mut integer, k1: *mut integer, k2: *mut integer, ipiv: *mut integer, incx: *mut integer) {
                dyload_lib().claswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
            }

pub unsafe fn cla_syamv_(uplo: *mut integer, n: *mut integer, alpha: *mut f32, a: *mut scomplex, lda: *mut integer, x: *mut scomplex, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().cla_syamv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn clasyf_aa_(uplo: *mut c_char, j1: *mut integer, m: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, h: *mut scomplex, ldh: *mut integer, work: *mut scomplex) {
                dyload_lib().clasyf_aa_.unwrap()(uplo, j1, m, nb, a, lda, ipiv, h, ldh, work)
            }

pub unsafe fn clasyf_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, w: *mut scomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().clasyf_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn clasyf_rk_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, w: *mut scomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().clasyf_rk_.unwrap()(uplo, n, nb, kb, a, lda, e, ipiv, w, ldw, info)
            }

pub unsafe fn clasyf_rook_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, w: *mut scomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().clasyf_rook_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn cla_syrfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut scomplex, ldb: *mut integer, y: *mut scomplex, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut scomplex, ayb: *mut f32, dy: *mut scomplex, y_tail: *mut scomplex, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().cla_syrfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn clatbs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, x: *mut scomplex, scale: *mut f32, cnorm: *mut f32, info: *mut integer) {
                dyload_lib().clatbs_.unwrap()(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info)
            }

pub unsafe fn clatdf_(ijob: *mut integer, n: *mut integer, z: *mut scomplex, ldz: *mut integer, rhs: *mut scomplex, rdsum: *mut f32, rdscal: *mut f32, ipiv: *mut integer, jpiv: *mut integer) {
                dyload_lib().clatdf_.unwrap()(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv)
            }

pub unsafe fn clatps_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, ap: *mut scomplex, x: *mut scomplex, scale: *mut f32, cnorm: *mut f32, info: *mut integer) {
                dyload_lib().clatps_.unwrap()(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info)
            }

pub unsafe fn clatrd_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut f32, tau: *mut scomplex, w: *mut scomplex, ldw: *mut integer) {
                dyload_lib().clatrd_.unwrap()(uplo, n, nb, a, lda, e, tau, w, ldw)
            }

pub unsafe fn clatrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, x: *mut scomplex, scale: *mut f32, cnorm: *mut f32, info: *mut integer) {
                dyload_lib().clatrs_.unwrap()(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info)
            }

pub unsafe fn clatrz_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex) {
                dyload_lib().clatrz_.unwrap()(m, n, l, a, lda, tau, work)
            }

pub unsafe fn clatsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().clatsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn clatzm_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut scomplex, incv: *mut integer, tau: *mut scomplex, c1: *mut scomplex, c2: *mut scomplex, ldc: *mut integer, work: *mut scomplex) {
                dyload_lib().clatzm_.unwrap()(side, m, n, v, incv, tau, c1, c2, ldc, work)
            }

pub unsafe fn claunhr_col_getrfnp2_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut scomplex, info: *mut integer) {
                dyload_lib().claunhr_col_getrfnp2_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn claunhr_col_getrfnp_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, d: *mut scomplex, info: *mut integer) {
                dyload_lib().claunhr_col_getrfnp_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn clauu2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().clauu2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn clauum_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().clauum_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn cla_wwaddw_(n: *mut integer, x: *mut scomplex, y: *mut scomplex, w: *mut scomplex) {
                dyload_lib().cla_wwaddw_.unwrap()(n, x, y, w)
            }

pub unsafe fn cpbcon_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cpbcon_.unwrap()(uplo, n, kd, ab, ldab, anorm, rcond, work, rwork, info)
            }

pub unsafe fn cpbequ_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cpbequ_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, info)
            }

pub unsafe fn cpbrfs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cpbrfs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cpbstf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, info: *mut integer) {
                dyload_lib().cpbstf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn cpbsv_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cpbsv_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn cpbsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, afb: *mut scomplex, ldafb: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cpbsvx_.unwrap()(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cpbtf2_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, info: *mut integer) {
                dyload_lib().cpbtf2_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn cpbtrf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, info: *mut integer) {
                dyload_lib().cpbtrf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn cpbtrs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cpbtrs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn cpftrf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, info: *mut integer) {
                dyload_lib().cpftrf_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn cpftri_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, info: *mut integer) {
                dyload_lib().cpftri_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn cpftrs_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cpftrs_.unwrap()(transr, uplo, n, nrhs, a, b, ldb, info)
            }

pub unsafe fn cpocon_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cpocon_.unwrap()(uplo, n, a, lda, anorm, rcond, work, rwork, info)
            }

pub unsafe fn cpoequb_(n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cpoequb_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn cpoequ_(n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cpoequ_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn cporfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cporfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cporfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cporfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cposv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cposv_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn cposvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cposvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cposvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cposvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn cpotf2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().cpotf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn cpotrf2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().cpotrf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn cpotrf_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().cpotrf_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn cpotri_(uplo: *mut c_char, n: *mut integer, buff_A: *mut scomplex, ldim_A: *mut integer, info: *mut integer) {
                dyload_lib().cpotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
            }

pub unsafe fn cpotrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cpotrs_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn cppcon_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cppcon_.unwrap()(uplo, n, ap, anorm, rcond, work, rwork, info)
            }

pub unsafe fn cppequ_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().cppequ_.unwrap()(uplo, n, ap, s, scond, amax, info)
            }

pub unsafe fn cpprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, afp: *mut scomplex, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cpprfs_.unwrap()(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cppsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cppsv_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn cppsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, afp: *mut scomplex, equed: *mut c_char, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cppsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cpptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, info: *mut integer) {
                dyload_lib().cpptrf_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn cpptri_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, info: *mut integer) {
                dyload_lib().cpptri_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn cpptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cpptrs_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn cpstf2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().cpstf2_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn cpstrf_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().cpstrf_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn cptcon_(n: *mut integer, d: *mut f32, e: *mut scomplex, anorm: *mut f32, rcond: *mut f32, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cptcon_.unwrap()(n, d, e, anorm, rcond, rwork, info)
            }

pub unsafe fn cpteqr_(compz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().cpteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn cptrfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut scomplex, df: *mut f32, ef: *mut scomplex, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cptrfs_.unwrap()(uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cptsv_(n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cptsv_.unwrap()(n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn cptsvx_(fact: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut scomplex, df: *mut f32, ef: *mut scomplex, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cptsvx_.unwrap()(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn cpttrf_(n: *mut integer, d: *mut f32, e: *mut scomplex, info: *mut integer) {
                dyload_lib().cpttrf_.unwrap()(n, d, e, info)
            }

pub unsafe fn cpttrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cpttrs_.unwrap()(uplo, n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn cptts2_(iuplo: *mut integer, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut scomplex, b: *mut scomplex, ldb: *mut integer) {
                dyload_lib().cptts2_.unwrap()(iuplo, n, nrhs, d, e, b, ldb)
            }

pub unsafe fn crot_(n: *mut integer, cx: *mut scomplex, incx: *mut integer, cy: *mut scomplex, incy: *mut integer, c: *mut f32, s: *mut scomplex) {
                dyload_lib().crot_.unwrap()(n, cx, incx, cy, incy, c, s)
            }

pub unsafe fn cspcon_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cspcon_.unwrap()(uplo, n, ap, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn cspmv_(uplo: *mut c_char, n: *mut integer, alpha: *mut scomplex, ap: *mut scomplex, x: *mut scomplex, incx: *mut integer, beta: *mut scomplex, y: *mut scomplex, incy: *mut integer) {
                dyload_lib().cspmv_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
            }

pub unsafe fn cspr_(uplo: *mut c_char, n: *mut integer, alpha: *mut scomplex, x: *mut scomplex, incx: *mut integer, ap: *mut scomplex) {
                dyload_lib().cspr_.unwrap()(uplo, n, alpha, x, incx, ap)
            }

pub unsafe fn csprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, afp: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().csprfs_.unwrap()(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn cspsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().cspsv_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn cspsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, afp: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().cspsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn csptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().csptrf_.unwrap()(uplo, n, ap, ipiv, info)
            }

pub unsafe fn csptri_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csptri_.unwrap()(uplo, n, ap, ipiv, work, info)
            }

pub unsafe fn csptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().csptrs_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn csrscl_(n: *mut integer, sa: *mut f32, sx: *mut scomplex, incx: *mut integer) {
                dyload_lib().csrscl_.unwrap()(n, sa, sx, incx)
            }

pub unsafe fn cstedc_(compz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cstedc_.unwrap()(compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn cstegr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cstegr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn cstein_(n: *mut integer, d: *mut f32, e: *mut f32, m: *mut integer, w: *mut f32, iblock: *mut integer, isplit: *mut integer, z: *mut scomplex, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().cstein_.unwrap()(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn cstemr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, m: *mut integer, w: *mut f32, z: *mut scomplex, ldz: *mut integer, nzc: *mut integer, isuppz: *mut integer, tryrac: *mut logical, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().cstemr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info)
            }

pub unsafe fn csteqr_(compz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut scomplex, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().csteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn csycon_3_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csycon_3_.unwrap()(uplo, n, a, lda, e, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn csycon_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csycon_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn csycon_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csycon_rook_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn csyconv_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csyconv_.unwrap()(uplo, way, n, a, lda, ipiv, work, info)
            }

pub unsafe fn csyconvf_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().csyconvf_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn csyconvf_rook_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().csyconvf_rook_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn csyequb_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csyequb_.unwrap()(uplo, n, a, lda, s, scond, amax, work, info)
            }

pub unsafe fn csymv_(uplo: *mut c_char, n: *mut integer, alpha: *mut scomplex, a: *mut scomplex, lda: *mut integer, x: *mut scomplex, incx: *mut integer, beta: *mut scomplex, y: *mut scomplex, incy: *mut integer) {
                dyload_lib().csymv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn csyr_(uplo: *mut c_char, n: *mut integer, alpha: *mut scomplex, x: *mut scomplex, incx: *mut integer, a: *mut scomplex, lda: *mut integer) {
                dyload_lib().csyr_.unwrap()(uplo, n, alpha, x, incx, a, lda)
            }

pub unsafe fn csyrfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().csyrfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn csyrfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().csyrfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn csysv_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, tb: *mut scomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csysv_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork, info)
            }

pub unsafe fn csysv_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csysv_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn csysv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csysv_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn csysv_rk_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csysv_rk_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn csysv_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csysv_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn csysvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().csysvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info)
            }

pub unsafe fn csysvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, af: *mut scomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().csysvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn csyswapr_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, i1: *mut integer, i2: *mut integer) {
                dyload_lib().csyswapr_.unwrap()(uplo, n, a, lda, i1, i2)
            }

pub unsafe fn csytf2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().csytf2_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn csytf2_rk_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().csytf2_rk_.unwrap()(uplo, n, a, lda, e, ipiv, info)
            }

pub unsafe fn csytf2_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().csytf2_rook_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn csytrf_aa_2stage_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, tb: *mut scomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytrf_aa_2stage_.unwrap()(uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork, info)
            }

pub unsafe fn csytrf_aa_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytrf_aa_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn csytrf_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytrf_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn csytrf_rk_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytrf_rk_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn csytrf_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytrf_rook_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn csytri2_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytri2_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn csytri2x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().csytri2x_.unwrap()(uplo, n, a, lda, ipiv, work, nb, info)
            }

pub unsafe fn csytri_3_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytri_3_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn csytri_3x_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, work: *mut scomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().csytri_3x_.unwrap()(uplo, n, a, lda, e, ipiv, work, nb, info)
            }

pub unsafe fn csytri_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csytri_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn csytri_rook_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csytri_rook_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn csytrs2_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().csytrs2_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)
            }

pub unsafe fn csytrs_3_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, e: *mut scomplex, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().csytrs_3_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, info)
            }

pub unsafe fn csytrs_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, tb: *mut scomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().csytrs_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, info)
            }

pub unsafe fn csytrs_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().csytrs_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn csytrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().csytrs_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn csytrs_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, ipiv: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().csytrs_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn ctbcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut scomplex, ldab: *mut integer, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctbcon_.unwrap()(norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork, info)
            }

pub unsafe fn ctbrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctbrfs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn ctbtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut scomplex, ldab: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ctbtrs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn ctfsm_(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut scomplex, a: *mut scomplex, b: *mut scomplex, ldb: *mut integer) {
                dyload_lib().ctfsm_.unwrap()(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb)
            }

pub unsafe fn ctftri_(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut scomplex, info: *mut integer) {
                dyload_lib().ctftri_.unwrap()(transr, uplo, diag, n, a, info)
            }

pub unsafe fn ctfttp_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut scomplex, ap: *mut scomplex, info: *mut integer) {
                dyload_lib().ctfttp_.unwrap()(transr, uplo, n, arf, ap, info)
            }

pub unsafe fn ctfttr_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut scomplex, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ctfttr_.unwrap()(transr, uplo, n, arf, a, lda, info)
            }

pub unsafe fn ctgevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, s: *mut scomplex, lds: *mut integer, p: *mut scomplex, ldp: *mut integer, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctgevc_.unwrap()(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)
            }

pub unsafe fn ctgex2_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, q: *mut scomplex, ldq: *mut integer, z: *mut scomplex, ldz: *mut integer, j1: *mut integer, info: *mut integer) {
                dyload_lib().ctgex2_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info)
            }

pub unsafe fn ctgexc_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, q: *mut scomplex, ldq: *mut integer, z: *mut scomplex, ldz: *mut integer, ifst: *mut integer, ilst: *mut integer, info: *mut integer) {
                dyload_lib().ctgexc_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info)
            }

pub unsafe fn ctgsen_(ijob: *mut integer, wantq: *mut logical, wantz: *mut logical, select: *mut logical, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, alpha: *mut scomplex, beta: *mut scomplex, q: *mut scomplex, ldq: *mut integer, z: *mut scomplex, ldz: *mut integer, m: *mut integer, pl: *mut f32, pr: *mut f32, dif: *mut f32, work: *mut scomplex, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ctgsen_.unwrap()(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ctgsja_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, tola: *mut f32, tolb: *mut f32, alpha: *mut f32, beta: *mut f32, u: *mut scomplex, ldu: *mut integer, v: *mut scomplex, ldv: *mut integer, q: *mut scomplex, ldq: *mut integer, work: *mut scomplex, ncycle: *mut integer, info: *mut integer) {
                dyload_lib().ctgsja_.unwrap()(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info)
            }

pub unsafe fn ctgsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, s: *mut f32, dif: *mut f32, mm: *mut integer, m: *mut integer, work: *mut scomplex, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ctgsna_.unwrap()(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info)
            }

pub unsafe fn ctgsy2_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, c: *mut scomplex, ldc: *mut integer, d: *mut scomplex, ldd: *mut integer, e: *mut scomplex, lde: *mut integer, f: *mut scomplex, ldf: *mut integer, scale: *mut f32, rdsum: *mut f32, rdscal: *mut f32, info: *mut integer) {
                dyload_lib().ctgsy2_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info)
            }

pub unsafe fn ctgsyl_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, c: *mut scomplex, ldc: *mut integer, d: *mut scomplex, ldd: *mut integer, e: *mut scomplex, lde: *mut integer, f: *mut scomplex, ldf: *mut integer, scale: *mut f32, dif: *mut f32, work: *mut scomplex, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ctgsyl_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info)
            }

pub unsafe fn ctpcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut scomplex, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctpcon_.unwrap()(norm, uplo, diag, n, ap, rcond, work, rwork, info)
            }

pub unsafe fn ctplqt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, t: *mut scomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().ctplqt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn ctplqt_(m: *mut integer, n: *mut integer, l: *mut integer, mb: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().ctplqt_.unwrap()(m, n, l, mb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn ctpmlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, mb: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().ctpmlqt_.unwrap()(side, trans, m, n, k, l, mb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn ctpmqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, nb: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().ctpmqrt_.unwrap()(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn ctpqrt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, t: *mut scomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().ctpqrt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn ctpqrt_(m: *mut integer, n: *mut integer, l: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().ctpqrt_.unwrap()(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn ctprfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut scomplex, ldv: *mut integer, t: *mut scomplex, ldt: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, work: *mut scomplex, ldwork: *mut integer) {
                dyload_lib().ctprfb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn ctprfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctprfs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn ctptri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut scomplex, info: *mut integer) {
                dyload_lib().ctptri_.unwrap()(uplo, diag, n, ap, info)
            }

pub unsafe fn ctptrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut scomplex, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ctptrs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn ctpttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, arf: *mut scomplex, info: *mut integer) {
                dyload_lib().ctpttf_.unwrap()(transr, uplo, n, ap, arf, info)
            }

pub unsafe fn ctpttr_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ctpttr_.unwrap()(uplo, n, ap, a, lda, info)
            }

pub unsafe fn ctrcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, rcond: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctrcon_.unwrap()(norm, uplo, diag, n, a, lda, rcond, work, rwork, info)
            }

pub unsafe fn ctrevc3_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut scomplex, ldt: *mut integer, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().ctrevc3_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, lwork, rwork, lrwork, info)
            }

pub unsafe fn ctrevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut scomplex, ldt: *mut integer, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctrevc_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)
            }

pub unsafe fn ctrexc_(compq: *mut c_char, n: *mut integer, t: *mut scomplex, ldt: *mut integer, q: *mut scomplex, ldq: *mut integer, ifst: *mut integer, ilst: *mut integer, info: *mut integer) {
                dyload_lib().ctrexc_.unwrap()(compq, n, t, ldt, q, ldq, ifst, ilst, info)
            }

pub unsafe fn ctrrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, x: *mut scomplex, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut scomplex, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctrrfs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn ctrsen_(job: *mut c_char, compq: *mut c_char, select: *mut logical, n: *mut integer, t: *mut scomplex, ldt: *mut integer, q: *mut scomplex, ldq: *mut integer, w: *mut scomplex, m: *mut integer, s: *mut f32, sep: *mut f32, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ctrsen_.unwrap()(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info)
            }

pub unsafe fn ctrsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut scomplex, ldt: *mut integer, vl: *mut scomplex, ldvl: *mut integer, vr: *mut scomplex, ldvr: *mut integer, s: *mut f32, sep: *mut f32, mm: *mut integer, m: *mut integer, work: *mut scomplex, ldwork: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().ctrsna_.unwrap()(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork, info)
            }

pub unsafe fn ctrsyl_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, c: *mut scomplex, ldc: *mut integer, scale: *mut f32, info: *mut integer) {
                dyload_lib().ctrsyl_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
            }

pub unsafe fn ctrti2_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ctrti2_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn ctrtri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ctrtri_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn ctrtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut scomplex, lda: *mut integer, b: *mut scomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ctrtrs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn ctrttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, arf: *mut scomplex, info: *mut integer) {
                dyload_lib().ctrttf_.unwrap()(transr, uplo, n, a, lda, arf, info)
            }

pub unsafe fn ctrttp_(uplo: *mut c_char, n: *mut integer, a: *mut scomplex, lda: *mut integer, ap: *mut scomplex, info: *mut integer) {
                dyload_lib().ctrttp_.unwrap()(uplo, n, a, lda, ap, info)
            }

pub unsafe fn ctzrqf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, info: *mut integer) {
                dyload_lib().ctzrqf_.unwrap()(m, n, a, lda, tau, info)
            }

pub unsafe fn ctzrzf_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ctzrzf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cunbdb1_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x21: *mut scomplex, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut scomplex, taup2: *mut scomplex, tauq1: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb1_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn cunbdb2_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x21: *mut scomplex, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut scomplex, taup2: *mut scomplex, tauq1: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb2_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn cunbdb3_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x21: *mut scomplex, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut scomplex, taup2: *mut scomplex, tauq1: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb3_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn cunbdb4_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x21: *mut scomplex, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut scomplex, taup2: *mut scomplex, tauq1: *mut scomplex, phantom: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb4_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, phantom, work, lwork, info)
            }

pub unsafe fn cunbdb5_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut scomplex, incx1: *mut integer, x2: *mut scomplex, incx2: *mut integer, q1: *mut scomplex, ldq1: *mut integer, q2: *mut scomplex, ldq2: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb5_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn cunbdb6_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut scomplex, incx1: *mut integer, x2: *mut scomplex, incx2: *mut integer, q1: *mut scomplex, ldq1: *mut integer, q2: *mut scomplex, ldq2: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb6_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn cunbdb_(trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x12: *mut scomplex, ldx12: *mut integer, x21: *mut scomplex, ldx21: *mut integer, x22: *mut scomplex, ldx22: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut scomplex, taup2: *mut scomplex, tauq1: *mut scomplex, tauq2: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunbdb_.unwrap()(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info)
            }

pub unsafe fn cuncsd2by1_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x21: *mut scomplex, ldx21: *mut integer, theta: *mut f32, u1: *mut scomplex, ldu1: *mut integer, u2: *mut scomplex, ldu2: *mut integer, v1t: *mut scomplex, ldv1t: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cuncsd2by1_.unwrap()(jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, rwork, lrwork, iwork, info)
            }

pub unsafe fn cuncsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut scomplex, ldx11: *mut integer, x12: *mut scomplex, ldx12: *mut integer, x21: *mut scomplex, ldx21: *mut integer, x22: *mut scomplex, ldx22: *mut integer, theta: *mut f32, u1: *mut scomplex, ldu1: *mut integer, u2: *mut scomplex, ldu2: *mut integer, v1t: *mut scomplex, ldv1t: *mut integer, v2t: *mut scomplex, ldv2t: *mut integer, work: *mut scomplex, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().cuncsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info)
            }

pub unsafe fn cung2l_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cung2l_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn cung2r_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cung2r_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn cungbr_(vect: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cunghr_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunghr_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cungl2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cungl2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn cunglq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cungql_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungql_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cungqr_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cungr2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cungr2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn cungrq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungrq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cungtr_(uplo: *mut c_char, m: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
            }

pub unsafe fn cungtsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cungtsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn cunhr_col_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut scomplex, lda: *mut integer, t: *mut scomplex, ldt: *mut integer, d: *mut scomplex, info: *mut integer) {
                dyload_lib().cunhr_col_.unwrap()(m, n, nb, a, lda, t, ldt, d, info)
            }

pub unsafe fn cunm22_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, n2: *mut integer, q: *mut scomplex, ldq: *mut integer, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunm22_.unwrap()(side, trans, m, n, n1, n2, q, ldq, c, ldc, work, lwork, info)
            }

pub unsafe fn cunm2l_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cunm2l_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn cunm2r_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cunm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn cunmbr_(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmbr_.unwrap()(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunmhr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmhr_.unwrap()(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunml2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cunml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn cunmlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunmql_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmql_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunmqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunmr2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cunmr2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn cunmr3_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cunmr3_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn cunmrq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmrq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunmrz_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmrz_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cunmtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().cunmtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn cupgtr_(uplo: *mut c_char, n: *mut integer, ap: *mut scomplex, tau: *mut scomplex, q: *mut scomplex, ldq: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cupgtr_.unwrap()(uplo, n, ap, tau, q, ldq, work, info)
            }

pub unsafe fn cupmtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ap: *mut scomplex, tau: *mut scomplex, c: *mut scomplex, ldc: *mut integer, work: *mut scomplex, info: *mut integer) {
                dyload_lib().cupmtr_.unwrap()(side, uplo, trans, m, n, ap, tau, c, ldc, work, info)
            }

pub unsafe fn dbbcsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, theta: *mut f64, phi: *mut f64, u1: *mut f64, ldu1: *mut integer, u2: *mut f64, ldu2: *mut integer, v1t: *mut f64, ldv1t: *mut integer, v2t: *mut f64, ldv2t: *mut integer, b11d: *mut f64, b11e: *mut f64, b12d: *mut f64, b12e: *mut f64, b21d: *mut f64, b21e: *mut f64, b22d: *mut f64, b22e: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dbbcsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork, info)
            }

pub unsafe fn dbdsdc_(uplo: *mut c_char, compq: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, q: *mut f64, iq: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dbdsdc_.unwrap()(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info)
            }

pub unsafe fn dbdsqr_(uplo: *mut c_char, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d: *mut f64, e: *mut f64, vt: *mut f64, ldvt: *mut integer, u: *mut f64, ldu: *mut integer, c: *mut f64, ldc: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().dbdsqr_.unwrap()(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info)
            }

pub unsafe fn dbdsvdx_(uplo: *mut c_char, jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, ns: *mut integer, s: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dbdsvdx_.unwrap()(uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldz, work, iwork, info)
            }

pub unsafe fn dcombssq_(v1: *mut f64, v2: *mut f64) {
                dyload_lib().dcombssq_.unwrap()(v1, v2)
            }

pub unsafe fn ddisna_(job: *mut c_char, m: *mut integer, n: *mut integer, d: *mut f64, sep: *mut f64, info: *mut integer) {
                dyload_lib().ddisna_.unwrap()(job, m, n, d, sep, info)
            }

pub unsafe fn dgbbrd_(vect: *mut c_char, m: *mut integer, n: *mut integer, ncc: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, d: *mut f64, e: *mut f64, q: *mut f64, ldq: *mut integer, pt: *mut f64, ldpt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dgbbrd_.unwrap()(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info)
            }

pub unsafe fn dgbcon_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgbcon_.unwrap()(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dgbequb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dgbequb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn dgbequ_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dgbequ_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn dgbrfs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgbrfs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dgbrfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, ipiv: *mut integer, r: *mut f64, c: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgbrfsx_.unwrap()(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dgbsv_(n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dgbsv_.unwrap()(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn dgbsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgbsvx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dgbsvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgbsvxx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dgbtf2_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dgbtf2_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn dgbtrf_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dgbtrf_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn dgbtrs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dgbtrs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn dgebak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f64, m: *mut integer, v: *mut f64, ldv: *mut integer, info: *mut integer) {
                dyload_lib().dgebak_.unwrap()(job, side, n, ilo, ihi, scale, m, v, ldv, info)
            }

pub unsafe fn dgebal_(job: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f64, info: *mut integer) {
                dyload_lib().dgebal_.unwrap()(job, n, a, lda, ilo, ihi, scale, info)
            }

pub unsafe fn dgebd2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, e: *mut f64, tauq: *mut f64, taup: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
            }

pub unsafe fn dgebrd_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, e: *mut f64, tauq: *mut f64, taup: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
            }

pub unsafe fn dgecon_(norm: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgecon_.unwrap()(norm, n, a, lda, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dgeequb_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dgeequb_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn dgeequ_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dgeequ_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn dgees_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, n: *mut integer, a: *mut f64, lda: *mut integer, sdim: *mut integer, wr: *mut f64, wi: *mut f64, vs: *mut f64, ldvs: *mut integer, work: *mut f64, lwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().dgees_.unwrap()(jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info)
            }

pub unsafe fn dgeesx_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, sense: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, sdim: *mut integer, wr: *mut f64, wi: *mut f64, vs: *mut f64, ldvs: *mut integer, rconde: *mut f64, rcondv: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().dgeesx_.unwrap()(jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)
            }

pub unsafe fn dgeev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, wr: *mut f64, wi: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeev_.unwrap()(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn dgeevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, wr: *mut f64, wi: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f64, abnrm: *mut f64, rconde: *mut f64, rcondv: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info)
            }

pub unsafe fn dgegs_(jobvsl: *mut c_char, jobvsr: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vsl: *mut f64, ldvsl: *mut integer, vsr: *mut f64, ldvsr: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgegs_.unwrap()(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info)
            }

pub unsafe fn dgegv_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgegv_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn dgehd2_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
            }

pub unsafe fn dgehrd_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dgejsv_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, sva: *mut f64, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgejsv_.unwrap()(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info)
            }

pub unsafe fn dgelq2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgelq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn dgelqf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dgelq_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, tsize: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgelq_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn dgelqt3_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, info: *mut integer) {
                dyload_lib().dgelqt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn dgelqt_(m: *mut integer, n: *mut integer, mb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dgelqt_.unwrap()(m, n, mb, a, lda, t, ldt, work, info)
            }

pub unsafe fn dgels_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgels_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn dgelsd_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, s: *mut f64, rcond: *mut f64, rank: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgelsd_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info)
            }

pub unsafe fn dgelss_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, s: *mut f64, rcond: *mut f64, rank: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgelss_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info)
            }

pub unsafe fn dgelsx_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f64, rank: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dgelsx_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info)
            }

pub unsafe fn dgelsy_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f64, rank: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgelsy_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info)
            }

pub unsafe fn dgemlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, tsize: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgemlq_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn dgemlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dgemlqt_.unwrap()(side, trans, m, n, k, mb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn dgemqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, tsize: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgemqr_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn dgemqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, nb: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dgemqrt_.unwrap()(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn dgeql2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgeql2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn dgeqlf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeqlf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dgeqp3_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, jpvt: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, info)
            }

pub unsafe fn dgeqpf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, jpvt: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, info)
            }

pub unsafe fn dgeqr2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn dgeqr2p_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgeqr2p_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn dgeqrf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dgeqrfp_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeqrfp_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dgeqr_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, tsize: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgeqr_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn dgeqrt2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, info: *mut integer) {
                dyload_lib().dgeqrt2_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn dgeqrt3_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, info: *mut integer) {
                dyload_lib().dgeqrt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn dgeqrt_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dgeqrt_.unwrap()(m, n, nb, a, lda, t, ldt, work, info)
            }

pub unsafe fn dgerfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgerfs_.unwrap()(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dgerfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, r: *mut f64, c: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgerfsx_.unwrap()(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dgerq2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dgerq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn dgerqf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgerqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dgesc2_(n: *mut integer, a: *mut f64, lda: *mut integer, rhs: *mut f64, ipiv: *mut integer, jpiv: *mut integer, scale: *mut f64) {
                dyload_lib().dgesc2_.unwrap()(n, a, lda, rhs, ipiv, jpiv, scale)
            }

pub unsafe fn dgesdd_(jobz: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesdd_.unwrap()(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info)
            }

pub unsafe fn dgesvd_(jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesvd_.unwrap()(jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)
            }

pub unsafe fn dgesvdq_(joba: *mut c_char, jobp: *mut c_char, jobr: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, numrank: *mut integer, iwork: *mut integer, liwork: *mut integer, work: *mut f64, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesvdq_.unwrap()(joba, jobp, jobr, jobu, jobv, m, n, a, lda, s, u, ldu, v, ldv, numrank, iwork, liwork, work, lwork, rwork, lrwork, info)
            }

pub unsafe fn dgesvdx_(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, ns: *mut integer, s: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesvdx_.unwrap()(jobu, jobvt, range, m, n, a, lda, vl, vu, il, iu, ns, s, u, ldu, vt, ldvt, work, lwork, iwork, info)
            }

pub unsafe fn dgesv_(n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dgesv_.unwrap()(n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn dgesvj_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, sva: *mut f64, mv: *mut integer, v: *mut f64, ldv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesvj_.unwrap()(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info)
            }

pub unsafe fn dgesvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesvx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dgesvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgesvxx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dgetc2_(n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, jpiv: *mut integer, info: *mut integer) {
                dyload_lib().dgetc2_.unwrap()(n, a, lda, ipiv, jpiv, info)
            }

pub unsafe fn dgetf2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dgetf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn dgetrf2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dgetrf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn dgetrf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dgetrf_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn dgetri_(n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgetri_.unwrap()(n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn dgetrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dgetrs_.unwrap()(trans, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn dgetsls_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgetsls_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn dggbak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f64, rscale: *mut f64, m: *mut integer, v: *mut f64, ldv: *mut integer, info: *mut integer) {
                dyload_lib().dggbak_.unwrap()(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info)
            }

pub unsafe fn dggbal_(job: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f64, rscale: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dggbal_.unwrap()(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info)
            }

pub unsafe fn dgges3_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, sdim: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vsl: *mut f64, ldvsl: *mut integer, vsr: *mut f64, ldvsr: *mut integer, work: *mut f64, lwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().dgges3_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info)
            }

pub unsafe fn dgges_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, sdim: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vsl: *mut f64, ldvsl: *mut integer, vsr: *mut f64, ldvsr: *mut integer, work: *mut f64, lwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().dgges_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info)
            }

pub unsafe fn dggesx_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, sense: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, sdim: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vsl: *mut f64, ldvsl: *mut integer, vsr: *mut f64, ldvsr: *mut integer, rconde: *mut f64, rcondv: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().dggesx_.unwrap()(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)
            }

pub unsafe fn dggev3_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dggev3_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn dggev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dggev_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn dggevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f64, rscale: *mut f64, abnrm: *mut f64, bbnrm: *mut f64, rconde: *mut f64, rcondv: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().dggevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info)
            }

pub unsafe fn dggglm_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, d: *mut f64, x: *mut f64, y: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dggglm_.unwrap()(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info)
            }

pub unsafe fn dgghd3_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, q: *mut f64, ldq: *mut integer, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgghd3_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, work, lwork, info)
            }

pub unsafe fn dgghrd_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, q: *mut f64, ldq: *mut integer, z: *mut f64, ldz: *mut integer, info: *mut integer) {
                dyload_lib().dgghrd_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info)
            }

pub unsafe fn dgglse_(m: *mut integer, n: *mut integer, p: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, c: *mut f64, d: *mut f64, x: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgglse_.unwrap()(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info)
            }

pub unsafe fn dggqrf_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut f64, lda: *mut integer, taua: *mut f64, b: *mut f64, ldb: *mut integer, taub: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dggqrf_.unwrap()(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn dggrqf_(m: *mut integer, p: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, taua: *mut f64, b: *mut f64, ldb: *mut integer, taub: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dggrqf_.unwrap()(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn dggsvd3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alpha: *mut f64, beta: *mut f64, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, q: *mut f64, ldq: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dggsvd3_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, lwork, iwork, info)
            }

pub unsafe fn dggsvd_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alpha: *mut f64, beta: *mut f64, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, q: *mut f64, ldq: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dggsvd_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info)
            }

pub unsafe fn dggsvp3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, tola: *mut f64, tolb: *mut f64, k: *mut integer, l: *mut integer, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, q: *mut f64, ldq: *mut integer, iwork: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dggsvp3_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, lwork, info)
            }

pub unsafe fn dggsvp_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, tola: *mut f64, tolb: *mut f64, k: *mut integer, l: *mut integer, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, q: *mut f64, ldq: *mut integer, iwork: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dggsvp_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info)
            }

pub unsafe fn dgsvj0_(jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, sva: *mut f64, mv: *mut integer, v: *mut f64, ldv: *mut integer, eps: *mut f64, sfmin: *mut f64, tol: *mut f64, nsweep: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgsvj0_.unwrap()(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn dgsvj1_(jobv: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, sva: *mut f64, mv: *mut integer, v: *mut f64, ldv: *mut integer, eps: *mut f64, sfmin: *mut f64, tol: *mut f64, nsweep: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dgsvj1_.unwrap()(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn dgtcon_(norm: *mut c_char, n: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, du2: *mut f64, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgtcon_.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dgtrfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, dlf: *mut f64, df: *mut f64, duf: *mut f64, du2: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgtrfs_.unwrap()(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dgtsv_(n: *mut integer, nrhs: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dgtsv_.unwrap()(n, nrhs, dl, d, du, b, ldb, info)
            }

pub unsafe fn dgtsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, dlf: *mut f64, df: *mut f64, duf: *mut f64, du2: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dgtsvx_.unwrap()(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dgttrf_(n: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, du2: *mut f64, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dgttrf_.unwrap()(n, dl, d, du, du2, ipiv, info)
            }

pub unsafe fn dgttrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, du2: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dgttrs_.unwrap()(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info)
            }

pub unsafe fn dgtts2_(itrans: *mut integer, n: *mut integer, nrhs: *mut integer, dl: *mut f64, d: *mut f64, du: *mut f64, du2: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer) {
                dyload_lib().dgtts2_.unwrap()(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb)
            }

pub unsafe fn dhgeqz_(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f64, ldh: *mut integer, t: *mut f64, ldt: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, q: *mut f64, ldq: *mut integer, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dhgeqz_.unwrap()(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info)
            }

pub unsafe fn dhsein_(side: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char, select: *mut logical, n: *mut integer, h: *mut f64, ldh: *mut integer, wr: *mut f64, wi: *mut f64, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f64, ifaill: *mut integer, ifailr: *mut integer, info: *mut integer) {
                dyload_lib().dhsein_.unwrap()(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info)
            }

pub unsafe fn dhseqr_(job: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f64, ldh: *mut integer, wr: *mut f64, wi: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dhseqr_.unwrap()(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info)
            }

pub unsafe fn dlabad_(small_: *mut f64, large: *mut f64) {
                dyload_lib().dlabad_.unwrap()(small_, large)
            }

pub unsafe fn dlabrd_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, e: *mut f64, tauq: *mut f64, taup: *mut f64, x: *mut f64, ldx: *mut integer, y: *mut f64, ldy: *mut integer) {
                dyload_lib().dlabrd_.unwrap()(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy)
            }

pub unsafe fn dlacn2_(n: *mut integer, v: *mut f64, x: *mut f64, isgn: *mut integer, est: *mut f64, kase: *mut integer, isave: *mut integer) {
                dyload_lib().dlacn2_.unwrap()(n, v, x, isgn, est, kase, isave)
            }

pub unsafe fn dlacon_(n: *mut integer, v: *mut f64, x: *mut f64, isgn: *mut integer, est: *mut f64, kase: *mut integer) {
                dyload_lib().dlacon_.unwrap()(n, v, x, isgn, est, kase)
            }

pub unsafe fn dlacpy_(uplo: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer) {
                dyload_lib().dlacpy_.unwrap()(uplo, m, n, a, lda, b, ldb)
            }

pub unsafe fn dladiv_(a: *mut f64, b: *mut f64, c: *mut f64, d: *mut f64, p: *mut f64, q: *mut f64) {
                dyload_lib().dladiv_.unwrap()(a, b, c, d, p, q)
            }

pub unsafe fn dlae2_(a: *mut f64, b: *mut f64, c: *mut f64, rt1: *mut f64, rt2: *mut f64) {
                dyload_lib().dlae2_.unwrap()(a, b, c, rt1, rt2)
            }

pub unsafe fn dlaebz_(ijob: *mut integer, nitmax: *mut integer, n: *mut integer, mmax: *mut integer, minp: *mut integer, nbmin: *mut integer, abstol: *mut f64, reltol: *mut f64, pivmin: *mut f64, d: *mut f64, e: *mut f64, e2: *mut f64, nval: *mut integer, ab: *mut f64, c: *mut f64, mout: *mut integer, nab: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaebz_.unwrap()(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info)
            }

pub unsafe fn dlaed0_(icompq: *mut integer, qsiz: *mut integer, n: *mut integer, d: *mut f64, e: *mut f64, q: *mut f64, ldq: *mut integer, qstore: *mut f64, ldqs: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaed0_.unwrap()(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info)
            }

pub unsafe fn dlaed1_(n: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, indxq: *mut integer, rho: *mut f64, cutpnt: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaed1_.unwrap()(n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info)
            }

pub unsafe fn dlaed2_(k: *mut integer, n: *mut integer, n1: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, indxq: *mut integer, rho: *mut f64, z: *mut f64, dlamda: *mut f64, w: *mut f64, q2: *mut f64, indx: *mut integer, indxc: *mut integer, indxp: *mut integer, coltyp: *mut integer, info: *mut integer) {
                dyload_lib().dlaed2_.unwrap()(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info)
            }

pub unsafe fn dlaed3_(k: *mut integer, n: *mut integer, n1: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, rho: *mut f64, dlamda: *mut f64, q2: *mut f64, indx: *mut integer, ctot: *mut integer, w: *mut f64, s: *mut f64, info: *mut integer) {
                dyload_lib().dlaed3_.unwrap()(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info)
            }

pub unsafe fn dlaed4_(n: *mut integer, i: *mut integer, d: *mut f64, z: *mut f64, delta: *mut f64, rho: *mut f64, dlam: *mut f64, info: *mut integer) {
                dyload_lib().dlaed4_.unwrap()(n, i, d, z, delta, rho, dlam, info)
            }

pub unsafe fn dlaed5_(i: *mut integer, d: *mut f64, z: *mut f64, delta: *mut f64, rho: *mut f64, dlam: *mut f64) {
                dyload_lib().dlaed5_.unwrap()(i, d, z, delta, rho, dlam)
            }

pub unsafe fn dlaed6_(kniter: *mut integer, orgati: *mut logical, rho: *mut f64, d: *mut f64, z: *mut f64, finit: *mut f64, tau: *mut f64, info: *mut integer) {
                dyload_lib().dlaed6_.unwrap()(kniter, orgati, rho, d, z, finit, tau, info)
            }

pub unsafe fn dlaed7_(icompq: *mut integer, n: *mut integer, qsiz: *mut integer, tlvls: *mut integer, curlvl: *mut integer, curpbm: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, indxq: *mut integer, rho: *mut f64, cutpnt: *mut integer, qstore: *mut f64, qptr: *mut integer, prmptr: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaed7_.unwrap()(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info)
            }

pub unsafe fn dlaed8_(icompq: *mut integer, k: *mut integer, n: *mut integer, qsiz: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, indxq: *mut integer, rho: *mut f64, cutpnt: *mut integer, z: *mut f64, dlamda: *mut f64, q2: *mut f64, ldq2: *mut integer, w: *mut f64, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f64, indxp: *mut integer, indx: *mut integer, info: *mut integer) {
                dyload_lib().dlaed8_.unwrap()(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info)
            }

pub unsafe fn dlaed9_(k: *mut integer, kstart: *mut integer, kstop: *mut integer, n: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, rho: *mut f64, dlamda: *mut f64, w: *mut f64, s: *mut f64, lds: *mut integer, info: *mut integer) {
                dyload_lib().dlaed9_.unwrap()(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info)
            }

pub unsafe fn dlaeda_(n: *mut integer, tlvls: *mut integer, curlvl: *mut integer, curpbm: *mut integer, prmptr: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f64, q: *mut f64, qptr: *mut integer, z: *mut f64, ztemp: *mut f64, info: *mut integer) {
                dyload_lib().dlaeda_.unwrap()(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info)
            }

pub unsafe fn dlaein_(rightv: *mut logical, noinit: *mut logical, n: *mut integer, h: *mut f64, ldh: *mut integer, wr: *mut f64, wi: *mut f64, vr: *mut f64, vi: *mut f64, b: *mut f64, ldb: *mut integer, work: *mut f64, eps3: *mut f64, smlnum: *mut f64, bignum: *mut f64, info: *mut integer) {
                dyload_lib().dlaein_.unwrap()(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info)
            }

pub unsafe fn dlaev2_(a: *mut f64, b: *mut f64, c: *mut f64, rt1: *mut f64, rt2: *mut f64, cs1: *mut f64, sn1: *mut f64) {
                dyload_lib().dlaev2_.unwrap()(a, b, c, rt1, rt2, cs1, sn1)
            }

pub unsafe fn dlaexc_(wantq: *mut logical, n: *mut integer, t: *mut f64, ldt: *mut integer, q: *mut f64, ldq: *mut integer, j1: *mut integer, n1: *mut integer, n2: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dlaexc_.unwrap()(wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info)
            }

pub unsafe fn dlag2_(a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, safmin: *mut f64, scale1: *mut f64, scale2: *mut f64, wr1: *mut f64, wr2: *mut f64, wi: *mut f64) {
                dyload_lib().dlag2_.unwrap()(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi)
            }

pub unsafe fn dlag2s_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, sa: *mut f32, ldsa: *mut integer, info: *mut integer) {
                dyload_lib().dlag2s_.unwrap()(m, n, a, lda, sa, ldsa, info)
            }

pub unsafe fn dla_gbamv_(trans: *mut integer, m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, alpha: *mut f64, ab: *mut f64, ldab: *mut integer, x: *mut f64, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().dla_gbamv_.unwrap()(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy)
            }

pub unsafe fn dla_gbrfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut f64, ldb: *mut integer, y: *mut f64, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut f64, ayb: *mut f64, dy: *mut f64, y_tail: *mut f64, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().dla_gbrfsx_extended_.unwrap()(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn dla_geamv_(trans: *mut integer, m: *mut integer, n: *mut integer, alpha: *mut f64, a: *mut f64, lda: *mut integer, x: *mut f64, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().dla_geamv_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn dla_gerfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut f64, ldb: *mut integer, y: *mut f64, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, errs_n: *mut f64, errs_c: *mut f64, res: *mut f64, ayb: *mut f64, dy: *mut f64, y_tail: *mut f64, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().dla_gerfsx_extended_.unwrap()(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn dlags2_(upper: *mut logical, a1: *mut f64, a2: *mut f64, a3: *mut f64, b1: *mut f64, b2: *mut f64, b3: *mut f64, csu: *mut f64, snu: *mut f64, csv: *mut f64, snv: *mut f64, csq: *mut f64, snq: *mut f64) {
                dyload_lib().dlags2_.unwrap()(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq)
            }

pub unsafe fn dlagtf_(n: *mut integer, a: *mut f64, lambda: *mut f64, b: *mut f64, c: *mut f64, tol: *mut f64, d: *mut f64, in_: *mut integer, info: *mut integer) {
                dyload_lib().dlagtf_.unwrap()(n, a, lambda, b, c, tol, d, in_, info)
            }

pub unsafe fn dlagtm_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, alpha: *mut f64, dl: *mut f64, d: *mut f64, du: *mut f64, x: *mut f64, ldx: *mut integer, beta: *mut f64, b: *mut f64, ldb: *mut integer) {
                dyload_lib().dlagtm_.unwrap()(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb)
            }

pub unsafe fn dlagts_(job: *mut integer, n: *mut integer, a: *mut f64, b: *mut f64, c: *mut f64, d: *mut f64, in_: *mut integer, y: *mut f64, tol: *mut f64, info: *mut integer) {
                dyload_lib().dlagts_.unwrap()(job, n, a, b, c, d, in_, y, tol, info)
            }

pub unsafe fn dlagv2_(a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, csl: *mut f64, snl: *mut f64, csr: *mut f64, snr: *mut f64) {
                dyload_lib().dlagv2_.unwrap()(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr)
            }

pub unsafe fn dlahqr_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f64, ldh: *mut integer, wr: *mut f64, wi: *mut f64, iloz: *mut integer, ihiz: *mut integer, z: *mut f64, ldz: *mut integer, info: *mut integer) {
                dyload_lib().dlahqr_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info)
            }

pub unsafe fn dlahr2_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, t: *mut f64, ldt: *mut integer, y: *mut f64, ldy: *mut integer) {
                dyload_lib().dlahr2_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn dlahrd_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, t: *mut f64, ldt: *mut integer, y: *mut f64, ldy: *mut integer) {
                dyload_lib().dlahrd_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn dlaic1_(job: *mut integer, j: *mut integer, x: *mut f64, sest: *mut f64, w: *mut f64, gamma: *mut f64, sestpr: *mut f64, s: *mut f64, c__: *mut f64) {
                dyload_lib().dlaic1_.unwrap()(job, j, x, sest, w, gamma, sestpr, s, c__)
            }

pub unsafe fn dla_lin_berr_(n: *mut integer, nz: *mut integer, nrhs: *mut integer, res: *mut f64, ayb: *mut f64, berr: *mut f64) {
                dyload_lib().dla_lin_berr_.unwrap()(n, nz, nrhs, res, ayb, berr)
            }

pub unsafe fn dlaln2_(ltrans: *mut logical, na: *mut integer, nw: *mut integer, smin: *mut f64, ca: *mut f64, a: *mut f64, lda: *mut integer, d1: *mut f64, d2: *mut f64, b: *mut f64, ldb: *mut integer, wr: *mut f64, wi: *mut f64, x: *mut f64, ldx: *mut integer, scale: *mut f64, xnorm: *mut f64, info: *mut integer) {
                dyload_lib().dlaln2_.unwrap()(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info)
            }

pub unsafe fn dlals0_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, nrhs: *mut integer, b: *mut f64, ldb: *mut integer, bx: *mut f64, ldbx: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f64, ldgnum: *mut integer, poles: *mut f64, difl: *mut f64, difr: *mut f64, z: *mut f64, k: *mut integer, c: *mut f64, s: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dlals0_.unwrap()(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, info)
            }

pub unsafe fn dlalsa_(icompq: *mut integer, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, b: *mut f64, ldb: *mut integer, bx: *mut f64, ldbx: *mut integer, u: *mut f64, ldu: *mut integer, vt: *mut f64, k: *mut integer, difl: *mut f64, difr: *mut f64, z: *mut f64, poles: *mut f64, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, perm: *mut integer, givnum: *mut f64, c: *mut f64, s: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlalsa_.unwrap()(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info)
            }

pub unsafe fn dlalsd_(uplo: *mut c_char, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, b: *mut f64, ldb: *mut integer, rcond: *mut f64, rank: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlalsd_.unwrap()(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info)
            }

pub unsafe fn dlamrg_(n1: *mut integer, n2: *mut integer, a: *mut f64, dtrd1: *mut integer, dtrd2: *mut integer, index: *mut integer) {
                dyload_lib().dlamrg_.unwrap()(n1, n2, a, dtrd1, dtrd2, index)
            }

pub unsafe fn dlamswlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlamswlq_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn dlamtsqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlamtsqr_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn dlaneg_(n: *mut integer, d: *mut f64, lld: *mut f64, sigma: *mut f64, pivmin: *mut f64, r__: *mut integer) -> integer {
                dyload_lib().dlaneg_.unwrap()(n, d, lld, sigma, pivmin, r__)
            }

pub unsafe fn dlanv2_(a: *mut f64, b: *mut f64, c: *mut f64, d: *mut f64, rt1r: *mut f64, rt1i: *mut f64, rt2r: *mut f64, rt2i: *mut f64, cs: *mut f64, sn: *mut f64) {
                dyload_lib().dlanv2_.unwrap()(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn)
            }

pub unsafe fn dlaorhr_col_getrfnp2_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, info: *mut integer) {
                dyload_lib().dlaorhr_col_getrfnp2_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn dlaorhr_col_getrfnp_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, info: *mut integer) {
                dyload_lib().dlaorhr_col_getrfnp_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn dlapll_(n: *mut integer, x: *mut f64, incx: *mut integer, y: *mut f64, incy: *mut integer, ssmin: *mut f64) {
                dyload_lib().dlapll_.unwrap()(n, x, incx, y, incy, ssmin)
            }

pub unsafe fn dlapmr_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut f64, ldx: *mut integer, k: *mut integer) {
                dyload_lib().dlapmr_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn dlapmt_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut f64, ldx: *mut integer, k: *mut integer) {
                dyload_lib().dlapmt_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn dla_porfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut f64, ldb: *mut integer, y: *mut f64, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut f64, ayb: *mut f64, dy: *mut f64, y_tail: *mut f64, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().dla_porfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn dlaqgb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f64, ldab: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().dlaqgb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn dlaqge_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().dlaqge_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn dlaqp2_(m: *mut integer, n: *mut integer, offset: *mut integer, a: *mut f64, lda: *mut integer, jpvt: *mut integer, tau: *mut f64, vn1: *mut f64, vn2: *mut f64, work: *mut f64) {
                dyload_lib().dlaqp2_.unwrap()(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work)
            }

pub unsafe fn dlaqps_(m: *mut integer, n: *mut integer, offset: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f64, lda: *mut integer, jpvt: *mut integer, tau: *mut f64, vn1: *mut f64, vn2: *mut f64, auxv: *mut f64, f: *mut f64, ldf: *mut integer) {
                dyload_lib().dlaqps_.unwrap()(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf)
            }

pub unsafe fn dlaqr0_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f64, ldh: *mut integer, wr: *mut f64, wi: *mut f64, iloz: *mut integer, ihiz: *mut integer, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaqr0_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn dlaqr1_(n: *mut integer, h: *mut f64, ldh: *mut integer, sr1: *mut f64, si1: *mut f64, sr2: *mut f64, si2: *mut f64, v: *mut f64) {
                dyload_lib().dlaqr1_.unwrap()(n, h, ldh, sr1, si1, sr2, si2, v)
            }

pub unsafe fn dlaqr2_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut f64, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut f64, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sr: *mut f64, si: *mut f64, v: *mut f64, ldv: *mut integer, nh: *mut integer, t: *mut f64, ldt: *mut integer, nv: *mut integer, wv: *mut f64, ldwv: *mut integer, work: *mut f64, lwork: *mut integer) {
                dyload_lib().dlaqr2_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn dlaqr3_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut f64, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut f64, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sr: *mut f64, si: *mut f64, v: *mut f64, ldv: *mut integer, nh: *mut integer, t: *mut f64, ldt: *mut integer, nv: *mut integer, wv: *mut f64, ldwv: *mut integer, work: *mut f64, lwork: *mut integer) {
                dyload_lib().dlaqr3_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn dlaqr4_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f64, ldh: *mut integer, wr: *mut f64, wi: *mut f64, iloz: *mut integer, ihiz: *mut integer, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaqr4_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn dlaqr5_(wantt: *mut logical, wantz: *mut logical, kacc22: *mut integer, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nshfts: *mut integer, sr: *mut f64, si: *mut f64, h: *mut f64, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut f64, ldz: *mut integer, v: *mut f64, ldv: *mut integer, u: *mut f64, ldu: *mut integer, nv: *mut integer, wv: *mut f64, ldwv: *mut integer, nh: *mut integer, wh: *mut f64, ldwh: *mut integer) {
                dyload_lib().dlaqr5_.unwrap()(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)
            }

pub unsafe fn dlaqsb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().dlaqsb_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, equed)
            }

pub unsafe fn dlaqsp_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().dlaqsp_.unwrap()(uplo, n, ap, s, scond, amax, equed)
            }

pub unsafe fn dlaqsy_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().dlaqsy_.unwrap()(uplo, n, a, lda, s, scond, amax, equed)
            }

pub unsafe fn dlaqtr_(ltran: *mut logical, lfloat: *mut logical, n: *mut integer, t: *mut f64, ldt: *mut integer, b: *mut f64, w: *mut f64, scale: *mut f64, x: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dlaqtr_.unwrap()(ltran, lfloat, n, t, ldt, b, w, scale, x, work, info)
            }

pub unsafe fn dlar1v_(n: *mut integer, b1: *mut integer, bn: *mut integer, lambda: *mut f64, d: *mut f64, l: *mut f64, ld: *mut f64, lld: *mut f64, pivmin: *mut f64, gaptol: *mut f64, z: *mut f64, wantnc: *mut logical, negcnt: *mut integer, ztz: *mut f64, mingma: *mut f64, r: *mut integer, isuppz: *mut integer, nrminv: *mut f64, resid: *mut f64, rqcorr: *mut f64, work: *mut f64) {
                dyload_lib().dlar1v_.unwrap()(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work)
            }

pub unsafe fn dlar2v_(n: *mut integer, x: *mut f64, y: *mut f64, z: *mut f64, incx: *mut integer, c: *mut f64, s: *mut f64, incc: *mut integer) {
                dyload_lib().dlar2v_.unwrap()(n, x, y, z, incx, c, s, incc)
            }

pub unsafe fn dlarfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, ldwork: *mut integer) {
                dyload_lib().dlarfb_.unwrap()(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn dlarf_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut f64, incv: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64) {
                dyload_lib().dlarf_.unwrap()(side, m, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn dlarfg_(n: *mut integer, alpha: *mut f64, x: *mut f64, incx: *mut integer, tau: *mut f64) {
                dyload_lib().dlarfg_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn dlarfgp_(n: *mut integer, alpha: *mut f64, x: *mut f64, incx: *mut integer, tau: *mut f64) {
                dyload_lib().dlarfgp_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn dlarft_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut f64, ldv: *mut integer, tau: *mut f64, t: *mut f64, ldt: *mut integer) {
                dyload_lib().dlarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn dlarfx_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut f64, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64) {
                dyload_lib().dlarfx_.unwrap()(side, m, n, v, tau, c, ldc, work)
            }

pub unsafe fn dlarfy_(uplo: *mut c_char, n: *mut integer, v: *mut f64, incv: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64) {
                dyload_lib().dlarfy_.unwrap()(uplo, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn dlargv_(n: *mut integer, x: *mut f64, incx: *mut integer, y: *mut f64, incy: *mut integer, c: *mut f64, incc: *mut integer) {
                dyload_lib().dlargv_.unwrap()(n, x, incx, y, incy, c, incc)
            }

pub unsafe fn dlarnv_(idist: *mut integer, iseed: *mut integer, n: *mut integer, x: *mut f64) {
                dyload_lib().dlarnv_.unwrap()(idist, iseed, n, x)
            }

pub unsafe fn dlarra_(n: *mut integer, d: *mut f64, e: *mut f64, e2: *mut f64, spltol: *mut f64, tnrm: *mut f64, nsplit: *mut integer, isplit: *mut integer, info: *mut integer) {
                dyload_lib().dlarra_.unwrap()(n, d, e, e2, spltol, tnrm, nsplit, isplit, info)
            }

pub unsafe fn dlarrb_(n: *mut integer, d: *mut f64, lld: *mut f64, ifirst: *mut integer, ilast: *mut integer, rtol1: *mut f64, rtol2: *mut f64, offset: *mut integer, w: *mut f64, wgap: *mut f64, werr: *mut f64, work: *mut f64, iwork: *mut integer, pivmin: *mut f64, spdiam: *mut f64, twist: *mut integer, info: *mut integer) {
                dyload_lib().dlarrb_.unwrap()(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info)
            }

pub unsafe fn dlarrc_(jobt: *mut c_char, n: *mut integer, vl: *mut f64, vu: *mut f64, d: *mut f64, e: *mut f64, pivmin: *mut f64, eigcnt: *mut integer, lcnt: *mut integer, rcnt: *mut integer, info: *mut integer) {
                dyload_lib().dlarrc_.unwrap()(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info)
            }

pub unsafe fn dlarrd_(range: *mut c_char, order: *mut c_char, n: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, gers: *mut f64, reltol: *mut f64, d: *mut f64, e: *mut f64, e2: *mut f64, pivmin: *mut f64, nsplit: *mut integer, isplit: *mut integer, m: *mut integer, w: *mut f64, werr: *mut f64, wl: *mut f64, wu: *mut f64, iblock: *mut integer, indexw: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlarrd_.unwrap()(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info)
            }

pub unsafe fn dlarre_(range: *mut c_char, n: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, d: *mut f64, e: *mut f64, e2: *mut f64, rtol1: *mut f64, rtol2: *mut f64, spltol: *mut f64, nsplit: *mut integer, isplit: *mut integer, m: *mut integer, w: *mut f64, werr: *mut f64, wgap: *mut f64, iblock: *mut integer, indexw: *mut integer, gers: *mut f64, pivmin: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlarre_.unwrap()(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info)
            }

pub unsafe fn dlarrf_(n: *mut integer, d: *mut f64, l: *mut f64, ld: *mut f64, clstrt: *mut integer, clend: *mut integer, w: *mut f64, wgap: *mut f64, werr: *mut f64, spdiam: *mut f64, clgapl: *mut f64, clgapr: *mut f64, pivmin: *mut f64, sigma: *mut f64, dplus: *mut f64, lplus: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dlarrf_.unwrap()(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info)
            }

pub unsafe fn dlarrj_(n: *mut integer, d: *mut f64, e2: *mut f64, ifirst: *mut integer, ilast: *mut integer, rtol: *mut f64, offset: *mut integer, w: *mut f64, werr: *mut f64, work: *mut f64, iwork: *mut integer, pivmin: *mut f64, spdiam: *mut f64, info: *mut integer) {
                dyload_lib().dlarrj_.unwrap()(n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info)
            }

pub unsafe fn dlarrk_(n: *mut integer, iw: *mut integer, gl: *mut f64, gu: *mut f64, d: *mut f64, e2: *mut f64, pivmin: *mut f64, reltol: *mut f64, w: *mut f64, werr: *mut f64, info: *mut integer) {
                dyload_lib().dlarrk_.unwrap()(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info)
            }

pub unsafe fn dlarrr_(n: *mut integer, d: *mut f64, e: *mut f64, info: *mut integer) {
                dyload_lib().dlarrr_.unwrap()(n, d, e, info)
            }

pub unsafe fn dlarrv_(n: *mut integer, vl: *mut f64, vu: *mut f64, d: *mut f64, l: *mut f64, pivmin: *mut f64, isplit: *mut integer, m: *mut integer, dol: *mut integer, dou: *mut integer, minrgp: *mut f64, rtol1: *mut f64, rtol2: *mut f64, w: *mut f64, werr: *mut f64, wgap: *mut f64, iblock: *mut integer, indexw: *mut integer, gers: *mut f64, z: *mut f64, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlarrv_.unwrap()(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info)
            }

pub unsafe fn dlarscl2_(m: *mut integer, n: *mut integer, d: *mut f64, x: *mut f64, ldx: *mut integer) {
                dyload_lib().dlarscl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn dlartg_(f: *mut f64, g: *mut f64, cs: *mut f64, sn: *mut f64, r__: *mut f64) {
                dyload_lib().dlartg_.unwrap()(f, g, cs, sn, r__)
            }

pub unsafe fn dlartgp_(f: *mut f64, g: *mut f64, cs: *mut f64, sn: *mut f64, r__: *mut f64) {
                dyload_lib().dlartgp_.unwrap()(f, g, cs, sn, r__)
            }

pub unsafe fn dlartgs_(x: *mut f64, y: *mut f64, sigma: *mut f64, cs: *mut f64, sn: *mut f64) {
                dyload_lib().dlartgs_.unwrap()(x, y, sigma, cs, sn)
            }

pub unsafe fn dlartv_(n: *mut integer, x: *mut f64, incx: *mut integer, y: *mut f64, incy: *mut integer, c: *mut f64, s: *mut f64, incc: *mut integer) {
                dyload_lib().dlartv_.unwrap()(n, x, incx, y, incy, c, s, incc)
            }

pub unsafe fn dlaruv_(iseed: *mut integer, n: *mut integer, x: *mut f64) {
                dyload_lib().dlaruv_.unwrap()(iseed, n, x)
            }

pub unsafe fn dlarzb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, ldwork: *mut integer) {
                dyload_lib().dlarzb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn dlarz_(side: *mut c_char, m: *mut integer, n: *mut integer, l: *mut integer, v: *mut f64, incv: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64) {
                dyload_lib().dlarz_.unwrap()(side, m, n, l, v, incv, tau, c, ldc, work)
            }

pub unsafe fn dlarzt_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut f64, ldv: *mut integer, tau: *mut f64, t: *mut f64, ldt: *mut integer) {
                dyload_lib().dlarzt_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn dlas2_(f: *mut f64, g: *mut f64, h: *mut f64, ssmin: *mut f64, ssmax: *mut f64) {
                dyload_lib().dlas2_.unwrap()(f, g, h, ssmin, ssmax)
            }

pub unsafe fn dlascl2_(m: *mut integer, n: *mut integer, d: *mut f64, x: *mut f64, ldx: *mut integer) {
                dyload_lib().dlascl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn dlascl_(type_: *mut c_char, kl: *mut integer, ku: *mut integer, cfrom: *mut f64, cto: *mut f64, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dlascl_.unwrap()(type_, kl, ku, cfrom, cto, m, n, a, lda, info)
            }

pub unsafe fn dlasd0_(n: *mut integer, sqre: *mut integer, d: *mut f64, e: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, smlsiz: *mut integer, iwork: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dlasd0_.unwrap()(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info)
            }

pub unsafe fn dlasd1_(nl: *mut integer, nr: *mut integer, sqre: *mut integer, d: *mut f64, alpha: *mut f64, beta: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, idxq: *mut integer, iwork: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dlasd1_.unwrap()(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info)
            }

pub unsafe fn dlasd2_(nl: *mut integer, nr: *mut integer, sqre: *mut integer, k: *mut integer, d: *mut f64, z: *mut f64, alpha: *mut f64, beta: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, ldvt: *mut integer, dsigma: *mut f64, u2: *mut f64, ldu2: *mut integer, vt2: *mut f64, ldvt2: *mut integer, idxp: *mut integer, idx: *mut integer, idxc: *mut integer, idxq: *mut integer, coltyp: *mut integer, info: *mut integer) {
                dyload_lib().dlasd2_.unwrap()(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info)
            }

pub unsafe fn dlasd3_(nl: *mut integer, nr: *mut integer, sqre: *mut integer, k: *mut integer, d: *mut f64, q: *mut f64, ldq: *mut integer, dsigma: *mut f64, u: *mut f64, ldu: *mut integer, u2: *mut f64, ldu2: *mut integer, vt: *mut f64, ldvt: *mut integer, vt2: *mut f64, ldvt2: *mut integer, idxc: *mut integer, ctot: *mut integer, z: *mut f64, info: *mut integer) {
                dyload_lib().dlasd3_.unwrap()(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info)
            }

pub unsafe fn dlasd4_(n: *mut integer, i: *mut integer, d: *mut f64, z: *mut f64, delta: *mut f64, rho: *mut f64, sigma: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dlasd4_.unwrap()(n, i, d, z, delta, rho, sigma, work, info)
            }

pub unsafe fn dlasd5_(i: *mut integer, d: *mut f64, z: *mut f64, delta: *mut f64, rho: *mut f64, dsigma: *mut f64, work: *mut f64) {
                dyload_lib().dlasd5_.unwrap()(i, d, z, delta, rho, dsigma, work)
            }

pub unsafe fn dlasd6_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, d: *mut f64, vf: *mut f64, vl: *mut f64, alpha: *mut f64, beta: *mut f64, idxq: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f64, ldgnum: *mut integer, poles: *mut f64, difl: *mut f64, difr: *mut f64, z: *mut f64, k: *mut integer, c: *mut f64, s: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlasd6_.unwrap()(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info)
            }

pub unsafe fn dlasd7_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, k: *mut integer, d: *mut f64, z: *mut f64, zw: *mut f64, vf: *mut f64, vfw: *mut f64, vl: *mut f64, vlw: *mut f64, alpha: *mut f64, beta: *mut f64, dsigma: *mut f64, idx: *mut integer, idxp: *mut integer, idxq: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f64, ldgnum: *mut integer, c: *mut f64, s: *mut f64, info: *mut integer) {
                dyload_lib().dlasd7_.unwrap()(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info)
            }

pub unsafe fn dlasd8_(icompq: *mut integer, k: *mut integer, d: *mut f64, z: *mut f64, vf: *mut f64, vl: *mut f64, difl: *mut f64, difr: *mut f64, lddifr: *mut integer, dsigma: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dlasd8_.unwrap()(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info)
            }

pub unsafe fn dlasda_(icompq: *mut integer, smlsiz: *mut integer, n: *mut integer, sqre: *mut integer, d: *mut f64, e: *mut f64, u: *mut f64, ldu: *mut integer, vt: *mut f64, k: *mut integer, difl: *mut f64, difr: *mut f64, z: *mut f64, poles: *mut f64, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, perm: *mut integer, givnum: *mut f64, c: *mut f64, s: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dlasda_.unwrap()(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info)
            }

pub unsafe fn dlasdq_(uplo: *mut c_char, sqre: *mut integer, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d: *mut f64, e: *mut f64, vt: *mut f64, ldvt: *mut integer, u: *mut f64, ldu: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dlasdq_.unwrap()(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info)
            }

pub unsafe fn dlasdt_(n: *mut integer, lvl: *mut integer, nd: *mut integer, inode: *mut integer, ndiml: *mut integer, ndimr: *mut integer, msub: *mut integer) {
                dyload_lib().dlasdt_.unwrap()(n, lvl, nd, inode, ndiml, ndimr, msub)
            }

pub unsafe fn dlaset_(uplo: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut f64, beta: *mut f64, a: *mut f64, lda: *mut integer) {
                dyload_lib().dlaset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
            }

pub unsafe fn dlasq1_(n: *mut integer, d: *mut f64, e: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dlasq1_.unwrap()(n, d, e, work, info)
            }

pub unsafe fn dlasq2_(n: *mut integer, z: *mut f64, info: *mut integer) {
                dyload_lib().dlasq2_.unwrap()(n, z, info)
            }

pub unsafe fn dlasq3_(i0: *mut integer, n0: *mut integer, z: *mut f64, pp: *mut integer, dmin: *mut f64, sigma: *mut f64, desig: *mut f64, qmax: *mut f64, nfail: *mut integer, iter: *mut integer, ndiv: *mut integer, ieee: *mut logical, ttype: *mut integer, dmin1: *mut f64, dmin2: *mut f64, dn: *mut f64, dn1: *mut f64, dn2: *mut f64, g: *mut f64, tau: *mut f64) {
                dyload_lib().dlasq3_.unwrap()(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau)
            }

pub unsafe fn dlasq4_(i0: *mut integer, n0: *mut integer, z: *mut f64, pp: *mut integer, n0in: *mut integer, dmin: *mut f64, dmin1: *mut f64, dmin2: *mut f64, dn: *mut f64, dn1: *mut f64, dn2: *mut f64, tau: *mut f64, ttype: *mut integer, g: *mut f64) {
                dyload_lib().dlasq4_.unwrap()(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g)
            }

pub unsafe fn dlasq5_(i0: *mut integer, n0: *mut integer, z: *mut f64, pp: *mut integer, tau: *mut f64, sigma: *mut f64, dmin: *mut f64, dmin1: *mut f64, dmin2: *mut f64, dn: *mut f64, dnm1: *mut f64, dnm2: *mut f64, ieee: *mut logical, eps: *mut f64) {
                dyload_lib().dlasq5_.unwrap()(i0, n0, z, pp, tau, sigma, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee, eps)
            }

pub unsafe fn dlasq6_(i0: *mut integer, n0: *mut integer, z: *mut f64, pp: *mut integer, dmin: *mut f64, dmin1: *mut f64, dmin2: *mut f64, dn: *mut f64, dnm1: *mut f64, dnm2: *mut f64) {
                dyload_lib().dlasq6_.unwrap()(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2)
            }

pub unsafe fn dlasr_(side: *mut c_char, pivot: *mut c_char, direct: *mut c_char, m: *mut integer, n: *mut integer, c: *mut f64, s: *mut f64, a: *mut f64, lda: *mut integer) {
                dyload_lib().dlasr_.unwrap()(side, pivot, direct, m, n, c, s, a, lda)
            }

pub unsafe fn dlasrt_(id: *mut c_char, n: *mut integer, d: *mut f64, info: *mut integer) {
                dyload_lib().dlasrt_.unwrap()(id, n, d, info)
            }

pub unsafe fn dlassq_(n: *mut integer, x: *mut f64, incx: *mut integer, scale: *mut f64, sumsq: *mut f64) {
                dyload_lib().dlassq_.unwrap()(n, x, incx, scale, sumsq)
            }

pub unsafe fn dlasv2_(f: *mut f64, g: *mut f64, h: *mut f64, ssmin: *mut f64, ssmax: *mut f64, snr: *mut f64, csr: *mut f64, snl: *mut f64, csl: *mut f64) {
                dyload_lib().dlasv2_.unwrap()(f, g, h, ssmin, ssmax, snr, csr, snl, csl)
            }

pub unsafe fn dlaswlq_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlaswlq_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn dlaswp_(n: *mut integer, a: *mut f64, lda: *mut integer, k1: *mut integer, k2: *mut integer, ipiv: *mut integer, incx: *mut integer) {
                dyload_lib().dlaswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
            }

pub unsafe fn dlasy2_(ltranl: *mut logical, ltranr: *mut logical, isgn: *mut integer, n1: *mut integer, n2: *mut integer, tl: *mut f64, ldtl: *mut integer, tr: *mut f64, ldtr: *mut integer, b: *mut f64, ldb: *mut integer, scale: *mut f64, x: *mut f64, ldx: *mut integer, xnorm: *mut f64, info: *mut integer) {
                dyload_lib().dlasy2_.unwrap()(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info)
            }

pub unsafe fn dla_syamv_(uplo: *mut integer, n: *mut integer, alpha: *mut f64, a: *mut f64, lda: *mut integer, x: *mut f64, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().dla_syamv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn dlasyf_aa_(uplo: *mut c_char, j1: *mut integer, m: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, h: *mut f64, ldh: *mut integer, work: *mut f64) {
                dyload_lib().dlasyf_aa_.unwrap()(uplo, j1, m, nb, a, lda, ipiv, h, ldh, work)
            }

pub unsafe fn dlasyf_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, w: *mut f64, ldw: *mut integer, info: *mut integer) {
                dyload_lib().dlasyf_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn dlasyf_rk_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, w: *mut f64, ldw: *mut integer, info: *mut integer) {
                dyload_lib().dlasyf_rk_.unwrap()(uplo, n, nb, kb, a, lda, e, ipiv, w, ldw, info)
            }

pub unsafe fn dlasyf_rook_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, w: *mut f64, ldw: *mut integer, info: *mut integer) {
                dyload_lib().dlasyf_rook_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn dla_syrfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut f64, ldb: *mut integer, y: *mut f64, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut f64, ayb: *mut f64, dy: *mut f64, y_tail: *mut f64, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().dla_syrfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn dlat2s_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, sa: *mut f32, ldsa: *mut integer, info: *mut integer) {
                dyload_lib().dlat2s_.unwrap()(uplo, n, a, lda, sa, ldsa, info)
            }

pub unsafe fn dlatbs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, x: *mut f64, scale: *mut f64, cnorm: *mut f64, info: *mut integer) {
                dyload_lib().dlatbs_.unwrap()(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info)
            }

pub unsafe fn dlatdf_(ijob: *mut integer, n: *mut integer, z: *mut f64, ldz: *mut integer, rhs: *mut f64, rdsum: *mut f64, rdscal: *mut f64, ipiv: *mut integer, jpiv: *mut integer) {
                dyload_lib().dlatdf_.unwrap()(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv)
            }

pub unsafe fn dlatps_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, ap: *mut f64, x: *mut f64, scale: *mut f64, cnorm: *mut f64, info: *mut integer) {
                dyload_lib().dlatps_.unwrap()(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info)
            }

pub unsafe fn dlatrd_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, tau: *mut f64, w: *mut f64, ldw: *mut integer) {
                dyload_lib().dlatrd_.unwrap()(uplo, n, nb, a, lda, e, tau, w, ldw)
            }

pub unsafe fn dlatrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, x: *mut f64, scale: *mut f64, cnorm: *mut f64, info: *mut integer) {
                dyload_lib().dlatrs_.unwrap()(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info)
            }

pub unsafe fn dlatrz_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64) {
                dyload_lib().dlatrz_.unwrap()(m, n, l, a, lda, tau, work)
            }

pub unsafe fn dlatsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dlatsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn dlatzm_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut f64, incv: *mut integer, tau: *mut f64, c1: *mut f64, c2: *mut f64, ldc: *mut integer, work: *mut f64) {
                dyload_lib().dlatzm_.unwrap()(side, m, n, v, incv, tau, c1, c2, ldc, work)
            }

pub unsafe fn dlauu2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dlauu2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn dlauum_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dlauum_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn dla_wwaddw_(n: *mut integer, x: *mut f64, y: *mut f64, w: *mut f64) {
                dyload_lib().dla_wwaddw_.unwrap()(n, x, y, w)
            }

pub unsafe fn dopmtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ap: *mut f64, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dopmtr_.unwrap()(side, uplo, trans, m, n, ap, tau, c, ldc, work, info)
            }

pub unsafe fn dorbdb1_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x21: *mut f64, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut f64, taup2: *mut f64, tauq1: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb1_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn dorbdb2_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x21: *mut f64, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut f64, taup2: *mut f64, tauq1: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb2_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn dorbdb3_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x21: *mut f64, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut f64, taup2: *mut f64, tauq1: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb3_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn dorbdb4_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x21: *mut f64, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut f64, taup2: *mut f64, tauq1: *mut f64, phantom: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb4_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, phantom, work, lwork, info)
            }

pub unsafe fn dorbdb5_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut f64, incx1: *mut integer, x2: *mut f64, incx2: *mut integer, q1: *mut f64, ldq1: *mut integer, q2: *mut f64, ldq2: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb5_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn dorbdb6_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut f64, incx1: *mut integer, x2: *mut f64, incx2: *mut integer, q1: *mut f64, ldq1: *mut integer, q2: *mut f64, ldq2: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb6_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn dorbdb_(trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x12: *mut f64, ldx12: *mut integer, x21: *mut f64, ldx21: *mut integer, x22: *mut f64, ldx22: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut f64, taup2: *mut f64, tauq1: *mut f64, tauq2: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorbdb_.unwrap()(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info)
            }

pub unsafe fn dorg2l_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dorg2l_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn dorg2r_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dorg2r_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn dorgl2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dorgl2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn dorgbr_(vect: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorglq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorgql_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgql_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorgqr_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorgr2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dorgr2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn dorgrq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgrq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorgtr_(uplo: *mut c_char, m: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorgtsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorgtsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn dorhr_col_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, t: *mut f64, ldt: *mut integer, d: *mut f64, info: *mut integer) {
                dyload_lib().dorhr_col_.unwrap()(m, n, nb, a, lda, t, ldt, d, info)
            }

pub unsafe fn dorm22_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, n2: *mut integer, q: *mut f64, ldq: *mut integer, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorm22_.unwrap()(side, trans, m, n, n1, n2, q, ldq, c, ldc, work, lwork, info)
            }

pub unsafe fn dorm2l_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dorm2l_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn dorm2r_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dorm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn dormbr_(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormbr_.unwrap()(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dorml2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dorml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn dormlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dormql_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormql_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dormqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dormr2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dormr2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn dormr3_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dormr3_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn dormrq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormrq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dormrz_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormrz_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dormtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn dpbcon_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dpbcon_.unwrap()(uplo, n, kd, ab, ldab, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dpbequ_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dpbequ_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, info)
            }

pub unsafe fn dpbrfs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dpbrfs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dpbstf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, info: *mut integer) {
                dyload_lib().dpbstf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn dpbsv_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dpbsv_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn dpbsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, afb: *mut f64, ldafb: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dpbsvx_.unwrap()(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dpbtf2_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, info: *mut integer) {
                dyload_lib().dpbtf2_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn dpbtrf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, info: *mut integer) {
                dyload_lib().dpbtrf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn dpbtrs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dpbtrs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn dpftrf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, info: *mut integer) {
                dyload_lib().dpftrf_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn dpftri_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, info: *mut integer) {
                dyload_lib().dpftri_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn dpftrs_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dpftrs_.unwrap()(transr, uplo, n, nrhs, a, b, ldb, info)
            }

pub unsafe fn dpocon_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dpocon_.unwrap()(uplo, n, a, lda, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dpoequb_(n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dpoequb_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn dpoequ_(n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dpoequ_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn dporfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dporfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dporfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dporfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dposv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dposv_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn dposvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dposvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dposvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dposvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dpotf2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dpotf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn dpotrf2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dpotrf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn dpotrf_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dpotrf_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn dpotri_(uplo: *mut c_char, n: *mut integer, buff_A: *mut f64, ldim_A: *mut integer, info: *mut integer) {
                dyload_lib().dpotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
            }

pub unsafe fn dpotrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dpotrs_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn dppcon_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dppcon_.unwrap()(uplo, n, ap, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dppequ_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().dppequ_.unwrap()(uplo, n, ap, s, scond, amax, info)
            }

pub unsafe fn dpprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, afp: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dpprfs_.unwrap()(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dppsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dppsv_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn dppsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, afp: *mut f64, equed: *mut c_char, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dppsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dpptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, info: *mut integer) {
                dyload_lib().dpptrf_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn dpptri_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, info: *mut integer) {
                dyload_lib().dpptri_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn dpptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dpptrs_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn dpstf2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dpstf2_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn dpstrf_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dpstrf_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn dptcon_(n: *mut integer, d: *mut f64, e: *mut f64, anorm: *mut f64, rcond: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dptcon_.unwrap()(n, d, e, anorm, rcond, work, info)
            }

pub unsafe fn dpteqr_(compz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dpteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn dptrfs_(n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, df: *mut f64, ef: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dptrfs_.unwrap()(n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info)
            }

pub unsafe fn dptsv_(n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dptsv_.unwrap()(n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn dptsvx_(fact: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, df: *mut f64, ef: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dptsvx_.unwrap()(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info)
            }

pub unsafe fn dpttrf_(n: *mut integer, d: *mut f64, e: *mut f64, info: *mut integer) {
                dyload_lib().dpttrf_.unwrap()(n, d, e, info)
            }

pub unsafe fn dpttrs_(n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dpttrs_.unwrap()(n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn dptts2_(n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, b: *mut f64, ldb: *mut integer) {
                dyload_lib().dptts2_.unwrap()(n, nrhs, d, e, b, ldb)
            }

pub unsafe fn drscl_(n: *mut integer, sa: *mut f64, sx: *mut f64, incx: *mut integer) {
                dyload_lib().drscl_.unwrap()(n, sa, sx, incx)
            }

pub unsafe fn dsb2st_kernels_(uplo: *mut c_char, wantz: *mut logical, ttype: *mut integer, st: *mut integer, ed: *mut integer, sweep: *mut integer, n: *mut integer, nb: *mut integer, ib: *mut integer, a: *mut f64, lda: *mut integer, v: *mut f64, tau: *mut f64, ldvt: *mut integer, work: *mut f64) {
                dyload_lib().dsb2st_kernels_.unwrap()(uplo, wantz, ttype, st, ed, sweep, n, nb, ib, a, lda, v, tau, ldvt, work)
            }

pub unsafe fn dsbev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsbev_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, info)
            }

pub unsafe fn dsbev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsbev_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info)
            }

pub unsafe fn dsbevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsbevd_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsbevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsbevd_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsbevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, q: *mut f64, ldq: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dsbevx_2stage_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn dsbevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, q: *mut f64, ldq: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dsbevx_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn dsbgst_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f64, ldab: *mut integer, bb: *mut f64, ldbb: *mut integer, x: *mut f64, ldx: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsbgst_.unwrap()(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info)
            }

pub unsafe fn dsbgv_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f64, ldab: *mut integer, bb: *mut f64, ldbb: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsbgv_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info)
            }

pub unsafe fn dsbgvd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f64, ldab: *mut integer, bb: *mut f64, ldbb: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsbgvd_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsbgvx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f64, ldab: *mut integer, bb: *mut f64, ldbb: *mut integer, q: *mut f64, ldq: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dsbgvx_.unwrap()(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn dsbtrd_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, d: *mut f64, e: *mut f64, q: *mut f64, ldq: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsbtrd_.unwrap()(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info)
            }

pub unsafe fn dsfrk_(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut integer, k: *mut integer, alpha: *mut f64, a: *mut f64, lda: *mut integer, beta: *mut f64, c__: *mut f64) {
                dyload_lib().dsfrk_.unwrap()(transr, uplo, trans, n, k, alpha, a, lda, beta, c__)
            }

pub unsafe fn dsgesv_(n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, work: *mut f64, swork: *mut f32, iter: *mut integer, info: *mut integer) {
                dyload_lib().dsgesv_.unwrap()(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, iter, info)
            }

pub unsafe fn dspcon_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dspcon_.unwrap()(uplo, n, ap, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dspev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dspev_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, info)
            }

pub unsafe fn dspevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dspevd_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dspevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dspevx_.unwrap()(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn dspgst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, ap: *mut f64, bp: *mut f64, info: *mut integer) {
                dyload_lib().dspgst_.unwrap()(itype, uplo, n, ap, bp, info)
            }

pub unsafe fn dspgvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, bp: *mut f64, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dspgvd_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dspgv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, bp: *mut f64, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dspgv_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info)
            }

pub unsafe fn dspgvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, bp: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dspgvx_.unwrap()(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn dsposv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, work: *mut f64, swork: *mut f32, iter: *mut integer, info: *mut integer) {
                dyload_lib().dsposv_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, iter, info)
            }

pub unsafe fn dsprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, afp: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsprfs_.unwrap()(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dspsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dspsv_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn dspsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, afp: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dspsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn dsptrd_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, d: *mut f64, e: *mut f64, tau: *mut f64, info: *mut integer) {
                dyload_lib().dsptrd_.unwrap()(uplo, n, ap, d, e, tau, info)
            }

pub unsafe fn dsptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dsptrf_.unwrap()(uplo, n, ap, ipiv, info)
            }

pub unsafe fn dsptri_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, ipiv: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsptri_.unwrap()(uplo, n, ap, ipiv, work, info)
            }

pub unsafe fn dsptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsptrs_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn dstebz_(range: *mut c_char, order: *mut c_char, n: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, d: *mut f64, e: *mut f64, m: *mut integer, nsplit: *mut integer, w: *mut f64, iblock: *mut integer, isplit: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dstebz_.unwrap()(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info)
            }

pub unsafe fn dstedc_(compz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dstedc_.unwrap()(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dstegr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dstegr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dstein_(n: *mut integer, d: *mut f64, e: *mut f64, m: *mut integer, w: *mut f64, iblock: *mut integer, isplit: *mut integer, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dstein_.unwrap()(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn dstemr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, nzc: *mut integer, isuppz: *mut integer, tryrac: *mut logical, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dstemr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsteqr_(compz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn dsterf_(n: *mut integer, d: *mut f64, e: *mut f64, info: *mut integer) {
                dyload_lib().dsterf_.unwrap()(n, d, e, info)
            }

pub unsafe fn dstev_(jobz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dstev_.unwrap()(jobz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn dstevd_(jobz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dstevd_.unwrap()(jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dstevr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dstevr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dstevx_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dstevx_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn dsycon_3_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsycon_3_.unwrap()(uplo, n, a, lda, e, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dsycon_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsycon_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dsycon_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsycon_rook_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn dsyconv_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsyconv_.unwrap()(uplo, way, n, a, lda, ipiv, work, info)
            }

pub unsafe fn dsyconvf_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dsyconvf_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn dsyconvf_rook_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dsyconvf_rook_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn dsyequb_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().dsyequb_.unwrap()(uplo, n, a, lda, s, scond, amax, work, info)
            }

pub unsafe fn dsyev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyev_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, info)
            }

pub unsafe fn dsyev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, info)
            }

pub unsafe fn dsyevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyevd_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsyevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyevd_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsyevr_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyevr_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsyevr_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyevr_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsyevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dsyevx_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn dsyevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dsyevx_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn dsygs2_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsygs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn dsygst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsygst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn dsygv_2stage_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsygv_2stage_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)
            }

pub unsafe fn dsygvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dsygvd_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dsygv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, w: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsygv_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)
            }

pub unsafe fn dsygvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut f64, ldz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().dsygvx_.unwrap()(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn dsyrfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyrfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dsyrfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsyrfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dsysv_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, tb: *mut f64, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysv_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork, info)
            }

pub unsafe fn dsysv_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysv_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn dsysv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysv_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn dsysv_rk_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysv_rk_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn dsysv_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysv_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn dsysvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, iwork, info)
            }

pub unsafe fn dsysvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, af: *mut f64, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dsysvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn dsyswapr_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, i1: *mut integer, i2: *mut integer) {
                dyload_lib().dsyswapr_.unwrap()(uplo, n, a, lda, i1, i2)
            }

pub unsafe fn dsytd2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, e: *mut f64, tau: *mut f64, info: *mut integer) {
                dyload_lib().dsytd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
            }

pub unsafe fn dsytf2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dsytf2_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn dsytf2_rk_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dsytf2_rk_.unwrap()(uplo, n, a, lda, e, ipiv, info)
            }

pub unsafe fn dsytf2_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().dsytf2_rook_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn dsytrd_2stage_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, e: *mut f64, tau: *mut f64, hous2: *mut f64, lhous2: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrd_2stage_.unwrap()(vect, uplo, n, a, lda, d, e, tau, hous2, lhous2, work, lwork, info)
            }

pub unsafe fn dsytrd_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, d: *mut f64, e: *mut f64, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
            }

pub unsafe fn dsytrd_sb2st_(stage1: *mut c_char, vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, d: *mut f64, e: *mut f64, hous: *mut f64, lhous: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrd_sb2st_.unwrap()(stage1, vect, uplo, n, kd, ab, ldab, d, e, hous, lhous, work, lwork, info)
            }

pub unsafe fn dsytrd_sy2sb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, a: *mut f64, lda: *mut integer, ab: *mut f64, ldab: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrd_sy2sb_.unwrap()(uplo, n, kd, a, lda, ab, ldab, tau, work, lwork, info)
            }

pub unsafe fn dsytrf_aa_2stage_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, tb: *mut f64, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrf_aa_2stage_.unwrap()(uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork, info)
            }

pub unsafe fn dsytrf_aa_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrf_aa_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn dsytrf_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrf_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn dsytrf_rk_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrf_rk_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn dsytrf_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrf_rook_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn dsytri2_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytri2_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn dsytri2x_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, nb: *mut integer, info: *mut integer) {
                dyload_lib().dsytri2x_.unwrap()(uplo, n, a, lda, ipiv, work, nb, info)
            }

pub unsafe fn dsytri_3_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytri_3_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn dsytri_3x_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, work: *mut f64, nb: *mut integer, info: *mut integer) {
                dyload_lib().dsytri_3x_.unwrap()(uplo, n, a, lda, e, ipiv, work, nb, info)
            }

pub unsafe fn dsytri_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsytri_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn dsytri_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsytri_rook_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn dsytrs2_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dsytrs2_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)
            }

pub unsafe fn dsytrs_3_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, e: *mut f64, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsytrs_3_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, info)
            }

pub unsafe fn dsytrs_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, tb: *mut f64, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsytrs_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, info)
            }

pub unsafe fn dsytrs_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dsytrs_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn dsytrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsytrs_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn dsytrs_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, ipiv: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dsytrs_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn dtbcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f64, ldab: *mut integer, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtbcon_.unwrap()(norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork, info)
            }

pub unsafe fn dtbrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtbrfs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dtbtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f64, ldab: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dtbtrs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn dtfsm_(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut f64, a: *mut f64, b: *mut f64, ldb: *mut integer) {
                dyload_lib().dtfsm_.unwrap()(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb)
            }

pub unsafe fn dtftri_(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f64, info: *mut integer) {
                dyload_lib().dtftri_.unwrap()(transr, uplo, diag, n, a, info)
            }

pub unsafe fn dtfttp_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut f64, ap: *mut f64, info: *mut integer) {
                dyload_lib().dtfttp_.unwrap()(transr, uplo, n, arf, ap, info)
            }

pub unsafe fn dtfttr_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut f64, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dtfttr_.unwrap()(transr, uplo, n, arf, a, lda, info)
            }

pub unsafe fn dtgevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, s: *mut f64, lds: *mut integer, p: *mut f64, ldp: *mut integer, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtgevc_.unwrap()(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info)
            }

pub unsafe fn dtgex2_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, q: *mut f64, ldq: *mut integer, z: *mut f64, ldz: *mut integer, j1: *mut integer, n1: *mut integer, n2: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dtgex2_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info)
            }

pub unsafe fn dtgexc_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, q: *mut f64, ldq: *mut integer, z: *mut f64, ldz: *mut integer, ifst: *mut integer, ilst: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dtgexc_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info)
            }

pub unsafe fn dtgsen_(ijob: *mut integer, wantq: *mut logical, wantz: *mut logical, select: *mut logical, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, alphar: *mut f64, alphai: *mut f64, beta: *mut f64, q: *mut f64, ldq: *mut integer, z: *mut f64, ldz: *mut integer, m: *mut integer, pl: *mut f64, pr: *mut f64, dif: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dtgsen_.unwrap()(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dtgsja_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, tola: *mut f64, tolb: *mut f64, alpha: *mut f64, beta: *mut f64, u: *mut f64, ldu: *mut integer, v: *mut f64, ldv: *mut integer, q: *mut f64, ldq: *mut integer, work: *mut f64, ncycle: *mut integer, info: *mut integer) {
                dyload_lib().dtgsja_.unwrap()(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info)
            }

pub unsafe fn dtgsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, s: *mut f64, dif: *mut f64, mm: *mut integer, m: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtgsna_.unwrap()(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info)
            }

pub unsafe fn dtgsy2_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, c: *mut f64, ldc: *mut integer, d: *mut f64, ldd: *mut integer, e: *mut f64, lde: *mut integer, f: *mut f64, ldf: *mut integer, scale: *mut f64, rdsum: *mut f64, rdscal: *mut f64, iwork: *mut integer, pq: *mut integer, info: *mut integer) {
                dyload_lib().dtgsy2_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info)
            }

pub unsafe fn dtgsyl_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, c: *mut f64, ldc: *mut integer, d: *mut f64, ldd: *mut integer, e: *mut f64, lde: *mut integer, f: *mut f64, ldf: *mut integer, scale: *mut f64, dif: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtgsyl_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info)
            }

pub unsafe fn dtpcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut f64, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtpcon_.unwrap()(norm, uplo, diag, n, ap, rcond, work, iwork, info)
            }

pub unsafe fn dtplqt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, t: *mut f64, ldt: *mut integer, info: *mut integer) {
                dyload_lib().dtplqt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn dtplqt_(m: *mut integer, n: *mut integer, l: *mut integer, mb: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtplqt_.unwrap()(m, n, l, mb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn dtpmlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, mb: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtpmlqt_.unwrap()(side, trans, m, n, k, l, mb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn dtpmqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, nb: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtpmqrt_.unwrap()(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn dtpqrt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, t: *mut f64, ldt: *mut integer, info: *mut integer) {
                dyload_lib().dtpqrt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn dtpqrt_(m: *mut integer, n: *mut integer, l: *mut integer, nb: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, t: *mut f64, ldt: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtpqrt_.unwrap()(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn dtprfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut f64, ldv: *mut integer, t: *mut f64, ldt: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, work: *mut f64, ldwork: *mut integer) {
                dyload_lib().dtprfb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn dtprfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtprfs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dtptri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut f64, info: *mut integer) {
                dyload_lib().dtptri_.unwrap()(uplo, diag, n, ap, info)
            }

pub unsafe fn dtptrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f64, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dtptrs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn dtpttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f64, arf: *mut f64, info: *mut integer) {
                dyload_lib().dtpttf_.unwrap()(transr, uplo, n, ap, arf, info)
            }

pub unsafe fn dtpttr_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dtpttr_.unwrap()(uplo, n, ap, a, lda, info)
            }

pub unsafe fn dtrcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, rcond: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtrcon_.unwrap()(norm, uplo, diag, n, a, lda, rcond, work, iwork, info)
            }

pub unsafe fn dtrevc3_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f64, ldt: *mut integer, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dtrevc3_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, lwork, info)
            }

pub unsafe fn dtrevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f64, ldt: *mut integer, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtrevc_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info)
            }

pub unsafe fn dtrexc_(compq: *mut c_char, n: *mut integer, t: *mut f64, ldt: *mut integer, q: *mut f64, ldq: *mut integer, ifst: *mut integer, ilst: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dtrexc_.unwrap()(compq, n, t, ldt, q, ldq, ifst, ilst, work, info)
            }

pub unsafe fn dtrrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, x: *mut f64, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtrrfs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn dtrsen_(job: *mut c_char, compq: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f64, ldt: *mut integer, q: *mut f64, ldq: *mut integer, wr: *mut f64, wi: *mut f64, m: *mut integer, s: *mut f64, sep: *mut f64, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().dtrsen_.unwrap()(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info)
            }

pub unsafe fn dtrsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f64, ldt: *mut integer, vl: *mut f64, ldvl: *mut integer, vr: *mut f64, ldvr: *mut integer, s: *mut f64, sep: *mut f64, mm: *mut integer, m: *mut integer, work: *mut f64, ldwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dtrsna_.unwrap()(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork, info)
            }

pub unsafe fn dtrsyl_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, c: *mut f64, ldc: *mut integer, scale: *mut f64, info: *mut integer) {
                dyload_lib().dtrsyl_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
            }

pub unsafe fn dtrti2_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dtrti2_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn dtrtri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dtrtri_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn dtrtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f64, lda: *mut integer, b: *mut f64, ldb: *mut integer, info: *mut integer) {
                dyload_lib().dtrtrs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn dtrttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, arf: *mut f64, info: *mut integer) {
                dyload_lib().dtrttf_.unwrap()(transr, uplo, n, a, lda, arf, info)
            }

pub unsafe fn dtrttp_(uplo: *mut c_char, n: *mut integer, a: *mut f64, lda: *mut integer, ap: *mut f64, info: *mut integer) {
                dyload_lib().dtrttp_.unwrap()(uplo, n, a, lda, ap, info)
            }

pub unsafe fn dtzrqf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, info: *mut integer) {
                dyload_lib().dtzrqf_.unwrap()(m, n, a, lda, tau, info)
            }

pub unsafe fn dtzrzf_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dtzrzf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn icmax1_(n: *mut integer, cx: *mut scomplex, incx: *mut integer) -> integer {
                dyload_lib().icmax1_.unwrap()(n, cx, incx)
            }

pub unsafe fn ilaclc_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer) -> integer {
                dyload_lib().ilaclc_.unwrap()(m, n, a, lda)
            }

pub unsafe fn ilaclr_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer) -> integer {
                dyload_lib().ilaclr_.unwrap()(m, n, a, lda)
            }

pub unsafe fn iladiag_(diag: *mut c_char) -> integer {
                dyload_lib().iladiag_.unwrap()(diag)
            }

pub unsafe fn iladlc_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer) -> integer {
                dyload_lib().iladlc_.unwrap()(m, n, a, lda)
            }

pub unsafe fn iladlr_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer) -> integer {
                dyload_lib().iladlr_.unwrap()(m, n, a, lda)
            }

pub unsafe fn ilaenv2stage_(ispec: *mut integer, name: *mut c_char, opts: *mut c_char, n1: *mut integer, n2: *mut integer, n3: *mut integer, n4: *mut integer) -> integer {
                dyload_lib().ilaenv2stage_.unwrap()(ispec, name, opts, n1, n2, n3, n4)
            }

pub unsafe fn ilaprec_(prec: *mut c_char) -> integer {
                dyload_lib().ilaprec_.unwrap()(prec)
            }

pub unsafe fn ilaslc_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer) -> integer {
                dyload_lib().ilaslc_.unwrap()(m, n, a, lda)
            }

pub unsafe fn ilaslr_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer) -> integer {
                dyload_lib().ilaslr_.unwrap()(m, n, a, lda)
            }

pub unsafe fn ilatrans_(trans: *mut c_char) -> integer {
                dyload_lib().ilatrans_.unwrap()(trans)
            }

pub unsafe fn ilauplo_(uplo: *mut c_char) -> integer {
                dyload_lib().ilauplo_.unwrap()(uplo)
            }

pub unsafe fn ilaver_(vers_major: *mut integer, vers_minor: *mut integer, vers_patch__: *mut integer) {
                dyload_lib().ilaver_.unwrap()(vers_major, vers_minor, vers_patch__)
            }

pub unsafe fn ilazlc_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer) -> integer {
                dyload_lib().ilazlc_.unwrap()(m, n, a, lda)
            }

pub unsafe fn ilazlr_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer) -> integer {
                dyload_lib().ilazlr_.unwrap()(m, n, a, lda)
            }

pub unsafe fn iparam2stage_(ispec: *mut integer, name: *mut c_char, opts: *mut c_char, ni: *mut integer, nbi: *mut integer, ibi: *mut integer, nxi: *mut integer) -> integer {
                dyload_lib().iparam2stage_.unwrap()(ispec, name, opts, ni, nbi, ibi, nxi)
            }

pub unsafe fn izmax1_(n: *mut integer, cx: *mut dcomplex, incx: *mut integer) -> integer {
                dyload_lib().izmax1_.unwrap()(n, cx, incx)
            }

pub unsafe fn sbbcsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, theta: *mut f32, phi: *mut f32, u1: *mut f32, ldu1: *mut integer, u2: *mut f32, ldu2: *mut integer, v1t: *mut f32, ldv1t: *mut integer, v2t: *mut f32, ldv2t: *mut integer, b11d: *mut f32, b11e: *mut f32, b12d: *mut f32, b12e: *mut f32, b21d: *mut f32, b21e: *mut f32, b22d: *mut f32, b22e: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sbbcsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork, info)
            }

pub unsafe fn sbdsdc_(uplo: *mut c_char, compq: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, q: *mut f32, iq: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sbdsdc_.unwrap()(uplo, compq, n, d, e, u, ldu, vt, ldvt, q, iq, work, iwork, info)
            }

pub unsafe fn sbdsqr_(uplo: *mut c_char, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d: *mut f32, e: *mut f32, vt: *mut f32, ldvt: *mut integer, u: *mut f32, ldu: *mut integer, c: *mut f32, ldc: *mut integer, rwork: *mut f32, info: *mut integer) {
                dyload_lib().sbdsqr_.unwrap()(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info)
            }

pub unsafe fn sbdsvdx_(uplo: *mut c_char, jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, ns: *mut integer, s: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sbdsvdx_.unwrap()(uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldz, work, iwork, info)
            }

pub unsafe fn scombssq_(v1: *mut f32, v2: *mut f32) {
                dyload_lib().scombssq_.unwrap()(v1, v2)
            }

pub unsafe fn sdisna_(job: *mut c_char, m: *mut integer, n: *mut integer, d: *mut f32, sep: *mut f32, info: *mut integer) {
                dyload_lib().sdisna_.unwrap()(job, m, n, d, sep, info)
            }

pub unsafe fn sgbbrd_(vect: *mut c_char, m: *mut integer, n: *mut integer, ncc: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, d: *mut f32, e: *mut f32, q: *mut f32, ldq: *mut integer, pt: *mut f32, ldpt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sgbbrd_.unwrap()(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, info)
            }

pub unsafe fn sgbcon_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgbcon_.unwrap()(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn sgbequb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().sgbequb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn sgbequ_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().sgbequ_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn sgbrfs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgbrfs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn sgbrfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, ipiv: *mut integer, r: *mut f32, c: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgbrfsx_.unwrap()(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn sgbsv_(n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sgbsv_.unwrap()(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn sgbsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgbsvx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn sgbsvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgbsvxx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn sgbtf2_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().sgbtf2_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn sgbtrf_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().sgbtrf_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn sgbtrs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sgbtrs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn sgebak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f32, m: *mut integer, v: *mut f32, ldv: *mut integer, info: *mut integer) {
                dyload_lib().sgebak_.unwrap()(job, side, n, ilo, ihi, scale, m, v, ldv, info)
            }

pub unsafe fn sgebal_(job: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f32, info: *mut integer) {
                dyload_lib().sgebal_.unwrap()(job, n, a, lda, ilo, ihi, scale, info)
            }

pub unsafe fn sgebd2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, e: *mut f32, tauq: *mut f32, taup: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
            }

pub unsafe fn sgebrd_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, e: *mut f32, tauq: *mut f32, taup: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
            }

pub unsafe fn sgecon_(norm: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgecon_.unwrap()(norm, n, a, lda, anorm, rcond, work, iwork, info)
            }

pub unsafe fn sgeequb_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().sgeequb_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn sgeequ_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().sgeequ_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn sgees_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, n: *mut integer, a: *mut f32, lda: *mut integer, sdim: *mut integer, wr: *mut f32, wi: *mut f32, vs: *mut f32, ldvs: *mut integer, work: *mut f32, lwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().sgees_.unwrap()(jobvs, sort, select, n, a, lda, sdim, wr, wi, vs, ldvs, work, lwork, bwork, info)
            }

pub unsafe fn sgeesx_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, sense: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, sdim: *mut integer, wr: *mut f32, wi: *mut f32, vs: *mut f32, ldvs: *mut integer, rconde: *mut f32, rcondv: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().sgeesx_.unwrap()(jobvs, sort, select, sense, n, a, lda, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)
            }

pub unsafe fn sgeev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, wr: *mut f32, wi: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeev_.unwrap()(jobvl, jobvr, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn sgeevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, wr: *mut f32, wi: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f32, abnrm: *mut f32, rconde: *mut f32, rcondv: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork, info)
            }

pub unsafe fn sgegs_(jobvsl: *mut c_char, jobvsr: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vsl: *mut f32, ldvsl: *mut integer, vsr: *mut f32, ldvsr: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgegs_.unwrap()(jobvsl, jobvsr, n, a, lda, b, ldb, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, info)
            }

pub unsafe fn sgegv_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgegv_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn sgehd2_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
            }

pub unsafe fn sgehrd_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sgejsv_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, sva: *mut f32, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgejsv_.unwrap()(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, work, lwork, iwork, info)
            }

pub unsafe fn sgelq2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgelq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn sgelqf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sgelq_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, tsize: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgelq_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn sgelqt3_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, info: *mut integer) {
                dyload_lib().sgelqt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn sgelqt_(m: *mut integer, n: *mut integer, mb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sgelqt_.unwrap()(m, n, mb, a, lda, t, ldt, work, info)
            }

pub unsafe fn sgels_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgels_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn sgelsd_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, s: *mut f32, rcond: *mut f32, rank: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgelsd_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, iwork, info)
            }

pub unsafe fn sgelss_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, s: *mut f32, rcond: *mut f32, rank: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgelss_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, info)
            }

pub unsafe fn sgelsx_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f32, rank: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sgelsx_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, info)
            }

pub unsafe fn sgelsy_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f32, rank: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgelsy_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, info)
            }

pub unsafe fn sgemlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, tsize: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgemlq_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn sgemlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sgemlqt_.unwrap()(side, trans, m, n, k, mb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn sgemqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, tsize: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgemqr_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn sgemqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, nb: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sgemqrt_.unwrap()(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn sgeql2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgeql2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn sgeqlf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeqlf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sgeqp3_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, jpvt: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, info)
            }

pub unsafe fn sgeqpf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, jpvt: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, info)
            }

pub unsafe fn sgeqr2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn sgeqr2p_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgeqr2p_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn sgeqrf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sgeqrfp_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeqrfp_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sgeqr_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, tsize: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgeqr_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn sgeqrt2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, info: *mut integer) {
                dyload_lib().sgeqrt2_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn sgeqrt3_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, info: *mut integer) {
                dyload_lib().sgeqrt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn sgeqrt_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sgeqrt_.unwrap()(m, n, nb, a, lda, t, ldt, work, info)
            }

pub unsafe fn sgerfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgerfs_.unwrap()(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn sgerfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, r: *mut f32, c: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgerfsx_.unwrap()(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn sgerq2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sgerq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn sgerqf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgerqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sgesc2_(n: *mut integer, a: *mut f32, lda: *mut integer, rhs: *mut f32, ipiv: *mut integer, jpiv: *mut integer, scale: *mut f32) {
                dyload_lib().sgesc2_.unwrap()(n, a, lda, rhs, ipiv, jpiv, scale)
            }

pub unsafe fn sgesdd_(jobz: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesdd_.unwrap()(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, iwork, info)
            }

pub unsafe fn sgesvd_(jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesvd_.unwrap()(jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, info)
            }

pub unsafe fn sgesvdq_(joba: *mut c_char, jobp: *mut c_char, jobr: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, numrank: *mut integer, iwork: *mut integer, liwork: *mut integer, work: *mut f32, lwork: *mut integer, rwork: *mut f32, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesvdq_.unwrap()(joba, jobp, jobr, jobu, jobv, m, n, a, lda, s, u, ldu, v, ldv, numrank, iwork, liwork, work, lwork, rwork, lrwork, info)
            }

pub unsafe fn sgesvdx_(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, ns: *mut integer, s: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesvdx_.unwrap()(jobu, jobvt, range, m, n, a, lda, vl, vu, il, iu, ns, s, u, ldu, vt, ldvt, work, lwork, iwork, info)
            }

pub unsafe fn sgesv_(n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sgesv_.unwrap()(n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn sgesvj_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, sva: *mut f32, mv: *mut integer, v: *mut f32, ldv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesvj_.unwrap()(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, work, lwork, info)
            }

pub unsafe fn sgesvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesvx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn sgesvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f32, c: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgesvxx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn sgetc2_(n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, jpiv: *mut integer, info: *mut integer) {
                dyload_lib().sgetc2_.unwrap()(n, a, lda, ipiv, jpiv, info)
            }

pub unsafe fn sgetf2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().sgetf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn sgetrf2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().sgetrf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn sgetrf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().sgetrf_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn sgetri_(n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgetri_.unwrap()(n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn sgetrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sgetrs_.unwrap()(trans, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn sgetsls_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgetsls_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn sggbak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f32, rscale: *mut f32, m: *mut integer, v: *mut f32, ldv: *mut integer, info: *mut integer) {
                dyload_lib().sggbak_.unwrap()(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info)
            }

pub unsafe fn sggbal_(job: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f32, rscale: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sggbal_.unwrap()(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info)
            }

pub unsafe fn sgges3_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, sdim: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vsl: *mut f32, ldvsl: *mut integer, vsr: *mut f32, ldvsr: *mut integer, work: *mut f32, lwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().sgges3_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info)
            }

pub unsafe fn sgges_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, sdim: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vsl: *mut f32, ldvsl: *mut integer, vsr: *mut f32, ldvsr: *mut integer, work: *mut f32, lwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().sgges_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork, info)
            }

pub unsafe fn sggesx_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, sense: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, sdim: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vsl: *mut f32, ldvsl: *mut integer, vsr: *mut f32, ldvsr: *mut integer, rconde: *mut f32, rcondv: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().sggesx_.unwrap()(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork, info)
            }

pub unsafe fn sggev3_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sggev3_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn sggev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sggev_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork, info)
            }

pub unsafe fn sggevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f32, rscale: *mut f32, abnrm: *mut f32, bbnrm: *mut f32, rconde: *mut f32, rcondv: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().sggevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork, info)
            }

pub unsafe fn sggglm_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, d: *mut f32, x: *mut f32, y: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sggglm_.unwrap()(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info)
            }

pub unsafe fn sgghd3_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, q: *mut f32, ldq: *mut integer, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgghd3_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, work, lwork, info)
            }

pub unsafe fn sgghrd_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, q: *mut f32, ldq: *mut integer, z: *mut f32, ldz: *mut integer, info: *mut integer) {
                dyload_lib().sgghrd_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info)
            }

pub unsafe fn sgglse_(m: *mut integer, n: *mut integer, p: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, c: *mut f32, d: *mut f32, x: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgglse_.unwrap()(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info)
            }

pub unsafe fn sggqrf_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut f32, lda: *mut integer, taua: *mut f32, b: *mut f32, ldb: *mut integer, taub: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sggqrf_.unwrap()(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn sggrqf_(m: *mut integer, p: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, taua: *mut f32, b: *mut f32, ldb: *mut integer, taub: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sggrqf_.unwrap()(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn sggsvd3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alpha: *mut f32, beta: *mut f32, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, q: *mut f32, ldq: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sggsvd3_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, lwork, iwork, info)
            }

pub unsafe fn sggsvd_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alpha: *mut f32, beta: *mut f32, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, q: *mut f32, ldq: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sggsvd_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, iwork, info)
            }

pub unsafe fn sggsvp3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, tola: *mut f32, tolb: *mut f32, k: *mut integer, l: *mut integer, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, q: *mut f32, ldq: *mut integer, iwork: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sggsvp3_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, lwork, info)
            }

pub unsafe fn sggsvp_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, tola: *mut f32, tolb: *mut f32, k: *mut integer, l: *mut integer, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, q: *mut f32, ldq: *mut integer, iwork: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sggsvp_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, tau, work, info)
            }

pub unsafe fn sgsvj0_(jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, sva: *mut f32, mv: *mut integer, v: *mut f32, ldv: *mut integer, eps: *mut f32, sfmin: *mut f32, tol: *mut f32, nsweep: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgsvj0_.unwrap()(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn sgsvj1_(jobv: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, sva: *mut f32, mv: *mut integer, v: *mut f32, ldv: *mut integer, eps: *mut f32, sfmin: *mut f32, tol: *mut f32, nsweep: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sgsvj1_.unwrap()(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn sgtcon_(norm: *mut c_char, n: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, du2: *mut f32, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgtcon_.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn sgtrfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, dlf: *mut f32, df: *mut f32, duf: *mut f32, du2: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgtrfs_.unwrap()(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn sgtsv_(n: *mut integer, nrhs: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sgtsv_.unwrap()(n, nrhs, dl, d, du, b, ldb, info)
            }

pub unsafe fn sgtsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, dlf: *mut f32, df: *mut f32, duf: *mut f32, du2: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sgtsvx_.unwrap()(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn sgttrf_(n: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, du2: *mut f32, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().sgttrf_.unwrap()(n, dl, d, du, du2, ipiv, info)
            }

pub unsafe fn sgttrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, du2: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sgttrs_.unwrap()(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info)
            }

pub unsafe fn sgtts2_(itrans: *mut integer, n: *mut integer, nrhs: *mut integer, dl: *mut f32, d: *mut f32, du: *mut f32, du2: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer) {
                dyload_lib().sgtts2_.unwrap()(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb)
            }

pub unsafe fn shgeqz_(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f32, ldh: *mut integer, t: *mut f32, ldt: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, q: *mut f32, ldq: *mut integer, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().shgeqz_.unwrap()(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alphar, alphai, beta, q, ldq, z, ldz, work, lwork, info)
            }

pub unsafe fn shsein_(side: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char, select: *mut logical, n: *mut integer, h: *mut f32, ldh: *mut integer, wr: *mut f32, wi: *mut f32, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f32, ifaill: *mut integer, ifailr: *mut integer, info: *mut integer) {
                dyload_lib().shsein_.unwrap()(side, eigsrc, initv, select, n, h, ldh, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr, info)
            }

pub unsafe fn shseqr_(job: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f32, ldh: *mut integer, wr: *mut f32, wi: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().shseqr_.unwrap()(job, compz, n, ilo, ihi, h, ldh, wr, wi, z, ldz, work, lwork, info)
            }

pub unsafe fn slabad_(small_: *mut f32, large: *mut f32) {
                dyload_lib().slabad_.unwrap()(small_, large)
            }

pub unsafe fn slabrd_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, e: *mut f32, tauq: *mut f32, taup: *mut f32, x: *mut f32, ldx: *mut integer, y: *mut f32, ldy: *mut integer) {
                dyload_lib().slabrd_.unwrap()(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy)
            }

pub unsafe fn slacn2_(n: *mut integer, v: *mut f32, x: *mut f32, isgn: *mut integer, est: *mut f32, kase: *mut integer, isave: *mut integer) {
                dyload_lib().slacn2_.unwrap()(n, v, x, isgn, est, kase, isave)
            }

pub unsafe fn slacon_(n: *mut integer, v: *mut f32, x: *mut f32, isgn: *mut integer, est: *mut f32, kase: *mut integer) {
                dyload_lib().slacon_.unwrap()(n, v, x, isgn, est, kase)
            }

pub unsafe fn slacpy_(uplo: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer) {
                dyload_lib().slacpy_.unwrap()(uplo, m, n, a, lda, b, ldb)
            }

pub unsafe fn sladiv_(a: *mut f32, b: *mut f32, c: *mut f32, d: *mut f32, p: *mut f32, q: *mut f32) {
                dyload_lib().sladiv_.unwrap()(a, b, c, d, p, q)
            }

pub unsafe fn slae2_(a: *mut f32, b: *mut f32, c: *mut f32, rt1: *mut f32, rt2: *mut f32) {
                dyload_lib().slae2_.unwrap()(a, b, c, rt1, rt2)
            }

pub unsafe fn slaebz_(ijob: *mut integer, nitmax: *mut integer, n: *mut integer, mmax: *mut integer, minp: *mut integer, nbmin: *mut integer, abstol: *mut f32, reltol: *mut f32, pivmin: *mut f32, d: *mut f32, e: *mut f32, e2: *mut f32, nval: *mut integer, ab: *mut f32, c: *mut f32, mout: *mut integer, nab: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slaebz_.unwrap()(ijob, nitmax, n, mmax, minp, nbmin, abstol, reltol, pivmin, d, e, e2, nval, ab, c, mout, nab, work, iwork, info)
            }

pub unsafe fn slaed0_(icompq: *mut integer, qsiz: *mut integer, n: *mut integer, d: *mut f32, e: *mut f32, q: *mut f32, ldq: *mut integer, qstore: *mut f32, ldqs: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slaed0_.unwrap()(icompq, qsiz, n, d, e, q, ldq, qstore, ldqs, work, iwork, info)
            }

pub unsafe fn slaed1_(n: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, indxq: *mut integer, rho: *mut f32, cutpnt: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slaed1_.unwrap()(n, d, q, ldq, indxq, rho, cutpnt, work, iwork, info)
            }

pub unsafe fn slaed2_(k: *mut integer, n: *mut integer, n1: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, indxq: *mut integer, rho: *mut f32, z: *mut f32, dlamda: *mut f32, w: *mut f32, q2: *mut f32, indx: *mut integer, indxc: *mut integer, indxp: *mut integer, coltyp: *mut integer, info: *mut integer) {
                dyload_lib().slaed2_.unwrap()(k, n, n1, d, q, ldq, indxq, rho, z, dlamda, w, q2, indx, indxc, indxp, coltyp, info)
            }

pub unsafe fn slaed3_(k: *mut integer, n: *mut integer, n1: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, rho: *mut f32, dlamda: *mut f32, q2: *mut f32, indx: *mut integer, ctot: *mut integer, w: *mut f32, s: *mut f32, info: *mut integer) {
                dyload_lib().slaed3_.unwrap()(k, n, n1, d, q, ldq, rho, dlamda, q2, indx, ctot, w, s, info)
            }

pub unsafe fn slaed4_(n: *mut integer, i: *mut integer, d: *mut f32, z: *mut f32, delta: *mut f32, rho: *mut f32, dlam: *mut f32, info: *mut integer) {
                dyload_lib().slaed4_.unwrap()(n, i, d, z, delta, rho, dlam, info)
            }

pub unsafe fn slaed5_(i: *mut integer, d: *mut f32, z: *mut f32, delta: *mut f32, rho: *mut f32, dlam: *mut f32) {
                dyload_lib().slaed5_.unwrap()(i, d, z, delta, rho, dlam)
            }

pub unsafe fn slaed6_(kniter: *mut integer, orgati: *mut logical, rho: *mut f32, d: *mut f32, z: *mut f32, finit: *mut f32, tau: *mut f32, info: *mut integer) {
                dyload_lib().slaed6_.unwrap()(kniter, orgati, rho, d, z, finit, tau, info)
            }

pub unsafe fn slaed7_(icompq: *mut integer, n: *mut integer, qsiz: *mut integer, tlvls: *mut integer, curlvl: *mut integer, curpbm: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, indxq: *mut integer, rho: *mut f32, cutpnt: *mut integer, qstore: *mut f32, qptr: *mut integer, prmptr: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slaed7_.unwrap()(icompq, n, qsiz, tlvls, curlvl, curpbm, d, q, ldq, indxq, rho, cutpnt, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, iwork, info)
            }

pub unsafe fn slaed8_(icompq: *mut integer, k: *mut integer, n: *mut integer, qsiz: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, indxq: *mut integer, rho: *mut f32, cutpnt: *mut integer, z: *mut f32, dlamda: *mut f32, q2: *mut f32, ldq2: *mut integer, w: *mut f32, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f32, indxp: *mut integer, indx: *mut integer, info: *mut integer) {
                dyload_lib().slaed8_.unwrap()(icompq, k, n, qsiz, d, q, ldq, indxq, rho, cutpnt, z, dlamda, q2, ldq2, w, perm, givptr, givcol, givnum, indxp, indx, info)
            }

pub unsafe fn slaed9_(k: *mut integer, kstart: *mut integer, kstop: *mut integer, n: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, rho: *mut f32, dlamda: *mut f32, w: *mut f32, s: *mut f32, lds: *mut integer, info: *mut integer) {
                dyload_lib().slaed9_.unwrap()(k, kstart, kstop, n, d, q, ldq, rho, dlamda, w, s, lds, info)
            }

pub unsafe fn slaeda_(n: *mut integer, tlvls: *mut integer, curlvl: *mut integer, curpbm: *mut integer, prmptr: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f32, q: *mut f32, qptr: *mut integer, z: *mut f32, ztemp: *mut f32, info: *mut integer) {
                dyload_lib().slaeda_.unwrap()(n, tlvls, curlvl, curpbm, prmptr, perm, givptr, givcol, givnum, q, qptr, z, ztemp, info)
            }

pub unsafe fn slaein_(rightv: *mut logical, noinit: *mut logical, n: *mut integer, h: *mut f32, ldh: *mut integer, wr: *mut f32, wi: *mut f32, vr: *mut f32, vi: *mut f32, b: *mut f32, ldb: *mut integer, work: *mut f32, eps3: *mut f32, smlnum: *mut f32, bignum: *mut f32, info: *mut integer) {
                dyload_lib().slaein_.unwrap()(rightv, noinit, n, h, ldh, wr, wi, vr, vi, b, ldb, work, eps3, smlnum, bignum, info)
            }

pub unsafe fn slaev2_(a: *mut f32, b: *mut f32, c: *mut f32, rt1: *mut f32, rt2: *mut f32, cs1: *mut f32, sn1: *mut f32) {
                dyload_lib().slaev2_.unwrap()(a, b, c, rt1, rt2, cs1, sn1)
            }

pub unsafe fn slaexc_(wantq: *mut logical, n: *mut integer, t: *mut f32, ldt: *mut integer, q: *mut f32, ldq: *mut integer, j1: *mut integer, n1: *mut integer, n2: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().slaexc_.unwrap()(wantq, n, t, ldt, q, ldq, j1, n1, n2, work, info)
            }

pub unsafe fn slag2d_(m: *mut integer, n: *mut integer, sa: *mut f32, ldsa: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().slag2d_.unwrap()(m, n, sa, ldsa, a, lda, info)
            }

pub unsafe fn slag2_(a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, safmin: *mut f32, scale1: *mut f32, scale2: *mut f32, wr1: *mut f32, wr2: *mut f32, wi: *mut f32) {
                dyload_lib().slag2_.unwrap()(a, lda, b, ldb, safmin, scale1, scale2, wr1, wr2, wi)
            }

pub unsafe fn sla_gbamv_(trans: *mut integer, m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, alpha: *mut f32, ab: *mut f32, ldab: *mut integer, x: *mut f32, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().sla_gbamv_.unwrap()(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy)
            }

pub unsafe fn sla_gbrfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut f32, ldb: *mut integer, y: *mut f32, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut f32, ayb: *mut f32, dy: *mut f32, y_tail: *mut f32, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().sla_gbrfsx_extended_.unwrap()(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn sla_geamv_(trans: *mut integer, m: *mut integer, n: *mut integer, alpha: *mut f32, a: *mut f32, lda: *mut integer, x: *mut f32, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().sla_geamv_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn sla_gerfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut f32, ldb: *mut integer, y: *mut f32, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, errs_n: *mut f32, errs_c: *mut f32, res: *mut f32, ayb: *mut f32, dy: *mut f32, y_tail: *mut f32, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().sla_gerfsx_extended_.unwrap()(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn slags2_(upper: *mut logical, a1: *mut f32, a2: *mut f32, a3: *mut f32, b1: *mut f32, b2: *mut f32, b3: *mut f32, csu: *mut f32, snu: *mut f32, csv: *mut f32, snv: *mut f32, csq: *mut f32, snq: *mut f32) {
                dyload_lib().slags2_.unwrap()(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq)
            }

pub unsafe fn slagtf_(n: *mut integer, a: *mut f32, lambda: *mut f32, b: *mut f32, c: *mut f32, tol: *mut f32, d: *mut f32, in_: *mut integer, info: *mut integer) {
                dyload_lib().slagtf_.unwrap()(n, a, lambda, b, c, tol, d, in_, info)
            }

pub unsafe fn slagtm_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, alpha: *mut f32, dl: *mut f32, d: *mut f32, du: *mut f32, x: *mut f32, ldx: *mut integer, beta: *mut f32, b: *mut f32, ldb: *mut integer) {
                dyload_lib().slagtm_.unwrap()(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb)
            }

pub unsafe fn slagts_(job: *mut integer, n: *mut integer, a: *mut f32, b: *mut f32, c: *mut f32, d: *mut f32, in_: *mut integer, y: *mut f32, tol: *mut f32, info: *mut integer) {
                dyload_lib().slagts_.unwrap()(job, n, a, b, c, d, in_, y, tol, info)
            }

pub unsafe fn slagv2_(a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, csl: *mut f32, snl: *mut f32, csr: *mut f32, snr: *mut f32) {
                dyload_lib().slagv2_.unwrap()(a, lda, b, ldb, alphar, alphai, beta, csl, snl, csr, snr)
            }

pub unsafe fn slahqr_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f32, ldh: *mut integer, wr: *mut f32, wi: *mut f32, iloz: *mut integer, ihiz: *mut integer, z: *mut f32, ldz: *mut integer, info: *mut integer) {
                dyload_lib().slahqr_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, info)
            }

pub unsafe fn slahr2_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, t: *mut f32, ldt: *mut integer, y: *mut f32, ldy: *mut integer) {
                dyload_lib().slahr2_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn slahrd_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, t: *mut f32, ldt: *mut integer, y: *mut f32, ldy: *mut integer) {
                dyload_lib().slahrd_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn slaic1_(job: *mut integer, j: *mut integer, x: *mut f32, sest: *mut f32, w: *mut f32, gamma: *mut f32, sestpr: *mut f32, s: *mut f32, c__: *mut f32) {
                dyload_lib().slaic1_.unwrap()(job, j, x, sest, w, gamma, sestpr, s, c__)
            }

pub unsafe fn sla_lin_berr_(n: *mut integer, nz: *mut integer, nrhs: *mut integer, res: *mut f32, ayb: *mut f32, berr: *mut f32) {
                dyload_lib().sla_lin_berr_.unwrap()(n, nz, nrhs, res, ayb, berr)
            }

pub unsafe fn slaln2_(ltrans: *mut logical, na: *mut integer, nw: *mut integer, smin: *mut f32, ca: *mut f32, a: *mut f32, lda: *mut integer, d1: *mut f32, d2: *mut f32, b: *mut f32, ldb: *mut integer, wr: *mut f32, wi: *mut f32, x: *mut f32, ldx: *mut integer, scale: *mut f32, xnorm: *mut f32, info: *mut integer) {
                dyload_lib().slaln2_.unwrap()(ltrans, na, nw, smin, ca, a, lda, d1, d2, b, ldb, wr, wi, x, ldx, scale, xnorm, info)
            }

pub unsafe fn slals0_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, nrhs: *mut integer, b: *mut f32, ldb: *mut integer, bx: *mut f32, ldbx: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f32, ldgnum: *mut integer, poles: *mut f32, difl: *mut f32, difr: *mut f32, z: *mut f32, k: *mut integer, c: *mut f32, s: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().slals0_.unwrap()(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, info)
            }

pub unsafe fn slalsa_(icompq: *mut integer, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, b: *mut f32, ldb: *mut integer, bx: *mut f32, ldbx: *mut integer, u: *mut f32, ldu: *mut integer, vt: *mut f32, k: *mut integer, difl: *mut f32, difr: *mut f32, z: *mut f32, poles: *mut f32, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, perm: *mut integer, givnum: *mut f32, c: *mut f32, s: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slalsa_.unwrap()(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info)
            }

pub unsafe fn slalsd_(uplo: *mut c_char, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, b: *mut f32, ldb: *mut integer, rcond: *mut f32, rank: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slalsd_.unwrap()(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, iwork, info)
            }

pub unsafe fn slamrg_(n1: *mut integer, n2: *mut integer, a: *mut f32, strd1: *mut integer, strd2: *mut integer, index: *mut integer) {
                dyload_lib().slamrg_.unwrap()(n1, n2, a, strd1, strd2, index)
            }

pub unsafe fn slamswlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slamswlq_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn slamtsqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slamtsqr_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn slaneg_(n: *mut integer, d: *mut f32, lld: *mut f32, sigma: *mut f32, pivmin: *mut f32, r__: *mut integer) -> integer {
                dyload_lib().slaneg_.unwrap()(n, d, lld, sigma, pivmin, r__)
            }

pub unsafe fn slanv2_(a: *mut f32, b: *mut f32, c: *mut f32, d: *mut f32, rt1r: *mut f32, rt1i: *mut f32, rt2r: *mut f32, rt2i: *mut f32, cs: *mut f32, sn: *mut f32) {
                dyload_lib().slanv2_.unwrap()(a, b, c, d, rt1r, rt1i, rt2r, rt2i, cs, sn)
            }

pub unsafe fn slaorhr_col_getrfnp2_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, info: *mut integer) {
                dyload_lib().slaorhr_col_getrfnp2_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn slaorhr_col_getrfnp_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, info: *mut integer) {
                dyload_lib().slaorhr_col_getrfnp_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn slapll_(n: *mut integer, x: *mut f32, incx: *mut integer, y: *mut f32, incy: *mut integer, ssmin: *mut f32) {
                dyload_lib().slapll_.unwrap()(n, x, incx, y, incy, ssmin)
            }

pub unsafe fn slapmr_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut f32, ldx: *mut integer, k: *mut integer) {
                dyload_lib().slapmr_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn slapmt_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut f32, ldx: *mut integer, k: *mut integer) {
                dyload_lib().slapmt_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn sla_porfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut f32, ldb: *mut integer, y: *mut f32, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut f32, ayb: *mut f32, dy: *mut f32, y_tail: *mut f32, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().sla_porfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn slaqgb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut f32, ldab: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().slaqgb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn slaqge_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, r: *mut f32, c: *mut f32, rowcnd: *mut f32, colcnd: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().slaqge_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn slaqp2_(m: *mut integer, n: *mut integer, offset: *mut integer, a: *mut f32, lda: *mut integer, jpvt: *mut integer, tau: *mut f32, vn1: *mut f32, vn2: *mut f32, work: *mut f32) {
                dyload_lib().slaqp2_.unwrap()(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work)
            }

pub unsafe fn slaqps_(m: *mut integer, n: *mut integer, offset: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f32, lda: *mut integer, jpvt: *mut integer, tau: *mut f32, vn1: *mut f32, vn2: *mut f32, auxv: *mut f32, f: *mut f32, ldf: *mut integer) {
                dyload_lib().slaqps_.unwrap()(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf)
            }

pub unsafe fn slaqr0_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f32, ldh: *mut integer, wr: *mut f32, wi: *mut f32, iloz: *mut integer, ihiz: *mut integer, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slaqr0_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn slaqr1_(n: *mut integer, h: *mut f32, ldh: *mut integer, sr1: *mut f32, si1: *mut f32, sr2: *mut f32, si2: *mut f32, v: *mut f32) {
                dyload_lib().slaqr1_.unwrap()(n, h, ldh, sr1, si1, sr2, si2, v)
            }

pub unsafe fn slaqr2_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut f32, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut f32, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sr: *mut f32, si: *mut f32, v: *mut f32, ldv: *mut integer, nh: *mut integer, t: *mut f32, ldt: *mut integer, nv: *mut integer, wv: *mut f32, ldwv: *mut integer, work: *mut f32, lwork: *mut integer) {
                dyload_lib().slaqr2_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn slaqr3_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut f32, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut f32, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sr: *mut f32, si: *mut f32, v: *mut f32, ldv: *mut integer, nh: *mut integer, t: *mut f32, ldt: *mut integer, nv: *mut integer, wv: *mut f32, ldwv: *mut integer, work: *mut f32, lwork: *mut integer) {
                dyload_lib().slaqr3_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sr, si, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn slaqr4_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut f32, ldh: *mut integer, wr: *mut f32, wi: *mut f32, iloz: *mut integer, ihiz: *mut integer, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slaqr4_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, wr, wi, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn slaqr5_(wantt: *mut logical, wantz: *mut logical, kacc22: *mut integer, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nshfts: *mut integer, sr: *mut f32, si: *mut f32, h: *mut f32, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut f32, ldz: *mut integer, v: *mut f32, ldv: *mut integer, u: *mut f32, ldu: *mut integer, nv: *mut integer, wv: *mut f32, ldwv: *mut integer, nh: *mut integer, wh: *mut f32, ldwh: *mut integer) {
                dyload_lib().slaqr5_.unwrap()(wantt, wantz, kacc22, n, ktop, kbot, nshfts, sr, si, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)
            }

pub unsafe fn slaqsb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().slaqsb_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, equed)
            }

pub unsafe fn slaqsp_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().slaqsp_.unwrap()(uplo, n, ap, s, scond, amax, equed)
            }

pub unsafe fn slaqsy_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, equed: *mut c_char) {
                dyload_lib().slaqsy_.unwrap()(uplo, n, a, lda, s, scond, amax, equed)
            }

pub unsafe fn slaqtr_(ltran: *mut logical, lfloat: *mut logical, n: *mut integer, t: *mut f32, ldt: *mut integer, b: *mut f32, w: *mut f32, scale: *mut f32, x: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().slaqtr_.unwrap()(ltran, lfloat, n, t, ldt, b, w, scale, x, work, info)
            }

pub unsafe fn slar1v_(n: *mut integer, b1: *mut integer, bn: *mut integer, lambda: *mut f32, d: *mut f32, l: *mut f32, ld: *mut f32, lld: *mut f32, pivmin: *mut f32, gaptol: *mut f32, z: *mut f32, wantnc: *mut logical, negcnt: *mut integer, ztz: *mut f32, mingma: *mut f32, r: *mut integer, isuppz: *mut integer, nrminv: *mut f32, resid: *mut f32, rqcorr: *mut f32, work: *mut f32) {
                dyload_lib().slar1v_.unwrap()(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work)
            }

pub unsafe fn slar2v_(n: *mut integer, x: *mut f32, y: *mut f32, z: *mut f32, incx: *mut integer, c: *mut f32, s: *mut f32, incc: *mut integer) {
                dyload_lib().slar2v_.unwrap()(n, x, y, z, incx, c, s, incc)
            }

pub unsafe fn slarfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, ldwork: *mut integer) {
                dyload_lib().slarfb_.unwrap()(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn slarf_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut f32, incv: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32) {
                dyload_lib().slarf_.unwrap()(side, m, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn slarfg_(n: *mut integer, alpha: *mut f32, x: *mut f32, incx: *mut integer, tau: *mut f32) {
                dyload_lib().slarfg_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn slarfgp_(n: *mut integer, alpha: *mut f32, x: *mut f32, incx: *mut integer, tau: *mut f32) {
                dyload_lib().slarfgp_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn slarft_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut f32, ldv: *mut integer, tau: *mut f32, t: *mut f32, ldt: *mut integer) {
                dyload_lib().slarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn slarfx_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut f32, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32) {
                dyload_lib().slarfx_.unwrap()(side, m, n, v, tau, c, ldc, work)
            }

pub unsafe fn slarfy_(uplo: *mut c_char, n: *mut integer, v: *mut f32, incv: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32) {
                dyload_lib().slarfy_.unwrap()(uplo, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn slargv_(n: *mut integer, x: *mut f32, incx: *mut integer, y: *mut f32, incy: *mut integer, c: *mut f32, incc: *mut integer) {
                dyload_lib().slargv_.unwrap()(n, x, incx, y, incy, c, incc)
            }

pub unsafe fn slarnv_(idist: *mut integer, iseed: *mut integer, n: *mut integer, x: *mut f32) {
                dyload_lib().slarnv_.unwrap()(idist, iseed, n, x)
            }

pub unsafe fn slarra_(n: *mut integer, d: *mut f32, e: *mut f32, e2: *mut f32, spltol: *mut f32, tnrm: *mut f32, nsplit: *mut integer, isplit: *mut integer, info: *mut integer) {
                dyload_lib().slarra_.unwrap()(n, d, e, e2, spltol, tnrm, nsplit, isplit, info)
            }

pub unsafe fn slarrb_(n: *mut integer, d: *mut f32, lld: *mut f32, ifirst: *mut integer, ilast: *mut integer, rtol1: *mut f32, rtol2: *mut f32, offset: *mut integer, w: *mut f32, wgap: *mut f32, werr: *mut f32, work: *mut f32, iwork: *mut integer, pivmin: *mut f32, spdiam: *mut f32, twist: *mut integer, info: *mut integer) {
                dyload_lib().slarrb_.unwrap()(n, d, lld, ifirst, ilast, rtol1, rtol2, offset, w, wgap, werr, work, iwork, pivmin, spdiam, twist, info)
            }

pub unsafe fn slarrc_(jobt: *mut c_char, n: *mut integer, vl: *mut f32, vu: *mut f32, d: *mut f32, e: *mut f32, pivmin: *mut f32, eigcnt: *mut integer, lcnt: *mut integer, rcnt: *mut integer, info: *mut integer) {
                dyload_lib().slarrc_.unwrap()(jobt, n, vl, vu, d, e, pivmin, eigcnt, lcnt, rcnt, info)
            }

pub unsafe fn slarrd_(range: *mut c_char, order: *mut c_char, n: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, gers: *mut f32, reltol: *mut f32, d: *mut f32, e: *mut f32, e2: *mut f32, pivmin: *mut f32, nsplit: *mut integer, isplit: *mut integer, m: *mut integer, w: *mut f32, werr: *mut f32, wl: *mut f32, wu: *mut f32, iblock: *mut integer, indexw: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slarrd_.unwrap()(range, order, n, vl, vu, il, iu, gers, reltol, d, e, e2, pivmin, nsplit, isplit, m, w, werr, wl, wu, iblock, indexw, work, iwork, info)
            }

pub unsafe fn slarre_(range: *mut c_char, n: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, d: *mut f32, e: *mut f32, e2: *mut f32, rtol1: *mut f32, rtol2: *mut f32, spltol: *mut f32, nsplit: *mut integer, isplit: *mut integer, m: *mut integer, w: *mut f32, werr: *mut f32, wgap: *mut f32, iblock: *mut integer, indexw: *mut integer, gers: *mut f32, pivmin: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slarre_.unwrap()(range, n, vl, vu, il, iu, d, e, e2, rtol1, rtol2, spltol, nsplit, isplit, m, w, werr, wgap, iblock, indexw, gers, pivmin, work, iwork, info)
            }

pub unsafe fn slarrf_(n: *mut integer, d: *mut f32, l: *mut f32, ld: *mut f32, clstrt: *mut integer, clend: *mut integer, w: *mut f32, wgap: *mut f32, werr: *mut f32, spdiam: *mut f32, clgapl: *mut f32, clgapr: *mut f32, pivmin: *mut f32, sigma: *mut f32, dplus: *mut f32, lplus: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().slarrf_.unwrap()(n, d, l, ld, clstrt, clend, w, wgap, werr, spdiam, clgapl, clgapr, pivmin, sigma, dplus, lplus, work, info)
            }

pub unsafe fn slarrj_(n: *mut integer, d: *mut f32, e2: *mut f32, ifirst: *mut integer, ilast: *mut integer, rtol: *mut f32, offset: *mut integer, w: *mut f32, werr: *mut f32, work: *mut f32, iwork: *mut integer, pivmin: *mut f32, spdiam: *mut f32, info: *mut integer) {
                dyload_lib().slarrj_.unwrap()(n, d, e2, ifirst, ilast, rtol, offset, w, werr, work, iwork, pivmin, spdiam, info)
            }

pub unsafe fn slarrk_(n: *mut integer, iw: *mut integer, gl: *mut f32, gu: *mut f32, d: *mut f32, e2: *mut f32, pivmin: *mut f32, reltol: *mut f32, w: *mut f32, werr: *mut f32, info: *mut integer) {
                dyload_lib().slarrk_.unwrap()(n, iw, gl, gu, d, e2, pivmin, reltol, w, werr, info)
            }

pub unsafe fn slarrr_(n: *mut integer, d: *mut f32, e: *mut f32, info: *mut integer) {
                dyload_lib().slarrr_.unwrap()(n, d, e, info)
            }

pub unsafe fn slarrv_(n: *mut integer, vl: *mut f32, vu: *mut f32, d: *mut f32, l: *mut f32, pivmin: *mut f32, isplit: *mut integer, m: *mut integer, dol: *mut integer, dou: *mut integer, minrgp: *mut f32, rtol1: *mut f32, rtol2: *mut f32, w: *mut f32, werr: *mut f32, wgap: *mut f32, iblock: *mut integer, indexw: *mut integer, gers: *mut f32, z: *mut f32, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slarrv_.unwrap()(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info)
            }

pub unsafe fn slarscl2_(m: *mut integer, n: *mut integer, d: *mut f32, x: *mut f32, ldx: *mut integer) {
                dyload_lib().slarscl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn slartg_(f: *mut f32, g: *mut f32, cs: *mut f32, sn: *mut f32, r__: *mut f32) {
                dyload_lib().slartg_.unwrap()(f, g, cs, sn, r__)
            }

pub unsafe fn slartgp_(f: *mut f32, g: *mut f32, cs: *mut f32, sn: *mut f32, r__: *mut f32) {
                dyload_lib().slartgp_.unwrap()(f, g, cs, sn, r__)
            }

pub unsafe fn slartgs_(x: *mut f32, y: *mut f32, sigma: *mut f32, cs: *mut f32, sn: *mut f32) {
                dyload_lib().slartgs_.unwrap()(x, y, sigma, cs, sn)
            }

pub unsafe fn slartv_(n: *mut integer, x: *mut f32, incx: *mut integer, y: *mut f32, incy: *mut integer, c: *mut f32, s: *mut f32, incc: *mut integer) {
                dyload_lib().slartv_.unwrap()(n, x, incx, y, incy, c, s, incc)
            }

pub unsafe fn slaruv_(iseed: *mut integer, n: *mut integer, x: *mut f32) {
                dyload_lib().slaruv_.unwrap()(iseed, n, x)
            }

pub unsafe fn slarzb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, ldwork: *mut integer) {
                dyload_lib().slarzb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn slarz_(side: *mut c_char, m: *mut integer, n: *mut integer, l: *mut integer, v: *mut f32, incv: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32) {
                dyload_lib().slarz_.unwrap()(side, m, n, l, v, incv, tau, c, ldc, work)
            }

pub unsafe fn slarzt_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut f32, ldv: *mut integer, tau: *mut f32, t: *mut f32, ldt: *mut integer) {
                dyload_lib().slarzt_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn slas2_(f: *mut f32, g: *mut f32, h: *mut f32, ssmin: *mut f32, ssmax: *mut f32) {
                dyload_lib().slas2_.unwrap()(f, g, h, ssmin, ssmax)
            }

pub unsafe fn slascl2_(m: *mut integer, n: *mut integer, d: *mut f32, x: *mut f32, ldx: *mut integer) {
                dyload_lib().slascl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn slascl_(type_: *mut c_char, kl: *mut integer, ku: *mut integer, cfrom: *mut f32, cto: *mut f32, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().slascl_.unwrap()(type_, kl, ku, cfrom, cto, m, n, a, lda, info)
            }

pub unsafe fn slasd0_(n: *mut integer, sqre: *mut integer, d: *mut f32, e: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, smlsiz: *mut integer, iwork: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().slasd0_.unwrap()(n, sqre, d, e, u, ldu, vt, ldvt, smlsiz, iwork, work, info)
            }

pub unsafe fn slasd1_(nl: *mut integer, nr: *mut integer, sqre: *mut integer, d: *mut f32, alpha: *mut f32, beta: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, idxq: *mut integer, iwork: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().slasd1_.unwrap()(nl, nr, sqre, d, alpha, beta, u, ldu, vt, ldvt, idxq, iwork, work, info)
            }

pub unsafe fn slasd2_(nl: *mut integer, nr: *mut integer, sqre: *mut integer, k: *mut integer, d: *mut f32, z: *mut f32, alpha: *mut f32, beta: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, ldvt: *mut integer, dsigma: *mut f32, u2: *mut f32, ldu2: *mut integer, vt2: *mut f32, ldvt2: *mut integer, idxp: *mut integer, idx: *mut integer, idxc: *mut integer, idxq: *mut integer, coltyp: *mut integer, info: *mut integer) {
                dyload_lib().slasd2_.unwrap()(nl, nr, sqre, k, d, z, alpha, beta, u, ldu, vt, ldvt, dsigma, u2, ldu2, vt2, ldvt2, idxp, idx, idxc, idxq, coltyp, info)
            }

pub unsafe fn slasd3_(nl: *mut integer, nr: *mut integer, sqre: *mut integer, k: *mut integer, d: *mut f32, q: *mut f32, ldq: *mut integer, dsigma: *mut f32, u: *mut f32, ldu: *mut integer, u2: *mut f32, ldu2: *mut integer, vt: *mut f32, ldvt: *mut integer, vt2: *mut f32, ldvt2: *mut integer, idxc: *mut integer, ctot: *mut integer, z: *mut f32, info: *mut integer) {
                dyload_lib().slasd3_.unwrap()(nl, nr, sqre, k, d, q, ldq, dsigma, u, ldu, u2, ldu2, vt, ldvt, vt2, ldvt2, idxc, ctot, z, info)
            }

pub unsafe fn slasd4_(n: *mut integer, i: *mut integer, d: *mut f32, z: *mut f32, delta: *mut f32, rho: *mut f32, sigma: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().slasd4_.unwrap()(n, i, d, z, delta, rho, sigma, work, info)
            }

pub unsafe fn slasd5_(i: *mut integer, d: *mut f32, z: *mut f32, delta: *mut f32, rho: *mut f32, dsigma: *mut f32, work: *mut f32) {
                dyload_lib().slasd5_.unwrap()(i, d, z, delta, rho, dsigma, work)
            }

pub unsafe fn slasd6_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, d: *mut f32, vf: *mut f32, vl: *mut f32, alpha: *mut f32, beta: *mut f32, idxq: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f32, ldgnum: *mut integer, poles: *mut f32, difl: *mut f32, difr: *mut f32, z: *mut f32, k: *mut integer, c: *mut f32, s: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slasd6_.unwrap()(icompq, nl, nr, sqre, d, vf, vl, alpha, beta, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, work, iwork, info)
            }

pub unsafe fn slasd7_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, k: *mut integer, d: *mut f32, z: *mut f32, zw: *mut f32, vf: *mut f32, vfw: *mut f32, vl: *mut f32, vlw: *mut f32, alpha: *mut f32, beta: *mut f32, dsigma: *mut f32, idx: *mut integer, idxp: *mut integer, idxq: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f32, ldgnum: *mut integer, c: *mut f32, s: *mut f32, info: *mut integer) {
                dyload_lib().slasd7_.unwrap()(icompq, nl, nr, sqre, k, d, z, zw, vf, vfw, vl, vlw, alpha, beta, dsigma, idx, idxp, idxq, perm, givptr, givcol, ldgcol, givnum, ldgnum, c, s, info)
            }

pub unsafe fn slasd8_(icompq: *mut integer, k: *mut integer, d: *mut f32, z: *mut f32, vf: *mut f32, vl: *mut f32, difl: *mut f32, difr: *mut f32, lddifr: *mut integer, dsigma: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().slasd8_.unwrap()(icompq, k, d, z, vf, vl, difl, difr, lddifr, dsigma, work, info)
            }

pub unsafe fn slasda_(icompq: *mut integer, smlsiz: *mut integer, n: *mut integer, sqre: *mut integer, d: *mut f32, e: *mut f32, u: *mut f32, ldu: *mut integer, vt: *mut f32, k: *mut integer, difl: *mut f32, difr: *mut f32, z: *mut f32, poles: *mut f32, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, perm: *mut integer, givnum: *mut f32, c: *mut f32, s: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().slasda_.unwrap()(icompq, smlsiz, n, sqre, d, e, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, work, iwork, info)
            }

pub unsafe fn slasdq_(uplo: *mut c_char, sqre: *mut integer, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d: *mut f32, e: *mut f32, vt: *mut f32, ldvt: *mut integer, u: *mut f32, ldu: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().slasdq_.unwrap()(uplo, sqre, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, work, info)
            }

pub unsafe fn slasdt_(n: *mut integer, lvl: *mut integer, nd: *mut integer, inode: *mut integer, ndiml: *mut integer, ndimr: *mut integer, msub: *mut integer) {
                dyload_lib().slasdt_.unwrap()(n, lvl, nd, inode, ndiml, ndimr, msub)
            }

pub unsafe fn slaset_(uplo: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut f32, beta: *mut f32, a: *mut f32, lda: *mut integer) {
                dyload_lib().slaset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
            }

pub unsafe fn slasq1_(n: *mut integer, d: *mut f32, e: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().slasq1_.unwrap()(n, d, e, work, info)
            }

pub unsafe fn slasq2_(n: *mut integer, z: *mut f32, info: *mut integer) {
                dyload_lib().slasq2_.unwrap()(n, z, info)
            }

pub unsafe fn slasq3_(i0: *mut integer, n0: *mut integer, z: *mut f32, pp: *mut integer, dmin: *mut f32, sigma: *mut f32, desig: *mut f32, qmax: *mut f32, nfail: *mut integer, iter: *mut integer, ndiv: *mut integer, ieee: *mut logical, ttype: *mut integer, dmin1: *mut f32, dmin2: *mut f32, dn: *mut f32, dn1: *mut f32, dn2: *mut f32, g: *mut f32, tau: *mut f32) {
                dyload_lib().slasq3_.unwrap()(i0, n0, z, pp, dmin, sigma, desig, qmax, nfail, iter, ndiv, ieee, ttype, dmin1, dmin2, dn, dn1, dn2, g, tau)
            }

pub unsafe fn slasq4_(i0: *mut integer, n0: *mut integer, z: *mut f32, pp: *mut integer, n0in: *mut integer, dmin: *mut f32, dmin1: *mut f32, dmin2: *mut f32, dn: *mut f32, dn1: *mut f32, dn2: *mut f32, tau: *mut f32, ttype: *mut integer, g: *mut f32) {
                dyload_lib().slasq4_.unwrap()(i0, n0, z, pp, n0in, dmin, dmin1, dmin2, dn, dn1, dn2, tau, ttype, g)
            }

pub unsafe fn slasq5_(i0: *mut integer, n0: *mut integer, z: *mut f32, pp: *mut integer, tau: *mut f32, sigma: *mut f32, dmin: *mut f32, dmin1: *mut f32, dmin2: *mut f32, dn: *mut f32, dnm1: *mut f32, dnm2: *mut f32, ieee: *mut logical, eps: *mut f32) {
                dyload_lib().slasq5_.unwrap()(i0, n0, z, pp, tau, sigma, dmin, dmin1, dmin2, dn, dnm1, dnm2, ieee, eps)
            }

pub unsafe fn slasq6_(i0: *mut integer, n0: *mut integer, z: *mut f32, pp: *mut integer, dmin: *mut f32, dmin1: *mut f32, dmin2: *mut f32, dn: *mut f32, dnm1: *mut f32, dnm2: *mut f32) {
                dyload_lib().slasq6_.unwrap()(i0, n0, z, pp, dmin, dmin1, dmin2, dn, dnm1, dnm2)
            }

pub unsafe fn slasr_(side: *mut c_char, pivot: *mut c_char, direct: *mut c_char, m: *mut integer, n: *mut integer, c: *mut f32, s: *mut f32, a: *mut f32, lda: *mut integer) {
                dyload_lib().slasr_.unwrap()(side, pivot, direct, m, n, c, s, a, lda)
            }

pub unsafe fn slasrt_(id: *mut c_char, n: *mut integer, d: *mut f32, info: *mut integer) {
                dyload_lib().slasrt_.unwrap()(id, n, d, info)
            }

pub unsafe fn slassq_(n: *mut integer, x: *mut f32, incx: *mut integer, scale: *mut f32, sumsq: *mut f32) {
                dyload_lib().slassq_.unwrap()(n, x, incx, scale, sumsq)
            }

pub unsafe fn slasv2_(f: *mut f32, g: *mut f32, h: *mut f32, ssmin: *mut f32, ssmax: *mut f32, snr: *mut f32, csr: *mut f32, snl: *mut f32, csl: *mut f32) {
                dyload_lib().slasv2_.unwrap()(f, g, h, ssmin, ssmax, snr, csr, snl, csl)
            }

pub unsafe fn slaswlq_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slaswlq_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn slaswp_(n: *mut integer, a: *mut f32, lda: *mut integer, k1: *mut integer, k2: *mut integer, ipiv: *mut integer, incx: *mut integer) {
                dyload_lib().slaswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
            }

pub unsafe fn slasy2_(ltranl: *mut logical, ltranr: *mut logical, isgn: *mut integer, n1: *mut integer, n2: *mut integer, tl: *mut f32, ldtl: *mut integer, tr: *mut f32, ldtr: *mut integer, b: *mut f32, ldb: *mut integer, scale: *mut f32, x: *mut f32, ldx: *mut integer, xnorm: *mut f32, info: *mut integer) {
                dyload_lib().slasy2_.unwrap()(ltranl, ltranr, isgn, n1, n2, tl, ldtl, tr, ldtr, b, ldb, scale, x, ldx, xnorm, info)
            }

pub unsafe fn sla_syamv_(uplo: *mut integer, n: *mut integer, alpha: *mut f32, a: *mut f32, lda: *mut integer, x: *mut f32, incx: *mut integer, beta: *mut f32, y: *mut f32, incy: *mut integer) {
                dyload_lib().sla_syamv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn slasyf_aa_(uplo: *mut c_char, j1: *mut integer, m: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, h: *mut f32, ldh: *mut integer, work: *mut f32) {
                dyload_lib().slasyf_aa_.unwrap()(uplo, j1, m, nb, a, lda, ipiv, h, ldh, work)
            }

pub unsafe fn slasyf_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, w: *mut f32, ldw: *mut integer, info: *mut integer) {
                dyload_lib().slasyf_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn slasyf_rk_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, w: *mut f32, ldw: *mut integer, info: *mut integer) {
                dyload_lib().slasyf_rk_.unwrap()(uplo, n, nb, kb, a, lda, e, ipiv, w, ldw, info)
            }

pub unsafe fn slasyf_rook_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, w: *mut f32, ldw: *mut integer, info: *mut integer) {
                dyload_lib().slasyf_rook_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn sla_syrfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f32, b: *mut f32, ldb: *mut integer, y: *mut f32, ldy: *mut integer, berr_out: *mut f32, n_norms: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, res: *mut f32, ayb: *mut f32, dy: *mut f32, y_tail: *mut f32, rcond: *mut f32, ithresh: *mut integer, rthresh: *mut f32, dz_ub: *mut f32, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().sla_syrfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn slatbs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, x: *mut f32, scale: *mut f32, cnorm: *mut f32, info: *mut integer) {
                dyload_lib().slatbs_.unwrap()(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info)
            }

pub unsafe fn slatdf_(ijob: *mut integer, n: *mut integer, z: *mut f32, ldz: *mut integer, rhs: *mut f32, rdsum: *mut f32, rdscal: *mut f32, ipiv: *mut integer, jpiv: *mut integer) {
                dyload_lib().slatdf_.unwrap()(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv)
            }

pub unsafe fn slatps_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, ap: *mut f32, x: *mut f32, scale: *mut f32, cnorm: *mut f32, info: *mut integer) {
                dyload_lib().slatps_.unwrap()(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info)
            }

pub unsafe fn slatrd_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, tau: *mut f32, w: *mut f32, ldw: *mut integer) {
                dyload_lib().slatrd_.unwrap()(uplo, n, nb, a, lda, e, tau, w, ldw)
            }

pub unsafe fn slatrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, x: *mut f32, scale: *mut f32, cnorm: *mut f32, info: *mut integer) {
                dyload_lib().slatrs_.unwrap()(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info)
            }

pub unsafe fn slatrz_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32) {
                dyload_lib().slatrz_.unwrap()(m, n, l, a, lda, tau, work)
            }

pub unsafe fn slatsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().slatsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn slatzm_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut f32, incv: *mut integer, tau: *mut f32, c1: *mut f32, c2: *mut f32, ldc: *mut integer, work: *mut f32) {
                dyload_lib().slatzm_.unwrap()(side, m, n, v, incv, tau, c1, c2, ldc, work)
            }

pub unsafe fn slauu2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().slauu2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn slauum_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().slauum_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn sla_wwaddw_(n: *mut integer, x: *mut f32, y: *mut f32, w: *mut f32) {
                dyload_lib().sla_wwaddw_.unwrap()(n, x, y, w)
            }

pub unsafe fn sopmtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ap: *mut f32, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sopmtr_.unwrap()(side, uplo, trans, m, n, ap, tau, c, ldc, work, info)
            }

pub unsafe fn sorbdb1_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x21: *mut f32, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut f32, taup2: *mut f32, tauq1: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb1_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn sorbdb2_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x21: *mut f32, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut f32, taup2: *mut f32, tauq1: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb2_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn sorbdb3_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x21: *mut f32, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut f32, taup2: *mut f32, tauq1: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb3_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn sorbdb4_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x21: *mut f32, ldx21: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut f32, taup2: *mut f32, tauq1: *mut f32, phantom: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb4_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, phantom, work, lwork, info)
            }

pub unsafe fn sorbdb5_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut f32, incx1: *mut integer, x2: *mut f32, incx2: *mut integer, q1: *mut f32, ldq1: *mut integer, q2: *mut f32, ldq2: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb5_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn sorbdb6_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut f32, incx1: *mut integer, x2: *mut f32, incx2: *mut integer, q1: *mut f32, ldq1: *mut integer, q2: *mut f32, ldq2: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb6_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn sorbdb_(trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x12: *mut f32, ldx12: *mut integer, x21: *mut f32, ldx21: *mut integer, x22: *mut f32, ldx22: *mut integer, theta: *mut f32, phi: *mut f32, taup1: *mut f32, taup2: *mut f32, tauq1: *mut f32, tauq2: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorbdb_.unwrap()(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info)
            }

pub unsafe fn sorg2l_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sorg2l_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn sorgl2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sorgl2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn sorg2r_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sorg2r_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn sorgbr_(vect: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sorglq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sorgql_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgql_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sorgqr_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sorgr2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sorgr2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn sorgrq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgrq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sorgtr_(uplo: *mut c_char, m: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sorgtsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorgtsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn sorhr_col_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, t: *mut f32, ldt: *mut integer, d: *mut f32, info: *mut integer) {
                dyload_lib().sorhr_col_.unwrap()(m, n, nb, a, lda, t, ldt, d, info)
            }

pub unsafe fn sorm22_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, n2: *mut integer, q: *mut f32, ldq: *mut integer, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorm22_.unwrap()(side, trans, m, n, n1, n2, q, ldq, c, ldc, work, lwork, info)
            }

pub unsafe fn sorm2l_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sorm2l_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn sorm2r_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sorm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn sormbr_(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormbr_.unwrap()(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn sorml2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sorml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn sormlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn sormql_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormql_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn sormqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn sormr2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sormr2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn sormr3_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sormr3_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn sormrq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormrq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn sormrz_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormrz_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn sormtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn spbcon_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().spbcon_.unwrap()(uplo, n, kd, ab, ldab, anorm, rcond, work, iwork, info)
            }

pub unsafe fn spbequ_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().spbequ_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, info)
            }

pub unsafe fn spbrfs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().spbrfs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn spbstf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, info: *mut integer) {
                dyload_lib().spbstf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn spbsv_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().spbsv_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn spbsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, afb: *mut f32, ldafb: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().spbsvx_.unwrap()(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn spbtf2_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, info: *mut integer) {
                dyload_lib().spbtf2_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn spbtrf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, info: *mut integer) {
                dyload_lib().spbtrf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn spbtrs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().spbtrs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn spftrf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, info: *mut integer) {
                dyload_lib().spftrf_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn spftri_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, info: *mut integer) {
                dyload_lib().spftri_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn spftrs_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().spftrs_.unwrap()(transr, uplo, n, nrhs, a, b, ldb, info)
            }

pub unsafe fn spocon_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().spocon_.unwrap()(uplo, n, a, lda, anorm, rcond, work, iwork, info)
            }

pub unsafe fn spoequb_(n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().spoequb_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn spoequ_(n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().spoequ_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn sporfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sporfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn sporfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sporfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn sposv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sposv_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn sposvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sposvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn sposvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sposvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn spotf2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().spotf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn spotrf2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().spotrf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn spotrf_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().spotrf_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn spotri_(uplo: *mut c_char, n: *mut integer, buff_A: *mut f32, ldim_A: *mut integer, info: *mut integer) {
                dyload_lib().spotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
            }

pub unsafe fn spotrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().spotrs_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn sppcon_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sppcon_.unwrap()(uplo, n, ap, anorm, rcond, work, iwork, info)
            }

pub unsafe fn sppequ_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, s: *mut f32, scond: *mut f32, amax: *mut f32, info: *mut integer) {
                dyload_lib().sppequ_.unwrap()(uplo, n, ap, s, scond, amax, info)
            }

pub unsafe fn spprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, afp: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().spprfs_.unwrap()(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn sppsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sppsv_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn sppsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, afp: *mut f32, equed: *mut c_char, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sppsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn spptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, info: *mut integer) {
                dyload_lib().spptrf_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn spptri_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, info: *mut integer) {
                dyload_lib().spptri_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn spptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().spptrs_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn spstf2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().spstf2_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn spstrf_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().spstrf_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn sptcon_(n: *mut integer, d: *mut f32, e: *mut f32, anorm: *mut f32, rcond: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sptcon_.unwrap()(n, d, e, anorm, rcond, work, info)
            }

pub unsafe fn spteqr_(compz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().spteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn sptrfs_(n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, df: *mut f32, ef: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sptrfs_.unwrap()(n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, info)
            }

pub unsafe fn sptsv_(n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sptsv_.unwrap()(n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn sptsvx_(fact: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, df: *mut f32, ef: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().sptsvx_.unwrap()(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, info)
            }

pub unsafe fn spttrf_(n: *mut integer, d: *mut f32, e: *mut f32, info: *mut integer) {
                dyload_lib().spttrf_.unwrap()(n, d, e, info)
            }

pub unsafe fn spttrs_(n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().spttrs_.unwrap()(n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn sptts2_(n: *mut integer, nrhs: *mut integer, d: *mut f32, e: *mut f32, b: *mut f32, ldb: *mut integer) {
                dyload_lib().sptts2_.unwrap()(n, nrhs, d, e, b, ldb)
            }

pub unsafe fn srscl_(n: *mut integer, sa: *mut f32, sx: *mut f32, incx: *mut integer) {
                dyload_lib().srscl_.unwrap()(n, sa, sx, incx)
            }

pub unsafe fn ssb2st_kernels_(uplo: *mut c_char, wantz: *mut logical, ttype: *mut integer, st: *mut integer, ed: *mut integer, sweep: *mut integer, n: *mut integer, nb: *mut integer, ib: *mut integer, a: *mut f32, lda: *mut integer, v: *mut f32, tau: *mut f32, ldvt: *mut integer, work: *mut f32) {
                dyload_lib().ssb2st_kernels_.unwrap()(uplo, wantz, ttype, st, ed, sweep, n, nb, ib, a, lda, v, tau, ldvt, work)
            }

pub unsafe fn ssbev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssbev_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, info)
            }

pub unsafe fn ssbev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssbev_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, info)
            }

pub unsafe fn ssbevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssbevd_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssbevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssbevd_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssbevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, q: *mut f32, ldq: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().ssbevx_2stage_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn ssbevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, q: *mut f32, ldq: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().ssbevx_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn ssbgst_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f32, ldab: *mut integer, bb: *mut f32, ldbb: *mut integer, x: *mut f32, ldx: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssbgst_.unwrap()(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, info)
            }

pub unsafe fn ssbgv_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f32, ldab: *mut integer, bb: *mut f32, ldbb: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssbgv_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, info)
            }

pub unsafe fn ssbgvd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f32, ldab: *mut integer, bb: *mut f32, ldbb: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssbgvd_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssbgvx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut f32, ldab: *mut integer, bb: *mut f32, ldbb: *mut integer, q: *mut f32, ldq: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().ssbgvx_.unwrap()(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn ssbtrd_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, d: *mut f32, e: *mut f32, q: *mut f32, ldq: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssbtrd_.unwrap()(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info)
            }

pub unsafe fn ssfrk_(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut integer, k: *mut integer, alpha: *mut f32, a: *mut f32, lda: *mut integer, beta: *mut f32, c__: *mut f32) {
                dyload_lib().ssfrk_.unwrap()(transr, uplo, trans, n, k, alpha, a, lda, beta, c__)
            }

pub unsafe fn sspcon_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sspcon_.unwrap()(uplo, n, ap, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn sspev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sspev_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, info)
            }

pub unsafe fn sspevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sspevd_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn sspevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().sspevx_.unwrap()(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn sspgst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, ap: *mut f32, bp: *mut f32, info: *mut integer) {
                dyload_lib().sspgst_.unwrap()(itype, uplo, n, ap, bp, info)
            }

pub unsafe fn sspgvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, bp: *mut f32, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sspgvd_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn sspgv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, bp: *mut f32, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sspgv_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, info)
            }

pub unsafe fn sspgvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, bp: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().sspgvx_.unwrap()(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn ssprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, afp: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssprfs_.unwrap()(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn sspsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().sspsv_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn sspsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, afp: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sspsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, iwork, info)
            }

pub unsafe fn ssptrd_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, d: *mut f32, e: *mut f32, tau: *mut f32, info: *mut integer) {
                dyload_lib().ssptrd_.unwrap()(uplo, n, ap, d, e, tau, info)
            }

pub unsafe fn ssptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().ssptrf_.unwrap()(uplo, n, ap, ipiv, info)
            }

pub unsafe fn ssptri_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, ipiv: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssptri_.unwrap()(uplo, n, ap, ipiv, work, info)
            }

pub unsafe fn ssptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssptrs_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn sstebz_(range: *mut c_char, order: *mut c_char, n: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, d: *mut f32, e: *mut f32, m: *mut integer, nsplit: *mut integer, w: *mut f32, iblock: *mut integer, isplit: *mut integer, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sstebz_.unwrap()(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork, info)
            }

pub unsafe fn sstedc_(compz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sstedc_.unwrap()(compz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn sstegr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sstegr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn sstein_(n: *mut integer, d: *mut f32, e: *mut f32, m: *mut integer, w: *mut f32, iblock: *mut integer, isplit: *mut integer, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().sstein_.unwrap()(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn sstemr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, nzc: *mut integer, isuppz: *mut integer, tryrac: *mut logical, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sstemr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssteqr_(compz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn ssterf_(n: *mut integer, d: *mut f32, e: *mut f32, info: *mut integer) {
                dyload_lib().ssterf_.unwrap()(n, d, e, info)
            }

pub unsafe fn sstev_(jobz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sstev_.unwrap()(jobz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn sstevd_(jobz: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sstevd_.unwrap()(jobz, n, d, e, z, ldz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn sstevr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().sstevr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn sstevx_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f32, e: *mut f32, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().sstevx_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn ssycon_3_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssycon_3_.unwrap()(uplo, n, a, lda, e, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn ssycon_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssycon_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn ssycon_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, anorm: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssycon_rook_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, iwork, info)
            }

pub unsafe fn ssyconv_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssyconv_.unwrap()(uplo, way, n, a, lda, ipiv, work, info)
            }

pub unsafe fn ssyconvf_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().ssyconvf_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn ssyconvf_rook_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().ssyconvf_rook_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn ssyequb_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, s: *mut f32, scond: *mut f32, amax: *mut f32, work: *mut f32, info: *mut integer) {
                dyload_lib().ssyequb_.unwrap()(uplo, n, a, lda, s, scond, amax, work, info)
            }

pub unsafe fn ssyev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyev_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, info)
            }

pub unsafe fn ssyev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, info)
            }

pub unsafe fn ssyevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyevd_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssyevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyevd_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssyevr_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyevr_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssyevr_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, isuppz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyevr_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssyevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().ssyevx_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn ssyevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().ssyevx_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn ssygs2_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssygs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn ssygst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssygst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn ssygv_2stage_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssygv_2stage_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)
            }

pub unsafe fn ssygvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ssygvd_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ssygv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, w: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssygv_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, info)
            }

pub unsafe fn ssygvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, vl: *mut f32, vu: *mut f32, il: *mut integer, iu: *mut integer, abstol: *mut f32, m: *mut integer, w: *mut f32, z: *mut f32, ldz: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().ssygvx_.unwrap()(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, iwork, ifail, info)
            }

pub unsafe fn ssyrfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyrfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn ssyrfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssyrfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn ssysv_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, tb: *mut f32, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysv_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork, info)
            }

pub unsafe fn ssysv_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysv_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn ssysv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysv_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn ssysv_rk_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysv_rk_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn ssysv_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysv_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn ssysvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, ferr: *mut f32, berr: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, iwork, info)
            }

pub unsafe fn ssysvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, af: *mut f32, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, s: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, rcond: *mut f32, rpvgrw: *mut f32, berr: *mut f32, n_err_bnds: *mut integer, err_bnds_norm: *mut f32, err_bnds_comp: *mut f32, nparams: *mut integer, params: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ssysvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, iwork, info)
            }

pub unsafe fn ssyswapr_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, i1: *mut integer, i2: *mut integer) {
                dyload_lib().ssyswapr_.unwrap()(uplo, n, a, lda, i1, i2)
            }

pub unsafe fn ssytd2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, e: *mut f32, tau: *mut f32, info: *mut integer) {
                dyload_lib().ssytd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
            }

pub unsafe fn ssytf2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().ssytf2_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn ssytf2_rk_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().ssytf2_rk_.unwrap()(uplo, n, a, lda, e, ipiv, info)
            }

pub unsafe fn ssytf2_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().ssytf2_rook_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn ssytrd_2stage_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, e: *mut f32, tau: *mut f32, hous2: *mut f32, lhous2: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrd_2stage_.unwrap()(vect, uplo, n, a, lda, d, e, tau, hous2, lhous2, work, lwork, info)
            }

pub unsafe fn ssytrd_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, d: *mut f32, e: *mut f32, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
            }

pub unsafe fn ssytrd_sb2st_(stage1: *mut c_char, vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, d: *mut f32, e: *mut f32, hous: *mut f32, lhous: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrd_sb2st_.unwrap()(stage1, vect, uplo, n, kd, ab, ldab, d, e, hous, lhous, work, lwork, info)
            }

pub unsafe fn ssytrd_sy2sb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, a: *mut f32, lda: *mut integer, ab: *mut f32, ldab: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrd_sy2sb_.unwrap()(uplo, n, kd, a, lda, ab, ldab, tau, work, lwork, info)
            }

pub unsafe fn ssytrf_aa_2stage_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, tb: *mut f32, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrf_aa_2stage_.unwrap()(uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork, info)
            }

pub unsafe fn ssytrf_aa_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrf_aa_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn ssytrf_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrf_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn ssytrf_rk_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrf_rk_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn ssytrf_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrf_rook_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn ssytri2_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytri2_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn ssytri2x_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, nb: *mut integer, info: *mut integer) {
                dyload_lib().ssytri2x_.unwrap()(uplo, n, a, lda, ipiv, work, nb, info)
            }

pub unsafe fn ssytri_3_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytri_3_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn ssytri_3x_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, work: *mut f32, nb: *mut integer, info: *mut integer) {
                dyload_lib().ssytri_3x_.unwrap()(uplo, n, a, lda, e, ipiv, work, nb, info)
            }

pub unsafe fn ssytri_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssytri_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn ssytri_rook_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssytri_rook_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn ssytrs2_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().ssytrs2_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)
            }

pub unsafe fn ssytrs_3_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, e: *mut f32, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssytrs_3_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, info)
            }

pub unsafe fn ssytrs_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, tb: *mut f32, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssytrs_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, info)
            }

pub unsafe fn ssytrs_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ssytrs_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn ssytrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssytrs_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn ssytrs_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, ipiv: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ssytrs_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn stbcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut f32, ldab: *mut integer, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().stbcon_.unwrap()(norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork, info)
            }

pub unsafe fn stbrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().stbrfs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn stbtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut f32, ldab: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().stbtrs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn stfsm_(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut f32, a: *mut f32, b: *mut f32, ldb: *mut integer) {
                dyload_lib().stfsm_.unwrap()(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb)
            }

pub unsafe fn stftri_(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f32, info: *mut integer) {
                dyload_lib().stftri_.unwrap()(transr, uplo, diag, n, a, info)
            }

pub unsafe fn stfttp_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut f32, ap: *mut f32, info: *mut integer) {
                dyload_lib().stfttp_.unwrap()(transr, uplo, n, arf, ap, info)
            }

pub unsafe fn stfttr_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut f32, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().stfttr_.unwrap()(transr, uplo, n, arf, a, lda, info)
            }

pub unsafe fn stgevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, s: *mut f32, lds: *mut integer, p: *mut f32, ldp: *mut integer, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().stgevc_.unwrap()(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, info)
            }

pub unsafe fn stgex2_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, q: *mut f32, ldq: *mut integer, z: *mut f32, ldz: *mut integer, j1: *mut integer, n1: *mut integer, n2: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().stgex2_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, n1, n2, work, lwork, info)
            }

pub unsafe fn stgexc_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, q: *mut f32, ldq: *mut integer, z: *mut f32, ldz: *mut integer, ifst: *mut integer, ilst: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().stgexc_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, work, lwork, info)
            }

pub unsafe fn stgsen_(ijob: *mut integer, wantq: *mut logical, wantz: *mut logical, select: *mut logical, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, alphar: *mut f32, alphai: *mut f32, beta: *mut f32, q: *mut f32, ldq: *mut integer, z: *mut f32, ldz: *mut integer, m: *mut integer, pl: *mut f32, pr: *mut f32, dif: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().stgsen_.unwrap()(ijob, wantq, wantz, select, n, a, lda, b, ldb, alphar, alphai, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)
            }

pub unsafe fn stgsja_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, tola: *mut f32, tolb: *mut f32, alpha: *mut f32, beta: *mut f32, u: *mut f32, ldu: *mut integer, v: *mut f32, ldv: *mut integer, q: *mut f32, ldq: *mut integer, work: *mut f32, ncycle: *mut integer, info: *mut integer) {
                dyload_lib().stgsja_.unwrap()(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info)
            }

pub unsafe fn stgsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, s: *mut f32, dif: *mut f32, mm: *mut integer, m: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().stgsna_.unwrap()(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info)
            }

pub unsafe fn stgsy2_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, c: *mut f32, ldc: *mut integer, d: *mut f32, ldd: *mut integer, e: *mut f32, lde: *mut integer, f: *mut f32, ldf: *mut integer, scale: *mut f32, rdsum: *mut f32, rdscal: *mut f32, iwork: *mut integer, pq: *mut integer, info: *mut integer) {
                dyload_lib().stgsy2_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, iwork, pq, info)
            }

pub unsafe fn stgsyl_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, c: *mut f32, ldc: *mut integer, d: *mut f32, ldd: *mut integer, e: *mut f32, lde: *mut integer, f: *mut f32, ldf: *mut integer, scale: *mut f32, dif: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().stgsyl_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info)
            }

pub unsafe fn stpcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut f32, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().stpcon_.unwrap()(norm, uplo, diag, n, ap, rcond, work, iwork, info)
            }

pub unsafe fn stplqt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, t: *mut f32, ldt: *mut integer, info: *mut integer) {
                dyload_lib().stplqt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn stplqt_(m: *mut integer, n: *mut integer, l: *mut integer, mb: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().stplqt_.unwrap()(m, n, l, mb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn stpmlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, mb: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().stpmlqt_.unwrap()(side, trans, m, n, k, l, mb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn stpmqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, nb: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().stpmqrt_.unwrap()(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn stpqrt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, t: *mut f32, ldt: *mut integer, info: *mut integer) {
                dyload_lib().stpqrt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn stpqrt_(m: *mut integer, n: *mut integer, l: *mut integer, nb: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, t: *mut f32, ldt: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().stpqrt_.unwrap()(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn stprfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut f32, ldv: *mut integer, t: *mut f32, ldt: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, work: *mut f32, ldwork: *mut integer) {
                dyload_lib().stprfb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn stprfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().stprfs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn stptri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut f32, info: *mut integer) {
                dyload_lib().stptri_.unwrap()(uplo, diag, n, ap, info)
            }

pub unsafe fn stptrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut f32, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().stptrs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn stpttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut f32, arf: *mut f32, info: *mut integer) {
                dyload_lib().stpttf_.unwrap()(transr, uplo, n, ap, arf, info)
            }

pub unsafe fn stpttr_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().stpttr_.unwrap()(uplo, n, ap, a, lda, info)
            }

pub unsafe fn strcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, rcond: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().strcon_.unwrap()(norm, uplo, diag, n, a, lda, rcond, work, iwork, info)
            }

pub unsafe fn strevc3_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f32, ldt: *mut integer, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().strevc3_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, lwork, info)
            }

pub unsafe fn strevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f32, ldt: *mut integer, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().strevc_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, info)
            }

pub unsafe fn strexc_(compq: *mut c_char, n: *mut integer, t: *mut f32, ldt: *mut integer, q: *mut f32, ldq: *mut integer, ifst: *mut integer, ilst: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().strexc_.unwrap()(compq, n, t, ldt, q, ldq, ifst, ilst, work, info)
            }

pub unsafe fn strrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, x: *mut f32, ldx: *mut integer, ferr: *mut f32, berr: *mut f32, work: *mut f32, iwork: *mut integer, info: *mut integer) {
                dyload_lib().strrfs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, iwork, info)
            }

pub unsafe fn strsen_(job: *mut c_char, compq: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f32, ldt: *mut integer, q: *mut f32, ldq: *mut integer, wr: *mut f32, wi: *mut f32, m: *mut integer, s: *mut f32, sep: *mut f32, work: *mut f32, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().strsen_.unwrap()(job, compq, select, n, t, ldt, q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info)
            }

pub unsafe fn strsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut f32, ldt: *mut integer, vl: *mut f32, ldvl: *mut integer, vr: *mut f32, ldvr: *mut integer, s: *mut f32, sep: *mut f32, mm: *mut integer, m: *mut integer, work: *mut f32, ldwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().strsna_.unwrap()(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork, info)
            }

pub unsafe fn strsyl_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, c: *mut f32, ldc: *mut integer, scale: *mut f32, info: *mut integer) {
                dyload_lib().strsyl_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
            }

pub unsafe fn strti2_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().strti2_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn strtri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().strtri_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn strtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut f32, lda: *mut integer, b: *mut f32, ldb: *mut integer, info: *mut integer) {
                dyload_lib().strtrs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn strttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, arf: *mut f32, info: *mut integer) {
                dyload_lib().strttf_.unwrap()(transr, uplo, n, a, lda, arf, info)
            }

pub unsafe fn strttp_(uplo: *mut c_char, n: *mut integer, a: *mut f32, lda: *mut integer, ap: *mut f32, info: *mut integer) {
                dyload_lib().strttp_.unwrap()(uplo, n, a, lda, ap, info)
            }

pub unsafe fn stzrqf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, info: *mut integer) {
                dyload_lib().stzrqf_.unwrap()(m, n, a, lda, tau, info)
            }

pub unsafe fn stzrzf_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().stzrzf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zbbcsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, theta: *mut f64, phi: *mut f64, u1: *mut dcomplex, ldu1: *mut integer, u2: *mut dcomplex, ldu2: *mut integer, v1t: *mut dcomplex, ldv1t: *mut integer, v2t: *mut dcomplex, ldv2t: *mut integer, b11d: *mut f64, b11e: *mut f64, b12d: *mut f64, b12e: *mut f64, b21d: *mut f64, b21e: *mut f64, b22d: *mut f64, b22e: *mut f64, rwork: *mut f64, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().zbbcsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork, info)
            }

pub unsafe fn zbdsqr_(uplo: *mut c_char, n: *mut integer, ncvt: *mut integer, nru: *mut integer, ncc: *mut integer, d: *mut f64, e: *mut f64, vt: *mut dcomplex, ldvt: *mut integer, u: *mut dcomplex, ldu: *mut integer, c: *mut dcomplex, ldc: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zbdsqr_.unwrap()(uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldu, c, ldc, rwork, info)
            }

pub unsafe fn zcgesv_(n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, work: *mut dcomplex, swork: *mut scomplex, rwork: *mut f64, iter: *mut integer, info: *mut integer) {
                dyload_lib().zcgesv_.unwrap()(n, nrhs, a, lda, ipiv, b, ldb, x, ldx, work, swork, rwork, iter, info)
            }

pub unsafe fn zcposv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, work: *mut dcomplex, swork: *mut scomplex, rwork: *mut f64, iter: *mut integer, info: *mut integer) {
                dyload_lib().zcposv_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, x, ldx, work, swork, rwork, iter, info)
            }

pub unsafe fn zdrscl_(n: *mut integer, sa: *mut f64, sx: *mut dcomplex, incx: *mut integer) {
                dyload_lib().zdrscl_.unwrap()(n, sa, sx, incx)
            }

pub unsafe fn zgbbrd_(vect: *mut c_char, m: *mut integer, n: *mut integer, ncc: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, d: *mut f64, e: *mut f64, q: *mut dcomplex, ldq: *mut integer, pt: *mut dcomplex, ldpt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgbbrd_.unwrap()(vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldq, pt, ldpt, c, ldc, work, rwork, info)
            }

pub unsafe fn zgbcon_(norm: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgbcon_.unwrap()(norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork, info)
            }

pub unsafe fn zgbequb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zgbequb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn zgbequ_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zgbequ_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn zgbrfs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgbrfs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zgbrfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, r: *mut f64, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgbrfsx_.unwrap()(trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zgbsv_(n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zgbsv_.unwrap()(n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn zgbsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgbsvx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zgbsvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgbsvxx_.unwrap()(fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zgbtf2_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zgbtf2_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn zgbtrf_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zgbtrf_.unwrap()(m, n, kl, ku, ab, ldab, ipiv, info)
            }

pub unsafe fn zgbtrs_(trans: *mut c_char, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zgbtrs_.unwrap()(trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldb, info)
            }

pub unsafe fn zgebak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f64, m: *mut integer, v: *mut dcomplex, ldv: *mut integer, info: *mut integer) {
                dyload_lib().zgebak_.unwrap()(job, side, n, ilo, ihi, scale, m, v, ldv, info)
            }

pub unsafe fn zgebal_(job: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f64, info: *mut integer) {
                dyload_lib().zgebal_.unwrap()(job, n, a, lda, ilo, ihi, scale, info)
            }

pub unsafe fn zgebd2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut f64, e: *mut f64, tauq: *mut dcomplex, taup: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgebd2_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, info)
            }

pub unsafe fn zgebrd_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut f64, e: *mut f64, tauq: *mut dcomplex, taup: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgebrd_.unwrap()(m, n, a, lda, d, e, tauq, taup, work, lwork, info)
            }

pub unsafe fn zgecon_(norm: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgecon_.unwrap()(norm, n, a, lda, anorm, rcond, work, rwork, info)
            }

pub unsafe fn zgeequb_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zgeequb_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn zgeequ_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zgeequ_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, info)
            }

pub unsafe fn zgees_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, n: *mut integer, a: *mut dcomplex, lda: *mut integer, sdim: *mut integer, w: *mut dcomplex, vs: *mut dcomplex, ldvs: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, bwork: *mut logical, info: *mut integer) {
                dyload_lib().zgees_.unwrap()(jobvs, sort, select, n, a, lda, sdim, w, vs, ldvs, work, lwork, rwork, bwork, info)
            }

pub unsafe fn zgeesx_(jobvs: *mut c_char, sort: *mut c_char, select: L_fp, sense: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, sdim: *mut integer, w: *mut dcomplex, vs: *mut dcomplex, ldvs: *mut integer, rconde: *mut f64, rcondv: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, bwork: *mut logical, info: *mut integer) {
                dyload_lib().zgeesx_.unwrap()(jobvs, sort, select, sense, n, a, lda, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork, info)
            }

pub unsafe fn zgeev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, w: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgeev_.unwrap()(jobvl, jobvr, n, a, lda, w, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn zgeevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, w: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, scale: *mut f64, abnrm: *mut f64, rconde: *mut f64, rcondv: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgeevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork, info)
            }

pub unsafe fn zgegs_(jobvsl: *mut c_char, jobvsr: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vsl: *mut dcomplex, ldvsl: *mut integer, vsr: *mut dcomplex, ldvsr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgegs_.unwrap()(jobvsl, jobvsr, n, a, lda, b, ldb, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, info)
            }

pub unsafe fn zgegv_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgegv_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn zgehd2_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgehd2_.unwrap()(n, ilo, ihi, a, lda, tau, work, info)
            }

pub unsafe fn zgehrd_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgehrd_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zgejsv_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, jobr: *mut c_char, jobt: *mut c_char, jobp: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, sva: *mut f64, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, cwork: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zgejsv_.unwrap()(joba, jobu, jobv, jobr, jobt, jobp, m, n, a, lda, sva, u, ldu, v, ldv, cwork, lwork, rwork, lrwork, iwork, info)
            }

pub unsafe fn zgelq2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgelq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn zgelqf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgelqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zgelq_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, tsize: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgelq_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn zgelqt3_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().zgelqt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn zgelqt_(m: *mut integer, n: *mut integer, mb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgelqt_.unwrap()(m, n, mb, a, lda, t, ldt, work, info)
            }

pub unsafe fn zgels_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgels_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn zgelsd_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, s: *mut f64, rcond: *mut f64, rank: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zgelsd_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, iwork, info)
            }

pub unsafe fn zgelss_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, s: *mut f64, rcond: *mut f64, rank: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgelss_.unwrap()(m, n, nrhs, a, lda, b, ldb, s, rcond, rank, work, lwork, rwork, info)
            }

pub unsafe fn zgelsx_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f64, rank: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgelsx_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, rwork, info)
            }

pub unsafe fn zgelsy_(m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, jpvt: *mut integer, rcond: *mut f64, rank: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgelsy_.unwrap()(m, n, nrhs, a, lda, b, ldb, jpvt, rcond, rank, work, lwork, rwork, info)
            }

pub unsafe fn zgemlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, tsize: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgemlq_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn zgemlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgemlqt_.unwrap()(side, trans, m, n, k, mb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn zgemqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, tsize: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgemqr_.unwrap()(side, trans, m, n, k, a, lda, t, tsize, c, ldc, work, lwork, info)
            }

pub unsafe fn zgemqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, nb: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgemqrt_.unwrap()(side, trans, m, n, k, nb, v, ldv, t, ldt, c, ldc, work, info)
            }

pub unsafe fn zgeql2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgeql2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn zgeqlf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgeqlf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zgeqp3_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgeqp3_.unwrap()(m, n, a, lda, jpvt, tau, work, lwork, rwork, info)
            }

pub unsafe fn zgeqpf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgeqpf_.unwrap()(m, n, a, lda, jpvt, tau, work, rwork, info)
            }

pub unsafe fn zgeqr2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgeqr2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn zgeqr2p_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgeqr2p_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn zgeqrf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgeqrf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zgeqrfp_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgeqrfp_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zgeqr_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, tsize: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgeqr_.unwrap()(m, n, a, lda, t, tsize, work, lwork, info)
            }

pub unsafe fn zgeqrt2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().zgeqrt2_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn zgeqrt3_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().zgeqrt3_.unwrap()(m, n, a, lda, t, ldt, info)
            }

pub unsafe fn zgeqrt_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgeqrt_.unwrap()(m, n, nb, a, lda, t, ldt, work, info)
            }

pub unsafe fn zgerfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgerfs_.unwrap()(trans, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zgerfsx_(trans: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, r: *mut f64, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgerfsx_.unwrap()(trans, equed, n, nrhs, a, lda, af, ldaf, ipiv, r, c, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zgerq2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgerq2_.unwrap()(m, n, a, lda, tau, work, info)
            }

pub unsafe fn zgerqf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgerqf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zgesc2_(n: *mut integer, a: *mut dcomplex, lda: *mut integer, rhs: *mut dcomplex, ipiv: *mut integer, jpiv: *mut integer, scale: *mut f64) {
                dyload_lib().zgesc2_.unwrap()(n, a, lda, rhs, ipiv, jpiv, scale)
            }

pub unsafe fn zgesdd_(jobz: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, u: *mut dcomplex, ldu: *mut integer, vt: *mut dcomplex, ldvt: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zgesdd_.unwrap()(jobz, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info)
            }

pub unsafe fn zgesvd_(jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, u: *mut dcomplex, ldu: *mut integer, vt: *mut dcomplex, ldvt: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgesvd_.unwrap()(jobu, jobv, m, n, a, lda, s, u, ldu, vt, ldvt, work, lwork, rwork, info)
            }

pub unsafe fn zgesvdq_(joba: *mut c_char, jobp: *mut c_char, jobr: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, numrank: *mut integer, iwork: *mut integer, liwork: *mut integer, cwork: *mut dcomplex, lcwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().zgesvdq_.unwrap()(joba, jobp, jobr, jobu, jobv, m, n, a, lda, s, u, ldu, v, ldv, numrank, iwork, liwork, cwork, lcwork, rwork, lrwork, info)
            }

pub unsafe fn zgesvdx_(jobu: *mut c_char, jobvt: *mut c_char, range: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, ns: *mut integer, s: *mut f64, u: *mut dcomplex, ldu: *mut integer, vt: *mut dcomplex, ldvt: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zgesvdx_.unwrap()(jobu, jobvt, range, m, n, a, lda, vl, vu, il, iu, ns, s, u, ldu, vt, ldvt, work, lwork, rwork, iwork, info)
            }

pub unsafe fn zgesv_(n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zgesv_.unwrap()(n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn zgesvj_(joba: *mut c_char, jobu: *mut c_char, jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, sva: *mut f64, mv: *mut integer, v: *mut dcomplex, ldv: *mut integer, cwork: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().zgesvj_.unwrap()(joba, jobu, jobv, m, n, a, lda, sva, mv, v, ldv, cwork, lwork, rwork, lrwork, info)
            }

pub unsafe fn zgesvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgesvx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zgesvxx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, r: *mut f64, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgesvxx_.unwrap()(fact, trans, n, nrhs, a, lda, af, ldaf, ipiv, equed, r, c, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zgetc2_(n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, jpiv: *mut integer, info: *mut integer) {
                dyload_lib().zgetc2_.unwrap()(n, a, lda, ipiv, jpiv, info)
            }

pub unsafe fn zgetf2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zgetf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn zgetrf2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zgetrf2_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn zgetrf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zgetrf_.unwrap()(m, n, a, lda, ipiv, info)
            }

pub unsafe fn zgetri_(n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgetri_.unwrap()(n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zgetrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zgetrs_.unwrap()(trans, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn zgetsls_(trans: *mut c_char, m: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgetsls_.unwrap()(trans, m, n, nrhs, a, lda, b, ldb, work, lwork, info)
            }

pub unsafe fn zggbak_(job: *mut c_char, side: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f64, rscale: *mut f64, m: *mut integer, v: *mut dcomplex, ldv: *mut integer, info: *mut integer) {
                dyload_lib().zggbak_.unwrap()(job, side, n, ilo, ihi, lscale, rscale, m, v, ldv, info)
            }

pub unsafe fn zggbal_(job: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f64, rscale: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().zggbal_.unwrap()(job, n, a, lda, b, ldb, ilo, ihi, lscale, rscale, work, info)
            }

pub unsafe fn zgges3_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, sdim: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vsl: *mut dcomplex, ldvsl: *mut integer, vsr: *mut dcomplex, ldvsr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, bwork: *mut logical, info: *mut integer) {
                dyload_lib().zgges3_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info)
            }

pub unsafe fn zgges_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, sdim: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vsl: *mut dcomplex, ldvsl: *mut integer, vsr: *mut dcomplex, ldvsr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, bwork: *mut logical, info: *mut integer) {
                dyload_lib().zgges_.unwrap()(jobvsl, jobvsr, sort, selctg, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork, info)
            }

pub unsafe fn zggesx_(jobvsl: *mut c_char, jobvsr: *mut c_char, sort: *mut c_char, selctg: L_fp, sense: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, sdim: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vsl: *mut dcomplex, ldvsl: *mut integer, vsr: *mut dcomplex, ldvsr: *mut integer, rconde: *mut f64, rcondv: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, liwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().zggesx_.unwrap()(jobvsl, jobvsr, sort, selctg, sense, n, a, lda, b, ldb, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork, info)
            }

pub unsafe fn zggev3_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zggev3_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn zggev_(jobvl: *mut c_char, jobvr: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zggev_.unwrap()(jobvl, jobvr, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork, info)
            }

pub unsafe fn zggevx_(balanc: *mut c_char, jobvl: *mut c_char, jobvr: *mut c_char, sense: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, ilo: *mut integer, ihi: *mut integer, lscale: *mut f64, rscale: *mut f64, abnrm: *mut f64, bbnrm: *mut f64, rconde: *mut f64, rcondv: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, bwork: *mut logical, info: *mut integer) {
                dyload_lib().zggevx_.unwrap()(balanc, jobvl, jobvr, sense, n, a, lda, b, ldb, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork, info)
            }

pub unsafe fn zggglm_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, d: *mut dcomplex, x: *mut dcomplex, y: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zggglm_.unwrap()(n, m, p, a, lda, b, ldb, d, x, y, work, lwork, info)
            }

pub unsafe fn zgghd3_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, q: *mut dcomplex, ldq: *mut integer, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgghd3_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, work, lwork, info)
            }

pub unsafe fn zgghrd_(compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, q: *mut dcomplex, ldq: *mut integer, z: *mut dcomplex, ldz: *mut integer, info: *mut integer) {
                dyload_lib().zgghrd_.unwrap()(compq, compz, n, ilo, ihi, a, lda, b, ldb, q, ldq, z, ldz, info)
            }

pub unsafe fn zgglse_(m: *mut integer, n: *mut integer, p: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, c: *mut dcomplex, d: *mut dcomplex, x: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgglse_.unwrap()(m, n, p, a, lda, b, ldb, c, d, x, work, lwork, info)
            }

pub unsafe fn zggqrf_(n: *mut integer, m: *mut integer, p: *mut integer, a: *mut dcomplex, lda: *mut integer, taua: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, taub: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zggqrf_.unwrap()(n, m, p, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn zggrqf_(m: *mut integer, p: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, taua: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, taub: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zggrqf_.unwrap()(m, p, n, a, lda, taua, b, ldb, taub, work, lwork, info)
            }

pub unsafe fn zggsvd3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut f64, beta: *mut f64, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, q: *mut dcomplex, ldq: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zggsvd3_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, lwork, rwork, iwork, info)
            }

pub unsafe fn zggsvd_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, n: *mut integer, p: *mut integer, k: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut f64, beta: *mut f64, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, q: *mut dcomplex, ldq: *mut integer, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zggsvd_.unwrap()(jobu, jobv, jobq, m, n, p, k, l, a, lda, b, ldb, alpha, beta, u, ldu, v, ldv, q, ldq, work, rwork, iwork, info)
            }

pub unsafe fn zggsvp3_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, tola: *mut f64, tolb: *mut f64, k: *mut integer, l: *mut integer, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, q: *mut dcomplex, ldq: *mut integer, iwork: *mut integer, rwork: *mut f64, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zggsvp3_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, lwork, info)
            }

pub unsafe fn zggsvp_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, tola: *mut f64, tolb: *mut f64, k: *mut integer, l: *mut integer, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, q: *mut dcomplex, ldq: *mut integer, iwork: *mut integer, rwork: *mut f64, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zggsvp_.unwrap()(jobu, jobv, jobq, m, p, n, a, lda, b, ldb, tola, tolb, k, l, u, ldu, v, ldv, q, ldq, iwork, rwork, tau, work, info)
            }

pub unsafe fn zgsvj0_(jobv: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut dcomplex, sva: *mut f64, mv: *mut integer, v: *mut dcomplex, ldv: *mut integer, eps: *mut f64, sfmin: *mut f64, tol: *mut f64, nsweep: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgsvj0_.unwrap()(jobv, m, n, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn zgsvj1_(jobv: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut dcomplex, sva: *mut f64, mv: *mut integer, v: *mut dcomplex, ldv: *mut integer, eps: *mut f64, sfmin: *mut f64, tol: *mut f64, nsweep: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zgsvj1_.unwrap()(jobv, m, n, n1, a, lda, d, sva, mv, v, ldv, eps, sfmin, tol, nsweep, work, lwork, info)
            }

pub unsafe fn zgtcon_(norm: *mut c_char, n: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, du2: *mut dcomplex, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zgtcon_.unwrap()(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zgtrfs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, dlf: *mut dcomplex, df: *mut dcomplex, duf: *mut dcomplex, du2: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgtrfs_.unwrap()(trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zgtsv_(n: *mut integer, nrhs: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zgtsv_.unwrap()(n, nrhs, dl, d, du, b, ldb, info)
            }

pub unsafe fn zgtsvx_(fact: *mut c_char, trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, dlf: *mut dcomplex, df: *mut dcomplex, duf: *mut dcomplex, du2: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zgtsvx_.unwrap()(fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zgttrf_(n: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, du2: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zgttrf_.unwrap()(n, dl, d, du, du2, ipiv, info)
            }

pub unsafe fn zgttrs_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, du2: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zgttrs_.unwrap()(trans, n, nrhs, dl, d, du, du2, ipiv, b, ldb, info)
            }

pub unsafe fn zgtts2_(itrans: *mut integer, n: *mut integer, nrhs: *mut integer, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, du2: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer) {
                dyload_lib().zgtts2_.unwrap()(itrans, n, nrhs, dl, d, du, du2, ipiv, b, ldb)
            }

pub unsafe fn zhb2st_kernels_(uplo: *mut c_char, wantz: *mut logical, ttype: *mut integer, st: *mut integer, ed: *mut integer, sweep: *mut integer, n: *mut integer, nb: *mut integer, ib: *mut integer, a: *mut dcomplex, lda: *mut integer, v: *mut dcomplex, tau: *mut dcomplex, ldvt: *mut integer, work: *mut dcomplex) {
                dyload_lib().zhb2st_kernels_.unwrap()(uplo, wantz, ttype, st, ed, sweep, n, nb, ib, a, lda, v, tau, ldvt, work)
            }

pub unsafe fn zhbev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhbev_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, info)
            }

pub unsafe fn zhbev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhbev_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, rwork, info)
            }

pub unsafe fn zhbevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zhbevd_2stage_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zhbevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zhbevd_.unwrap()(jobz, uplo, n, kd, ab, ldab, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zhbevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, q: *mut dcomplex, ldq: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zhbevx_2stage_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn zhbevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, q: *mut dcomplex, ldq: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zhbevx_.unwrap()(jobz, range, uplo, n, kd, ab, ldab, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn zhbgst_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut dcomplex, ldab: *mut integer, bb: *mut dcomplex, ldbb: *mut integer, x: *mut dcomplex, ldx: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhbgst_.unwrap()(vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldx, work, rwork, info)
            }

pub unsafe fn zhbgv_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut dcomplex, ldab: *mut integer, bb: *mut dcomplex, ldbb: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhbgv_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, rwork, info)
            }

pub unsafe fn zhbgvd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut dcomplex, ldab: *mut integer, bb: *mut dcomplex, ldbb: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zhbgvd_.unwrap()(jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zhbgvx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ka: *mut integer, kb: *mut integer, ab: *mut dcomplex, ldab: *mut integer, bb: *mut dcomplex, ldbb: *mut integer, q: *mut dcomplex, ldq: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zhbgvx_.unwrap()(jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldq, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn zhbtrd_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, d: *mut f64, e: *mut f64, q: *mut dcomplex, ldq: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhbtrd_.unwrap()(vect, uplo, n, kd, ab, ldab, d, e, q, ldq, work, info)
            }

pub unsafe fn zhecon_3_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhecon_3_.unwrap()(uplo, n, a, lda, e, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zhecon_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhecon_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zhecon_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhecon_rook_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zheequb_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zheequb_.unwrap()(uplo, n, a, lda, s, scond, amax, work, info)
            }

pub unsafe fn zheev_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zheev_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
            }

pub unsafe fn zheev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zheev_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, info)
            }

pub unsafe fn zheevd_2stage_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zheevd_2stage_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zheevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zheevd_.unwrap()(jobz, uplo, n, a, lda, w, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zheevr_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zheevr_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zheevr_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zheevr_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zheevx_2stage_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zheevx_2stage_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn zheevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zheevx_.unwrap()(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn zhegs2_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhegs2_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn zhegst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhegst_.unwrap()(itype, uplo, n, a, lda, b, ldb, info)
            }

pub unsafe fn zhegv_2stage_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhegv_2stage_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info)
            }

pub unsafe fn zhegvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zhegvd_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zhegv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, w: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhegv_.unwrap()(itype, jobz, uplo, n, a, lda, b, ldb, w, work, lwork, rwork, info)
            }

pub unsafe fn zhegvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zhegvx_.unwrap()(itype, jobz, range, uplo, n, a, lda, b, ldb, vl, vu, il, iu, abstol, m, w, z, ldz, work, lwork, rwork, iwork, ifail, info)
            }

pub unsafe fn zherfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zherfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zherfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zherfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zhesv_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, tb: *mut dcomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhesv_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork, info)
            }

pub unsafe fn zhesv_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhesv_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zhesv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhesv_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zhesv_rk_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhesv_rk_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zhesv_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhesv_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zhesvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhesvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info)
            }

pub unsafe fn zhesvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhesvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zheswapr_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, i1: *mut integer, i2: *mut integer) {
                dyload_lib().zheswapr_.unwrap()(uplo, n, a, lda, i1, i2)
            }

pub unsafe fn zhetd2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut f64, e: *mut f64, tau: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhetd2_.unwrap()(uplo, n, a, lda, d, e, tau, info)
            }

pub unsafe fn zhetf2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zhetf2_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn zhetf2_rk_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zhetf2_rk_.unwrap()(uplo, n, a, lda, e, ipiv, info)
            }

pub unsafe fn zhetf2_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zhetf2_rook_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn zhetrd_2stage_(vect: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut f64, e: *mut f64, tau: *mut dcomplex, hous2: *mut dcomplex, lhous2: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrd_2stage_.unwrap()(vect, uplo, n, a, lda, d, e, tau, hous2, lhous2, work, lwork, info)
            }

pub unsafe fn zhetrd_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut f64, e: *mut f64, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrd_.unwrap()(uplo, n, a, lda, d, e, tau, work, lwork, info)
            }

pub unsafe fn zhetrd_hb2st_(stage1: *mut c_char, vect: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, d: *mut f64, e: *mut f64, hous: *mut dcomplex, lhous: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrd_hb2st_.unwrap()(stage1, vect, uplo, n, kd, ab, ldab, d, e, hous, lhous, work, lwork, info)
            }

pub unsafe fn zhetrd_he2hb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, a: *mut dcomplex, lda: *mut integer, ab: *mut dcomplex, ldab: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrd_he2hb_.unwrap()(uplo, n, kd, a, lda, ab, ldab, tau, work, lwork, info)
            }

pub unsafe fn zhetrf_aa_2stage_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tb: *mut dcomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrf_aa_2stage_.unwrap()(uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork, info)
            }

pub unsafe fn zhetrf_aa_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrf_aa_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zhetrf_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrf_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zhetrf_rk_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrf_rk_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn zhetrf_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrf_rook_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zhetri2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetri2_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zhetri2x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().zhetri2x_.unwrap()(uplo, n, a, lda, ipiv, work, nb, info)
            }

pub unsafe fn zhetri_3_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetri_3_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn zhetri_3x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().zhetri_3x_.unwrap()(uplo, n, a, lda, e, ipiv, work, nb, info)
            }

pub unsafe fn zhetri_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhetri_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn zhetri_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhetri_rook_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn zhetrs2_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhetrs2_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)
            }

pub unsafe fn zhetrs_3_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhetrs_3_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, info)
            }

pub unsafe fn zhetrs_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, tb: *mut dcomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhetrs_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, info)
            }

pub unsafe fn zhetrs_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhetrs_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zhetrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhetrs_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn zhetrs_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhetrs_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn zhfrk_(transr: *mut c_char, uplo: *mut c_char, trans: *mut c_char, n: *mut integer, k: *mut integer, alpha: *mut f64, a: *mut dcomplex, lda: *mut integer, beta: *mut f64, c__: *mut dcomplex) {
                dyload_lib().zhfrk_.unwrap()(transr, uplo, trans, n, k, alpha, a, lda, beta, c__)
            }

pub unsafe fn zhgeqz_(job: *mut c_char, compq: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut dcomplex, ldh: *mut integer, t: *mut dcomplex, ldt: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, q: *mut dcomplex, ldq: *mut integer, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhgeqz_.unwrap()(job, compq, compz, n, ilo, ihi, h, ldh, t, ldt, alpha, beta, q, ldq, z, ldz, work, lwork, rwork, info)
            }

pub unsafe fn zhpcon_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhpcon_.unwrap()(uplo, n, ap, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zhpev_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhpev_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, rwork, info)
            }

pub unsafe fn zhpevd_(jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zhpevd_.unwrap()(jobz, uplo, n, ap, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zhpevx_(jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zhpevx_.unwrap()(jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn zhpgst_(itype: *mut integer, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, bp: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhpgst_.unwrap()(itype, uplo, n, ap, bp, info)
            }

pub unsafe fn zhpgvd_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, bp: *mut dcomplex, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zhpgvd_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zhpgv_(itype: *mut integer, jobz: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, bp: *mut dcomplex, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhpgv_.unwrap()(itype, jobz, uplo, n, ap, bp, w, z, ldz, work, rwork, info)
            }

pub unsafe fn zhpgvx_(itype: *mut integer, jobz: *mut c_char, range: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, bp: *mut dcomplex, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zhpgvx_.unwrap()(itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldz, work, rwork, iwork, ifail, info)
            }

pub unsafe fn zhprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, afp: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhprfs_.unwrap()(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zhpsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhpsv_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn zhpsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, afp: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zhpsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zhptrd_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, d: *mut f64, e: *mut f64, tau: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhptrd_.unwrap()(uplo, n, ap, d, e, tau, info)
            }

pub unsafe fn zhptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zhptrf_.unwrap()(uplo, n, ap, ipiv, info)
            }

pub unsafe fn zhptri_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zhptri_.unwrap()(uplo, n, ap, ipiv, work, info)
            }

pub unsafe fn zhptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zhptrs_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn zhsein_(side: *mut c_char, eigsrc: *mut c_char, initv: *mut c_char, select: *mut logical, n: *mut integer, h: *mut dcomplex, ldh: *mut integer, w: *mut dcomplex, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut dcomplex, rwork: *mut f64, ifaill: *mut integer, ifailr: *mut integer, info: *mut integer) {
                dyload_lib().zhsein_.unwrap()(side, eigsrc, initv, select, n, h, ldh, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr, info)
            }

pub unsafe fn zhseqr_(job: *mut c_char, compz: *mut c_char, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut dcomplex, ldh: *mut integer, w: *mut dcomplex, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zhseqr_.unwrap()(job, compz, n, ilo, ihi, h, ldh, w, z, ldz, work, lwork, info)
            }

pub unsafe fn zlabrd_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut f64, e: *mut f64, tauq: *mut dcomplex, taup: *mut dcomplex, x: *mut dcomplex, ldx: *mut integer, y: *mut dcomplex, ldy: *mut integer) {
                dyload_lib().zlabrd_.unwrap()(m, n, nb, a, lda, d, e, tauq, taup, x, ldx, y, ldy)
            }

pub unsafe fn zlacgv_(n: *mut integer, x: *mut dcomplex, incx: *mut integer) {
                dyload_lib().zlacgv_.unwrap()(n, x, incx)
            }

pub unsafe fn zlacn2_(n: *mut integer, v: *mut dcomplex, x: *mut dcomplex, est: *mut f64, kase: *mut integer, isave: *mut integer) {
                dyload_lib().zlacn2_.unwrap()(n, v, x, est, kase, isave)
            }

pub unsafe fn zlacon_(n: *mut integer, v: *mut dcomplex, x: *mut dcomplex, est: *mut f64, kase: *mut integer) {
                dyload_lib().zlacon_.unwrap()(n, v, x, est, kase)
            }

pub unsafe fn zlacp2_(uplo: *mut c_char, m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer) {
                dyload_lib().zlacp2_.unwrap()(uplo, m, n, a, lda, b, ldb)
            }

pub unsafe fn zlacpy_(uplo: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer) {
                dyload_lib().zlacpy_.unwrap()(uplo, m, n, a, lda, b, ldb)
            }

pub unsafe fn zlacrm_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut f64, ldb: *mut integer, c: *mut dcomplex, ldc: *mut integer, rwork: *mut f64) {
                dyload_lib().zlacrm_.unwrap()(m, n, a, lda, b, ldb, c, ldc, rwork)
            }

pub unsafe fn zlacrt_(n: *mut integer, cx: *mut dcomplex, incx: *mut integer, cy: *mut dcomplex, incy: *mut integer, c: *mut dcomplex, s: *mut dcomplex) {
                dyload_lib().zlacrt_.unwrap()(n, cx, incx, cy, incy, c, s)
            }

pub unsafe fn zlaed0_(qsiz: *mut integer, n: *mut integer, d: *mut f64, e: *mut f64, q: *mut dcomplex, ldq: *mut integer, qstore: *mut dcomplex, ldqs: *mut integer, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zlaed0_.unwrap()(qsiz, n, d, e, q, ldq, qstore, ldqs, rwork, iwork, info)
            }

pub unsafe fn zlaed7_(n: *mut integer, cutpnt: *mut integer, qsiz: *mut integer, tlvls: *mut integer, curlvl: *mut integer, curpbm: *mut integer, d: *mut f64, q: *mut dcomplex, ldq: *mut integer, rho: *mut f64, indxq: *mut integer, qstore: *mut f64, qptr: *mut integer, prmptr: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f64, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zlaed7_.unwrap()(n, cutpnt, qsiz, tlvls, curlvl, curpbm, d, q, ldq, rho, indxq, qstore, qptr, prmptr, perm, givptr, givcol, givnum, work, rwork, iwork, info)
            }

pub unsafe fn zlaed8_(k: *mut integer, n: *mut integer, qsiz: *mut integer, q: *mut dcomplex, ldq: *mut integer, d: *mut f64, rho: *mut f64, cutpnt: *mut integer, z: *mut f64, dlamda: *mut f64, q2: *mut dcomplex, ldq2: *mut integer, w: *mut f64, indxp: *mut integer, indx: *mut integer, indxq: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, givnum: *mut f64, info: *mut integer) {
                dyload_lib().zlaed8_.unwrap()(k, n, qsiz, q, ldq, d, rho, cutpnt, z, dlamda, q2, ldq2, w, indxp, indx, indxq, perm, givptr, givcol, givnum, info)
            }

pub unsafe fn zlaein_(rightv: *mut logical, noinit: *mut logical, n: *mut integer, h: *mut dcomplex, ldh: *mut integer, w: *mut dcomplex, v: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, rwork: *mut f64, eps3: *mut f64, smlnum: *mut f64, info: *mut integer) {
                dyload_lib().zlaein_.unwrap()(rightv, noinit, n, h, ldh, w, v, b, ldb, rwork, eps3, smlnum, info)
            }

pub unsafe fn zlaesy_(a: *mut dcomplex, b: *mut dcomplex, c: *mut dcomplex, rt1: *mut dcomplex, rt2: *mut dcomplex, evscal: *mut dcomplex, cs1: *mut dcomplex, sn1: *mut dcomplex) {
                dyload_lib().zlaesy_.unwrap()(a, b, c, rt1, rt2, evscal, cs1, sn1)
            }

pub unsafe fn zlaev2_(a: *mut dcomplex, b: *mut dcomplex, c: *mut dcomplex, rt1: *mut f64, rt2: *mut f64, cs1: *mut f64, sn1: *mut dcomplex) {
                dyload_lib().zlaev2_.unwrap()(a, b, c, rt1, rt2, cs1, sn1)
            }

pub unsafe fn zlag2c_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, sa: *mut scomplex, ldsa: *mut integer, info: *mut integer) {
                dyload_lib().zlag2c_.unwrap()(m, n, a, lda, sa, ldsa, info)
            }

pub unsafe fn zla_gbamv_(trans: *mut integer, m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, alpha: *mut f64, ab: *mut dcomplex, ldab: *mut integer, x: *mut dcomplex, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().zla_gbamv_.unwrap()(trans, m, n, kl, ku, alpha, ab, ldab, x, incx, beta, y, incy)
            }

pub unsafe fn zla_gbrfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, y: *mut dcomplex, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut dcomplex, ayb: *mut f64, dy: *mut dcomplex, y_tail: *mut dcomplex, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().zla_gbrfsx_extended_.unwrap()(prec_type, trans_type, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn zla_geamv_(trans: *mut integer, m: *mut integer, n: *mut integer, alpha: *mut f64, a: *mut dcomplex, lda: *mut integer, x: *mut dcomplex, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().zla_geamv_.unwrap()(trans, m, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn zla_gerfsx_extended_(prec_type: *mut integer, trans_type: *mut integer, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, y: *mut dcomplex, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, errs_n: *mut f64, errs_c: *mut f64, res: *mut dcomplex, ayb: *mut f64, dy: *mut dcomplex, y_tail: *mut dcomplex, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().zla_gerfsx_extended_.unwrap()(prec_type, trans_type, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, errs_n, errs_c, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn zlags2_(upper: *mut logical, a1: *mut f64, a2: *mut dcomplex, a3: *mut f64, b1: *mut f64, b2: *mut dcomplex, b3: *mut f64, csu: *mut f64, snu: *mut dcomplex, csv: *mut f64, snv: *mut dcomplex, csq: *mut f64, snq: *mut dcomplex) {
                dyload_lib().zlags2_.unwrap()(upper, a1, a2, a3, b1, b2, b3, csu, snu, csv, snv, csq, snq)
            }

pub unsafe fn zlagtm_(trans: *mut c_char, n: *mut integer, nrhs: *mut integer, alpha: *mut f64, dl: *mut dcomplex, d: *mut dcomplex, du: *mut dcomplex, x: *mut dcomplex, ldx: *mut integer, beta: *mut f64, b: *mut dcomplex, ldb: *mut integer) {
                dyload_lib().zlagtm_.unwrap()(trans, n, nrhs, alpha, dl, d, du, x, ldx, beta, b, ldb)
            }

pub unsafe fn zla_heamv_(uplo: *mut integer, n: *mut integer, alpha: *mut f64, a: *mut dcomplex, lda: *mut integer, x: *mut dcomplex, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().zla_heamv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn zlahef_aa_(uplo: *mut c_char, j1: *mut integer, m: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, h: *mut dcomplex, ldh: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlahef_aa_.unwrap()(uplo, j1, m, nb, a, lda, ipiv, h, ldh, work)
            }

pub unsafe fn zlahef_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, w: *mut dcomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().zlahef_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn zlahef_rk_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, w: *mut dcomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().zlahef_rk_.unwrap()(uplo, n, nb, kb, a, lda, e, ipiv, w, ldw, info)
            }

pub unsafe fn zlahef_rook_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, w: *mut dcomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().zlahef_rook_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn zla_herfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, y: *mut dcomplex, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut dcomplex, ayb: *mut f64, dy: *mut dcomplex, y_tail: *mut dcomplex, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().zla_herfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn zlahqr_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut dcomplex, ldh: *mut integer, w: *mut dcomplex, iloz: *mut integer, ihiz: *mut integer, z: *mut dcomplex, ldz: *mut integer, info: *mut integer) {
                dyload_lib().zlahqr_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, info)
            }

pub unsafe fn zlahr2_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, t: *mut dcomplex, ldt: *mut integer, y: *mut dcomplex, ldy: *mut integer) {
                dyload_lib().zlahr2_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn zlahrd_(n: *mut integer, k: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, t: *mut dcomplex, ldt: *mut integer, y: *mut dcomplex, ldy: *mut integer) {
                dyload_lib().zlahrd_.unwrap()(n, k, nb, a, lda, tau, t, ldt, y, ldy)
            }

pub unsafe fn zlaic1_(job: *mut integer, j: *mut integer, x: *mut dcomplex, sest: *mut f64, w: *mut dcomplex, gamma: *mut dcomplex, sestpr: *mut f64, s: *mut dcomplex, c__: *mut dcomplex) {
                dyload_lib().zlaic1_.unwrap()(job, j, x, sest, w, gamma, sestpr, s, c__)
            }

pub unsafe fn zla_lin_berr_(n: *mut integer, nz: *mut integer, nrhs: *mut integer, res: *mut dcomplex, ayb: *mut f64, berr: *mut f64) {
                dyload_lib().zla_lin_berr_.unwrap()(n, nz, nrhs, res, ayb, berr)
            }

pub unsafe fn zlals0_(icompq: *mut integer, nl: *mut integer, nr: *mut integer, sqre: *mut integer, nrhs: *mut integer, b: *mut dcomplex, ldb: *mut integer, bx: *mut dcomplex, ldbx: *mut integer, perm: *mut integer, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, givnum: *mut f64, ldgnum: *mut integer, poles: *mut f64, difl: *mut f64, difr: *mut f64, z: *mut f64, k: *mut integer, c: *mut f64, s: *mut f64, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zlals0_.unwrap()(icompq, nl, nr, sqre, nrhs, b, ldb, bx, ldbx, perm, givptr, givcol, ldgcol, givnum, ldgnum, poles, difl, difr, z, k, c, s, rwork, info)
            }

pub unsafe fn zlalsa_(icompq: *mut integer, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, b: *mut dcomplex, ldb: *mut integer, bx: *mut dcomplex, ldbx: *mut integer, u: *mut f64, ldu: *mut integer, vt: *mut f64, k: *mut integer, difl: *mut f64, difr: *mut f64, z: *mut f64, poles: *mut f64, givptr: *mut integer, givcol: *mut integer, ldgcol: *mut integer, perm: *mut integer, givnum: *mut f64, c: *mut f64, s: *mut f64, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zlalsa_.unwrap()(icompq, smlsiz, n, nrhs, b, ldb, bx, ldbx, u, ldu, vt, k, difl, difr, z, poles, givptr, givcol, ldgcol, perm, givnum, c, s, rwork, iwork, info)
            }

pub unsafe fn zlalsd_(uplo: *mut c_char, smlsiz: *mut integer, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut f64, b: *mut dcomplex, ldb: *mut integer, rcond: *mut f64, rank: *mut integer, work: *mut dcomplex, rwork: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zlalsd_.unwrap()(uplo, smlsiz, n, nrhs, d, e, b, ldb, rcond, rank, work, rwork, iwork, info)
            }

pub unsafe fn zlamswlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlamswlq_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn zlamtsqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlamtsqr_.unwrap()(side, trans, m, n, k, mb, nb, a, lda, t, ldt, c, ldc, work, lwork, info)
            }

pub unsafe fn zlapll_(n: *mut integer, x: *mut dcomplex, incx: *mut integer, y: *mut dcomplex, incy: *mut integer, ssmin: *mut f64) {
                dyload_lib().zlapll_.unwrap()(n, x, incx, y, incy, ssmin)
            }

pub unsafe fn zlapmr_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut dcomplex, ldx: *mut integer, k: *mut integer) {
                dyload_lib().zlapmr_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn zlapmt_(forwrd: *mut logical, m: *mut integer, n: *mut integer, x: *mut dcomplex, ldx: *mut integer, k: *mut integer) {
                dyload_lib().zlapmt_.unwrap()(forwrd, m, n, x, ldx, k)
            }

pub unsafe fn zla_porfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, y: *mut dcomplex, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut dcomplex, ayb: *mut f64, dy: *mut dcomplex, y_tail: *mut dcomplex, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().zla_porfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn zlaqgb_(m: *mut integer, n: *mut integer, kl: *mut integer, ku: *mut integer, ab: *mut dcomplex, ldab: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqgb_.unwrap()(m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn zlaqge_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, r: *mut f64, c: *mut f64, rowcnd: *mut f64, colcnd: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqge_.unwrap()(m, n, a, lda, r, c, rowcnd, colcnd, amax, equed)
            }

pub unsafe fn zlaqhb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqhb_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, equed)
            }

pub unsafe fn zlaqhe_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqhe_.unwrap()(uplo, n, a, lda, s, scond, amax, equed)
            }

pub unsafe fn zlaqhp_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqhp_.unwrap()(uplo, n, ap, s, scond, amax, equed)
            }

pub unsafe fn zlaqp2_(m: *mut integer, n: *mut integer, offset: *mut integer, a: *mut dcomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut dcomplex, vn1: *mut f64, vn2: *mut f64, work: *mut dcomplex) {
                dyload_lib().zlaqp2_.unwrap()(m, n, offset, a, lda, jpvt, tau, vn1, vn2, work)
            }

pub unsafe fn zlaqps_(m: *mut integer, n: *mut integer, offset: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, jpvt: *mut integer, tau: *mut dcomplex, vn1: *mut f64, vn2: *mut f64, auxv: *mut dcomplex, f: *mut dcomplex, ldf: *mut integer) {
                dyload_lib().zlaqps_.unwrap()(m, n, offset, nb, kb, a, lda, jpvt, tau, vn1, vn2, auxv, f, ldf)
            }

pub unsafe fn zlaqr0_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut dcomplex, ldh: *mut integer, w: *mut dcomplex, iloz: *mut integer, ihiz: *mut integer, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlaqr0_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn zlaqr1_(n: *mut integer, h: *mut dcomplex, ldh: *mut integer, s1: *mut dcomplex, s2: *mut dcomplex, v: *mut dcomplex) {
                dyload_lib().zlaqr1_.unwrap()(n, h, ldh, s1, s2, v)
            }

pub unsafe fn zlaqr2_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut dcomplex, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut dcomplex, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sh: *mut dcomplex, v: *mut dcomplex, ldv: *mut integer, nh: *mut integer, t: *mut dcomplex, ldt: *mut integer, nv: *mut integer, wv: *mut dcomplex, ldwv: *mut integer, work: *mut dcomplex, lwork: *mut integer) {
                dyload_lib().zlaqr2_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn zlaqr3_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nw: *mut integer, h: *mut dcomplex, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut dcomplex, ldz: *mut integer, ns: *mut integer, nd: *mut integer, sh: *mut dcomplex, v: *mut dcomplex, ldv: *mut integer, nh: *mut integer, t: *mut dcomplex, ldt: *mut integer, nv: *mut integer, wv: *mut dcomplex, ldwv: *mut integer, work: *mut dcomplex, lwork: *mut integer) {
                dyload_lib().zlaqr3_.unwrap()(wantt, wantz, n, ktop, kbot, nw, h, ldh, iloz, ihiz, z, ldz, ns, nd, sh, v, ldv, nh, t, ldt, nv, wv, ldwv, work, lwork)
            }

pub unsafe fn zlaqr4_(wantt: *mut logical, wantz: *mut logical, n: *mut integer, ilo: *mut integer, ihi: *mut integer, h: *mut dcomplex, ldh: *mut integer, w: *mut dcomplex, iloz: *mut integer, ihiz: *mut integer, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlaqr4_.unwrap()(wantt, wantz, n, ilo, ihi, h, ldh, w, iloz, ihiz, z, ldz, work, lwork, info)
            }

pub unsafe fn zlaqr5_(wantt: *mut logical, wantz: *mut logical, kacc22: *mut integer, n: *mut integer, ktop: *mut integer, kbot: *mut integer, nshfts: *mut integer, s: *mut dcomplex, h: *mut dcomplex, ldh: *mut integer, iloz: *mut integer, ihiz: *mut integer, z: *mut dcomplex, ldz: *mut integer, v: *mut dcomplex, ldv: *mut integer, u: *mut dcomplex, ldu: *mut integer, nv: *mut integer, wv: *mut dcomplex, ldwv: *mut integer, nh: *mut integer, wh: *mut dcomplex, ldwh: *mut integer) {
                dyload_lib().zlaqr5_.unwrap()(wantt, wantz, kacc22, n, ktop, kbot, nshfts, s, h, ldh, iloz, ihiz, z, ldz, v, ldv, u, ldu, nv, wv, ldwv, nh, wh, ldwh)
            }

pub unsafe fn zlaqsb_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqsb_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, equed)
            }

pub unsafe fn zlaqsp_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqsp_.unwrap()(uplo, n, ap, s, scond, amax, equed)
            }

pub unsafe fn zlaqsy_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, equed: *mut c_char) {
                dyload_lib().zlaqsy_.unwrap()(uplo, n, a, lda, s, scond, amax, equed)
            }

pub unsafe fn zlar1v_(n: *mut integer, b1: *mut integer, bn: *mut integer, lambda: *mut f64, d: *mut f64, l: *mut f64, ld: *mut f64, lld: *mut f64, pivmin: *mut f64, gaptol: *mut f64, z: *mut dcomplex, wantnc: *mut logical, negcnt: *mut integer, ztz: *mut f64, mingma: *mut f64, r: *mut integer, isuppz: *mut integer, nrminv: *mut f64, resid: *mut f64, rqcorr: *mut f64, work: *mut f64) {
                dyload_lib().zlar1v_.unwrap()(n, b1, bn, lambda, d, l, ld, lld, pivmin, gaptol, z, wantnc, negcnt, ztz, mingma, r, isuppz, nrminv, resid, rqcorr, work)
            }

pub unsafe fn zlar2v_(n: *mut integer, x: *mut dcomplex, y: *mut dcomplex, z: *mut dcomplex, incx: *mut integer, c: *mut f64, s: *mut dcomplex, incc: *mut integer) {
                dyload_lib().zlar2v_.unwrap()(n, x, y, z, incx, c, s, incc)
            }

pub unsafe fn zlarcm_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, c: *mut dcomplex, ldc: *mut integer, rwork: *mut f64) {
                dyload_lib().zlarcm_.unwrap()(m, n, a, lda, b, ldb, c, ldc, rwork)
            }

pub unsafe fn zlarfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, ldwork: *mut integer) {
                dyload_lib().zlarfb_.unwrap()(side, trans, direct, storev, m, n, k, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn zlarf_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut dcomplex, incv: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlarf_.unwrap()(side, m, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn zlarfg_(n: *mut integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: *mut integer, tau: *mut dcomplex) {
                dyload_lib().zlarfg_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn zlarfgp_(n: *mut integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: *mut integer, tau: *mut dcomplex) {
                dyload_lib().zlarfgp_.unwrap()(n, alpha, x, incx, tau)
            }

pub unsafe fn zlarft_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut dcomplex, ldv: *mut integer, tau: *mut dcomplex, t: *mut dcomplex, ldt: *mut integer) {
                dyload_lib().zlarft_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn zlarfx_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut dcomplex, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlarfx_.unwrap()(side, m, n, v, tau, c, ldc, work)
            }

pub unsafe fn zlarfy_(uplo: *mut c_char, n: *mut integer, v: *mut dcomplex, incv: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlarfy_.unwrap()(uplo, n, v, incv, tau, c, ldc, work)
            }

pub unsafe fn zlargv_(n: *mut integer, x: *mut dcomplex, incx: *mut integer, y: *mut dcomplex, incy: *mut integer, c: *mut f64, incc: *mut integer) {
                dyload_lib().zlargv_.unwrap()(n, x, incx, y, incy, c, incc)
            }

pub unsafe fn zlarnv_(idist: *mut integer, iseed: *mut integer, n: *mut integer, x: *mut dcomplex) {
                dyload_lib().zlarnv_.unwrap()(idist, iseed, n, x)
            }

pub unsafe fn zlarrv_(n: *mut integer, vl: *mut f64, vu: *mut f64, d: *mut f64, l: *mut f64, pivmin: *mut f64, isplit: *mut integer, m: *mut integer, dol: *mut integer, dou: *mut integer, minrgp: *mut f64, rtol1: *mut f64, rtol2: *mut f64, w: *mut f64, werr: *mut f64, wgap: *mut f64, iblock: *mut integer, indexw: *mut integer, gers: *mut f64, z: *mut dcomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zlarrv_.unwrap()(n, vl, vu, d, l, pivmin, isplit, m, dol, dou, minrgp, rtol1, rtol2, w, werr, wgap, iblock, indexw, gers, z, ldz, isuppz, work, iwork, info)
            }

pub unsafe fn zlarscl2_(m: *mut integer, n: *mut integer, d: *mut f64, x: *mut dcomplex, ldx: *mut integer) {
                dyload_lib().zlarscl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn zlartg_(f: *mut dcomplex, g: *mut dcomplex, cs: *mut f64, sn: *mut dcomplex, r__: *mut dcomplex) {
                dyload_lib().zlartg_.unwrap()(f, g, cs, sn, r__)
            }

pub unsafe fn zlartv_(n: *mut integer, x: *mut dcomplex, incx: *mut integer, y: *mut dcomplex, incy: *mut integer, c: *mut f64, s: *mut dcomplex, incc: *mut integer) {
                dyload_lib().zlartv_.unwrap()(n, x, incx, y, incy, c, s, incc)
            }

pub unsafe fn zlarzb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, ldwork: *mut integer) {
                dyload_lib().zlarzb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, c, ldc, work, ldwork)
            }

pub unsafe fn zlarz_(side: *mut c_char, m: *mut integer, n: *mut integer, l: *mut integer, v: *mut dcomplex, incv: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlarz_.unwrap()(side, m, n, l, v, incv, tau, c, ldc, work)
            }

pub unsafe fn zlarzt_(direct: *mut c_char, storev: *mut c_char, n: *mut integer, k: *mut integer, v: *mut dcomplex, ldv: *mut integer, tau: *mut dcomplex, t: *mut dcomplex, ldt: *mut integer) {
                dyload_lib().zlarzt_.unwrap()(direct, storev, n, k, v, ldv, tau, t, ldt)
            }

pub unsafe fn zlascl2_(m: *mut integer, n: *mut integer, d: *mut f64, x: *mut dcomplex, ldx: *mut integer) {
                dyload_lib().zlascl2_.unwrap()(m, n, d, x, ldx)
            }

pub unsafe fn zlascl_(type_: *mut c_char, kl: *mut integer, ku: *mut integer, cfrom: *mut f64, cto: *mut f64, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zlascl_.unwrap()(type_, kl, ku, cfrom, cto, m, n, a, lda, info)
            }

pub unsafe fn zlaset_(uplo: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, a: *mut dcomplex, lda: *mut integer) {
                dyload_lib().zlaset_.unwrap()(uplo, m, n, alpha, beta, a, lda)
            }

pub unsafe fn zlasr_(side: *mut c_char, pivot: *mut c_char, direct: *mut c_char, m: *mut integer, n: *mut integer, c: *mut f64, s: *mut f64, a: *mut dcomplex, lda: *mut integer) {
                dyload_lib().zlasr_.unwrap()(side, pivot, direct, m, n, c, s, a, lda)
            }

pub unsafe fn zlassq_(n: *mut integer, x: *mut dcomplex, incx: *mut integer, scale: *mut f64, sumsq: *mut f64) {
                dyload_lib().zlassq_.unwrap()(n, x, incx, scale, sumsq)
            }

pub unsafe fn zlaswlq_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlaswlq_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn zlaswp_(n: *mut integer, a: *mut dcomplex, lda: *mut integer, k1: *mut integer, k2: *mut integer, ipiv: *mut integer, incx: *mut integer) {
                dyload_lib().zlaswp_.unwrap()(n, a, lda, k1, k2, ipiv, incx)
            }

pub unsafe fn zla_syamv_(uplo: *mut integer, n: *mut integer, alpha: *mut f64, a: *mut dcomplex, lda: *mut integer, x: *mut dcomplex, incx: *mut integer, beta: *mut f64, y: *mut f64, incy: *mut integer) {
                dyload_lib().zla_syamv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn zlasyf_aa_(uplo: *mut c_char, j1: *mut integer, m: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, h: *mut dcomplex, ldh: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlasyf_aa_.unwrap()(uplo, j1, m, nb, a, lda, ipiv, h, ldh, work)
            }

pub unsafe fn zlasyf_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, w: *mut dcomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().zlasyf_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn zlasyf_rk_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, w: *mut dcomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().zlasyf_rk_.unwrap()(uplo, n, nb, kb, a, lda, e, ipiv, w, ldw, info)
            }

pub unsafe fn zlasyf_rook_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, kb: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, w: *mut dcomplex, ldw: *mut integer, info: *mut integer) {
                dyload_lib().zlasyf_rook_.unwrap()(uplo, n, nb, kb, a, lda, ipiv, w, ldw, info)
            }

pub unsafe fn zla_syrfsx_extended_(prec_type: *mut integer, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, colequ: *mut logical, c: *mut f64, b: *mut dcomplex, ldb: *mut integer, y: *mut dcomplex, ldy: *mut integer, berr_out: *mut f64, n_norms: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, res: *mut dcomplex, ayb: *mut f64, dy: *mut dcomplex, y_tail: *mut dcomplex, rcond: *mut f64, ithresh: *mut integer, rthresh: *mut f64, dz_ub: *mut f64, ignore_cwise: *mut logical, info: *mut integer) {
                dyload_lib().zla_syrfsx_extended_.unwrap()(prec_type, uplo, n, nrhs, a, lda, af, ldaf, ipiv, colequ, c, b, ldb, y, ldy, berr_out, n_norms, err_bnds_norm, err_bnds_comp, res, ayb, dy, y_tail, rcond, ithresh, rthresh, dz_ub, ignore_cwise, info)
            }

pub unsafe fn zlat2c_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, sa: *mut scomplex, ldsa: *mut integer, info: *mut integer) {
                dyload_lib().zlat2c_.unwrap()(uplo, n, a, lda, sa, ldsa, info)
            }

pub unsafe fn zlatbs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, x: *mut dcomplex, scale: *mut f64, cnorm: *mut f64, info: *mut integer) {
                dyload_lib().zlatbs_.unwrap()(uplo, trans, diag, normin, n, kd, ab, ldab, x, scale, cnorm, info)
            }

pub unsafe fn zlatdf_(ijob: *mut integer, n: *mut integer, z: *mut dcomplex, ldz: *mut integer, rhs: *mut dcomplex, rdsum: *mut f64, rdscal: *mut f64, ipiv: *mut integer, jpiv: *mut integer) {
                dyload_lib().zlatdf_.unwrap()(ijob, n, z, ldz, rhs, rdsum, rdscal, ipiv, jpiv)
            }

pub unsafe fn zlatps_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, ap: *mut dcomplex, x: *mut dcomplex, scale: *mut f64, cnorm: *mut f64, info: *mut integer) {
                dyload_lib().zlatps_.unwrap()(uplo, trans, diag, normin, n, ap, x, scale, cnorm, info)
            }

pub unsafe fn zlatrd_(uplo: *mut c_char, n: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut f64, tau: *mut dcomplex, w: *mut dcomplex, ldw: *mut integer) {
                dyload_lib().zlatrd_.unwrap()(uplo, n, nb, a, lda, e, tau, w, ldw)
            }

pub unsafe fn zlatrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, normin: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, x: *mut dcomplex, scale: *mut f64, cnorm: *mut f64, info: *mut integer) {
                dyload_lib().zlatrs_.unwrap()(uplo, trans, diag, normin, n, a, lda, x, scale, cnorm, info)
            }

pub unsafe fn zlatrz_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex) {
                dyload_lib().zlatrz_.unwrap()(m, n, l, a, lda, tau, work)
            }

pub unsafe fn zlatsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zlatsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn zlatzm_(side: *mut c_char, m: *mut integer, n: *mut integer, v: *mut dcomplex, incv: *mut integer, tau: *mut dcomplex, c1: *mut dcomplex, c2: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex) {
                dyload_lib().zlatzm_.unwrap()(side, m, n, v, incv, tau, c1, c2, ldc, work)
            }

pub unsafe fn zlaunhr_col_getrfnp2_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut dcomplex, info: *mut integer) {
                dyload_lib().zlaunhr_col_getrfnp2_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn zlaunhr_col_getrfnp_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, d: *mut dcomplex, info: *mut integer) {
                dyload_lib().zlaunhr_col_getrfnp_.unwrap()(m, n, a, lda, d, info)
            }

pub unsafe fn zlauu2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zlauu2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn zlauum_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zlauum_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn zla_wwaddw_(n: *mut integer, x: *mut dcomplex, y: *mut dcomplex, w: *mut dcomplex) {
                dyload_lib().zla_wwaddw_.unwrap()(n, x, y, w)
            }

pub unsafe fn zpbcon_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zpbcon_.unwrap()(uplo, n, kd, ab, ldab, anorm, rcond, work, rwork, info)
            }

pub unsafe fn zpbequ_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zpbequ_.unwrap()(uplo, n, kd, ab, ldab, s, scond, amax, info)
            }

pub unsafe fn zpbrfs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zpbrfs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zpbstf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, info: *mut integer) {
                dyload_lib().zpbstf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn zpbsv_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zpbsv_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn zpbsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, afb: *mut dcomplex, ldafb: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zpbsvx_.unwrap()(fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zpbtf2_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, info: *mut integer) {
                dyload_lib().zpbtf2_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn zpbtrf_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, info: *mut integer) {
                dyload_lib().zpbtrf_.unwrap()(uplo, n, kd, ab, ldab, info)
            }

pub unsafe fn zpbtrs_(uplo: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zpbtrs_.unwrap()(uplo, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn zpftrf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, info: *mut integer) {
                dyload_lib().zpftrf_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn zpftri_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, info: *mut integer) {
                dyload_lib().zpftri_.unwrap()(transr, uplo, n, a, info)
            }

pub unsafe fn zpftrs_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zpftrs_.unwrap()(transr, uplo, n, nrhs, a, b, ldb, info)
            }

pub unsafe fn zpocon_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zpocon_.unwrap()(uplo, n, a, lda, anorm, rcond, work, rwork, info)
            }

pub unsafe fn zpoequb_(n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zpoequb_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn zpoequ_(n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zpoequ_.unwrap()(n, a, lda, s, scond, amax, info)
            }

pub unsafe fn zporfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zporfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zporfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zporfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zposv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zposv_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn zposvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zposvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zposvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zposvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zpotf2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zpotf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn zpotrf2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zpotrf2_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn zpotrf_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zpotrf_.unwrap()(uplo, n, a, lda, info)
            }

pub unsafe fn zpotri_(uplo: *mut c_char, n: *mut integer, buff_A: *mut dcomplex, ldim_A: *mut integer, info: *mut integer) {
                dyload_lib().zpotri_.unwrap()(uplo, n, buff_A, ldim_A, info)
            }

pub unsafe fn zpotrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zpotrs_.unwrap()(uplo, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn zppcon_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zppcon_.unwrap()(uplo, n, ap, anorm, rcond, work, rwork, info)
            }

pub unsafe fn zppequ_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, s: *mut f64, scond: *mut f64, amax: *mut f64, info: *mut integer) {
                dyload_lib().zppequ_.unwrap()(uplo, n, ap, s, scond, amax, info)
            }

pub unsafe fn zpprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, afp: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zpprfs_.unwrap()(uplo, n, nrhs, ap, afp, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zppsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zppsv_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn zppsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, afp: *mut dcomplex, equed: *mut c_char, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zppsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, equed, s, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zpptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, info: *mut integer) {
                dyload_lib().zpptrf_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn zpptri_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, info: *mut integer) {
                dyload_lib().zpptri_.unwrap()(uplo, n, ap, info)
            }

pub unsafe fn zpptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zpptrs_.unwrap()(uplo, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn zpstf2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().zpstf2_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn zpstrf_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, piv: *mut integer, rank: *mut integer, tol: *mut f64, work: *mut f64, info: *mut integer) {
                dyload_lib().zpstrf_.unwrap()(uplo, n, a, lda, piv, rank, tol, work, info)
            }

pub unsafe fn zptcon_(n: *mut integer, d: *mut f64, e: *mut dcomplex, anorm: *mut f64, rcond: *mut f64, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zptcon_.unwrap()(n, d, e, anorm, rcond, rwork, info)
            }

pub unsafe fn zpteqr_(compz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().zpteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn zptrfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut dcomplex, df: *mut f64, ef: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zptrfs_.unwrap()(uplo, n, nrhs, d, e, df, ef, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zptsv_(n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zptsv_.unwrap()(n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn zptsvx_(fact: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut dcomplex, df: *mut f64, ef: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zptsvx_.unwrap()(fact, n, nrhs, d, e, df, ef, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zpttrf_(n: *mut integer, d: *mut f64, e: *mut dcomplex, info: *mut integer) {
                dyload_lib().zpttrf_.unwrap()(n, d, e, info)
            }

pub unsafe fn zpttrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zpttrs_.unwrap()(uplo, n, nrhs, d, e, b, ldb, info)
            }

pub unsafe fn zptts2_(iuplo: *mut integer, n: *mut integer, nrhs: *mut integer, d: *mut f64, e: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer) {
                dyload_lib().zptts2_.unwrap()(iuplo, n, nrhs, d, e, b, ldb)
            }

pub unsafe fn zrot_(n: *mut integer, cx: *mut dcomplex, incx: *mut integer, cy: *mut dcomplex, incy: *mut integer, c: *mut f64, s: *mut dcomplex) {
                dyload_lib().zrot_.unwrap()(n, cx, incx, cy, incy, c, s)
            }

pub unsafe fn zspcon_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zspcon_.unwrap()(uplo, n, ap, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zspmv_(uplo: *mut c_char, n: *mut integer, alpha: *mut dcomplex, ap: *mut dcomplex, x: *mut dcomplex, incx: *mut integer, beta: *mut dcomplex, y: *mut dcomplex, incy: *mut integer) {
                dyload_lib().zspmv_.unwrap()(uplo, n, alpha, ap, x, incx, beta, y, incy)
            }

pub unsafe fn zspr_(uplo: *mut c_char, n: *mut integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: *mut integer, ap: *mut dcomplex) {
                dyload_lib().zspr_.unwrap()(uplo, n, alpha, x, incx, ap)
            }

pub unsafe fn zsprfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, afp: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zsprfs_.unwrap()(uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zspsv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zspsv_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn zspsvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, afp: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zspsvx_.unwrap()(fact, uplo, n, nrhs, ap, afp, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, rwork, info)
            }

pub unsafe fn zsptrf_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zsptrf_.unwrap()(uplo, n, ap, ipiv, info)
            }

pub unsafe fn zsptri_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsptri_.unwrap()(uplo, n, ap, ipiv, work, info)
            }

pub unsafe fn zsptrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zsptrs_.unwrap()(uplo, n, nrhs, ap, ipiv, b, ldb, info)
            }

pub unsafe fn zstedc_(compz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zstedc_.unwrap()(compz, n, d, e, z, ldz, work, lwork, rwork, lrwork, iwork, liwork, info)
            }

pub unsafe fn zstegr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, abstol: *mut f64, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, isuppz: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zstegr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork, info)
            }

pub unsafe fn zstein_(n: *mut integer, d: *mut f64, e: *mut f64, m: *mut integer, w: *mut f64, iblock: *mut integer, isplit: *mut integer, z: *mut dcomplex, ldz: *mut integer, work: *mut f64, iwork: *mut integer, ifail: *mut integer, info: *mut integer) {
                dyload_lib().zstein_.unwrap()(n, d, e, m, w, iblock, isplit, z, ldz, work, iwork, ifail, info)
            }

pub unsafe fn zstemr_(jobz: *mut c_char, range: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, vl: *mut f64, vu: *mut f64, il: *mut integer, iu: *mut integer, m: *mut integer, w: *mut f64, z: *mut dcomplex, ldz: *mut integer, nzc: *mut integer, isuppz: *mut integer, tryrac: *mut logical, work: *mut f64, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().zstemr_.unwrap()(jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldz, nzc, isuppz, tryrac, work, lwork, iwork, liwork, info)
            }

pub unsafe fn zsteqr_(compz: *mut c_char, n: *mut integer, d: *mut f64, e: *mut f64, z: *mut dcomplex, ldz: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().zsteqr_.unwrap()(compz, n, d, e, z, ldz, work, info)
            }

pub unsafe fn zsycon_3_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsycon_3_.unwrap()(uplo, n, a, lda, e, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zsycon_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsycon_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zsycon_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, anorm: *mut f64, rcond: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsycon_rook_.unwrap()(uplo, n, a, lda, ipiv, anorm, rcond, work, info)
            }

pub unsafe fn zsyconv_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsyconv_.unwrap()(uplo, way, n, a, lda, ipiv, work, info)
            }

pub unsafe fn zsyconvf_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zsyconvf_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn zsyconvf_rook_(uplo: *mut c_char, way: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zsyconvf_rook_.unwrap()(uplo, way, n, a, lda, e, ipiv, info)
            }

pub unsafe fn zsyequb_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, s: *mut f64, scond: *mut f64, amax: *mut f64, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsyequb_.unwrap()(uplo, n, a, lda, s, scond, amax, work, info)
            }

pub unsafe fn zsymv_(uplo: *mut c_char, n: *mut integer, alpha: *mut dcomplex, a: *mut dcomplex, lda: *mut integer, x: *mut dcomplex, incx: *mut integer, beta: *mut dcomplex, y: *mut dcomplex, incy: *mut integer) {
                dyload_lib().zsymv_.unwrap()(uplo, n, alpha, a, lda, x, incx, beta, y, incy)
            }

pub unsafe fn zsyr_(uplo: *mut c_char, n: *mut integer, alpha: *mut dcomplex, x: *mut dcomplex, incx: *mut integer, a: *mut dcomplex, lda: *mut integer) {
                dyload_lib().zsyr_.unwrap()(uplo, n, alpha, x, incx, a, lda)
            }

pub unsafe fn zsyrfs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zsyrfs_.unwrap()(uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn zsyrfsx_(uplo: *mut c_char, equed: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zsyrfsx_.unwrap()(uplo, equed, n, nrhs, a, lda, af, ldaf, ipiv, s, b, ldb, x, ldx, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zsysv_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, tb: *mut dcomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsysv_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, work, lwork, info)
            }

pub unsafe fn zsysv_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsysv_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zsysv_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsysv_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zsysv_rk_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsysv_rk_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zsysv_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsysv_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zsysvx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zsysvx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, b, ldb, x, ldx, rcond, ferr, berr, work, lwork, rwork, info)
            }

pub unsafe fn zsysvxx_(fact: *mut c_char, uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, af: *mut dcomplex, ldaf: *mut integer, ipiv: *mut integer, equed: *mut c_char, s: *mut f64, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, rcond: *mut f64, rpvgrw: *mut f64, berr: *mut f64, n_err_bnds: *mut integer, err_bnds_norm: *mut f64, err_bnds_comp: *mut f64, nparams: *mut integer, params: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().zsysvxx_.unwrap()(fact, uplo, n, nrhs, a, lda, af, ldaf, ipiv, equed, s, b, ldb, x, ldx, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, rwork, info)
            }

pub unsafe fn zsyswapr_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, i1: *mut integer, i2: *mut integer) {
                dyload_lib().zsyswapr_.unwrap()(uplo, n, a, lda, i1, i2)
            }

pub unsafe fn zsytf2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zsytf2_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn zsytf2_rk_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zsytf2_rk_.unwrap()(uplo, n, a, lda, e, ipiv, info)
            }

pub unsafe fn zsytf2_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, info: *mut integer) {
                dyload_lib().zsytf2_rook_.unwrap()(uplo, n, a, lda, ipiv, info)
            }

pub unsafe fn zsytrf_aa_2stage_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tb: *mut dcomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytrf_aa_2stage_.unwrap()(uplo, n, a, lda, tb, ltb, ipiv, ipiv2, work, lwork, info)
            }

pub unsafe fn zsytrf_aa_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytrf_aa_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zsytrf_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytrf_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zsytrf_rk_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytrf_rk_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn zsytrf_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytrf_rook_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zsytri2_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytri2_.unwrap()(uplo, n, a, lda, ipiv, work, lwork, info)
            }

pub unsafe fn zsytri2x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().zsytri2x_.unwrap()(uplo, n, a, lda, ipiv, work, nb, info)
            }

pub unsafe fn zsytri_3_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytri_3_.unwrap()(uplo, n, a, lda, e, ipiv, work, lwork, info)
            }

pub unsafe fn zsytri_3x_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, work: *mut dcomplex, nb: *mut integer, info: *mut integer) {
                dyload_lib().zsytri_3x_.unwrap()(uplo, n, a, lda, e, ipiv, work, nb, info)
            }

pub unsafe fn zsytri_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsytri_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn zsytri_rook_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsytri_rook_.unwrap()(uplo, n, a, lda, ipiv, work, info)
            }

pub unsafe fn zsytrs2_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zsytrs2_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, info)
            }

pub unsafe fn zsytrs_3_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, e: *mut dcomplex, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zsytrs_3_.unwrap()(uplo, n, nrhs, a, lda, e, ipiv, b, ldb, info)
            }

pub unsafe fn zsytrs_aa_2stage_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, tb: *mut dcomplex, ltb: *mut integer, ipiv: *mut integer, ipiv2: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zsytrs_aa_2stage_.unwrap()(uplo, n, nrhs, a, lda, tb, ltb, ipiv, ipiv2, b, ldb, info)
            }

pub unsafe fn zsytrs_aa_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zsytrs_aa_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, work, lwork, info)
            }

pub unsafe fn zsytrs_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zsytrs_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn zsytrs_rook_(uplo: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, ipiv: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().zsytrs_rook_.unwrap()(uplo, n, nrhs, a, lda, ipiv, b, ldb, info)
            }

pub unsafe fn ztbcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, ab: *mut dcomplex, ldab: *mut integer, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztbcon_.unwrap()(norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork, info)
            }

pub unsafe fn ztbrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztbrfs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn ztbtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, kd: *mut integer, nrhs: *mut integer, ab: *mut dcomplex, ldab: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ztbtrs_.unwrap()(uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldb, info)
            }

pub unsafe fn ztfsm_(transr: *mut c_char, side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, m: *mut integer, n: *mut integer, alpha: *mut dcomplex, a: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer) {
                dyload_lib().ztfsm_.unwrap()(transr, side, uplo, trans, diag, m, n, alpha, a, b, ldb)
            }

pub unsafe fn ztftri_(transr: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztftri_.unwrap()(transr, uplo, diag, n, a, info)
            }

pub unsafe fn ztfttp_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut dcomplex, ap: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztfttp_.unwrap()(transr, uplo, n, arf, ap, info)
            }

pub unsafe fn ztfttr_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, arf: *mut dcomplex, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ztfttr_.unwrap()(transr, uplo, n, arf, a, lda, info)
            }

pub unsafe fn ztgevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, s: *mut dcomplex, lds: *mut integer, p: *mut dcomplex, ldp: *mut integer, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztgevc_.unwrap()(side, howmny, select, n, s, lds, p, ldp, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)
            }

pub unsafe fn ztgex2_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, q: *mut dcomplex, ldq: *mut integer, z: *mut dcomplex, ldz: *mut integer, j1: *mut integer, info: *mut integer) {
                dyload_lib().ztgex2_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, j1, info)
            }

pub unsafe fn ztgexc_(wantq: *mut logical, wantz: *mut logical, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, q: *mut dcomplex, ldq: *mut integer, z: *mut dcomplex, ldz: *mut integer, ifst: *mut integer, ilst: *mut integer, info: *mut integer) {
                dyload_lib().ztgexc_.unwrap()(wantq, wantz, n, a, lda, b, ldb, q, ldq, z, ldz, ifst, ilst, info)
            }

pub unsafe fn ztgsen_(ijob: *mut integer, wantq: *mut logical, wantz: *mut logical, select: *mut logical, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, alpha: *mut dcomplex, beta: *mut dcomplex, q: *mut dcomplex, ldq: *mut integer, z: *mut dcomplex, ldz: *mut integer, m: *mut integer, pl: *mut f64, pr: *mut f64, dif: *mut f64, work: *mut dcomplex, lwork: *mut integer, iwork: *mut integer, liwork: *mut integer, info: *mut integer) {
                dyload_lib().ztgsen_.unwrap()(ijob, wantq, wantz, select, n, a, lda, b, ldb, alpha, beta, q, ldq, z, ldz, m, pl, pr, dif, work, lwork, iwork, liwork, info)
            }

pub unsafe fn ztgsja_(jobu: *mut c_char, jobv: *mut c_char, jobq: *mut c_char, m: *mut integer, p: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, tola: *mut f64, tolb: *mut f64, alpha: *mut f64, beta: *mut f64, u: *mut dcomplex, ldu: *mut integer, v: *mut dcomplex, ldv: *mut integer, q: *mut dcomplex, ldq: *mut integer, work: *mut dcomplex, ncycle: *mut integer, info: *mut integer) {
                dyload_lib().ztgsja_.unwrap()(jobu, jobv, jobq, m, p, n, k, l, a, lda, b, ldb, tola, tolb, alpha, beta, u, ldu, v, ldv, q, ldq, work, ncycle, info)
            }

pub unsafe fn ztgsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, s: *mut f64, dif: *mut f64, mm: *mut integer, m: *mut integer, work: *mut dcomplex, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ztgsna_.unwrap()(job, howmny, select, n, a, lda, b, ldb, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork, info)
            }

pub unsafe fn ztgsy2_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, c: *mut dcomplex, ldc: *mut integer, d: *mut dcomplex, ldd: *mut integer, e: *mut dcomplex, lde: *mut integer, f: *mut dcomplex, ldf: *mut integer, scale: *mut f64, rdsum: *mut f64, rdscal: *mut f64, info: *mut integer) {
                dyload_lib().ztgsy2_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, rdsum, rdscal, info)
            }

pub unsafe fn ztgsyl_(trans: *mut c_char, ijob: *mut integer, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, c: *mut dcomplex, ldc: *mut integer, d: *mut dcomplex, ldd: *mut integer, e: *mut dcomplex, lde: *mut integer, f: *mut dcomplex, ldf: *mut integer, scale: *mut f64, dif: *mut f64, work: *mut dcomplex, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().ztgsyl_.unwrap()(trans, ijob, m, n, a, lda, b, ldb, c, ldc, d, ldd, e, lde, f, ldf, scale, dif, work, lwork, iwork, info)
            }

pub unsafe fn ztpcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut dcomplex, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztpcon_.unwrap()(norm, uplo, diag, n, ap, rcond, work, rwork, info)
            }

pub unsafe fn ztplqt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, t: *mut dcomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().ztplqt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn ztplqt_(m: *mut integer, n: *mut integer, l: *mut integer, mb: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztplqt_.unwrap()(m, n, l, mb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn ztpmlqt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, mb: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztpmlqt_.unwrap()(side, trans, m, n, k, l, mb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn ztpmqrt_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, nb: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztpmqrt_.unwrap()(side, trans, m, n, k, l, nb, v, ldv, t, ldt, a, lda, b, ldb, work, info)
            }

pub unsafe fn ztpqrt2_(m: *mut integer, n: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, t: *mut dcomplex, ldt: *mut integer, info: *mut integer) {
                dyload_lib().ztpqrt2_.unwrap()(m, n, l, a, lda, b, ldb, t, ldt, info)
            }

pub unsafe fn ztpqrt_(m: *mut integer, n: *mut integer, l: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztpqrt_.unwrap()(m, n, l, nb, a, lda, b, ldb, t, ldt, work, info)
            }

pub unsafe fn ztprfb_(side: *mut c_char, trans: *mut c_char, direct: *mut c_char, storev: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, v: *mut dcomplex, ldv: *mut integer, t: *mut dcomplex, ldt: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, work: *mut dcomplex, ldwork: *mut integer) {
                dyload_lib().ztprfb_.unwrap()(side, trans, direct, storev, m, n, k, l, v, ldv, t, ldt, a, lda, b, ldb, work, ldwork)
            }

pub unsafe fn ztprfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztprfs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn ztptri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, ap: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztptri_.unwrap()(uplo, diag, n, ap, info)
            }

pub unsafe fn ztptrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, ap: *mut dcomplex, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ztptrs_.unwrap()(uplo, trans, diag, n, nrhs, ap, b, ldb, info)
            }

pub unsafe fn ztpttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, arf: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztpttf_.unwrap()(transr, uplo, n, ap, arf, info)
            }

pub unsafe fn ztpttr_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ztpttr_.unwrap()(uplo, n, ap, a, lda, info)
            }

pub unsafe fn ztrcon_(norm: *mut c_char, uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, rcond: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztrcon_.unwrap()(norm, uplo, diag, n, a, lda, rcond, work, rwork, info)
            }

pub unsafe fn ztrevc3_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut dcomplex, ldt: *mut integer, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, info: *mut integer) {
                dyload_lib().ztrevc3_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, lwork, rwork, lrwork, info)
            }

pub unsafe fn ztrevc_(side: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut dcomplex, ldt: *mut integer, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, mm: *mut integer, m: *mut integer, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztrevc_.unwrap()(side, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, mm, m, work, rwork, info)
            }

pub unsafe fn ztrexc_(compq: *mut c_char, n: *mut integer, t: *mut dcomplex, ldt: *mut integer, q: *mut dcomplex, ldq: *mut integer, ifst: *mut integer, ilst: *mut integer, info: *mut integer) {
                dyload_lib().ztrexc_.unwrap()(compq, n, t, ldt, q, ldq, ifst, ilst, info)
            }

pub unsafe fn ztrrfs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, x: *mut dcomplex, ldx: *mut integer, ferr: *mut f64, berr: *mut f64, work: *mut dcomplex, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztrrfs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, x, ldx, ferr, berr, work, rwork, info)
            }

pub unsafe fn ztrsen_(job: *mut c_char, compq: *mut c_char, select: *mut logical, n: *mut integer, t: *mut dcomplex, ldt: *mut integer, q: *mut dcomplex, ldq: *mut integer, w: *mut dcomplex, m: *mut integer, s: *mut f64, sep: *mut f64, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ztrsen_.unwrap()(job, compq, select, n, t, ldt, q, ldq, w, m, s, sep, work, lwork, info)
            }

pub unsafe fn ztrsna_(job: *mut c_char, howmny: *mut c_char, select: *mut logical, n: *mut integer, t: *mut dcomplex, ldt: *mut integer, vl: *mut dcomplex, ldvl: *mut integer, vr: *mut dcomplex, ldvr: *mut integer, s: *mut f64, sep: *mut f64, mm: *mut integer, m: *mut integer, work: *mut dcomplex, ldwork: *mut integer, rwork: *mut f64, info: *mut integer) {
                dyload_lib().ztrsna_.unwrap()(job, howmny, select, n, t, ldt, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork, info)
            }

pub unsafe fn ztrsyl_(trana: *mut c_char, tranb: *mut c_char, isgn: *mut integer, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, c: *mut dcomplex, ldc: *mut integer, scale: *mut f64, info: *mut integer) {
                dyload_lib().ztrsyl_.unwrap()(trana, tranb, isgn, m, n, a, lda, b, ldb, c, ldc, scale, info)
            }

pub unsafe fn ztrti2_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ztrti2_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn ztrtri_(uplo: *mut c_char, diag: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().ztrtri_.unwrap()(uplo, diag, n, a, lda, info)
            }

pub unsafe fn ztrtrs_(uplo: *mut c_char, trans: *mut c_char, diag: *mut c_char, n: *mut integer, nrhs: *mut integer, a: *mut dcomplex, lda: *mut integer, b: *mut dcomplex, ldb: *mut integer, info: *mut integer) {
                dyload_lib().ztrtrs_.unwrap()(uplo, trans, diag, n, nrhs, a, lda, b, ldb, info)
            }

pub unsafe fn ztrttf_(transr: *mut c_char, uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, arf: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztrttf_.unwrap()(transr, uplo, n, a, lda, arf, info)
            }

pub unsafe fn ztrttp_(uplo: *mut c_char, n: *mut integer, a: *mut dcomplex, lda: *mut integer, ap: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztrttp_.unwrap()(uplo, n, a, lda, ap, info)
            }

pub unsafe fn ztzrqf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, info: *mut integer) {
                dyload_lib().ztzrqf_.unwrap()(m, n, a, lda, tau, info)
            }

pub unsafe fn ztzrzf_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().ztzrzf_.unwrap()(m, n, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zunbdb1_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut dcomplex, taup2: *mut dcomplex, tauq1: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb1_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn zunbdb2_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut dcomplex, taup2: *mut dcomplex, tauq1: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb2_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn zunbdb3_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut dcomplex, taup2: *mut dcomplex, tauq1: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb3_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, work, lwork, info)
            }

pub unsafe fn zunbdb4_(m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut dcomplex, taup2: *mut dcomplex, tauq1: *mut dcomplex, phantom: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb4_.unwrap()(m, p, q, x11, ldx11, x21, ldx21, theta, phi, taup1, taup2, tauq1, phantom, work, lwork, info)
            }

pub unsafe fn zunbdb5_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut dcomplex, incx1: *mut integer, x2: *mut dcomplex, incx2: *mut integer, q1: *mut dcomplex, ldq1: *mut integer, q2: *mut dcomplex, ldq2: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb5_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn zunbdb6_(m1: *mut integer, m2: *mut integer, n: *mut integer, x1: *mut dcomplex, incx1: *mut integer, x2: *mut dcomplex, incx2: *mut integer, q1: *mut dcomplex, ldq1: *mut integer, q2: *mut dcomplex, ldq2: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb6_.unwrap()(m1, m2, n, x1, incx1, x2, incx2, q1, ldq1, q2, ldq2, work, lwork, info)
            }

pub unsafe fn zunbdb_(trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x12: *mut dcomplex, ldx12: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, x22: *mut dcomplex, ldx22: *mut integer, theta: *mut f64, phi: *mut f64, taup1: *mut dcomplex, taup2: *mut dcomplex, tauq1: *mut dcomplex, tauq2: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunbdb_.unwrap()(trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork, info)
            }

pub unsafe fn zuncsd2by1_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, theta: *mut f64, u1: *mut dcomplex, ldu1: *mut integer, u2: *mut dcomplex, ldu2: *mut integer, v1t: *mut dcomplex, ldv1t: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zuncsd2by1_.unwrap()(jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, rwork, lrwork, iwork, info)
            }

pub unsafe fn zuncsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut dcomplex, ldx11: *mut integer, x12: *mut dcomplex, ldx12: *mut integer, x21: *mut dcomplex, ldx21: *mut integer, x22: *mut dcomplex, ldx22: *mut integer, theta: *mut f64, u1: *mut dcomplex, ldu1: *mut integer, u2: *mut dcomplex, ldu2: *mut integer, v1t: *mut dcomplex, ldv1t: *mut integer, v2t: *mut dcomplex, ldv2t: *mut integer, work: *mut dcomplex, lwork: *mut integer, rwork: *mut f64, lrwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().zuncsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork, info)
            }

pub unsafe fn zung2l_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zung2l_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn zung2r_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zung2r_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn zungbr_(vect: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungbr_.unwrap()(vect, m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zunghr_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunghr_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zungl2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zungl2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn zunglq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunglq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zungql_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungql_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zungqr_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungqr_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zungr2_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zungr2_.unwrap()(m, n, k, a, lda, tau, work, info)
            }

pub unsafe fn zungrq_(m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungrq_.unwrap()(m, n, k, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zungtr_(uplo: *mut c_char, m: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungtr_.unwrap()(uplo, m, a, lda, tau, work, lwork, info)
            }

pub unsafe fn zungtsqr_(m: *mut integer, n: *mut integer, mb: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zungtsqr_.unwrap()(m, n, mb, nb, a, lda, t, ldt, work, lwork, info)
            }

pub unsafe fn zunhr_col_(m: *mut integer, n: *mut integer, nb: *mut integer, a: *mut dcomplex, lda: *mut integer, t: *mut dcomplex, ldt: *mut integer, d: *mut dcomplex, info: *mut integer) {
                dyload_lib().zunhr_col_.unwrap()(m, n, nb, a, lda, t, ldt, d, info)
            }

pub unsafe fn zunm22_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, n1: *mut integer, n2: *mut integer, q: *mut dcomplex, ldq: *mut integer, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunm22_.unwrap()(side, trans, m, n, n1, n2, q, ldq, c, ldc, work, lwork, info)
            }

pub unsafe fn zunm2l_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zunm2l_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn zunm2r_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zunm2r_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn zunmbr_(vect: *mut c_char, side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmbr_.unwrap()(vect, side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunmhr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmhr_.unwrap()(side, trans, m, n, ilo, ihi, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunml2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zunml2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn zunmlq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmlq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunmql_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmql_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunmqr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmqr_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunmr2_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zunmr2_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn zunmr3_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zunmr3_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, info)
            }

pub unsafe fn zunmrq_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmrq_.unwrap()(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunmrz_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, k: *mut integer, l: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmrz_.unwrap()(side, trans, m, n, k, l, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zunmtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, lwork: *mut integer, info: *mut integer) {
                dyload_lib().zunmtr_.unwrap()(side, uplo, trans, m, n, a, lda, tau, c, ldc, work, lwork, info)
            }

pub unsafe fn zupgtr_(uplo: *mut c_char, n: *mut integer, ap: *mut dcomplex, tau: *mut dcomplex, q: *mut dcomplex, ldq: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zupgtr_.unwrap()(uplo, n, ap, tau, q, ldq, work, info)
            }

pub unsafe fn zupmtr_(side: *mut c_char, uplo: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ap: *mut dcomplex, tau: *mut dcomplex, c: *mut dcomplex, ldc: *mut integer, work: *mut dcomplex, info: *mut integer) {
                dyload_lib().zupmtr_.unwrap()(side, uplo, trans, m, n, ap, tau, c, ldc, work, info)
            }

pub unsafe fn disnan_(din: *mut f64) -> logical {
                dyload_lib().disnan_.unwrap()(din)
            }

pub unsafe fn dlaisnan_(din1: *mut f64, din2: *mut f64) -> logical {
                dyload_lib().dlaisnan_.unwrap()(din1, din2)
            }

pub unsafe fn sisnan_(sin__: *mut f32) -> logical {
                dyload_lib().sisnan_.unwrap()(sin__)
            }

pub unsafe fn slaisnan_(sin1: *mut f32, sin2: *mut f32) -> logical {
                dyload_lib().slaisnan_.unwrap()(sin1, sin2)
            }

pub unsafe fn chla_transtype_(ret_val: *mut c_char, trans: *mut integer) {
                dyload_lib().chla_transtype_.unwrap()(ret_val, trans)
            }

pub unsafe fn cladiv_(ret_val: *mut scomplex, x: *mut scomplex, y: *mut scomplex) {
                dyload_lib().cladiv_.unwrap()(ret_val, x, y)
            }

pub unsafe fn zladiv_(ret_val: *mut dcomplex, x: *mut dcomplex, y: *mut dcomplex) {
                dyload_lib().zladiv_.unwrap()(ret_val, x, y)
            }

pub unsafe fn sgetrfnp_(m: *mut integer, n: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().sgetrfnp_.unwrap()(m, n, a, lda, info)
            }

pub unsafe fn dgetrfnp_(m: *mut integer, n: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dgetrfnp_.unwrap()(m, n, a, lda, info)
            }

pub unsafe fn cgetrfnp_(m: *mut integer, n: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().cgetrfnp_.unwrap()(m, n, a, lda, info)
            }

pub unsafe fn zgetrfnp_(m: *mut integer, n: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zgetrfnp_.unwrap()(m, n, a, lda, info)
            }

pub unsafe fn sspffrt2_(ap: *mut f32, n: *mut integer, ncolm: *mut integer, work: *mut f32, work2: *mut f32) {
                dyload_lib().sspffrt2_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn dspffrt2_(ap: *mut f64, n: *mut integer, ncolm: *mut integer, work: *mut f64, work2: *mut f64) {
                dyload_lib().dspffrt2_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn cspffrt2_(ap: *mut scomplex, n: *mut integer, ncolm: *mut integer, work: *mut scomplex, work2: *mut scomplex) {
                dyload_lib().cspffrt2_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn zspffrt2_(ap: *mut dcomplex, n: *mut integer, ncolm: *mut integer, work: *mut dcomplex, work2: *mut dcomplex) {
                dyload_lib().zspffrt2_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn sspffrtx_(ap: *mut f32, n: *mut integer, ncolm: *mut integer, work: *mut f32, work2: *mut f32) {
                dyload_lib().sspffrtx_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn dspffrtx_(ap: *mut f64, n: *mut integer, ncolm: *mut integer, work: *mut f64, work2: *mut f64) {
                dyload_lib().dspffrtx_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn cspffrtx_(ap: *mut scomplex, n: *mut integer, ncolm: *mut integer, work: *mut scomplex, work2: *mut scomplex) {
                dyload_lib().cspffrtx_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn zspffrtx_(ap: *mut dcomplex, n: *mut integer, ncolm: *mut integer, work: *mut dcomplex, work2: *mut dcomplex) {
                dyload_lib().zspffrtx_.unwrap()(ap, n, ncolm, work, work2)
            }

pub unsafe fn cgetrfnpi_(m: *mut integer, n: *mut integer, nfact: *mut integer, a: *mut scomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().cgetrfnpi_.unwrap()(m, n, nfact, a, lda, info)
            }

pub unsafe fn dgetrfnpi_(m: *mut integer, n: *mut integer, nfact: *mut integer, a: *mut f64, lda: *mut integer, info: *mut integer) {
                dyload_lib().dgetrfnpi_.unwrap()(m, n, nfact, a, lda, info)
            }

pub unsafe fn sgetrfnpi_(m: *mut integer, n: *mut integer, nfact: *mut integer, a: *mut f32, lda: *mut integer, info: *mut integer) {
                dyload_lib().sgetrfnpi_.unwrap()(m, n, nfact, a, lda, info)
            }

pub unsafe fn zgetrfnpi_(m: *mut integer, n: *mut integer, nfact: *mut integer, a: *mut dcomplex, lda: *mut integer, info: *mut integer) {
                dyload_lib().zgetrfnpi_.unwrap()(m, n, nfact, a, lda, info)
            }

pub unsafe fn sopgtr_(uplo: *mut c_char, n: *mut integer, ap: *mut f32, tau: *mut f32, q: *mut f32, ldq: *mut integer, work: *mut f32, info: *mut integer) {
                dyload_lib().sopgtr_.unwrap()(uplo, n, ap, tau, q, ldq, work, info)
            }

pub unsafe fn dopgtr_(uplo: *mut c_char, n: *mut integer, ap: *mut f64, tau: *mut f64, q: *mut f64, ldq: *mut integer, work: *mut f64, info: *mut integer) {
                dyload_lib().dopgtr_.unwrap()(uplo, n, ap, tau, q, ldq, work, info)
            }

pub unsafe fn sorcsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x12: *mut f32, ldx12: *mut integer, x21: *mut f32, ldx21: *mut integer, x22: *mut f32, ldx22: *mut integer, theta: *mut f32, u1: *mut f32, ldu1: *mut integer, u2: *mut f32, ldu2: *mut integer, v1t: *mut f32, ldv1t: *mut integer, v2t: *mut f32, ldv2t: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sorcsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info)
            }

pub unsafe fn dorcsd_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, jobv2t: *mut c_char, trans: *mut c_char, signs: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x12: *mut f64, ldx12: *mut integer, x21: *mut f64, ldx21: *mut integer, x22: *mut f64, ldx22: *mut integer, theta: *mut f64, u1: *mut f64, ldu1: *mut integer, u2: *mut f64, ldu2: *mut integer, v1t: *mut f64, ldv1t: *mut integer, v2t: *mut f64, ldv2t: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dorcsd_.unwrap()(jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork, info)
            }

pub unsafe fn sorcsd2by1_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f32, ldx11: *mut integer, x21: *mut f32, ldx21: *mut integer, theta: *mut f32, u1: *mut f32, ldu1: *mut integer, u2: *mut f32, ldu2: *mut integer, v1t: *mut f32, ldv1t: *mut integer, work: *mut f32, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().sorcsd2by1_.unwrap()(jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, iwork, info)
            }

pub unsafe fn dorcsd2by1_(jobu1: *mut c_char, jobu2: *mut c_char, jobv1t: *mut c_char, m: *mut integer, p: *mut integer, q: *mut integer, x11: *mut f64, ldx11: *mut integer, x21: *mut f64, ldx21: *mut integer, theta: *mut f64, u1: *mut f64, ldu1: *mut integer, u2: *mut f64, ldu2: *mut integer, v1t: *mut f64, ldv1t: *mut integer, work: *mut f64, lwork: *mut integer, iwork: *mut integer, info: *mut integer) {
                dyload_lib().dorcsd2by1_.unwrap()(jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, iwork, info)
            }

pub unsafe fn sorghr_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sorghr_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn dorghr_(n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dorghr_.unwrap()(n, ilo, ihi, a, lda, tau, work, lwork, info)
            }

pub unsafe fn sormhr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f32, lda: *mut integer, tau: *mut f32, c__: *mut f32, ldc: *mut integer, work: *mut f32, lwork: *mut integer, info: *mut integer) {
                dyload_lib().sormhr_.unwrap()(side, trans, m, n, ilo, ihi, a, lda, tau, c__, ldc, work, lwork, info)
            }

pub unsafe fn dormhr_(side: *mut c_char, trans: *mut c_char, m: *mut integer, n: *mut integer, ilo: *mut integer, ihi: *mut integer, a: *mut f64, lda: *mut integer, tau: *mut f64, c__: *mut f64, ldc: *mut integer, work: *mut f64, lwork: *mut integer, info: *mut integer) {
                dyload_lib().dormhr_.unwrap()(side, trans, m, n, ilo, ihi, a, lda, tau, c__, ldc, work, lwork, info)
            }


    