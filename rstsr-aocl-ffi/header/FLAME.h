

#ifndef FLAME_H
#define FLAME_H

// Allow C++ users to include this header file in their source code. However,
// we make the extern "C" conditional on whether we're using a C++ compiler,
// since regular C compilers don't understand the extern "C" construct.
#ifdef __cplusplus
extern "C" {
#endif 

  // Include autoconf-related preprocessor defines.
// begin FLA_config.h
//Determines to enable FLA_ENABLE_EXTRA_SYMBOLS
#define FLA_ENABLE_EXTRA_SYMBOLS    1

#ifdef FLA_ENABLE_EXTRA_SYMBOLS
#define F77_FUNC(name,NAME) name ## _
#define F77_FUNC_(name,NAME) name ## _
#endif

// --- General options ---------------------------------------------------------

// Determines whether to enable various segments of code identified as
// providing non-critical functionality.
#define FLA_ENABLE_NON_CRITICAL_CODE   1

//Determines to enable BuiltinBlas


//Enables blis1 use of flamalloc
#define FLA_ENABLE_BLIS1_USE_OF_FLA_MALLOC 1

// Determines whether the LAPACK compatibility layer is included in libflame.
// NOTE: If lapack2flame is enabled, external-lapack-for-subproblems MUST
// be disabled!
#define FLA_ENABLE_LAPACK2FLAME    1

// Determines whether ILP64 enabled. only enabled when -DENABLE_ILP64 is passed with cmake


// Determines whether to enable external LAPACK for small subproblems.
// NOTE: If external-lapack-for-subproblems is enabled, (a) lapack2flame MUST
// be disabled, AND (b) external-lapack-interfaces MUST be enabled.


// Determines whether to enable interfaces to external LAPACK routines.
// NOTE: If external-lapack-interfaces is enabled, an LAPACK library will be
// required at link-time.
#define FLA_ENABLE_EXTERNAL_LAPACK_INTERFACES  1

// Determines whether to use control trees to select a reasonable FLAME
// variant and blocksize when level-3 BLAS front-ends are invoked.


// Determines whether to modify various segments of code needed for
// integrating libflame into Windows.


// Determines whether to define a portable FLA_Clock() in terms of
// gettimeofday() from time.h.
#define FLA_ENABLE_PORTABLE_TIMER  1


// --- Runtime error checking and debugging ------------------------------------

// Determines whether to enable internal runtime consistency checks of
// function parameters and return values.
#define FLA_ENABLE_INTERNAL_ERROR_CHECKING 1

// Encodes the default level of internal error checking chosen at
// configure-time.
// 1-minimal error cheking
// 2-full error cheking
// 3-no error cheking
#define FLA_INTERNAL_ERROR_CHECKING_LEVEL 2   

// Determines whether to enable the FLA_malloc()/FLA_free() memory counter
// by default.



// --- Multithreading and SuperMatrix ------------------------------------------

// Determines whether thread-specific blocks of code should be compiled.


// Encodes the type of multithreading chosen at configure-time.
// 1 - openmp
// 2 - pthreads
#define FLA_MULTITHREADING_MODEL 1

// Determines whether SuperMatrix-specific blocks of code should be compiled.



// --- BLAS and blocksizes -----------------------------------------------------

// Determines whether to enable CBLAS interfaces instead of Fortran-77
// interfaces to the BLAS.


// Determines whether to enable interfaces to internal/low-level libgoto
// symbols.


// Sets the default blocksize in the k dimension (used only if
// libgoto interfaces are disabled).


// Sets the default blocksize in the m dimension (used only if
// libgoto interfaces are disabled).


// Sets the default blocksize in the n dimension (used only if
// libgoto interfaces are disabled).



// --- Memory alignment --------------------------------------------------------

// Determines whether memory is aligned to user-requested boundaries.


// Sets the byte boundary used to align the starting address of all memory
// allocated dynamically through libflame. Only used if
// FLA_ENABLE_MEMORY_ALIGNMENT is defined.


// Determines whether to enable code that will increase FLA_Obj leading
// dimensions to ensure that matrix columns adhere to the alignment specified
// by FLA_MEMORY_ALIGNMENT_BOUNDARY.



// --- Fortran-77 compatibility ------------------------------------------------

// Determines whether the Fortran name-mangling suffix was determined at
// configure-time. This option is not used in Windows.


// Determines whether the Fortran 77 compiler appends an underscore to symbol
// names. Not used in Windows.


// Determines whether the Fortran 77 compiler appends an extra underscore to
// symbol names that already contain at least one underscore. Not used in
// Windows.


// Determines whether invocations to the BLAS within libflame are converted to
// uppercase symbols.


// Determines whether invocations to LAPACK within libflame are converted to
// uppercase symbols.



// --- Experimental/unsupported/broken options ---------------------------------

// Determines whether GPU-specific blocks of code should be compiled.


// Determines AMD optimized code path selection
#define FLA_ENABLE_AMD_OPT 1

//Detrmines library Version
#define FLA_LIBFLAME_VERSION   "5.1.0	Build	20250430"

// Determines OpenMP multithreading for AMD optimized code path 
#define FLA_OPENMP_MULTITHREADING  1

// Determins BLAS Extension API, GEMMT usage in libFLAME APIs
#define FLA_ENABLE_BLAS_EXT_GEMMT  1

// Enables FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME
#define FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME  1

//#define FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME 1
#define FLA_VECTOR_INTRINSIC_TYPE 0

// #define other missing macros
#define HAVE_ASSERT_H 1
#define HAVE_FCNTL_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LIBM 1
#define HAVE_MATH_H 1
#define HAVE_MEMORY_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRINGS_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1

#define PROTOTYPES 1
#define STDC_HEADERS 1
#define TIME_WITH_SYS_TIME 1
#define _GNU_SOURCE 1
#define __PROTOTYPES 1






// end FLA_config.h
// begin FLA_config_check.h


#ifdef FLA_ENABLE_WINDOWS_BUILD
#include <time.h> // skipped
#else
  // Handle the results of checking for time.h and sys/time.h
  #if TIME_WITH_SYS_TIME
#include <sys/time.h> // skipped
#include <time.h> // skipped
  #else
    #if HAVE_SYS_TIME_H
#include <sys/time.h> // skipped
    #else
#include <time.h> // skipped
    #endif
  #endif
#endif

// Handle the results of checking for ia64intrin.h. The contents of this header
// are required by the ia64 sections of FLA_Clock.c.
#ifdef HAVE_IA64INTRIN_H
#include <ia64intrin.h> // skipped
#endif

// end FLA_config_check.h

  // Include standard C header files.
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <stdarg.h> // skipped
#include <string.h> // skipped
  #ifdef FLA_ENABLE_WINDOWS_BUILD
#include <windows.h> // skipped
  #else
  #ifndef FLA_ENABLE_TIDSP
    // TI CG does not support POSIX
#include <unistd.h> // skipped
#include <fcntl.h> // skipped
#include <sys/types.h> // skipped
  #endif
  #endif
#include <math.h> // skipped
#include <float.h> // skipped
#include <signal.h> // skipped

  // Include f2c definitions.
// begin FLA_f2c.h

// f2c.h  --  Standard Fortran to C header file
//  barf  [ba:rf]  2.  "He suggested using FORTRAN, and everybody barfed."
//  - From The Shogakukan DICTIONARY OF NEW ENGLISH (Second edition)

#include <stdio.h> // skipped
#include <string.h> // skipped
#include <stdlib.h> // skipped
#include <math.h> // skipped
#ifndef __cplusplus
#include <complex.h> // skipped
#endif
#undef complex
// begin FLA_config.h
//Determines to enable FLA_ENABLE_EXTRA_SYMBOLS
#define FLA_ENABLE_EXTRA_SYMBOLS    1

#ifdef FLA_ENABLE_EXTRA_SYMBOLS
#define F77_FUNC(name,NAME) name ## _
#define F77_FUNC_(name,NAME) name ## _
#endif

// --- General options ---------------------------------------------------------

// Determines whether to enable various segments of code identified as
// providing non-critical functionality.
#define FLA_ENABLE_NON_CRITICAL_CODE   1

//Determines to enable BuiltinBlas


//Enables blis1 use of flamalloc
#define FLA_ENABLE_BLIS1_USE_OF_FLA_MALLOC 1

// Determines whether the LAPACK compatibility layer is included in libflame.
// NOTE: If lapack2flame is enabled, external-lapack-for-subproblems MUST
// be disabled!
#define FLA_ENABLE_LAPACK2FLAME    1

// Determines whether ILP64 enabled. only enabled when -DENABLE_ILP64 is passed with cmake


// Determines whether to enable external LAPACK for small subproblems.
// NOTE: If external-lapack-for-subproblems is enabled, (a) lapack2flame MUST
// be disabled, AND (b) external-lapack-interfaces MUST be enabled.


// Determines whether to enable interfaces to external LAPACK routines.
// NOTE: If external-lapack-interfaces is enabled, an LAPACK library will be
// required at link-time.
#define FLA_ENABLE_EXTERNAL_LAPACK_INTERFACES  1

// Determines whether to use control trees to select a reasonable FLAME
// variant and blocksize when level-3 BLAS front-ends are invoked.


// Determines whether to modify various segments of code needed for
// integrating libflame into Windows.


// Determines whether to define a portable FLA_Clock() in terms of
// gettimeofday() from time.h.
#define FLA_ENABLE_PORTABLE_TIMER  1


// --- Runtime error checking and debugging ------------------------------------

// Determines whether to enable internal runtime consistency checks of
// function parameters and return values.
#define FLA_ENABLE_INTERNAL_ERROR_CHECKING 1

// Encodes the default level of internal error checking chosen at
// configure-time.
// 1-minimal error cheking
// 2-full error cheking
// 3-no error cheking
#define FLA_INTERNAL_ERROR_CHECKING_LEVEL 2   

// Determines whether to enable the FLA_malloc()/FLA_free() memory counter
// by default.



// --- Multithreading and SuperMatrix ------------------------------------------

// Determines whether thread-specific blocks of code should be compiled.


// Encodes the type of multithreading chosen at configure-time.
// 1 - openmp
// 2 - pthreads
#define FLA_MULTITHREADING_MODEL 1

// Determines whether SuperMatrix-specific blocks of code should be compiled.



// --- BLAS and blocksizes -----------------------------------------------------

// Determines whether to enable CBLAS interfaces instead of Fortran-77
// interfaces to the BLAS.


// Determines whether to enable interfaces to internal/low-level libgoto
// symbols.


// Sets the default blocksize in the k dimension (used only if
// libgoto interfaces are disabled).


// Sets the default blocksize in the m dimension (used only if
// libgoto interfaces are disabled).


// Sets the default blocksize in the n dimension (used only if
// libgoto interfaces are disabled).



// --- Memory alignment --------------------------------------------------------

// Determines whether memory is aligned to user-requested boundaries.


// Sets the byte boundary used to align the starting address of all memory
// allocated dynamically through libflame. Only used if
// FLA_ENABLE_MEMORY_ALIGNMENT is defined.


// Determines whether to enable code that will increase FLA_Obj leading
// dimensions to ensure that matrix columns adhere to the alignment specified
// by FLA_MEMORY_ALIGNMENT_BOUNDARY.



// --- Fortran-77 compatibility ------------------------------------------------

// Determines whether the Fortran name-mangling suffix was determined at
// configure-time. This option is not used in Windows.


// Determines whether the Fortran 77 compiler appends an underscore to symbol
// names. Not used in Windows.


// Determines whether the Fortran 77 compiler appends an extra underscore to
// symbol names that already contain at least one underscore. Not used in
// Windows.


// Determines whether invocations to the BLAS within libflame are converted to
// uppercase symbols.


// Determines whether invocations to LAPACK within libflame are converted to
// uppercase symbols.



// --- Experimental/unsupported/broken options ---------------------------------

// Determines whether GPU-specific blocks of code should be compiled.


// Determines AMD optimized code path selection
#define FLA_ENABLE_AMD_OPT 1

//Detrmines library Version
#define FLA_LIBFLAME_VERSION   "5.1.0	Build	20250430"

// Determines OpenMP multithreading for AMD optimized code path 
#define FLA_OPENMP_MULTITHREADING  1

// Determins BLAS Extension API, GEMMT usage in libFLAME APIs
#define FLA_ENABLE_BLAS_EXT_GEMMT  1

// Enables FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME
#define FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME  1

//#define FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME 1
#define FLA_VECTOR_INTRINSIC_TYPE 0

// #define other missing macros
#define HAVE_ASSERT_H 1
#define HAVE_FCNTL_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LIBM 1
#define HAVE_MATH_H 1
#define HAVE_MEMORY_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRINGS_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1

#define PROTOTYPES 1
#define STDC_HEADERS 1
#define TIME_WITH_SYS_TIME 1
#define _GNU_SOURCE 1
#define __PROTOTYPES 1






// end FLA_config.h
// begin FLA_macro_defs.h
			





// --- Miscellaneous macro definitions -----------------------------------------
#ifndef FLA_MACRO_DEFS_H
#define FLA_MACRO_DEFS_H

#undef  NULL
#define NULL 0

#ifdef FLA_ENABLE_WINDOWS_BUILD
  #define restrict  __restrict
#endif

// --- Macro to enable/disable Thread Local Storage (TLS) for global variables -
#if defined(WINDOWS_FLA_SHARED_BUILD) && defined(WINDOWS_FLA_TEST)
 #define ENABLE_THREAD_LOCAL_STORAGE 0
 #define LIBFLAME_IMPORT __declspec(dllimport)
#else
 #if defined(FLA_ENABLE_AMD_OPT) && !defined FLA_ENABLE_SUPERMATRIX
   #define ENABLE_THREAD_LOCAL_STORAGE 1
 #else
   #define ENABLE_THREAD_LOCAL_STORAGE 0
 #endif
 #define LIBFLAME_IMPORT
#endif

#if ENABLE_THREAD_LOCAL_STORAGE
#ifdef FLA_ENABLE_WINDOWS_BUILD
#define TLS_CLASS_SPEC __declspec(thread)
#else
#define TLS_CLASS_SPEC __thread
#endif
#else
#define TLS_CLASS_SPEC
#endif

// --- Type-related macro definitions ------------------------------------------

// FLA_Bool
#undef  TRUE
#undef  FALSE
#define TRUE  1
#define FALSE 0

// FLA_Error (non-specific)
#define FLA_SUCCESS           (-1)
#define FLA_FAILURE           (-2)

// FLA_Quadrant
#define FLA_TL                 11
#define FLA_TR                 12
#define FLA_BL                 21
#define FLA_BR                 22

// FLA_Datatype
#define FLA_FLOAT             100
#define FLA_DOUBLE            101
#define FLA_COMPLEX           102
#define FLA_DOUBLE_COMPLEX    103
#define FLA_INT               104
#define FLA_CONSTANT          105

// FLA_Elemtype
#define FLA_MATRIX            150
#define FLA_SCALAR            151

// FLA_Side
#define FLA_TOP               200
#define FLA_BOTTOM            201
#define FLA_LEFT              210
#define FLA_RIGHT             211
#define FLA_SIDE_MASK         0x1

// FLA_Uplo
#define FLA_LOWER_TRIANGULAR  300
#define FLA_UPPER_TRIANGULAR  301
#define FLA_ZERO_MATRIX       310
#define FLA_FULL_MATRIX       311
#define FLA_UPLO_MASK         0x1

// FLA_Trans
#define FLA_NO_TRANSPOSE      400
#define FLA_TRANSPOSE         401
#define FLA_CONJ_TRANSPOSE    402
#define FLA_CONJ_NO_TRANSPOSE 403
#define FLA_TRANS_MASK        0x3

// FLA_Conj
#define FLA_NO_CONJUGATE      450
#define FLA_CONJUGATE         451

// FLA_Diag
#define FLA_UNIT_DIAG         500
#define FLA_NONUNIT_DIAG      501
#define FLA_ZERO_DIAG         502
#define FLA_DIAG_MASK         0x3

// FLA_Dimension
#define FLA_DIMENSION_M       600
#define FLA_DIMENSION_K       601
#define FLA_DIMENSION_N       602
#define FLA_DIMENSION_MIN     603

// FLA_Dimension_index
#define FLA_DIM_M_INDEX         0
#define FLA_DIM_K_INDEX         1
#define FLA_DIM_N_INDEX         2
#define FLA_DIM_MIN_INDEX       3
#define FLA_DIM_INDEX_MASK    0x3

// FLA_Pivot_type
#define FLA_NATIVE_PIVOTS     700
#define FLA_LAPACK_PIVOTS     701

// FLA_Direct
#define FLA_FORWARD           800
#define FLA_BACKWARD          801

// FLA_Store
#define FLA_COLUMNWISE        900
#define FLA_ROWWISE           901

// FLA_Matrix_type
#define FLA_FLAT             1000
#define FLA_HIER             1001

// FLA_Precision
#define FLA_SINGLE_PRECISION 1100
#define FLA_DOUBLE_PRECISION 1101

// FLA_Domain
#define FLA_REAL_DOMAIN      1200
#define FLA_COMPLEX_DOMAIN   1201

// FLA_Inv    
#define FLA_NO_INVERSE       1300
#define FLA_INVERSE          1301

// FLA_Evd_type
#define FLA_EVD_WITHOUT_VECTORS         1400
#define FLA_EVD_WITH_VECTORS            1401
#define FLA_EVD_OF_TRIDIAG_WITH_VECTORS 1402

// FLA_Svd_type
#define FLA_SVD_VECTORS_ALL           1500
#define FLA_SVD_VECTORS_MIN_COPY      1501
#define FLA_SVD_VECTORS_MIN_OVERWRITE 1502
#define FLA_SVD_VECTORS_NONE          1503

// FLA_Machval
#define FLA_MACH_START                1600
#define FLA_MACH_EPS                  1600
#define FLA_MACH_SFMIN                1601
#define FLA_MACH_BASE                 1602
#define FLA_MACH_PREC                 1603
#define FLA_MACH_NDIGMANT             1604
#define FLA_MACH_RND                  1605
#define FLA_MACH_EMIN                 1606
#define FLA_MACH_RMIN                 1607
#define FLA_MACH_EMAX                 1608
#define FLA_MACH_RMAX                 1609
#define FLA_MACH_EPS2                 1610
#define FLA_MACH_N_VALS                 11

// FLA_Diag_off
#define FLA_SUPER_DIAGONAL     ( 1)
#define FLA_MAIN_DIAGONAL        0
#define FLA_SUB_DIAGONAL       (-1)

// FLAME threading model
#define FLA_OPENMP              1
#define FLA_PTHREADS            2

// FLAME vector intrinsics types
#define FLA_NO_INTRINSICS       0
#define FLA_SSE_INTRINSICS      3

// FLAME internal error checking level
#define FLA_FULL_ERROR_CHECKING 2
#define FLA_MIN_ERROR_CHECKING  1
#define FLA_NO_ERROR_CHECKING   0

// FLA_Datatype_index
#define FLA_S_INDEX             0
#define FLA_D_INDEX             1
#define FLA_C_INDEX             2
#define FLA_Z_INDEX             3
#define FLA_DTYPE_INDEX_MASK  0x3

#define FLA_SMALL_LU_BLOCKSIZE 64
// Default blocksize if none are available.
#ifndef FLA_DEFAULT_M_BLOCKSIZE
  #define FLA_DEFAULT_M_BLOCKSIZE  128
#endif
#ifndef FLA_DEFAULT_K_BLOCKSIZE
  #define FLA_DEFAULT_K_BLOCKSIZE  128
#endif
#ifndef FLA_DEFAULT_N_BLOCKSIZE
  #define FLA_DEFAULT_N_BLOCKSIZE  128
#endif

// Blocksize for hierarchical storage of matrices for FLASH based
// external interfaces
#define FLA_EXT_HIER_BLOCKSIZE 128

// QR and LQ factorizations typically has an inner blocksize that corresponds
// to the length of the S (or T) block Householder matrix. For consistency, we
// define the ratio of the inner blocksize to the outer blocksize here, as it
// is used in several places. Note that other operations have analagous inner
// blocksizes, which we also define in terms of the outer storage blocksize,
// or in some cases such as Hessenberg, tridiagonal, and bidiagonal reductions,
// in terms of the system-wide default blocksize.
#define FLA_QR_INNER_TO_OUTER_B_RATIO      (0.25)
#define FLA_LQ_INNER_TO_OUTER_B_RATIO      (0.25)
#define FLA_LU_INNER_TO_OUTER_B_RATIO      (0.25)
#define FLA_UDDATE_INNER_TO_OUTER_B_RATIO  (0.25)
#define FLA_HESS_INNER_TO_OUTER_B_RATIO    (0.25)
#define FLA_TRIDIAG_INNER_TO_OUTER_B_RATIO (0.25)
#define FLA_BIDIAG_INNER_TO_OUTER_B_RATIO  (0.25)
#define FLA_CAQR_INNER_TO_OUTER_B_RATIO    (0.25)

// Matrix size thresholds for choosing unbloked non-FLA variant of QR for
// small matrices
#define FLA_GEQRF_STHRESH (32)
#define FLA_GEQRF_BLOCK_SIZE (32)
// Matrix size thresholds for choosing transposed QR for LQ 
#define FLA_DELQF_TRAN_THRESH (1280)

//POTRF, threshold numbers to chose paths for performance
#define FLA_POTRF_FLOAT_SMALL         (70)
#define FLA_POTRF_DOUBLE_SMALL        (75)

//GETRF , threshold numbers to chose paths for performance
#define FLA_GETRF_SMALL               (85)
#define FLA_GETRF_FLOAT               (1440)
#define FLA_GETRF_COMPLEX             (670)
#define FLA_GETRF_DOUBLE_COMPLEX      (1630)

#define FLA_SGETRF_SMALL_THRESH1      (117)
#define FLA_SGETRF_MEDIUM_THRESH0     (480)

#define FLA_SGETRF_SMALL_THRESH0      (7)
#define FLA_SGETRF_SMALL_AVX2_THRESH0      (31)
#define FLA_SGETRF_SMALL_AVX512_THRESH0    (156)

#define FLA_DGETRF_SMALL_THRESH0      (8)
#define FLA_DGETRF_SMALL_AVX2_THRESH0      (81)
#define FLA_DGETRF_SMALL_AVX512_THRESH0    (160)

#define FLA_ZGETRF_SMALL_THRESH      (100)

// GETRFNPI , these thresholds are used to chose between 3 algorithms to get best
// results in terms of perfmormance
#define FLA_MN_SIZE            (373321)
#define FLA_NFACT_PERCENT      (0.51)
#define FLA_FULL_DGER_CONSTANT (200)

// ORGQR , threshold numbers to chose paths for performance
#define FLA_DGEMV_DGER_SIMD_SMALL_THRESH   (128)
#define FLA_DGEMV_DGER_SIMD_SMALL_THRESH_M (6)
#define FLA_DGEMV_DGER_SIMD_AVX512_THRESH_M (25)
#define FLA_ZGEMV_ZGER_SIMD_AXV2_THRESH_M (8)
#define FLA_ZGEMV_ZGER_SIMD_AXV512_THRESH_M (49)
#define FLA_SSCAL_INLINE_SMALL          (512)
#define FLA_DSCAL_INLINE_SMALL          (512)
#define FLA_ZGERC_INLINE_SMALL_THRESH0  (128)
#define FLA_ZGERC_INLINE_SMALL_THRESH1  (32)
#define FLA_ZSCAL_INLINE_SMALL          (128)
#define FLA_ZUNGQR_BLOCK_SMALL_THRESH   (32)


#define FLA_ZLANGEM_SIMD_AVX512_THRESH_M (15)
#define FLA_CLANGEM_SIMD_AVX512_THRESH_M (15)

// DNRM2 threshold numbers to chose AVX kernel
#define FLA_DNRM2_SMALL_THRESH0  (15)

// GEQP3 , threshold numbers to chose paths for performance
#define FLA_IDAMAX_INLINE_SMALL_THRESH   (128)
#define FLA_DGEQP3_BLOCK_SMALL_THRESH    (32)
#define FLA_ZGEQP3_BLOCK_SMALL_THRESH    (32)

// --- Error-related macro definitions -----------------------------------------

// Useful when determining the relative index base of the error codes.
#define FLA_ERROR_CODE_MIN                    (-10)

// FLA_Error values.
#define FLA_INVALID_SIDE                      (-10)
#define FLA_INVALID_UPLO                      (-11)
#define FLA_INVALID_TRANS                     (-12)
#define FLA_INVALID_TRANS_GIVEN_DATATYPE      (-13)
#define FLA_INVALID_CONJ                      (-14)
#define FLA_INVALID_DIRECT                    (-15)
#define FLA_INVALID_STOREV                    (-16)
#define FLA_INVALID_DATATYPE                  (-17)
#define FLA_INVALID_INTEGER_DATATYPE          (-18)
#define FLA_INVALID_REAL_DATATYPE             (-19)
#define FLA_INVALID_COMPLEX_DATATYPE          (-20)
#define FLA_OBJECT_NOT_INTEGER                (-21)
#define FLA_OBJECT_NOT_REAL                   (-22)
#define FLA_OBJECT_NOT_COMPLEX                (-23)
#define FLA_OBJECT_NOT_SQUARE                 (-24)
#define FLA_OBJECT_NOT_SCALAR                 (-25)
#define FLA_OBJECT_NOT_VECTOR                 (-26)
#define FLA_INCONSISTENT_DATATYPES            (-27)
#define FLA_NONCONFORMAL_DIMENSIONS           (-28)
#define FLA_UNEQUAL_VECTOR_DIMS               (-29)
#define FLA_INVALID_HESSENBERG_INDICES        (-30)
#define FLA_NULL_POINTER                      (-32)
#define FLA_SPECIFIED_OBJ_DIM_MISMATCH        (-33)
#define FLA_INVALID_PIVOT_TYPE                (-35)
#define FLA_MALLOC_RETURNED_NULL_POINTER      (-37)
#define FLA_OBJECT_BASE_BUFFER_MISMATCH       (-38)
#define FLA_OBJECTS_NOT_VERTICALLY_ADJ        (-39)
#define FLA_OBJECTS_NOT_HORIZONTALLY_ADJ      (-40)
#define FLA_ADJACENT_OBJECT_DIM_MISMATCH      (-41)
#define FLA_OBJECTS_NOT_VERTICALLY_ALIGNED    (-42)
#define FLA_OBJECTS_NOT_HORIZONTALLY_ALIGNED  (-43)
#define FLA_INVALID_FLOATING_DATATYPE         (-44)
#define FLA_OBJECT_NOT_FLOATING_POINT         (-45)
#define FLA_INVALID_BLOCKSIZE_VALUE           (-46)
#define FLA_OPEN_RETURNED_ERROR               (-47)
#define FLA_LSEEK_RETURNED_ERROR              (-48)
#define FLA_CLOSE_RETURNED_ERROR              (-49)
#define FLA_UNLINK_RETURNED_ERROR             (-50)
#define FLA_READ_RETURNED_ERROR               (-51)
#define FLA_WRITE_RETURNED_ERROR              (-52)
#define FLA_INVALID_QUADRANT                  (-53)
#define FLA_NOT_YET_IMPLEMENTED               (-54)
#define FLA_EXPECTED_NONNEGATIVE_VALUE        (-55)
#define FLA_SUPERMATRIX_NOT_ENABLED           (-56)
#define FLA_UNDEFINED_ERROR_CODE              (-57)
#define FLA_INVALID_DIAG                      (-58)
#define FLA_INCONSISTENT_OBJECT_PRECISION     (-59)
#define FLA_INVALID_BLOCKSIZE_OBJ             (-60)
#define FLA_VECTOR_DIM_BELOW_MIN              (-61)
#define FLA_PTHREAD_CREATE_RETURNED_ERROR     (-63)
#define FLA_PTHREAD_JOIN_RETURNED_ERROR       (-64)
#define FLA_INVALID_ISGN_VALUE                (-65)
#define FLA_CHOL_FAILED_MATRIX_NOT_SPD        (-67)
#define FLA_INVALID_ELEMTYPE                  (-68)
#define FLA_POSIX_MEMALIGN_FAILED             (-69)
#define FLA_INVALID_SUBMATRIX_DIMS            (-70)
#define FLA_INVALID_SUBMATRIX_OFFSET          (-71)
#define FLA_OBJECT_NOT_SCALAR_ELEMTYPE        (-72)
#define FLA_OBJECT_NOT_MATRIX_ELEMTYPE        (-73)
#define FLA_ENCOUNTERED_NON_POSITIVE_NTHREADS (-74)
#define FLA_INVALID_CONJ_GIVEN_DATATYPE       (-75)
#define FLA_INVALID_COMPLEX_TRANS             (-76)
#define FLA_INVALID_REAL_TRANS                (-77)
#define FLA_INVALID_BLAS_TRANS                (-78)
#define FLA_INVALID_NONCONSTANT_DATATYPE      (-79)
#define FLA_OBJECT_NOT_NONCONSTANT            (-80)
#define FLA_OBJECT_DATATYPES_NOT_EQUAL        (-82)
#define FLA_DIVIDE_BY_ZERO                    (-83)
#define FLA_OBJECT_ELEMTYPES_NOT_EQUAL        (-84)
#define FLA_INVALID_PIVOT_INDEX_RANGE         (-85)
#define FLA_HOUSEH_PANEL_MATRIX_TOO_SMALL     (-86)
#define FLA_INVALID_OBJECT_LENGTH             (-87)
#define FLA_INVALID_OBJECT_WIDTH              (-88)
#define FLA_INVALID_ERROR_CHECKING_LEVEL      (-89)
#define FLA_ATTEMPTED_OVER_REPART_2X2         (-90)
#define FLA_ATTEMPTED_OVER_REPART_2X1         (-91)
#define FLA_ATTEMPTED_OVER_REPART_1X2         (-92)
#define FLA_EXTERNAL_LAPACK_NOT_IMPLEMENTED   (-93)
#define FLA_INVALID_ROW_STRIDE                (-94)
#define FLA_INVALID_COL_STRIDE                (-95)
#define FLA_INVALID_STRIDE_COMBINATION        (-96)
#define FLA_INVALID_VECTOR_DIM                (-97)
#define FLA_EXPECTED_ROW_VECTOR               (-98)
#define FLA_EXPECTED_COL_VECTOR               (-99)
#define FLA_INVALID_INVERSE                   (-100)
#define FLA_MALLOC_GPU_RETURNED_NULL_POINTER  (-101)
#define FLA_INVALID_EVD_TYPE                  (-102)
#define FLA_INVALID_SVD_TYPE                  (-103)
#define FLA_INVALID_MACHVAL                   (-104)
#define FLA_INVALID_DIAG_OFFSET               (-105)
#define FLA_EXPECTED_COL_STORAGE              (-106)
#define FLA_EXPECTED_ROW_STORAGE              (-107)
#define FLA_LAPAC2FLAME_INVALID_RETURN        (-108)
#define FLA_INVALID_SVD_TYPE_COMBINATION      (-109)
#define FLA_INVALID_SVD_TYPE_AND_TRANS_COMBINATION (-110)
#define FLA_OBJECT_NOT_COMPARABLE             (-111)

// Necessary when computing whether an error code is defined.
#define FLA_ERROR_CODE_MAX                    (-111)

// Internal string matrix limits.
#define FLA_MAX_NUM_ERROR_MSGS                 150
#define FLA_MAX_ERROR_MSG_LENGTH               200

// Error code translation and output macro definition.
#define FLA_Check_error_code( code ) \
        FLA_Check_error_code_helper( code, __FILE__, __LINE__ )



// --- Common functions implemented as macros ----------------------------------

#define fla_min( x, y )    \
({                         \
   __typeof__(x) _x = (x); \
   __typeof__(y) _y = (y); \
   _x < _y ? _x : _y;      \
})

#define fla_max( x, y )    \
({                         \
   __typeof__(x) _x = (x); \
   __typeof__(y) _y = (y); \
   _x > _y ? _x : _y;      \
})

#undef signof
#define signof( a, b ) ( (b) >= 0 ? (a) : -(a) )

#ifndef __cplusplus

 #undef exchange
 #define exchange( a, b, temp ) { temp = a; a = b; b = temp; }

#endif

// --- Other macro definitions -------------------------------------------------

#define FLA_NEGATE( a ) \
        ( a.base == FLA_ONE.base ? FLA_MINUS_ONE : FLA_ONE )

#endif

// end FLA_macro_defs.h
// begin FLA_type_defs.h




#ifndef FLA_TYPE_DEFS_H
#define FLA_TYPE_DEFS_H

#ifdef __cplusplus
// For C++, include stdint.h.
#include <stdint.h> // skipped
#elif __STDC_VERSION__ >= 199901L
// For C99 (or later), include stdint.h.
#include <stdint.h> // skipped
#else
// When stdint.h is not available, manually typedef the types we will use.
#ifdef _WIN32
typedef          __int32  int32_t;
typedef unsigned __int32 uint32_t;
typedef          __int64  int64_t;
typedef unsigned __int64 uint64_t;
#else
#error "Attempting to compile on pre-C99 system without stdint.h."
#endif
#endif

#if defined(FLA_ENABLE_ILP64)
typedef int64_t integer;
typedef uint64_t uinteger;
#else
typedef int integer;
typedef unsigned long uinteger;
#endif



#if   FLA_MULTITHREADING_MODEL == FLA_OPENMP
#ifdef FLA_ENABLE_TIDSP
#include <ti/omp/omp.h> // skipped
#else
#include <omp.h> // skipped
#endif
#elif FLA_MULTITHREADING_MODEL == FLA_PTHREADS
#include <pthread.h> // skipped
#endif


// --- Complex type definitions -----------------------------------------------

#ifndef _DEFINED_SCOMPLEX
#define _DEFINED_SCOMPLEX
typedef struct scomplex
{
  float real, imag;
} scomplex;
#endif

#ifndef _DEFINED_DCOMPLEX
#define _DEFINED_DCOMPLEX
typedef struct dcomplex
{
  double real, imag;
} dcomplex;
#endif


// --- Parameter and return type definitions ----------------------------------

typedef int FLA_Bool;
typedef int FLA_Error;
typedef int FLA_Quadrant;
typedef int FLA_Datatype;
typedef int FLA_Elemtype;
typedef int FLA_Side;
typedef int FLA_Uplo;
typedef int FLA_Trans;
typedef int FLA_Conj;
typedef int FLA_Diag;
typedef int FLA_Dimension;
typedef int FLA_Pivot_type;
typedef int FLA_Direct;
typedef int FLA_Store;
typedef int FLA_Matrix_type;
typedef int FLA_Precision;
typedef int FLA_Domain;
typedef int FLA_Inv;
typedef int FLA_Evd_type;
typedef int FLA_Svd_type;
typedef int FLA_Machval;
typedef int FLA_Diag_off;

#ifndef _DEFINED_FLA_DIM_T
#define _DEFINED_FLA_DIM_T
typedef uinteger fla_dim_t;
#endif

// --- Intrinsic/assembly definitions ----------------------------------------

#if FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#include "pmmintrin.h" // skipped

//typedef double v2df __attribute__ ((vector_size (16)));

typedef union
{
    __m128  v; 
    float   f[4];
} v4sf_t;

typedef union
{
    __m128d v; 
    double  d[2];
} v2df_t;

#endif

// --- FLAME object definitions -----------------------------------------------

typedef struct FLA_Lock_s     FLA_Lock;

//#ifdef FLA_ENABLE_MULTITHREADING
struct FLA_Lock_s
{
  // Implementation-specific lock object
#if   FLA_MULTITHREADING_MODEL == FLA_OPENMP
  omp_lock_t       lock;
#elif FLA_MULTITHREADING_MODEL == FLA_PTHREADS
  pthread_mutex_t  lock;
#endif
};
//#endif

#ifdef FLA_ENABLE_SUPERMATRIX
typedef int                   FLASH_Verbose;
typedef int                   FLASH_Data_aff;

typedef struct FLASH_Queue_s  FLASH_Queue;
typedef struct FLASH_Task_s   FLASH_Task;
typedef struct FLASH_Dep_s    FLASH_Dep;
#endif
typedef struct FLASH_Thread_s FLASH_Thread;

typedef struct FLA_Obj_struct
{
  // Basic object description fields
  FLA_Datatype  datatype;
  FLA_Elemtype  elemtype;
  fla_dim_t         m;
  fla_dim_t         n;
  fla_dim_t         rs;
  fla_dim_t         cs;
  fla_dim_t         m_inner;
  fla_dim_t         n_inner;
  unsigned long id;
  fla_dim_t         m_index;
  fla_dim_t         n_index;

  fla_dim_t         n_elem_alloc;
  void*         buffer;
  int           buffer_info;

  FLA_Uplo      uplo;

#ifdef FLA_ENABLE_SUPERMATRIX
  // Fields for supermatrix
  int           n_read_blocks;
  int           n_write_blocks;

  // All the tasks that previously read this block, anti-dependency
  int           n_read_tasks;
  FLASH_Dep*    read_task_head;
  FLASH_Dep*    read_task_tail;

  // Task that last overwrote this block, flow dependency
  FLASH_Task*   write_task;
#endif
} FLA_Base_obj;

typedef struct FLA_Obj_view
{
  // Basic object view description fields
  fla_dim_t         offm;
  fla_dim_t         offn;
  fla_dim_t         m;
  fla_dim_t         n;
  
  fla_dim_t         m_inner;
  fla_dim_t         n_inner;

  FLA_Base_obj* base;

} FLA_Obj;

#ifdef FLA_ENABLE_SUPERMATRIX
struct FLASH_Queue_s
{
  // Number of tasks currently in queue
  unsigned int  n_tasks;

  // Pointers to head (front) and tail (back) of queue
  FLASH_Task*   head;
  FLASH_Task*   tail;
};

struct FLASH_Task_s
{
  // Execution information
  int           n_ready;

  // Labels
  int           order;
  int           queue;
  int           height;
  int           thread;
  int           cache;
  FLA_Bool      hit;
      
  // Function pointer
  void*         func;

  // Control tree pointer
  void*         cntl;

  // Name of task
  char*         name;

  // GPU enabled task
  FLA_Bool      enabled_gpu;

  // Integer arguments
  int           n_int_args;
  int*          int_arg;

  // Constant FLA_Obj arguments
  int           n_fla_args;
  FLA_Obj*      fla_arg;

  // Input FLA_Obj arguments
  int           n_input_args;
  FLA_Obj*      input_arg;

  // Output FLA_Obj argument
  int           n_output_args;
  FLA_Obj*      output_arg;

  // Number of blocks within all macroblocks
  int           n_macro_args;

  // Number of write after read dependencies
  int           n_war_args;

  // Dependence information
  int           n_dep_args;
  FLASH_Dep*    dep_arg_head;
  FLASH_Dep*    dep_arg_tail;
  
  // Support for a doubly linked list of tasks
  FLASH_Task*   prev_task;
  FLASH_Task*   next_task;

  // Support for a doubly linked list for wait queue
  FLASH_Task*   prev_wait;
  FLASH_Task*   next_wait;
};

struct FLASH_Dep_s
{
  // Task yielding dependency
  FLASH_Task*   task;

  // Support for linked list of FLASH_Deps
  FLASH_Dep*    next_dep;
};
#endif // FLA_ENABLE_SUPERMATRIX

struct FLASH_Thread_s
{
  // The thread's unique identifier
  int       id;

  // Pointer to variables needed to execute SuperMatrix mechanism
  void*     args;

#if FLA_MULTITHREADING_MODEL == FLA_PTHREADS
  // The thread object. Only needed for the POSIX threads implementation.
  pthread_t pthread_obj;
#endif
};

#endif // FLA_TYPE_DEFS_H
// end FLA_type_defs.h
// begin aocldtl.h


#ifndef _AOCLDTL_H_
#define _AOCLDTL_H_

// begin aocldtlcf.h


#ifndef _AOCLDTLCF_H_
#define _AOCLDTLCF_H_


#define AOCL_DTL_TRACE_ENABLE 0


#define AOCL_DTL_DUMP_ENABLE 0


#define AOCL_DTL_LOG_ENABLE 0



#define AOCL_DTL_TRACE_LEVEL AOCL_DTL_LEVEL_TRACE_5

// A workaround for autotools and cmake to work together. To be removed on complete migration to
// cmake and defauilt values of AOCL_DTL_LOG_ENABLE and AOCL_DTL_TRACE_ENABLE to be set to 1. In
// order to fully allow enabling and disbling of logs and trace from cmake commandline
#if AOCL_DTL_LOG_ENABLE
#define LF_AOCL_DTL_LOG_ENABLE 1
#else
#define LF_AOCL_DTL_LOG_ENABLE 0
#endif

#if AOCL_DTL_TRACE_ENABLE
#define LF_AOCL_DTL_TRACE_ENABLE 1
#else
#define LF_AOCL_DTL_TRACE_ENABLE 0
#endif


#define AOCL_DTL_LEVEL_ALL (14)
#define AOCL_DTL_LEVEL_TRACE_8 (13)
#define AOCL_DTL_LEVEL_TRACE_7 (12) 
#define AOCL_DTL_LEVEL_TRACE_6 (11)
#define AOCL_DTL_LEVEL_TRACE_5 (10)
#define AOCL_DTL_LEVEL_TRACE_4 (9)
#define AOCL_DTL_LEVEL_TRACE_3 (8)
#define AOCL_DTL_LEVEL_TRACE_2 (7)
#define AOCL_DTL_LEVEL_TRACE_1 (6) 
#define AOCL_DTL_LEVEL_VERBOSE (5)
#define AOCL_DTL_LEVEL_INFO (4)
#define AOCL_DTL_LEVEL_MINOR (3)
#define AOCL_DTL_LEVEL_MAJOR (2)
#define AOCL_DTL_LEVEL_CRITICAL (1)

#define AOCL_DTL_TRACE_FILE "aocldtl_trace.txt"
#define AOCL_DTL_AUTO_TRACE_FILE "aocldtl_auto_trace.rawfile"
#define AOCL_DTL_LOG_FILE "aocldtl_log.txt"


#define AOCL_CHAR_DATA_TYPE (1)


#define AOCL_UINT16_DATA_TYPE (2)


#define AOCL_STRING_DATA_TYPE (3)


#define AOCL_UINT32_DATA_TYPE (4)


#define AOCL_LOG_HEX_VALUE ('x')


#define AOCL_LOG_DECIMAL_VALUE ('d')

#endif 


// end aocldtlcf.h
// begin aoclflist.h


#ifndef _AOCL_FLIST_H_
#define _AOCL_FLIST_H_

// begin aoclfal.h


#ifndef _AOCL_FAL_H_
#define _AOCL_FAL_H_


#define AOCL_FAL_SUCCESS 0
#define AOCL_FAL_CLOSE_ERROR -1
#define AOCL_FAL_READ_ERROR -2
#define AOCL_FAL_WRITE_ERROR -3
#define AOCL_FAL_EOF_ERROR -6
#define AOCL_FAL_FERROR -7
// begin aocltpdef.h


#ifndef AOCL_TYPEDEF_H_
#define AOCL_TYPEDEF_H_

#include <math.h> // skipped
#include <memory.h> // skipped
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <time.h> // skipped
#ifndef _WIN32
#include <sys/types.h> // skipped
#else
typedef int pid_t;
#endif

typedef double Double;
typedef float Float;
typedef void Void;
typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned int uint32;
typedef unsigned long uint64;
typedef uint8 *STRING;
typedef unsigned char Bool;
typedef char int8;
typedef signed long int int32;
typedef short int int16;

typedef Void *AOCL_HANDLE;
typedef pid_t AOCL_TID;

#endif 


// end aocltpdef.h


#define AOCL_FAL_FILE FILE


int32 AOCL_FAL_Close(AOCL_FAL_FILE *fpFilePointer);

int32 AOCL_FAL_Error(AOCL_FAL_FILE *fpFilePointer);

AOCL_FAL_FILE *AOCL_FAL_Open(const int8 *pchFileName, const int8 *pchMode);

int32 AOCL_FAL_Read(void *pvBuffer, int32 i32Size, int32 i32Count, AOCL_FAL_FILE *fpFilePointer);

int32 AOCL_FAL_Write(const void *pvBuffer, int32 i32Size, int32 iCount,
                     AOCL_FAL_FILE *fpFilePointer);

#endif 


// end aoclfal.h
// begin aocltpdef.h


#ifndef AOCL_TYPEDEF_H_
#define AOCL_TYPEDEF_H_

#include <math.h> // skipped
#include <memory.h> // skipped
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <time.h> // skipped
#ifndef _WIN32
#include <sys/types.h> // skipped
#else
typedef int pid_t;
#endif

typedef double Double;
typedef float Float;
typedef void Void;
typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned int uint32;
typedef unsigned long uint64;
typedef uint8 *STRING;
typedef unsigned char Bool;
typedef char int8;
typedef signed long int int32;
typedef short int int16;

typedef Void *AOCL_HANDLE;
typedef pid_t AOCL_TID;

#endif 


// end aocltpdef.h

typedef struct AOCL_FLIST_Node_t
{
    AOCL_TID tid;
    AOCL_FAL_FILE *fp;
    struct AOCL_FLIST_Node_t *pNext;
} AOCL_FLIST_Node;

Bool AOCL_FLIST_IsEmpty(AOCL_FLIST_Node *plist);

AOCL_FAL_FILE *AOCL_FLIST_GetFile(AOCL_FLIST_Node *plist, AOCL_TID tid);

AOCL_FAL_FILE *AOCL_FLIST_AddFile(const int8 *pchFilePrefix, AOCL_FLIST_Node **plist, AOCL_TID tid);

void AOCL_FLIST_CloseFile(AOCL_FLIST_Node *plist, AOCL_TID tid);

void AOCL_FLIST_CloseAll(AOCL_FLIST_Node *plist);

#endif 


// end aoclflist.h
// begin aocltpdef.h


#ifndef AOCL_TYPEDEF_H_
#define AOCL_TYPEDEF_H_

#include <math.h> // skipped
#include <memory.h> // skipped
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <time.h> // skipped
#ifndef _WIN32
#include <sys/types.h> // skipped
#else
typedef int pid_t;
#endif

typedef double Double;
typedef float Float;
typedef void Void;
typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned int uint32;
typedef unsigned long uint64;
typedef uint8 *STRING;
typedef unsigned char Bool;
typedef char int8;
typedef signed long int int32;
typedef short int int16;

typedef Void *AOCL_HANDLE;
typedef pid_t AOCL_TID;

#endif 


// end aocltpdef.h

#define TRACE_TYPE_FENTRY (1)
#define TRACE_TYPE_FEXIT (2)
#define TRACE_TYPE_LOG (3)
#define TRACE_TYPE_RAW (4)


#define AOCL_DEBUGPRINT printf


#if(LF_AOCL_DTL_TRACE_ENABLE || AOCL_DTL_DUMP_ENABLE || LF_AOCL_DTL_LOG_ENABLE)
#define AOCL_DTL_INITIALIZE_ENABLE
#endif

#if LF_AOCL_DTL_TRACE_ENABLE

#define AOCL_DTL_TRACE_ENTRY(LogLevel) \
    DTL_Trace(LogLevel, TRACE_TYPE_FENTRY, __FILE__, __FUNCTION__, __LINE__, NULL);
#else

#define AOCL_DTL_TRACE_ENTRY(LogLevel)
#endif

#if LF_AOCL_DTL_TRACE_ENABLE

#define AOCL_DTL_TRACE_EXIT(LogLevel) \
    DTL_Trace(LogLevel, TRACE_TYPE_FEXIT, __FILE__, __FUNCTION__, __LINE__, NULL);

#define AOCL_DTL_TRACE_EXIT_ERR(LogLevel, Message) \
    DTL_Trace(LogLevel, TRACE_TYPE_FEXIT, __FILE__, __FUNCTION__, __LINE__, Message);
#else

#define AOCL_DTL_TRACE_EXIT(LogLevel)
#define AOCL_DTL_TRACE_EXIT_ERR(LogLevel, Message)
#endif

#if AOCL_DTL_DUMP_ENABLE

#define AOCL_DTL_DUMP(LogLevel, Buffer, BufferSize, DataType, String, OutputType) \
                                     \
    DTL_DumpData(LogLevel, Buffer, BufferSize, DataType, String, OutputType);
#else

#define AOCL_DTL_DUMP(Buffer, BufferSize, DataType, String, OutputType)

#endif

#if LF_AOCL_DTL_LOG_ENABLE

#define AOCL_DTL_LOG(LogLevel, Message) \
    DTL_Trace(LogLevel, TRACE_TYPE_LOG, __FILE__, __FUNCTION__, __LINE__, Message);
#else

#define AOCL_DTL_LOG(LogLevel, Message)
#endif


#ifdef AOCL_DTL_INITIALIZE_ENABLE
#define AOCL_DTL_INITIALIZE(CURRENT_LOG_LEVEL) DTL_Initialize(CURRENT_LOG_LEVEL);
#else

#define AOCL_DTL_INITIALIZE(CURRENT_LOG_LEVEL)
#endif


#ifdef AOCL_DTL_INITIALIZE_ENABLE
#define AOCL_DTL_UNINITIALIZE() DTL_Uninitialize();
#else

#define AOCL_DTL_UNINITIALIZE()
#endif

#ifdef AOCL_DTL_INITIALIZE_ENABLE

void DTL_Initialize(uint32 ui32CurrentLogLevel);
void DTL_Uninitialize(void);
#endif

#if(LF_AOCL_DTL_TRACE_ENABLE || LF_AOCL_DTL_LOG_ENABLE)

void DTL_Trace(uint8 ui8LogLevel, uint8 ui8LogType, const int8 *pi8FileName,
               const int8 *pi8FunctionName, uint32 ui32LineNumber, const int8 *pi8Message);

#endif

#if AOCL_DTL_DUMP_ENABLE

void DTL_DumpData(uint8 ui8LogLevel, void *pvBuffer, uint32 ui32BufferSize, uint8 ui8DataType,
                  int8 *pi8Message, int8 i8OutputType);
#endif

#endif 


// end aocldtl.h
// begin FLA_progress.h


#ifdef __cplusplus
  // For C++, include stdint.h.
#include <stdint.h> // skipped
#elif __STDC_VERSION__ >= 199901L
  // For C99 (or later), include stdint.h.
#include <stdint.h> // skipped
#else
  // When stdint.h is not available, manually typedef the types we will use.
#ifdef _WIN32
typedef          __int32  int32_t;
typedef unsigned __int32 uint32_t;
typedef          __int64  int64_t;
typedef unsigned __int64 uint64_t;
#else
#error "Attempting to compile on pre-C99 system without stdint.h."
#endif
#endif

#ifdef FLA_ENABLE_ILP64
typedef int64_t integer;
typedef uint64_t uinteger;
#else
typedef int integer;
typedef unsigned long int uinteger;
#endif

#define AOCL_FLA_PROGRESS_H 1
typedef int (*aocl_fla_progress_callback)(
const char* const api,
const integer lenapi,
const integer* const progress,
const integer* const current_thread,
const integer* const total_threads
);

void aocl_fla_set_progress(aocl_fla_progress_callback func);
extern volatile aocl_fla_progress_callback aocl_fla_progress_glb_ptr;
#ifndef FLA_ENABLE_WINDOWS_BUILD  
__attribute__((weak))
int aocl_fla_progress(
const char* const api,
const integer lenapi,
const integer* const progress,
const integer* const current_thread,
const integer* const total_threads
);
#endif
// Macro to send update using api name
#define AOCL_FLA_PROGRESS_FUNC_PTR(api,lenapi,progress,tid,nt) \
         if((*aocl_fla_progress_ptr) (api,lenapi, progress, tid, nt)){\
            printf("stop computation \n");\
			exit(0);\
         }\

#if FLA_OPENMP_MULTITHREADING

#define AOCL_FLA_PROGRESS_VAR \
        aocl_fla_progress_callback aocl_fla_progress_ptr = aocl_fla_progress_glb_ptr;\
        static TLS_CLASS_SPEC integer progress_step_count = 0;\
        static TLS_CLASS_SPEC integer progress_thread_id = 0;\
        static TLS_CLASS_SPEC integer progress_total_threads = 1;\
        progress_thread_id = omp_get_thread_num();\
        progress_total_threads = omp_get_num_threads();\

#else

#define AOCL_FLA_PROGRESS_VAR \
        aocl_fla_progress_callback aocl_fla_progress_ptr = aocl_fla_progress_glb_ptr;\
        static TLS_CLASS_SPEC integer progress_step_count = 0;\
        static TLS_CLASS_SPEC integer progress_thread_id = 0;\
        static TLS_CLASS_SPEC integer progress_total_threads = 1;\
        progress_thread_id = 0;\
        progress_total_threads = 1;\

#endif
// end FLA_progress.h
// begin FLA_Context.h


#pragma once
#ifndef FLA_CONTEXT_H
#define FLA_CONTEXT_H

#include <ctype.h> // skipped
// -- Type and macro definitions -----------------------------------------------

#if defined(FLA_NO_CONTEXT)

// This branch defines a pthread-like API, fla_pthread_*(), and implements it
// in terms of "dummy" code that doesn't depend on POSIX threads or any other
// threading mechanism.
// NOTE: THIS CODE DOES NOT IMPLEMENT THREADING AND IS NOT THREAD-SAFE!

// -- pthread types --

typedef int fla_pthread_mutex_t;
typedef int fla_pthread_once_t;

// -- pthreads macros --

#define FLA_PTHREAD_MUTEX_INITIALIZER 0
#define FLA_PTHREAD_ONCE_INIT 0

#elif defined(_MSC_VER) // !defined(FLA_NO_CONTEXT)

#include <windows.h> // skipped
// This branch defines a pthread-like API, fla_pthread_*(), and implements it
// in terms of Windows API calls.

// -- pthread types --
typedef SRWLOCK   fla_pthread_mutex_t;
typedef INIT_ONCE fla_pthread_once_t;

// -- pthreads macros --

#define FLA_PTHREAD_MUTEX_INITIALIZER SRWLOCK_INIT
#define FLA_PTHREAD_ONCE_INIT INIT_ONCE_STATIC_INIT

#else // !defined(FLA_NO_CONTEXT) && !defined(_MSC_VER)

#include <pthread.h> // skipped

// This branch defines a pthreads-like API, fla_pthreads_*(), and implements it
// in terms of the corresponding pthreads_*() types, macros, and function calls.

// -- pthread types --

typedef pthread_mutex_t fla_pthread_mutex_t;
typedef pthread_once_t  fla_pthread_once_t;

// -- pthreads macros --

#define FLA_PTHREAD_MUTEX_INITIALIZER PTHREAD_MUTEX_INITIALIZER
#define FLA_PTHREAD_ONCE_INIT PTHREAD_ONCE_INIT

#endif

// -- Function definitions -----------------------------------------------------

// -- pthread_mutex_*() --

int fla_pthread_mutex_lock(fla_pthread_mutex_t *mutex);

int fla_pthread_mutex_unlock(fla_pthread_mutex_t *mutex);

// -- pthread_once() --

void fla_pthread_once(fla_pthread_once_t *once, void (*init)(void));


typedef enum
{
    // NOTE: The C language standard guarantees that the first enum value
    // starts at 0.

    FLA_ARCH_GENERIC,
    FLA_ARCH_SSE2,
    FLA_ARCH_AVX,
    FLA_ARCH_AVX2,
    FLA_ARCH_AVX512

} fla_arch_t;


typedef struct _fla_context
{
    // num of threads
    int num_threads;
    FLA_Bool    is_fma;
    FLA_Bool    is_avx2;
    FLA_Bool    is_avx512;
    fla_arch_t  arch_id;
    FLA_Bool    libflame_mt; // num_threads is set using libFLAME environment variable or using OpenMP.
} fla_context;

#define FLA_CONTEXT_INITIALIZER \
    { \
      .num_threads = -1, \
      .is_fma      = FALSE, \
      .is_avx2     = FALSE, \
      .is_avx512   = FALSE, \
      .libflame_mt = FALSE, \
    }

extern fla_context fla_global_context;

// Macros for checking the architecture
#define FLA_IS_MIN_ARCH_ID(ARCH_ID) (fla_global_context.arch_id >= ARCH_ID)
#define FLA_IS_ARCH_ID(ARCH_ID) (fla_global_context.arch_id == ARCH_ID)

typedef struct _fla_tl_context
{
    // num of threads
    int num_threads;
    FLA_Bool    libflame_mt; // num_threads is set using libFLAME environment variable or using OpenMP.
} fla_tl_context_t;

#define FLA_TL_CONTEXT_INITIALIZER \
    { \
      .num_threads = -1, \
      .libflame_mt = FALSE, \
    }

extern TLS_CLASS_SPEC fla_tl_context_t fla_tl_context;


void aocl_fla_init();


void aocl_fla_finalize();

#endif // FLA_CONTEXT_H
// end FLA_Context.h
// begin FLA_Threads.h


#ifdef FLA_OPENMP_MULTITHREADING

#ifndef API_ID_DEFINED
#define API_ID_DEFINED


typedef enum
{
    FLA_LABRD = 0,
    FLA_ORMQR,
    FLA_ORMLQ
} API_ID;
#endif


void FLA_Thread_get_subrange( int thread_ID, int num_threads, integer range, integer *sub_range, integer *index );
void FLA_Thread_optimum( API_ID family, int *actual_num_threads);

#endif// end FLA_Threads.h

#ifndef F2C_INCLUDE
#define F2C_INCLUDE

#define c_div(c, a, b) cladiv_f2c_(c, a, b)
#define z_div(c, a, b) zladiv_f2c_(c, a, b)

#ifdef FLA_ENABLE_F2C_DOTC
#define cdotc_f2c_ cdotc_
#define zdotc_f2c_ zdotc_

#define cdotu_f2c_ cdotu_
#define zdotu_f2c_ zdotu_
#endif

//DTL purpose
#ifdef FLA_ENABLE_ILP64
#define FLA_IS "lld"
#else
#define FLA_IS "d"
#endif

#if LF_AOCL_DTL_LOG_ENABLE
	
	double FLA_Clock();
	void get_time_unit(char * , double *);

	#define BUFF_SIZE 256
	#define BUFFER buffer
	
	#define AOCL_DTL_SNPRINTF(...) snprintf(BUFFER,BUFF_SIZE,__VA_ARGS__)

#else
	#define AOCL_DTL_SNPRINTF(...)

#endif


#if LF_AOCL_DTL_TRACE_ENABLE
	extern TLS_CLASS_SPEC int AOCL_TRACE_COUNTER;
	#define AOCL_DTL_TRACE_ENTRY_INDENT AOCL_DTL_TRACE_ENTRY(AOCL_TRACE_COUNTER++);
	#define AOCL_DTL_TRACE_EXIT_INDENT 	AOCL_DTL_TRACE_EXIT(--AOCL_TRACE_COUNTER);
#else
	#define AOCL_DTL_TRACE_ENTRY_INDENT 
	#define AOCL_DTL_TRACE_EXIT_INDENT
#endif



#if LF_AOCL_DTL_LOG_ENABLE & LF_AOCL_DTL_TRACE_ENABLE
	#define AOCL_DTL_TRACE_LOG_INIT 						\
		AOCL_DTL_TRACE_ENTRY_INDENT							\
		double api_start_time = 0.0;      					\
		char buffer[256],unit[3]=" s";    					\
		double api_duration;              					\
		api_start_time = FLA_Clock();

	#define AOCL_DTL_TRACE_LOG_EXIT    						\
		api_duration = FLA_Clock()-api_start_time;      	\
		get_time_unit(unit, &api_duration);					\
		snprintf(buffer+strlen(buffer), 					\
			sizeof(buffer) - strlen(buffer),				\
			" time: %06.2f%s ",api_duration,unit);			\
		AOCL_DTL_LOG(AOCL_DTL_LEVEL_INFO, buffer);   		\
		AOCL_DTL_TRACE_EXIT_INDENT

#elif LF_AOCL_DTL_LOG_ENABLE
	#define AOCL_DTL_TRACE_LOG_INIT 						\
		double api_start_time = 0.0;    					\
		char buffer[256],unit[3]=" s";  					\
		double api_duration;            					\
		api_start_time = FLA_Clock();

	#define AOCL_DTL_TRACE_LOG_EXIT    						\
		api_duration = FLA_Clock()-api_start_time;      	\
		get_time_unit(unit,  &api_duration);				\
		snprintf(buffer+strlen(buffer), 					\
				sizeof(buffer) - strlen(buffer),			\
				" time: %06.2f%s ", api_duration,unit);		\
		AOCL_DTL_LOG(AOCL_DTL_LEVEL_INFO, buffer);   

#elif LF_AOCL_DTL_TRACE_ENABLE
	#define AOCL_DTL_TRACE_LOG_INIT 						\
		AOCL_DTL_TRACE_ENTRY_INDENT

	#define AOCL_DTL_TRACE_LOG_EXIT  						\
		AOCL_DTL_TRACE_EXIT_INDENT

#else
	#define AOCL_DTL_TRACE_LOG_INIT 
	#define AOCL_DTL_TRACE_LOG_EXIT

#endif


#define M_PTR(A, r, c, lda) ((A) + (((c) * (lda)) + (r)))

// LDLT Factorization for packed matrices uses different threshold to choose
// between blocked /  unblocked variants and also the blocksize for the blocked
// variant. The thresholds and blocksizes re defined here
#define FLA_SPFFRT2__NTHRESH1         (64)
#define FLA_SPFFRT2__NTHRESH2         (201)
#define FLA_SPFFRT2__NTHRESH3         (4096)
#define FLA_SPFFRT2__NCOLTHRESH       (3)
#define FLA_SPFFRT2__NCOLFRAC_THRESH1 (25)
#define FLA_SPFFRT2__NCOLFRAC_THRESH2 (80)
#define FLA_SPFFRT2__NCOLFRAC_THRESH3 (20)
#define FLA_SPFFRT2__BSIZE_NL1        (256)
#define FLA_SPFFRT2__BSIZE_NL2        (4096)
#define FLA_SPFFRT2__BSIZE1           (8)
#define FLA_SPFFRT2__BSIZE2           (32)
#define FLA_SPFFRT2__BSIZE3           (64)



#ifdef __cplusplus
  // For C++, include stdint.h.
#include <stdint.h> // skipped
#elif __STDC_VERSION__ >= 199901L
  // For C99 (or later), include stdint.h.
#include <stdint.h> // skipped
#else
  // When stdint.h is not available, manually typedef the types we will use.
#ifdef _WIN32
typedef          __int32  int32_t;
typedef unsigned __int32 uint32_t;
typedef          __int64  int64_t;
typedef unsigned __int64 uint64_t;
#else
#error "Attempting to compile on pre-C99 system without stdint.h."
#endif
#endif

#ifdef FLA_ENABLE_ILP64
typedef int64_t integer;
typedef uint64_t uinteger;
#else
typedef int32_t integer;
typedef unsigned long int uinteger;
#endif

typedef char *address;
typedef short int shortint;
typedef float real;
typedef double doublereal;
typedef struct { real r, i; } complex;
typedef struct { doublereal r, i; } doublecomplex;


typedef integer logical; 

typedef short int shortlogical;
typedef char logical1;
typedef char integer1;
#ifdef INTEGER_STAR_8	
typedef long long longint;		
typedef unsigned long long ulongint;	
#define qbit_clear(a,b)	((a) & ~((ulongint)1 << (b)))
#define qbit_set(a,b)	((a) |  ((ulongint)1 << (b)))
#endif

#define TRUE_ (1)
#define FALSE_ (0)


#ifndef Extern
#define Extern extern
#endif


#ifdef f2c_i2

typedef short flag;
typedef short ftnlen;
typedef short ftnint;
#else
typedef long int flag;
typedef integer ftnlen;
typedef long int ftnint;
#endif


typedef struct
{	flag cierr;
	ftnint ciunit;
	flag ciend;
	char *cifmt;
	ftnint cirec;
} cilist;


typedef struct
{	flag icierr;
	char *iciunit;
	flag iciend;
	char *icifmt;
	ftnint icirlen;
	ftnint icirnum;
} icilist;


typedef struct
{	flag oerr;
	ftnint ounit;
	char *ofnm;
	ftnlen ofnmlen;
	char *osta;
	char *oacc;
	char *ofm;
	ftnint orl;
	char *oblnk;
} olist;


typedef struct
{	flag cerr;
	ftnint cunit;
	char *csta;
} cllist;


typedef struct
{	flag aerr;
	ftnint aunit;
} alist;


typedef struct
{	flag inerr;
	ftnint inunit;
	char *infile;
	ftnlen infilen;
	ftnint	*inex;	
	ftnint	*inopen;
	ftnint	*innum;
	ftnint	*innamed;
	char	*inname;
	ftnlen	innamlen;
	char	*inacc;
	ftnlen	inacclen;
	char	*inseq;
	ftnlen	inseqlen;
	char 	*indir;
	ftnlen	indirlen;
	char	*infmt;
	ftnlen	infmtlen;
	char	*inform;
	ftnint	informlen;
	char	*inunf;
	ftnlen	inunflen;
	ftnint	*inrecl;
	ftnint	*innrec;
	char	*inblank;
	ftnlen	inblanklen;
} inlist;

#define VOID void

union Multitype {	
	integer1 g;
	shortint h;
	integer i;
	
	real r;
	doublereal d;
	complex c;
	doublecomplex z;
	};

typedef union Multitype Multitype;

	

struct Vardesc {	
	char *name;
	char *addr;
	ftnlen *dims;
	int  type;
	};
typedef struct Vardesc Vardesc;

struct Namelist {
	char *name;
	Vardesc **vars;
	int nvars;
	};
typedef struct Namelist Namelist;

#ifndef ceiling_f90_
  #define ceiling_f90_(x) ((integer)(x) + ((x) > 0 && (x) != (integer)(x)))
#endif
#ifndef floor_f90_
  #define floor_f90_(x) ((integer)(x) - ((x) < 0 && (x) != (integer)(x)))
#endif
#ifndef f2c_abs
  #define f2c_abs(x) ((x) >= 0 ? (x) : -(x))
#endif
#ifndef f2c_dabs
  #define f2c_dabs(x) (doublereal)f2c_abs(x)
#endif
#ifndef dmin
  #define dmin(a,b) (doublereal)fla_min(a,b)
#endif
#ifndef dmax
  #define dmax(a,b) (doublereal)fla_max(a,b)
#endif

#define bit_test(a,b)	((a) >> (b) & 1)
#define bit_clear(a,b)	((a) & ~((uinteger)1 << (b)))
#define bit_set(a,b)	((a) |  ((uinteger)1 << (b)))



#define F2C_proc_par_types 1
#ifdef __cplusplus
typedef int  (*U_fp)(...);
typedef shortint (*J_fp)(...);
typedef integer (*I_fp)(...);
typedef real (*R_fp)(...);
typedef doublereal (*D_fp)(...);
typedef doublereal (*E_fp)(...);
typedef  VOID (*C_fp)(...);
typedef  VOID (*Z_fp)(...);
typedef logical (*L_fp)(...);
typedef logical (*L_fp1)(complex *);
typedef logical (*L_fp2)(complex *, complex *);
typedef logical (*L_fps2)(real *, real *);
typedef logical (*L_fps3)(real *, real *, real *);
typedef logical (*L_fpd2)(doublereal *, doublereal *);
typedef logical (*L_fpd3)(doublereal *, doublereal *, doublereal *);
typedef logical (*L_fpz1)(doublecomplex *);
typedef logical (*L_fpz2)(doublecomplex *, doublecomplex *);
typedef shortlogical (*K_fp)(...);
typedef  VOID (*H_fp)(...);
typedef  int (*S_fp)(...);
#else
typedef int  (*U_fp)();
typedef shortint (*J_fp)();
typedef integer (*I_fp)();
typedef real (*R_fp)();
typedef doublereal (*D_fp)();
typedef doublereal (*E_fp)();
typedef  VOID (*C_fp)();
typedef  VOID (*Z_fp)();
typedef logical (*L_fp)();
typedef logical (*L_fp1)(complex *);
typedef logical (*L_fp2)(complex *, complex *);
typedef logical (*L_fps2)(real *, real *);
typedef logical (*L_fps3)(real *, real *, real *);
typedef logical (*L_fpd2)(doublereal *, doublereal *);
typedef logical (*L_fpd3)(doublereal *, doublereal *, doublereal *);
typedef logical (*L_fpz1)(doublecomplex *);
typedef logical (*L_fpz2)(doublecomplex *, doublecomplex *);
typedef shortlogical (*K_fp)();
typedef  VOID (*H_fp)();
typedef  int (*S_fp)();
#endif

typedef VOID C_f;	
typedef VOID H_f;	
typedef VOID Z_f;	
typedef doublereal E_f;	



#ifndef Skip_f2c_Undefs
#undef cray
#undef gcos
#undef mc68010
#undef mc68020
#undef mips
#undef pdp11
#undef sgi
#undef sparc
#undef sun
#undef sun2
#undef sun3
#undef sun4
#undef u370
#undef u3b
#undef u3b2
#undef u3b5
#undef unix
#undef vax
#endif
#endif

#ifndef FLA_ENABLE_EXTRA_SYMBOLS
#if (defined(_WIN32) || defined(_WIN64))
#ifdef UPPER
#define  cgelst_   CGELST
#define  clatrs3_  CLATRS3
#define  ctrsyl3_  CTRSYL3
#define  dlarmm_   DLARMM
#define  dgelst_   DGELST
#define  dlatrs3_  DLATRS3
#define  dtrsyl3_  DTRSYL3
#define  slarmm_   SLARMM
#define  sgelst_   SGELST
#define  slatrs3_  SLATRS3
#define  strsyl3_  STRSYL3
#define  zgelst_   ZGELST
#define  zlatrs3_  ZLATRS3
#define  ztrsyl3_  ZTRSYL3
#define  cgetsqrhrt_  CGETSQRHRT
#define  claqz0_  CLAQZ0
#define  claqz1_  CLAQZ1
#define  claqz2_  CLAQZ2
#define  claqz3_  CLAQZ3
#define  clarfb_gett_  CLARFB_GETT
#define  cungtsqr_row_  CUNGTSQR_ROW
#define  dgetsqrhrt_  DGETSQRHRT
#define  dlaqz0_  DLAQZ0
#define  dlaqz1_  DLAQZ1
#define  dlaqz2_  DLAQZ2
#define  dlaqz3_  DLAQZ3
#define  dlaqz4_  DLAQZ4
#define  dlarfb_gett_  DLARFB_GETT
#define  dorgtsqr_row_  DORGTSQR_ROW
#define  sgetsqrhrt_  SGETSQRHRT
#define  slaqz0_  SLAQZ0
#define  slaqz1_  SLAQZ1
#define  slaqz2_  SLAQZ2
#define  slaqz3_  SLAQZ3
#define  slaqz4_  SLAQZ4
#define  slarfb_gett_  SLARFB_GETT
#define  sorgtsqr_row_  SORGTSQR_ROW
#define  zgetsqrhrt_  ZGETSQRHRT
#define  zlaqz0_  ZLAQZ0
#define  zlaqz1_  ZLAQZ1
#define  zlaqz2_  ZLAQZ2
#define  zlaqz3_  ZLAQZ3
#define  zlarfb_gett_  ZLARFB_GETT
#define	 zungtsqr_row_  ZUNGTSQR_ROW

#define  isamax_   ISAMAX     
#define  idamax_   IDAMAX     
#define  icamax_   ICAMAX     
#define  izamax_   IZAMAX     
#define  sasum_	   SASUM      
#define  dasum_	   DASUM      
#define  scasum_   SCASUM     
#define  dzasum_   DZASUM     
#define  saxpy_	   SAXPY      
#define  daxpy_	   DAXPY      
#define  caxpy_	   CAXPY      
#define  zaxpy_	   ZAXPY      
#define  scopy_	   SCOPY      
#define  dcopy_	   DCOPY      
#define  ccopy_	   CCOPY      
#define  zcopy_	   ZCOPY      
#define  sdot_	   SDOT       
#define  ddot_	   DDOT       
#define  cdotu_	   CDOTU      
#define  cdotc_	   CDOTC      
#define  zdotu_	   ZDOTU      
#define  zdotc_	   ZDOTC      
#define  snrm2_	   SNRM2      
#define  dnrm2_	   DNRM2      
#define  scnrm2_   SCNRM2     
#define  dznrm2_   DZNRM2     
#define  sscal_	   SSCAL      
#define  dscal_	   DSCAL      
#define  cscal_	   CSCAL      
#define  csscal_   CSSCAL     
#define  zscal_	   ZSCAL      
#define  zdscal_   ZDSCAL     
#define  sswap_	   SSWAP      
#define  dswap_	   DSWAP      
#define  cswap_	   CSWAP      
#define  zswap_	   ZSWAP      
#define  sgemv_	   SGEMV      
#define  dgemv_	   DGEMV      
#define  cgemv_	   CGEMV      
#define  zgemv_	   ZGEMV      
#define  sger_	   SGER       
#define  dger_	   DGER       
#define  cgerc_	   CGERC      
#define  cgeru_	   CGERU      
#define  zgerc_	   ZGERC      
#define  zgeru_	   ZGERU      
#define  chemv_	   CHEMV      
#define  zhemv_	   ZHEMV      
#define  cher_	   CHER       
#define  zher_	   ZHER       
#define  cher2_	   CHER2      
#define  zher2_	   ZHER2      
#define  ssymv_	   SSYMV      
#define  dsymv_	   DSYMV      
#define  ssyr_	   SSYR       
#define  dsyr_	   DSYR       
#define  ssyr2_	   SSYR2      
#define  dsyr2_	   DSYR2      
#define  strmv_	   STRMV      
#define  dtrmv_	   DTRMV      
#define  ctrmv_	   CTRMV      
#define  ztrmv_	   ZTRMV      
#define  strsv_	   STRSV      
#define  dtrsv_	   DTRSV      
#define  ctrsv_	   CTRSV      
#define  ztrsv_	   ZTRSV      
#define  sgemm_	   SGEMM      
#define  dgemm_	   DGEMM      
#define  cgemm_	   CGEMM      
#define  zgemm_	   ZGEMM      
#define  chemm_	   CHEMM      
#define  zhemm_	   ZHEMM      
#define  cherk_	   CHERK      
#define  zherk_	   ZHERK      
#define  cher2k_   CHER2K     
#define  zher2k_   ZHER2K     
#define  ssymm_	   SSYMM      
#define  dsymm_	   DSYMM      
#define  csymm_	   CSYMM      
#define  zsymm_	   ZSYMM      
#define  ssyrk_	   SSYRK      
#define  dsyrk_	   DSYRK      
#define  csyrk_	   CSYRK      
#define  zsyrk_	   ZSYRK      
#define  ssyr2k_   SSYR2K     
#define  dsyr2k_   DSYR2K     
#define  csyr2k_   CSYR2K     
#define  zsyr2k_   ZSYR2K     
#define  strmm_	   STRMM      
#define  dtrmm_	   DTRMM      
#define  ctrmm_	   CTRMM      
#define  ztrmm_	   ZTRMM      
#define  strsm_	   STRSM      
#define  dtrsm_	   DTRSM      
#define  ctrsm_	   CTRSM      
#define  ztrsm_	   ZTRSM
#define  dgemmt_   DGEMMT     

#define csrot_ CSROT
#define cgbmv_ CGBMV
#define ctbsv_ CTBSV
#define dsbmv_ DSBMV
#define dspmv_ DSPMV
#define ctpsv_ CTPSV
#define chpmv_ CHPMV
#define ctpmv_ CTPMV
#define chpr2_ CHPR2
#define chpr_  CHPR
#define chbmv_ CHBMV
#define ctbmv_ CTBMV
#define drot_  DROT
#define dgbmv_ DGBMV
#define dtbsv_ DTBSV
#define drotm_ DROTM
#define dtpsv_ DTPSV
#define dspr_  DSPR
#define dtpmv_ DTPMV
#define dspr2_ DSPR2
#define dtbmv_ DTBMV
#define srot_  SROT
#define sgbmv_ SGBMV
#define stbsv_ STBSV
#define srotm_ SROTM
#define stpsv_  STPSV
#define ssbmv_	SSBMV
#define sspmv_	SSPMV
#define sspr_	SSPR
#define stpmv_	STPMV
#define sspr2_	SSPR2
#define stbmv_	STBMV
#define zdrot_	ZDROT
#define zgbmv_	ZGBMV
#define ztbsv_	ZTBSV
#define ztpsv_	ZTPSV
#define zhpmv_	ZHPMV
#define ztpmv_	ZTPMV
#define zhpr2_	ZHPR2
#define zhpr_	ZHPR
#define zhbmv_	ZHBMV
#define ztbmv_	ZTBMV

#define cbbcsd_                  CBBCSD              
#define cbdsqr_                  CBDSQR 
#define cgbbrd_                  CGBBRD 
#define cgbcon_                  CGBCON  
#define cgbequ_                  CGBEQU 
#define cgbequb_                 CGBEQUB 
#define cgbrfs_                  CGBRFS 
#define cgbsv_                   CGBSV 
#define cgbsvx_                  CGBSVX 
#define cgbtf2_                  CGBTF2 
#define cgbtrf_                  CGBTRF 
#define cgbtrs_                  CGBTRS 
#define cgebak_                  CGEBAK 
#define cgebal_                  CGEBAL 
#define cgebd2_                  CGEBD2 
#define cgebrd_                  CGEBRD 
#define cgecon_                  CGECON 
#define cgeequ_                  CGEEQU 
#define cgeequb_                 CGEEQUB 
#define cgees_                   CGEES 
#define cgeesx_                  CGEESX 
#define cgeev_                   CGEEV 
#define cgeevx_                  CGEEVX 
#define cgegs_                   CGEGS 
#define cgegv_                   CGEGV 
#define cgehd2_                  CGEHD2 
#define cgehrd_                  CGEHRD 
#define cgejsv_                  CGEJSV 
#define cgelq2_                  CGELQ2 
#define cgelq_                   CGELQ 
#define cgelqf_                  CGELQF 
#define cgelqt3_                 CGELQT3 
#define cgelqt_                  CGELQT 
#define cgels_                   CGELS 
#define cgelsd_                  CGELSD 
#define cgelss_                  CGELSS 
#define cgelsx_                  CGELSX 
#define cgelsy_                  CGELSY 
#define cgemlq_                  CGEMLQ 
#define cgemlqt_                 CGEMLQT 
#define cgemqr_                  CGEMQR 
#define cgemqrt_                 CGEMQRT 
#define cgeql2_                  CGEQL2 
#define cgeqlf_                  CGEQLF 
#define cgeqp3_                  CGEQP3 
#define cgeqpf_                  CGEQPF 
#define cgeqr2_                  CGEQR2 
#define cgeqr2p_                 CGEQR2P 
#define cgeqr_                   CGEQR 
#define cgeqrf_                  CGEQRF 
#define cgeqrfp_                 CGEQRFP 
#define cgeqrt2_                 CGEQRT2 
#define cgeqrt3_                 CGEQRT3 
#define cgeqrt_                  CGEQRT 
#define cgerfs_                  CGERFS 
#define cgerq2_                  CGERQ2 
#define cgerqf_                  CGERQF 
#define cgesc2_                  CGESC2 
#define cgesdd_                  CGESDD 
#define cgesv_                   CGESV 
#define cgesvd_                  CGESVD 
#define cgesvdq_                 CGESVDQ 
#define cgesvdx_                 CGESVDX 
#define cgesvj_                  CGESVJ 
#define cgesvx_                  CGESVX 
#define cgetc2_                  CGETC2 
#define cgetf2_                  CGETF2 
#define cgetrf2_                 CGETRF2 
#define cgetrf_                  CGETRF 
#define cgetri_                  CGETRI 
#define cgetrs_                  CGETRS 
#define cgetsls_                 CGETSLS 
#define cggbak_                  CGGBAK 
#define cggbal_                  CGGBAL 
#define cgges3_                  CGGES3 
#define cgges_                   CGGES 
#define cggesx_                  CGGESX 
#define cggev3_                  CGGEV3 
#define cggev_                   CGGEV 
#define cggevx_                  CGGEVX 
#define cggglm_                  CGGGLM 
#define cgghd3_                  CGGHD3 
#define cgghrd_                  CGGHRD 
#define cgglse_                  CGGLSE 
#define cggqrf_                  CGGQRF 
#define cggrqf_                  CGGRQF 
#define cggsvd3_                 CGGSVD3 
#define cggsvd_                  CGGSVD 
#define cggsvp3_                 CGGSVP3 
#define cggsvp_                  CGGSVP 
#define cgsvj0_                  CGSVJ0 
#define cgsvj1_                  CGSVJ1 
#define cgtcon_                  CGTCON 
#define cgtrfs_                  CGTRFS 
#define cgtsv_                   CGTSV 
#define cgtsvx_                  CGTSVX 
#define cgttrf_                  CGTTRF 
#define cgttrs_                  CGTTRS 
#define cgtts2_                  CGTTS2 
#define chb2st_kernels_          CHB2ST_KERNELS 
#define chbev_                   CHBEV 
#define chbev_2stage_            CHBEV_2STAGE 
#define chbevd_                  CHBEVD 
#define chbevd_2stage_           CHBEVD_2STAGE 
#define chbevx_                  CHBEVX 
#define chbevx_2stage_           CHBEVX_2STAGE 
#define chbgst_                  CHBGST 
#define chbgv_                   CHBGV 
#define chbgvd_                  CHBGVD 
#define chbgvx_                  CHBGVX 
#define chbtrd_                  CHBTRD 
#define checon_                  CHECON 
#define checon_3_                CHECON_3 
#define checon_rook_             CHECON_ROOK 
#define cheequb_                 CHEEQUB 
#define cheev_                   CHEEV 
#define cheev_2stage_            CHEEV_2STAGE 
#define cheevd_                  CHEEVD 
#define cheevd_2stage_           CHEEVD_2STAGE 
#define cheevr_                  CHEEVR 
#define cheevr_2stage_           CHEEVR_2STAGE 
#define cheevx_                  CHEEVX 
#define cheevx_2stage_           CHEEVX_2STAGE 
#define chegs2_                  CHEGS2 
#define chegst_                  CHEGST 
#define chegv_                   CHEGV 
#define chegv_2stage_            CHEGV_2STAGE 
#define chegvd_                  CHEGVD 
#define chegvx_                  CHEGVX 
#define cherfs_                  CHERFS 
#define chesv_                   CHESV 
#define chesv_aa_                CHESV_AA 
#define chesv_aa_2stage_         CHESV_AA_2STAGE 
#define chesv_rk_                CHESV_RK 
#define chesv_rook_              CHESV_ROOK 
#define chesvx_                  CHESVX 
#define cheswapr_                CHESWAPR 
#define chetd2_                  CHETD2 
#define chetf2_                  CHETF2 
#define chetf2_rk_               CHETF2_RK 
#define chetf2_rook_             CHETF2_ROOK 
#define chetrd_                  CHETRD 
#define chetrd_2stage_           CHETRD_2STAGE 
#define chetrd_hb2st_            CHETRD_HB2ST 
#define chetrd_he2hb_            CHETRD_HE2HB 
#define chetrf_                  CHETRF 
#define chetrf_aa_               CHETRF_AA 
#define chetrf_aa_2stage_        CHETRF_AA_2STAGE 
#define chetrf_rk_               CHETRF_RK 
#define chetrf_rook_             CHETRF_ROOK 
#define chetri2_                 CHETRI2 
#define chetri2x_                CHETRI2X 
#define chetri_                  CHETRI 
#define chetri_3_                CHETRI_3 
#define chetri_3x_               CHETRI_3X 
#define chetri_rook_             CHETRI_ROOK 
#define chetrs2_                 CHETRS2 
#define chetrs_                  CHETRS 
#define chetrs_3_                CHETRS_3 
#define chetrs_aa_               CHETRS_AA 
#define chetrs_aa_2stage_        CHETRS_AA_2STAGE 
#define chetrs_rook_             CHETRS_ROOK 
#define chfrk_                   CHFRK 
#define chgeqz_                  CHGEQZ 
#define chla_transtype_          CHLA_TRANSTYPE 
#define chpcon_                  CHPCON 
#define chpev_                   CHPEV 
#define chpevd_                  CHPEVD 
#define chpevx_                  CHPEVX 
#define chpgst_                  CHPGST 
#define chpgv_                   CHPGV 
#define chpgvd_                  CHPGVD 
#define chpgvx_                  CHPGVX 
#define chprfs_                  CHPRFS 
#define chpsv_                   CHPSV 
#define chpsvx_                  CHPSVX 
#define chptrd_                  CHPTRD 
#define chptrf_                  CHPTRF 
#define chptri_                  CHPTRI 
#define chptrs_                  CHPTRS 
#define chsein_                  CHSEIN 
#define chseqr_                  CHSEQR 
#define cla_gbamv_               CLA_GBAMV 
#define cla_gbrcond_c_           CLA_GBRCOND_C 
#define cla_gbrcond_x_           CLA_GBRCOND_X 
#define cla_gbrpvgrw_            CLA_GBRPVGRW 
#define cla_geamv_               CLA_GEAMV 
#define cla_gercond_c_           CLA_GERCOND_C 
#define cla_gercond_x_           CLA_GERCOND_X 
#define cla_gerpvgrw_            CLA_GERPVGRW 
#define cla_heamv_               CLA_HEAMV 
#define cla_hercond_c_           CLA_HERCOND_C 
#define cla_hercond_x_           CLA_HERCOND_X 
#define cla_herpvgrw_            CLA_HERPVGRW 
#define cla_lin_berr_            CLA_LIN_BERR 
#define cla_porcond_c_           CLA_PORCOND_C 
#define cla_porcond_x_           CLA_PORCOND_X 
#define cla_porpvgrw_            CLA_PORPVGRW 
#define cla_syamv_               CLA_SYAMV 
#define cla_syrcond_c_           CLA_SYRCOND_C 
#define cla_syrcond_x_           CLA_SYRCOND_X 
#define cla_syrpvgrw_            CLA_SYRPVGRW 
#define cla_wwaddw_              CLA_WWADDW 
#define clabrd_                  CLABRD 
#define clacgv_                  CLACGV 
#define clacn2_                  CLACN2 
#define clacon_                  CLACON 
#define clacp2_                  CLACP2 
#define clacpy_                  CLACPY 
#define clacrm_                  CLACRM 
#define clacrt_                  CLACRT 
#define cladiv_                  CLADIV 
#define claed0_                  CLAED0 
#define claed7_                  CLAED7 
#define claed8_                  CLAED8 
#define claein_                  CLAEIN 
#define claesy_                  CLAESY 
#define claev2_                  CLAEV2 
#define clag2z_                  CLAG2Z 
#define clags2_                  CLAGS2 
#define clagtm_                  CLAGTM 
#define clahef_                  CLAHEF 
#define clahef_aa_               CLAHEF_AA 
#define clahef_rk_               CLAHEF_RK 
#define clahef_rook_             CLAHEF_ROOK 
#define clahqr_                  CLAHQR 
#define clahr2_                  CLAHR2 
#define clahrd_                  CLAHRD 
#define claic1_                  CLAIC1 
#define clals0_                  CLALS0 
#define clalsa_                  CLALSA 
#define clalsd_                  CLALSD 
#define clamswlq_                CLAMSWLQ 
#define clamtsqr_                CLAMTSQR 
#define clangb_                  CLANGB 
#define clange_                  CLANGE 
#define clangt_                  CLANGT 
#define clanhb_                  CLANHB 
#define clanhe_                  CLANHE 
#define clanhf_                  CLANHF 
#define clanhp_                  CLANHP 
#define clanhs_                  CLANHS 
#define clanht_                  CLANHT 
#define clansb_                  CLANSB 
#define clansp_                  CLANSP 
#define clansy_                  CLANSY 
#define clantb_                  CLANTB 
#define clantp_                  CLANTP 
#define clantr_                  CLANTR 
#define clapll_                  CLAPLL 
#define clapmr_                  CLAPMR 
#define clapmt_                  CLAPMT 
#define claqgb_                  CLAQGB 
#define claqge_                  CLAQGE 
#define claqhb_                  CLAQHB 
#define claqhe_                  CLAQHE 
#define claqhp_                  CLAQHP 
#define claqp2_                  CLAQP2 
#define claqps_                  CLAQPS 
#define claqr0_                  CLAQR0 
#define claqr1_                  CLAQR1 
#define claqr2_                  CLAQR2 
#define claqr3_                  CLAQR3 
#define claqr4_                  CLAQR4 
#define claqr5_                  CLAQR5 
#define claqsb_                  CLAQSB 
#define claqsp_                  CLAQSP 
#define claqsy_                  CLAQSY 
#define clar1v_                  CLAR1V 
#define clar2v_                  CLAR2V 
#define clarcm_                  CLARCM 
#define clarf_                   CLARF 
#define clarfb_                  CLARFB 
#define clarfg_                  CLARFG 
#define clarfgp_                 CLARFGP 
#define clarft_                  CLARFT 
#define clarfx_                  CLARFX 
#define clarfy_                  CLARFY 
#define clargv_                  CLARGV 
#define clarnv_                  CLARNV 
#define clarrv_                  CLARRV 
#define clarscl2_                CLARSCL2 
#define clartg_                  CLARTG 
#define clartv_                  CLARTV 
#define clarz_                   CLARZ 
#define clarzb_                  CLARZB 
#define clarzt_                  CLARZT 
#define clascl2_                 CLASCL2 
#define clascl_                  CLASCL 
#define claset_                  CLASET 
#define clasr_                   CLASR 
#define classq_                  CLASSQ 
#define claswlq_                 CLASWLQ 
#define claswp_                  CLASWP 
#define clasyf_                  CLASYF 
#define clasyf_aa_               CLASYF_AA 
#define clasyf_rk_               CLASYF_RK 
#define clasyf_rook_             CLASYF_ROOK 
#define clatbs_                  CLATBS 
#define clatdf_                  CLATDF 
#define clatps_                  CLATPS 
#define clatrd_                  CLATRD 
#define clatrs_                  CLATRS 
#define clatrz_                  CLATRZ 
#define clatsqr_                 CLATSQR 
#define clatzm_                  CLATZM 
#define claunhr_col_getrfnp2_    CLAUNHR_COL_GETRFNP2 
#define claunhr_col_getrfnp_     CLAUNHR_COL_GETRFNP 
#define clauu2_                  CLAUU2 
#define clauum_                  CLAUUM 
#define cpbcon_                  CPBCON 
#define cpbequ_                  CPBEQU 
#define cpbrfs_                  CPBRFS 
#define cpbstf_                  CPBSTF 
#define cpbsv_                   CPBSV 
#define cpbsvx_                  CPBSVX 
#define cpbtf2_                  CPBTF2 
#define cpbtrf_                  CPBTRF 
#define cpbtrs_                  CPBTRS 
#define cpftrf_                  CPFTRF 
#define cpftri_                  CPFTRI 
#define cpftrs_                  CPFTRS 
#define cpocon_                  CPOCON 
#define cpoequ_                  CPOEQU 
#define cpoequb_                 CPOEQUB 
#define cporfs_                  CPORFS 
#define cposv_                   CPOSV 
#define cposvx_                  CPOSVX 
#define cpotf2_                  CPOTF2 
#define cpotrf2_                 CPOTRF2 
#define cpotrf_                  CPOTRF 
#define cpotri_                  CPOTRI 
#define cpotrs_                  CPOTRS 
#define cppcon_                  CPPCON 
#define cppequ_                  CPPEQU 
#define cpprfs_                  CPPRFS 
#define cppsv_                   CPPSV 
#define cppsvx_                  CPPSVX 
#define cpptrf_                  CPPTRF 
#define cpptri_                  CPPTRI 
#define cpptrs_                  CPPTRS 
#define cpstf2_                  CPSTF2 
#define cpstrf_                  CPSTRF 
#define cptcon_                  CPTCON 
#define cpteqr_                  CPTEQR 
#define cptrfs_                  CPTRFS 
#define cptsv_                   CPTSV 
#define cptsvx_                  CPTSVX 
#define cpttrf_                  CPTTRF 
#define cpttrs_                  CPTTRS 
#define cptts2_                  CPTTS2 
#define crot_                    CROT 
#define cspcon_                  CSPCON 
#define cspmv_                   CSPMV 
#define cspr_                    CSPR 
#define csprfs_                  CSPRFS 
#define cspsv_                   CSPSV 
#define cspsvx_                  CSPSVX 
#define csptrf_                  CSPTRF 
#define csptri_                  CSPTRI 
#define csptrs_                  CSPTRS 
#define csrscl_                  CSRSCL 
#define cstedc_                  CSTEDC 
#define cstegr_                  CSTEGR 
#define cstein_                  CSTEIN 
#define cstemr_                  CSTEMR 
#define csteqr_                  CSTEQR 
#define csycon_                  CSYCON 
#define csycon_3_                CSYCON_3 
#define csycon_rook_             CSYCON_ROOK 
#define csyconv_                 CSYCONV 
#define csyconvf_                CSYCONVF 
#define csyconvf_rook_           CSYCONVF_ROOK 
#define csyequb_                 CSYEQUB 
#define csymv_                   CSYMV 
#define csyr_                    CSYR 
#define csyrfs_                  CSYRFS 
#define csysv_                   CSYSV 
#define csysv_aa_                CSYSV_AA 
#define csysv_aa_2stage_         CSYSV_AA_2STAGE 
#define csysv_rk_                CSYSV_RK 
#define csysv_rook_              CSYSV_ROOK 
#define csysvx_                  CSYSVX 
#define csyswapr_                CSYSWAPR 
#define csytf2_                  CSYTF2 
#define csytf2_rk_               CSYTF2_RK 
#define csytf2_rook_             CSYTF2_ROOK 
#define csytrf_                  CSYTRF 
#define csytrf_aa_               CSYTRF_AA 
#define csytrf_aa_2stage_        CSYTRF_AA_2STAGE 
#define csytrf_rk_               CSYTRF_RK 
#define csytrf_rook_             CSYTRF_ROOK 
#define csytri2_                 CSYTRI2 
#define csytri2x_                CSYTRI2X 
#define csytri_                  CSYTRI 
#define csytri_3_                CSYTRI_3 
#define csytri_3x_               CSYTRI_3X 
#define csytri_rook_             CSYTRI_ROOK 
#define csytrs2_                 CSYTRS2 
#define csytrs_                  CSYTRS 
#define csytrs_3_                CSYTRS_3 
#define csytrs_aa_               CSYTRS_AA 
#define csytrs_aa_2stage_        CSYTRS_AA_2STAGE 
#define csytrs_rook_             CSYTRS_ROOK 
#define ctbcon_                  CTBCON 
#define ctbrfs_                  CTBRFS 
#define ctbtrs_                  CTBTRS 
#define ctfsm_                   CTFSM 
#define ctftri_                  CTFTRI 
#define ctfttp_                  CTFTTP 
#define ctfttr_                  CTFTTR 
#define ctgevc_                  CTGEVC 
#define ctgex2_                  CTGEX2 
#define ctgexc_                  CTGEXC 
#define ctgsen_                  CTGSEN 
#define ctgsja_                  CTGSJA 
#define ctgsna_                  CTGSNA 
#define ctgsy2_                  CTGSY2 
#define ctgsyl_                  CTGSYL 
#define ctpcon_                  CTPCON 
#define ctplqt2_                 CTPLQT2 
#define ctplqt_                  CTPLQT 
#define ctpmlqt_                 CTPMLQT 
#define ctpmqrt_                 CTPMQRT 
#define ctpqrt2_                 CTPQRT2 
#define ctpqrt_                  CTPQRT 
#define ctprfb_                  CTPRFB 
#define ctprfs_                  CTPRFS 
#define ctptri_                  CTPTRI 
#define ctptrs_                  CTPTRS 
#define ctpttf_                  CTPTTF 
#define ctpttr_                  CTPTTR 
#define ctrcon_                  CTRCON 
#define ctrevc3_                 CTREVC3 
#define ctrevc_                  CTREVC 
#define ctrexc_                  CTREXC 
#define ctrrfs_                  CTRRFS 
#define ctrsen_                  CTRSEN 
#define ctrsna_                  CTRSNA 
#define ctrsyl_                  CTRSYL 
#define ctrti2_                  CTRTI2 
#define ctrtri_                  CTRTRI 
#define ctrtrs_                  CTRTRS 
#define ctrttf_                  CTRTTF 
#define ctrttp_                  CTRTTP 
#define ctzrqf_                  CTZRQF 
#define ctzrzf_                  CTZRZF 
#define cunbdb1_                 CUNBDB1 
#define cunbdb2_                 CUNBDB2 
#define cunbdb3_                 CUNBDB3 
#define cunbdb4_                 CUNBDB4 
#define cunbdb5_                 CUNBDB5 
#define cunbdb6_                 CUNBDB6 
#define cunbdb_                  CUNBDB 
#define cuncsd2by1_              CUNCSD2BY1 
#define cuncsd_                  CUNCSD 
#define cung2l_                  CUNG2L 
#define cung2r_                  CUNG2R 
#define cungbr_                  CUNGBR 
#define cunghr_                  CUNGHR 
#define cungl2_                  CUNGL2 
#define cunglq_                  CUNGLQ 
#define cungql_                  CUNGQL 
#define cungqr_                  CUNGQR 
#define cungr2_                  CUNGR2 
#define cungrq_                  CUNGRQ 
#define cungtr_                  CUNGTR 
#define cungtsqr_                CUNGTSQR 
#define cunhr_col_               CUNHR_COL 
#define cunm22_                  CUNM22 
#define cunm2l_                  CUNM2L 
#define cunm2r_                  CUNM2R 
#define cunmbr_                  CUNMBR 
#define cunmhr_                  CUNMHR 
#define cunml2_                  CUNML2 
#define cunmlq_                  CUNMLQ 
#define cunmql_                  CUNMQL 
#define cunmqr_                  CUNMQR 
#define cunmr2_                  CUNMR2 
#define cunmr3_                  CUNMR3 
#define cunmrq_                  CUNMRQ 
#define cunmrz_                  CUNMRZ 
#define cunmtr_                  CUNMTR 
#define cupgtr_                  CUPGTR 
#define cupmtr_                  CUPMTR 
#define dbbcsd_                  DBBCSD 
#define dbdsdc_                  DBDSDC 
#define dbdsqr_                  DBDSQR 
#define dbdsvdx_                 DBDSVDX 
#define dcombssq_                DCOMBSSQ 
#define ddisna_                  DDISNA 
#define dgbbrd_                  DGBBRD 
#define dgbcon_                  DGBCON 
#define dgbequ_                  DGBEQU 
#define dgbequb_                 DGBEQUB 
#define dgbrfs_                  DGBRFS 
#define dgbsv_                   DGBSV 
#define dgbsvx_                  DGBSVX 
#define dgbtf2_                  DGBTF2 
#define dgbtrf_                  DGBTRF 
#define dgbtrs_                  DGBTRS 
#define dgebak_                  DGEBAK 
#define dgebal_                  DGEBAL 
#define dgebd2_                  DGEBD2 
#define dgebrd_                  DGEBRD 
#define dgecon_                  DGECON 
#define dgeequ_                  DGEEQU 
#define dgeequb_                 DGEEQUB 
#define dgees_                   DGEES 
#define dgeesx_                  DGEESX 
#define dgeev_                   DGEEV 
#define dgeevx_                  DGEEVX 
#define dgegs_                   DGEGS 
#define dgegv_                   DGEGV 
#define dgehd2_                  DGEHD2 
#define dgehrd_                  DGEHRD 
#define dgejsv_                  DGEJSV 
#define dgelq2_                  DGELQ2 
#define dgelq_                   DGELQ 
#define dgelqf_                  DGELQF 
#define dgelqt3_                 DGELQT3 
#define dgelqt_                  DGELQT 
#define dgels_                   DGELS 
#define dgelsd_                  DGELSD 
#define dgelss_                  DGELSS 
#define dgelsx_                  DGELSX 
#define dgelsy_                  DGELSY 
#define dgemlq_                  DGEMLQ 
#define dgemlqt_                 DGEMLQT 
#define dgemqr_                  DGEMQR 
#define dgemqrt_                 DGEMQRT 
#define dgeql2_                  DGEQL2 
#define dgeqlf_                  DGEQLF 
#define dgeqp3_                  DGEQP3 
#define dgeqpf_                  DGEQPF 
#define dgeqr2_                  DGEQR2 
#define dgeqr2p_                 DGEQR2P 
#define dgeqr_                   DGEQR 
#define dgeqrf_                  DGEQRF 
#define dgeqrfp_                 DGEQRFP 
#define dgeqrt2_                 DGEQRT2 
#define dgeqrt3_                 DGEQRT3 
#define dgeqrt_                  DGEQRT 
#define dgerfs_                  DGERFS 
#define dgerq2_                  DGERQ2 
#define dgerqf_                  DGERQF 
#define dgesc2_                  DGESC2 
#define dgesdd_                  DGESDD 
#define dgesv_                   DGESV 
#define dgesvd_                  DGESVD 
#define dgesvdq_                 DGESVDQ 
#define dgesvdx_                 DGESVDX 
#define dgesvj_                  DGESVJ 
#define dgesvx_                  DGESVX 
#define dgetc2_                  DGETC2 
#define dgetf2_                  DGETF2 
#define dgetrf2_                 DGETRF2 
#define dgetrf_                  DGETRF 
#define dgetri_                  DGETRI 
#define dgetrs_                  DGETRS 
#define dgetsls_                 DGETSLS 
#define dggbak_                  DGGBAK 
#define dggbal_                  DGGBAL 
#define dgges3_                  DGGES3 
#define dgges_                   DGGES 
#define dggesx_                  DGGESX 
#define dggev3_                  DGGEV3 
#define dggev_                   DGGEV 
#define dggevx_                  DGGEVX 
#define dggglm_                  DGGGLM 
#define dgghd3_                  DGGHD3 
#define dgghrd_                  DGGHRD 
#define dgglse_                  DGGLSE 
#define dggqrf_                  DGGQRF 
#define dggrqf_                  DGGRQF 
#define dggsvd3_                 DGGSVD3 
#define dggsvd_                  DGGSVD 
#define dggsvp3_                 DGGSVP3 
#define dggsvp_                  DGGSVP 
#define dgsvj0_                  DGSVJ0 
#define dgsvj1_                  DGSVJ1 
#define dgtcon_                  DGTCON 
#define dgtrfs_                  DGTRFS 
#define dgtsv_                   DGTSV 
#define dgtsvx_                  DGTSVX 
#define dgttrf_                  DGTTRF 
#define dgttrs_                  DGTTRS 
#define dgtts2_                  DGTTS2 
#define dhgeqz_                  DHGEQZ 
#define dhsein_                  DHSEIN 
#define dhseqr_                  DHSEQR 
#define disnan_                  DISNAN 
#define dla_gbamv_               DLA_GBAMV 
#define dla_gbrcond_             DLA_GBRCOND 
#define dla_gbrpvgrw_            DLA_GBRPVGRW 
#define dla_geamv_               DLA_GEAMV 
#define dla_gercond_             DLA_GERCOND 
#define dla_gerpvgrw_            DLA_GERPVGRW 
#define dla_lin_berr_            DLA_LIN_BERR 
#define dla_porcond_             DLA_PORCOND 
#define dla_porpvgrw_            DLA_PORPVGRW 
#define dla_syamv_               DLA_SYAMV 
#define dla_syrcond_             DLA_SYRCOND 
#define dla_syrpvgrw_            DLA_SYRPVGRW 
#define dla_wwaddw_              DLA_WWADDW 
#define dlabad_                  DLABAD 
#define dlabrd_                  DLABRD 
#define dlacn2_                  DLACN2 
#define dlacon_                  DLACON 
#define dlacpy_                  DLACPY 
#define dladiv1_                 DLADIV1 
#define dladiv2_                 DLADIV2 
#define dladiv_                  DLADIV 
#define dlae2_                   DLAE2 
#define dlaebz_                  DLAEBZ 
#define dlaed0_                  DLAED0 
#define dlaed1_                  DLAED1 
#define dlaed2_                  DLAED2 
#define dlaed3_                  DLAED3 
#define dlaed4_                  DLAED4 
#define dlaed5_                  DLAED5 
#define dlaed6_                  DLAED6 
#define dlaed7_                  DLAED7 
#define dlaed8_                  DLAED8 
#define dlaed9_                  DLAED9 
#define dlaeda_                  DLAEDA 
#define dlaein_                  DLAEIN 
#define dlaev2_                  DLAEV2 
#define dlaexc_                  DLAEXC 
#define dlag2_                   DLAG2 
#define dlag2s_                  DLAG2S 
#define dlags2_                  DLAGS2 
#define dlagtf_                  DLAGTF 
#define dlagtm_                  DLAGTM 
#define dlagts_                  DLAGTS 
#define dlagv2_                  DLAGV2 
#define dlahqr_                  DLAHQR 
#define dlahr2_                  DLAHR2 
#define dlahrd_                  DLAHRD 
#define dlaic1_                  DLAIC1 
#define dlaisnan_                DLAISNAN 
#define dlaln2_                  DLALN2 
#define dlals0_                  DLALS0 
#define dlalsa_                  DLALSA 
#define dlalsd_                  DLALSD 
#define dlamc3_                  DLAMC3 
#define dlamch_                  DLAMCH 
#define dlamrg_                  DLAMRG 
#define dlamswlq_                DLAMSWLQ 
#define dlamtsqr_                DLAMTSQR 
#define dlaneg_                  DLANEG 
#define dlangb_                  DLANGB 
#define dlange_                  DLANGE 
#define dlangt_                  DLANGT 
#define dlanhs_                  DLANHS 
#define dlansb_                  DLANSB 
#define dlansf_                  DLANSF 
#define dlansp_                  DLANSP 
#define dlanst_                  DLANST 
#define dlansy_                  DLANSY 
#define dlantb_                  DLANTB 
#define dlantp_                  DLANTP 
#define dlantr_                  DLANTR 
#define dlanv2_                  DLANV2 
#define dlaorhr_col_getrfnp2_    DLAORHR_COL_GETRFNP2 
#define dlaorhr_col_getrfnp_     DLAORHR_COL_GETRFNP 
#define dlapll_                  DLAPLL 
#define dlapmr_                  DLAPMR 
#define dlapmt_                  DLAPMT 
#define dlapy2_                  DLAPY2 
#define dlapy3_                  DLAPY3 
#define dlaqgb_                  DLAQGB 
#define dlaqge_                  DLAQGE 
#define dlaqp2_                  DLAQP2 
#define dlaqps_                  DLAQPS 
#define dlaqr0_                  DLAQR0 
#define dlaqr1_                  DLAQR1 
#define dlaqr2_                  DLAQR2 
#define dlaqr3_                  DLAQR3 
#define dlaqr4_                  DLAQR4 
#define dlaqr5_                  DLAQR5 
#define dlaqsb_                  DLAQSB 
#define dlaqsp_                  DLAQSP 
#define dlaqsy_                  DLAQSY 
#define dlaqtr_                  DLAQTR 
#define dlar1v_                  DLAR1V 
#define dlar2v_                  DLAR2V 
#define dlarf_                   DLARF 
#define dlarfb_                  DLARFB 
#define dlarfg_                  DLARFG 
#define dlarfgp_                 DLARFGP 
#define dlarft_                  DLARFT 
#define dlarfx_                  DLARFX 
#define dlarfy_                  DLARFY 
#define dlargv_                  DLARGV 
#define dlarnv_                  DLARNV 
#define dlarra_                  DLARRA 
#define dlarrb_                  DLARRB 
#define dlarrc_                  DLARRC 
#define dlarrd_                  DLARRD 
#define dlarre_                  DLARRE 
#define dlarrf_                  DLARRF 
#define dlarrj_                  DLARRJ 
#define dlarrk_                  DLARRK 
#define dlarrr_                  DLARRR 
#define dlarrv_                  DLARRV 
#define dlarscl2_                DLARSCL2 
#define dlartg_                  DLARTG 
#define dlartgp_                 DLARTGP 
#define dlartgs_                 DLARTGS 
#define dlartv_                  DLARTV 
#define dlaruv_                  DLARUV 
#define dlarz_                   DLARZ 
#define dlarzb_                  DLARZB 
#define dlarzt_                  DLARZT 
#define dlas2_                   DLAS2 
#define dlascl2_                 DLASCL2 
#define dlascl_                  DLASCL 
#define dlasd0_                  DLASD0 
#define dlasd1_                  DLASD1 
#define dlasd2_                  DLASD2 
#define dlasd3_                  DLASD3 
#define dlasd4_                  DLASD4 
#define dlasd5_                  DLASD5 
#define dlasd6_                  DLASD6 
#define dlasd7_                  DLASD7 
#define dlasd8_                  DLASD8 
#define dlasda_                  DLASDA 
#define dlasdq_                  DLASDQ 
#define dlasdt_                  DLASDT 
#define dlaset_                  DLASET 
#define dlasq1_                  DLASQ1 
#define dlasq2_                  DLASQ2 
#define dlasq3_                  DLASQ3 
#define dlasq4_                  DLASQ4 
#define dlasq5_                  DLASQ5 
#define dlasq6_                  DLASQ6 
#define dlasr_                   DLASR 
#define dlasrt_                  DLASRT 
#define dlassq_                  DLASSQ 
#define dlasv2_                  DLASV2 
#define dlaswlq_                 DLASWLQ 
#define dlaswp_                  DLASWP 
#define dlasy2_                  DLASY2 
#define dlasyf_                  DLASYF 
#define dlasyf_aa_               DLASYF_AA 
#define dlasyf_rk_               DLASYF_RK 
#define dlasyf_rook_             DLASYF_ROOK 
#define dlat2s_                  DLAT2S 
#define dlatbs_                  DLATBS 
#define dlatdf_                  DLATDF 
#define dlatps_                  DLATPS 
#define dlatrd_                  DLATRD 
#define dlatrs_                  DLATRS 
#define dlatrz_                  DLATRZ 
#define dlatsqr_                 DLATSQR 
#define dlatzm_                  DLATZM 
#define dlauu2_                  DLAUU2 
#define dlauum_                  DLAUUM 
#define dopgtr_                  DOPGTR 
#define dopmtr_                  DOPMTR 
#define dorbdb1_                 DORBDB1 
#define dorbdb2_                 DORBDB2 
#define dorbdb3_                 DORBDB3 
#define dorbdb4_                 DORBDB4 
#define dorbdb5_                 DORBDB5 
#define dorbdb6_                 DORBDB6 
#define dorbdb_                  DORBDB 
#define dorcsd2by1_              DORCSD2BY1 
#define dorcsd_                  DORCSD 
#define dorg2l_                  DORG2L 
#define dorg2r_                  DORG2R 
#define dorgbr_                  DORGBR 
#define dorghr_                  DORGHR 
#define dorgl2_                  DORGL2 
#define dorglq_                  DORGLQ 
#define dorgql_                  DORGQL 
#define dorgqr_                  DORGQR 
#define dorgr2_                  DORGR2 
#define dorgrq_                  DORGRQ 
#define dorgtr_                  DORGTR 
#define dorgtsqr_                DORGTSQR 
#define dorhr_col_               DORHR_COL 
#define dorm22_                  DORM22 
#define dorm2l_                  DORM2L 
#define dorm2r_                  DORM2R 
#define dormbr_                  DORMBR 
#define dormhr_                  DORMHR 
#define dorml2_                  DORML2 
#define dormlq_                  DORMLQ 
#define dormql_                  DORMQL 
#define dormqr_                  DORMQR 
#define dormr2_                  DORMR2 
#define dormr3_                  DORMR3 
#define dormrq_                  DORMRQ 
#define dormrz_                  DORMRZ 
#define dormtr_                  DORMTR 
#define dpbcon_                  DPBCON 
#define dpbequ_                  DPBEQU 
#define dpbrfs_                  DPBRFS 
#define dpbstf_                  DPBSTF 
#define dpbsv_                   DPBSV 
#define dpbsvx_                  DPBSVX 
#define dpbtf2_                  DPBTF2 
#define dpbtrf_                  DPBTRF 
#define dpbtrs_                  DPBTRS 
#define dpftrf_                  DPFTRF 
#define dpftri_                  DPFTRI 
#define dpftrs_                  DPFTRS 
#define dpocon_                  DPOCON 
#define dpoequ_                  DPOEQU 
#define dpoequb_                 DPOEQUB 
#define dporfs_                  DPORFS 
#define dposv_                   DPOSV 
#define dposvx_                  DPOSVX 
#define dpotf2_                  DPOTF2 
#define dpotrf2_                 DPOTRF2 
#define dpotrf_                  DPOTRF 
#define dpotri_                  DPOTRI 
#define dpotrs_                  DPOTRS 
#define dppcon_                  DPPCON 
#define dppequ_                  DPPEQU 
#define dpprfs_                  DPPRFS 
#define dppsv_                   DPPSV 
#define dppsvx_                  DPPSVX 
#define dpptrf_                  DPPTRF 
#define dpptri_                  DPPTRI 
#define dpptrs_                  DPPTRS 
#define dpstf2_                  DPSTF2 
#define dpstrf_                  DPSTRF 
#define dptcon_                  DPTCON 
#define dpteqr_                  DPTEQR 
#define dptrfs_                  DPTRFS 
#define dptsv_                   DPTSV 
#define dptsvx_                  DPTSVX 
#define dpttrf_                  DPTTRF 
#define dpttrs_                  DPTTRS 
#define dptts2_                  DPTTS2 
#define drscl_                   DRSCL 
#define dsb2st_kernels_          DSB2ST_KERNELS 
#define dsbev_                   DSBEV 
#define dsbev_2stage_            DSBEV_2STAGE 
#define dsbevd_                  DSBEVD 
#define dsbevd_2stage_           DSBEVD_2STAGE 
#define dsbevx_                  DSBEVX 
#define dsbevx_2stage_           DSBEVX_2STAGE 
#define dsbgst_                  DSBGST 
#define dsbgv_                   DSBGV 
#define dsbgvd_                  DSBGVD 
#define dsbgvx_                  DSBGVX 
#define dsbtrd_                  DSBTRD 
#define dsfrk_                   DSFRK 
#define dsgesv_                  DSGESV 
#define dspcon_                  DSPCON 
#define dspev_                   DSPEV 
#define dspevd_                  DSPEVD 
#define dspevx_                  DSPEVX 
#define dspgst_                  DSPGST 
#define dspgv_                   DSPGV 
#define dspgvd_                  DSPGVD 
#define dspgvx_                  DSPGVX 
#define dsposv_                  DSPOSV 
#define dsprfs_                  DSPRFS 
#define dspsv_                   DSPSV 
#define dspsvx_                  DSPSVX 
#define dsptrd_                  DSPTRD 
#define dsptrf_                  DSPTRF 
#define dsptri_                  DSPTRI 
#define dsptrs_                  DSPTRS 
#define dstebz_                  DSTEBZ 
#define dstedc_                  DSTEDC 
#define dstegr_                  DSTEGR 
#define dstein_                  DSTEIN 
#define dstemr_                  DSTEMR 
#define dsteqr_                  DSTEQR 
#define dsterf_                  DSTERF 
#define dstev_                   DSTEV 
#define dstevd_                  DSTEVD 
#define dstevr_                  DSTEVR 
#define dstevx_                  DSTEVX 
#define dsycon_                  DSYCON 
#define dsycon_3_                DSYCON_3 
#define dsycon_rook_             DSYCON_ROOK 
#define dsyconv_                 DSYCONV 
#define dsyconvf_                DSYCONVF 
#define dsyconvf_rook_           DSYCONVF_ROOK 
#define dsyequb_                 DSYEQUB 
#define dsyev_                   DSYEV 
#define dsyev_2stage_            DSYEV_2STAGE 
#define dsyevd_                  DSYEVD 
#define dsyevd_2stage_           DSYEVD_2STAGE 
#define dsyevr_                  DSYEVR 
#define dsyevr_2stage_           DSYEVR_2STAGE 
#define dsyevx_                  DSYEVX 
#define dsyevx_2stage_           DSYEVX_2STAGE 
#define dsygs2_                  DSYGS2 
#define dsygst_                  DSYGST 
#define dsygv_                   DSYGV 
#define dsygv_2stage_            DSYGV_2STAGE 
#define dsygvd_                  DSYGVD 
#define dsygvx_                  DSYGVX 
#define dsyrfs_                  DSYRFS 
#define dsysv_                   DSYSV 
#define dsysv_aa_                DSYSV_AA 
#define dsysv_aa_2stage_         DSYSV_AA_2STAGE 
#define dsysv_rk_                DSYSV_RK 
#define dsysv_rook_              DSYSV_ROOK 
#define dsysvx_                  DSYSVX 
#define dsyswapr_                DSYSWAPR 
#define dsytd2_                  DSYTD2 
#define dsytf2_                  DSYTF2 
#define dsytf2_rk_               DSYTF2_RK 
#define dsytf2_rook_             DSYTF2_ROOK 
#define dsytrd_                  DSYTRD 
#define dsytrd_2stage_           DSYTRD_2STAGE 
#define dsytrd_sb2st_            DSYTRD_SB2ST 
#define dsytrd_sy2sb_            DSYTRD_SY2SB 
#define dsytrf_                  DSYTRF 
#define dsytrf_aa_               DSYTRF_AA 
#define dsytrf_aa_2stage_        DSYTRF_AA_2STAGE 
#define dsytrf_rk_               DSYTRF_RK 
#define dsytrf_rook_             DSYTRF_ROOK 
#define dsytri2_                 DSYTRI2 
#define dsytri2x_                DSYTRI2X 
#define dsytri_                  DSYTRI 
#define dsytri_3_                DSYTRI_3 
#define dsytri_3x_               DSYTRI_3X 
#define dsytri_rook_             DSYTRI_ROOK 
#define dsytrs2_                 DSYTRS2 
#define dsytrs_                  DSYTRS 
#define dsytrs_3_                DSYTRS_3 
#define dsytrs_aa_               DSYTRS_AA 
#define dsytrs_aa_2stage_        DSYTRS_AA_2STAGE 
#define dsytrs_rook_             DSYTRS_ROOK 
#define dtbcon_                  DTBCON 
#define dtbrfs_                  DTBRFS 
#define dtbtrs_                  DTBTRS 
#define dtfsm_                   DTFSM 
#define dtftri_                  DTFTRI 
#define dtfttp_                  DTFTTP 
#define dtfttr_                  DTFTTR 
#define dtgevc_                  DTGEVC 
#define dtgex2_                  DTGEX2 
#define dtgexc_                  DTGEXC 
#define dtgsen_                  DTGSEN 
#define dtgsja_                  DTGSJA 
#define dtgsna_                  DTGSNA 
#define dtgsy2_                  DTGSY2 
#define dtgsyl_                  DTGSYL 
#define dtpcon_                  DTPCON 
#define dtplqt2_                 DTPLQT2 
#define dtplqt_                  DTPLQT 
#define dtpmlqt_                 DTPMLQT 
#define dtpmqrt_                 DTPMQRT 
#define dtpqrt2_                 DTPQRT2 
#define dtpqrt_                  DTPQRT 
#define dtprfb_                  DTPRFB 
#define dtprfs_                  DTPRFS 
#define dtptri_                  DTPTRI 
#define dtptrs_                  DTPTRS 
#define dtpttf_                  DTPTTF 
#define dtpttr_                  DTPTTR 
#define dtrcon_                  DTRCON 
#define dtrevc3_                 DTREVC3 
#define dtrevc_                  DTREVC 
#define dtrexc_                  DTREXC 
#define dtrrfs_                  DTRRFS 
#define dtrsen_                  DTRSEN 
#define dtrsna_                  DTRSNA 
#define dtrsyl_                  DTRSYL 
#define dtrti2_                  DTRTI2 
#define dtrtri_                  DTRTRI 
#define dtrtrs_                  DTRTRS 
#define dtrttf_                  DTRTTF 
#define dtrttp_                  DTRTTP 
#define dtzrqf_                  DTZRQF 
#define dtzrzf_                  DTZRZF 
#define dzsum1_                  DZSUM1 
#define icmax1_                  ICMAX1 
#define ieeeck_                  IEEECK 
#define ilaclc_                  ILACLC 
#define ilaclr_                  ILACLR 
#define iladiag_                 ILADIAG 
#define iladlc_                  ILADLC 
#define iladlr_                  ILADLR 
#define ilaenv2stage_            ILAENV2STAGE 
#define ilaenv_                  ILAENV 
#define ilaprec_                 ILAPREC 
#define ilaslc_                  ILASLC 
#define ilaslr_                  ILASLR 
#define ilatrans_                ILATRANS 
#define ilauplo_                 ILAUPLO 
#define ilaver_                  ILAVER 
#define ilazlc_                  ILAZLC 
#define ilazlr_                  ILAZLR 
#define iparam2stage_            IPARAM2STAGE 
#define iparmq_                  IPARMQ 
#define izmax1_                  IZMAX1 
#define lsamen_                  LSAMEN 
#define sbbcsd_                  SBBCSD 
#define sbdsdc_                  SBDSDC 
#define sbdsqr_                  SBDSQR 
#define sbdsvdx_                 SBDSVDX 
#define scombssq_                SCOMBSSQ 
#define scsum1_                  SCSUM1 
#define sdisna_                  SDISNA 
#define sgbbrd_                  SGBBRD 
#define sgbcon_                  SGBCON 
#define sgbequ_                  SGBEQU 
#define sgbequb_                 SGBEQUB 
#define sgbrfs_                  SGBRFS 
#define sgbsv_                   SGBSV 
#define sgbsvx_                  SGBSVX 
#define sgbtf2_                  SGBTF2 
#define sgbtrf_                  SGBTRF 
#define sgbtrs_                  SGBTRS 
#define sgebak_                  SGEBAK 
#define sgebal_                  SGEBAL 
#define sgebd2_                  SGEBD2 
#define sgebrd_                  SGEBRD 
#define sgecon_                  SGECON 
#define sgeequ_                  SGEEQU 
#define sgeequb_                 SGEEQUB 
#define sgees_                   SGEES 
#define sgeesx_                  SGEESX 
#define sgeev_                   SGEEV 
#define sgeevx_                  SGEEVX 
#define sgegs_                   SGEGS 
#define sgegv_                   SGEGV 
#define sgehd2_                  SGEHD2 
#define sgehrd_                  SGEHRD 
#define sgejsv_                  SGEJSV 
#define sgelq2_                  SGELQ2 
#define sgelq_                   SGELQ 
#define sgelqf_                  SGELQF 
#define sgelqt3_                 SGELQT3 
#define sgelqt_                  SGELQT 
#define sgels_                   SGELS 
#define sgelsd_                  SGELSD 
#define sgelss_                  SGELSS 
#define sgelsx_                  SGELSX 
#define sgelsy_                  SGELSY 
#define sgemlq_                  SGEMLQ 
#define sgemlqt_                 SGEMLQT 
#define sgemqr_                  SGEMQR 
#define sgemqrt_                 SGEMQRT 
#define sgeql2_                  SGEQL2 
#define sgeqlf_                  SGEQLF 
#define sgeqp3_                  SGEQP3 
#define sgeqpf_                  SGEQPF 
#define sgeqr2_                  SGEQR2 
#define sgeqr2p_                 SGEQR2P 
#define sgeqr_                   SGEQR 
#define sgeqrf_                  SGEQRF 
#define sgeqrfp_                 SGEQRFP 
#define sgeqrt2_                 SGEQRT2 
#define sgeqrt3_                 SGEQRT3 
#define sgeqrt_                  SGEQRT 
#define sgerfs_                  SGERFS 
#define sgerq2_                  SGERQ2 
#define sgerqf_                  SGERQF 
#define sgesc2_                  SGESC2 
#define sgesdd_                  SGESDD 
#define sgesv_                   SGESV 
#define sgesvd_                  SGESVD 
#define sgesvdq_                 SGESVDQ 
#define sgesvdx_                 SGESVDX 
#define sgesvj_                  SGESVJ 
#define sgesvx_                  SGESVX 
#define sgetc2_                  SGETC2 
#define sgetf2_                  SGETF2 
#define sgetrf2_                 SGETRF2 
#define sgetrf_                  SGETRF 
#define sgetri_                  SGETRI 
#define sgetrs_                  SGETRS 
#define sgetsls_                 SGETSLS 
#define sggbak_                  SGGBAK 
#define sggbal_                  SGGBAL 
#define sgges3_                  SGGES3 
#define sgges_                   SGGES 
#define sggesx_                  SGGESX 
#define sggev3_                  SGGEV3 
#define sggev_                   SGGEV 
#define sggevx_                  SGGEVX 
#define sggglm_                  SGGGLM 
#define sgghd3_                  SGGHD3 
#define sgghrd_                  SGGHRD 
#define sgglse_                  SGGLSE 
#define sggqrf_                  SGGQRF 
#define sggrqf_                  SGGRQF 
#define sggsvd3_                 SGGSVD3 
#define sggsvd_                  SGGSVD 
#define sggsvp3_                 SGGSVP3 
#define sggsvp_                  SGGSVP 
#define sgsvj0_                  SGSVJ0 
#define sgsvj1_                  SGSVJ1 
#define sgtcon_                  SGTCON 
#define sgtrfs_                  SGTRFS 
#define sgtsv_                   SGTSV 
#define sgtsvx_                  SGTSVX 
#define sgttrf_                  SGTTRF 
#define sgttrs_                  SGTTRS 
#define sgtts2_                  SGTTS2 
#define shgeqz_                  SHGEQZ 
#define shsein_                  SHSEIN 
#define shseqr_                  SHSEQR 
#define sisnan_                  SISNAN 
#define sla_gbamv_               SLA_GBAMV 
#define sla_gbrcond_             SLA_GBRCOND 
#define sla_gbrpvgrw_            SLA_GBRPVGRW 
#define sla_geamv_               SLA_GEAMV 
#define sla_gercond_             SLA_GERCOND 
#define sla_gerpvgrw_            SLA_GERPVGRW 
#define sla_lin_berr_            SLA_LIN_BERR 
#define sla_porcond_             SLA_PORCOND 
#define sla_porpvgrw_            SLA_PORPVGRW 
#define sla_syamv_               SLA_SYAMV 
#define sla_syrcond_             SLA_SYRCOND 
#define sla_syrpvgrw_            SLA_SYRPVGRW 
#define sla_wwaddw_              SLA_WWADDW 
#define slabad_                  SLABAD 
#define slabrd_                  SLABRD 
#define slacn2_                  SLACN2 
#define slacon_                  SLACON 
#define slacpy_                  SLACPY 
#define sladiv1_                 SLADIV1 
#define sladiv2_                 SLADIV2 
#define sladiv_                  SLADIV 
#define slae2_                   SLAE2 
#define slaebz_                  SLAEBZ 
#define slaed0_                  SLAED0 
#define slaed1_                  SLAED1 
#define slaed2_                  SLAED2 
#define slaed3_                  SLAED3 
#define slaed4_                  SLAED4 
#define slaed5_                  SLAED5 
#define slaed6_                  SLAED6 
#define slaed7_                  SLAED7 
#define slaed8_                  SLAED8 
#define slaed9_                  SLAED9 
#define slaeda_                  SLAEDA 
#define slaein_                  SLAEIN 
#define slaev2_                  SLAEV2 
#define slaexc_                  SLAEXC 
#define slag2_                   SLAG2 
#define slag2d_                  SLAG2D 
#define slags2_                  SLAGS2 
#define slagtf_                  SLAGTF 
#define slagtm_                  SLAGTM 
#define slagts_                  SLAGTS 
#define slagv2_                  SLAGV2 
#define slahqr_                  SLAHQR 
#define slahr2_                  SLAHR2 
#define slahrd_                  SLAHRD 
#define slaic1_                  SLAIC1 
#define slaisnan_                SLAISNAN 
#define slaln2_                  SLALN2 
#define slals0_                  SLALS0 
#define slalsa_                  SLALSA 
#define slalsd_                  SLALSD 
#define slamc3_                  SLAMC3 
#define slamch_                  SLAMCH 
#define slamrg_                  SLAMRG 
#define slamswlq_                SLAMSWLQ 
#define slamtsqr_                SLAMTSQR 
#define slaneg_                  SLANEG 
#define slangb_                  SLANGB 
#define slange_                  SLANGE 
#define slangt_                  SLANGT 
#define slanhs_                  SLANHS 
#define slansb_                  SLANSB 
#define slansf_                  SLANSF 
#define slansp_                  SLANSP 
#define slanst_                  SLANST 
#define slansy_                  SLANSY 
#define slantb_                  SLANTB 
#define slantp_                  SLANTP 
#define slantr_                  SLANTR 
#define slanv2_                  SLANV2 
#define slaorhr_col_getrfnp2_    SLAORHR_COL_GETRFNP2 
#define slaorhr_col_getrfnp_     SLAORHR_COL_GETRFNP 
#define slapll_                  SLAPLL 
#define slapmr_                  SLAPMR 
#define slapmt_                  SLAPMT 
#define slapy2_                  SLAPY2 
#define slapy3_                  SLAPY3 
#define slaqgb_                  SLAQGB 
#define slaqge_                  SLAQGE 
#define slaqp2_                  SLAQP2 
#define slaqps_                  SLAQPS 
#define slaqr0_                  SLAQR0 
#define slaqr1_                  SLAQR1 
#define slaqr2_                  SLAQR2 
#define slaqr3_                  SLAQR3 
#define slaqr4_                  SLAQR4 
#define slaqr5_                  SLAQR5 
#define slaqsb_                  SLAQSB 
#define slaqsp_                  SLAQSP 
#define slaqsy_                  SLAQSY 
#define slaqtr_                  SLAQTR 
#define slar1v_                  SLAR1V 
#define slar2v_                  SLAR2V 
#define slarf_                   SLARF 
#define slarfb_                  SLARFB 
#define slarfg_                  SLARFG 
#define slarfgp_                 SLARFGP 
#define slarft_                  SLARFT 
#define slarfx_                  SLARFX 
#define slarfy_                  SLARFY 
#define slargv_                  SLARGV 
#define slarnv_                  SLARNV 
#define slarra_                  SLARRA 
#define slarrb_                  SLARRB 
#define slarrc_                  SLARRC 
#define slarrd_                  SLARRD 
#define slarre_                  SLARRE 
#define slarrf_                  SLARRF 
#define slarrj_                  SLARRJ 
#define slarrk_                  SLARRK 
#define slarrr_                  SLARRR 
#define slarrv_                  SLARRV 
#define slarscl2_                SLARSCL2 
#define slartg_                  SLARTG 
#define slartgp_                 SLARTGP 
#define slartgs_                 SLARTGS 
#define slartv_                  SLARTV 
#define slaruv_                  SLARUV 
#define slarz_                   SLARZ 
#define slarzb_                  SLARZB 
#define slarzt_                  SLARZT 
#define slas2_                   SLAS2 
#define slascl2_                 SLASCL2 
#define slascl_                  SLASCL 
#define slasd0_                  SLASD0 
#define slasd1_                  SLASD1 
#define slasd2_                  SLASD2 
#define slasd3_                  SLASD3 
#define slasd4_                  SLASD4 
#define slasd5_                  SLASD5 
#define slasd6_                  SLASD6 
#define slasd7_                  SLASD7 
#define slasd8_                  SLASD8 
#define slasda_                  SLASDA 
#define slasdq_                  SLASDQ 
#define slasdt_                  SLASDT 
#define slaset_                  SLASET 
#define slasq1_                  SLASQ1 
#define slasq2_                  SLASQ2 
#define slasq3_                  SLASQ3 
#define slasq4_                  SLASQ4 
#define slasq5_                  SLASQ5 
#define slasq6_                  SLASQ6 
#define slasr_                   SLASR 
#define slasrt_                  SLASRT 
#define slassq_                  SLASSQ 
#define slasv2_                  SLASV2 
#define slaswlq_                 SLASWLQ 
#define slaswp_                  SLASWP 
#define slasy2_                  SLASY2 
#define slasyf_                  SLASYF 
#define slasyf_aa_               SLASYF_AA 
#define slasyf_rk_               SLASYF_RK 
#define slasyf_rook_             SLASYF_ROOK 
#define slatbs_                  SLATBS 
#define slatdf_                  SLATDF 
#define slatps_                  SLATPS 
#define slatrd_                  SLATRD 
#define slatrs_                  SLATRS 
#define slatrz_                  SLATRZ 
#define slatsqr_                 SLATSQR 
#define slatzm_                  SLATZM 
#define slauu2_                  SLAUU2 
#define slauum_                  SLAUUM 
#define sopgtr_                  SOPGTR 
#define sopmtr_                  SOPMTR 
#define sorbdb1_                 SORBDB1 
#define sorbdb2_                 SORBDB2 
#define sorbdb3_                 SORBDB3 
#define sorbdb4_                 SORBDB4 
#define sorbdb5_                 SORBDB5 
#define sorbdb6_                 SORBDB6 
#define sorbdb_                  SORBDB 
#define sorcsd2by1_              SORCSD2BY1 
#define sorcsd_                  SORCSD 
#define sorg2l_                  SORG2L 
#define sorg2r_                  SORG2R 
#define sorgbr_                  SORGBR 
#define sorghr_                  SORGHR 
#define sorgl2_                  SORGL2 
#define sorglq_                  SORGLQ 
#define sorgql_                  SORGQL 
#define sorgqr_                  SORGQR 
#define sorgr2_                  SORGR2 
#define sorgrq_                  SORGRQ 
#define sorgtr_                  SORGTR 
#define sorgtsqr_                SORGTSQR 
#define sorhr_col_               SORHR_COL 
#define sorm22_                  SORM22 
#define sorm2l_                  SORM2L 
#define sorm2r_                  SORM2R 
#define sormbr_                  SORMBR 
#define sormhr_                  SORMHR 
#define sorml2_                  SORML2 
#define sormlq_                  SORMLQ 
#define sormql_                  SORMQL 
#define sormqr_                  SORMQR 
#define sormr2_                  SORMR2 
#define sormr3_                  SORMR3 
#define sormrq_                  SORMRQ 
#define sormrz_                  SORMRZ 
#define sormtr_                  SORMTR 
#define spbcon_                  SPBCON 
#define spbequ_                  SPBEQU 
#define spbrfs_                  SPBRFS 
#define spbstf_                  SPBSTF 
#define spbsv_                   SPBSV 
#define spbsvx_                  SPBSVX 
#define spbtf2_                  SPBTF2 
#define spbtrf_                  SPBTRF 
#define spbtrs_                  SPBTRS 
#define spftrf_                  SPFTRF 
#define spftri_                  SPFTRI 
#define spftrs_                  SPFTRS 
#define spocon_                  SPOCON 
#define spoequ_                  SPOEQU 
#define spoequb_                 SPOEQUB 
#define sporfs_                  SPORFS 
#define sposv_                   SPOSV 
#define sposvx_                  SPOSVX 
#define spotf2_                  SPOTF2 
#define spotrf2_                 SPOTRF2 
#define spotrf_                  SPOTRF 
#define spotri_                  SPOTRI 
#define spotrs_                  SPOTRS 
#define sppcon_                  SPPCON 
#define sppequ_                  SPPEQU 
#define spprfs_                  SPPRFS 
#define sppsv_                   SPPSV 
#define sppsvx_                  SPPSVX 
#define spptrf_                  SPPTRF 
#define spptri_                  SPPTRI 
#define spptrs_                  SPPTRS 
#define spstf2_                  SPSTF2 
#define spstrf_                  SPSTRF 
#define sptcon_                  SPTCON 
#define spteqr_                  SPTEQR 
#define sptrfs_                  SPTRFS 
#define sptsv_                   SPTSV 
#define sptsvx_                  SPTSVX 
#define spttrf_                  SPTTRF 
#define spttrs_                  SPTTRS 
#define sptts2_                  SPTTS2 
#define srscl_                   SRSCL 
#define ssb2st_kernels_          SSB2ST_KERNELS 
#define ssbev_                   SSBEV 
#define ssbev_2stage_            SSBEV_2STAGE 
#define ssbevd_                  SSBEVD 
#define ssbevd_2stage_           SSBEVD_2STAGE 
#define ssbevx_                  SSBEVX 
#define ssbevx_2stage_           SSBEVX_2STAGE 
#define ssbgst_                  SSBGST 
#define ssbgv_                   SSBGV 
#define ssbgvd_                  SSBGVD 
#define ssbgvx_                  SSBGVX 
#define ssbtrd_                  SSBTRD 
#define ssfrk_                   SSFRK 
#define sspcon_                  SSPCON 
#define sspev_                   SSPEV 
#define sspevd_                  SSPEVD 
#define sspevx_                  SSPEVX 
#define sspgst_                  SSPGST 
#define sspgv_                   SSPGV 
#define sspgvd_                  SSPGVD 
#define sspgvx_                  SSPGVX 
#define ssprfs_                  SSPRFS 
#define sspsv_                   SSPSV 
#define sspsvx_                  SSPSVX 
#define ssptrd_                  SSPTRD 
#define ssptrf_                  SSPTRF 
#define ssptri_                  SSPTRI 
#define ssptrs_                  SSPTRS 
#define sstebz_                  SSTEBZ 
#define sstedc_                  SSTEDC 
#define sstegr_                  SSTEGR 
#define sstein_                  SSTEIN 
#define sstemr_                  SSTEMR 
#define ssteqr_                  SSTEQR 
#define ssterf_                  SSTERF 
#define sstev_                   SSTEV 
#define sstevd_                  SSTEVD 
#define sstevr_                  SSTEVR 
#define sstevx_                  SSTEVX 
#define ssycon_                  SSYCON 
#define ssycon_3_                SSYCON_3 
#define ssycon_rook_             SSYCON_ROOK 
#define ssyconv_                 SSYCONV 
#define ssyconvf_                SSYCONVF 
#define ssyconvf_rook_           SSYCONVF_ROOK 
#define ssyequb_                 SSYEQUB 
#define ssyev_                   SSYEV 
#define ssyev_2stage_            SSYEV_2STAGE 
#define ssyevd_                  SSYEVD 
#define ssyevd_2stage_           SSYEVD_2STAGE 
#define ssyevr_                  SSYEVR 
#define ssyevr_2stage_           SSYEVR_2STAGE 
#define ssyevx_                  SSYEVX 
#define ssyevx_2stage_           SSYEVX_2STAGE 
#define ssygs2_                  SSYGS2 
#define ssygst_                  SSYGST 
#define ssygv_                   SSYGV 
#define ssygv_2stage_            SSYGV_2STAGE 
#define ssygvd_                  SSYGVD 
#define ssygvx_                  SSYGVX 
#define ssyrfs_                  SSYRFS 
#define ssysv_                   SSYSV 
#define ssysv_aa_                SSYSV_AA 
#define ssysv_aa_2stage_         SSYSV_AA_2STAGE 
#define ssysv_rk_                SSYSV_RK 
#define ssysv_rook_              SSYSV_ROOK 
#define ssysvx_                  SSYSVX 
#define ssyswapr_                SSYSWAPR 
#define ssytd2_                  SSYTD2 
#define ssytf2_                  SSYTF2 
#define ssytf2_rk_               SSYTF2_RK 
#define ssytf2_rook_             SSYTF2_ROOK 
#define ssytrd_                  SSYTRD 
#define ssytrd_2stage_           SSYTRD_2STAGE 
#define ssytrd_sb2st_            SSYTRD_SB2ST 
#define ssytrd_sy2sb_            SSYTRD_SY2SB 
#define ssytrf_                  SSYTRF 
#define ssytrf_aa_               SSYTRF_AA 
#define ssytrf_aa_2stage_        SSYTRF_AA_2STAGE 
#define ssytrf_rk_               SSYTRF_RK 
#define ssytrf_rook_             SSYTRF_ROOK 
#define ssytri2_                 SSYTRI2 
#define ssytri2x_                SSYTRI2X 
#define ssytri_                  SSYTRI 
#define ssytri_3_                SSYTRI_3 
#define ssytri_3x_               SSYTRI_3X 
#define ssytri_rook_             SSYTRI_ROOK 
#define ssytrs2_                 SSYTRS2 
#define ssytrs_                  SSYTRS 
#define ssytrs_3_                SSYTRS_3 
#define ssytrs_aa_               SSYTRS_AA 
#define ssytrs_aa_2stage_        SSYTRS_AA_2STAGE 
#define ssytrs_rook_             SSYTRS_ROOK 
#define stbcon_                  STBCON 
#define stbrfs_                  STBRFS 
#define stbtrs_                  STBTRS 
#define stfsm_                   STFSM 
#define stftri_                  STFTRI 
#define stfttp_                  STFTTP 
#define stfttr_                  STFTTR 
#define stgevc_                  STGEVC 
#define stgex2_                  STGEX2 
#define stgexc_                  STGEXC 
#define stgsen_                  STGSEN 
#define stgsja_                  STGSJA 
#define stgsna_                  STGSNA 
#define stgsy2_                  STGSY2 
#define stgsyl_                  STGSYL 
#define stpcon_                  STPCON 
#define stplqt2_                 STPLQT2 
#define stplqt_                  STPLQT 
#define stpmlqt_                 STPMLQT 
#define stpmqrt_                 STPMQRT 
#define stpqrt2_                 STPQRT2 
#define stpqrt_                  STPQRT 
#define stprfb_                  STPRFB 
#define stprfs_                  STPRFS 
#define stptri_                  STPTRI 
#define stptrs_                  STPTRS 
#define stpttf_                  STPTTF 
#define stpttr_                  STPTTR 
#define strcon_                  STRCON 
#define strevc3_                 STREVC3 
#define strevc_                  STREVC 
#define strexc_                  STREXC 
#define strrfs_                  STRRFS 
#define strsen_                  STRSEN 
#define strsna_                  STRSNA 
#define strsyl_                  STRSYL 
#define strti2_                  STRTI2 
#define strtri_                  STRTRI 
#define strtrs_                  STRTRS 
#define strttf_                  STRTTF 
#define strttp_                  STRTTP 
#define stzrqf_                  STZRQF 
#define stzrzf_                  STZRZF 
#define xerbla_array_            XERBLA_ARRAY
#define zbbcsd_                  ZBBCSD 
#define zbdsqr_                  ZBDSQR 
#define zcgesv_                  ZCGESV 
#define zcposv_                  ZCPOSV 
#define zdrscl_                  ZDRSCL 
#define zgbbrd_                  ZGBBRD 
#define zgbcon_                  ZGBCON 
#define zgbequ_                  ZGBEQU 
#define zgbequb_                 ZGBEQUB 
#define zgbrfs_                  ZGBRFS 
#define zgbsv_                   ZGBSV 
#define zgbsvx_                  ZGBSVX 
#define zgbtf2_                  ZGBTF2 
#define zgbtrf_                  ZGBTRF 
#define zgbtrs_                  ZGBTRS 
#define zgebak_                  ZGEBAK 
#define zgebal_                  ZGEBAL 
#define zgebd2_                  ZGEBD2 
#define zgebrd_                  ZGEBRD 
#define zgecon_                  ZGECON 
#define zgeequ_                  ZGEEQU 
#define zgeequb_                 ZGEEQUB 
#define zgees_                   ZGEES 
#define zgeesx_                  ZGEESX 
#define zgeev_                   ZGEEV 
#define zgeevx_                  ZGEEVX 
#define zgegs_                   ZGEGS 
#define zgegv_                   ZGEGV 
#define zgehd2_                  ZGEHD2 
#define zgehrd_                  ZGEHRD 
#define zgejsv_                  ZGEJSV 
#define zgelq2_                  ZGELQ2 
#define zgelq_                   ZGELQ 
#define zgelqf_                  ZGELQF 
#define zgelqt3_                 ZGELQT3 
#define zgelqt_                  ZGELQT 
#define zgels_                   ZGELS 
#define zgelsd_                  ZGELSD 
#define zgelss_                  ZGELSS 
#define zgelsx_                  ZGELSX 
#define zgelsy_                  ZGELSY 
#define zgemlq_                  ZGEMLQ 
#define zgemlqt_                 ZGEMLQT 
#define zgemqr_                  ZGEMQR 
#define zgemqrt_                 ZGEMQRT 
#define zgeql2_                  ZGEQL2 
#define zgeqlf_                  ZGEQLF 
#define zgeqp3_                  ZGEQP3 
#define zgeqpf_                  ZGEQPF 
#define zgeqr2_                  ZGEQR2 
#define zgeqr2p_                 ZGEQR2P 
#define zgeqr_                   ZGEQR 
#define zgeqrf_                  ZGEQRF 
#define zgeqrfp_                 ZGEQRFP 
#define zgeqrt2_                 ZGEQRT2 
#define zgeqrt3_                 ZGEQRT3 
#define zgeqrt_                  ZGEQRT 
#define zgerfs_                  ZGERFS 
#define zgerq2_                  ZGERQ2 
#define zgerqf_                  ZGERQF 
#define zgesc2_                  ZGESC2 
#define zgesdd_                  ZGESDD 
#define zgesv_                   ZGESV 
#define zgesvd_                  ZGESVD 
#define zgesvdq_                 ZGESVDQ 
#define zgesvdx_                 ZGESVDX 
#define zgesvj_                  ZGESVJ 
#define zgesvx_                  ZGESVX 
#define zgetc2_                  ZGETC2 
#define zgetf2_                  ZGETF2 
#define zgetrf2_                 ZGETRF2 
#define zgetrf_                  ZGETRF 
#define zgetri_                  ZGETRI 
#define zgetrs_                  ZGETRS 
#define zgetsls_                 ZGETSLS 
#define zggbak_                  ZGGBAK 
#define zggbal_                  ZGGBAL 
#define zgges3_                  ZGGES3 
#define zgges_                   ZGGES 
#define zggesx_                  ZGGESX 
#define zggev3_                  ZGGEV3 
#define zggev_                   ZGGEV 
#define zggevx_                  ZGGEVX 
#define zggglm_                  ZGGGLM 
#define zgghd3_                  ZGGHD3 
#define zgghrd_                  ZGGHRD 
#define zgglse_                  ZGGLSE 
#define zggqrf_                  ZGGQRF 
#define zggrqf_                  ZGGRQF 
#define zggsvd3_                 ZGGSVD3 
#define zggsvd_                  ZGGSVD 
#define zggsvp3_                 ZGGSVP3 
#define zggsvp_                  ZGGSVP 
#define zgsvj0_                  ZGSVJ0 
#define zgsvj1_                  ZGSVJ1 
#define zgtcon_                  ZGTCON 
#define zgtrfs_                  ZGTRFS 
#define zgtsv_                   ZGTSV 
#define zgtsvx_                  ZGTSVX 
#define zgttrf_                  ZGTTRF 
#define zgttrs_                  ZGTTRS 
#define zgtts2_                  ZGTTS2 
#define zhb2st_kernels_          ZHB2ST_KERNELS 
#define zhbev_                   ZHBEV 
#define zhbev_2stage_            ZHBEV_2STAGE 
#define zhbevd_                  ZHBEVD 
#define zhbevd_2stage_           ZHBEVD_2STAGE 
#define zhbevx_                  ZHBEVX 
#define zhbevx_2stage_           ZHBEVX_2STAGE 
#define zhbgst_                  ZHBGST 
#define zhbgv_                   ZHBGV 
#define zhbgvd_                  ZHBGVD 
#define zhbgvx_                  ZHBGVX 
#define zhbtrd_                  ZHBTRD 
#define zhecon_                  ZHECON 
#define zhecon_3_                ZHECON_3 
#define zhecon_rook_             ZHECON_ROOK 
#define zheequb_                 ZHEEQUB 
#define zheev_                   ZHEEV 
#define zheev_2stage_            ZHEEV_2STAGE 
#define zheevd_                  ZHEEVD 
#define zheevd_2stage_           ZHEEVD_2STAGE 
#define zheevr_                  ZHEEVR 
#define zheevr_2stage_           ZHEEVR_2STAGE 
#define zheevx_                  ZHEEVX 
#define zheevx_2stage_           ZHEEVX_2STAGE 
#define zhegs2_                  ZHEGS2 
#define zhegst_                  ZHEGST 
#define zhegv_                   ZHEGV 
#define zhegv_2stage_            ZHEGV_2STAGE 
#define zhegvd_                  ZHEGVD 
#define zhegvx_                  ZHEGVX 
#define zherfs_                  ZHERFS 
#define zhesv_                   ZHESV 
#define zhesv_aa_                ZHESV_AA 
#define zhesv_aa_2stage_         ZHESV_AA_2STAGE 
#define zhesv_rk_                ZHESV_RK 
#define zhesv_rook_              ZHESV_ROOK 
#define zhesvx_                  ZHESVX 
#define zheswapr_                ZHESWAPR 
#define zhetd2_                  ZHETD2 
#define zhetf2_                  ZHETF2 
#define zhetf2_rk_               ZHETF2_RK 
#define zhetf2_rook_             ZHETF2_ROOK 
#define zhetrd_                  ZHETRD 
#define zhetrd_2stage_           ZHETRD_2STAGE 
#define zhetrd_hb2st_            ZHETRD_HB2ST 
#define zhetrd_he2hb_            ZHETRD_HE2HB 
#define zhetrf_                  ZHETRF 
#define zhetrf_aa_               ZHETRF_AA 
#define zhetrf_aa_2stage_        ZHETRF_AA_2STAGE 
#define zhetrf_rk_               ZHETRF_RK 
#define zhetrf_rook_             ZHETRF_ROOK 
#define zhetri2_                 ZHETRI2 
#define zhetri2x_                ZHETRI2X 
#define zhetri_                  ZHETRI 
#define zhetri_3_                ZHETRI_3 
#define zhetri_3x_               ZHETRI_3X 
#define zhetri_rook_             ZHETRI_ROOK 
#define zhetrs2_                 ZHETRS2 
#define zhetrs_                  ZHETRS 
#define zhetrs_3_                ZHETRS_3 
#define zhetrs_aa_               ZHETRS_AA 
#define zhetrs_aa_2stage_        ZHETRS_AA_2STAGE 
#define zhetrs_rook_             ZHETRS_ROOK 
#define zhfrk_                   ZHFRK 
#define zhgeqz_                  ZHGEQZ 
#define zhpcon_                  ZHPCON 
#define zhpev_                   ZHPEV 
#define zhpevd_                  ZHPEVD 
#define zhpevx_                  ZHPEVX 
#define zhpgst_                  ZHPGST 
#define zhpgv_                   ZHPGV 
#define zhpgvd_                  ZHPGVD 
#define zhpgvx_                  ZHPGVX 
#define zhprfs_                  ZHPRFS 
#define zhpsv_                   ZHPSV 
#define zhpsvx_                  ZHPSVX 
#define zhptrd_                  ZHPTRD 
#define zhptrf_                  ZHPTRF 
#define zhptri_                  ZHPTRI 
#define zhptrs_                  ZHPTRS 
#define zhsein_                  ZHSEIN 
#define zhseqr_                  ZHSEQR 
#define zla_gbamv_               ZLA_GBAMV 
#define zla_gbrcond_c_           ZLA_GBRCOND_C 
#define zla_gbrcond_x_           ZLA_GBRCOND_X 
#define zla_gbrpvgrw_            ZLA_GBRPVGRW 
#define zla_geamv_               ZLA_GEAMV 
#define zla_gercond_c_           ZLA_GERCOND_C 
#define zla_gercond_x_           ZLA_GERCOND_X 
#define zla_gerpvgrw_            ZLA_GERPVGRW 
#define zla_heamv_               ZLA_HEAMV 
#define zla_hercond_c_           ZLA_HERCOND_C 
#define zla_hercond_x_           ZLA_HERCOND_X 
#define zla_herpvgrw_            ZLA_HERPVGRW 
#define zla_lin_berr_            ZLA_LIN_BERR 
#define zla_porcond_c_           ZLA_PORCOND_C 
#define zla_porcond_x_           ZLA_PORCOND_X 
#define zla_porpvgrw_            ZLA_PORPVGRW 
#define zla_syamv_               ZLA_SYAMV 
#define zla_syrcond_c_           ZLA_SYRCOND_C 
#define zla_syrcond_x_           ZLA_SYRCOND_X 
#define zla_syrpvgrw_            ZLA_SYRPVGRW 
#define zla_wwaddw_              ZLA_WWADDW 
#define zlabrd_                  ZLABRD 
#define zlacgv_                  ZLACGV 
#define zlacn2_                  ZLACN2 
#define zlacon_                  ZLACON 
#define zlacp2_                  ZLACP2 
#define zlacpy_                  ZLACPY 
#define zlacrm_                  ZLACRM 
#define zlacrt_                  ZLACRT 
#define zladiv_                  ZLADIV 
#define zlaed0_                  ZLAED0 
#define zlaed7_                  ZLAED7 
#define zlaed8_                  ZLAED8 
#define zlaein_                  ZLAEIN 
#define zlaesy_                  ZLAESY 
#define zlaev2_                  ZLAEV2 
#define zlag2c_                  ZLAG2C 
#define zlags2_                  ZLAGS2 
#define zlagtm_                  ZLAGTM 
#define zlahef_                  ZLAHEF 
#define zlahef_aa_               ZLAHEF_AA 
#define zlahef_rk_               ZLAHEF_RK 
#define zlahef_rook_             ZLAHEF_ROOK 
#define zlahqr_                  ZLAHQR 
#define zlahr2_                  ZLAHR2 
#define zlahrd_                  ZLAHRD 
#define zlaic1_                  ZLAIC1 
#define zlals0_                  ZLALS0 
#define zlalsa_                  ZLALSA 
#define zlalsd_                  ZLALSD 
#define zlamswlq_                ZLAMSWLQ 
#define zlamtsqr_                ZLAMTSQR 
#define zlangb_                  ZLANGB 
#define zlange_                  ZLANGE 
#define zlangt_                  ZLANGT 
#define zlanhb_                  ZLANHB 
#define zlanhe_                  ZLANHE 
#define zlanhf_                  ZLANHF 
#define zlanhp_                  ZLANHP 
#define zlanhs_                  ZLANHS 
#define zlanht_                  ZLANHT 
#define zlansb_                  ZLANSB 
#define zlansp_                  ZLANSP 
#define zlansy_                  ZLANSY 
#define zlantb_                  ZLANTB 
#define zlantp_                  ZLANTP 
#define zlantr_                  ZLANTR 
#define zlapll_                  ZLAPLL 
#define zlapmr_                  ZLAPMR 
#define zlapmt_                  ZLAPMT 
#define zlaqgb_                  ZLAQGB 
#define zlaqge_                  ZLAQGE 
#define zlaqhb_                  ZLAQHB 
#define zlaqhe_                  ZLAQHE 
#define zlaqhp_                  ZLAQHP 
#define zlaqp2_                  ZLAQP2 
#define zlaqps_                  ZLAQPS 
#define zlaqr0_                  ZLAQR0 
#define zlaqr1_                  ZLAQR1 
#define zlaqr2_                  ZLAQR2 
#define zlaqr3_                  ZLAQR3 
#define zlaqr4_                  ZLAQR4 
#define zlaqr5_                  ZLAQR5 
#define zlaqsb_                  ZLAQSB 
#define zlaqsp_                  ZLAQSP 
#define zlaqsy_                  ZLAQSY 
#define zlar1v_                  ZLAR1V 
#define zlar2v_                  ZLAR2V 
#define zlarcm_                  ZLARCM 
#define zlarf_                   ZLARF 
#define zlarfb_                  ZLARFB 
#define zlarfg_                  ZLARFG 
#define zlarfgp_                 ZLARFGP 
#define zlarft_                  ZLARFT 
#define zlarfx_                  ZLARFX 
#define zlarfy_                  ZLARFY 
#define zlargv_                  ZLARGV 
#define zlarnv_                  ZLARNV 
#define zlarrv_                  ZLARRV 
#define zlarscl2_                ZLARSCL2 
#define zlartg_                  ZLARTG 
#define zlartv_                  ZLARTV 
#define zlarz_                   ZLARZ 
#define zlarzb_                  ZLARZB 
#define zlarzt_                  ZLARZT 
#define zlascl2_                 ZLASCL2 
#define zlascl_                  ZLASCL 
#define zlaset_                  ZLASET 
#define zlasr_                   ZLASR 
#define zlassq_                  ZLASSQ 
#define zlaswlq_                 ZLASWLQ 
#define zlaswp_                  ZLASWP 
#define zlasyf_                  ZLASYF 
#define zlasyf_aa_               ZLASYF_AA 
#define zlasyf_rk_               ZLASYF_RK 
#define zlasyf_rook_             ZLASYF_ROOK 
#define zlat2c_                  ZLAT2C 
#define zlatbs_                  ZLATBS 
#define zlatdf_                  ZLATDF 
#define zlatps_                  ZLATPS 
#define zlatrd_                  ZLATRD 
#define zlatrs_                  ZLATRS 
#define zlatrz_                  ZLATRZ 
#define zlatsqr_                 ZLATSQR 
#define zlatzm_                  ZLATZM 
#define zlaunhr_col_getrfnp2_    ZLAUNHR_COL_GETRFNP2 
#define zlaunhr_col_getrfnp_     ZLAUNHR_COL_GETRFNP 
#define zlauu2_                  ZLAUU2 
#define zlauum_                  ZLAUUM 
#define zpbcon_                  ZPBCON 
#define zpbequ_                  ZPBEQU 
#define zpbrfs_                  ZPBRFS 
#define zpbstf_                  ZPBSTF 
#define zpbsv_                   ZPBSV 
#define zpbsvx_                  ZPBSVX 
#define zpbtf2_                  ZPBTF2 
#define zpbtrf_                  ZPBTRF 
#define zpbtrs_                  ZPBTRS 
#define zpftrf_                  ZPFTRF 
#define zpftri_                  ZPFTRI 
#define zpftrs_                  ZPFTRS 
#define zpocon_                  ZPOCON 
#define zpoequ_                  ZPOEQU 
#define zpoequb_                 ZPOEQUB 
#define zporfs_                  ZPORFS 
#define zposv_                   ZPOSV 
#define zposvx_                  ZPOSVX 
#define zpotf2_                  ZPOTF2 
#define zpotrf2_                 ZPOTRF2 
#define zpotrf_                  ZPOTRF 
#define zpotri_                  ZPOTRI 
#define zpotrs_                  ZPOTRS 
#define zppcon_                  ZPPCON 
#define zppequ_                  ZPPEQU 
#define zpprfs_                  ZPPRFS 
#define zppsv_                   ZPPSV 
#define zppsvx_                  ZPPSVX 
#define zpptrf_                  ZPPTRF 
#define zpptri_                  ZPPTRI 
#define zpptrs_                  ZPPTRS 
#define zpstf2_                  ZPSTF2 
#define zpstrf_                  ZPSTRF 
#define zptcon_                  ZPTCON 
#define zpteqr_                  ZPTEQR 
#define zptrfs_                  ZPTRFS 
#define zptsv_                   ZPTSV 
#define zptsvx_                  ZPTSVX 
#define zpttrf_                  ZPTTRF 
#define zpttrs_                  ZPTTRS 
#define zptts2_                  ZPTTS2 
#define zrot_                    ZROT 
#define zspcon_                  ZSPCON 
#define zspmv_                   ZSPMV 
#define zspr_                    ZSPR 
#define zsprfs_                  ZSPRFS 
#define zspsv_                   ZSPSV 
#define zspsvx_                  ZSPSVX 
#define zsptrf_                  ZSPTRF 
#define zsptri_                  ZSPTRI 
#define zsptrs_                  ZSPTRS 
#define zstedc_                  ZSTEDC 
#define zstegr_                  ZSTEGR 
#define zstein_                  ZSTEIN 
#define zstemr_                  ZSTEMR 
#define zsteqr_                  ZSTEQR 
#define zsycon_                  ZSYCON 
#define zsycon_3_                ZSYCON_3 
#define zsycon_rook_             ZSYCON_ROOK 
#define zsyconv_                 ZSYCONV 
#define zsyconvf_                ZSYCONVF 
#define zsyconvf_rook_           ZSYCONVF_ROOK 
#define zsyequb_                 ZSYEQUB 
#define zsymv_                   ZSYMV 
#define zsyr_                    ZSYR 
#define zsyrfs_                  ZSYRFS 
#define zsysv_                   ZSYSV 
#define zsysv_aa_                ZSYSV_AA 
#define zsysv_aa_2stage_         ZSYSV_AA_2STAGE 
#define zsysv_rk_                ZSYSV_RK 
#define zsysv_rook_              ZSYSV_ROOK 
#define zsysvx_                  ZSYSVX 
#define zsyswapr_                ZSYSWAPR 
#define zsytf2_                  ZSYTF2 
#define zsytf2_rk_               ZSYTF2_RK 
#define zsytf2_rook_             ZSYTF2_ROOK 
#define zsytrf_                  ZSYTRF 
#define zsytrf_aa_               ZSYTRF_AA 
#define zsytrf_aa_2stage_        ZSYTRF_AA_2STAGE 
#define zsytrf_rk_               ZSYTRF_RK 
#define zsytrf_rook_             ZSYTRF_ROOK 
#define zsytri2_                 ZSYTRI2 
#define zsytri2x_                ZSYTRI2X 
#define zsytri_                  ZSYTRI 
#define zsytri_3_                ZSYTRI_3 
#define zsytri_3x_               ZSYTRI_3X 
#define zsytri_rook_             ZSYTRI_ROOK 
#define zsytrs2_                 ZSYTRS2 
#define zsytrs_                  ZSYTRS 
#define zsytrs_3_                ZSYTRS_3 
#define zsytrs_aa_               ZSYTRS_AA 
#define zsytrs_aa_2stage_        ZSYTRS_AA_2STAGE 
#define zsytrs_rook_             ZSYTRS_ROOK 
#define ztbcon_                  ZTBCON 
#define ztbrfs_                  ZTBRFS 
#define ztbtrs_                  ZTBTRS 
#define ztfsm_                   ZTFSM 
#define ztftri_                  ZTFTRI 
#define ztfttp_                  ZTFTTP 
#define ztfttr_                  ZTFTTR 
#define ztgevc_                  ZTGEVC 
#define ztgex2_                  ZTGEX2 
#define ztgexc_                  ZTGEXC 
#define ztgsen_                  ZTGSEN 
#define ztgsja_                  ZTGSJA 
#define ztgsna_                  ZTGSNA 
#define ztgsy2_                  ZTGSY2 
#define ztgsyl_                  ZTGSYL 
#define ztpcon_                  ZTPCON 
#define ztplqt2_                 ZTPLQT2 
#define ztplqt_                  ZTPLQT 
#define ztpmlqt_                 ZTPMLQT 
#define ztpmqrt_                 ZTPMQRT 
#define ztpqrt2_                 ZTPQRT2 
#define ztpqrt_                  ZTPQRT 
#define ztprfb_                  ZTPRFB 
#define ztprfs_                  ZTPRFS 
#define ztptri_                  ZTPTRI 
#define ztptrs_                  ZTPTRS 
#define ztpttf_                  ZTPTTF 
#define ztpttr_                  ZTPTTR 
#define ztrcon_                  ZTRCON 
#define ztrevc3_                 ZTREVC3 
#define ztrevc_                  ZTREVC 
#define ztrexc_                  ZTREXC 
#define ztrrfs_                  ZTRRFS 
#define ztrsen_                  ZTRSEN 
#define ztrsna_                  ZTRSNA 
#define ztrsyl_                  ZTRSYL 
#define ztrti2_                  ZTRTI2 
#define ztrtri_                  ZTRTRI 
#define ztrtrs_                  ZTRTRS 
#define ztrttf_                  ZTRTTF 
#define ztrttp_                  ZTRTTP 
#define ztzrqf_                  ZTZRQF 
#define ztzrzf_                  ZTZRZF 
#define zunbdb1_                 ZUNBDB1 
#define zunbdb2_                 ZUNBDB2 
#define zunbdb3_                 ZUNBDB3 
#define zunbdb4_                 ZUNBDB4 
#define zunbdb5_                 ZUNBDB5 
#define zunbdb6_                 ZUNBDB6 
#define zunbdb_                  ZUNBDB 
#define zuncsd2by1_              ZUNCSD2BY1 
#define zuncsd_                  ZUNCSD 
#define zung2l_                  ZUNG2L 
#define zung2r_                  ZUNG2R 
#define zungbr_                  ZUNGBR 
#define zunghr_                  ZUNGHR 
#define zungl2_                  ZUNGL2 
#define zunglq_                  ZUNGLQ 
#define zungql_                  ZUNGQL 
#define zungqr_                  ZUNGQR 
#define zungr2_                  ZUNGR2 
#define zungrq_                  ZUNGRQ 
#define zungtr_                  ZUNGTR 
#define zungtsqr_                ZUNGTSQR 
#define zunhr_col_               ZUNHR_COL 
#define zunm22_                  ZUNM22 
#define zunm2l_                  ZUNM2L 
#define zunm2r_                  ZUNM2R 
#define zunmbr_                  ZUNMBR 
#define zunmhr_                  ZUNMHR 
#define zunml2_                  ZUNML2 
#define zunmlq_                  ZUNMLQ 
#define zunmql_                  ZUNMQL 
#define zunmqr_                  ZUNMQR 
#define zunmr2_                  ZUNMR2 
#define zunmr3_                  ZUNMR3 
#define zunmrq_                  ZUNMRQ 
#define zunmrz_                  ZUNMRZ 
#define zunmtr_                  ZUNMTR 
#define zupgtr_                  ZUPGTR 
#define zupmtr_                  ZUPMTR 
#define chla_transtype_          CHLA_TRANSTYPE
#define disnan_                  DISNAN
#define dlaisnan_                DLAISNAN
#define sisnan_                  SISNAN
#define slaisnan_                SLAISNAN
#define cladiv_                  CLADIV
#define zladiv_                  ZLADIV
#define sgetrfnp_                SGETRFNP
#define dgetrfnp_                DGETRFNP
#define cgetrfnp_                CGETRFNP
#define zgetrfnp_                ZGETRFNP
#define sspffrt2_                SSPFFRT2
#define dspffrt2_                DSPFFRT2
#define cspffrt2_                CSPFFRT2
#define zspffrt2_                ZSPFFRT2
#define sspffrtx_                SSPFFRTX
#define dspffrtx_                DSPFFRTX
#define cspffrtx_                CSPFFRTX
#define zspffrtx_                ZSPFFRTX
#define sgetrfnpi_               SGETRFNPI
#define dgetrfnpi_               DGETRFNPI
#define cgetrfnpi_               CGETRFNPI
#define zgetrfnpi_               ZGETRFNPI
#else
#define  cgelst_   cgelst
#define  clatrs3_  clatrs3
#define  ctrsyl3_  ctrsyl3
#define  dlarmm_   dlarmm
#define  dgelst_   dgelst
#define  dlatrs3_  dlatrs3
#define  dtrsyl3_  dtrsyl3
#define  slarmm_   slarmm
#define  sgelst_   sgelst
#define  slatrs3_  slatrs3
#define  strsyl3_  strsyl3
#define  zgelst_   zgelst
#define  zlatrs3_  zlatrs3
#define  ztrsyl3_  ztrsyl3
#define  cgetsqrhrt_  cgetsqrhrt
#define  claqz0_  claqz0
#define  claqz1_  claqz1
#define  claqz2_  claqz2
#define  claqz3_  claqz3
#define  clarfb_gett_  clarfb_gett
#define  cungtsqr_row_  cungtsqr_row
#define  dgetsqrhrt_  dgetsqrhrt
#define  dlaqz0_  dlaqz0
#define  dlaqz1_  dlaqz1
#define  dlaqz2_  dlaqz2
#define  dlaqz3_  dlaqz3
#define  dlaqz4_  dlaqz4
#define  dlarfb_gett_  dlarfb_gett
#define  dorgtsqr_row_  dorgtsqr_row
#define  sgetsqrhrt_  sgetsqrhrt
#define  slaqz0_  slaqz0
#define  slaqz1_  slaqz1
#define  slaqz2_  slaqz2
#define  slaqz3_  slaqz3
#define  slaqz4_  slaqz4
#define  slarfb_gett_  slarfb_gett
#define  sorgtsqr_row_  sorgtsqr_row
#define  zgetsqrhrt_  zgetsqrhrt
#define  zlaqz0_  zlaqz0
#define  zlaqz1_  zlaqz1
#define  zlaqz2_  zlaqz2
#define  zlaqz3_  zlaqz3
#define  zlarfb_gett_  zlarfb_gett
#define	 zungtsqr_row_  zungtsqr_row
#define sroundup_lwork sroundup_lwork
#define droundup_lwork droundup_lwork

#define  isamax_   isamax     
#define  idamax_   idamax     
#define  icamax_   icamax     
#define  izamax_   izamax     
#define  sasum_	   sasum      
#define  dasum_	   dasum      
#define  scasum_   scasum     
#define  dzasum_   dzasum     
#define  saxpy_	   saxpy      
#define  daxpy_	   daxpy      
#define  caxpy_	   caxpy      
#define  zaxpy_	   zaxpy      
#define  scopy_	   scopy      
#define  dcopy_	   dcopy      
#define  ccopy_	   ccopy      
#define  zcopy_	   zcopy      
#define  sdot_	   sdot       
#define  ddot_	   ddot       
#define  cdotu_	   cdotu      
#define  cdotc_	   cdotc      
#define  zdotu_	   zdotu      
#define  zdotc_	   zdotc      
#define  snrm2_	   snrm2      
#define  dnrm2_	   dnrm2      
#define  scnrm2_   scnrm2     
#define  dznrm2_   dznrm2     
#define  sscal_	   sscal      
#define  dscal_	   dscal      
#define  cscal_	   cscal      
#define  csscal_   csscal     
#define  zscal_	   zscal      
#define  zdscal_   zdscal     
#define  sswap_	   sswap      
#define  dswap_	   dswap      
#define  cswap_	   cswap      
#define  zswap_	   zswap      
#define  sgemv_	   sgemv      
#define  dgemv_	   dgemv      
#define  cgemv_	   cgemv      
#define  zgemv_	   zgemv      
#define  sger_	   sger       
#define  dger_	   dger       
#define  cgerc_	   cgerc      
#define  cgeru_	   cgeru      
#define  zgerc_	   zgerc      
#define  zgeru_	   zgeru      
#define  chemv_	   chemv      
#define  zhemv_	   zhemv      
#define  cher_	   cher       
#define  zher_	   zher       
#define  cher2_	   cher2      
#define  zher2_	   zher2      
#define  ssymv_	   ssymv      
#define  dsymv_	   dsymv      
#define  ssyr_	   ssyr       
#define  dsyr_	   dsyr       
#define  ssyr2_	   ssyr2      
#define  dsyr2_	   dsyr2      
#define  strmv_	   strmv      
#define  dtrmv_	   dtrmv      
#define  ctrmv_	   ctrmv      
#define  ztrmv_	   ztrmv      
#define  strsv_	   strsv      
#define  dtrsv_	   dtrsv      
#define  ctrsv_	   ctrsv      
#define  ztrsv_	   ztrsv      
#define  sgemm_	   sgemm      
#define  dgemm_	   dgemm      
#define  cgemm_	   cgemm      
#define  zgemm_	   zgemm      
#define  chemm_	   chemm      
#define  zhemm_	   zhemm      
#define  cherk_	   cherk      
#define  zherk_	   zherk      
#define  cher2k_   cher2k     
#define  zher2k_   zher2k     
#define  ssymm_	   ssymm      
#define  dsymm_	   dsymm      
#define  csymm_	   csymm      
#define  zsymm_	   zsymm      
#define  ssyrk_	   ssyrk      
#define  dsyrk_	   dsyrk      
#define  csyrk_	   csyrk      
#define  zsyrk_	   zsyrk      
#define  ssyr2k_   ssyr2k     
#define  dsyr2k_   dsyr2k     
#define  csyr2k_   csyr2k     
#define  zsyr2k_   zsyr2k     
#define  strmm_	   strmm      
#define  dtrmm_	   dtrmm      
#define  ctrmm_	   ctrmm      
#define  ztrmm_	   ztrmm      
#define  strsm_	   strsm      
#define  dtrsm_	   dtrsm      
#define  ctrsm_	   ctrsm      
#define  ztrsm_	   ztrsm
#define  dgemmt_   dgemmt      

#define csrot_ csrot
#define cgbmv_ cgbmv
#define ctbsv_ ctbsv
#define dsbmv_ dsbmv
#define dspmv_ dspmv
#define ctpsv_ ctpsv
#define chpmv_ chpmv
#define ctpmv_ ctpmv
#define chpr2_ chpr2
#define chpr_ chpr
#define chbmv_ chbmv
#define ctbmv_ ctbmv
#define drot_ drot
#define dgbmv_ dgbmv
#define dtbsv_ dtbsv
#define drotm_ drotm
#define dtpsv_ dtpsv
#define dspr_ dspr
#define dtpmv_ dtpmv
#define dspr2_ dspr2
#define dtbmv_ dtbmv
#define srot_ srot
#define sgbmv_ sgbmv
#define stbsv_ stbsv
#define srotm_ srotm
#define stpsv_  stpsv
#define ssbmv_	ssbmv
#define sspmv_	sspmv
#define sspr_	sspr
#define stpmv_	stpmv
#define sspr2_	sspr2
#define stbmv_	stbmv
#define zdrot_	zdrot
#define zgbmv_	zgbmv
#define ztbsv_	ztbsv
#define ztpsv_	ztpsv
#define zhpmv_	zhpmv
#define ztpmv_	ztpmv
#define zhpr2_	zhpr2
#define zhpr_	zhpr
#define zhbmv_	zhbmv
#define ztbmv_	ztbmv

#define cbbcsd_                  cbbcsd              
#define cbdsqr_                  cbdsqr 
#define cgbbrd_                  cgbbrd 
#define cgbcon_                  cgbcon  
#define cgbequ_                  cgbequ 
#define cgbequb_                 cgbequb 
#define cgbrfs_                  cgbrfs 
#define cgbsv_                   cgbsv 
#define cgbsvx_                  cgbsvx 
#define cgbtf2_                  cgbtf2 
#define cgbtrf_                  cgbtrf 
#define cgbtrs_                  cgbtrs 
#define cgebak_                  cgebak 
#define cgebal_                  cgebal 
#define cgebd2_                  cgebd2 
#define cgebrd_                  cgebrd 
#define cgecon_                  cgecon 
#define cgeequ_                  cgeequ 
#define cgeequb_                 cgeequb 
#define cgees_                   cgees 
#define cgeesx_                  cgeesx 
#define cgeev_                   cgeev 
#define cgeevx_                  cgeevx 
#define cgegs_                   cgegs 
#define cgegv_                   cgegv 
#define cgehd2_                  cgehd2 
#define cgehrd_                  cgehrd 
#define cgejsv_                  cgejsv 
#define cgelq2_                  cgelq2 
#define cgelq_                   cgelq 
#define cgelqf_                  cgelqf 
#define cgelqt3_                 cgelqt3 
#define cgelqt_                  cgelqt 
#define cgels_                   cgels 
#define cgelsd_                  cgelsd 
#define cgelss_                  cgelss 
#define cgelsx_                  cgelsx 
#define cgelsy_                  cgelsy 
#define cgemlq_                  cgemlq 
#define cgemlqt_                 cgemlqt 
#define cgemqr_                  cgemqr 
#define cgemqrt_                 cgemqrt 
#define cgeql2_                  cgeql2 
#define cgeqlf_                  cgeqlf 
#define cgeqp3_                  cgeqp3 
#define cgeqpf_                  cgeqpf 
#define cgeqr2_                  cgeqr2 
#define cgeqr2p_                 cgeqr2p 
#define cgeqr_                   cgeqr 
#define cgeqrf_                  cgeqrf 
#define cgeqrfp_                 cgeqrfp 
#define cgeqrt2_                 cgeqrt2 
#define cgeqrt3_                 cgeqrt3 
#define cgeqrt_                  cgeqrt 
#define cgerfs_                  cgerfs 
#define cgerq2_                  cgerq2 
#define cgerqf_                  cgerqf 
#define cgesc2_                  cgesc2 
#define cgesdd_                  cgesdd 
#define cgesv_                   cgesv 
#define cgesvd_                  cgesvd 
#define cgesvdq_                 cgesvdq 
#define cgesvdx_                 cgesvdx 
#define cgesvj_                  cgesvj 
#define cgesvx_                  cgesvx 
#define cgetc2_                  cgetc2 
#define cgetf2_                  cgetf2 
#define cgetrf2_                 cgetrf2 
#define cgetrf_                  cgetrf 
#define cgetri_                  cgetri 
#define cgetrs_                  cgetrs 
#define cgetsls_                 cgetsls 
#define cggbak_                  cggbak 
#define cggbal_                  cggbal 
#define cgges3_                  cgges3 
#define cgges_                   cgges 
#define cggesx_                  cggesx 
#define cggev3_                  cggev3 
#define cggev_                   cggev 
#define cggevx_                  cggevx 
#define cggglm_                  cggglm 
#define cgghd3_                  cgghd3 
#define cgghrd_                  cgghrd 
#define cgglse_                  cgglse 
#define cggqrf_                  cggqrf 
#define cggrqf_                  cggrqf 
#define cggsvd3_                 cggsvd3 
#define cggsvd_                  cggsvd 
#define cggsvp3_                 cggsvp3 
#define cggsvp_                  cggsvp 
#define cgsvj0_                  cgsvj0 
#define cgsvj1_                  cgsvj1 
#define cgtcon_                  cgtcon 
#define cgtrfs_                  cgtrfs 
#define cgtsv_                   cgtsv 
#define cgtsvx_                  cgtsvx 
#define cgttrf_                  cgttrf 
#define cgttrs_                  cgttrs 
#define cgtts2_                  cgtts2 
#define chb2st_kernels_          chb2st_kernels 
#define chbev_                   chbev 
#define chbev_2stage_            chbev_2stage 
#define chbevd_                  chbevd 
#define chbevd_2stage_           chbevd_2stage 
#define chbevx_                  chbevx 
#define chbevx_2stage_           chbevx_2stage 
#define chbgst_                  chbgst 
#define chbgv_                   chbgv 
#define chbgvd_                  chbgvd 
#define chbgvx_                  chbgvx 
#define chbtrd_                  chbtrd 
#define checon_                  checon 
#define checon_3_                checon_3 
#define checon_rook_             checon_rook 
#define cheequb_                 cheequb 
#define cheev_                   cheev 
#define cheev_2stage_            cheev_2stage 
#define cheevd_                  cheevd 
#define cheevd_2stage_           cheevd_2stage 
#define cheevr_                  cheevr 
#define cheevr_2stage_           cheevr_2stage 
#define cheevx_                  cheevx 
#define cheevx_2stage_           cheevx_2stage 
#define chegs2_                  chegs2 
#define chegst_                  chegst 
#define chegv_                   chegv 
#define chegv_2stage_            chegv_2stage 
#define chegvd_                  chegvd 
#define chegvx_                  chegvx 
#define cherfs_                  cherfs 
#define chesv_                   chesv 
#define chesv_aa_                chesv_aa 
#define chesv_aa_2stage_         chesv_aa_2stage 
#define chesv_rk_                chesv_rk 
#define chesv_rook_              chesv_rook 
#define chesvx_                  chesvx 
#define cheswapr_                cheswapr 
#define chetd2_                  chetd2 
#define chetf2_                  chetf2 
#define chetf2_rk_               chetf2_rk 
#define chetf2_rook_             chetf2_rook 
#define chetrd_                  chetrd 
#define chetrd_2stage_           chetrd_2stage 
#define chetrd_hb2st_            chetrd_hb2st 
#define chetrd_he2hb_            chetrd_he2hb 
#define chetrf_                  chetrf 
#define chetrf_aa_               chetrf_aa 
#define chetrf_aa_2stage_        chetrf_aa_2stage 
#define chetrf_rk_               chetrf_rk 
#define chetrf_rook_             chetrf_rook 
#define chetri2_                 chetri2 
#define chetri2x_                chetri2x 
#define chetri_                  chetri 
#define chetri_3_                chetri_3 
#define chetri_3x_               chetri_3x 
#define chetri_rook_             chetri_rook 
#define chetrs2_                 chetrs2 
#define chetrs_                  chetrs 
#define chetrs_3_                chetrs_3 
#define chetrs_aa_               chetrs_aa 
#define chetrs_aa_2stage_        chetrs_aa_2stage 
#define chetrs_rook_             chetrs_rook 
#define chfrk_                   chfrk 
#define chgeqz_                  chgeqz 
#define chla_transtype_          chla_transtype 
#define chpcon_                  chpcon 
#define chpev_                   chpev 
#define chpevd_                  chpevd 
#define chpevx_                  chpevx 
#define chpgst_                  chpgst 
#define chpgv_                   chpgv 
#define chpgvd_                  chpgvd 
#define chpgvx_                  chpgvx 
#define chprfs_                  chprfs 
#define chpsv_                   chpsv 
#define chpsvx_                  chpsvx 
#define chptrd_                  chptrd 
#define chptrf_                  chptrf 
#define chptri_                  chptri 
#define chptrs_                  chptrs 
#define chsein_                  chsein 
#define chseqr_                  chseqr 
#define cla_gbamv_               cla_gbamv 
#define cla_gbrcond_c_           cla_gbrcond_c 
#define cla_gbrcond_x_           cla_gbrcond_x 
#define cla_gbrpvgrw_            cla_gbrpvgrw 
#define cla_geamv_               cla_geamv 
#define cla_gercond_c_           cla_gercond_c 
#define cla_gercond_x_           cla_gercond_x 
#define cla_gerpvgrw_            cla_gerpvgrw 
#define cla_heamv_               cla_heamv 
#define cla_hercond_c_           cla_hercond_c 
#define cla_hercond_x_           cla_hercond_x 
#define cla_herpvgrw_            cla_herpvgrw 
#define cla_lin_berr_            cla_lin_berr 
#define cla_porcond_c_           cla_porcond_c 
#define cla_porcond_x_           cla_porcond_x 
#define cla_porpvgrw_            cla_porpvgrw 
#define cla_syamv_               cla_syamv 
#define cla_syrcond_c_           cla_syrcond_c 
#define cla_syrcond_x_           cla_syrcond_x 
#define cla_syrpvgrw_            cla_syrpvgrw 
#define cla_wwaddw_              cla_wwaddw 
#define clabrd_                  clabrd 
#define clacgv_                  clacgv 
#define clacn2_                  clacn2 
#define clacon_                  clacon 
#define clacp2_                  clacp2 
#define clacpy_                  clacpy 
#define clacrm_                  clacrm 
#define clacrt_                  clacrt 
#define cladiv_                  cladiv 
#define claed0_                  claed0 
#define claed7_                  claed7 
#define claed8_                  claed8 
#define claein_                  claein 
#define claesy_                  claesy 
#define claev2_                  claev2 
#define clag2z_                  clag2z 
#define clags2_                  clags2 
#define clagtm_                  clagtm 
#define clahef_                  clahef 
#define clahef_aa_               clahef_aa 
#define clahef_rk_               clahef_rk 
#define clahef_rook_             clahef_rook 
#define clahqr_                  clahqr 
#define clahr2_                  clahr2 
#define clahrd_                  clahrd 
#define claic1_                  claic1 
#define clals0_                  clals0 
#define clalsa_                  clalsa 
#define clalsd_                  clalsd 
#define clamswlq_                clamswlq 
#define clamtsqr_                clamtsqr 
#define clangb_                  clangb 
#define clange_                  clange 
#define clangt_                  clangt 
#define clanhb_                  clanhb 
#define clanhe_                  clanhe 
#define clanhf_                  clanhf 
#define clanhp_                  clanhp 
#define clanhs_                  clanhs 
#define clanht_                  clanht 
#define clansb_                  clansb 
#define clansp_                  clansp 
#define clansy_                  clansy 
#define clantb_                  clantb 
#define clantp_                  clantp 
#define clantr_                  clantr 
#define clapll_                  clapll 
#define clapmr_                  clapmr 
#define clapmt_                  clapmt 
#define claqgb_                  claqgb 
#define claqge_                  claqge 
#define claqhb_                  claqhb 
#define claqhe_                  claqhe 
#define claqhp_                  claqhp 
#define claqp2_                  claqp2 
#define claqps_                  claqps 
#define claqr0_                  claqr0 
#define claqr1_                  claqr1 
#define claqr2_                  claqr2 
#define claqr3_                  claqr3 
#define claqr4_                  claqr4 
#define claqr5_                  claqr5 
#define claqsb_                  claqsb 
#define claqsp_                  claqsp 
#define claqsy_                  claqsy 
#define clar1v_                  clar1v 
#define clar2v_                  clar2v 
#define clarcm_                  clarcm 
#define clarf_                   clarf 
#define clarfb_                  clarfb 
#define clarfg_                  clarfg 
#define clarfgp_                 clarfgp 
#define clarft_                  clarft 
#define clarfx_                  clarfx 
#define clarfy_                  clarfy 
#define clargv_                  clargv 
#define clarnv_                  clarnv 
#define clarrv_                  clarrv 
#define clarscl2_                clarscl2 
#define clartg_                  clartg 
#define clartv_                  clartv 
#define clarz_                   clarz 
#define clarzb_                  clarzb 
#define clarzt_                  clarzt 
#define clascl2_                 clascl2 
#define clascl_                  clascl 
#define claset_                  claset 
#define clasr_                   clasr 
#define classq_                  classq 
#define claswlq_                 claswlq 
#define claswp_                  claswp 
#define clasyf_                  clasyf 
#define clasyf_aa_               clasyf_aa 
#define clasyf_rk_               clasyf_rk 
#define clasyf_rook_             clasyf_rook 
#define clatbs_                  clatbs 
#define clatdf_                  clatdf 
#define clatps_                  clatps 
#define clatrd_                  clatrd 
#define clatrs_                  clatrs 
#define clatrz_                  clatrz 
#define clatsqr_                 clatsqr 
#define clatzm_                  clatzm 
#define claunhr_col_getrfnp2_    claunhr_col_getrfnp2 
#define claunhr_col_getrfnp_     claunhr_col_getrfnp 
#define clauu2_                  clauu2 
#define clauum_                  clauum 
#define cpbcon_                  cpbcon 
#define cpbequ_                  cpbequ 
#define cpbrfs_                  cpbrfs 
#define cpbstf_                  cpbstf 
#define cpbsv_                   cpbsv 
#define cpbsvx_                  cpbsvx 
#define cpbtf2_                  cpbtf2 
#define cpbtrf_                  cpbtrf 
#define cpbtrs_                  cpbtrs 
#define cpftrf_                  cpftrf 
#define cpftri_                  cpftri 
#define cpftrs_                  cpftrs 
#define cpocon_                  cpocon 
#define cpoequ_                  cpoequ 
#define cpoequb_                 cpoequb 
#define cporfs_                  cporfs 
#define cposv_                   cposv 
#define cposvx_                  cposvx 
#define cpotf2_                  cpotf2 
#define cpotrf2_                 cpotrf2 
#define cpotrf_                  cpotrf 
#define cpotri_                  cpotri 
#define cpotrs_                  cpotrs 
#define cppcon_                  cppcon 
#define cppequ_                  cppequ 
#define cpprfs_                  cpprfs 
#define cppsv_                   cppsv 
#define cppsvx_                  cppsvx 
#define cpptrf_                  cpptrf 
#define cpptri_                  cpptri 
#define cpptrs_                  cpptrs 
#define cpstf2_                  cpstf2 
#define cpstrf_                  cpstrf 
#define cptcon_                  cptcon 
#define cpteqr_                  cpteqr 
#define cptrfs_                  cptrfs 
#define cptsv_                   cptsv 
#define cptsvx_                  cptsvx 
#define cpttrf_                  cpttrf 
#define cpttrs_                  cpttrs 
#define cptts2_                  cptts2 
#define crot_                    crot 
#define cspcon_                  cspcon 
#define cspmv_                   cspmv 
#define cspr_                    cspr 
#define csprfs_                  csprfs 
#define cspsv_                   cspsv 
#define cspsvx_                  cspsvx 
#define csptrf_                  csptrf 
#define csptri_                  csptri 
#define csptrs_                  csptrs 
#define csrscl_                  csrscl 
#define cstedc_                  cstedc 
#define cstegr_                  cstegr 
#define cstein_                  cstein 
#define cstemr_                  cstemr 
#define csteqr_                  csteqr 
#define csycon_                  csycon 
#define csycon_3_                csycon_3 
#define csycon_rook_             csycon_rook 
#define csyconv_                 csyconv 
#define csyconvf_                csyconvf 
#define csyconvf_rook_           csyconvf_rook 
#define csyequb_                 csyequb 
#define csymv_                   csymv 
#define csyr_                    csyr 
#define csyrfs_                  csyrfs 
#define csysv_                   csysv 
#define csysv_aa_                csysv_aa 
#define csysv_aa_2stage_         csysv_aa_2stage 
#define csysv_rk_                csysv_rk 
#define csysv_rook_              csysv_rook 
#define csysvx_                  csysvx 
#define csyswapr_                csyswapr 
#define csytf2_                  csytf2 
#define csytf2_rk_               csytf2_rk 
#define csytf2_rook_             csytf2_rook 
#define csytrf_                  csytrf 
#define csytrf_aa_               csytrf_aa 
#define csytrf_aa_2stage_        csytrf_aa_2stage 
#define csytrf_rk_               csytrf_rk 
#define csytrf_rook_             csytrf_rook 
#define csytri2_                 csytri2 
#define csytri2x_                csytri2x 
#define csytri_                  csytri 
#define csytri_3_                csytri_3 
#define csytri_3x_               csytri_3x 
#define csytri_rook_             csytri_rook 
#define csytrs2_                 csytrs2 
#define csytrs_                  csytrs 
#define csytrs_3_                csytrs_3 
#define csytrs_aa_               csytrs_aa 
#define csytrs_aa_2stage_        csytrs_aa_2stage 
#define csytrs_rook_             csytrs_rook 
#define ctbcon_                  ctbcon 
#define ctbrfs_                  ctbrfs 
#define ctbtrs_                  ctbtrs 
#define ctfsm_                   ctfsm 
#define ctftri_                  ctftri 
#define ctfttp_                  ctfttp 
#define ctfttr_                  ctfttr 
#define ctgevc_                  ctgevc 
#define ctgex2_                  ctgex2 
#define ctgexc_                  ctgexc 
#define ctgsen_                  ctgsen 
#define ctgsja_                  ctgsja 
#define ctgsna_                  ctgsna 
#define ctgsy2_                  ctgsy2 
#define ctgsyl_                  ctgsyl 
#define ctpcon_                  ctpcon 
#define ctplqt2_                 ctplqt2 
#define ctplqt_                  ctplqt 
#define ctpmlqt_                 ctpmlqt 
#define ctpmqrt_                 ctpmqrt 
#define ctpqrt2_                 ctpqrt2 
#define ctpqrt_                  ctpqrt 
#define ctprfb_                  ctprfb 
#define ctprfs_                  ctprfs 
#define ctptri_                  ctptri 
#define ctptrs_                  ctptrs 
#define ctpttf_                  ctpttf 
#define ctpttr_                  ctpttr 
#define ctrcon_                  ctrcon 
#define ctrevc3_                 ctrevc3 
#define ctrevc_                  ctrevc 
#define ctrexc_                  ctrexc 
#define ctrrfs_                  ctrrfs 
#define ctrsen_                  ctrsen 
#define ctrsna_                  ctrsna 
#define ctrsyl_                  ctrsyl 
#define ctrti2_                  ctrti2 
#define ctrtri_                  ctrtri 
#define ctrtrs_                  ctrtrs 
#define ctrttf_                  ctrttf 
#define ctrttp_                  ctrttp 
#define ctzrqf_                  ctzrqf 
#define ctzrzf_                  ctzrzf 
#define cunbdb1_                 cunbdb1 
#define cunbdb2_                 cunbdb2 
#define cunbdb3_                 cunbdb3 
#define cunbdb4_                 cunbdb4 
#define cunbdb5_                 cunbdb5 
#define cunbdb6_                 cunbdb6 
#define cunbdb_                  cunbdb 
#define cuncsd2by1_              cuncsd2by1 
#define cuncsd_                  cuncsd 
#define cung2l_                  cung2l 
#define cung2r_                  cung2r 
#define cungbr_                  cungbr 
#define cunghr_                  cunghr 
#define cungl2_                  cungl2 
#define cunglq_                  cunglq 
#define cungql_                  cungql 
#define cungqr_                  cungqr 
#define cungr2_                  cungr2 
#define cungrq_                  cungrq 
#define cungtr_                  cungtr 
#define cungtsqr_                cungtsqr 
#define cunhr_col_               cunhr_col 
#define cunm22_                  cunm22 
#define cunm2l_                  cunm2l 
#define cunm2r_                  cunm2r 
#define cunmbr_                  cunmbr 
#define cunmhr_                  cunmhr 
#define cunml2_                  cunml2 
#define cunmlq_                  cunmlq 
#define cunmql_                  cunmql 
#define cunmqr_                  cunmqr 
#define cunmr2_                  cunmr2 
#define cunmr3_                  cunmr3 
#define cunmrq_                  cunmrq 
#define cunmrz_                  cunmrz 
#define cunmtr_                  cunmtr 
#define cupgtr_                  cupgtr 
#define cupmtr_                  cupmtr 
#define dbbcsd_                  dbbcsd 
#define dbdsdc_                  dbdsdc 
#define dbdsqr_                  dbdsqr 
#define dbdsvdx_                 dbdsvdx 
#define dcombssq_                dcombssq 
#define ddisna_                  ddisna 
#define dgbbrd_                  dgbbrd 
#define dgbcon_                  dgbcon 
#define dgbequ_                  dgbequ 
#define dgbequb_                 dgbequb 
#define dgbrfs_                  dgbrfs 
#define dgbsv_                   dgbsv 
#define dgbsvx_                  dgbsvx 
#define dgbtf2_                  dgbtf2 
#define dgbtrf_                  dgbtrf 
#define dgbtrs_                  dgbtrs 
#define dgebak_                  dgebak 
#define dgebal_                  dgebal 
#define dgebd2_                  dgebd2 
#define dgebrd_                  dgebrd 
#define dgecon_                  dgecon 
#define dgeequ_                  dgeequ 
#define dgeequb_                 dgeequb 
#define dgees_                   dgees 
#define dgeesx_                  dgeesx 
#define dgeev_                   dgeev 
#define dgeevx_                  dgeevx 
#define dgegs_                   dgegs 
#define dgegv_                   dgegv 
#define dgehd2_                  dgehd2 
#define dgehrd_                  dgehrd 
#define dgejsv_                  dgejsv 
#define dgelq2_                  dgelq2 
#define dgelq_                   dgelq 
#define dgelqf_                  dgelqf 
#define dgelqt3_                 dgelqt3 
#define dgelqt_                  dgelqt 
#define dgels_                   dgels 
#define dgelsd_                  dgelsd 
#define dgelss_                  dgelss 
#define dgelsx_                  dgelsx 
#define dgelsy_                  dgelsy 
#define dgemlq_                  dgemlq 
#define dgemlqt_                 dgemlqt 
#define dgemqr_                  dgemqr 
#define dgemqrt_                 dgemqrt 
#define dgeql2_                  dgeql2 
#define dgeqlf_                  dgeqlf 
#define dgeqp3_                  dgeqp3 
#define dgeqpf_                  dgeqpf 
#define dgeqr2_                  dgeqr2 
#define dgeqr2p_                 dgeqr2p 
#define dgeqr_                   dgeqr 
#define dgeqrf_                  dgeqrf 
#define dgeqrfp_                 dgeqrfp 
#define dgeqrt2_                 dgeqrt2 
#define dgeqrt3_                 dgeqrt3 
#define dgeqrt_                  dgeqrt 
#define dgerfs_                  dgerfs 
#define dgerq2_                  dgerq2 
#define dgerqf_                  dgerqf 
#define dgesc2_                  dgesc2 
#define dgesdd_                  dgesdd 
#define dgesv_                   dgesv 
#define dgesvd_                  dgesvd 
#define dgesvdq_                 dgesvdq 
#define dgesvdx_                 dgesvdx 
#define dgesvj_                  dgesvj 
#define dgesvx_                  dgesvx 
#define dgetc2_                  dgetc2 
#define dgetf2_                  dgetf2 
#define dgetrf2_                 dgetrf2 
#define dgetrf_                  dgetrf 
#define dgetri_                  dgetri 
#define dgetrs_                  dgetrs 
#define dgetsls_                 dgetsls 
#define dggbak_                  dggbak 
#define dggbal_                  dggbal 
#define dgges3_                  dgges3 
#define dgges_                   dgges 
#define dggesx_                  dggesx 
#define dggev3_                  dggev3 
#define dggev_                   dggev 
#define dggevx_                  dggevx 
#define dggglm_                  dggglm 
#define dgghd3_                  dgghd3 
#define dgghrd_                  dgghrd 
#define dgglse_                  dgglse 
#define dggqrf_                  dggqrf 
#define dggrqf_                  dggrqf 
#define dggsvd3_                 dggsvd3 
#define dggsvd_                  dggsvd 
#define dggsvp3_                 dggsvp3 
#define dggsvp_                  dggsvp 
#define dgsvj0_                  dgsvj0 
#define dgsvj1_                  dgsvj1 
#define dgtcon_                  dgtcon 
#define dgtrfs_                  dgtrfs 
#define dgtsv_                   dgtsv 
#define dgtsvx_                  dgtsvx 
#define dgttrf_                  dgttrf 
#define dgttrs_                  dgttrs 
#define dgtts2_                  dgtts2 
#define dhgeqz_                  dhgeqz 
#define dhsein_                  dhsein 
#define dhseqr_                  dhseqr 
#define disnan_                  disnan 
#define dla_gbamv_               dla_gbamv 
#define dla_gbrcond_             dla_gbrcond 
#define dla_gbrpvgrw_            dla_gbrpvgrw 
#define dla_geamv_               dla_geamv 
#define dla_gercond_             dla_gercond 
#define dla_gerpvgrw_            dla_gerpvgrw 
#define dla_lin_berr_            dla_lin_berr 
#define dla_porcond_             dla_porcond 
#define dla_porpvgrw_            dla_porpvgrw 
#define dla_syamv_               dla_syamv 
#define dla_syrcond_             dla_syrcond 
#define dla_syrpvgrw_            dla_syrpvgrw 
#define dla_wwaddw_              dla_wwaddw 
#define dlabad_                  dlabad 
#define dlabrd_                  dlabrd 
#define dlacn2_                  dlacn2 
#define dlacon_                  dlacon 
#define dlacpy_                  dlacpy 
#define dladiv1_                 dladiv1 
#define dladiv2_                 dladiv2 
#define dladiv_                  dladiv 
#define dlae2_                   dlae2 
#define dlaebz_                  dlaebz 
#define dlaed0_                  dlaed0 
#define dlaed1_                  dlaed1 
#define dlaed2_                  dlaed2 
#define dlaed3_                  dlaed3 
#define dlaed4_                  dlaed4 
#define dlaed5_                  dlaed5 
#define dlaed6_                  dlaed6 
#define dlaed7_                  dlaed7 
#define dlaed8_                  dlaed8 
#define dlaed9_                  dlaed9 
#define dlaeda_                  dlaeda 
#define dlaein_                  dlaein 
#define dlaev2_                  dlaev2 
#define dlaexc_                  dlaexc 
#define dlag2_                   dlag2 
#define dlag2s_                  dlag2s 
#define dlags2_                  dlags2 
#define dlagtf_                  dlagtf 
#define dlagtm_                  dlagtm 
#define dlagts_                  dlagts 
#define dlagv2_                  dlagv2 
#define dlahqr_                  dlahqr 
#define dlahr2_                  dlahr2 
#define dlahrd_                  dlahrd 
#define dlaic1_                  dlaic1 
#define dlaisnan_                dlaisnan 
#define dlaln2_                  dlaln2 
#define dlals0_                  dlals0 
#define dlalsa_                  dlalsa 
#define dlalsd_                  dlalsd 
#define dlamc3_                  dlamc3 
#define dlamch_                  dlamch 
#define dlamrg_                  dlamrg 
#define dlamswlq_                dlamswlq 
#define dlamtsqr_                dlamtsqr 
#define dlaneg_                  dlaneg 
#define dlangb_                  dlangb 
#define dlange_                  dlange 
#define dlangt_                  dlangt 
#define dlanhs_                  dlanhs 
#define dlansb_                  dlansb 
#define dlansf_                  dlansf 
#define dlansp_                  dlansp 
#define dlanst_                  dlanst 
#define dlansy_                  dlansy 
#define dlantb_                  dlantb 
#define dlantp_                  dlantp 
#define dlantr_                  dlantr 
#define dlanv2_                  dlanv2 
#define dlaorhr_col_getrfnp2_    dlaorhr_col_getrfnp2 
#define dlaorhr_col_getrfnp_     dlaorhr_col_getrfnp 
#define dlapll_                  dlapll 
#define dlapmr_                  dlapmr 
#define dlapmt_                  dlapmt 
#define dlapy2_                  dlapy2 
#define dlapy3_                  dlapy3 
#define dlaqgb_                  dlaqgb 
#define dlaqge_                  dlaqge 
#define dlaqp2_                  dlaqp2 
#define dlaqps_                  dlaqps 
#define dlaqr0_                  dlaqr0 
#define dlaqr1_                  dlaqr1 
#define dlaqr2_                  dlaqr2 
#define dlaqr3_                  dlaqr3 
#define dlaqr4_                  dlaqr4 
#define dlaqr5_                  dlaqr5 
#define dlaqsb_                  dlaqsb 
#define dlaqsp_                  dlaqsp 
#define dlaqsy_                  dlaqsy 
#define dlaqtr_                  dlaqtr 
#define dlar1v_                  dlar1v 
#define dlar2v_                  dlar2v 
#define dlarf_                   dlarf 
#define dlarfb_                  dlarfb 
#define dlarfg_                  dlarfg 
#define dlarfgp_                 dlarfgp 
#define dlarft_                  dlarft 
#define dlarfx_                  dlarfx 
#define dlarfy_                  dlarfy 
#define dlargv_                  dlargv 
#define dlarnv_                  dlarnv 
#define dlarra_                  dlarra 
#define dlarrb_                  dlarrb 
#define dlarrc_                  dlarrc 
#define dlarrd_                  dlarrd 
#define dlarre_                  dlarre 
#define dlarrf_                  dlarrf 
#define dlarrj_                  dlarrj 
#define dlarrk_                  dlarrk 
#define dlarrr_                  dlarrr 
#define dlarrv_                  dlarrv 
#define dlarscl2_                dlarscl2 
#define dlartg_                  dlartg 
#define dlartgp_                 dlartgp 
#define dlartgs_                 dlartgs 
#define dlartv_                  dlartv 
#define dlaruv_                  dlaruv 
#define dlarz_                   dlarz 
#define dlarzb_                  dlarzb 
#define dlarzt_                  dlarzt 
#define dlas2_                   dlas2 
#define dlascl2_                 dlascl2 
#define dlascl_                  dlascl 
#define dlasd0_                  dlasd0 
#define dlasd1_                  dlasd1 
#define dlasd2_                  dlasd2 
#define dlasd3_                  dlasd3 
#define dlasd4_                  dlasd4 
#define dlasd5_                  dlasd5 
#define dlasd6_                  dlasd6 
#define dlasd7_                  dlasd7 
#define dlasd8_                  dlasd8 
#define dlasda_                  dlasda 
#define dlasdq_                  dlasdq 
#define dlasdt_                  dlasdt 
#define dlaset_                  dlaset 
#define dlasq1_                  dlasq1 
#define dlasq2_                  dlasq2 
#define dlasq3_                  dlasq3 
#define dlasq4_                  dlasq4 
#define dlasq5_                  dlasq5 
#define dlasq6_                  dlasq6 
#define dlasr_                   dlasr 
#define dlasrt_                  dlasrt 
#define dlassq_                  dlassq 
#define dlasv2_                  dlasv2 
#define dlaswlq_                 dlaswlq 
#define dlaswp_                  dlaswp 
#define dlasy2_                  dlasy2 
#define dlasyf_                  dlasyf 
#define dlasyf_aa_               dlasyf_aa 
#define dlasyf_rk_               dlasyf_rk 
#define dlasyf_rook_             dlasyf_rook 
#define dlat2s_                  dlat2s 
#define dlatbs_                  dlatbs 
#define dlatdf_                  dlatdf 
#define dlatps_                  dlatps 
#define dlatrd_                  dlatrd 
#define dlatrs_                  dlatrs 
#define dlatrz_                  dlatrz 
#define dlatsqr_                 dlatsqr 
#define dlatzm_                  dlatzm 
#define dlauu2_                  dlauu2 
#define dlauum_                  dlauum 
#define dopgtr_                  dopgtr 
#define dopmtr_                  dopmtr 
#define dorbdb1_                 dorbdb1 
#define dorbdb2_                 dorbdb2 
#define dorbdb3_                 dorbdb3 
#define dorbdb4_                 dorbdb4 
#define dorbdb5_                 dorbdb5 
#define dorbdb6_                 dorbdb6 
#define dorbdb_                  dorbdb 
#define dorcsd2by1_              dorcsd2by1 
#define dorcsd_                  dorcsd 
#define dorg2l_                  dorg2l 
#define dorg2r_                  dorg2r 
#define dorgbr_                  dorgbr 
#define dorghr_                  dorghr 
#define dorgl2_                  dorgl2 
#define dorglq_                  dorglq 
#define dorgql_                  dorgql 
#define dorgqr_                  dorgqr 
#define dorgr2_                  dorgr2 
#define dorgrq_                  dorgrq 
#define dorgtr_                  dorgtr 
#define dorgtsqr_                dorgtsqr 
#define dorhr_col_               dorhr_col 
#define dorm22_                  dorm22 
#define dorm2l_                  dorm2l 
#define dorm2r_                  dorm2r 
#define dormbr_                  dormbr 
#define dormhr_                  dormhr 
#define dorml2_                  dorml2 
#define dormlq_                  dormlq 
#define dormql_                  dormql 
#define dormqr_                  dormqr 
#define dormr2_                  dormr2 
#define dormr3_                  dormr3 
#define dormrq_                  dormrq 
#define dormrz_                  dormrz 
#define dormtr_                  dormtr 
#define dpbcon_                  dpbcon 
#define dpbequ_                  dpbequ 
#define dpbrfs_                  dpbrfs 
#define dpbstf_                  dpbstf 
#define dpbsv_                   dpbsv 
#define dpbsvx_                  dpbsvx 
#define dpbtf2_                  dpbtf2 
#define dpbtrf_                  dpbtrf 
#define dpbtrs_                  dpbtrs 
#define dpftrf_                  dpftrf 
#define dpftri_                  dpftri 
#define dpftrs_                  dpftrs 
#define dpocon_                  dpocon 
#define dpoequ_                  dpoequ 
#define dpoequb_                 dpoequb 
#define dporfs_                  dporfs 
#define dposv_                   dposv 
#define dposvx_                  dposvx 
#define dpotf2_                  dpotf2 
#define dpotrf2_                 dpotrf2 
#define dpotrf_                  dpotrf 
#define dpotri_                  dpotri 
#define dpotrs_                  dpotrs 
#define dppcon_                  dppcon 
#define dppequ_                  dppequ 
#define dpprfs_                  dpprfs 
#define dppsv_                   dppsv 
#define dppsvx_                  dppsvx 
#define dpptrf_                  dpptrf 
#define dpptri_                  dpptri 
#define dpptrs_                  dpptrs 
#define dpstf2_                  dpstf2 
#define dpstrf_                  dpstrf 
#define dptcon_                  dptcon 
#define dpteqr_                  dpteqr 
#define dptrfs_                  dptrfs 
#define dptsv_                   dptsv 
#define dptsvx_                  dptsvx 
#define dpttrf_                  dpttrf 
#define dpttrs_                  dpttrs 
#define dptts2_                  dptts2 
#define drscl_                   drscl 
#define dsb2st_kernels_          dsb2st_kernels 
#define dsbev_                   dsbev 
#define dsbev_2stage_            dsbev_2stage 
#define dsbevd_                  dsbevd 
#define dsbevd_2stage_           dsbevd_2stage 
#define dsbevx_                  dsbevx 
#define dsbevx_2stage_           dsbevx_2stage 
#define dsbgst_                  dsbgst 
#define dsbgv_                   dsbgv 
#define dsbgvd_                  dsbgvd 
#define dsbgvx_                  dsbgvx 
#define dsbtrd_                  dsbtrd 
#define dsfrk_                   dsfrk 
#define dsgesv_                  dsgesv 
#define dspcon_                  dspcon 
#define dspev_                   dspev 
#define dspevd_                  dspevd 
#define dspevx_                  dspevx 
#define dspgst_                  dspgst 
#define dspgv_                   dspgv 
#define dspgvd_                  dspgvd 
#define dspgvx_                  dspgvx 
#define dsposv_                  dsposv 
#define dsprfs_                  dsprfs 
#define dspsv_                   dspsv 
#define dspsvx_                  dspsvx 
#define dsptrd_                  dsptrd 
#define dsptrf_                  dsptrf 
#define dsptri_                  dsptri 
#define dsptrs_                  dsptrs 
#define dstebz_                  dstebz 
#define dstedc_                  dstedc 
#define dstegr_                  dstegr 
#define dstein_                  dstein 
#define dstemr_                  dstemr 
#define dsteqr_                  dsteqr 
#define dsterf_                  dsterf 
#define dstev_                   dstev 
#define dstevd_                  dstevd 
#define dstevr_                  dstevr 
#define dstevx_                  dstevx 
#define dsycon_                  dsycon 
#define dsycon_3_                dsycon_3 
#define dsycon_rook_             dsycon_rook 
#define dsyconv_                 dsyconv 
#define dsyconvf_                dsyconvf 
#define dsyconvf_rook_           dsyconvf_rook 
#define dsyequb_                 dsyequb 
#define dsyev_                   dsyev 
#define dsyev_2stage_            dsyev_2stage 
#define dsyevd_                  dsyevd 
#define dsyevd_2stage_           dsyevd_2stage 
#define dsyevr_                  dsyevr 
#define dsyevr_2stage_           dsyevr_2stage 
#define dsyevx_                  dsyevx 
#define dsyevx_2stage_           dsyevx_2stage 
#define dsygs2_                  dsygs2 
#define dsygst_                  dsygst 
#define dsygv_                   dsygv 
#define dsygv_2stage_            dsygv_2stage 
#define dsygvd_                  dsygvd 
#define dsygvx_                  dsygvx 
#define dsyrfs_                  dsyrfs 
#define dsysv_                   dsysv 
#define dsysv_aa_                dsysv_aa 
#define dsysv_aa_2stage_         dsysv_aa_2stage 
#define dsysv_rk_                dsysv_rk 
#define dsysv_rook_              dsysv_rook 
#define dsysvx_                  dsysvx 
#define dsyswapr_                dsyswapr 
#define dsytd2_                  dsytd2 
#define dsytf2_                  dsytf2 
#define dsytf2_rk_               dsytf2_rk 
#define dsytf2_rook_             dsytf2_rook 
#define dsytrd_                  dsytrd 
#define dsytrd_2stage_           dsytrd_2stage 
#define dsytrd_sb2st_            dsytrd_sb2st 
#define dsytrd_sy2sb_            dsytrd_sy2sb 
#define dsytrf_                  dsytrf 
#define dsytrf_aa_               dsytrf_aa 
#define dsytrf_aa_2stage_        dsytrf_aa_2stage 
#define dsytrf_rk_               dsytrf_rk 
#define dsytrf_rook_             dsytrf_rook 
#define dsytri2_                 dsytri2 
#define dsytri2x_                dsytri2x 
#define dsytri_                  dsytri 
#define dsytri_3_                dsytri_3 
#define dsytri_3x_               dsytri_3x 
#define dsytri_rook_             dsytri_rook 
#define dsytrs2_                 dsytrs2 
#define dsytrs_                  dsytrs 
#define dsytrs_3_                dsytrs_3 
#define dsytrs_aa_               dsytrs_aa 
#define dsytrs_aa_2stage_        dsytrs_aa_2stage 
#define dsytrs_rook_             dsytrs_rook 
#define dtbcon_                  dtbcon 
#define dtbrfs_                  dtbrfs 
#define dtbtrs_                  dtbtrs 
#define dtfsm_                   dtfsm 
#define dtftri_                  dtftri 
#define dtfttp_                  dtfttp 
#define dtfttr_                  dtfttr 
#define dtgevc_                  dtgevc 
#define dtgex2_                  dtgex2 
#define dtgexc_                  dtgexc 
#define dtgsen_                  dtgsen 
#define dtgsja_                  dtgsja 
#define dtgsna_                  dtgsna 
#define dtgsy2_                  dtgsy2 
#define dtgsyl_                  dtgsyl 
#define dtpcon_                  dtpcon 
#define dtplqt2_                 dtplqt2 
#define dtplqt_                  dtplqt 
#define dtpmlqt_                 dtpmlqt 
#define dtpmqrt_                 dtpmqrt 
#define dtpqrt2_                 dtpqrt2 
#define dtpqrt_                  dtpqrt 
#define dtprfb_                  dtprfb 
#define dtprfs_                  dtprfs 
#define dtptri_                  dtptri 
#define dtptrs_                  dtptrs 
#define dtpttf_                  dtpttf 
#define dtpttr_                  dtpttr 
#define dtrcon_                  dtrcon 
#define dtrevc3_                 dtrevc3 
#define dtrevc_                  dtrevc 
#define dtrexc_                  dtrexc 
#define dtrrfs_                  dtrrfs 
#define dtrsen_                  dtrsen 
#define dtrsna_                  dtrsna 
#define dtrsyl_                  dtrsyl 
#define dtrti2_                  dtrti2 
#define dtrtri_                  dtrtri 
#define dtrtrs_                  dtrtrs 
#define dtrttf_                  dtrttf 
#define dtrttp_                  dtrttp 
#define dtzrqf_                  dtzrqf 
#define dtzrzf_                  dtzrzf 
#define dzsum1_                  dzsum1 
#define icmax1_                  icmax1 
#define ieeeck_                  ieeeck 
#define ilaclc_                  ilaclc 
#define ilaclr_                  ilaclr 
#define iladiag_                 iladiag 
#define iladlc_                  iladlc 
#define iladlr_                  iladlr 
#define ilaenv2stage_            ilaenv2stage 
#define ilaenv_                  ilaenv 
#define ilaprec_                 ilaprec 
#define ilaslc_                  ilaslc 
#define ilaslr_                  ilaslr 
#define ilatrans_                ilatrans 
#define ilauplo_                 ilauplo 
#define ilaver_                  ilaver 
#define ilazlc_                  ilazlc 
#define ilazlr_                  ilazlr 
#define iparam2stage_            iparam2stage 
#define iparmq_                  iparmq 
#define izmax1_                  izmax1 
#define lsamen_                  lsamen 
#define sbbcsd_                  sbbcsd 
#define sbdsdc_                  sbdsdc 
#define sbdsqr_                  sbdsqr 
#define sbdsvdx_                 sbdsvdx 
#define scombssq_                scombssq 
#define scsum1_                  scsum1 
#define sdisna_                  sdisna 
#define sgbbrd_                  sgbbrd 
#define sgbcon_                  sgbcon 
#define sgbequ_                  sgbequ 
#define sgbequb_                 sgbequb 
#define sgbrfs_                  sgbrfs 
#define sgbsv_                   sgbsv 
#define sgbsvx_                  sgbsvx 
#define sgbtf2_                  sgbtf2 
#define sgbtrf_                  sgbtrf 
#define sgbtrs_                  sgbtrs 
#define sgebak_                  sgebak 
#define sgebal_                  sgebal 
#define sgebd2_                  sgebd2 
#define sgebrd_                  sgebrd 
#define sgecon_                  sgecon 
#define sgeequ_                  sgeequ 
#define sgeequb_                 sgeequb 
#define sgees_                   sgees 
#define sgeesx_                  sgeesx 
#define sgeev_                   sgeev 
#define sgeevx_                  sgeevx 
#define sgegs_                   sgegs 
#define sgegv_                   sgegv 
#define sgehd2_                  sgehd2 
#define sgehrd_                  sgehrd 
#define sgejsv_                  sgejsv 
#define sgelq2_                  sgelq2 
#define sgelq_                   sgelq 
#define sgelqf_                  sgelqf 
#define sgelqt3_                 sgelqt3 
#define sgelqt_                  sgelqt 
#define sgels_                   sgels 
#define sgelsd_                  sgelsd 
#define sgelss_                  sgelss 
#define sgelsx_                  sgelsx 
#define sgelsy_                  sgelsy 
#define sgemlq_                  sgemlq 
#define sgemlqt_                 sgemlqt 
#define sgemqr_                  sgemqr 
#define sgemqrt_                 sgemqrt 
#define sgeql2_                  sgeql2 
#define sgeqlf_                  sgeqlf 
#define sgeqp3_                  sgeqp3 
#define sgeqpf_                  sgeqpf 
#define sgeqr2_                  sgeqr2 
#define sgeqr2p_                 sgeqr2p 
#define sgeqr_                   sgeqr 
#define sgeqrf_                  sgeqrf 
#define sgeqrfp_                 sgeqrfp 
#define sgeqrt2_                 sgeqrt2 
#define sgeqrt3_                 sgeqrt3 
#define sgeqrt_                  sgeqrt 
#define sgerfs_                  sgerfs 
#define sgerq2_                  sgerq2 
#define sgerqf_                  sgerqf 
#define sgesc2_                  sgesc2 
#define sgesdd_                  sgesdd 
#define sgesv_                   sgesv 
#define sgesvd_                  sgesvd 
#define sgesvdq_                 sgesvdq 
#define sgesvdx_                 sgesvdx 
#define sgesvj_                  sgesvj 
#define sgesvx_                  sgesvx 
#define sgetc2_                  sgetc2 
#define sgetf2_                  sgetf2 
#define sgetrf2_                 sgetrf2 
#define sgetrf_                  sgetrf 
#define sgetri_                  sgetri 
#define sgetrs_                  sgetrs 
#define sgetsls_                 sgetsls 
#define sggbak_                  sggbak 
#define sggbal_                  sggbal 
#define sgges3_                  sgges3 
#define sgges_                   sgges 
#define sggesx_                  sggesx 
#define sggev3_                  sggev3 
#define sggev_                   sggev 
#define sggevx_                  sggevx 
#define sggglm_                  sggglm 
#define sgghd3_                  sgghd3 
#define sgghrd_                  sgghrd 
#define sgglse_                  sgglse 
#define sggqrf_                  sggqrf 
#define sggrqf_                  sggrqf 
#define sggsvd3_                 sggsvd3 
#define sggsvd_                  sggsvd 
#define sggsvp3_                 sggsvp3 
#define sggsvp_                  sggsvp 
#define sgsvj0_                  sgsvj0 
#define sgsvj1_                  sgsvj1 
#define sgtcon_                  sgtcon 
#define sgtrfs_                  sgtrfs 
#define sgtsv_                   sgtsv 
#define sgtsvx_                  sgtsvx 
#define sgttrf_                  sgttrf 
#define sgttrs_                  sgttrs 
#define sgtts2_                  sgtts2 
#define shgeqz_                  shgeqz 
#define shsein_                  shsein 
#define shseqr_                  shseqr 
#define sisnan_                  sisnan 
#define sla_gbamv_               sla_gbamv 
#define sla_gbrcond_             sla_gbrcond 
#define sla_gbrpvgrw_            sla_gbrpvgrw 
#define sla_geamv_               sla_geamv 
#define sla_gercond_             sla_gercond 
#define sla_gerpvgrw_            sla_gerpvgrw 
#define sla_lin_berr_            sla_lin_berr 
#define sla_porcond_             sla_porcond 
#define sla_porpvgrw_            sla_porpvgrw 
#define sla_syamv_               sla_syamv 
#define sla_syrcond_             sla_syrcond 
#define sla_syrpvgrw_            sla_syrpvgrw 
#define sla_wwaddw_              sla_wwaddw 
#define slabad_                  slabad 
#define slabrd_                  slabrd 
#define slacn2_                  slacn2 
#define slacon_                  slacon 
#define slacpy_                  slacpy 
#define sladiv1_                 sladiv1 
#define sladiv2_                 sladiv2 
#define sladiv_                  sladiv 
#define slae2_                   slae2 
#define slaebz_                  slaebz 
#define slaed0_                  slaed0 
#define slaed1_                  slaed1 
#define slaed2_                  slaed2 
#define slaed3_                  slaed3 
#define slaed4_                  slaed4 
#define slaed5_                  slaed5 
#define slaed6_                  slaed6 
#define slaed7_                  slaed7 
#define slaed8_                  slaed8 
#define slaed9_                  slaed9 
#define slaeda_                  slaeda 
#define slaein_                  slaein 
#define slaev2_                  slaev2 
#define slaexc_                  slaexc 
#define slag2_                   slag2 
#define slag2d_                  slag2d 
#define slags2_                  slags2 
#define slagtf_                  slagtf 
#define slagtm_                  slagtm 
#define slagts_                  slagts 
#define slagv2_                  slagv2 
#define slahqr_                  slahqr 
#define slahr2_                  slahr2 
#define slahrd_                  slahrd 
#define slaic1_                  slaic1 
#define slaisnan_                slaisnan 
#define slaln2_                  slaln2 
#define slals0_                  slals0 
#define slalsa_                  slalsa 
#define slalsd_                  slalsd 
#define slamc3_                  slamc3 
#define slamch_                  slamch 
#define slamrg_                  slamrg 
#define slamswlq_                slamswlq 
#define slamtsqr_                slamtsqr 
#define slaneg_                  slaneg 
#define slangb_                  slangb 
#define slange_                  slange 
#define slangt_                  slangt 
#define slanhs_                  slanhs 
#define slansb_                  slansb 
#define slansf_                  slansf 
#define slansp_                  slansp 
#define slanst_                  slanst 
#define slansy_                  slansy 
#define slantb_                  slantb 
#define slantp_                  slantp 
#define slantr_                  slantr 
#define slanv2_                  slanv2 
#define slaorhr_col_getrfnp2_    slaorhr_col_getrfnp2 
#define slaorhr_col_getrfnp_     slaorhr_col_getrfnp 
#define slapll_                  slapll 
#define slapmr_                  slapmr 
#define slapmt_                  slapmt 
#define slapy2_                  slapy2 
#define slapy3_                  slapy3 
#define slaqgb_                  slaqgb 
#define slaqge_                  slaqge 
#define slaqp2_                  slaqp2 
#define slaqps_                  slaqps 
#define slaqr0_                  slaqr0 
#define slaqr1_                  slaqr1 
#define slaqr2_                  slaqr2 
#define slaqr3_                  slaqr3 
#define slaqr4_                  slaqr4 
#define slaqr5_                  slaqr5 
#define slaqsb_                  slaqsb 
#define slaqsp_                  slaqsp 
#define slaqsy_                  slaqsy 
#define slaqtr_                  slaqtr 
#define slar1v_                  slar1v 
#define slar2v_                  slar2v 
#define slarf_                   slarf 
#define slarfb_                  slarfb 
#define slarfg_                  slarfg 
#define slarfgp_                 slarfgp 
#define slarft_                  slarft 
#define slarfx_                  slarfx 
#define slarfy_                  slarfy 
#define slargv_                  slargv 
#define slarnv_                  slarnv 
#define slarra_                  slarra 
#define slarrb_                  slarrb 
#define slarrc_                  slarrc 
#define slarrd_                  slarrd 
#define slarre_                  slarre 
#define slarrf_                  slarrf 
#define slarrj_                  slarrj 
#define slarrk_                  slarrk 
#define slarrr_                  slarrr 
#define slarrv_                  slarrv 
#define slarscl2_                slarscl2 
#define slartg_                  slartg 
#define slartgp_                 slartgp 
#define slartgs_                 slartgs 
#define slartv_                  slartv 
#define slaruv_                  slaruv 
#define slarz_                   slarz 
#define slarzb_                  slarzb 
#define slarzt_                  slarzt 
#define slas2_                   slas2 
#define slascl2_                 slascl2 
#define slascl_                  slascl 
#define slasd0_                  slasd0 
#define slasd1_                  slasd1 
#define slasd2_                  slasd2 
#define slasd3_                  slasd3 
#define slasd4_                  slasd4 
#define slasd5_                  slasd5 
#define slasd6_                  slasd6 
#define slasd7_                  slasd7 
#define slasd8_                  slasd8 
#define slasda_                  slasda 
#define slasdq_                  slasdq 
#define slasdt_                  slasdt 
#define slaset_                  slaset 
#define slasq1_                  slasq1 
#define slasq2_                  slasq2 
#define slasq3_                  slasq3 
#define slasq4_                  slasq4 
#define slasq5_                  slasq5 
#define slasq6_                  slasq6 
#define slasr_                   slasr 
#define slasrt_                  slasrt 
#define slassq_                  slassq 
#define slasv2_                  slasv2 
#define slaswlq_                 slaswlq 
#define slaswp_                  slaswp 
#define slasy2_                  slasy2 
#define slasyf_                  slasyf 
#define slasyf_aa_               slasyf_aa 
#define slasyf_rk_               slasyf_rk 
#define slasyf_rook_             slasyf_rook 
#define slatbs_                  slatbs 
#define slatdf_                  slatdf 
#define slatps_                  slatps 
#define slatrd_                  slatrd 
#define slatrs_                  slatrs 
#define slatrz_                  slatrz 
#define slatsqr_                 slatsqr 
#define slatzm_                  slatzm 
#define slauu2_                  slauu2 
#define slauum_                  slauum 
#define sopgtr_                  sopgtr 
#define sopmtr_                  sopmtr 
#define sorbdb1_                 sorbdb1 
#define sorbdb2_                 sorbdb2 
#define sorbdb3_                 sorbdb3 
#define sorbdb4_                 sorbdb4 
#define sorbdb5_                 sorbdb5 
#define sorbdb6_                 sorbdb6 
#define sorbdb_                  sorbdb 
#define sorcsd2by1_              sorcsd2by1 
#define sorcsd_                  sorcsd 
#define sorg2l_                  sorg2l 
#define sorg2r_                  sorg2r 
#define sorgbr_                  sorgbr 
#define sorghr_                  sorghr 
#define sorgl2_                  sorgl2 
#define sorglq_                  sorglq 
#define sorgql_                  sorgql 
#define sorgqr_                  sorgqr 
#define sorgr2_                  sorgr2 
#define sorgrq_                  sorgrq 
#define sorgtr_                  sorgtr 
#define sorgtsqr_                sorgtsqr 
#define sorhr_col_               sorhr_col 
#define sorm22_                  sorm22 
#define sorm2l_                  sorm2l 
#define sorm2r_                  sorm2r 
#define sormbr_                  sormbr 
#define sormhr_                  sormhr 
#define sorml2_                  sorml2 
#define sormlq_                  sormlq 
#define sormql_                  sormql 
#define sormqr_                  sormqr 
#define sormr2_                  sormr2 
#define sormr3_                  sormr3 
#define sormrq_                  sormrq 
#define sormrz_                  sormrz 
#define sormtr_                  sormtr 
#define spbcon_                  spbcon 
#define spbequ_                  spbequ 
#define spbrfs_                  spbrfs 
#define spbstf_                  spbstf 
#define spbsv_                   spbsv 
#define spbsvx_                  spbsvx 
#define spbtf2_                  spbtf2 
#define spbtrf_                  spbtrf 
#define spbtrs_                  spbtrs 
#define spftrf_                  spftrf 
#define spftri_                  spftri 
#define spftrs_                  spftrs 
#define spocon_                  spocon 
#define spoequ_                  spoequ 
#define spoequb_                 spoequb 
#define sporfs_                  sporfs 
#define sposv_                   sposv 
#define sposvx_                  sposvx 
#define spotf2_                  spotf2 
#define spotrf2_                 spotrf2 
#define spotrf_                  spotrf 
#define spotri_                  spotri 
#define spotrs_                  spotrs 
#define sppcon_                  sppcon 
#define sppequ_                  sppequ 
#define spprfs_                  spprfs 
#define sppsv_                   sppsv 
#define sppsvx_                  sppsvx 
#define spptrf_                  spptrf 
#define spptri_                  spptri 
#define spptrs_                  spptrs 
#define spstf2_                  spstf2 
#define spstrf_                  spstrf 
#define sptcon_                  sptcon 
#define spteqr_                  spteqr 
#define sptrfs_                  sptrfs 
#define sptsv_                   sptsv 
#define sptsvx_                  sptsvx 
#define spttrf_                  spttrf 
#define spttrs_                  spttrs 
#define sptts2_                  sptts2 
#define srscl_                   srscl 
#define ssb2st_kernels_          ssb2st_kernels 
#define ssbev_                   ssbev 
#define ssbev_2stage_            ssbev_2stage 
#define ssbevd_                  ssbevd 
#define ssbevd_2stage_           ssbevd_2stage 
#define ssbevx_                  ssbevx 
#define ssbevx_2stage_           ssbevx_2stage 
#define ssbgst_                  ssbgst 
#define ssbgv_                   ssbgv 
#define ssbgvd_                  ssbgvd 
#define ssbgvx_                  ssbgvx 
#define ssbtrd_                  ssbtrd 
#define ssfrk_                   ssfrk 
#define sspcon_                  sspcon 
#define sspev_                   sspev 
#define sspevd_                  sspevd 
#define sspevx_                  sspevx 
#define sspgst_                  sspgst 
#define sspgv_                   sspgv 
#define sspgvd_                  sspgvd 
#define sspgvx_                  sspgvx 
#define ssprfs_                  ssprfs 
#define sspsv_                   sspsv 
#define sspsvx_                  sspsvx 
#define ssptrd_                  ssptrd 
#define ssptrf_                  ssptrf 
#define ssptri_                  ssptri 
#define ssptrs_                  ssptrs 
#define sstebz_                  sstebz 
#define sstedc_                  sstedc 
#define sstegr_                  sstegr 
#define sstein_                  sstein 
#define sstemr_                  sstemr 
#define ssteqr_                  ssteqr 
#define ssterf_                  ssterf 
#define sstev_                   sstev 
#define sstevd_                  sstevd 
#define sstevr_                  sstevr 
#define sstevx_                  sstevx 
#define ssycon_                  ssycon 
#define ssycon_3_                ssycon_3 
#define ssycon_rook_             ssycon_rook 
#define ssyconv_                 ssyconv 
#define ssyconvf_                ssyconvf 
#define ssyconvf_rook_           ssyconvf_rook 
#define ssyequb_                 ssyequb 
#define ssyev_                   ssyev 
#define ssyev_2stage_            ssyev_2stage 
#define ssyevd_                  ssyevd 
#define ssyevd_2stage_           ssyevd_2stage 
#define ssyevr_                  ssyevr 
#define ssyevr_2stage_           ssyevr_2stage 
#define ssyevx_                  ssyevx 
#define ssyevx_2stage_           ssyevx_2stage 
#define ssygs2_                  ssygs2 
#define ssygst_                  ssygst 
#define ssygv_                   ssygv 
#define ssygv_2stage_            ssygv_2stage 
#define ssygvd_                  ssygvd 
#define ssygvx_                  ssygvx 
#define ssyrfs_                  ssyrfs 
#define ssysv_                   ssysv 
#define ssysv_aa_                ssysv_aa 
#define ssysv_aa_2stage_         ssysv_aa_2stage 
#define ssysv_rk_                ssysv_rk 
#define ssysv_rook_              ssysv_rook 
#define ssysvx_                  ssysvx 
#define ssyswapr_                ssyswapr 
#define ssytd2_                  ssytd2 
#define ssytf2_                  ssytf2 
#define ssytf2_rk_               ssytf2_rk 
#define ssytf2_rook_             ssytf2_rook 
#define ssytrd_                  ssytrd 
#define ssytrd_2stage_           ssytrd_2stage 
#define ssytrd_sb2st_            ssytrd_sb2st 
#define ssytrd_sy2sb_            ssytrd_sy2sb 
#define ssytrf_                  ssytrf 
#define ssytrf_aa_               ssytrf_aa 
#define ssytrf_aa_2stage_        ssytrf_aa_2stage 
#define ssytrf_rk_               ssytrf_rk 
#define ssytrf_rook_             ssytrf_rook 
#define ssytri2_                 ssytri2 
#define ssytri2x_                ssytri2x 
#define ssytri_                  ssytri 
#define ssytri_3_                ssytri_3 
#define ssytri_3x_               ssytri_3x 
#define ssytri_rook_             ssytri_rook 
#define ssytrs2_                 ssytrs2 
#define ssytrs_                  ssytrs 
#define ssytrs_3_                ssytrs_3 
#define ssytrs_aa_               ssytrs_aa 
#define ssytrs_aa_2stage_        ssytrs_aa_2stage 
#define ssytrs_rook_             ssytrs_rook 
#define stbcon_                  stbcon 
#define stbrfs_                  stbrfs 
#define stbtrs_                  stbtrs 
#define stfsm_                   stfsm 
#define stftri_                  stftri 
#define stfttp_                  stfttp 
#define stfttr_                  stfttr 
#define stgevc_                  stgevc 
#define stgex2_                  stgex2 
#define stgexc_                  stgexc 
#define stgsen_                  stgsen 
#define stgsja_                  stgsja 
#define stgsna_                  stgsna 
#define stgsy2_                  stgsy2 
#define stgsyl_                  stgsyl 
#define stpcon_                  stpcon 
#define stplqt2_                 stplqt2 
#define stplqt_                  stplqt 
#define stpmlqt_                 stpmlqt 
#define stpmqrt_                 stpmqrt 
#define stpqrt2_                 stpqrt2 
#define stpqrt_                  stpqrt 
#define stprfb_                  stprfb 
#define stprfs_                  stprfs 
#define stptri_                  stptri 
#define stptrs_                  stptrs 
#define stpttf_                  stpttf 
#define stpttr_                  stpttr 
#define strcon_                  strcon 
#define strevc3_                 strevc3 
#define strevc_                  strevc 
#define strexc_                  strexc 
#define strrfs_                  strrfs 
#define strsen_                  strsen 
#define strsna_                  strsna 
#define strsyl_                  strsyl 
#define strti2_                  strti2 
#define strtri_                  strtri 
#define strtrs_                  strtrs 
#define strttf_                  strttf 
#define strttp_                  strttp 
#define stzrqf_                  stzrqf 
#define stzrzf_                  stzrzf 
#define xerbla_array_            xerbla_array
#define zbbcsd_                  zbbcsd 
#define zbdsqr_                  zbdsqr 
#define zcgesv_                  zcgesv 
#define zcposv_                  zcposv 
#define zdrscl_                  zdrscl 
#define zgbbrd_                  zgbbrd 
#define zgbcon_                  zgbcon 
#define zgbequ_                  zgbequ 
#define zgbequb_                 zgbequb 
#define zgbrfs_                  zgbrfs 
#define zgbsv_                   zgbsv 
#define zgbsvx_                  zgbsvx 
#define zgbtf2_                  zgbtf2 
#define zgbtrf_                  zgbtrf 
#define zgbtrs_                  zgbtrs 
#define zgebak_                  zgebak 
#define zgebal_                  zgebal 
#define zgebd2_                  zgebd2 
#define zgebrd_                  zgebrd 
#define zgecon_                  zgecon 
#define zgeequ_                  zgeequ 
#define zgeequb_                 zgeequb 
#define zgees_                   zgees 
#define zgeesx_                  zgeesx 
#define zgeev_                   zgeev 
#define zgeevx_                  zgeevx 
#define zgegs_                   zgegs 
#define zgegv_                   zgegv 
#define zgehd2_                  zgehd2 
#define zgehrd_                  zgehrd 
#define zgejsv_                  zgejsv 
#define zgelq2_                  zgelq2 
#define zgelq_                   zgelq 
#define zgelqf_                  zgelqf 
#define zgelqt3_                 zgelqt3 
#define zgelqt_                  zgelqt 
#define zgels_                   zgels 
#define zgelsd_                  zgelsd 
#define zgelss_                  zgelss 
#define zgelsx_                  zgelsx 
#define zgelsy_                  zgelsy 
#define zgemlq_                  zgemlq 
#define zgemlqt_                 zgemlqt 
#define zgemqr_                  zgemqr 
#define zgemqrt_                 zgemqrt 
#define zgeql2_                  zgeql2 
#define zgeqlf_                  zgeqlf 
#define zgeqp3_                  zgeqp3 
#define zgeqpf_                  zgeqpf 
#define zgeqr2_                  zgeqr2 
#define zgeqr2p_                 zgeqr2p 
#define zgeqr_                   zgeqr 
#define zgeqrf_                  zgeqrf 
#define zgeqrfp_                 zgeqrfp 
#define zgeqrt2_                 zgeqrt2 
#define zgeqrt3_                 zgeqrt3 
#define zgeqrt_                  zgeqrt 
#define zgerfs_                  zgerfs 
#define zgerq2_                  zgerq2 
#define zgerqf_                  zgerqf 
#define zgesc2_                  zgesc2 
#define zgesdd_                  zgesdd 
#define zgesv_                   zgesv 
#define zgesvd_                  zgesvd 
#define zgesvdq_                 zgesvdq 
#define zgesvdx_                 zgesvdx 
#define zgesvj_                  zgesvj 
#define zgesvx_                  zgesvx 
#define zgetc2_                  zgetc2 
#define zgetf2_                  zgetf2 
#define zgetrf2_                 zgetrf2 
#define zgetrf_                  zgetrf 
#define zgetri_                  zgetri 
#define zgetrs_                  zgetrs 
#define zgetsls_                 zgetsls 
#define zggbak_                  zggbak 
#define zggbal_                  zggbal 
#define zgges3_                  zgges3 
#define zgges_                   zgges 
#define zggesx_                  zggesx 
#define zggev3_                  zggev3 
#define zggev_                   zggev 
#define zggevx_                  zggevx 
#define zggglm_                  zggglm 
#define zgghd3_                  zgghd3 
#define zgghrd_                  zgghrd 
#define zgglse_                  zgglse 
#define zggqrf_                  zggqrf 
#define zggrqf_                  zggrqf 
#define zggsvd3_                 zggsvd3 
#define zggsvd_                  zggsvd 
#define zggsvp3_                 zggsvp3 
#define zggsvp_                  zggsvp 
#define zgsvj0_                  zgsvj0 
#define zgsvj1_                  zgsvj1 
#define zgtcon_                  zgtcon 
#define zgtrfs_                  zgtrfs 
#define zgtsv_                   zgtsv 
#define zgtsvx_                  zgtsvx 
#define zgttrf_                  zgttrf 
#define zgttrs_                  zgttrs 
#define zgtts2_                  zgtts2 
#define zhb2st_kernels_          zhb2st_kernels 
#define zhbev_                   zhbev 
#define zhbev_2stage_            zhbev_2stage 
#define zhbevd_                  zhbevd 
#define zhbevd_2stage_           zhbevd_2stage 
#define zhbevx_                  zhbevx 
#define zhbevx_2stage_           zhbevx_2stage 
#define zhbgst_                  zhbgst 
#define zhbgv_                   zhbgv 
#define zhbgvd_                  zhbgvd 
#define zhbgvx_                  zhbgvx 
#define zhbtrd_                  zhbtrd 
#define zhecon_                  zhecon 
#define zhecon_3_                zhecon_3 
#define zhecon_rook_             zhecon_rook 
#define zheequb_                 zheequb 
#define zheev_                   zheev 
#define zheev_2stage_            zheev_2stage 
#define zheevd_                  zheevd 
#define zheevd_2stage_           zheevd_2stage 
#define zheevr_                  zheevr 
#define zheevr_2stage_           zheevr_2stage 
#define zheevx_                  zheevx 
#define zheevx_2stage_           zheevx_2stage 
#define zhegs2_                  zhegs2 
#define zhegst_                  zhegst 
#define zhegv_                   zhegv 
#define zhegv_2stage_            zhegv_2stage 
#define zhegvd_                  zhegvd 
#define zhegvx_                  zhegvx 
#define zherfs_                  zherfs 
#define zhesv_                   zhesv 
#define zhesv_aa_                zhesv_aa 
#define zhesv_aa_2stage_         zhesv_aa_2stage 
#define zhesv_rk_                zhesv_rk 
#define zhesv_rook_              zhesv_rook 
#define zhesvx_                  zhesvx 
#define zheswapr_                zheswapr 
#define zhetd2_                  zhetd2 
#define zhetf2_                  zhetf2 
#define zhetf2_rk_               zhetf2_rk 
#define zhetf2_rook_             zhetf2_rook 
#define zhetrd_                  zhetrd 
#define zhetrd_2stage_           zhetrd_2stage 
#define zhetrd_hb2st_            zhetrd_hb2st 
#define zhetrd_he2hb_            zhetrd_he2hb 
#define zhetrf_                  zhetrf 
#define zhetrf_aa_               zhetrf_aa 
#define zhetrf_aa_2stage_        zhetrf_aa_2stage 
#define zhetrf_rk_               zhetrf_rk 
#define zhetrf_rook_             zhetrf_rook 
#define zhetri2_                 zhetri2 
#define zhetri2x_                zhetri2x 
#define zhetri_                  zhetri 
#define zhetri_3_                zhetri_3 
#define zhetri_3x_               zhetri_3x 
#define zhetri_rook_             zhetri_rook 
#define zhetrs2_                 zhetrs2 
#define zhetrs_                  zhetrs 
#define zhetrs_3_                zhetrs_3 
#define zhetrs_aa_               zhetrs_aa 
#define zhetrs_aa_2stage_        zhetrs_aa_2stage 
#define zhetrs_rook_             zhetrs_rook 
#define zhfrk_                   zhfrk 
#define zhgeqz_                  zhgeqz 
#define zhpcon_                  zhpcon 
#define zhpev_                   zhpev 
#define zhpevd_                  zhpevd 
#define zhpevx_                  zhpevx 
#define zhpgst_                  zhpgst 
#define zhpgv_                   zhpgv 
#define zhpgvd_                  zhpgvd 
#define zhpgvx_                  zhpgvx 
#define zhprfs_                  zhprfs 
#define zhpsv_                   zhpsv 
#define zhpsvx_                  zhpsvx 
#define zhptrd_                  zhptrd 
#define zhptrf_                  zhptrf 
#define zhptri_                  zhptri 
#define zhptrs_                  zhptrs 
#define zhsein_                  zhsein 
#define zhseqr_                  zhseqr 
#define zla_gbamv_               zla_gbamv 
#define zla_gbrcond_c_           zla_gbrcond_c 
#define zla_gbrcond_x_           zla_gbrcond_x 
#define zla_gbrpvgrw_            zla_gbrpvgrw 
#define zla_geamv_               zla_geamv 
#define zla_gercond_c_           zla_gercond_c 
#define zla_gercond_x_           zla_gercond_x 
#define zla_gerpvgrw_            zla_gerpvgrw 
#define zla_heamv_               zla_heamv 
#define zla_hercond_c_           zla_hercond_c 
#define zla_hercond_x_           zla_hercond_x 
#define zla_herpvgrw_            zla_herpvgrw 
#define zla_lin_berr_            zla_lin_berr 
#define zla_porcond_c_           zla_porcond_c 
#define zla_porcond_x_           zla_porcond_x 
#define zla_porpvgrw_            zla_porpvgrw 
#define zla_syamv_               zla_syamv 
#define zla_syrcond_c_           zla_syrcond_c 
#define zla_syrcond_x_           zla_syrcond_x 
#define zla_syrpvgrw_            zla_syrpvgrw 
#define zla_wwaddw_              zla_wwaddw 
#define zlabrd_                  zlabrd 
#define zlacgv_                  zlacgv 
#define zlacn2_                  zlacn2 
#define zlacon_                  zlacon 
#define zlacp2_                  zlacp2 
#define zlacpy_                  zlacpy 
#define zlacrm_                  zlacrm 
#define zlacrt_                  zlacrt 
#define zladiv_                  zladiv 
#define zlaed0_                  zlaed0 
#define zlaed7_                  zlaed7 
#define zlaed8_                  zlaed8 
#define zlaein_                  zlaein 
#define zlaesy_                  zlaesy 
#define zlaev2_                  zlaev2 
#define zlag2c_                  zlag2c 
#define zlags2_                  zlags2 
#define zlagtm_                  zlagtm 
#define zlahef_                  zlahef 
#define zlahef_aa_               zlahef_aa 
#define zlahef_rk_               zlahef_rk 
#define zlahef_rook_             zlahef_rook 
#define zlahqr_                  zlahqr 
#define zlahr2_                  zlahr2 
#define zlahrd_                  zlahrd 
#define zlaic1_                  zlaic1 
#define zlals0_                  zlals0 
#define zlalsa_                  zlalsa 
#define zlalsd_                  zlalsd 
#define zlamswlq_                zlamswlq 
#define zlamtsqr_                zlamtsqr 
#define zlangb_                  zlangb 
#define zlange_                  zlange 
#define zlangt_                  zlangt 
#define zlanhb_                  zlanhb 
#define zlanhe_                  zlanhe 
#define zlanhf_                  zlanhf 
#define zlanhp_                  zlanhp 
#define zlanhs_                  zlanhs 
#define zlanht_                  zlanht 
#define zlansb_                  zlansb 
#define zlansp_                  zlansp 
#define zlansy_                  zlansy 
#define zlantb_                  zlantb 
#define zlantp_                  zlantp 
#define zlantr_                  zlantr 
#define zlapll_                  zlapll 
#define zlapmr_                  zlapmr 
#define zlapmt_                  zlapmt 
#define zlaqgb_                  zlaqgb 
#define zlaqge_                  zlaqge 
#define zlaqhb_                  zlaqhb 
#define zlaqhe_                  zlaqhe 
#define zlaqhp_                  zlaqhp 
#define zlaqp2_                  zlaqp2 
#define zlaqps_                  zlaqps 
#define zlaqr0_                  zlaqr0 
#define zlaqr1_                  zlaqr1 
#define zlaqr2_                  zlaqr2 
#define zlaqr3_                  zlaqr3 
#define zlaqr4_                  zlaqr4 
#define zlaqr5_                  zlaqr5 
#define zlaqsb_                  zlaqsb 
#define zlaqsp_                  zlaqsp 
#define zlaqsy_                  zlaqsy 
#define zlar1v_                  zlar1v 
#define zlar2v_                  zlar2v 
#define zlarcm_                  zlarcm 
#define zlarf_                   zlarf 
#define zlarfb_                  zlarfb 
#define zlarfg_                  zlarfg 
#define zlarfgp_                 zlarfgp 
#define zlarft_                  zlarft 
#define zlarfx_                  zlarfx 
#define zlarfy_                  zlarfy 
#define zlargv_                  zlargv 
#define zlarnv_                  zlarnv 
#define zlarrv_                  zlarrv 
#define zlarscl2_                zlarscl2 
#define zlartg_                  zlartg 
#define zlartv_                  zlartv 
#define zlarz_                   zlarz 
#define zlarzb_                  zlarzb 
#define zlarzt_                  zlarzt 
#define zlascl2_                 zlascl2 
#define zlascl_                  zlascl 
#define zlaset_                  zlaset 
#define zlasr_                   zlasr 
#define zlassq_                  zlassq 
#define zlaswlq_                 zlaswlq 
#define zlaswp_                  zlaswp 
#define zlasyf_                  zlasyf 
#define zlasyf_aa_               zlasyf_aa 
#define zlasyf_rk_               zlasyf_rk 
#define zlasyf_rook_             zlasyf_rook 
#define zlat2c_                  zlat2c 
#define zlatbs_                  zlatbs 
#define zlatdf_                  zlatdf 
#define zlatps_                  zlatps 
#define zlatrd_                  zlatrd 
#define zlatrs_                  zlatrs 
#define zlatrz_                  zlatrz 
#define zlatsqr_                 zlatsqr 
#define zlatzm_                  zlatzm 
#define zlaunhr_col_getrfnp2_    zlaunhr_col_getrfnp2 
#define zlaunhr_col_getrfnp_     zlaunhr_col_getrfnp 
#define zlauu2_                  zlauu2 
#define zlauum_                  zlauum 
#define zpbcon_                  zpbcon 
#define zpbequ_                  zpbequ 
#define zpbrfs_                  zpbrfs 
#define zpbstf_                  zpbstf 
#define zpbsv_                   zpbsv 
#define zpbsvx_                  zpbsvx 
#define zpbtf2_                  zpbtf2 
#define zpbtrf_                  zpbtrf 
#define zpbtrs_                  zpbtrs 
#define zpftrf_                  zpftrf 
#define zpftri_                  zpftri 
#define zpftrs_                  zpftrs 
#define zpocon_                  zpocon 
#define zpoequ_                  zpoequ 
#define zpoequb_                 zpoequb 
#define zporfs_                  zporfs 
#define zposv_                   zposv 
#define zposvx_                  zposvx 
#define zpotf2_                  zpotf2 
#define zpotrf2_                 zpotrf2 
#define zpotrf_                  zpotrf 
#define zpotri_                  zpotri 
#define zpotrs_                  zpotrs 
#define zppcon_                  zppcon 
#define zppequ_                  zppequ 
#define zpprfs_                  zpprfs 
#define zppsv_                   zppsv 
#define zppsvx_                  zppsvx 
#define zpptrf_                  zpptrf 
#define zpptri_                  zpptri 
#define zpptrs_                  zpptrs 
#define zpstf2_                  zpstf2 
#define zpstrf_                  zpstrf 
#define zptcon_                  zptcon 
#define zpteqr_                  zpteqr 
#define zptrfs_                  zptrfs 
#define zptsv_                   zptsv 
#define zptsvx_                  zptsvx 
#define zpttrf_                  zpttrf 
#define zpttrs_                  zpttrs 
#define zptts2_                  zptts2 
#define zrot_                    zrot 
#define zspcon_                  zspcon 
#define zspmv_                   zspmv 
#define zspr_                    zspr 
#define zsprfs_                  zsprfs 
#define zspsv_                   zspsv 
#define zspsvx_                  zspsvx 
#define zsptrf_                  zsptrf 
#define zsptri_                  zsptri 
#define zsptrs_                  zsptrs 
#define zstedc_                  zstedc 
#define zstegr_                  zstegr 
#define zstein_                  zstein 
#define zstemr_                  zstemr 
#define zsteqr_                  zsteqr 
#define zsycon_                  zsycon 
#define zsycon_3_                zsycon_3 
#define zsycon_rook_             zsycon_rook 
#define zsyconv_                 zsyconv 
#define zsyconvf_                zsyconvf 
#define zsyconvf_rook_           zsyconvf_rook 
#define zsyequb_                 zsyequb 
#define zsymv_                   zsymv 
#define zsyr_                    zsyr 
#define zsyrfs_                  zsyrfs 
#define zsysv_                   zsysv 
#define zsysv_aa_                zsysv_aa 
#define zsysv_aa_2stage_         zsysv_aa_2stage 
#define zsysv_rk_                zsysv_rk 
#define zsysv_rook_              zsysv_rook 
#define zsysvx_                  zsysvx 
#define zsyswapr_                zsyswapr 
#define zsytf2_                  zsytf2 
#define zsytf2_rk_               zsytf2_rk 
#define zsytf2_rook_             zsytf2_rook 
#define zsytrf_                  zsytrf 
#define zsytrf_aa_               zsytrf_aa 
#define zsytrf_aa_2stage_        zsytrf_aa_2stage 
#define zsytrf_rk_               zsytrf_rk 
#define zsytrf_rook_             zsytrf_rook 
#define zsytri2_                 zsytri2 
#define zsytri2x_                zsytri2x 
#define zsytri_                  zsytri 
#define zsytri_3_                zsytri_3 
#define zsytri_3x_               zsytri_3x 
#define zsytri_rook_             zsytri_rook 
#define zsytrs2_                 zsytrs2 
#define zsytrs_                  zsytrs 
#define zsytrs_3_                zsytrs_3 
#define zsytrs_aa_               zsytrs_aa 
#define zsytrs_aa_2stage_        zsytrs_aa_2stage 
#define zsytrs_rook_             zsytrs_rook 
#define ztbcon_                  ztbcon 
#define ztbrfs_                  ztbrfs 
#define ztbtrs_                  ztbtrs 
#define ztfsm_                   ztfsm 
#define ztftri_                  ztftri 
#define ztfttp_                  ztfttp 
#define ztfttr_                  ztfttr 
#define ztgevc_                  ztgevc 
#define ztgex2_                  ztgex2 
#define ztgexc_                  ztgexc 
#define ztgsen_                  ztgsen 
#define ztgsja_                  ztgsja 
#define ztgsna_                  ztgsna 
#define ztgsy2_                  ztgsy2 
#define ztgsyl_                  ztgsyl 
#define ztpcon_                  ztpcon 
#define ztplqt2_                 ztplqt2 
#define ztplqt_                  ztplqt 
#define ztpmlqt_                 ztpmlqt 
#define ztpmqrt_                 ztpmqrt 
#define ztpqrt2_                 ztpqrt2 
#define ztpqrt_                  ztpqrt 
#define ztprfb_                  ztprfb 
#define ztprfs_                  ztprfs 
#define ztptri_                  ztptri 
#define ztptrs_                  ztptrs 
#define ztpttf_                  ztpttf 
#define ztpttr_                  ztpttr 
#define ztrcon_                  ztrcon 
#define ztrevc3_                 ztrevc3 
#define ztrevc_                  ztrevc 
#define ztrexc_                  ztrexc 
#define ztrrfs_                  ztrrfs 
#define ztrsen_                  ztrsen 
#define ztrsna_                  ztrsna 
#define ztrsyl_                  ztrsyl 
#define ztrti2_                  ztrti2 
#define ztrtri_                  ztrtri 
#define ztrtrs_                  ztrtrs 
#define ztrttf_                  ztrttf 
#define ztrttp_                  ztrttp 
#define ztzrqf_                  ztzrqf 
#define ztzrzf_                  ztzrzf 
#define zunbdb1_                 zunbdb1 
#define zunbdb2_                 zunbdb2 
#define zunbdb3_                 zunbdb3 
#define zunbdb4_                 zunbdb4 
#define zunbdb5_                 zunbdb5 
#define zunbdb6_                 zunbdb6 
#define zunbdb_                  zunbdb 
#define zuncsd2by1_              zuncsd2by1 
#define zuncsd_                  zuncsd 
#define zung2l_                  zung2l 
#define zung2r_                  zung2r 
#define zungbr_                  zungbr 
#define zunghr_                  zunghr 
#define zungl2_                  zungl2 
#define zunglq_                  zunglq 
#define zungql_                  zungql 
#define zungqr_                  zungqr 
#define zungr2_                  zungr2 
#define zungrq_                  zungrq 
#define zungtr_                  zungtr 
#define zungtsqr_                zungtsqr 
#define zunhr_col_               zunhr_col 
#define zunm22_                  zunm22 
#define zunm2l_                  zunm2l 
#define zunm2r_                  zunm2r 
#define zunmbr_                  zunmbr 
#define zunmhr_                  zunmhr 
#define zunml2_                  zunml2 
#define zunmlq_                  zunmlq 
#define zunmql_                  zunmql 
#define zunmqr_                  zunmqr 
#define zunmr2_                  zunmr2 
#define zunmr3_                  zunmr3 
#define zunmrq_                  zunmrq 
#define zunmrz_                  zunmrz 
#define zunmtr_                  zunmtr 
#define zupgtr_                  zupgtr 
#define zupmtr_                  zupmtr 
#define chla_transtype_          chla_transtype
#define disnan_                  disnan
#define dlaisnan_                dlaisnan
#define sisnan_                  sisnan
#define slaisnan_                slaisnan
#define cladiv_                  cladiv
#define zladiv_                  zladiv
#define sgetrfnp_                sgetrfnp
#define dgetrfnp_                dgetrfnp
#define cgetrfnp_                cgetrfnp
#define zgetrfnp_                zgetrfnp
#define sspffrt2_                sspffrt2
#define dspffrt2_                dspffrt2
#define cspffrt2_                cspffrt2
#define zspffrt2_                zspffrt2
#define sspffrtx_                sspffrtx
#define dspffrtx_                dspffrtx
#define cspffrtx_                cspffrtx
#define zspffrtx_                zspffrtx
#define sgetrfnpi_               sgetrfnpi
#define dgetrfnpi_               dgetrfnpi
#define cgetrfnpi_               cgetrfnpi
#define zgetrfnpi_               zgetrfnpi
#endif
#endif 
#endif
// end FLA_f2c.h

  // Include prototypes for BLAS-like interfaces
// begin blis1.h


#ifndef BLIS1_H
#define BLIS1_H

// Allow C++ users to include this header file in their source code. However,
// we make the extern "C" conditional on whether we're using a C++ compiler,
// since regular C compilers don't understand the extern "C" construct.
#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <math.h> // skipped

// begin FLA_config.h
//Determines to enable FLA_ENABLE_EXTRA_SYMBOLS
#define FLA_ENABLE_EXTRA_SYMBOLS    1

#ifdef FLA_ENABLE_EXTRA_SYMBOLS
#define F77_FUNC(name,NAME) name ## _
#define F77_FUNC_(name,NAME) name ## _
#endif

// --- General options ---------------------------------------------------------

// Determines whether to enable various segments of code identified as
// providing non-critical functionality.
#define FLA_ENABLE_NON_CRITICAL_CODE   1

//Determines to enable BuiltinBlas


//Enables blis1 use of flamalloc
#define FLA_ENABLE_BLIS1_USE_OF_FLA_MALLOC 1

// Determines whether the LAPACK compatibility layer is included in libflame.
// NOTE: If lapack2flame is enabled, external-lapack-for-subproblems MUST
// be disabled!
#define FLA_ENABLE_LAPACK2FLAME    1

// Determines whether ILP64 enabled. only enabled when -DENABLE_ILP64 is passed with cmake


// Determines whether to enable external LAPACK for small subproblems.
// NOTE: If external-lapack-for-subproblems is enabled, (a) lapack2flame MUST
// be disabled, AND (b) external-lapack-interfaces MUST be enabled.


// Determines whether to enable interfaces to external LAPACK routines.
// NOTE: If external-lapack-interfaces is enabled, an LAPACK library will be
// required at link-time.
#define FLA_ENABLE_EXTERNAL_LAPACK_INTERFACES  1

// Determines whether to use control trees to select a reasonable FLAME
// variant and blocksize when level-3 BLAS front-ends are invoked.


// Determines whether to modify various segments of code needed for
// integrating libflame into Windows.


// Determines whether to define a portable FLA_Clock() in terms of
// gettimeofday() from time.h.
#define FLA_ENABLE_PORTABLE_TIMER  1


// --- Runtime error checking and debugging ------------------------------------

// Determines whether to enable internal runtime consistency checks of
// function parameters and return values.
#define FLA_ENABLE_INTERNAL_ERROR_CHECKING 1

// Encodes the default level of internal error checking chosen at
// configure-time.
// 1-minimal error cheking
// 2-full error cheking
// 3-no error cheking
#define FLA_INTERNAL_ERROR_CHECKING_LEVEL 2   

// Determines whether to enable the FLA_malloc()/FLA_free() memory counter
// by default.



// --- Multithreading and SuperMatrix ------------------------------------------

// Determines whether thread-specific blocks of code should be compiled.


// Encodes the type of multithreading chosen at configure-time.
// 1 - openmp
// 2 - pthreads
#define FLA_MULTITHREADING_MODEL 1

// Determines whether SuperMatrix-specific blocks of code should be compiled.



// --- BLAS and blocksizes -----------------------------------------------------

// Determines whether to enable CBLAS interfaces instead of Fortran-77
// interfaces to the BLAS.


// Determines whether to enable interfaces to internal/low-level libgoto
// symbols.


// Sets the default blocksize in the k dimension (used only if
// libgoto interfaces are disabled).


// Sets the default blocksize in the m dimension (used only if
// libgoto interfaces are disabled).


// Sets the default blocksize in the n dimension (used only if
// libgoto interfaces are disabled).



// --- Memory alignment --------------------------------------------------------

// Determines whether memory is aligned to user-requested boundaries.


// Sets the byte boundary used to align the starting address of all memory
// allocated dynamically through libflame. Only used if
// FLA_ENABLE_MEMORY_ALIGNMENT is defined.


// Determines whether to enable code that will increase FLA_Obj leading
// dimensions to ensure that matrix columns adhere to the alignment specified
// by FLA_MEMORY_ALIGNMENT_BOUNDARY.



// --- Fortran-77 compatibility ------------------------------------------------

// Determines whether the Fortran name-mangling suffix was determined at
// configure-time. This option is not used in Windows.


// Determines whether the Fortran 77 compiler appends an underscore to symbol
// names. Not used in Windows.


// Determines whether the Fortran 77 compiler appends an extra underscore to
// symbol names that already contain at least one underscore. Not used in
// Windows.


// Determines whether invocations to the BLAS within libflame are converted to
// uppercase symbols.


// Determines whether invocations to LAPACK within libflame are converted to
// uppercase symbols.



// --- Experimental/unsupported/broken options ---------------------------------

// Determines whether GPU-specific blocks of code should be compiled.


// Determines AMD optimized code path selection
#define FLA_ENABLE_AMD_OPT 1

//Detrmines library Version
#define FLA_LIBFLAME_VERSION   "5.1.0	Build	20250430"

// Determines OpenMP multithreading for AMD optimized code path 
#define FLA_OPENMP_MULTITHREADING  1

// Determins BLAS Extension API, GEMMT usage in libFLAME APIs
#define FLA_ENABLE_BLAS_EXT_GEMMT  1

// Enables FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME
#define FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME  1

//#define FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME 1
#define FLA_VECTOR_INTRINSIC_TYPE 0

// #define other missing macros
#define HAVE_ASSERT_H 1
#define HAVE_FCNTL_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LIBM 1
#define HAVE_MATH_H 1
#define HAVE_MEMORY_H 1
#define HAVE_SIGNAL_H 1
#define HAVE_STDINT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRINGS_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1

#define PROTOTYPES 1
#define STDC_HEADERS 1
#define TIME_WITH_SYS_TIME 1
#define _GNU_SOURCE 1
#define __PROTOTYPES 1






// end FLA_config.h
// begin FLA_macro_defs.h
			





// --- Miscellaneous macro definitions -----------------------------------------
#ifndef FLA_MACRO_DEFS_H
#define FLA_MACRO_DEFS_H

#undef  NULL
#define NULL 0

#ifdef FLA_ENABLE_WINDOWS_BUILD
  #define restrict  __restrict
#endif

// --- Macro to enable/disable Thread Local Storage (TLS) for global variables -
#if defined(WINDOWS_FLA_SHARED_BUILD) && defined(WINDOWS_FLA_TEST)
 #define ENABLE_THREAD_LOCAL_STORAGE 0
 #define LIBFLAME_IMPORT __declspec(dllimport)
#else
 #if defined(FLA_ENABLE_AMD_OPT) && !defined FLA_ENABLE_SUPERMATRIX
   #define ENABLE_THREAD_LOCAL_STORAGE 1
 #else
   #define ENABLE_THREAD_LOCAL_STORAGE 0
 #endif
 #define LIBFLAME_IMPORT
#endif

#if ENABLE_THREAD_LOCAL_STORAGE
#ifdef FLA_ENABLE_WINDOWS_BUILD
#define TLS_CLASS_SPEC __declspec(thread)
#else
#define TLS_CLASS_SPEC __thread
#endif
#else
#define TLS_CLASS_SPEC
#endif

// --- Type-related macro definitions ------------------------------------------

// FLA_Bool
#undef  TRUE
#undef  FALSE
#define TRUE  1
#define FALSE 0

// FLA_Error (non-specific)
#define FLA_SUCCESS           (-1)
#define FLA_FAILURE           (-2)

// FLA_Quadrant
#define FLA_TL                 11
#define FLA_TR                 12
#define FLA_BL                 21
#define FLA_BR                 22

// FLA_Datatype
#define FLA_FLOAT             100
#define FLA_DOUBLE            101
#define FLA_COMPLEX           102
#define FLA_DOUBLE_COMPLEX    103
#define FLA_INT               104
#define FLA_CONSTANT          105

// FLA_Elemtype
#define FLA_MATRIX            150
#define FLA_SCALAR            151

// FLA_Side
#define FLA_TOP               200
#define FLA_BOTTOM            201
#define FLA_LEFT              210
#define FLA_RIGHT             211
#define FLA_SIDE_MASK         0x1

// FLA_Uplo
#define FLA_LOWER_TRIANGULAR  300
#define FLA_UPPER_TRIANGULAR  301
#define FLA_ZERO_MATRIX       310
#define FLA_FULL_MATRIX       311
#define FLA_UPLO_MASK         0x1

// FLA_Trans
#define FLA_NO_TRANSPOSE      400
#define FLA_TRANSPOSE         401
#define FLA_CONJ_TRANSPOSE    402
#define FLA_CONJ_NO_TRANSPOSE 403
#define FLA_TRANS_MASK        0x3

// FLA_Conj
#define FLA_NO_CONJUGATE      450
#define FLA_CONJUGATE         451

// FLA_Diag
#define FLA_UNIT_DIAG         500
#define FLA_NONUNIT_DIAG      501
#define FLA_ZERO_DIAG         502
#define FLA_DIAG_MASK         0x3

// FLA_Dimension
#define FLA_DIMENSION_M       600
#define FLA_DIMENSION_K       601
#define FLA_DIMENSION_N       602
#define FLA_DIMENSION_MIN     603

// FLA_Dimension_index
#define FLA_DIM_M_INDEX         0
#define FLA_DIM_K_INDEX         1
#define FLA_DIM_N_INDEX         2
#define FLA_DIM_MIN_INDEX       3
#define FLA_DIM_INDEX_MASK    0x3

// FLA_Pivot_type
#define FLA_NATIVE_PIVOTS     700
#define FLA_LAPACK_PIVOTS     701

// FLA_Direct
#define FLA_FORWARD           800
#define FLA_BACKWARD          801

// FLA_Store
#define FLA_COLUMNWISE        900
#define FLA_ROWWISE           901

// FLA_Matrix_type
#define FLA_FLAT             1000
#define FLA_HIER             1001

// FLA_Precision
#define FLA_SINGLE_PRECISION 1100
#define FLA_DOUBLE_PRECISION 1101

// FLA_Domain
#define FLA_REAL_DOMAIN      1200
#define FLA_COMPLEX_DOMAIN   1201

// FLA_Inv    
#define FLA_NO_INVERSE       1300
#define FLA_INVERSE          1301

// FLA_Evd_type
#define FLA_EVD_WITHOUT_VECTORS         1400
#define FLA_EVD_WITH_VECTORS            1401
#define FLA_EVD_OF_TRIDIAG_WITH_VECTORS 1402

// FLA_Svd_type
#define FLA_SVD_VECTORS_ALL           1500
#define FLA_SVD_VECTORS_MIN_COPY      1501
#define FLA_SVD_VECTORS_MIN_OVERWRITE 1502
#define FLA_SVD_VECTORS_NONE          1503

// FLA_Machval
#define FLA_MACH_START                1600
#define FLA_MACH_EPS                  1600
#define FLA_MACH_SFMIN                1601
#define FLA_MACH_BASE                 1602
#define FLA_MACH_PREC                 1603
#define FLA_MACH_NDIGMANT             1604
#define FLA_MACH_RND                  1605
#define FLA_MACH_EMIN                 1606
#define FLA_MACH_RMIN                 1607
#define FLA_MACH_EMAX                 1608
#define FLA_MACH_RMAX                 1609
#define FLA_MACH_EPS2                 1610
#define FLA_MACH_N_VALS                 11

// FLA_Diag_off
#define FLA_SUPER_DIAGONAL     ( 1)
#define FLA_MAIN_DIAGONAL        0
#define FLA_SUB_DIAGONAL       (-1)

// FLAME threading model
#define FLA_OPENMP              1
#define FLA_PTHREADS            2

// FLAME vector intrinsics types
#define FLA_NO_INTRINSICS       0
#define FLA_SSE_INTRINSICS      3

// FLAME internal error checking level
#define FLA_FULL_ERROR_CHECKING 2
#define FLA_MIN_ERROR_CHECKING  1
#define FLA_NO_ERROR_CHECKING   0

// FLA_Datatype_index
#define FLA_S_INDEX             0
#define FLA_D_INDEX             1
#define FLA_C_INDEX             2
#define FLA_Z_INDEX             3
#define FLA_DTYPE_INDEX_MASK  0x3

#define FLA_SMALL_LU_BLOCKSIZE 64
// Default blocksize if none are available.
#ifndef FLA_DEFAULT_M_BLOCKSIZE
  #define FLA_DEFAULT_M_BLOCKSIZE  128
#endif
#ifndef FLA_DEFAULT_K_BLOCKSIZE
  #define FLA_DEFAULT_K_BLOCKSIZE  128
#endif
#ifndef FLA_DEFAULT_N_BLOCKSIZE
  #define FLA_DEFAULT_N_BLOCKSIZE  128
#endif

// Blocksize for hierarchical storage of matrices for FLASH based
// external interfaces
#define FLA_EXT_HIER_BLOCKSIZE 128

// QR and LQ factorizations typically has an inner blocksize that corresponds
// to the length of the S (or T) block Householder matrix. For consistency, we
// define the ratio of the inner blocksize to the outer blocksize here, as it
// is used in several places. Note that other operations have analagous inner
// blocksizes, which we also define in terms of the outer storage blocksize,
// or in some cases such as Hessenberg, tridiagonal, and bidiagonal reductions,
// in terms of the system-wide default blocksize.
#define FLA_QR_INNER_TO_OUTER_B_RATIO      (0.25)
#define FLA_LQ_INNER_TO_OUTER_B_RATIO      (0.25)
#define FLA_LU_INNER_TO_OUTER_B_RATIO      (0.25)
#define FLA_UDDATE_INNER_TO_OUTER_B_RATIO  (0.25)
#define FLA_HESS_INNER_TO_OUTER_B_RATIO    (0.25)
#define FLA_TRIDIAG_INNER_TO_OUTER_B_RATIO (0.25)
#define FLA_BIDIAG_INNER_TO_OUTER_B_RATIO  (0.25)
#define FLA_CAQR_INNER_TO_OUTER_B_RATIO    (0.25)

// Matrix size thresholds for choosing unbloked non-FLA variant of QR for
// small matrices
#define FLA_GEQRF_STHRESH (32)
#define FLA_GEQRF_BLOCK_SIZE (32)
// Matrix size thresholds for choosing transposed QR for LQ 
#define FLA_DELQF_TRAN_THRESH (1280)

//POTRF, threshold numbers to chose paths for performance
#define FLA_POTRF_FLOAT_SMALL         (70)
#define FLA_POTRF_DOUBLE_SMALL        (75)

//GETRF , threshold numbers to chose paths for performance
#define FLA_GETRF_SMALL               (85)
#define FLA_GETRF_FLOAT               (1440)
#define FLA_GETRF_COMPLEX             (670)
#define FLA_GETRF_DOUBLE_COMPLEX      (1630)

#define FLA_SGETRF_SMALL_THRESH1      (117)
#define FLA_SGETRF_MEDIUM_THRESH0     (480)

#define FLA_SGETRF_SMALL_THRESH0      (7)
#define FLA_SGETRF_SMALL_AVX2_THRESH0      (31)
#define FLA_SGETRF_SMALL_AVX512_THRESH0    (156)

#define FLA_DGETRF_SMALL_THRESH0      (8)
#define FLA_DGETRF_SMALL_AVX2_THRESH0      (81)
#define FLA_DGETRF_SMALL_AVX512_THRESH0    (160)

#define FLA_ZGETRF_SMALL_THRESH      (100)

// GETRFNPI , these thresholds are used to chose between 3 algorithms to get best
// results in terms of perfmormance
#define FLA_MN_SIZE            (373321)
#define FLA_NFACT_PERCENT      (0.51)
#define FLA_FULL_DGER_CONSTANT (200)

// ORGQR , threshold numbers to chose paths for performance
#define FLA_DGEMV_DGER_SIMD_SMALL_THRESH   (128)
#define FLA_DGEMV_DGER_SIMD_SMALL_THRESH_M (6)
#define FLA_DGEMV_DGER_SIMD_AVX512_THRESH_M (25)
#define FLA_ZGEMV_ZGER_SIMD_AXV2_THRESH_M (8)
#define FLA_ZGEMV_ZGER_SIMD_AXV512_THRESH_M (49)
#define FLA_SSCAL_INLINE_SMALL          (512)
#define FLA_DSCAL_INLINE_SMALL          (512)
#define FLA_ZGERC_INLINE_SMALL_THRESH0  (128)
#define FLA_ZGERC_INLINE_SMALL_THRESH1  (32)
#define FLA_ZSCAL_INLINE_SMALL          (128)
#define FLA_ZUNGQR_BLOCK_SMALL_THRESH   (32)


#define FLA_ZLANGEM_SIMD_AVX512_THRESH_M (15)
#define FLA_CLANGEM_SIMD_AVX512_THRESH_M (15)

// DNRM2 threshold numbers to chose AVX kernel
#define FLA_DNRM2_SMALL_THRESH0  (15)

// GEQP3 , threshold numbers to chose paths for performance
#define FLA_IDAMAX_INLINE_SMALL_THRESH   (128)
#define FLA_DGEQP3_BLOCK_SMALL_THRESH    (32)
#define FLA_ZGEQP3_BLOCK_SMALL_THRESH    (32)

// --- Error-related macro definitions -----------------------------------------

// Useful when determining the relative index base of the error codes.
#define FLA_ERROR_CODE_MIN                    (-10)

// FLA_Error values.
#define FLA_INVALID_SIDE                      (-10)
#define FLA_INVALID_UPLO                      (-11)
#define FLA_INVALID_TRANS                     (-12)
#define FLA_INVALID_TRANS_GIVEN_DATATYPE      (-13)
#define FLA_INVALID_CONJ                      (-14)
#define FLA_INVALID_DIRECT                    (-15)
#define FLA_INVALID_STOREV                    (-16)
#define FLA_INVALID_DATATYPE                  (-17)
#define FLA_INVALID_INTEGER_DATATYPE          (-18)
#define FLA_INVALID_REAL_DATATYPE             (-19)
#define FLA_INVALID_COMPLEX_DATATYPE          (-20)
#define FLA_OBJECT_NOT_INTEGER                (-21)
#define FLA_OBJECT_NOT_REAL                   (-22)
#define FLA_OBJECT_NOT_COMPLEX                (-23)
#define FLA_OBJECT_NOT_SQUARE                 (-24)
#define FLA_OBJECT_NOT_SCALAR                 (-25)
#define FLA_OBJECT_NOT_VECTOR                 (-26)
#define FLA_INCONSISTENT_DATATYPES            (-27)
#define FLA_NONCONFORMAL_DIMENSIONS           (-28)
#define FLA_UNEQUAL_VECTOR_DIMS               (-29)
#define FLA_INVALID_HESSENBERG_INDICES        (-30)
#define FLA_NULL_POINTER                      (-32)
#define FLA_SPECIFIED_OBJ_DIM_MISMATCH        (-33)
#define FLA_INVALID_PIVOT_TYPE                (-35)
#define FLA_MALLOC_RETURNED_NULL_POINTER      (-37)
#define FLA_OBJECT_BASE_BUFFER_MISMATCH       (-38)
#define FLA_OBJECTS_NOT_VERTICALLY_ADJ        (-39)
#define FLA_OBJECTS_NOT_HORIZONTALLY_ADJ      (-40)
#define FLA_ADJACENT_OBJECT_DIM_MISMATCH      (-41)
#define FLA_OBJECTS_NOT_VERTICALLY_ALIGNED    (-42)
#define FLA_OBJECTS_NOT_HORIZONTALLY_ALIGNED  (-43)
#define FLA_INVALID_FLOATING_DATATYPE         (-44)
#define FLA_OBJECT_NOT_FLOATING_POINT         (-45)
#define FLA_INVALID_BLOCKSIZE_VALUE           (-46)
#define FLA_OPEN_RETURNED_ERROR               (-47)
#define FLA_LSEEK_RETURNED_ERROR              (-48)
#define FLA_CLOSE_RETURNED_ERROR              (-49)
#define FLA_UNLINK_RETURNED_ERROR             (-50)
#define FLA_READ_RETURNED_ERROR               (-51)
#define FLA_WRITE_RETURNED_ERROR              (-52)
#define FLA_INVALID_QUADRANT                  (-53)
#define FLA_NOT_YET_IMPLEMENTED               (-54)
#define FLA_EXPECTED_NONNEGATIVE_VALUE        (-55)
#define FLA_SUPERMATRIX_NOT_ENABLED           (-56)
#define FLA_UNDEFINED_ERROR_CODE              (-57)
#define FLA_INVALID_DIAG                      (-58)
#define FLA_INCONSISTENT_OBJECT_PRECISION     (-59)
#define FLA_INVALID_BLOCKSIZE_OBJ             (-60)
#define FLA_VECTOR_DIM_BELOW_MIN              (-61)
#define FLA_PTHREAD_CREATE_RETURNED_ERROR     (-63)
#define FLA_PTHREAD_JOIN_RETURNED_ERROR       (-64)
#define FLA_INVALID_ISGN_VALUE                (-65)
#define FLA_CHOL_FAILED_MATRIX_NOT_SPD        (-67)
#define FLA_INVALID_ELEMTYPE                  (-68)
#define FLA_POSIX_MEMALIGN_FAILED             (-69)
#define FLA_INVALID_SUBMATRIX_DIMS            (-70)
#define FLA_INVALID_SUBMATRIX_OFFSET          (-71)
#define FLA_OBJECT_NOT_SCALAR_ELEMTYPE        (-72)
#define FLA_OBJECT_NOT_MATRIX_ELEMTYPE        (-73)
#define FLA_ENCOUNTERED_NON_POSITIVE_NTHREADS (-74)
#define FLA_INVALID_CONJ_GIVEN_DATATYPE       (-75)
#define FLA_INVALID_COMPLEX_TRANS             (-76)
#define FLA_INVALID_REAL_TRANS                (-77)
#define FLA_INVALID_BLAS_TRANS                (-78)
#define FLA_INVALID_NONCONSTANT_DATATYPE      (-79)
#define FLA_OBJECT_NOT_NONCONSTANT            (-80)
#define FLA_OBJECT_DATATYPES_NOT_EQUAL        (-82)
#define FLA_DIVIDE_BY_ZERO                    (-83)
#define FLA_OBJECT_ELEMTYPES_NOT_EQUAL        (-84)
#define FLA_INVALID_PIVOT_INDEX_RANGE         (-85)
#define FLA_HOUSEH_PANEL_MATRIX_TOO_SMALL     (-86)
#define FLA_INVALID_OBJECT_LENGTH             (-87)
#define FLA_INVALID_OBJECT_WIDTH              (-88)
#define FLA_INVALID_ERROR_CHECKING_LEVEL      (-89)
#define FLA_ATTEMPTED_OVER_REPART_2X2         (-90)
#define FLA_ATTEMPTED_OVER_REPART_2X1         (-91)
#define FLA_ATTEMPTED_OVER_REPART_1X2         (-92)
#define FLA_EXTERNAL_LAPACK_NOT_IMPLEMENTED   (-93)
#define FLA_INVALID_ROW_STRIDE                (-94)
#define FLA_INVALID_COL_STRIDE                (-95)
#define FLA_INVALID_STRIDE_COMBINATION        (-96)
#define FLA_INVALID_VECTOR_DIM                (-97)
#define FLA_EXPECTED_ROW_VECTOR               (-98)
#define FLA_EXPECTED_COL_VECTOR               (-99)
#define FLA_INVALID_INVERSE                   (-100)
#define FLA_MALLOC_GPU_RETURNED_NULL_POINTER  (-101)
#define FLA_INVALID_EVD_TYPE                  (-102)
#define FLA_INVALID_SVD_TYPE                  (-103)
#define FLA_INVALID_MACHVAL                   (-104)
#define FLA_INVALID_DIAG_OFFSET               (-105)
#define FLA_EXPECTED_COL_STORAGE              (-106)
#define FLA_EXPECTED_ROW_STORAGE              (-107)
#define FLA_LAPAC2FLAME_INVALID_RETURN        (-108)
#define FLA_INVALID_SVD_TYPE_COMBINATION      (-109)
#define FLA_INVALID_SVD_TYPE_AND_TRANS_COMBINATION (-110)
#define FLA_OBJECT_NOT_COMPARABLE             (-111)

// Necessary when computing whether an error code is defined.
#define FLA_ERROR_CODE_MAX                    (-111)

// Internal string matrix limits.
#define FLA_MAX_NUM_ERROR_MSGS                 150
#define FLA_MAX_ERROR_MSG_LENGTH               200

// Error code translation and output macro definition.
#define FLA_Check_error_code( code ) \
        FLA_Check_error_code_helper( code, __FILE__, __LINE__ )



// --- Common functions implemented as macros ----------------------------------

#define fla_min( x, y )    \
({                         \
   __typeof__(x) _x = (x); \
   __typeof__(y) _y = (y); \
   _x < _y ? _x : _y;      \
})

#define fla_max( x, y )    \
({                         \
   __typeof__(x) _x = (x); \
   __typeof__(y) _y = (y); \
   _x > _y ? _x : _y;      \
})

#undef signof
#define signof( a, b ) ( (b) >= 0 ? (a) : -(a) )

#ifndef __cplusplus

 #undef exchange
 #define exchange( a, b, temp ) { temp = a; a = b; b = temp; }

#endif

// --- Other macro definitions -------------------------------------------------

#define FLA_NEGATE( a ) \
        ( a.base == FLA_ONE.base ? FLA_MINUS_ONE : FLA_ONE )

#endif

// end FLA_macro_defs.h
// begin FLA_type_defs.h




#ifndef FLA_TYPE_DEFS_H
#define FLA_TYPE_DEFS_H

#ifdef __cplusplus
// For C++, include stdint.h.
#include <stdint.h> // skipped
#elif __STDC_VERSION__ >= 199901L
// For C99 (or later), include stdint.h.
#include <stdint.h> // skipped
#else
// When stdint.h is not available, manually typedef the types we will use.
#ifdef _WIN32
typedef          __int32  int32_t;
typedef unsigned __int32 uint32_t;
typedef          __int64  int64_t;
typedef unsigned __int64 uint64_t;
#else
#error "Attempting to compile on pre-C99 system without stdint.h."
#endif
#endif

#if defined(FLA_ENABLE_ILP64)
typedef int64_t integer;
typedef uint64_t uinteger;
#else
typedef int integer;
typedef unsigned long uinteger;
#endif



#if   FLA_MULTITHREADING_MODEL == FLA_OPENMP
#ifdef FLA_ENABLE_TIDSP
#include <ti/omp/omp.h> // skipped
#else
#include <omp.h> // skipped
#endif
#elif FLA_MULTITHREADING_MODEL == FLA_PTHREADS
#include <pthread.h> // skipped
#endif


// --- Complex type definitions -----------------------------------------------

#ifndef _DEFINED_SCOMPLEX
#define _DEFINED_SCOMPLEX
typedef struct scomplex
{
  float real, imag;
} scomplex;
#endif

#ifndef _DEFINED_DCOMPLEX
#define _DEFINED_DCOMPLEX
typedef struct dcomplex
{
  double real, imag;
} dcomplex;
#endif


// --- Parameter and return type definitions ----------------------------------

typedef int FLA_Bool;
typedef int FLA_Error;
typedef int FLA_Quadrant;
typedef int FLA_Datatype;
typedef int FLA_Elemtype;
typedef int FLA_Side;
typedef int FLA_Uplo;
typedef int FLA_Trans;
typedef int FLA_Conj;
typedef int FLA_Diag;
typedef int FLA_Dimension;
typedef int FLA_Pivot_type;
typedef int FLA_Direct;
typedef int FLA_Store;
typedef int FLA_Matrix_type;
typedef int FLA_Precision;
typedef int FLA_Domain;
typedef int FLA_Inv;
typedef int FLA_Evd_type;
typedef int FLA_Svd_type;
typedef int FLA_Machval;
typedef int FLA_Diag_off;

#ifndef _DEFINED_FLA_DIM_T
#define _DEFINED_FLA_DIM_T
typedef uinteger fla_dim_t;
#endif

// --- Intrinsic/assembly definitions ----------------------------------------

#if FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#include "pmmintrin.h" // skipped

//typedef double v2df __attribute__ ((vector_size (16)));

typedef union
{
    __m128  v; 
    float   f[4];
} v4sf_t;

typedef union
{
    __m128d v; 
    double  d[2];
} v2df_t;

#endif

// --- FLAME object definitions -----------------------------------------------

typedef struct FLA_Lock_s     FLA_Lock;

//#ifdef FLA_ENABLE_MULTITHREADING
struct FLA_Lock_s
{
  // Implementation-specific lock object
#if   FLA_MULTITHREADING_MODEL == FLA_OPENMP
  omp_lock_t       lock;
#elif FLA_MULTITHREADING_MODEL == FLA_PTHREADS
  pthread_mutex_t  lock;
#endif
};
//#endif

#ifdef FLA_ENABLE_SUPERMATRIX
typedef int                   FLASH_Verbose;
typedef int                   FLASH_Data_aff;

typedef struct FLASH_Queue_s  FLASH_Queue;
typedef struct FLASH_Task_s   FLASH_Task;
typedef struct FLASH_Dep_s    FLASH_Dep;
#endif
typedef struct FLASH_Thread_s FLASH_Thread;

typedef struct FLA_Obj_struct
{
  // Basic object description fields
  FLA_Datatype  datatype;
  FLA_Elemtype  elemtype;
  fla_dim_t         m;
  fla_dim_t         n;
  fla_dim_t         rs;
  fla_dim_t         cs;
  fla_dim_t         m_inner;
  fla_dim_t         n_inner;
  unsigned long id;
  fla_dim_t         m_index;
  fla_dim_t         n_index;

  fla_dim_t         n_elem_alloc;
  void*         buffer;
  int           buffer_info;

  FLA_Uplo      uplo;

#ifdef FLA_ENABLE_SUPERMATRIX
  // Fields for supermatrix
  int           n_read_blocks;
  int           n_write_blocks;

  // All the tasks that previously read this block, anti-dependency
  int           n_read_tasks;
  FLASH_Dep*    read_task_head;
  FLASH_Dep*    read_task_tail;

  // Task that last overwrote this block, flow dependency
  FLASH_Task*   write_task;
#endif
} FLA_Base_obj;

typedef struct FLA_Obj_view
{
  // Basic object view description fields
  fla_dim_t         offm;
  fla_dim_t         offn;
  fla_dim_t         m;
  fla_dim_t         n;
  
  fla_dim_t         m_inner;
  fla_dim_t         n_inner;

  FLA_Base_obj* base;

} FLA_Obj;

#ifdef FLA_ENABLE_SUPERMATRIX
struct FLASH_Queue_s
{
  // Number of tasks currently in queue
  unsigned int  n_tasks;

  // Pointers to head (front) and tail (back) of queue
  FLASH_Task*   head;
  FLASH_Task*   tail;
};

struct FLASH_Task_s
{
  // Execution information
  int           n_ready;

  // Labels
  int           order;
  int           queue;
  int           height;
  int           thread;
  int           cache;
  FLA_Bool      hit;
      
  // Function pointer
  void*         func;

  // Control tree pointer
  void*         cntl;

  // Name of task
  char*         name;

  // GPU enabled task
  FLA_Bool      enabled_gpu;

  // Integer arguments
  int           n_int_args;
  int*          int_arg;

  // Constant FLA_Obj arguments
  int           n_fla_args;
  FLA_Obj*      fla_arg;

  // Input FLA_Obj arguments
  int           n_input_args;
  FLA_Obj*      input_arg;

  // Output FLA_Obj argument
  int           n_output_args;
  FLA_Obj*      output_arg;

  // Number of blocks within all macroblocks
  int           n_macro_args;

  // Number of write after read dependencies
  int           n_war_args;

  // Dependence information
  int           n_dep_args;
  FLASH_Dep*    dep_arg_head;
  FLASH_Dep*    dep_arg_tail;
  
  // Support for a doubly linked list of tasks
  FLASH_Task*   prev_task;
  FLASH_Task*   next_task;

  // Support for a doubly linked list for wait queue
  FLASH_Task*   prev_wait;
  FLASH_Task*   next_wait;
};

struct FLASH_Dep_s
{
  // Task yielding dependency
  FLASH_Task*   task;

  // Support for linked list of FLASH_Deps
  FLASH_Dep*    next_dep;
};
#endif // FLA_ENABLE_SUPERMATRIX

struct FLASH_Thread_s
{
  // The thread's unique identifier
  int       id;

  // Pointer to variables needed to execute SuperMatrix mechanism
  void*     args;

#if FLA_MULTITHREADING_MODEL == FLA_PTHREADS
  // The thread object. Only needed for the POSIX threads implementation.
  pthread_t pthread_obj;
#endif
};

#endif // FLA_TYPE_DEFS_H
// end FLA_type_defs.h

// Determine whether or not we are using BLIS from libflame.


// If using libflame, pull in its header files so that
// vector intrinsics-related macro constants are set properly.

// --- Pass-through macros for BLIS ---
#ifdef FLA_ENABLE_CBLAS_INTERFACES
    #define BLIS1_ENABLE_CBLAS_INTERFACES
#endif
#ifdef FLA_ENABLE_WINDOWS_BUILD
    #define BLIS1_ENABLE_WINDOWS_BUILD
#endif
#ifdef FLA_ENABLE_UPPERCASE_F77
    #define BLIS1_ENABLE_UPPERCASE_F77
#endif
#ifdef FLA_ENABLE_VECTOR_INTRINSICS
    #define BLIS1_ENABLE_VECTOR_INTRINSICS
#endif

#define BLIS1_VECTOR_INTRINSIC_TYPE FLA_VECTOR_INTRINSIC_TYPE


// begin blis_macro_defs.h


#ifndef BLIS1_MACRO_DEFS_H
#define BLIS1_MACRO_DEFS_H

// --- Constants ---------------------------------------------------------------

#define BLIS1_NO_INTRINSICS  0
#define BLIS1_SSE_INTRINSICS 3

#ifdef FLA_ENABLE_WINDOWS_BUILD
#define restrict  __restrict
#endif

// --- boolean ---

#undef FALSE
#define FALSE 0

#undef TRUE
#define TRUE 1



// --- Functional macros -------------------------------------------------------

// --- Type-agnostic ---

// min, max, abs

#define bl1_min( a, b )  ( (a) < (b) ? (a) : (b) )
#define bl1_max( a, b )  ( (a) > (b) ? (a) : (b) )
#define bl1_abs( a )     ( (a) <= 0 ? -(a) : (a) )

// fmin, fmax, fabs

#define bl1_fmin( a, b ) bl1_min( a, b )
#define bl1_fmax( a, b ) bl1_max( a, b )
#define bl1_fabs( a )    ( (a) <= 0.0 ? -(a) : (a) )

// fminabs, fmaxabs
#define bl1_fminabs( a, b ) \
\
    bl1_fmin( bl1_fabs( a ), \
              bl1_fabs( b ) )

#define bl1_fmaxabs( a, b ) \
\
    bl1_fmax( bl1_fabs( a ), \
              bl1_fabs( b ) )

// --- Type-dependent ---

// --- neg1 ---

// void bl1_sneg1( float* x );
#define bl1_sneg1( x ) \
*(x)     *= -1.0F;

// void bl1_dneg1( double* x );
#define bl1_dneg1( x ) \
*(x)     *= -1.0;

// void bl1_cneg1( scomplex* x );
#define bl1_cneg1( x ) \
(x)->real *= -1.0F; \
(x)->imag *= -1.0F;

// void bl1_zneg1( dcomplex* x );
#define bl1_zneg1( x ) \
(x)->real *= -1.0; \
(x)->imag *= -1.0;

// --- neg2 ---

// void bl1_sneg2( float* x, float* y );
#define bl1_sneg2( x, y ) \
*(y)      = -1.0F * *(x);

// void bl1_dneg2( double* x, double* y );
#define bl1_dneg2( x, y ) \
*(y)      = -1.0  * *(x);

// void bl1_cneg2( scomplex* x, scomplex* y );
#define bl1_cneg2( x, y ) \
(y)->real = -1.0F * (x)->real; \
(y)->imag = -1.0F * (x)->imag;

// void bl1_zneg2( dcomplex* x, dcomplex* y );
#define bl1_zneg2( x, y ) \
(y)->real = -1.0  * (x)->real; \
(y)->imag = -1.0  * (x)->imag;

// --- sqrte ---

// void bl1_ssqrte( float* alpha, int* error );
#define bl1_ssqrte( alpha, error ) \
if ( *(alpha)      <= 0.0F || isnan( *(alpha) ) ) {  *(error) = FLA_FAILURE; } \
else { *(alpha)      =  ( float ) sqrt( *(alpha) );  *(error) = FLA_SUCCESS; }

// void bl1_dsqrte( double* alpha, int* error );
#define bl1_dsqrte( alpha, error ) \
if ( *(alpha)      <= 0.0 || isnan( *(alpha) ) ) {   *(error) = FLA_FAILURE; } \
else { *(alpha)      = ( double ) sqrt( *(alpha) );  *(error) = FLA_SUCCESS; }

// void bl1_csqrte( scomplex* alpha, int* error );
#define bl1_csqrte( alpha, error ) \
if ( (alpha)->real <= 0.0F || isnan( (alpha)->real) ) \
{ (alpha)->imag = 0.0F; *(error) = FLA_FAILURE; } \
else { \
  (alpha)->real =  ( float ) sqrt( (alpha)->real ); \
  (alpha)->imag = 0.0F; *(error) = FLA_SUCCESS; \
}

// void bl1_zsqrte( dcomplex* alpha, int* error );
#define bl1_zsqrte( alpha, error ) \
if ( (alpha)->real <= 0.0 || isnan( (alpha)->real) )  \
{ (alpha)->imag = 0.0; *(error) = FLA_FAILURE; } \
else { \
  (alpha)->real = ( double ) sqrt( (alpha)->real ); \
  (alpha)->imag = 0.0;  *(error) = FLA_SUCCESS; \
}

// --- absval2 ---

// void bl1_sabsval2( float* alpha, float* absval );
#define bl1_sabsval2( alpha, absval ) \
*(absval) = ( float ) fabs( ( double ) *(alpha) );

// void bl1_dabsval2( double* alpha, double* absval );
#define bl1_dabsval2( alpha, absval ) \
*(absval) = fabs( *(alpha) );

// void bl1_cabsval2( scomplex* x, scomplex* a );
#define bl1_cabsval2( x, a ) \
{ \
	float  s   = bl1_fmaxabs( (x)->real, (x)->imag ); \
	float  mag = sqrtf( s ) * \
	             sqrtf( ( (x)->real / s ) * (x)->real + \
	                    ( (x)->imag / s ) * (x)->imag ); \
	(a)->real   = mag; \
	(a)->imag   = 0.0F; \
}

// void bl1_csabsval2( scomplex* x, float* a );
#define bl1_csabsval2( x, a ) \
{ \
	float  s   = bl1_fmaxabs( (x)->real, (x)->imag ); \
	float  mag = sqrtf( s ) * \
	             sqrtf( ( (x)->real / s ) * (x)->real + \
	                    ( (x)->imag / s ) * (x)->imag ); \
	*(a)       = mag; \
}

// void bl1_zabsval2( dcomplex* x, dcomplex* a );
#define bl1_zabsval2( x, a ) \
{ \
	double s   = bl1_fmaxabs( (x)->real, (x)->imag ); \
	double mag = sqrt( s ) * \
	             sqrt( ( (x)->real / s ) * (x)->real + \
	                   ( (x)->imag / s ) * (x)->imag ); \
	(a)->real   = mag; \
	(a)->imag   = 0.0; \
}

// void bl1_zdabsval2( dcomplex* x, double* a );
#define bl1_zdabsval2( x, a ) \
{ \
	double s   = bl1_fmaxabs( (x)->real, (x)->imag ); \
	double mag = sqrt( s ) * \
	             sqrt( ( (x)->real / s ) * (x)->real + \
	                   ( (x)->imag / s ) * (x)->imag ); \
	*(a)       = mag; \
}


// --- absqr ---

// void bl1_sabsqr( float* alpha );
#define bl1_sabsqr( alpha ) \
*(alpha) = *(alpha) * *(alpha);

// void bl1_dabsqr( double* alpha );
#define bl1_dabsqr( alpha ) \
*(alpha) = *(alpha) * *(alpha);

// void bl1_cabsqr( scomplex* alpha );
#define bl1_cabsqr( alpha ) \
(alpha)->real = (alpha)->real * (alpha)->real + (alpha)->imag * (alpha)->imag; \
(alpha)->imag = 0.0F;

// void bl1_zabsqr( dcomplex* alpha );
#define bl1_zabsqr( alpha ) \
(alpha)->real = (alpha)->real * (alpha)->real + (alpha)->imag * (alpha)->imag; \
(alpha)->imag = 0.0;

// --- invscals ---

// void bl1_sinvscals( float* a, float* y );
#define bl1_sinvscals( a, y ) \
*(y) = *(y) / *(a);

// void bl1_dinvscals( double* a, double* y );
#define bl1_dinvscals( a, y ) \
*(y) = *(y) / *(a);

// void bl1_csinvscals( float* a, scomplex* y );
#define bl1_csinvscals( a, y ) \
{ \
(y)->real = (y)->real / *(a); \
(y)->imag = (y)->imag / *(a); \
}

// void bl1_cinvscals( scomplex* a, scomplex* y );
#define bl1_cinvscals( a, y ) \
{ \
	float  s     = bl1_fmaxabs( (a)->real, (a)->imag ); \
	float  ar_s  = (a)->real / s; \
	float  ai_s  = (a)->imag / s; \
	float  yrt   = (y)->real; \
	float  temp  = ( ar_s * (a)->real + ai_s * (a)->imag ); \
	(y)->real    = ( (yrt)     * ar_s + (y)->imag * ai_s ) / temp; \
	(y)->imag    = ( (y)->imag * ar_s - (yrt)     * ai_s ) / temp; \
}

// void bl1_zdinvscals( double* a, dcomplex* y );
#define bl1_zdinvscals( a, y ) \
{ \
(y)->real = (y)->real / *(a); \
(y)->imag = (y)->imag / *(a); \
}

// void bl1_zinvscals( dcomplex* a, dcomplex* y );
#define bl1_zinvscals( a, y ) \
{ \
	double s     = bl1_fmaxabs( (a)->real, (a)->imag ); \
	double ar_s  = (a)->real / s; \
	double ai_s  = (a)->imag / s; \
	double yrt   = (y)->real; \
	double temp  = ( ar_s * (a)->real + ai_s * (a)->imag ); \
	(y)->real    = ( (yrt)     * ar_s + (y)->imag * ai_s ) / temp; \
	(y)->imag    = ( (y)->imag * ar_s - (yrt)     * ai_s ) / temp; \
}

// --- div3 ---

// void bl1_sdiv3( float* x, float* y, float* a );
#define bl1_sdiv3( x, y, a ) \
*(a) = *(x) / *(y);

// void bl1_ddiv3( double* x, double* y, double* a );
#define bl1_ddiv3( x, y, a ) \
*(a) = *(x) / *(y);

// void bl1_cdiv3( scomplex* x, scomplex* y, scomplex* a );
// a = x / y;
#define bl1_cdiv3( x, y, a ) \
{ \
	*a = *x; \
	bl1_cinvscals( y, a ); \
}

// void bl1_zdiv3( dcomplex* x, dcomplex* y, dcomplex* a );
#define bl1_zdiv3( x, y, a ) \
{ \
	*a = *x; \
	bl1_zinvscals( y, a ); \
}

// --- add3 ---

// void bl1_sadd3( float* x, float* y, float* a );
#define bl1_sadd3( x, y, a ) \
*(a) = *(x) + *(y);

// void bl1_dadd3( double* x, double* y, double* a );
#define bl1_dadd3( x, y, a ) \
*(a) = *(x) + *(y);

// void bl1_cadd3( scomplex* x, scomplex* y, scomplex* a );
#define bl1_cadd3( x, y, a ) \
{ \
(a)->real = (x)->real + (y)->real; \
(a)->imag = (x)->imag + (y)->imag; \
}

// void bl1_zadd3( dcomplex* x, dcomplex* y, dcomplex* a );
#define bl1_zadd3( x, y, a ) \
{ \
(a)->real = (x)->real + (y)->real; \
(a)->imag = (x)->imag + (y)->imag; \
}

// --- copys ---

// void bl1_scopys( conj1_t conj, float* x, float* y );
#define bl1_scopys( conj, x, y ) \
*(y) = *(x);

// void bl1_dcopys( conj1_t conj, double* x, double* y );
#define bl1_dcopys( conj, x, y ) \
*(y) = *(x);

// void bl1_ccopys( conj1_t conj, scomplex* x, scomplex* y );
#define bl1_ccopys( conj, x, y ) \
*(y) = *(x); \
if ( bl1_is_conj( conj ) ) (y)->imag *= -1.0F;

// void bl1_zcopys( conj1_t conj, dcomplex* x, dcomplex* y );
#define bl1_zcopys( conj, x, y ) \
*(y) = *(x); \
if ( bl1_is_conj( conj ) ) (y)->imag *= -1.0;

// --- scals ---

// void bl1_sscals( float* a, float* y );
#define bl1_sscals( a, y ) \
*(y) = *(a) * *(y);

// void bl1_dscals( double* a, double* y );
#define bl1_dscals( a, y ) \
*(y) = *(a) * *(y);

// void bl1_csscals( float* a, scomplex* y );
#define bl1_csscals( a, y ) \
{ \
(y)->real = *(a) * (y)->real; \
(y)->imag = *(a) * (y)->imag; \
}

// void bl1_cscals( scomplex* a, scomplex* y );
#define bl1_cscals( a, y ) \
{ \
float tempr = (a)->real * (y)->real - (a)->imag * (y)->imag; \
float tempi = (a)->imag * (y)->real + (a)->real * (y)->imag; \
(y)->real = tempr; \
(y)->imag = tempi; \
}

// void bl1_zdscals( double* a, dcomplex* y );
#define bl1_zdscals( a, y ) \
{ \
(y)->real = *(a) * (y)->real; \
(y)->imag = *(a) * (y)->imag; \
}

// void bl1_zscals( dcomplex* a, dcomplex* y );
#define bl1_zscals( a, y ) \
{ \
double tempr = (a)->real * (y)->real - (a)->imag * (y)->imag; \
double tempi = (a)->imag * (y)->real + (a)->real * (y)->imag; \
(y)->real = tempr; \
(y)->imag = tempi; \
}

// --- mult3 ---

// void bl1_smult3( float* x, float* y, float* a );
#define bl1_smult3( x, y, a ) \
*(a) = *(x) * *(y);

// void bl1_dmult3( double* x, double* y, double* a );
#define bl1_dmult3( x, y, a ) \
*(a) = *(x) * *(y);

// void bl1_cmult3( scomplex* x, scomplex* y, scomplex* a );
#define bl1_cmult3( x, y, a ) \
{ \
float tempr = (x)->real * (y)->real - (x)->imag * (y)->imag; \
float tempi = (x)->imag * (y)->real + (x)->real * (y)->imag; \
(a)->real = tempr; \
(a)->imag = tempi; \
}

// void bl1_zmult3( dcomplex* x, dcomplex* y, dcomplex* a );
#define bl1_zmult3( x, y, a ) \
{ \
double tempr = (x)->real * (y)->real - (x)->imag * (y)->imag; \
double tempi = (x)->imag * (y)->real + (x)->real * (y)->imag; \
(a)->real = tempr; \
(a)->imag = tempi; \
}

// --- mult4 ---

// void bl1_smult4( float* alpha, float* x, float* y1, float* y2 );
#define bl1_smult4( alpha, x, y1, y2 ) \
*(y2) = *(y1) + *(alpha) * *(x);

// void bl1_dmult4( double* alpha, double* x, double* y1, double* y2 );
#define bl1_dmult4( alpha, x, y1, y2 ) \
*(y2) = *(y1) + *(alpha) * *(x);

// void bl1_cmult4( scomplex* alpha, scomplex* x, scomplex* y1, scomplex* y2 );
#define bl1_cmult4( alpha, x, y1, y2 ) \
{ \
(y2)->real = (y1)->real + (alpha)->real * (x)->real - (alpha)->imag * (x)->imag; \
(y2)->imag = (y1)->imag + (alpha)->imag * (x)->real + (alpha)->real * (x)->imag; \
}

// void bl1_zmult4( dcomplex* alpha, dcomplex* x, dcomplex* y1, dcomplex* y2 );
#define bl1_zmult4( alpha, x, y1, y2 ) \
{ \
(y2)->real = (y1)->real + (alpha)->real * (x)->real - (alpha)->imag * (x)->imag; \
(y2)->imag = (y1)->imag + (alpha)->imag * (x)->real + (alpha)->real * (x)->imag; \
}

// --- conjs ---

// void bl1_sconjs( float* a );
#define bl1_sconjs( a ) \
;

// void bl1_dconjs( double* a );
#define bl1_dconjs( a ) \
;

// void bl1_cconjs( scomplex* a );
#define bl1_cconjs( a ) \
(a)->imag *= -1.0F;

// void bl1_zconjs( dcomplex* a );
#define bl1_zconjs( a ) \
(a)->imag *= -1.0;

// --- copyconj ---

// void bl1_scopyconj( float* x, float* y );
#define bl1_scopyconj( x, y ) \
*(y) = *(x);

// void bl1_dcopyconj( double* x, double* y );
#define bl1_dcopyconj( x, y ) \
*(y) = *(x);

// void bl1_ccopyconj( scomplex* x, scomplex* y );
#define bl1_ccopyconj( x, y ) \
(y)->real =         (x)->real; \
(y)->imag = -1.0F * (x)->imag;

// void bl1_zcopyconj( dcomplex* x, dcomplex* y );
#define bl1_zcopyconj( x, y ) \
(y)->real =         (x)->real; \
(y)->imag = -1.0  * (x)->imag;

// --- eq1 ---

// void bl1_seq1( float* alpha );
#define bl1_seq1( alpha ) \
  ( *alpha == 1.0F )

// void bl1_deq1( double* alpha );
#define bl1_deq1( alpha ) \
  ( *alpha == 1.0 )

// void bl1_ceq1( scomplex* alpha );
#define bl1_ceq1( alpha ) \
  ( (alpha)->real == 1.0F && (alpha)->imag == 0.0F )

// void bl1_zeq1( dcomplex* alpha );
#define bl1_zeq1( alpha ) \
  ( (alpha)->real == 1.0 && (alpha)->imag == 0.0 )

// --- Swapping/toggle macros --------------------------------------------------

// --- swap_pointers ---

#define bl1_sswap_pointers( a, b ) \
{ \
float* temp = (a); \
(a) = (b); \
(b) = temp; \
}

#define bl1_dswap_pointers( a, b ) \
{ \
double* temp = (a); \
(a) = (b); \
(b) = temp; \
}

#define bl1_cswap_pointers( a, b ) \
{ \
void* temp = (a); \
(a) = (b); \
(b) = temp; \
}

#define bl1_zswap_pointers( a, b ) \
{ \
void* temp = (a); \
(a) = (b); \
(b) = temp; \
}

// --- swap_ints ---

#define bl1_swap_ints( a, b ) \
{ \
int temp = (a); \
(a) = (b); \
(b) = temp; \
}

// --- swap_trans ---

#define bl1_swap_trans( a, b ) \
{ \
trans1_t temp = (a); \
(a) = (b); \
(b) = temp; \
}

// --- swap_conj ---

#define bl1_swap_conj( a, b ) \
{ \
conj1_t temp = (a); \
(a) = (b); \
(b) = temp; \
}

// --- toggle_side ---

#define bl1_toggle_side( side ) \
{ \
if ( bl1_is_left( side ) ) side = BLIS1_RIGHT; \
else                       side = BLIS1_LEFT; \
}

// --- toggle_uplo ---

#define bl1_toggle_uplo( uplo ) \
{ \
if ( bl1_is_lower( uplo ) ) uplo = BLIS1_UPPER_TRIANGULAR; \
else                        uplo = BLIS1_LOWER_TRIANGULAR; \
}

// --- toggle_trans ---
#define bl1_toggle_trans( trans ) \
{ \
if      ( bl1_is_notrans( trans ) )     trans = BLIS1_TRANSPOSE; \
else if ( bl1_is_trans( trans ) )       trans = BLIS1_NO_TRANSPOSE; \
else if ( bl1_is_conjnotrans( trans ) ) trans = BLIS1_CONJ_TRANSPOSE; \
else                                    trans = BLIS1_CONJ_NO_TRANSPOSE; \
}

// --- toggle_conjtrans ---
#define bl1_toggle_conjtrans( trans ) \
{ \
if      ( bl1_is_notrans( trans ) )     trans = BLIS1_CONJ_TRANSPOSE; \
else                                    trans = BLIS1_NO_TRANSPOSE; \
}

// --- toggle_conj ---

#define bl1_toggle_conj( conj ) \
{ \
if ( bl1_is_conj( conj ) ) conj = BLIS1_NO_CONJUGATE; \
else                       conj = BLIS1_CONJUGATE; \
}

#endif // #ifndef BLIS1_MACRO_DEFS_H
// end blis_macro_defs.h
// begin blis_type_defs.h


#ifndef BLIS1_TYPE_DEFS_H
#define BLIS1_TYPE_DEFS_H

#ifdef __cplusplus
// For C++, include stdint.h.
#include <stdint.h> // skipped
#elif __STDC_VERSION__ >= 199901L
// For C99 (or later), include stdint.h.
#include <stdint.h> // skipped
#else
// When stdint.h is not available, manually typedef the types we will use.
#ifdef _WIN32
typedef          __int32  int32_t;
typedef unsigned __int32 uint32_t;
typedef          __int64  int64_t;
typedef unsigned __int64 uint64_t;
#else
#error "Attempting to compile on pre-C99 system without stdint.h."
#endif
#endif

#if defined(FLA_ENABLE_ILP64)
typedef int64_t integer;
typedef uint64_t uinteger;
#else
typedef int integer;
typedef unsigned long uinteger;
#endif


// --- Basic type definitions -------------------------------------------------



#define BLIS1_TRANS_BEGIN 100
#define BLIS1_UPLO_BEGIN  200
#define BLIS1_SIDE_BEGIN  300
#define BLIS1_DIAG_BEGIN  400
#define BLIS1_CONJ_BEGIN  500

typedef enum
{
	BLIS1_NO_TRANSPOSE = BLIS1_TRANS_BEGIN,
	BLIS1_TRANSPOSE,
	BLIS1_CONJ_NO_TRANSPOSE,
	BLIS1_CONJ_TRANSPOSE
} trans1_t;

typedef enum
{
	BLIS1_LOWER_TRIANGULAR = BLIS1_UPLO_BEGIN,
	BLIS1_UPPER_TRIANGULAR
} uplo1_t;

typedef enum
{
	BLIS1_LEFT = BLIS1_SIDE_BEGIN,
	BLIS1_RIGHT
} side1_t;

typedef enum
{
	BLIS1_NONUNIT_DIAG = BLIS1_DIAG_BEGIN,
	BLIS1_UNIT_DIAG,
	BLIS1_ZERO_DIAG
} diag1_t;

typedef enum
{
	BLIS1_NO_CONJUGATE = BLIS1_CONJ_BEGIN,
	BLIS1_CONJUGATE
} conj1_t;





// --- Intrinsic/assembly definitions ----------------------------------------





// Only define vector intrinsics types if they are not already provided by
// libflame.
#ifndef BLIS1_FROM_LIBFLAME

#if BLIS1_VECTOR_INTRINSIC_TYPE == BLIS1_SSE_INTRINSICS

#include "pmmintrin.h" // skipped
typedef union
{
    __m128d v; 
    double  d[2];
} v2df_t;
#endif

#endif


#endif // BLIS1_TYPE_DEFS_H
// end blis_type_defs.h

// begin blis_prototypes_util.h


// --- Utility-level BLAS-like prototypes --------------------------------------

// --- constant-generating functions ---

float    bl1_s2( void );
double   bl1_d2( void );
scomplex bl1_c2( void );
dcomplex bl1_z2( void );
float    bl1_s1( void );
double   bl1_d1( void );
scomplex bl1_c1( void );
dcomplex bl1_z1( void );
float    bl1_s1h( void );
double   bl1_d1h( void );
scomplex bl1_c1h( void );
dcomplex bl1_z1h( void );
float    bl1_s0( void );
double   bl1_d0( void );
scomplex bl1_c0( void );
dcomplex bl1_z0( void );
float    bl1_sm1h( void );
double   bl1_dm1h( void );
scomplex bl1_cm1h( void );
dcomplex bl1_zm1h( void );
float    bl1_sm1( void );
double   bl1_dm1( void );
scomplex bl1_cm1( void );
dcomplex bl1_zm1( void );
float    bl1_sm2( void );
double   bl1_dm2( void );
scomplex bl1_cm2( void );
dcomplex bl1_zm2( void );

// --- allocv ---

void*     bl1_vallocv( uinteger n_elem, uinteger elem_size );
integer*      bl1_iallocv( uinteger n_elem );
float*    bl1_sallocv( uinteger n_elem );
double*   bl1_dallocv( uinteger n_elem );
scomplex* bl1_callocv( uinteger n_elem );
dcomplex* bl1_zallocv( uinteger n_elem );

// --- allocm ---

void*     bl1_vallocm( uinteger m, uinteger n, uinteger elem_size );
integer*      bl1_iallocm( uinteger m, uinteger n );
float*    bl1_sallocm( uinteger m, uinteger n );
double*   bl1_dallocm( uinteger m, uinteger n );
scomplex* bl1_callocm( uinteger m, uinteger n );
dcomplex* bl1_zallocm( uinteger m, uinteger n );

// --- apdiagmv ---

void bl1_sapdiagmv( side1_t side, conj1_t conj, integer m, integer n, float*    x, integer incx, float*    a, integer a_rs, integer a_cs );
void bl1_dapdiagmv( side1_t side, conj1_t conj, integer m, integer n, double*   x, integer incx, double*   a, integer a_rs, integer a_cs );
void bl1_csapdiagmv( side1_t side, conj1_t conj, integer m, integer n, float*    x, integer incx, scomplex* a, integer a_rs, integer a_cs );
void bl1_capdiagmv( side1_t side, conj1_t conj, integer m, integer n, scomplex* x, integer incx, scomplex* a, integer a_rs, integer a_cs );
void bl1_zdapdiagmv( side1_t side, conj1_t conj, integer m, integer n, double*   x, integer incx, dcomplex* a, integer a_rs, integer a_cs );
void bl1_zapdiagmv( side1_t side, conj1_t conj, integer m, integer n, dcomplex* x, integer incx, dcomplex* a, integer a_rs, integer a_cs );

// --- create_contigm ---

void bl1_screate_contigm( integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dcreate_contigm( integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_ccreate_contigm( integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zcreate_contigm( integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- create_contigmt ---

void bl1_screate_contigmt( trans1_t trans_dims, integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dcreate_contigmt( trans1_t trans_dims, integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_ccreate_contigmt( trans1_t trans_dims, integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zcreate_contigmt( trans1_t trans_dims, integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- create_contigmr ---

void bl1_screate_contigmr( uplo1_t uplo, integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dcreate_contigmr( uplo1_t uplo, integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_ccreate_contigmr( uplo1_t uplo, integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zcreate_contigmr( uplo1_t uplo, integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- create_contigmsr ---

void bl1_screate_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dcreate_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_ccreate_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zcreate_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- free_contigm ---

void bl1_sfree_contigm( float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dfree_contigm( double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_cfree_contigm( scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zfree_contigm( dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- free_saved_contigm ---

void bl1_sfree_saved_contigm( integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dfree_saved_contigm( integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_cfree_saved_contigm( integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zfree_saved_contigm( integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- free_saved_contigmr ---

void bl1_sfree_saved_contigmr( uplo1_t uplo, integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dfree_saved_contigmr( uplo1_t uplo, integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_cfree_saved_contigmr( uplo1_t uplo, integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zfree_saved_contigmr( uplo1_t uplo, integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- free_saved_contigmsr ---

void bl1_sfree_saved_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, float*    a_save, integer a_rs_save, integer a_cs_save, float**    a, integer* a_rs, integer* a_cs );
void bl1_dfree_saved_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, double*   a_save, integer a_rs_save, integer a_cs_save, double**   a, integer* a_rs, integer* a_cs );
void bl1_cfree_saved_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, scomplex* a_save, integer a_rs_save, integer a_cs_save, scomplex** a, integer* a_rs, integer* a_cs );
void bl1_zfree_saved_contigmsr( side1_t side, uplo1_t uplo, integer m, integer n, dcomplex* a_save, integer a_rs_save, integer a_cs_save, dcomplex** a, integer* a_rs, integer* a_cs );

// --- ewinvscalv ---

void bl1_sewinvscalv( conj1_t conj, integer n, float*    x, integer incx, float*    y, integer incy );
void bl1_dewinvscalv( conj1_t conj, integer n, double*   x, integer incx, double*   y, integer incy );
void bl1_csewinvscalv( conj1_t conj, integer n, float*    x, integer incx, scomplex* y, integer incy );
void bl1_cewinvscalv( conj1_t conj, integer n, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zdewinvscalv( conj1_t conj, integer n, double*   x, integer incx, dcomplex* y, integer incy );
void bl1_zewinvscalv( conj1_t conj, integer n, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- ewscalmt ---

void bl1_sewinvscalmt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dewinvscalmt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_csewinvscalmt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_cewinvscalmt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zdewinvscalmt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zewinvscalmt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- ewscalv ---

void bl1_sewscalv( conj1_t conj, integer n, float*    x, integer incx, float*    y, integer incy );
void bl1_dewscalv( conj1_t conj, integer n, double*   x, integer incx, double*   y, integer incy );
void bl1_csewscalv( conj1_t conj, integer n, float*    x, integer incx, scomplex* y, integer incy );
void bl1_cewscalv( conj1_t conj, integer n, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zdewscalv( conj1_t conj, integer n, double*   x, integer incx, dcomplex* y, integer incy );
void bl1_zewscalv( conj1_t conj, integer n, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- ewscalmt ---

void bl1_sewscalmt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dewscalmt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_csewscalmt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_cewscalmt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zdewscalmt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zewscalmt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- free ---

void bl1_vfree( void*     p );
void bl1_ifree( integer*      p );
void bl1_sfree( float*    p );
void bl1_dfree( double*   p );
void bl1_cfree( scomplex* p );
void bl1_zfree( dcomplex* p );

// --- inverts ---

void bl1_sinverts( conj1_t conj, float*    alpha );
void bl1_dinverts( conj1_t conj, double*   alpha );
void bl1_cinverts( conj1_t conj, scomplex* alpha );
void bl1_zinverts( conj1_t conj, dcomplex* alpha );

// --- invert2s ---

void bl1_sinvert2s( conj1_t conj, float*    alpha, float*    beta );
void bl1_dinvert2s( conj1_t conj, double*   alpha, double*   beta );
void bl1_cinvert2s( conj1_t conj, scomplex* alpha, scomplex* beta );
void bl1_zinvert2s( conj1_t conj, dcomplex* alpha, dcomplex* beta );

// --- invertv ---

void bl1_sinvertv( conj1_t conj, integer n, float*    x, integer incx );
void bl1_dinvertv( conj1_t conj, integer n, double*   x, integer incx );
void bl1_cinvertv( conj1_t conj, integer n, scomplex* x, integer incx );
void bl1_zinvertv( conj1_t conj, integer n, dcomplex* x, integer incx );

// --- ident ---

void bl1_sident( integer m, float*    a, integer a_rs, integer a_cs );
void bl1_dident( integer m, double*   a, integer a_rs, integer a_cs );
void bl1_cident( integer m, scomplex* a, integer a_rs, integer a_cs );
void bl1_zident( integer m, dcomplex* a, integer a_rs, integer a_cs );

// --- maxabsv ---

void bl1_smaxabsv( integer n, float*    x, integer incx, float*  maxabs );
void bl1_dmaxabsv( integer n, double*   x, integer incx, double* maxabs );
void bl1_cmaxabsv( integer n, scomplex* x, integer incx, float*  maxabs );
void bl1_zmaxabsv( integer n, dcomplex* x, integer incx, double* maxabs );

// --- maxabsm ---

void bl1_smaxabsm( integer m, integer n, float*    a, integer a_rs, integer a_cs, float*  maxabs );
void bl1_dmaxabsm( integer m, integer n, double*   a, integer a_rs, integer a_cs, double* maxabs );
void bl1_cmaxabsm( integer m, integer n, scomplex* a, integer a_rs, integer a_cs, float*  maxabs );
void bl1_zmaxabsm( integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, double* maxabs );

// --- maxabsmr ---

void bl1_smaxabsmr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*  maxabs );
void bl1_dmaxabsmr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs, double* maxabs );
void bl1_cmaxabsmr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, float*  maxabs );
void bl1_zmaxabsmr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, double* maxabs );

// --- rands ---

void bl1_srands( float*    alpha );
void bl1_drands( double*   alpha );
void bl1_crands( scomplex* alpha );
void bl1_zrands( dcomplex* alpha );

// --- randv ---

void bl1_srandv( integer n, float*    x, integer incx );
void bl1_drandv( integer n, double*   x, integer incx );
void bl1_crandv( integer n, scomplex* x, integer incx );
void bl1_zrandv( integer n, dcomplex* x, integer incx );

// --- randm ---

void bl1_srandm( integer m, integer n, float*    a, integer a_rs, integer a_cs );
void bl1_drandm( integer m, integer n, double*   a, integer a_rs, integer a_cs );
void bl1_crandm( integer m, integer n, scomplex* a, integer a_rs, integer a_cs );
void bl1_zrandm( integer m, integer n, dcomplex* a, integer a_rs, integer a_cs );

// --- randmr ---
void bl1_srandmr( uplo1_t uplo, diag1_t diag, integer m, integer n, float*    a, integer a_rs, integer a_cs );
void bl1_drandmr( uplo1_t uplo, diag1_t diag, integer m, integer n, double*   a, integer a_rs, integer a_cs );
void bl1_crandmr( uplo1_t uplo, diag1_t diag, integer m, integer n, scomplex* a, integer a_rs, integer a_cs );
void bl1_zrandmr( uplo1_t uplo, diag1_t diag, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs );

// --- set_contig_strides ---

void bl1_set_contig_strides( integer m, integer n, integer* rs, integer* cs );

// --- set_dims_with_side ---

void bl1_set_dim_with_side( side1_t side, integer m, integer n, integer* dim_new );

// --- set_dims_with_trans ---

void bl1_set_dims_with_trans( trans1_t trans, integer m, integer n, integer* m_new, integer* n_new );

// --- setv ---

void bl1_isetv( integer m, integer*      sigma, integer*      x, integer incx );
void bl1_ssetv( integer m, float*    sigma, float*    x, integer incx );
void bl1_dsetv( integer m, double*   sigma, double*   x, integer incx );
void bl1_csetv( integer m, scomplex* sigma, scomplex* x, integer incx );
void bl1_zsetv( integer m, dcomplex* sigma, dcomplex* x, integer incx );

// --- setm ---

void bl1_isetm( integer m, integer n, integer*      sigma, integer*      a, integer a_rs, integer a_cs );
void bl1_ssetm( integer m, integer n, float*    sigma, float*    a, integer a_rs, integer a_cs );
void bl1_dsetm( integer m, integer n, double*   sigma, double*   a, integer a_rs, integer a_cs );
void bl1_csetm( integer m, integer n, scomplex* sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zsetm( integer m, integer n, dcomplex* sigma, dcomplex* a, integer a_rs, integer a_cs );

// --- setmr ---

void bl1_ssetmr( uplo1_t uplo, integer m, integer n, float*    sigma, float*    a, integer a_rs, integer a_cs );
void bl1_dsetmr( uplo1_t uplo, integer m, integer n, double*   sigma, double*   a, integer a_rs, integer a_cs );
void bl1_csetmr( uplo1_t uplo, integer m, integer n, scomplex* sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zsetmr( uplo1_t uplo, integer m, integer n, dcomplex* sigma, dcomplex* a, integer a_rs, integer a_cs );

// --- setdiag ---

void bl1_isetdiag( integer offset, integer m, integer n, integer*      sigma, integer*      a, integer a_rs, integer a_cs );
void bl1_ssetdiag( integer offset, integer m, integer n, float*    sigma, float*    a, integer a_rs, integer a_cs );
void bl1_dsetdiag( integer offset, integer m, integer n, double*   sigma, double*   a, integer a_rs, integer a_cs );
void bl1_csetdiag( integer offset, integer m, integer n, scomplex* sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zsetdiag( integer offset, integer m, integer n, dcomplex* sigma, dcomplex* a, integer a_rs, integer a_cs );

// --- scalediag ---

void bl1_sscalediag( conj1_t conj, integer offset, integer m, integer n, float*    sigma, float*    a, integer a_rs, integer a_cs );
void bl1_dscalediag( conj1_t conj, integer offset, integer m, integer n, double*   sigma, double*   a, integer a_rs, integer a_cs );
void bl1_cscalediag( conj1_t conj, integer offset, integer m, integer n, scomplex* sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zscalediag( conj1_t conj, integer offset, integer m, integer n, dcomplex* sigma, dcomplex* a, integer a_rs, integer a_cs );
void bl1_csscalediag( conj1_t conj, integer offset, integer m, integer n, float*    sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zdscalediag( conj1_t conj, integer offset, integer m, integer n, double*   sigma, dcomplex* a, integer a_rs, integer a_cs );

// --- shiftdiag ---

void bl1_sshiftdiag( conj1_t conj, integer offset, integer m, integer n, float*    sigma, float*    a, integer a_rs, integer a_cs );
void bl1_dshiftdiag( conj1_t conj, integer offset, integer m, integer n, double*   sigma, double*   a, integer a_rs, integer a_cs );
void bl1_cshiftdiag( conj1_t conj, integer offset, integer m, integer n, scomplex* sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zshiftdiag( conj1_t conj, integer offset, integer m, integer n, dcomplex* sigma, dcomplex* a, integer a_rs, integer a_cs );
void bl1_csshiftdiag( conj1_t conj, integer offset, integer m, integer n, float*    sigma, scomplex* a, integer a_rs, integer a_cs );
void bl1_zdshiftdiag( conj1_t conj, integer offset, integer m, integer n, double*   sigma, dcomplex* a, integer a_rs, integer a_cs );

// --- symmize ---

void bl1_ssymmize( conj1_t conj, uplo1_t uplo, integer m, float*    a, integer a_rs, integer a_cs );
void bl1_dsymmize( conj1_t conj, uplo1_t uplo, integer m, double*   a, integer a_rs, integer a_cs );
void bl1_csymmize( conj1_t conj, uplo1_t uplo, integer m, scomplex* a, integer a_rs, integer a_cs );
void bl1_zsymmize( conj1_t conj, uplo1_t uplo, integer m, dcomplex* a, integer a_rs, integer a_cs );

// end blis_prototypes_util.h
// begin blis_prototypes_query.h


// --- Query routine prototypes ------------------------------------------------

// --- trans ---

int bl1_does_trans( trans1_t trans );
int bl1_does_notrans( trans1_t trans );
int bl1_does_conj( trans1_t trans );

int bl1_is_notrans( trans1_t trans );
int bl1_is_trans( trans1_t trans );
int bl1_is_conjnotrans( trans1_t trans );
int bl1_is_conjtrans( trans1_t trans );

// --- conj ---

int bl1_is_noconj( conj1_t conj );
int bl1_is_conj( conj1_t conj );

// --- uplo ---

int bl1_is_lower( uplo1_t uplo );
int bl1_is_upper( uplo1_t uplo );

// --- side ---

int bl1_is_left( side1_t side );
int bl1_is_right( side1_t side );

// --- diag ---

int bl1_is_nonunit_diag( diag1_t diag );
int bl1_is_unit_diag( diag1_t diag );
int bl1_is_zero_diag( diag1_t diag );

// --- mapping-related ---

conj1_t bl1_proj_trans1_to_conj( trans1_t trans );

// --- storage-related ---

void bl1_check_storage_3m( integer a_rs, integer a_cs, integer b_rs, integer b_cs, integer c_rs, integer c_cs );
void bl1_check_storage_2m( integer a_rs, integer a_cs, integer b_rs, integer b_cs );
int bl1_is_row_or_col_storage( integer rs, integer cs );
int bl1_is_row_storage( integer rs, integer cs );
int bl1_is_col_storage( integer rs, integer cs );
int bl1_is_gen_storage( integer rs, integer cs );
int bl1_is_vector( integer m, integer n );

// --- vector-related ---

int bl1_vector_dim( integer m, integer n );
int bl1_vector_inc( trans1_t trans, integer m, integer n, integer rs, integer cs );

// --- dimension-related ---

int bl1_zero_dim1( integer m );
int bl1_zero_dim2( integer m, integer n );
int bl1_zero_dim3( integer m, integer k, integer n );

// end blis_prototypes_query.h
// begin blis_prototypes_misc.h


// --- Abort prototypes --------------------------------------------------------

void bl1_abort( void );
void bl1_abort_msg( char* message );

// --- Parameter-mapping prototypes --------------------------------------------

void bl1_param_map_to_netlib_trans( trans1_t blis_trans, void* blas_trans );
void bl1_param_map_to_netlib_uplo(  uplo1_t  blis_uplo,  void* blas_uplo );
void bl1_param_map_to_netlib_side(  side1_t  blis_side,  void* blas_side );
void bl1_param_map_to_netlib_diag(  diag1_t  blis_diag,  void* blas_diag );

// end blis_prototypes_misc.h

 
// begin blis_prototypes_level1.h


// --- Level-1 BLAS-like prototypes --------------------------------------------

// --- amax ---

void bl1_samax( integer n, float*    x, integer incx, integer* index );
void bl1_damax( integer n, double*   x, integer incx, integer* index );
void bl1_camax( integer n, scomplex* x, integer incx, integer* index );
void bl1_zamax( integer n, dcomplex* x, integer incx, integer* index );

// --- asum ---

void bl1_sasum( integer n, float*    x, integer incx, float*  norm );
void bl1_dasum( integer n, double*   x, integer incx, double* norm );
void bl1_casum( integer n, scomplex* x, integer incx, float*  norm );
void bl1_zasum( integer n, dcomplex* x, integer incx, double* norm );

// --- axpy ---

void bl1_saxpy( integer n, float*    alpha, float*    x, integer incx, float*    y, integer incy );
void bl1_daxpy( integer n, double*   alpha, double*   x, integer incx, double*   y, integer incy );
void bl1_caxpy( integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zaxpy( integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- axpyv ---

void bl1_saxpyv( conj1_t conj, integer n, float*    alpha, float*    x, integer incx, float*    y, integer incy );
void bl1_daxpyv( conj1_t conj, integer n, double*   alpha, double*   x, integer incx, double*   y, integer incy );
void bl1_caxpyv( conj1_t conj, integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zaxpyv( conj1_t conj, integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- axpymt ---

void bl1_saxpymt( trans1_t trans, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_daxpymt( trans1_t trans, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_caxpymt( trans1_t trans, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zaxpymt( trans1_t trans, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- axpymrt ---

void bl1_saxpymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_daxpymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_caxpymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zaxpymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- axpysv ---

void bl1_saxpysv( integer n, float*    alpha0, float*    alpha1, float*    x, integer incx, float*    beta, float*    y, integer incy );
void bl1_daxpysv( integer n, double*   alpha0, double*   alpha1, double*   x, integer incx, double*   beta, double*   y, integer incy );
void bl1_caxpysv( integer n, scomplex* alpha0, scomplex* alpha1, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zaxpysv( integer n, dcomplex* alpha0, dcomplex* alpha1, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

// --- axpysmt ---

void bl1_saxpysmt( trans1_t trans, integer m, integer n, float*    alpha0, float*    alpha1, float*    a, integer a_rs, integer a_cs, float*    beta, float*    b, integer b_rs, integer b_cs );
void bl1_daxpysmt( trans1_t trans, integer m, integer n, double*   alpha0, double*   alpha1, double*   a, integer a_rs, integer a_cs, double*   beta, double*   b, integer b_rs, integer b_cs );
void bl1_caxpysmt( trans1_t trans, integer m, integer n, scomplex* alpha0, scomplex* alpha1, scomplex* a, integer a_rs, integer a_cs, scomplex* beta, scomplex* b, integer b_rs, integer b_cs );
void bl1_zaxpysmt( trans1_t trans, integer m, integer n, dcomplex* alpha0, dcomplex* alpha1, dcomplex* a, integer a_rs, integer a_cs, dcomplex* beta, dcomplex* b, integer b_rs, integer b_cs );

// --- conjv ---

void bl1_sconjv( integer m, float* x, integer incx );
void bl1_dconjv( integer m, double* x, integer incx );
void bl1_cconjv( integer m, scomplex* x, integer incx );
void bl1_zconjv( integer m, dcomplex* x, integer incx );

// --- conjm ---

void bl1_sconjm( integer m, integer n, float*    a, integer a_rs, integer a_cs );
void bl1_dconjm( integer m, integer n, double*   a, integer a_rs, integer a_cs );
void bl1_cconjm( integer m, integer n, scomplex* a, integer a_rs, integer a_cs );
void bl1_zconjm( integer m, integer n, dcomplex* a, integer a_rs, integer a_cs );

// --- conjmr ---

void bl1_sconjmr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs );
void bl1_dconjmr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs );
void bl1_cconjmr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs );
void bl1_zconjmr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs );

// --- copy ---

void bl1_scopy( integer m, float*    x, integer incx, float*    y, integer incy );
void bl1_dcopy( integer m, double*   x, integer incx, double*   y, integer incy );
void bl1_ccopy( integer m, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zcopy( integer m, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- copyv ---

void bl1_icopyv( conj1_t conj, integer m, integer*      x, integer incx, integer*      y, integer incy );
void bl1_scopyv( conj1_t conj, integer m, float*    x, integer incx, float*    y, integer incy );
void bl1_dcopyv( conj1_t conj, integer m, double*   x, integer incx, double*   y, integer incy );
void bl1_ccopyv( conj1_t conj, integer m, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zcopyv( conj1_t conj, integer m, dcomplex* x, integer incx, dcomplex* y, integer incy );

void bl1_sdcopyv( conj1_t conj, integer m, float*    x, integer incx, double*   y, integer incy );
void bl1_dscopyv( conj1_t conj, integer m, double*   x, integer incx, float*    y, integer incy );
void bl1_sccopyv( conj1_t conj, integer m, float*    x, integer incx, scomplex* y, integer incy );
void bl1_cscopyv( conj1_t conj, integer m, scomplex* x, integer incx, float*    y, integer incy );
void bl1_szcopyv( conj1_t conj, integer m, float*    x, integer incx, dcomplex* y, integer incy );
void bl1_zscopyv( conj1_t conj, integer m, dcomplex* x, integer incx, float*    y, integer incy );
void bl1_dccopyv( conj1_t conj, integer m, double*   x, integer incx, scomplex* y, integer incy );
void bl1_cdcopyv( conj1_t conj, integer m, scomplex* x, integer incx, double*   y, integer incy );
void bl1_dzcopyv( conj1_t conj, integer m, double*   x, integer incx, dcomplex* y, integer incy );
void bl1_zdcopyv( conj1_t conj, integer m, dcomplex* x, integer incx, double*   y, integer incy );
void bl1_czcopyv( conj1_t conj, integer m, scomplex* x, integer incx, dcomplex* y, integer incy );
void bl1_zccopyv( conj1_t conj, integer m, dcomplex* x, integer incx, scomplex* y, integer incy );

// --- copymr ---

void bl1_scopymr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dcopymr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_ccopymr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zcopymr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

void bl1_sscopymr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_sdcopymr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dscopymr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_sccopymr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_cscopymr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_szcopymr( uplo1_t uplo, integer m, integer n, float*    a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zscopymr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_ddcopymr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dccopymr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_cdcopymr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dzcopymr( uplo1_t uplo, integer m, integer n, double*   a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zdcopymr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_cccopymr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_czcopymr( uplo1_t uplo, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zccopymr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zzcopymr( uplo1_t uplo, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- copymrt ---

void bl1_scopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_ccopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

void bl1_sscopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_sdcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_sccopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_szcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_dscopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_ddcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dccopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_dzcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_cscopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_cdcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_cccopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_czcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zscopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_zdcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_zccopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zzcopymrt( uplo1_t uplo, trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- copymt ---

void bl1_icopymt( trans1_t trans, integer m, integer n, integer*      a, integer a_rs, integer a_cs, integer*      b, integer b_rs, integer b_cs );
void bl1_scopymt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dcopymt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_ccopymt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zcopymt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

void bl1_sscopymt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_sdcopymt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dscopymt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_sccopymt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_cscopymt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_szcopymt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zscopymt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_ddcopymt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dccopymt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_cdcopymt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_dzcopymt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zdcopymt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_cccopymt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_czcopymt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );
void bl1_zccopymt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zzcopymt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// --- dot ---

void bl1_cdot_in( conj1_t conj, integer n, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* rho );
void bl1_zdot_in( conj1_t conj, integer n, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* rho );

void bl1_sdot( conj1_t conj, integer n, float*    x, integer incx, float*    y, integer incy, float*    rho );
void bl1_ddot( conj1_t conj, integer n, double*   x, integer incx, double*   y, integer incy, double*   rho );
void bl1_cdot( conj1_t conj, integer n, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* rho );
void bl1_zdot( conj1_t conj, integer n, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* rho );

// --- dots ---

void bl1_sdots( conj1_t conj, integer n, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    beta, float*    rho );
void bl1_ddots( conj1_t conj, integer n, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   beta, double*   rho );
void bl1_cdots( conj1_t conj, integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* beta, scomplex* rho );
void bl1_zdots( conj1_t conj, integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* beta, dcomplex* rho );

// --- dot2s ---

void bl1_sdot2s( conj1_t conj, integer n, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    beta, float*    rho );
void bl1_ddot2s( conj1_t conj, integer n, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   beta, double*   rho );
void bl1_cdot2s( conj1_t conj, integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* beta, scomplex* rho );
void bl1_zdot2s( conj1_t conj, integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* beta, dcomplex* rho );

// --- fnorm ---

void bl1_sfnorm( integer m, integer n, float*    a, integer a_rs, integer a_cs, float*  norm );
void bl1_dfnorm( integer m, integer n, double*   a, integer a_rs, integer a_cs, double* norm );
void bl1_cfnorm( integer m, integer n, scomplex* a, integer a_rs, integer a_cs, float*  norm );
void bl1_zfnorm( integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, double* norm );

// --- invscalv ---

void bl1_sinvscalv(  conj1_t conj, integer n, float*    alpha, float*    x, integer incx );
void bl1_dinvscalv(  conj1_t conj, integer n, double*   alpha, double*   x, integer incx );
void bl1_csinvscalv( conj1_t conj, integer n, float*    alpha, scomplex* x, integer incx );
void bl1_cinvscalv(  conj1_t conj, integer n, scomplex* alpha, scomplex* x, integer incx );
void bl1_zdinvscalv( conj1_t conj, integer n, double*   alpha, dcomplex* x, integer incx );
void bl1_zinvscalv(  conj1_t conj, integer n, dcomplex* alpha, dcomplex* x, integer incx );

// --- invscalm ---

void bl1_sinvscalm(  conj1_t conj, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs );
void bl1_dinvscalm(  conj1_t conj, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs );
void bl1_csinvscalm( conj1_t conj, integer m, integer n, float*    alpha, scomplex* a, integer a_rs, integer a_cs );
void bl1_cinvscalm(  conj1_t conj, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs );
void bl1_zdinvscalm( conj1_t conj, integer m, integer n, double*   alpha, dcomplex* a, integer a_rs, integer a_cs );
void bl1_zinvscalm(  conj1_t conj, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs );

// --- nrm2 ---

void bl1_snrm2( integer n, float*    x, integer incx, float*  norm );
void bl1_dnrm2( integer n, double*   x, integer incx, double* norm );
void bl1_cnrm2( integer n, scomplex* x, integer incx, float*  norm );
void bl1_znrm2( integer n, dcomplex* x, integer incx, double* norm );

// --- scal ---

void bl1_sscal(  integer n, float*    alpha, float*    x, integer incx );
void bl1_dscal(  integer n, double*   alpha, double*   x, integer incx );
void bl1_csscal( integer n, float*    alpha, scomplex* x, integer incx );
void bl1_cscal(  integer n, scomplex* alpha, scomplex* x, integer incx );
void bl1_zdscal( integer n, double*   alpha, dcomplex* x, integer incx );
void bl1_zscal(  integer n, dcomplex* alpha, dcomplex* x, integer incx );

// --- scalv ---

void bl1_sscalv(  conj1_t conj, integer n, float*    alpha, float*    x, integer incx );
void bl1_dscalv(  conj1_t conj, integer n, double*   alpha, double*   x, integer incx );
void bl1_csscalv( conj1_t conj, integer n, float*    alpha, scomplex* x, integer incx );
void bl1_cscalv(  conj1_t conj, integer n, scomplex* alpha, scomplex* x, integer incx );
void bl1_zdscalv( conj1_t conj, integer n, double*   alpha, dcomplex* x, integer incx );
void bl1_zscalv(  conj1_t conj, integer n, dcomplex* alpha, dcomplex* x, integer incx );

// --- scalm ---

void bl1_sscalm(  conj1_t conj, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs );
void bl1_dscalm(  conj1_t conj, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs );
void bl1_csscalm( conj1_t conj, integer m, integer n, float*    alpha, scomplex* a, integer a_rs, integer a_cs );
void bl1_cscalm(  conj1_t conj, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs );
void bl1_zdscalm( conj1_t conj, integer m, integer n, double*   alpha, dcomplex* a, integer a_rs, integer a_cs );
void bl1_zscalm(  conj1_t conj, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs );

// --- scalmr ---

void bl1_sscalmr(  uplo1_t uplo, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs );
void bl1_dscalmr(  uplo1_t uplo, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs );
void bl1_csscalmr( uplo1_t uplo, integer m, integer n, float*    alpha, scomplex* a, integer a_rs, integer a_cs );
void bl1_cscalmr(  uplo1_t uplo, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs );
void bl1_zdscalmr( uplo1_t uplo, integer m, integer n, double*   alpha, dcomplex* a, integer a_rs, integer a_cs );
void bl1_zscalmr(  uplo1_t uplo, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs );

// --- swap ---

void bl1_sswap( integer n, float*    x, integer incx, float*    y, integer incy );
void bl1_dswap( integer n, double*   x, integer incx, double*   y, integer incy );
void bl1_cswap( integer n, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zswap( integer n, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- swapv ---

void bl1_sswapv( integer n, float*    x, integer incx, float*    y, integer incy );
void bl1_dswapv( integer n, double*   x, integer incx, double*   y, integer incy );
void bl1_cswapv( integer n, scomplex* x, integer incx, scomplex* y, integer incy );
void bl1_zswapv( integer n, dcomplex* x, integer incx, dcomplex* y, integer incy );

// --- swapmt ---

void bl1_sswapmt( trans1_t trans, integer m, integer n, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dswapmt( trans1_t trans, integer m, integer n, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_cswapmt( trans1_t trans, integer m, integer n, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_zswapmt( trans1_t trans, integer m, integer n, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

// end blis_prototypes_level1.h
// begin blis_prototypes_level2.h


// --- Level-2 BLAS-like prototypes --------------------------------------------

// --- gemv ---

void bl1_sgemv( trans1_t transa, conj1_t conjx, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    x, integer incx, float*    beta, float*    y, integer incy );
void bl1_dgemv( trans1_t transa, conj1_t conjx, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   x, integer incx, double*   beta, double*   y, integer incy );
void bl1_cgemv( trans1_t transa, conj1_t conjx, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zgemv( trans1_t transa, conj1_t conjx, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

void bl1_sgemv_blas( trans1_t transa, integer m, integer n, float*    alpha, float*    a, integer lda, float*    x, integer incx, float*    beta, float*    y, integer incy );
void bl1_dgemv_blas( trans1_t transa, integer m, integer n, double*   alpha, double*   a, integer lda, double*   x, integer incx, double*   beta, double*   y, integer incy );
void bl1_cgemv_blas( trans1_t transa, integer m, integer n, scomplex* alpha, scomplex* a, integer lda, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zgemv_blas( trans1_t transa, integer m, integer n, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

// --- ger ---

void bl1_sger( conj1_t conjx, conj1_t conjy, integer m, integer n, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    a, integer a_rs, integer a_cs );
void bl1_dger( conj1_t conjx, conj1_t conjy, integer m, integer n, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   a, integer a_rs, integer a_cs );
void bl1_cger( conj1_t conjx, conj1_t conjy, integer m, integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer a_rs, integer a_cs );
void bl1_zger( conj1_t conjx, conj1_t conjy, integer m, integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer a_rs, integer a_cs );

void bl1_sger_blas(  integer m, integer n, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    a, integer lda );
void bl1_dger_blas(  integer m, integer n, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   a, integer lda );
void bl1_cgerc_blas( integer m, integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer lda );
void bl1_cgeru_blas( integer m, integer n, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer lda );
void bl1_zgerc_blas( integer m, integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer lda );
void bl1_zgeru_blas( integer m, integer n, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer lda );

// --- hemv ---

void bl1_shemv( uplo1_t uplo, conj1_t conj, integer m, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    x, integer incx, float*    beta, float*    y, integer incy );
void bl1_dhemv( uplo1_t uplo, conj1_t conj, integer m, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   x, integer incx, double*   beta, double*   y, integer incy );
void bl1_chemv( uplo1_t uplo, conj1_t conj, integer m, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zhemv( uplo1_t uplo, conj1_t conj, integer m, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

void bl1_chemv_blas( uplo1_t uplo, integer m, scomplex* alpha, scomplex* a, integer lda, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zhemv_blas( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

// --- her ---

void bl1_sher( uplo1_t uplo, conj1_t conj, integer m, float*  alpha, float*    x, integer incx, float*    a, integer a_rs, integer a_cs );
void bl1_dher( uplo1_t uplo, conj1_t conj, integer m, double* alpha, double*   x, integer incx, double*   a, integer a_rs, integer a_cs );
void bl1_cher( uplo1_t uplo, conj1_t conj, integer m, float*  alpha, scomplex* x, integer incx, scomplex* a, integer a_rs, integer a_cs );
void bl1_zher( uplo1_t uplo, conj1_t conj, integer m, double* alpha, dcomplex* x, integer incx, dcomplex* a, integer a_rs, integer a_cs );

void bl1_cher_blas( uplo1_t uplo, integer m, float*  alpha, scomplex* x, integer incx, scomplex* a, integer lda );
void bl1_zher_blas( uplo1_t uplo, integer m, double* alpha, dcomplex* x, integer incx, dcomplex* a, integer lda );

// --- her2 ---

void bl1_sher2( uplo1_t uplo, conj1_t conj, integer m, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    a, integer a_rs, integer a_cs );
void bl1_dher2( uplo1_t uplo, conj1_t conj, integer m, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   a, integer a_rs, integer a_cs );
void bl1_cher2( uplo1_t uplo, conj1_t conj, integer m, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer a_rs, integer a_cs );
void bl1_zher2( uplo1_t uplo, conj1_t conj, integer m, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer a_rs, integer a_cs );

void bl1_cher2_blas( uplo1_t uplo, integer m, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer lda );
void bl1_zher2_blas( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer lda );

// --- symv ---

void bl1_ssymv( uplo1_t uplo, integer m, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    x, integer incx, float*    beta, float*    y, integer incy );
void bl1_dsymv( uplo1_t uplo, integer m, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   x, integer incx, double*   beta, double*   y, integer incy );
void bl1_csymv( uplo1_t uplo, integer m, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zsymv( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

void bl1_ssymv_blas( uplo1_t uplo, integer m, float*    alpha, float*    a, integer lda, float*    x, integer incx, float*    beta, float*    y, integer incy );
void bl1_dsymv_blas( uplo1_t uplo, integer m, double*   alpha, double*   a, integer lda, double*   x, integer incx, double*   beta, double*   y, integer incy );
void bl1_csymv_blas( uplo1_t uplo, integer m, scomplex* alpha, scomplex* a, integer lda, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_zsymv_blas( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

// --- syr ---

void bl1_ssyr( uplo1_t uplo, integer m, float*    alpha, float*    x, integer incx, float*    a, integer a_rs, integer a_cs );
void bl1_dsyr( uplo1_t uplo, integer m, double*   alpha, double*   x, integer incx, double*   a, integer a_rs, integer a_cs );
void bl1_csyr( uplo1_t uplo, integer m, scomplex* alpha, scomplex* x, integer incx, scomplex* a, integer a_rs, integer a_cs );
void bl1_zsyr( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* a, integer a_rs, integer a_cs );

void bl1_ssyr_blas( uplo1_t uplo, integer m, float*    alpha, float*    x, integer incx, float*    a, integer lda );
void bl1_dsyr_blas( uplo1_t uplo, integer m, double*   alpha, double*   x, integer incx, double*   a, integer lda );
void bl1_csyr_blas( uplo1_t uplo, integer m, scomplex* alpha, scomplex* x, integer incx, scomplex* a, integer lda );
void bl1_zsyr_blas( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* a, integer lda );

// --- syr2 ---

void bl1_ssyr2( uplo1_t uplo, integer m, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    a, integer a_rs, integer a_cs );
void bl1_dsyr2( uplo1_t uplo, integer m, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   a, integer a_rs, integer a_cs );
void bl1_csyr2( uplo1_t uplo, integer m, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer a_rs, integer a_cs );
void bl1_zsyr2( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer a_rs, integer a_cs );

void bl1_ssyr2_blas( uplo1_t uplo, integer m, float*    alpha, float*    x, integer incx, float*    y, integer incy, float*    a, integer lda );
void bl1_dsyr2_blas( uplo1_t uplo, integer m, double*   alpha, double*   x, integer incx, double*   y, integer incy, double*   a, integer lda );
void bl1_csyr2_blas( uplo1_t uplo, integer m, scomplex* alpha, scomplex* x, integer incx, scomplex* y, integer incy, scomplex* a, integer lda );
void bl1_zsyr2_blas( uplo1_t uplo, integer m, dcomplex* alpha, dcomplex* x, integer incx, dcomplex* y, integer incy, dcomplex* a, integer lda );

// --- trmv ---

void bl1_strmv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, float*    a, integer a_rs, integer a_cs, float*    x, integer incx );
void bl1_dtrmv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, double*   a, integer a_rs, integer a_cs, double*   x, integer incx );
void bl1_ctrmv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx );
void bl1_ztrmv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx );

void bl1_strmv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, float*    a, integer lda, float*    x, integer incx );
void bl1_dtrmv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, double*   a, integer lda, double*   x, integer incx );
void bl1_ctrmv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, scomplex* a, integer lda, scomplex* x, integer incx );
void bl1_ztrmv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, dcomplex* a, integer lda, dcomplex* x, integer incx );

// --- trsv ---

void bl1_strsv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, float*    a, integer a_rs, integer a_cs, float*    x, integer incx );
void bl1_dtrsv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, double*   a, integer a_rs, integer a_cs, double*   x, integer incx );
void bl1_ctrsv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx );
void bl1_ztrsv( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx );

void bl1_strsv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, float*    a, integer lda, float*    x, integer incx );
void bl1_dtrsv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, double*   a, integer lda, double*   x, integer incx );
void bl1_ctrsv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, scomplex* a, integer lda, scomplex* x, integer incx );
void bl1_ztrsv_blas( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, dcomplex* a, integer lda, dcomplex* x, integer incx );

// --- trmvsx ---

void bl1_strmvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, float* alpha, float* a, integer a_rs, integer a_cs, float* x, integer incx, float* beta, float* y, integer incy );
void bl1_dtrmvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, double* alpha, double* a, integer a_rs, integer a_cs, double* x, integer incx, double* beta, double* y, integer incy );
void bl1_ctrmvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_ztrmvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

// --- trsvsx ---

void bl1_strsvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, float* alpha, float* a, integer a_rs, integer a_cs, float* x, integer incx, float* beta, float* y, integer incy );
void bl1_dtrsvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, double* alpha, double* a, integer a_rs, integer a_cs, double* x, integer incx, double* beta, double* y, integer incy );
void bl1_ctrsvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* x, integer incx, scomplex* beta, scomplex* y, integer incy );
void bl1_ztrsvsx( uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* x, integer incx, dcomplex* beta, dcomplex* y, integer incy );

// end blis_prototypes_level2.h
// begin blis_prototypes_level3.h


// --- Level-3 BLAS-like prototypes --------------------------------------------

// --- gemm ---

void bl1_sgemm( trans1_t transa, trans1_t transb, integer m, integer k, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dgemm( trans1_t transa, trans1_t transb, integer m, integer k, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_cgemm( trans1_t transa, trans1_t transb, integer m, integer k, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zgemm( trans1_t transa, trans1_t transb, integer m, integer k, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_sgemm_blas( trans1_t transa, trans1_t transb, integer m, integer n, integer k, float*    alpha, float*    a, integer lda, float*    b, integer ldb, float*    beta, float*    c, integer ldc );
void bl1_dgemm_blas( trans1_t transa, trans1_t transb, integer m, integer n, integer k, double*   alpha, double*   a, integer lda, double*   b, integer ldb, double*   beta, double*   c, integer ldc );
void bl1_cgemm_blas( trans1_t transa, trans1_t transb, integer m, integer n, integer k, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb, scomplex* beta, scomplex* c, integer ldc );
void bl1_zgemm_blas( trans1_t transa, trans1_t transb, integer m, integer n, integer k, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb, dcomplex* beta, dcomplex* c, integer ldc );

// --- hemm ---

void bl1_shemm( side1_t side, uplo1_t uplo, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dhemm( side1_t side, uplo1_t uplo, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_chemm( side1_t side, uplo1_t uplo, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zhemm( side1_t side, uplo1_t uplo, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_chemm_blas( side1_t side, uplo1_t uplo, integer m, integer n, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb, scomplex* beta, scomplex* c, integer ldc );
void bl1_zhemm_blas( side1_t side, uplo1_t uplo, integer m, integer n, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb, dcomplex* beta, dcomplex* c, integer ldc );

// --- herk ---

void bl1_sherk( uplo1_t uplo, trans1_t trans, integer m, integer k, float*  alpha, float*    a, integer a_rs, integer a_cs, float*  beta, float*    c, integer c_rs, integer c_cs );
void bl1_dherk( uplo1_t uplo, trans1_t trans, integer m, integer k, double* alpha, double*   a, integer a_rs, integer a_cs, double* beta, double*   c, integer c_rs, integer c_cs );
void bl1_cherk( uplo1_t uplo, trans1_t trans, integer m, integer k, float*  alpha, scomplex* a, integer a_rs, integer a_cs, float*  beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zherk( uplo1_t uplo, trans1_t trans, integer m, integer k, double* alpha, dcomplex* a, integer a_rs, integer a_cs, double* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_cherk_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, float*  alpha, scomplex* a, integer lda, float*  beta, scomplex* c, integer ldc );
void bl1_zherk_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, double* alpha, dcomplex* a, integer lda, double* beta, dcomplex* c, integer ldc );

// --- her2k ---

void bl1_sher2k( uplo1_t uplo, trans1_t trans, integer m, integer k, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*  beta, float*    c, integer c_rs, integer c_cs );
void bl1_dher2k( uplo1_t uplo, trans1_t trans, integer m, integer k, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double* beta, double*   c, integer c_rs, integer c_cs );
void bl1_cher2k( uplo1_t uplo, trans1_t trans, integer m, integer k, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, float*  beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zher2k( uplo1_t uplo, trans1_t trans, integer m, integer k, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, double* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_cher2k_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb, float*  beta, scomplex* c, integer ldc );
void bl1_zher2k_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb, double* beta, dcomplex* c, integer ldc );

// --- symm ---

void bl1_ssymm( side1_t side, uplo1_t uplo, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dsymm( side1_t side, uplo1_t uplo, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_csymm( side1_t side, uplo1_t uplo, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zsymm( side1_t side, uplo1_t uplo, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_ssymm_blas( side1_t side, uplo1_t uplo, integer m, integer n, float*    alpha, float*    a, integer lda, float*    b, integer ldb, float*    beta, float*    c, integer ldc );
void bl1_dsymm_blas( side1_t side, uplo1_t uplo, integer m, integer n, double*   alpha, double*   a, integer lda, double*   b, integer ldb, double*   beta, double*   c, integer ldc );
void bl1_csymm_blas( side1_t side, uplo1_t uplo, integer m, integer n, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb, scomplex* beta, scomplex* c, integer ldc );
void bl1_zsymm_blas( side1_t side, uplo1_t uplo, integer m, integer n, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb, dcomplex* beta, dcomplex* c, integer ldc );

// --- syrk ---

void bl1_ssyrk( uplo1_t uplo, trans1_t trans, integer m, integer k, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dsyrk( uplo1_t uplo, trans1_t trans, integer m, integer k, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_csyrk( uplo1_t uplo, trans1_t trans, integer m, integer k, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zsyrk( uplo1_t uplo, trans1_t trans, integer m, integer k, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_ssyrk_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, float*    alpha, float*    a, integer lda, float*    beta, float*    c, integer ldc );
void bl1_dsyrk_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, double*   alpha, double*   a, integer lda, double*   beta, double*   c, integer ldc );
void bl1_csyrk_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, scomplex* alpha, scomplex* a, integer lda, scomplex* beta, scomplex* c, integer ldc );
void bl1_zsyrk_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* beta, dcomplex* c, integer ldc );

// --- syr2k ---

void bl1_ssyr2k( uplo1_t uplo, trans1_t trans, integer m, integer k, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dsyr2k( uplo1_t uplo, trans1_t trans, integer m, integer k, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_csyr2k( uplo1_t uplo, trans1_t trans, integer m, integer k, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_zsyr2k( uplo1_t uplo, trans1_t trans, integer m, integer k, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

void bl1_ssyr2k_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, float*    alpha, float*    a, integer lda, float*    b, integer ldb, float*    beta, float*    c, integer ldc );
void bl1_dsyr2k_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, double*   alpha, double*   a, integer lda, double*   b, integer ldb, double*   beta, double*   c, integer ldc );
void bl1_csyr2k_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb, scomplex* beta, scomplex* c, integer ldc );
void bl1_zsyr2k_blas( uplo1_t uplo, trans1_t trans, integer m, integer k, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb, dcomplex* beta, dcomplex* c, integer ldc );

// --- trmm ---

void bl1_strmm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dtrmm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_ctrmm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_ztrmm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

void bl1_strmm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, float*    alpha, float*    a, integer lda, float*    b, integer ldb );
void bl1_dtrmm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, double*   alpha, double*   a, integer lda, double*   b, integer ldb );
void bl1_ctrmm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb );
void bl1_ztrmm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb );

// --- trsm ---

void bl1_strsm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs );
void bl1_dtrsm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs );
void bl1_ctrsm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs );
void bl1_ztrsm( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs );

void bl1_strsm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, float*    alpha, float*    a, integer lda, float*    b, integer ldb );
void bl1_dtrsm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, double*   alpha, double*   a, integer lda, double*   b, integer ldb );
void bl1_ctrsm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, scomplex* alpha, scomplex* a, integer lda, scomplex* b, integer ldb );
void bl1_ztrsm_blas( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, dcomplex* alpha, dcomplex* a, integer lda, dcomplex* b, integer ldb );

// --- trmmsx ---

void bl1_strmmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dtrmmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_ctrmmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_ztrmmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

// --- trsmsx ---

void bl1_strsmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, float*    alpha, float*    a, integer a_rs, integer a_cs, float*    b, integer b_rs, integer b_cs, float*    beta, float*    c, integer c_rs, integer c_cs );
void bl1_dtrsmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, double*   alpha, double*   a, integer a_rs, integer a_cs, double*   b, integer b_rs, integer b_cs, double*   beta, double*   c, integer c_rs, integer c_cs );
void bl1_ctrsmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, scomplex* alpha, scomplex* a, integer a_rs, integer a_cs, scomplex* b, integer b_rs, integer b_cs, scomplex* beta, scomplex* c, integer c_rs, integer c_cs );
void bl1_ztrsmsx( side1_t side, uplo1_t uplo, trans1_t trans, diag1_t diag, integer m, integer n, dcomplex* alpha, dcomplex* a, integer a_rs, integer a_cs, dcomplex* b, integer b_rs, integer b_cs, dcomplex* beta, dcomplex* c, integer c_rs, integer c_cs );

// end blis_prototypes_level3.h

// begin blis_prototypes_fused1.h


// --- Fused Level-1 BLAS-like prototypes --------------------------------------

// --- axmyv2 ---

void bl1_saxmyv2( conj1_t conjx, integer n, float*    alpha, float*    beta, float*    x, integer inc_x, float*    y, integer inc_y, float*    z, integer inc_z );
void bl1_daxmyv2( conj1_t conjx, integer n, double*   alpha, double*   beta, double*   x, integer inc_x, double*   y, integer inc_y, double*   z, integer inc_z );
void bl1_caxmyv2( conj1_t conjx, integer n, scomplex* alpha, scomplex* beta, scomplex* x, integer inc_x, scomplex* y, integer inc_y, scomplex* z, integer inc_z );
void bl1_zaxmyv2( conj1_t conjx, integer n, dcomplex* alpha, dcomplex* beta, dcomplex* x, integer inc_x, dcomplex* y, integer inc_y, dcomplex* z, integer inc_z );

// --- axpyv2b ---

void bl1_saxpyv2b( integer n, float*    beta1, float*    beta2, float*    a1, integer inc_a1, float*    a2, integer inc_a2, float*    w, integer inc_w );
void bl1_daxpyv2b( integer n, double*   beta1, double*   beta2, double*   a1, integer inc_a1, double*   a2, integer inc_a2, double*   w, integer inc_w );
void bl1_caxpyv2b( integer n, scomplex* beta1, scomplex* beta2, scomplex* a1, integer inc_a1, scomplex* a2, integer inc_a2, scomplex* w, integer inc_w );
void bl1_zaxpyv2b( integer n, dcomplex* beta1, dcomplex* beta2, dcomplex* a1, integer inc_a1, dcomplex* a2, integer inc_a2, dcomplex* w, integer inc_w );

// --- axpyv3b ---

void bl1_saxpyv3b( integer n, float*    beta1, float*    beta2, float*    beta3, float*    a1, integer inc_a1, float*    a2, integer inc_a2, float*    a3, integer inc_a3, float*    w, integer inc_w );
void bl1_daxpyv3b( integer n, double*   beta1, double*   beta2, double*   beta3, double*   a1, integer inc_a1, double*   a2, integer inc_a2, double*   a3, integer inc_a3, double*   w, integer inc_w );
void bl1_caxpyv3b( integer n, scomplex* beta1, scomplex* beta2, scomplex* beta3, scomplex* a1, integer inc_a1, scomplex* a2, integer inc_a2, scomplex* a3, integer inc_a3, scomplex* w, integer inc_w );
void bl1_zaxpyv3b( integer n, dcomplex* beta1, dcomplex* beta2, dcomplex* beta3, dcomplex* a1, integer inc_a1, dcomplex* a2, integer inc_a2, dcomplex* a3, integer inc_a3, dcomplex* w, integer inc_w );

// --- axpyv2bdotaxpy ---

void bl1_saxpyv2bdotaxpy( integer n, float*    beta, float*    u, integer inc_u, float*    gamma, float*    z, integer inc_z, float*    a, integer inc_a, float*    x, integer inc_x, float*    kappa, float*    rho, float*    w, integer inc_w );
void bl1_daxpyv2bdotaxpy( integer n, double*   beta, double*   u, integer inc_u, double*   gamma, double*   z, integer inc_z, double*   a, integer inc_a, double*   x, integer inc_x, double*   kappa, double*   rho, double*   w, integer inc_w );
void bl1_caxpyv2bdotaxpy( integer n, scomplex* beta, scomplex* u, integer inc_u, scomplex* gamma, scomplex* z, integer inc_z, scomplex* a, integer inc_a, scomplex* x, integer inc_x, scomplex* kappa, scomplex* rho, scomplex* w, integer inc_w );
void bl1_zaxpyv2bdotaxpy( integer n, dcomplex* beta, dcomplex* u, integer inc_u, dcomplex* gamma, dcomplex* z, integer inc_z, dcomplex* a, integer inc_a, dcomplex* x, integer inc_x, dcomplex* kappa, dcomplex* rho, dcomplex* w, integer inc_w );

// --- dotsv2 ---

void bl1_sdotsv2( conj1_t conjxy, integer n, float*    x, integer inc_x, float*    y, integer inc_y, float*    z, integer inc_z, float*    beta, float*    rho_xz, float*    rho_yz );
void bl1_ddotsv2( conj1_t conjxy, integer n, double*   x, integer inc_x, double*   y, integer inc_y, double*   z, integer inc_z, double*   beta, double*   rho_xz, double*   rho_yz );
void bl1_cdotsv2( conj1_t conjxy, integer n, scomplex* x, integer inc_x, scomplex* y, integer inc_y, scomplex* z, integer inc_z, scomplex* beta, scomplex* rho_xz, scomplex* rho_yz );
void bl1_zdotsv2( conj1_t conjxy, integer n, dcomplex* x, integer inc_x, dcomplex* y, integer inc_y, dcomplex* z, integer inc_z, dcomplex* beta, dcomplex* rho_xz, dcomplex* rho_yz );

// --- dotsv3 ---

void bl1_sdotsv3( conj1_t conjxyw, integer n, float*    x, integer inc_x, float*    y, integer inc_y, float*    w, integer inc_w, float*    z, integer inc_z, float*    beta, float*    rho_xz, float*    rho_yz, float*    rho_wz );
void bl1_ddotsv3( conj1_t conjxyw, integer n, double*   x, integer inc_x, double*   y, integer inc_y, double*   w, integer inc_w, double*   z, integer inc_z, double*   beta, double*   rho_xz, double*   rho_yz, double*   rho_wz );
void bl1_cdotsv3( conj1_t conjxyw, integer n, scomplex* x, integer inc_x, scomplex* y, integer inc_y, scomplex* w, integer inc_w, scomplex* z, integer inc_z, scomplex* beta, scomplex* rho_xz, scomplex* rho_yz, scomplex* rho_wz );
void bl1_zdotsv3( conj1_t conjxyw, integer n, dcomplex* x, integer inc_x, dcomplex* y, integer inc_y, dcomplex* w, integer inc_w, dcomplex* z, integer inc_z, dcomplex* beta, dcomplex* rho_xz, dcomplex* rho_yz, dcomplex* rho_wz );

// --- dotaxpy ---

void bl1_sdotaxpy( integer n, float*    a, integer inc_a, float*    x, integer inc_x, float*    kappa, float*    rho, float*    w, integer inc_w );
void bl1_ddotaxpy( integer n, double*   a, integer inc_a, double*   x, integer inc_x, double*   kappa, double*   rho, double*   w, integer inc_w );
void bl1_cdotaxpy( integer n, scomplex* a, integer inc_a, scomplex* x, integer inc_x, scomplex* kappa, scomplex* rho, scomplex* w, integer inc_w );
void bl1_zdotaxpy( integer n, dcomplex* a, integer inc_a, dcomplex* x, integer inc_x, dcomplex* kappa, dcomplex* rho, dcomplex* w, integer inc_w );

// --- dotaxmyv2 ---

void bl1_sdotaxmyv2( integer n, float*    alpha, float*    beta, float*    x, integer inc_x, float*    u, integer inc_u, float*    rho, float*    y, integer inc_y, float*    z, integer inc_z );
void bl1_ddotaxmyv2( integer n, double*   alpha, double*   beta, double*   x, integer inc_x, double*   u, integer inc_u, double*   rho, double*   y, integer inc_y, double*   z, integer inc_z );
void bl1_cdotaxmyv2( integer n, scomplex* alpha, scomplex* beta, scomplex* x, integer inc_x, scomplex* u, integer inc_u, scomplex* rho, scomplex* y, integer inc_y, scomplex* z, integer inc_z );
void bl1_zdotaxmyv2( integer n, dcomplex* alpha, dcomplex* beta, dcomplex* x, integer inc_x, dcomplex* u, integer inc_u, dcomplex* rho, dcomplex* y, integer inc_y, dcomplex* z, integer inc_z );

// --- dotv2axpyv2b ---

void bl1_sdotv2axpyv2b( integer n, float*    a1, integer inc_a1, float*    a2, integer inc_a2, float*    x,  integer inc_x, float*    kappa1, float*    kappa2, float*    rho1, float*    rho2, float*    w, integer inc_w );
void bl1_ddotv2axpyv2b( integer n, double*   a1, integer inc_a1, double*   a2, integer inc_a2, double*   x,  integer inc_x, double*   kappa1, double*   kappa2, double*   rho1, double*   rho2, double*   w, integer inc_w );
void bl1_cdotv2axpyv2b( integer n, scomplex* a1, integer inc_a1, scomplex* a2, integer inc_a2, scomplex* x,  integer inc_x, scomplex* kappa1, scomplex* kappa2, scomplex* rho1, scomplex* rho2, scomplex* w, integer inc_w );
void bl1_zdotv2axpyv2b( integer n, dcomplex* a1, integer inc_a1, dcomplex* a2, integer inc_a2, dcomplex* x,  integer inc_x, dcomplex* kappa1, dcomplex* kappa2, dcomplex* rho1, dcomplex* rho2, dcomplex* w, integer inc_w );

// --- axpyv2bdots ---

void bl1_zaxpyv2bdots( integer       n,
                       dcomplex* alpha1,
                       dcomplex* alpha2,
                       dcomplex* x1, integer inc_x1,
                       dcomplex* x2, integer inc_x2,
                       dcomplex* y,  integer inc_y,
                       dcomplex* u,  integer inc_u,
                       dcomplex* beta,
                       dcomplex* rho );
// end blis_prototypes_fused1.h

// begin blis_f77_name_mangling.h


// --- Define Fortran name-mangling macro --------------------------------------

// If the F77_FUNC name-mangling macro is undefined, then we we need to define
// it ourselves.
#ifndef F77_FUNC

  // Case 1: F77_FUNC is undefined because we're building for Windows.
  #ifdef BLIS1_ENABLE_WINDOWS_BUILD

    // Check whether we need to use uppercase Fortran routine names; otherwise
    // default to lowercase.
    #ifdef BLIS1_ENABLE_UPPERCASE_F77

      // Use uppercase routine names (no underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_upper
    #else

      // Use lowercase routine names (no underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_lower
    #endif

  // Case 2: F77_FUNC is undefined because we're in a Linux-like environment
  // that did not define it for us.
  #else

    // Check whether we need to use uppercase Fortran routine names; otherwise
    // default to lowercase.
    #ifdef BLIS1_ENABLE_UPPERCASE_F77

      // Use uppercase routine names (single underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_upper ## _
    #else

      // Use lowercase routine names (single underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_lower ## _
    #endif

  #endif // #ifdef BLIS1_ENABLE_WINDOWS_BUILD

#endif // #ifndef F77_FUNC

// end blis_f77_name_mangling.h

#ifdef BLIS1_ENABLE_CBLAS_INTERFACES
// begin blis_prototypes_cblas.h


#include <stddef.h> // skipped


#define CBLAS_INDEX size_t  
enum CBLAS_ORDER     {CblasRowMajor=101, CblasColMajor=102};
enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113};
enum CBLAS_UPLO      {CblasUpper=121, CblasLower=122};
enum CBLAS_DIAG      {CblasNonUnit=131, CblasUnit=132};
enum CBLAS_SIDE      {CblasLeft=141, CblasRight=142};


float  cblas_sdsdot(const integer N, const float alpha, const float *X,
                    const integer incX, const float *Y, const integer incY);
double cblas_dsdot(const integer N, const float *X, const integer incX, const float *Y,
                   const integer incY);
float  cblas_sdot(const integer N, const float  *X, const integer incX,
                  const float  *Y, const integer incY);
double cblas_ddot(const integer N, const double *X, const integer incX,
                  const double *Y, const integer incY);


void   cblas_cdotu_sub(const integer N, const void *X, const integer incX,
                       const void *Y, const integer incY, void *dotu);
void   cblas_cdotc_sub(const integer N, const void *X, const integer incX,
                       const void *Y, const integer incY, void *dotc);

void   cblas_zdotu_sub(const integer N, const void *X, const integer incX,
                       const void *Y, const integer incY, void *dotu);
void   cblas_zdotc_sub(const integer N, const void *X, const integer incX,
                       const void *Y, const integer incY, void *dotc);



float  cblas_snrm2(const integer N, const float *X, const integer incX);
float  cblas_sasum(const integer N, const float *X, const integer incX);

double cblas_dnrm2(const integer N, const double *X, const integer incX);
double cblas_dasum(const integer N, const double *X, const integer incX);

float  cblas_scnrm2(const integer N, const void *X, const integer incX);
float  cblas_scasum(const integer N, const void *X, const integer incX);

double cblas_dznrm2(const integer N, const void *X, const integer incX);
double cblas_dzasum(const integer N, const void *X, const integer incX);



CBLAS_INDEX cblas_isamax(const integer N, const float  *X, const integer incX);
CBLAS_INDEX cblas_idamax(const integer N, const double *X, const integer incX);
CBLAS_INDEX cblas_icamax(const integer N, const void   *X, const integer incX);
CBLAS_INDEX cblas_izamax(const integer N, const void   *X, const integer incX);




void cblas_sswap(const integer N, float *X, const integer incX, 
                 float *Y, const integer incY);
void cblas_scopy(const integer N, const float *X, const integer incX, 
                 float *Y, const integer incY);
void cblas_saxpy(const integer N, const float alpha, const float *X,
                 const integer incX, float *Y, const integer incY);

void cblas_dswap(const integer N, double *X, const integer incX, 
                 double *Y, const integer incY);
void cblas_dcopy(const integer N, const double *X, const integer incX, 
                 double *Y, const integer incY);
void cblas_daxpy(const integer N, const double alpha, const double *X,
                 const integer incX, double *Y, const integer incY);

void cblas_cswap(const integer N, void *X, const integer incX, 
                 void *Y, const integer incY);
void cblas_ccopy(const integer N, const void *X, const integer incX, 
                 void *Y, const integer incY);
void cblas_caxpy(const integer N, const void *alpha, const void *X,
                 const integer incX, void *Y, const integer incY);

void cblas_zswap(const integer N, void *X, const integer incX, 
                 void *Y, const integer incY);
void cblas_zcopy(const integer N, const void *X, const integer incX, 
                 void *Y, const integer incY);
void cblas_zaxpy(const integer N, const void *alpha, const void *X,
                 const integer incX, void *Y, const integer incY);



void cblas_srotg(float *a, float *b, float *c, float *s);
void cblas_srotmg(float *d1, float *d2, float *b1, const float b2, float *P);
void cblas_srot(const integer N, float *X, const integer incX,
                float *Y, const integer incY, const float c, const float s);
void cblas_srotm(const integer N, float *X, const integer incX,
                float *Y, const integer incY, const float *P);

void cblas_drotg(double *a, double *b, double *c, double *s);
void cblas_drotmg(double *d1, double *d2, double *b1, const double b2, double *P);
void cblas_drot(const integer N, double *X, const integer incX,
                double *Y, const integer incY, const double c, const double s);
void cblas_drotm(const integer N, double *X, const integer incX,
                double *Y, const integer incY, const double *P);



void cblas_sscal(const integer N, const float alpha, float *X, const integer incX);
void cblas_dscal(const integer N, const double alpha, double *X, const integer incX);
void cblas_cscal(const integer N, const void *alpha, void *X, const integer incX);
void cblas_zscal(const integer N, const void *alpha, void *X, const integer incX);
void cblas_csscal(const integer N, const float alpha, void *X, const integer incX);
void cblas_zdscal(const integer N, const double alpha, void *X, const integer incX);




void cblas_sgemv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const float alpha, const float *A, const integer lda,
                 const float *X, const integer incX, const float beta,
                 float *Y, const integer incY);
void cblas_sgbmv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const integer KL, const integer KU, const float alpha,
                 const float *A, const integer lda, const float *X,
                 const integer incX, const float beta, float *Y, const integer incY);
void cblas_strmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const float *A, const integer lda, 
                 float *X, const integer incX);
void cblas_stbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const float *A, const integer lda, 
                 float *X, const integer incX);
void cblas_stpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const float *Ap, float *X, const integer incX);
void cblas_strsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const float *A, const integer lda, float *X,
                 const integer incX);
void cblas_stbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const float *A, const integer lda,
                 float *X, const integer incX);
void cblas_stpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const float *Ap, float *X, const integer incX);

void cblas_dgemv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const double alpha, const double *A, const integer lda,
                 const double *X, const integer incX, const double beta,
                 double *Y, const integer incY);
void cblas_dgbmv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const integer KL, const integer KU, const double alpha,
                 const double *A, const integer lda, const double *X,
                 const integer incX, const double beta, double *Y, const integer incY);
void cblas_dtrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const double *A, const integer lda, 
                 double *X, const integer incX);
void cblas_dtbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const double *A, const integer lda, 
                 double *X, const integer incX);
void cblas_dtpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const double *Ap, double *X, const integer incX);
void cblas_dtrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const double *A, const integer lda, double *X,
                 const integer incX);
void cblas_dtbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const double *A, const integer lda,
                 double *X, const integer incX);
void cblas_dtpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const double *Ap, double *X, const integer incX);

void cblas_cgemv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 const void *X, const integer incX, const void *beta,
                 void *Y, const integer incY);
void cblas_cgbmv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const integer KL, const integer KU, const void *alpha,
                 const void *A, const integer lda, const void *X,
                 const integer incX, const void *beta, void *Y, const integer incY);
void cblas_ctrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *A, const integer lda, 
                 void *X, const integer incX);
void cblas_ctbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const void *A, const integer lda, 
                 void *X, const integer incX);
void cblas_ctpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *Ap, void *X, const integer incX);
void cblas_ctrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *A, const integer lda, void *X,
                 const integer incX);
void cblas_ctbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const void *A, const integer lda,
                 void *X, const integer incX);
void cblas_ctpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *Ap, void *X, const integer incX);

void cblas_zgemv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 const void *X, const integer incX, const void *beta,
                 void *Y, const integer incY);
void cblas_zgbmv(const enum CBLAS_ORDER order,
                 const enum CBLAS_TRANSPOSE TransA, const integer M, const integer N,
                 const integer KL, const integer KU, const void *alpha,
                 const void *A, const integer lda, const void *X,
                 const integer incX, const void *beta, void *Y, const integer incY);
void cblas_ztrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *A, const integer lda, 
                 void *X, const integer incX);
void cblas_ztbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const void *A, const integer lda, 
                 void *X, const integer incX);
void cblas_ztpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *Ap, void *X, const integer incX);
void cblas_ztrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *A, const integer lda, void *X,
                 const integer incX);
void cblas_ztbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const integer K, const void *A, const integer lda,
                 void *X, const integer incX);
void cblas_ztpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                 const integer N, const void *Ap, void *X, const integer incX);



void cblas_ssymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const float alpha, const float *A,
                 const integer lda, const float *X, const integer incX,
                 const float beta, float *Y, const integer incY);
void cblas_ssbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const integer K, const float alpha, const float *A,
                 const integer lda, const float *X, const integer incX,
                 const float beta, float *Y, const integer incY);
void cblas_sspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const float alpha, const float *Ap,
                 const float *X, const integer incX,
                 const float beta, float *Y, const integer incY);
void cblas_sger(const enum CBLAS_ORDER order, const integer M, const integer N,
                const float alpha, const float *X, const integer incX,
                const float *Y, const integer incY, float *A, const integer lda);
void cblas_ssyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const float alpha, const float *X,
                const integer incX, float *A, const integer lda);
void cblas_sspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const float alpha, const float *X,
                const integer incX, float *Ap);
void cblas_ssyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const float alpha, const float *X,
                const integer incX, const float *Y, const integer incY, float *A,
                const integer lda);
void cblas_sspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const float alpha, const float *X,
                const integer incX, const float *Y, const integer incY, float *A);

void cblas_dsymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const double alpha, const double *A,
                 const integer lda, const double *X, const integer incX,
                 const double beta, double *Y, const integer incY);
void cblas_dsbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const integer K, const double alpha, const double *A,
                 const integer lda, const double *X, const integer incX,
                 const double beta, double *Y, const integer incY);
void cblas_dspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const double alpha, const double *Ap,
                 const double *X, const integer incX,
                 const double beta, double *Y, const integer incY);
void cblas_dger(const enum CBLAS_ORDER order, const integer M, const integer N,
                const double alpha, const double *X, const integer incX,
                const double *Y, const integer incY, double *A, const integer lda);
void cblas_dsyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const double alpha, const double *X,
                const integer incX, double *A, const integer lda);
void cblas_dspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const double alpha, const double *X,
                const integer incX, double *Ap);
void cblas_dsyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const double alpha, const double *X,
                const integer incX, const double *Y, const integer incY, double *A,
                const integer lda);
void cblas_dspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const double alpha, const double *X,
                const integer incX, const double *Y, const integer incY, double *A);



void cblas_chemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const void *alpha, const void *A,
                 const integer lda, const void *X, const integer incX,
                 const void *beta, void *Y, const integer incY);
void cblas_chbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const integer K, const void *alpha, const void *A,
                 const integer lda, const void *X, const integer incX,
                 const void *beta, void *Y, const integer incY);
void cblas_chpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const void *alpha, const void *Ap,
                 const void *X, const integer incX,
                 const void *beta, void *Y, const integer incY);
void cblas_cgeru(const enum CBLAS_ORDER order, const integer M, const integer N,
                 const void *alpha, const void *X, const integer incX,
                 const void *Y, const integer incY, void *A, const integer lda);
void cblas_cgerc(const enum CBLAS_ORDER order, const integer M, const integer N,
                 const void *alpha, const void *X, const integer incX,
                 const void *Y, const integer incY, void *A, const integer lda);
void cblas_cher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const float alpha, const void *X, const integer incX,
                void *A, const integer lda);
void cblas_chpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const float *alpha, const void *X,
                const integer incX, void *A);
void cblas_cher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const integer N,
                const void *alpha, const void *X, const integer incX,
                const void *Y, const integer incY, void *A, const integer lda);
void cblas_chpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const integer N,
                const void *alpha, const void *X, const integer incX,
                const void *Y, const integer incY, void *Ap);

void cblas_zhemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const void *alpha, const void *A,
                 const integer lda, const void *X, const integer incX,
                 const void *beta, void *Y, const integer incY);
void cblas_zhbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const integer K, const void *alpha, const void *A,
                 const integer lda, const void *X, const integer incX,
                 const void *beta, void *Y, const integer incY);
void cblas_zhpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const integer N, const void *alpha, const void *Ap,
                 const void *X, const integer incX,
                 const void *beta, void *Y, const integer incY);
void cblas_zgeru(const enum CBLAS_ORDER order, const integer M, const integer N,
                 const void *alpha, const void *X, const integer incX,
                 const void *Y, const integer incY, void *A, const integer lda);
void cblas_zgerc(const enum CBLAS_ORDER order, const integer M, const integer N,
                 const void *alpha, const void *X, const integer incX,
                 const void *Y, const integer incY, void *A, const integer lda);
void cblas_zher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const double alpha, const void *X, const integer incX,
                void *A, const integer lda);
void cblas_zhpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                const integer N, const double *alpha, const void *X,
                const integer incX, void *A);
void cblas_zher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const integer N,
                const void *alpha, const void *X, const integer incX,
                const void *Y, const integer incY, void *A, const integer lda);
void cblas_zhpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const integer N,
                const void *alpha, const void *X, const integer incX,
                const void *Y, const integer incY, void *Ap);




void cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_TRANSPOSE TransB, const integer M, const integer N,
                 const integer K, const float alpha, const float *A,
                 const integer lda, const float *B, const integer ldb,
                 const float beta, float *C, const integer ldc);
void cblas_ssymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const integer M, const integer N,
                 const float alpha, const float *A, const integer lda,
                 const float *B, const integer ldb, const float beta,
                 float *C, const integer ldc);
void cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                 const float alpha, const float *A, const integer lda,
                 const float beta, float *C, const integer ldc);
void cblas_ssyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                  const float alpha, const float *A, const integer lda,
                  const float *B, const integer ldb, const float beta,
                  float *C, const integer ldc);
void cblas_strmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const float alpha, const float *A, const integer lda,
                 float *B, const integer ldb);
void cblas_strsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const float alpha, const float *A, const integer lda,
                 float *B, const integer ldb);

void cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_TRANSPOSE TransB, const integer M, const integer N,
                 const integer K, const double alpha, const double *A,
                 const integer lda, const double *B, const integer ldb,
                 const double beta, double *C, const integer ldc);
void cblas_dsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const integer M, const integer N,
                 const double alpha, const double *A, const integer lda,
                 const double *B, const integer ldb, const double beta,
                 double *C, const integer ldc);
void cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                 const double alpha, const double *A, const integer lda,
                 const double beta, double *C, const integer ldc);
void cblas_dsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                  const double alpha, const double *A, const integer lda,
                  const double *B, const integer ldb, const double beta,
                  double *C, const integer ldc);
void cblas_dtrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const double alpha, const double *A, const integer lda,
                 double *B, const integer ldb);
void cblas_dtrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const double alpha, const double *A, const integer lda,
                 double *B, const integer ldb);

void cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_TRANSPOSE TransB, const integer M, const integer N,
                 const integer K, const void *alpha, const void *A,
                 const integer lda, const void *B, const integer ldb,
                 const void *beta, void *C, const integer ldc);
void cblas_csymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 const void *B, const integer ldb, const void *beta,
                 void *C, const integer ldc);
void cblas_csyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                 const void *alpha, const void *A, const integer lda,
                 const void *beta, void *C, const integer ldc);
void cblas_csyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                  const void *alpha, const void *A, const integer lda,
                  const void *B, const integer ldb, const void *beta,
                  void *C, const integer ldc);
void cblas_ctrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 void *B, const integer ldb);
void cblas_ctrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 void *B, const integer ldb);

void cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_TRANSPOSE TransB, const integer M, const integer N,
                 const integer K, const void *alpha, const void *A,
                 const integer lda, const void *B, const integer ldb,
                 const void *beta, void *C, const integer ldc);
void cblas_zsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 const void *B, const integer ldb, const void *beta,
                 void *C, const integer ldc);
void cblas_zsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                 const void *alpha, const void *A, const integer lda,
                 const void *beta, void *C, const integer ldc);
void cblas_zsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                  const void *alpha, const void *A, const integer lda,
                  const void *B, const integer ldb, const void *beta,
                  void *C, const integer ldc);
void cblas_ztrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 void *B, const integer ldb);
void cblas_ztrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                 const enum CBLAS_DIAG Diag, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 void *B, const integer ldb);



void cblas_chemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 const void *B, const integer ldb, const void *beta,
                 void *C, const integer ldc);
void cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                 const float alpha, const void *A, const integer lda,
                 const float beta, void *C, const integer ldc);
void cblas_cher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                  const void *alpha, const void *A, const integer lda,
                  const void *B, const integer ldb, const float beta,
                  void *C, const integer ldc);

void cblas_zhemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                 const enum CBLAS_UPLO Uplo, const integer M, const integer N,
                 const void *alpha, const void *A, const integer lda,
                 const void *B, const integer ldb, const void *beta,
                 void *C, const integer ldc);
void cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                 const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                 const double alpha, const void *A, const integer lda,
                 const double beta, void *C, const integer ldc);
void cblas_zher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const integer N, const integer K,
                  const void *alpha, const void *A, const integer lda,
                  const void *B, const integer ldb, const double beta,
                  void *C, const integer ldc);
// end blis_prototypes_cblas.h
#else
// begin blis_prototypes_blas.h


// --- Name-mangling macro definitions -----------------------------------------

// --- Name-mangle level-1 BLAS routines ---------------------------

#define F77_isamax F77_FUNC( isamax , ISAMAX )
#define F77_idamax F77_FUNC( idamax , IDAMAX )
#define F77_icamax F77_FUNC( icamax , ICAMAX )
#define F77_izamax F77_FUNC( izamax , IZAMAX )
#define F77_sasum  F77_FUNC( sasum  , SASUM  )
#define F77_dasum  F77_FUNC( dasum  , DASUM  )
#define F77_scasum F77_FUNC( scasum , SCASUM )
#define F77_dzasum F77_FUNC( dzasum , DZASUM )
#define F77_saxpy  F77_FUNC( saxpy  , SAXPY  )
#define F77_daxpy  F77_FUNC( daxpy  , DAXPY  )
#define F77_caxpy  F77_FUNC( caxpy  , CAXPY  )
#define F77_zaxpy  F77_FUNC( zaxpy  , ZAXPY  )
#define F77_scopy  F77_FUNC( scopy  , SCOPY  )
#define F77_dcopy  F77_FUNC( dcopy  , DCOPY  )
#define F77_ccopy  F77_FUNC( ccopy  , CCOPY  )
#define F77_zcopy  F77_FUNC( zcopy  , ZCOPY  )
#define F77_sdot   F77_FUNC( sdot   , SDOT   )
#define F77_ddot   F77_FUNC( ddot   , DDOT   )
#define F77_cdotu  F77_FUNC( cdotu  , CDOTU  )
#define F77_cdotc  F77_FUNC( cdotc  , CDOTC  )
#define F77_zdotu  F77_FUNC( zdotu  , ZDOTU  )
#define F77_zdotc  F77_FUNC( zdotc  , ZDOTC  )
#define F77_snrm2  F77_FUNC( snrm2  , SNRM2  )
#define F77_dnrm2  F77_FUNC( dnrm2  , DNRM2  )
#define F77_scnrm2 F77_FUNC( scnrm2 , SCNRM2 )
#define F77_dznrm2 F77_FUNC( dznrm2 , DZNRM2 )
#define F77_sscal  F77_FUNC( sscal  , SSCAL  )
#define F77_dscal  F77_FUNC( dscal  , DSCAL  )
#define F77_cscal  F77_FUNC( cscal  , CSCAL  )
#define F77_csscal F77_FUNC( csscal , CSSCAL )
#define F77_zscal  F77_FUNC( zscal  , ZSCAL  )
#define F77_zdscal F77_FUNC( zdscal , ZDSCAL )
#define F77_sswap  F77_FUNC( sswap  , SSWAP  )
#define F77_dswap  F77_FUNC( dswap  , DSWAP  )
#define F77_cswap  F77_FUNC( cswap  , CSWAP  )
#define F77_zswap  F77_FUNC( zswap  , ZSWAP  )

// --- Name-mangle level-2 BLAS routines ---------------------------

#define F77_sgemv  F77_FUNC( sgemv  , SGEMV  )
#define F77_dgemv  F77_FUNC( dgemv  , DGEMV  )
#define F77_cgemv  F77_FUNC( cgemv  , CGEMV  )
#define F77_zgemv  F77_FUNC( zgemv  , ZGEMV  )
#define F77_sger   F77_FUNC( sger   , SGER   )
#define F77_dger   F77_FUNC( dger   , DGER   )
#define F77_cgerc  F77_FUNC( cgerc  , CGERC  )
#define F77_cgeru  F77_FUNC( cgeru  , CGERU  )
#define F77_zgerc  F77_FUNC( zgerc  , ZGERC  )
#define F77_zgeru  F77_FUNC( zgeru  , ZGERU  )
#define F77_chemv  F77_FUNC( chemv  , CHEMV  )
#define F77_zhemv  F77_FUNC( zhemv  , ZHEMV  )
#define F77_cher   F77_FUNC( cher   , CHER   )
#define F77_zher   F77_FUNC( zher   , ZHER   )
#define F77_cher2  F77_FUNC( cher2  , CHER2  )
#define F77_zher2  F77_FUNC( zher2  , ZHER2  )
#define F77_ssymv  F77_FUNC( ssymv  , SSYMV  )
#define F77_dsymv  F77_FUNC( dsymv  , DSYMV  )
#define F77_ssyr   F77_FUNC( ssyr   , SSYR   )
#define F77_dsyr   F77_FUNC( dsyr   , DSYR   )
#define F77_ssyr2  F77_FUNC( ssyr2  , SSYR2  )
#define F77_dsyr2  F77_FUNC( dsyr2  , DSYR2  )
#define F77_strmv  F77_FUNC( strmv  , STRMV  )
#define F77_dtrmv  F77_FUNC( dtrmv  , DTRMV  )
#define F77_ctrmv  F77_FUNC( ctrmv  , CTRMV  )
#define F77_ztrmv  F77_FUNC( ztrmv  , ZTRMV  )
#define F77_strsv  F77_FUNC( strsv  , STRSV  )
#define F77_dtrsv  F77_FUNC( dtrsv  , DTRSV  )
#define F77_ctrsv  F77_FUNC( ctrsv  , CTRSV  )
#define F77_ztrsv  F77_FUNC( ztrsv  , ZTRSV  )

// --- Name-mangle level-3 BLAS routines ---------------------------

#define F77_sgemm  F77_FUNC( sgemm  , SGEMM  )
#define F77_dgemm  F77_FUNC( dgemm  , DGEMM  )
#define F77_cgemm  F77_FUNC( cgemm  , CGEMM  )
#define F77_zgemm  F77_FUNC( zgemm  , ZGEMM  )
#define F77_chemm  F77_FUNC( chemm  , CHEMM  )
#define F77_zhemm  F77_FUNC( zhemm  , ZHEMM  )
#define F77_cherk  F77_FUNC( cherk  , CHERK  )
#define F77_zherk  F77_FUNC( zherk  , ZHERK  )
#define F77_cher2k F77_FUNC( cher2k , CHER2K )
#define F77_zher2k F77_FUNC( zher2k , ZHER2K )
#define F77_ssymm  F77_FUNC( ssymm  , SSYMM  )
#define F77_dsymm  F77_FUNC( dsymm  , DSYMM  )
#define F77_csymm  F77_FUNC( csymm  , CSYMM  )
#define F77_zsymm  F77_FUNC( zsymm  , ZSYMM  )
#define F77_ssyrk  F77_FUNC( ssyrk  , SSYRK  )
#define F77_dsyrk  F77_FUNC( dsyrk  , DSYRK  )
#define F77_csyrk  F77_FUNC( csyrk  , CSYRK  )
#define F77_zsyrk  F77_FUNC( zsyrk  , ZSYRK  )
#define F77_ssyr2k F77_FUNC( ssyr2k , SSYR2K )
#define F77_dsyr2k F77_FUNC( dsyr2k , DSYR2K )
#define F77_csyr2k F77_FUNC( csyr2k , CSYR2K )
#define F77_zsyr2k F77_FUNC( zsyr2k , ZSYR2K )
#define F77_strmm  F77_FUNC( strmm  , STRMM  )
#define F77_dtrmm  F77_FUNC( dtrmm  , DTRMM  )
#define F77_ctrmm  F77_FUNC( ctrmm  , CTRMM  )
#define F77_ztrmm  F77_FUNC( ztrmm  , ZTRMM  )
#define F77_strsm  F77_FUNC( strsm  , STRSM  )
#define F77_dtrsm  F77_FUNC( dtrsm  , DTRSM  )
#define F77_ctrsm  F77_FUNC( ctrsm  , CTRSM  )
#define F77_ztrsm  F77_FUNC( ztrsm  , ZTRSM  )

#ifdef BLIS1_FROM_LIBFLAME
// --- Prototypes --------------------------------------------------------------

// --- Level-1 BLAS prototypes -------------------

// --- amax ---
integer  F77_isamax ( integer* n, float*    x, integer* incx );
integer  F77_idamax ( integer* n, double*   x, integer* incx );
integer  F77_icamax ( integer* n, scomplex* x, integer* incx );
integer  F77_izamax ( integer* n, dcomplex* x, integer* incx );
// --- asum ---
float    F77_sasum  ( integer* n, float*    x, integer* incx );
double   F77_dasum  ( integer* n, double*   x, integer* incx );
float    F77_scasum ( integer* n, scomplex* x, integer* incx );
double   F77_dzasum ( integer* n, dcomplex* x, integer* incx );
// --- axpy ---
void     F77_saxpy  ( integer* n, float*    alpha, float*    x, integer* incx,  float*    y, integer* incy );
void     F77_daxpy  ( integer* n, double*   alpha, double*   x, integer* incx,  double*   y, integer* incy );
void     F77_caxpy  ( integer* n, scomplex* alpha, scomplex* x, integer* incx,  scomplex* y, integer* incy );
void     F77_zaxpy  ( integer* n, dcomplex* alpha, dcomplex* x, integer* incx,  dcomplex* y, integer* incy );
// --- copy ---
void     F77_scopy  ( integer* n, float*    x, integer* incx, float*    y, integer* incy );
void     F77_dcopy  ( integer* n, double*   x, integer* incx, double*   y, integer* incy );
void     F77_ccopy  ( integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy );
void     F77_zcopy  ( integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy );
// --- dot ---
float    F77_sdot   ( integer* n, float*    x, integer* incx, float*    y, integer* incy );
double   F77_ddot   ( integer* n, double*   x, integer* incx, double*   y, integer* incy );
scomplex F77_cdotu  ( integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy );
scomplex F77_cdotc  ( integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy );
dcomplex F77_zdotu  ( integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy );
dcomplex F77_zdotc  ( integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy );
// --- nrm2 ---
float    F77_snrm2  ( integer* n, float*    x, integer* incx );
double   F77_dnrm2  ( integer* n, double*   x, integer* incx );
float    F77_scnrm2 ( integer* n, scomplex* x, integer* incx );
double   F77_dznrm2 ( integer* n, dcomplex* x, integer* incx );
// --- scal ---
void     F77_sscal  ( integer* n, float*    alpha, float*    y, integer* incy );
void     F77_dscal  ( integer* n, double*   alpha, double*   y, integer* incy );
void     F77_cscal  ( integer* n, scomplex* alpha, scomplex* y, integer* incy );
void     F77_csscal ( integer* n, float*    alpha, scomplex* y, integer* incy );
void     F77_zscal  ( integer* n, dcomplex* alpha, dcomplex* y, integer* incy );
void     F77_zdscal ( integer* n, double*   alpha, dcomplex* y, integer* incy );
// --- swap ---
void     F77_sswap  ( integer* n, float*    x, integer* incx, float*    y, integer* incy );
void     F77_dswap  ( integer* n, double*   x, integer* incx, double*   y, integer* incy );
void     F77_cswap  ( integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy );
void     F77_zswap  ( integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy );

// --- Level-2 BLAS prototypes -------------------

// --- gemv ---
void     F77_sgemv  ( char* transa, integer* m, integer* n, float*    alpha, float*    a, integer* lda, float*    x, integer* incx, float*    beta, float*    y, integer* incy );
void     F77_dgemv  ( char* transa, integer* m, integer* n, double*   alpha, double*   a, integer* lda, double*   x, integer* incx, double*   beta, double*   y, integer* incy );
void     F77_cgemv  ( char* transa, integer* m, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* x, integer* incx, scomplex* beta, scomplex* y, integer* incy );
void     F77_zgemv  ( char* transa, integer* m, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* x, integer* incx, dcomplex* beta, dcomplex* y, integer* incy );
// --- ger ---
void     F77_sger   ( integer* m, integer* n, float*    alpha, float*    x, integer* incx, float*    y, integer* incy, float*    a, integer* lda );
void     F77_dger   ( integer* m, integer* n, double*   alpha, double*   x, integer* incx, double*   y, integer* incy, double*   a, integer* lda );
void     F77_cgerc  ( integer* m, integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* y, integer* incy, scomplex* a, integer* lda );
void     F77_cgeru  ( integer* m, integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* y, integer* incy, scomplex* a, integer* lda );
void     F77_zgerc  ( integer* m, integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* y, integer* incy, dcomplex* a, integer* lda );
void     F77_zgeru  ( integer* m, integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* y, integer* incy, dcomplex* a, integer* lda );
// --- hemv ---
void     F77_chemv  ( char* uplo, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* x, integer* incx, scomplex* beta, scomplex* y, integer* incy );
void     F77_zhemv  ( char* uplo, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* x, integer* incx, dcomplex* beta, dcomplex* y, integer* incy );
// --- her ---
void     F77_cher   ( char* uplo, integer* n, float*    alpha, scomplex* x, integer* incx, scomplex* a, integer* lda );
void     F77_zher   ( char* uplo, integer* n, double*   alpha, dcomplex* x, integer* incx, dcomplex* a, integer* lda );
// --- her2 ---
void     F77_cher2  ( char* uplo, integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* y, integer* incy, scomplex* a, integer* lda );
void     F77_zher2  ( char* uplo, integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* y, integer* incy, dcomplex* a, integer* lda );
// --- symv ---
void     F77_ssymv  ( char* uplo, integer* n, float*    alpha, float*    a, integer* lda, float*    x, integer* incx, float*    beta, float*    y, integer* incy );
void     F77_dsymv  ( char* uplo, integer* n, double*   alpha, double*   a, integer* lda, double*   x, integer* incx, double*   beta, double*   y, integer* incy );
// --- syr ---
void     F77_ssyr   ( char* uplo, integer* n, float*    alpha, float*    x, integer* incx, float*    a, integer* lda );
void     F77_dsyr   ( char* uplo, integer* n, double*   alpha, double*   x, integer* incx, double*   a, integer* lda );
// --- syr2 ---
void     F77_ssyr2  ( char* uplo, integer* n, float*    alpha, float*    x, integer* incx, float*    y, integer* incy, float*    a, integer* lda );
void     F77_dsyr2  ( char* uplo, integer* n, double*   alpha, double*   x, integer* incx, double*   y, integer* incy, double*   a, integer* lda );
// --- trmv ---
void     F77_strmv  ( char* uplo, char* transa, char* diag, integer* n,  float*    a, integer* lda, float*    y, integer* incy );
void     F77_dtrmv  ( char* uplo, char* transa, char* diag, integer* n,  double*   a, integer* lda, double*   y, integer* incy );
void     F77_ctrmv  ( char* uplo, char* transa, char* diag, integer* n,  scomplex* a, integer* lda, scomplex* y, integer* incy );
void     F77_ztrmv  ( char* uplo, char* transa, char* diag, integer* n,  dcomplex* a, integer* lda, dcomplex* y, integer* incy );
// --- trsv ---
void     F77_strsv  ( char* uplo, char* transa, char* diag, integer* n,  float*    a, integer* lda, float*    y, integer* incy );
void     F77_dtrsv  ( char* uplo, char* transa, char* diag, integer* n,  double*   a, integer* lda, double*   y, integer* incy );
void     F77_ctrsv  ( char* uplo, char* transa, char* diag, integer* n,  scomplex* a, integer* lda, scomplex* y, integer* incy );
void     F77_ztrsv  ( char* uplo, char* transa, char* diag, integer* n,  dcomplex* a, integer* lda, dcomplex* y, integer* incy );

// --- Level-3 BLAS prototypes -------------------

// --- gemm ---
void     F77_sgemm  ( char* transa, char* transb, integer* m, integer* n, integer* k, float*    alpha, float*    a, integer* lda, float*    b, integer* ldb, float*    beta, float*    c, integer* ldc );
void     F77_dgemm  ( char* transa, char* transb, integer* m, integer* n, integer* k, double*   alpha, double*   a, integer* lda, double*   b, integer* ldb, double*   beta, double*   c, integer* ldc );
void     F77_cgemm  ( char* transa, char* transb, integer* m, integer* n, integer* k, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* beta, scomplex* c, integer* ldc );
void     F77_zgemm  ( char* transa, char* transb, integer* m, integer* n, integer* k, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* beta, dcomplex* c, integer* ldc );
// --- hemm ---
void     F77_chemm  ( char* side, char* uplo, integer* m, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* beta, scomplex* c, integer* ldc );
void     F77_zhemm  ( char* side, char* uplo, integer* m, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* beta, dcomplex* c, integer* ldc );
// --- herk ---
void     F77_cherk  ( char* uplo, char* transa, integer* n, integer* k, float*  alpha, scomplex* a, integer* lda, float*  beta, scomplex* c, integer* ldc );
void     F77_zherk  ( char* uplo, char* transa, integer* n, integer* k, double* alpha, dcomplex* a, integer* lda, double* beta, dcomplex* c, integer* ldc );
// --- her2k ---
void     F77_cher2k ( char* uplo, char* transa, integer* n, integer* k, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb, float*  beta, scomplex* c, integer* ldc );
void     F77_zher2k ( char* uplo, char* transa, integer* n, integer* k, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* beta, dcomplex* c, integer* ldc );
// --- symm ---
void     F77_ssymm  ( char* side, char* uplo, integer* m, integer* n, float*    alpha, float*    a, integer* lda, float*    b, integer* ldb, float*    beta, float*    c, integer* ldc );
void     F77_dsymm  ( char* side, char* uplo, integer* m, integer* n, double*   alpha, double*   a, integer* lda, double*   b, integer* ldb, double*   beta, double*   c, integer* ldc );
void     F77_csymm  ( char* side, char* uplo, integer* m, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* beta, scomplex* c, integer* ldc );
void     F77_zsymm  ( char* side, char* uplo, integer* m, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* beta, dcomplex* c, integer* ldc );
// --- syrk ---
void     F77_ssyrk  ( char* uplo, char* transa, integer* n, integer* k, float*    alpha, float*    a, integer* lda, float*    beta, float*    c, integer* ldc );
void     F77_dsyrk  ( char* uplo, char* transa, integer* n, integer* k, double*   alpha, double*   a, integer* lda, double*   beta, double*   c, integer* ldc );
void     F77_csyrk  ( char* uplo, char* transa, integer* n, integer* k, scomplex* alpha, scomplex* a, integer* lda, scomplex* beta, scomplex* c, integer* ldc );
void     F77_zsyrk  ( char* uplo, char* transa, integer* n, integer* k, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* beta, dcomplex* c, integer* ldc );
// --- syr2k ---
void     F77_ssyr2k ( char* uplo, char* transa, integer* n, integer* k, float*    alpha, float*    a, integer* lda, float*    b, integer* ldb, float*    beta, float*    c, integer* ldc );
void     F77_dsyr2k ( char* uplo, char* transa, integer* n, integer* k, double*   alpha, double*   a, integer* lda, double*   b, integer* ldb, double*   beta, double*   c, integer* ldc );
void     F77_csyr2k ( char* uplo, char* transa, integer* n, integer* k, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* beta, scomplex* c, integer* ldc );
void     F77_zsyr2k ( char* uplo, char* transa, integer* n, integer* k, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* beta, dcomplex* c, integer* ldc );
// --- trmm ---
void     F77_strmm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, float*    alpha, float*    a, integer* lda, float*    b, integer* ldb );
void     F77_dtrmm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, double*   alpha, double*   a, integer* lda, double*   b, integer* ldb );
void     F77_ctrmm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb );
void     F77_ztrmm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb );
// --- trsm ---
void     F77_strsm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, float*    alpha, float*    a, integer* lda, float*    b, integer* ldb );
void     F77_dtrsm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, double*   alpha, double*   a, integer* lda, double*   b, integer* ldb );
void     F77_ctrsm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* b, integer* ldb );
void     F77_ztrsm  ( char* side, char* uplo, char* transa, char* diag, integer* m, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* b, integer* ldb );

#endif
// end blis_prototypes_blas.h
#endif

// End extern "C" construct block.
#ifdef __cplusplus
}
#endif

#endif
// end blis1.h

  // Include _PTR macro definitions.
// begin FLA_macro_ptr_defs.h


// begin FLA_type_defs.h




#ifndef FLA_TYPE_DEFS_H
#define FLA_TYPE_DEFS_H

#ifdef __cplusplus
// For C++, include stdint.h.
#include <stdint.h> // skipped
#elif __STDC_VERSION__ >= 199901L
// For C99 (or later), include stdint.h.
#include <stdint.h> // skipped
#else
// When stdint.h is not available, manually typedef the types we will use.
#ifdef _WIN32
typedef          __int32  int32_t;
typedef unsigned __int32 uint32_t;
typedef          __int64  int64_t;
typedef unsigned __int64 uint64_t;
#else
#error "Attempting to compile on pre-C99 system without stdint.h."
#endif
#endif

#if defined(FLA_ENABLE_ILP64)
typedef int64_t integer;
typedef uint64_t uinteger;
#else
typedef int integer;
typedef unsigned long uinteger;
#endif



#if   FLA_MULTITHREADING_MODEL == FLA_OPENMP
#ifdef FLA_ENABLE_TIDSP
#include <ti/omp/omp.h> // skipped
#else
#include <omp.h> // skipped
#endif
#elif FLA_MULTITHREADING_MODEL == FLA_PTHREADS
#include <pthread.h> // skipped
#endif


// --- Complex type definitions -----------------------------------------------

#ifndef _DEFINED_SCOMPLEX
#define _DEFINED_SCOMPLEX
typedef struct scomplex
{
  float real, imag;
} scomplex;
#endif

#ifndef _DEFINED_DCOMPLEX
#define _DEFINED_DCOMPLEX
typedef struct dcomplex
{
  double real, imag;
} dcomplex;
#endif


// --- Parameter and return type definitions ----------------------------------

typedef int FLA_Bool;
typedef int FLA_Error;
typedef int FLA_Quadrant;
typedef int FLA_Datatype;
typedef int FLA_Elemtype;
typedef int FLA_Side;
typedef int FLA_Uplo;
typedef int FLA_Trans;
typedef int FLA_Conj;
typedef int FLA_Diag;
typedef int FLA_Dimension;
typedef int FLA_Pivot_type;
typedef int FLA_Direct;
typedef int FLA_Store;
typedef int FLA_Matrix_type;
typedef int FLA_Precision;
typedef int FLA_Domain;
typedef int FLA_Inv;
typedef int FLA_Evd_type;
typedef int FLA_Svd_type;
typedef int FLA_Machval;
typedef int FLA_Diag_off;

#ifndef _DEFINED_FLA_DIM_T
#define _DEFINED_FLA_DIM_T
typedef uinteger fla_dim_t;
#endif

// --- Intrinsic/assembly definitions ----------------------------------------

#if FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#include "pmmintrin.h" // skipped

//typedef double v2df __attribute__ ((vector_size (16)));

typedef union
{
    __m128  v; 
    float   f[4];
} v4sf_t;

typedef union
{
    __m128d v; 
    double  d[2];
} v2df_t;

#endif

// --- FLAME object definitions -----------------------------------------------

typedef struct FLA_Lock_s     FLA_Lock;

//#ifdef FLA_ENABLE_MULTITHREADING
struct FLA_Lock_s
{
  // Implementation-specific lock object
#if   FLA_MULTITHREADING_MODEL == FLA_OPENMP
  omp_lock_t       lock;
#elif FLA_MULTITHREADING_MODEL == FLA_PTHREADS
  pthread_mutex_t  lock;
#endif
};
//#endif

#ifdef FLA_ENABLE_SUPERMATRIX
typedef int                   FLASH_Verbose;
typedef int                   FLASH_Data_aff;

typedef struct FLASH_Queue_s  FLASH_Queue;
typedef struct FLASH_Task_s   FLASH_Task;
typedef struct FLASH_Dep_s    FLASH_Dep;
#endif
typedef struct FLASH_Thread_s FLASH_Thread;

typedef struct FLA_Obj_struct
{
  // Basic object description fields
  FLA_Datatype  datatype;
  FLA_Elemtype  elemtype;
  fla_dim_t         m;
  fla_dim_t         n;
  fla_dim_t         rs;
  fla_dim_t         cs;
  fla_dim_t         m_inner;
  fla_dim_t         n_inner;
  unsigned long id;
  fla_dim_t         m_index;
  fla_dim_t         n_index;

  fla_dim_t         n_elem_alloc;
  void*         buffer;
  int           buffer_info;

  FLA_Uplo      uplo;

#ifdef FLA_ENABLE_SUPERMATRIX
  // Fields for supermatrix
  int           n_read_blocks;
  int           n_write_blocks;

  // All the tasks that previously read this block, anti-dependency
  int           n_read_tasks;
  FLASH_Dep*    read_task_head;
  FLASH_Dep*    read_task_tail;

  // Task that last overwrote this block, flow dependency
  FLASH_Task*   write_task;
#endif
} FLA_Base_obj;

typedef struct FLA_Obj_view
{
  // Basic object view description fields
  fla_dim_t         offm;
  fla_dim_t         offn;
  fla_dim_t         m;
  fla_dim_t         n;
  
  fla_dim_t         m_inner;
  fla_dim_t         n_inner;

  FLA_Base_obj* base;

} FLA_Obj;

#ifdef FLA_ENABLE_SUPERMATRIX
struct FLASH_Queue_s
{
  // Number of tasks currently in queue
  unsigned int  n_tasks;

  // Pointers to head (front) and tail (back) of queue
  FLASH_Task*   head;
  FLASH_Task*   tail;
};

struct FLASH_Task_s
{
  // Execution information
  int           n_ready;

  // Labels
  int           order;
  int           queue;
  int           height;
  int           thread;
  int           cache;
  FLA_Bool      hit;
      
  // Function pointer
  void*         func;

  // Control tree pointer
  void*         cntl;

  // Name of task
  char*         name;

  // GPU enabled task
  FLA_Bool      enabled_gpu;

  // Integer arguments
  int           n_int_args;
  int*          int_arg;

  // Constant FLA_Obj arguments
  int           n_fla_args;
  FLA_Obj*      fla_arg;

  // Input FLA_Obj arguments
  int           n_input_args;
  FLA_Obj*      input_arg;

  // Output FLA_Obj argument
  int           n_output_args;
  FLA_Obj*      output_arg;

  // Number of blocks within all macroblocks
  int           n_macro_args;

  // Number of write after read dependencies
  int           n_war_args;

  // Dependence information
  int           n_dep_args;
  FLASH_Dep*    dep_arg_head;
  FLASH_Dep*    dep_arg_tail;
  
  // Support for a doubly linked list of tasks
  FLASH_Task*   prev_task;
  FLASH_Task*   next_task;

  // Support for a doubly linked list for wait queue
  FLASH_Task*   prev_wait;
  FLASH_Task*   next_wait;
};

struct FLASH_Dep_s
{
  // Task yielding dependency
  FLASH_Task*   task;

  // Support for linked list of FLASH_Deps
  FLASH_Dep*    next_dep;
};
#endif // FLA_ENABLE_SUPERMATRIX

struct FLASH_Thread_s
{
  // The thread's unique identifier
  int       id;

  // Pointer to variables needed to execute SuperMatrix mechanism
  void*     args;

#if FLA_MULTITHREADING_MODEL == FLA_PTHREADS
  // The thread object. Only needed for the POSIX threads implementation.
  pthread_t pthread_obj;
#endif
};

#endif // FLA_TYPE_DEFS_H
// end FLA_type_defs.h

// --- Pointer-accessing FLAME macro definitions ------------------------------------

#define FLA_CONSTANT_I_OFFSET  0
#define FLA_CONSTANT_S_OFFSET  ( sizeof(double) )
#define FLA_CONSTANT_D_OFFSET  ( sizeof(double) + sizeof(double) )
#define FLA_CONSTANT_C_OFFSET  ( sizeof(double) + sizeof(double) + sizeof(double) )
#define FLA_CONSTANT_Z_OFFSET  ( sizeof(double) + sizeof(double) + sizeof(double) + sizeof( scomplex ) )
#define FLA_CONSTANT_SIZE      ( sizeof(double) + sizeof(double) + sizeof(double) + sizeof( scomplex ) + sizeof( dcomplex ) )

#define FLA_INT_PTR( x ) \
  ( ((x).base)->datatype == FLA_CONSTANT ? \
    ( ( integer * )      ( ( ( char * )     ((x).base)->buffer ) + FLA_CONSTANT_I_OFFSET             ) ) : \
                     ( ( ( integer * )      ((x).base)->buffer ) + ( size_t ) (x).offn * ((x).base)->cs + \
                                                               ( size_t ) (x).offm * ((x).base)->rs ) )

#define FLA_FLOAT_PTR( x ) \
  ( ((x).base)->datatype == FLA_CONSTANT ? \
    ( ( float * )    ( ( ( char * )     ((x).base)->buffer ) + FLA_CONSTANT_S_OFFSET             ) ) : \
                     ( ( ( float * )    ((x).base)->buffer ) + ( size_t ) (x).offn * ((x).base)->cs + \
                                                               ( size_t ) (x).offm * ((x).base)->rs ) )

#define FLA_DOUBLE_PTR( x ) \
  ( ((x).base)->datatype == FLA_CONSTANT ? \
    ( ( double * )   ( ( ( char * )     ((x).base)->buffer ) + FLA_CONSTANT_D_OFFSET             ) ) : \
                     ( ( ( double * )   ((x).base)->buffer ) + ( size_t ) (x).offn * ((x).base)->cs + \
                                                               ( size_t ) (x).offm * ((x).base)->rs ) )

#define FLA_COMPLEX_PTR( x ) \
  ( ((x).base)->datatype == FLA_CONSTANT ? \
    ( ( scomplex * ) ( ( ( char * )     ((x).base)->buffer ) + FLA_CONSTANT_C_OFFSET             ) ) : \
                     ( ( ( scomplex * ) ((x).base)->buffer ) + ( size_t ) (x).offn * ((x).base)->cs + \
                                                               ( size_t ) (x).offm * ((x).base)->rs ) )

#define FLA_DOUBLE_COMPLEX_PTR( x ) \
  ( ((x).base)->datatype == FLA_CONSTANT ? \
    ( ( dcomplex * ) ( ( ( char * )     ((x).base)->buffer ) + FLA_CONSTANT_Z_OFFSET             ) ) : \
                     ( ( ( dcomplex * ) ((x).base)->buffer ) + ( size_t ) (x).offn * ((x).base)->cs + \
                                                               ( size_t ) (x).offm * ((x).base)->rs ) )

// end FLA_macro_ptr_defs.h

  // Include "extern" definitions for global FLAME scalar constants.
// begin FLA_extern_defs.h


#ifndef FLA_EXTERN_DEFS_H
#define FLA_EXTERN_DEFS_H

extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_THREE;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_TWO;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_ONE;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_ONE_HALF;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_ZERO;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_MINUS_ONE_HALF;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_MINUS_ONE;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_MINUS_TWO;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_MINUS_THREE;

extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_EPSILON;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_SAFE_MIN;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_SAFE_MIN_SQUARE;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_SAFE_INV_MIN;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_SAFE_INV_MIN_SQUARE;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_UNDERFLOW_THRES;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_OVERFLOW_THRES;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_UNDERFLOW_SQUARE_THRES;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC FLA_Obj FLA_OVERFLOW_SQUARE_THRES;

extern LIBFLAME_IMPORT TLS_CLASS_SPEC const float    fzero;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC const double   dzero;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC const scomplex czero;
extern LIBFLAME_IMPORT TLS_CLASS_SPEC const dcomplex zzero;

#endif

// end FLA_extern_defs.h

  // Include control tree structure definitions, utility prototypes, and
  // initialization prototypes.
// begin FLA_Cntl.h


// Shared definitions

typedef struct FLA_Blocksize_s
{
	fla_dim_t s;
	fla_dim_t d;
	fla_dim_t c;
	fla_dim_t z;
} fla_blocksize_t;

#define FLA_SUBPROBLEM                  0
#define FLA_UNBLOCKED_EXTERN           10
#define FLA_BLOCKED_EXTERN             13

#define FLA_UNB_VAR_OFFSET             40
#define FLA_OPT_VAR_OFFSET             80
#define FLA_BLK_VAR_OFFSET            120
#define FLA_BLF_VAR_OFFSET            160

#define FLA_UNBLOCKED_VARIANT1        (FLA_UNB_VAR_OFFSET+1)
#define FLA_UNBLOCKED_VARIANT2        (FLA_UNB_VAR_OFFSET+2)
#define FLA_UNBLOCKED_VARIANT3        (FLA_UNB_VAR_OFFSET+3)
#define FLA_UNBLOCKED_VARIANT4        (FLA_UNB_VAR_OFFSET+4)
#define FLA_UNBLOCKED_VARIANT5        (FLA_UNB_VAR_OFFSET+5)
#define FLA_UNBLOCKED_VARIANT6        (FLA_UNB_VAR_OFFSET+6)
#define FLA_UNBLOCKED_VARIANT7        (FLA_UNB_VAR_OFFSET+7)
#define FLA_UNBLOCKED_VARIANT8        (FLA_UNB_VAR_OFFSET+8)
#define FLA_UNBLOCKED_VARIANT9        (FLA_UNB_VAR_OFFSET+9)
#define FLA_UNBLOCKED_VARIANT10       (FLA_UNB_VAR_OFFSET+10)

#define FLA_UNB_OPT_VARIANT1          (FLA_OPT_VAR_OFFSET+1)
#define FLA_UNB_OPT_VARIANT2          (FLA_OPT_VAR_OFFSET+2)
#define FLA_UNB_OPT_VARIANT3          (FLA_OPT_VAR_OFFSET+3)
#define FLA_UNB_OPT_VARIANT4          (FLA_OPT_VAR_OFFSET+4)
#define FLA_UNB_OPT_VARIANT5          (FLA_OPT_VAR_OFFSET+5)
#define FLA_UNB_OPT_VARIANT6          (FLA_OPT_VAR_OFFSET+6)
#define FLA_UNB_OPT_VARIANT7          (FLA_OPT_VAR_OFFSET+7)
#define FLA_UNB_OPT_VARIANT8          (FLA_OPT_VAR_OFFSET+8)
#define FLA_UNB_OPT_VARIANT9          (FLA_OPT_VAR_OFFSET+9)
#define FLA_UNB_OPT_VARIANT10         (FLA_OPT_VAR_OFFSET+10)

#define FLA_BLOCKED_VARIANT1          (FLA_BLK_VAR_OFFSET+1)
#define FLA_BLOCKED_VARIANT2          (FLA_BLK_VAR_OFFSET+2)
#define FLA_BLOCKED_VARIANT3          (FLA_BLK_VAR_OFFSET+3)
#define FLA_BLOCKED_VARIANT4          (FLA_BLK_VAR_OFFSET+4)
#define FLA_BLOCKED_VARIANT5          (FLA_BLK_VAR_OFFSET+5)
#define FLA_BLOCKED_VARIANT6          (FLA_BLK_VAR_OFFSET+6)
#define FLA_BLOCKED_VARIANT7          (FLA_BLK_VAR_OFFSET+7)
#define FLA_BLOCKED_VARIANT8          (FLA_BLK_VAR_OFFSET+8)
#define FLA_BLOCKED_VARIANT9          (FLA_BLK_VAR_OFFSET+9)
#define FLA_BLOCKED_VARIANT10         (FLA_BLK_VAR_OFFSET+10)
#define FLA_BLOCKED_VARIANT11         (FLA_BLK_VAR_OFFSET+11)
#define FLA_BLOCKED_VARIANT12         (FLA_BLK_VAR_OFFSET+12)
#define FLA_BLOCKED_VARIANT13         (FLA_BLK_VAR_OFFSET+13)
#define FLA_BLOCKED_VARIANT14         (FLA_BLK_VAR_OFFSET+14)
#define FLA_BLOCKED_VARIANT15         (FLA_BLK_VAR_OFFSET+15)
#define FLA_BLOCKED_VARIANT16         (FLA_BLK_VAR_OFFSET+16)
#define FLA_BLOCKED_VARIANT17         (FLA_BLK_VAR_OFFSET+17)
#define FLA_BLOCKED_VARIANT18         (FLA_BLK_VAR_OFFSET+18)
#define FLA_BLOCKED_VARIANT19         (FLA_BLK_VAR_OFFSET+19)
#define FLA_BLOCKED_VARIANT20         (FLA_BLK_VAR_OFFSET+20)

#define FLA_BLK_FUS_VARIANT1          (FLA_BLF_VAR_OFFSET+1)
#define FLA_BLK_FUS_VARIANT2          (FLA_BLF_VAR_OFFSET+2)
#define FLA_BLK_FUS_VARIANT3          (FLA_BLF_VAR_OFFSET+3)
#define FLA_BLK_FUS_VARIANT4          (FLA_BLF_VAR_OFFSET+4)
#define FLA_BLK_FUS_VARIANT5          (FLA_BLF_VAR_OFFSET+5)
#define FLA_BLK_FUS_VARIANT6          (FLA_BLF_VAR_OFFSET+6)
#define FLA_BLK_FUS_VARIANT7          (FLA_BLF_VAR_OFFSET+7)
#define FLA_BLK_FUS_VARIANT8          (FLA_BLF_VAR_OFFSET+8)
#define FLA_BLK_FUS_VARIANT9          (FLA_BLF_VAR_OFFSET+9)
#define FLA_BLK_FUS_VARIANT10         (FLA_BLF_VAR_OFFSET+10)

#define FLA_Cntl_matrix_type( cntl )  cntl->matrix_type
#define FLA_Cntl_blocksize( cntl )    cntl->blocksize
#define FLA_Cntl_variant( cntl )      cntl->variant

void FLA_Cntl_obj_free( void* cntl );


// Include the control tree definitions for each class of operation.
// begin FLA_Cntl_blas1.h



//
// Level-1 BLAS
//

struct fla_axpy_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_axpy_s* sub_axpy;
};
typedef struct fla_axpy_s fla_axpy_t;


struct fla_axpyt_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_axpyt_s* sub_axpyt;
};
typedef struct fla_axpyt_s fla_axpyt_t;


struct fla_copy_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_copy_s* sub_copy;
};
typedef struct fla_copy_s fla_copy_t;


struct fla_copyt_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_copyt_s* sub_copyt;
};
typedef struct fla_copyt_s fla_copyt_t;


struct fla_copyr_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_copyr_s* sub_copyr;
	struct fla_copy_s*  sub_copy;
};
typedef struct fla_copyr_s fla_copyr_t;


struct fla_scal_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
};
typedef struct fla_scal_s fla_scal_t;


struct fla_scalr_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_scalr_s* sub_scalr;
	struct fla_scal_s*  sub_scal;
};
typedef struct fla_scalr_s fla_scalr_t;


struct fla_swap_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_swap_s* sub_swap;
};
typedef struct fla_swap_s fla_swap_t;


struct fla_tpose_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_tpose_s* sub_trans;
	struct fla_swap_s*  sub_swap;
};
typedef struct fla_tpose_s fla_tpose_t;


#define FLA_Cntl_sub_axpy( cntl )     cntl->sub_axpy
#define FLA_Cntl_sub_axpy1( cntl )    cntl->sub_axpy1
#define FLA_Cntl_sub_axpy2( cntl )    cntl->sub_axpy2
#define FLA_Cntl_sub_axpy3( cntl )    cntl->sub_axpy3
#define FLA_Cntl_sub_axpyt( cntl )    cntl->sub_axpyt
#define FLA_Cntl_sub_copy( cntl )     cntl->sub_copy
#define FLA_Cntl_sub_copyt( cntl )    cntl->sub_copyt
#define FLA_Cntl_sub_copyr( cntl )    cntl->sub_copyr
#define FLA_Cntl_sub_scal( cntl )     cntl->sub_scal
#define FLA_Cntl_sub_scalr( cntl )    cntl->sub_scalr
#define FLA_Cntl_sub_swap( cntl )     cntl->sub_swap
#define FLA_Cntl_sub_trans( cntl )    cntl->sub_trans


fla_axpy_t* FLA_Cntl_axpy_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_axpy_t*      sub_axpy );
fla_axpyt_t* FLA_Cntl_axpyt_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_axpyt_t*     sub_axpyt );
fla_copy_t* FLA_Cntl_copy_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_copy_t*      sub_copy );
fla_copyt_t* FLA_Cntl_copyt_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_copyt_t*     sub_copyt );
fla_copyr_t* FLA_Cntl_copyr_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_copyr_t*     sub_copyr,
                                        fla_copy_t*      sub_copy );
fla_scal_t* FLA_Cntl_scal_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal );
fla_scalr_t* FLA_Cntl_scalr_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_scalr_t*     sub_scalr,
                                        fla_scal_t*      sub_scal );
fla_swap_t* FLA_Cntl_swap_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_swap_t*      sub_swap );
fla_tpose_t* FLA_Cntl_tpose_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_tpose_t*     sub_trans,
                                        fla_swap_t*      sub_swap );

// end FLA_Cntl_blas1.h
// begin FLA_Cntl_blas2.h



//
// Level-2 BLAS
//

struct fla_gemv_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
	struct fla_gemv_s* sub_gemv;
};
typedef struct fla_gemv_s fla_gemv_t;

struct fla_trsv_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_trsv_s* sub_trsv;
	struct fla_gemv_s* sub_gemv;
};
typedef struct fla_trsv_s fla_trsv_t;


#define FLA_Cntl_sub_gemv( cntl )     cntl->sub_gemv
#define FLA_Cntl_sub_trsv( cntl )     cntl->sub_trsv


fla_gemv_t* FLA_Cntl_gemv_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_gemv_t*      sub_gemv );
fla_trsv_t* FLA_Cntl_trsv_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_trsv_t*      sub_trsv,
                                      fla_gemv_t*      sub_gemv );

// end FLA_Cntl_blas2.h
// begin FLA_Cntl_blas3.h



//
// Level-3 BLAS
//

struct fla_gemm_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
	struct fla_gemm_s* sub_gemm;
};
typedef struct fla_gemm_s fla_gemm_t;


struct fla_hemm_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
	struct fla_hemm_s* sub_hemm;
	struct fla_gemm_s* sub_gemm1;
	struct fla_gemm_s* sub_gemm2;
};
typedef struct fla_hemm_s fla_hemm_t;


struct fla_herk_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_scalr_s* sub_scalr;
	struct fla_herk_s*  sub_herk;
	struct fla_gemm_s*  sub_gemm;
};
typedef struct fla_herk_s fla_herk_t;


struct fla_her2k_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_scalr_s* sub_scalr;
	struct fla_her2k_s* sub_her2k;
	struct fla_gemm_s*  sub_gemm1;
	struct fla_gemm_s*  sub_gemm2;
};
typedef struct fla_her2k_s fla_her2k_t;


struct fla_symm_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
	struct fla_symm_s* sub_symm;
	struct fla_gemm_s* sub_gemm1;
	struct fla_gemm_s* sub_gemm2;
};
typedef struct fla_symm_s fla_symm_t;


struct fla_syrk_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_scalr_s* sub_scalr;
	struct fla_syrk_s*  sub_syrk;
	struct fla_gemm_s*  sub_gemm;
};
typedef struct fla_syrk_s fla_syrk_t;


struct fla_syr2k_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_scalr_s* sub_scalr;
	struct fla_syr2k_s* sub_syr2k;
	struct fla_gemm_s*  sub_gemm1;
	struct fla_gemm_s*  sub_gemm2;
};
typedef struct fla_syr2k_s fla_syr2k_t;


struct fla_trmm_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
	struct fla_trmm_s* sub_trmm;
	struct fla_gemm_s* sub_gemm;
};
typedef struct fla_trmm_s fla_trmm_t;


struct fla_trsm_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_scal_s* sub_scal;
	struct fla_trsm_s* sub_trsm;
	struct fla_gemm_s* sub_gemm;
};
typedef struct fla_trsm_s fla_trsm_t;


#define FLA_Cntl_sub_gemm( cntl )     cntl->sub_gemm
#define FLA_Cntl_sub_gemm1( cntl )    cntl->sub_gemm1
#define FLA_Cntl_sub_gemm2( cntl )    cntl->sub_gemm2
#define FLA_Cntl_sub_gemm3( cntl )    cntl->sub_gemm3
#define FLA_Cntl_sub_gemm4( cntl )    cntl->sub_gemm4
#define FLA_Cntl_sub_gemm5( cntl )    cntl->sub_gemm5
#define FLA_Cntl_sub_gemm6( cntl )    cntl->sub_gemm6
#define FLA_Cntl_sub_gemm7( cntl )    cntl->sub_gemm7
#define FLA_Cntl_sub_gemm8( cntl )    cntl->sub_gemm8
#define FLA_Cntl_sub_hemm( cntl )     cntl->sub_hemm
#define FLA_Cntl_sub_hemm1( cntl )    cntl->sub_hemm1
#define FLA_Cntl_sub_hemm2( cntl )    cntl->sub_hemm2
#define FLA_Cntl_sub_herk( cntl )     cntl->sub_herk
#define FLA_Cntl_sub_herk1( cntl )    cntl->sub_herk1
#define FLA_Cntl_sub_herk2( cntl )    cntl->sub_herk2
#define FLA_Cntl_sub_her2k( cntl )    cntl->sub_her2k
#define FLA_Cntl_sub_symm( cntl )     cntl->sub_symm
#define FLA_Cntl_sub_syrk( cntl )     cntl->sub_syrk
#define FLA_Cntl_sub_syr2k( cntl )    cntl->sub_syr2k
#define FLA_Cntl_sub_trmm( cntl )     cntl->sub_trmm
#define FLA_Cntl_sub_trmm1( cntl )    cntl->sub_trmm1
#define FLA_Cntl_sub_trmm2( cntl )    cntl->sub_trmm2
#define FLA_Cntl_sub_trsm( cntl )     cntl->sub_trsm
#define FLA_Cntl_sub_trsm1( cntl )    cntl->sub_trsm1
#define FLA_Cntl_sub_trsm2( cntl )    cntl->sub_trsm2
#define FLA_Cntl_sub_trsm3( cntl )    cntl->sub_trsm3
#define FLA_Cntl_sub_trsm4( cntl )    cntl->sub_trsm4


fla_gemm_t* FLA_Cntl_gemm_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_gemm_t*      sub_gemm );
fla_hemm_t* FLA_Cntl_hemm_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_hemm_t*      sub_hemm,
                                      fla_gemm_t*      sub_gemm1,
                                      fla_gemm_t*      sub_gemm2 );
fla_herk_t* FLA_Cntl_herk_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scalr_t*     sub_scalr,
                                      fla_herk_t*      sub_herk,
                                      fla_gemm_t*      sub_gemm );
fla_her2k_t* FLA_Cntl_her2k_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_scalr_t*     sub_scalr,
                                        fla_her2k_t*     sub_her2k,
                                        fla_gemm_t*      sub_gemm1,
                                        fla_gemm_t*      sub_gemm2 );
fla_symm_t* FLA_Cntl_symm_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_symm_t*      sub_symm,
                                      fla_gemm_t*      sub_gemm1,
                                      fla_gemm_t*      sub_gemm2 );
fla_syrk_t* FLA_Cntl_syrk_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scalr_t*     sub_scalr,
                                      fla_syrk_t*      sub_syrk,
                                      fla_gemm_t*      sub_gemm );
fla_syr2k_t* FLA_Cntl_syr2k_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_scalr_t*     sub_scalr,
                                        fla_syr2k_t*     sub_syr2k,
                                        fla_gemm_t*      sub_gemm1,
                                        fla_gemm_t*      sub_gemm2 );
fla_trmm_t* FLA_Cntl_trmm_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_trmm_t*      sub_trmm,
                                      fla_gemm_t*      sub_gemm );
fla_trsm_t* FLA_Cntl_trsm_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_trsm_t*      sub_trsm,
                                      fla_gemm_t*      sub_gemm );

// end FLA_Cntl_blas3.h
// begin FLA_Cntl_lapack.h



//
// LAPACK-level
//

struct fla_chol_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_chol_s* sub_chol;
	struct fla_herk_s* sub_herk;
	struct fla_trsm_s* sub_trsm;
	struct fla_gemm_s* sub_gemm;
};
typedef struct fla_chol_s fla_chol_t;


struct fla_ttmm_s
{
	FLA_Matrix_type    matrix_type;
	int                variant;
	fla_blocksize_t*   blocksize;
	struct fla_ttmm_s* sub_ttmm;
	struct fla_herk_s* sub_herk;
	struct fla_trmm_s* sub_trmm;
	struct fla_gemm_s* sub_gemm;
};
typedef struct fla_ttmm_s fla_ttmm_t;


struct fla_appiv_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_appiv_s* sub_appiv;
};
typedef struct fla_appiv_s fla_appiv_t;


struct fla_lu_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_lu_s*    sub_lu;
	struct fla_gemm_s*  sub_gemm1;
	struct fla_gemm_s*  sub_gemm2;
	struct fla_gemm_s*  sub_gemm3;
	struct fla_trsm_s*  sub_trsm1;
	struct fla_trsm_s*  sub_trsm2;
	struct fla_appiv_s* sub_appiv1;
	struct fla_appiv_s* sub_appiv2;
};
typedef struct fla_lu_s fla_lu_t;


struct fla_qr_ut_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_qr_ut_s* sub_qrut;
	struct fla_apqut_s* sub_apqut;
};
typedef struct fla_qr_ut_s fla_qrut_t;


struct fla_qr2_ut_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_qr2_ut_s*   sub_qr2ut;
	struct fla_gemm_s*     sub_gemm1;
	struct fla_gemm_s*     sub_gemm2;
	struct fla_trsm_s*     sub_trsm;
	struct fla_copy_s*     sub_copy;
	struct fla_axpy_s*     sub_axpy;
};
typedef struct fla_qr2_ut_s fla_qr2ut_t;


struct fla_lq_ut_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_lq_ut_s* sub_lqut;
	struct fla_apqut_s* sub_apqut;
};
typedef struct fla_lq_ut_s fla_lqut_t;

struct fla_caqr2ut_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_caqr2ut_s*  sub_caqr2ut;
	struct fla_gemm_s*     sub_gemm1;
	struct fla_gemm_s*     sub_gemm2;
	struct fla_trmm_s*     sub_trmm1;
	struct fla_trmm_s*     sub_trmm2;
	struct fla_trsm_s*     sub_trsm;
	struct fla_axpy_s*     sub_axpy1;
	struct fla_axpy_s*     sub_axpy2;
	struct fla_axpy_s*     sub_axpy3;
	struct fla_copy_s*     sub_copy;
};
typedef struct fla_caqr2ut_s fla_caqr2ut_t;


struct fla_hess_ut_s
{
	FLA_Matrix_type       matrix_type;
	int                   variant;
	fla_blocksize_t*      blocksize;
};
typedef struct fla_hess_ut_s fla_hessut_t;

struct fla_tridiag_ut_s
{
	FLA_Matrix_type       matrix_type;
	int                   variant;
	fla_blocksize_t*      blocksize;
};
typedef struct fla_tridiag_ut_s fla_tridiagut_t;

struct fla_bidiag_ut_s
{
	FLA_Matrix_type       matrix_type;
	int                   variant;
	fla_blocksize_t*      blocksize;
};
typedef struct fla_bidiag_ut_s fla_bidiagut_t;

struct fla_trinv_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_trinv_s* sub_trinv;
	struct fla_gemm_s*  sub_gemm;
	struct fla_trmm_s*  sub_trmm;
	struct fla_trsm_s*  sub_trsm1;
	struct fla_trsm_s*  sub_trsm2;
};
typedef struct fla_trinv_s fla_trinv_t;


struct fla_sylv_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_sylv_s*  sub_sylv1;
	struct fla_sylv_s*  sub_sylv2;
	struct fla_sylv_s*  sub_sylv3;
	struct fla_gemm_s*  sub_gemm1;
	struct fla_gemm_s*  sub_gemm2;
	struct fla_gemm_s*  sub_gemm3;
	struct fla_gemm_s*  sub_gemm4;
	struct fla_gemm_s*  sub_gemm5;
	struct fla_gemm_s*  sub_gemm6;
	struct fla_gemm_s*  sub_gemm7;
	struct fla_gemm_s*  sub_gemm8;
};
typedef struct fla_sylv_s fla_sylv_t;


struct fla_lyap_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_scal_s*  sub_scal;
	struct fla_lyap_s*  sub_lyap;
	struct fla_sylv_s*  sub_sylv;
	struct fla_gemm_s*  sub_gemm1;
	struct fla_gemm_s*  sub_gemm2;
	struct fla_hemm_s*  sub_hemm;
	struct fla_her2k_s* sub_her2k;
};
typedef struct fla_lyap_s fla_lyap_t;


struct fla_spdinv_s
{
	FLA_Matrix_type     matrix_type;
	int                 variant;
	fla_blocksize_t*    blocksize;
	struct fla_chol_s*  sub_chol;
	struct fla_trinv_s* sub_trinv;
	struct fla_ttmm_s*  sub_ttmm;
};
typedef struct fla_spdinv_s fla_spdinv_t;


struct fla_apqut_s
{
	FLA_Matrix_type      matrix_type;
	int                  variant;
	fla_blocksize_t*     blocksize;
	struct fla_apqut_s*  sub_apqut;
	struct fla_trmm_s*   sub_trmm1;
	struct fla_trmm_s*   sub_trmm2;
	struct fla_gemm_s*   sub_gemm1;
	struct fla_gemm_s*   sub_gemm2;
	struct fla_trsm_s*   sub_trsm;
	struct fla_copyt_s*  sub_copyt;
	struct fla_axpyt_s*  sub_axpyt;
};
typedef struct fla_apqut_s fla_apqut_t;


struct fla_apq2ut_s
{
	FLA_Matrix_type       matrix_type;
	int                   variant;
	fla_blocksize_t*      blocksize;
	struct fla_apq2ut_s*  sub_apq2ut;
	struct fla_gemm_s*    sub_gemm1;
	struct fla_gemm_s*    sub_gemm2;
	struct fla_trsm_s*    sub_trsm;
	struct fla_copyt_s*   sub_copyt;
	struct fla_axpyt_s*   sub_axpyt;
};
typedef struct fla_apq2ut_s fla_apq2ut_t;


struct fla_caqrutinc_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_caqr2ut_s*  sub_caqr2ut;
	struct fla_apcaq2ut_s* sub_apcaq2ut;
};
typedef struct fla_caqrutinc_s fla_caqrutinc_t;


struct fla_apcaqutinc_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_apcaq2ut_s* sub_apcaq2ut;
};
typedef struct fla_apcaqutinc_s fla_apcaqutinc_t;


struct fla_apcaq2ut_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_apcaq2ut_s* sub_apcaq2ut;
	struct fla_gemm_s*     sub_gemm1;
	struct fla_gemm_s*     sub_gemm2;
	struct fla_trmm_s*     sub_trmm1;
	struct fla_trmm_s*     sub_trmm2;
	struct fla_trsm_s*     sub_trsm;
	struct fla_axpy_s*     sub_axpy1;
	struct fla_axpy_s*     sub_axpy2;
	struct fla_axpy_s*     sub_axpy3;
	struct fla_copy_s*     sub_copy;
};
typedef struct fla_apcaq2ut_s fla_apcaq2ut_t;


struct fla_qr_ut_inc_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_qr_ut_s*    sub_qrut;
	struct fla_qr2_ut_s*   sub_qr2ut;
	struct fla_apqut_s*    sub_apqut;
	struct fla_apq2ut_s*   sub_apq2ut;
};
typedef struct fla_qr_ut_inc_s fla_qrutinc_t;


struct fla_apqutinc_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_apqut_s*    sub_apqut;
	struct fla_apq2ut_s*   sub_apq2ut;
};
typedef struct fla_apqutinc_s fla_apqutinc_t;


struct fla_uddateut_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_uddateut_s* sub_uddateut;
	struct fla_apqudut_s*  sub_apqudut;
};
typedef struct fla_uddateut_s fla_uddateut_t;


struct fla_apqudut_s
{
	FLA_Matrix_type       matrix_type;
	int                   variant;
	fla_blocksize_t*      blocksize;
	struct fla_apqudut_s* sub_apqudut;
	struct fla_gemm_s*    sub_gemm1;
	struct fla_gemm_s*    sub_gemm2;
	struct fla_gemm_s*    sub_gemm3;
	struct fla_gemm_s*    sub_gemm4;
	struct fla_trsm_s*    sub_trsm;
	struct fla_copyt_s*   sub_copyt;
	struct fla_axpyt_s*   sub_axpyt;
};
typedef struct fla_apqudut_s fla_apqudut_t;


struct fla_uddateutinc_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_uddateut_s* sub_uddateut;
	struct fla_apqudut_s*  sub_apqudut;
};
typedef struct fla_uddateutinc_s fla_uddateutinc_t;


struct fla_apqudutinc_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_apqudut_s*  sub_apqudut;
};
typedef struct fla_apqudutinc_s fla_apqudutinc_t;


struct fla_eig_gest_s
{
	FLA_Matrix_type        matrix_type;
	int                    variant;
	fla_blocksize_t*       blocksize;
	struct fla_eig_gest_s* sub_eig_gest;
	struct fla_axpy_s*     sub_axpy1;
	struct fla_axpy_s*     sub_axpy2;
	struct fla_gemm_s*     sub_gemm1;
	struct fla_gemm_s*     sub_gemm2;
	struct fla_gemm_s*     sub_gemm3;
	struct fla_hemm_s*     sub_hemm;
	struct fla_her2k_s*    sub_her2k;
	struct fla_trmm_s*     sub_trmm1;
	struct fla_trmm_s*     sub_trmm2;
	struct fla_trsm_s*     sub_trsm1;
	struct fla_trsm_s*     sub_trsm2;
};
typedef struct fla_eig_gest_s fla_eig_gest_t;


#define FLA_Cntl_sub_chol( cntl )      cntl->sub_chol
#define FLA_Cntl_sub_lu( cntl )        cntl->sub_lu
#define FLA_Cntl_sub_qr( cntl )        cntl->sub_qr
#define FLA_Cntl_sub_qrut( cntl )      cntl->sub_qrut
#define FLA_Cntl_sub_qr2ut( cntl )     cntl->sub_qr2ut
#define FLA_Cntl_sub_lq( cntl )        cntl->sub_lq
#define FLA_Cntl_sub_lqut( cntl )      cntl->sub_lqut
#define FLA_Cntl_sub_caqr2ut( cntl )   cntl->sub_caqr2ut
#define FLA_Cntl_sub_trinv( cntl )     cntl->sub_trinv
#define FLA_Cntl_sub_ttmm( cntl )      cntl->sub_ttmm
#define FLA_Cntl_sub_sylv( cntl )      cntl->sub_sylv
#define FLA_Cntl_sub_sylv1( cntl )     cntl->sub_sylv1
#define FLA_Cntl_sub_sylv2( cntl )     cntl->sub_sylv2
#define FLA_Cntl_sub_sylv3( cntl )     cntl->sub_sylv3
#define FLA_Cntl_sub_lyap( cntl )      cntl->sub_lyap
#define FLA_Cntl_sub_appiv( cntl )     cntl->sub_appiv
#define FLA_Cntl_sub_appiv1( cntl )    cntl->sub_appiv1
#define FLA_Cntl_sub_appiv2( cntl )    cntl->sub_appiv2
#define FLA_Cntl_sub_apqut( cntl )     cntl->sub_apqut
#define FLA_Cntl_sub_apq2ut( cntl )    cntl->sub_apq2ut
#define FLA_Cntl_sub_apcaq2ut( cntl )  cntl->sub_apcaq2ut
#define FLA_Cntl_sub_uddateut( cntl )  cntl->sub_uddateut
#define FLA_Cntl_sub_apqudut( cntl )   cntl->sub_apqudut
#define FLA_Cntl_sub_hessut( cntl )    cntl->sub_hessut
#define FLA_Cntl_sub_tridiagut( cntl ) cntl->sub_tridiagut
#define FLA_Cntl_sub_bidiagut( cntl )  cntl->sub_bidiagut
#define FLA_Cntl_sub_eig_gest( cntl )  cntl->sub_eig_gest


fla_chol_t* FLA_Cntl_chol_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_chol_t*      sub_chol,
                                      fla_herk_t*      sub_herk,
                                      fla_trsm_t*      sub_trsm,
                                      fla_gemm_t*      sub_gemm );
fla_lu_t* FLA_Cntl_lu_obj_create( FLA_Matrix_type  matrix_type,
                                  int              variant,
                                  fla_blocksize_t* blocksize,
                                  fla_lu_t*        sub_lu,
                                  fla_gemm_t*      sub_gemm1,
                                  fla_gemm_t*      sub_gemm2,
                                  fla_gemm_t*      sub_gemm3,
                                  fla_trsm_t*      sub_trsm1,
                                  fla_trsm_t*      sub_trsm2,
                                  fla_appiv_t*     sub_appiv1,
                                  fla_appiv_t*     sub_appiv2 );
fla_appiv_t* FLA_Cntl_appiv_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_appiv_t*     sub_appiv );
fla_qrut_t* FLA_Cntl_qrut_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_qrut_t*      sub_qrut,
                                      fla_apqut_t*     sub_apqut );
fla_qr2ut_t* FLA_Cntl_qr2ut_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_qr2ut_t*     sub_qr2ut,
                                        fla_gemm_t*      sub_gemm1,
                                        fla_gemm_t*      sub_gemm2,
                                        fla_trsm_t*      sub_trsm,
                                        fla_copy_t*      sub_copy,
                                        fla_axpy_t*      sub_axpy );
fla_lqut_t* FLA_Cntl_lqut_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_lqut_t*      sub_lqut,
                                      fla_apqut_t*     sub_apqut );
fla_caqr2ut_t* FLA_Cntl_caqr2ut_obj_create( FLA_Matrix_type  matrix_type,
                                            int              variant,
                                            fla_blocksize_t* blocksize,
                                            fla_caqr2ut_t*   sub_caqr2ut,
                                            fla_gemm_t*      sub_gemm1,
                                            fla_gemm_t*      sub_gemm2,
                                            fla_trmm_t*      sub_trmm1,
                                            fla_trmm_t*      sub_trmm2,
                                            fla_trsm_t*      sub_trsm,
                                            fla_axpy_t*      sub_axpy1,
                                            fla_axpy_t*      sub_axpy2,
                                            fla_axpy_t*      sub_axpy3,
                                            fla_copy_t*      sub_copy );
fla_hessut_t* FLA_Cntl_hessut_obj_create( FLA_Matrix_type  matrix_type,
                                          int              variant,
                                          fla_blocksize_t* blocksize );
fla_tridiagut_t* FLA_Cntl_tridiagut_obj_create( FLA_Matrix_type  matrix_type,
                                                int              variant,
                                                fla_blocksize_t* blocksize );
fla_bidiagut_t* FLA_Cntl_bidiagut_obj_create( FLA_Matrix_type  matrix_type,
                                              int              variant,
                                              fla_blocksize_t* blocksize );
fla_trinv_t* FLA_Cntl_trinv_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_trinv_t*     sub_trinv,
                                        fla_trmm_t*      sub_trmm,
                                        fla_trsm_t*      sub_trsm1,
                                        fla_trsm_t*      sub_trsm2,
                                        fla_gemm_t*      sub_gemm );
fla_ttmm_t* FLA_Cntl_ttmm_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_ttmm_t*      sub_ttmm,
                                      fla_herk_t*      sub_herk,
                                      fla_trmm_t*      sub_trmm,
                                      fla_gemm_t*      sub_gemm );
fla_sylv_t* FLA_Cntl_sylv_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_sylv_t*      sub_sylv1,
                                      fla_sylv_t*      sub_sylv2,
                                      fla_sylv_t*      sub_sylv3,
                                      fla_gemm_t*      sub_gemm1,
                                      fla_gemm_t*      sub_gemm2,
                                      fla_gemm_t*      sub_gemm3,
                                      fla_gemm_t*      sub_gemm4,
                                      fla_gemm_t*      sub_gemm5,
                                      fla_gemm_t*      sub_gemm6,
                                      fla_gemm_t*      sub_gemm7,
                                      fla_gemm_t*      sub_gemm8 );
fla_lyap_t* FLA_Cntl_lyap_obj_create( FLA_Matrix_type  matrix_type,
                                      int              variant,
                                      fla_blocksize_t* blocksize,
                                      fla_scal_t*      sub_scal,
                                      fla_lyap_t*      sub_lyap,
                                      fla_sylv_t*      sub_sylv,
                                      fla_gemm_t*      sub_gemm1,
                                      fla_gemm_t*      sub_gemm2,
                                      fla_hemm_t*      sub_hemm,
                                      fla_her2k_t*     sub_her2k );
fla_spdinv_t* FLA_Cntl_spdinv_obj_create( FLA_Matrix_type  matrix_type,
                                          int              variant,
                                          fla_blocksize_t* blocksize,
                                          fla_chol_t*      sub_chol,
                                          fla_trinv_t*     sub_trinv,
                                          fla_ttmm_t*      sub_ttmm );
fla_apqut_t* FLA_Cntl_apqut_obj_create( FLA_Matrix_type  matrix_type,
                                        int              variant,
                                        fla_blocksize_t* blocksize,
                                        fla_apqut_t*     sub_apqut,
                                        fla_trmm_t*      sub_trmm1,
                                        fla_trmm_t*      sub_trmm2,
                                        fla_gemm_t*      sub_gemm1,
                                        fla_gemm_t*      sub_gemm2,
                                        fla_trsm_t*      sub_trsm,
                                        fla_copyt_t*     sub_copyt,
                                        fla_axpyt_t*     sub_axpyt );
fla_apq2ut_t* FLA_Cntl_apq2ut_obj_create( FLA_Matrix_type  matrix_type,
                                          int              variant,
                                          fla_blocksize_t* blocksize,
                                          fla_apq2ut_t*    sub_apq2ut,
                                          fla_gemm_t*      sub_gemm1,
                                          fla_gemm_t*      sub_gemm2,
                                          fla_trsm_t*      sub_trsm,
                                          fla_copyt_t*     sub_copyt,
                                          fla_axpyt_t*     sub_axpyt );
fla_apcaq2ut_t* FLA_Cntl_apcaq2ut_obj_create( FLA_Matrix_type  matrix_type,
                                              int              variant,
                                              fla_blocksize_t* blocksize,
                                              fla_apcaq2ut_t*  sub_apcaq2ut,
                                              fla_gemm_t*      sub_gemm1,
                                              fla_gemm_t*      sub_gemm2,
                                              fla_trmm_t*      sub_trmm1,
                                              fla_trmm_t*      sub_trmm2,
                                              fla_trsm_t*      sub_trsm,
                                              fla_axpy_t*      sub_axpy1,
                                              fla_axpy_t*      sub_axpy2,
                                              fla_axpy_t*      sub_axpy3,
                                              fla_copy_t*      sub_copy );
fla_qrutinc_t* FLA_Cntl_qrutinc_obj_create( FLA_Matrix_type  matrix_type,
                                            int              variant,
                                            fla_blocksize_t* blocksize,
                                            fla_qrut_t*      sub_qrut,
                                            fla_apqut_t*     sub_apqut,
                                            fla_qr2ut_t*     sub_qr2ut,
                                            fla_apq2ut_t*    sub_apq2ut );
fla_apqutinc_t* FLA_Cntl_apqutinc_obj_create( FLA_Matrix_type  matrix_type,
                                              int              variant,
                                              fla_blocksize_t* blocksize,
                                              fla_apqut_t*     sub_apqut,
                                              fla_apq2ut_t*    sub_apq2ut );
fla_caqrutinc_t* FLA_Cntl_caqrutinc_obj_create( FLA_Matrix_type  matrix_type,
                                                int              variant,
                                                fla_blocksize_t* blocksize,
                                                fla_caqr2ut_t*   sub_caqr2ut,
                                                fla_apcaq2ut_t*  sub_apcaq2ut );
fla_apcaqutinc_t* FLA_Cntl_apcaqutinc_obj_create( FLA_Matrix_type  matrix_type,
                                                  int              variant,
                                                  fla_blocksize_t* blocksize,
                                                  fla_apcaq2ut_t*  sub_apcaq2ut );
fla_uddateut_t* FLA_Cntl_uddateut_obj_create( FLA_Matrix_type  matrix_type,
                                              int              variant,
                                              fla_blocksize_t* blocksize,
                                              fla_uddateut_t*  sub_uddateut,
                                              fla_apqudut_t*   sub_apqudut );
fla_apqudut_t* FLA_Cntl_apqudut_obj_create( FLA_Matrix_type  matrix_type,
                                            int              variant,
                                            fla_blocksize_t* blocksize,
                                            fla_apqudut_t*   sub_apq2ut,
                                            fla_gemm_t*      sub_gemm1,
                                            fla_gemm_t*      sub_gemm2,
                                            fla_gemm_t*      sub_gemm3,
                                            fla_gemm_t*      sub_gemm4,
                                            fla_trsm_t*      sub_trsm,
                                            fla_copyt_t*     sub_copyt,
                                            fla_axpyt_t*     sub_axpyt );
fla_uddateutinc_t* FLA_Cntl_uddateutinc_obj_create( FLA_Matrix_type  matrix_type,
                                                    int              variant,
                                                    fla_blocksize_t* blocksize,
                                                    fla_uddateut_t*  sub_uddateut,
                                                    fla_apqudut_t*   sub_apqudut );
fla_apqudutinc_t* FLA_Cntl_apqudutinc_obj_create( FLA_Matrix_type  matrix_type,
                                                  int              variant,
                                                  fla_blocksize_t* blocksize,
                                                  fla_apqudut_t*   sub_apqudut );
fla_eig_gest_t* FLA_Cntl_eig_gest_obj_create( FLA_Matrix_type  matrix_type,
                                              int              variant,
                                              fla_blocksize_t* blocksize,
                                              fla_eig_gest_t*  sub_eig_gest,
                                              fla_axpy_t*      sub_axpy1,
                                              fla_axpy_t*      sub_axpy2,
                                              fla_gemm_t*      sub_gemm1,
                                              fla_gemm_t*      sub_gemm2,
                                              fla_gemm_t*      sub_gemm3,
                                              fla_hemm_t*      sub_hemm,
                                              fla_her2k_t*     sub_her2k,
                                              fla_trmm_t*      sub_trmm1,
                                              fla_trmm_t*      sub_trmm2,
                                              fla_trsm_t*      sub_trsm1,
                                              fla_trsm_t*      sub_trsm2 );

// end FLA_Cntl_lapack.h

// end FLA_Cntl.h
// begin FLA_Cntl_init.h


// begin FLA_Cntl_init_flamec.h


void FLA_Cntl_init_flamec( void );
void FLA_Cntl_finalize_flamec( void );


// --- Base library prototypes -------------------------------------------------
void FLA_Transpose_cntl_init( void );

void FLA_Transpose_cntl_finalize( void );


// --- Level-1 BLAS prototypes -------------------------------------------------
void FLA_Axpy_cntl_init( void );
void FLA_Axpyt_cntl_init( void );
void FLA_Copy_cntl_init( void );
void FLA_Copyt_cntl_init( void );
void FLA_Copyr_cntl_init( void );
void FLA_Scal_cntl_init( void );
void FLA_Scalr_cntl_init( void );

void FLA_Axpy_cntl_finalize( void );
void FLA_Axpyt_cntl_finalize( void );
void FLA_Copy_cntl_finalize( void );
void FLA_Copyt_cntl_finalize( void );
void FLA_Copyr_cntl_finalize( void );
void FLA_Scal_cntl_finalize( void );
void FLA_Scalr_cntl_finalize( void );


// --- Level-2 BLAS prototypes -------------------------------------------------
void FLA_Gemv_cntl_init( void );
void FLA_Trsv_cntl_init( void );

void FLA_Gemv_cntl_finalize( void );
void FLA_Trsv_cntl_finalize( void );


// --- Level-3 BLAS prototypes -------------------------------------------------
void FLA_Gemm_cntl_init( void );
void FLA_Hemm_cntl_init( void );
void FLA_Herk_cntl_init( void );
void FLA_Her2k_cntl_init( void );
void FLA_Symm_cntl_init( void );
void FLA_Syrk_cntl_init( void );
void FLA_Syr2k_cntl_init( void );
void FLA_Trmm_cntl_init( void );
void FLA_Trsm_cntl_init( void );

void FLA_Gemm_cntl_finalize( void );
void FLA_Hemm_cntl_finalize( void );
void FLA_Herk_cntl_finalize( void );
void FLA_Her2k_cntl_finalize( void );
void FLA_Symm_cntl_finalize( void );
void FLA_Syrk_cntl_finalize( void );
void FLA_Syr2k_cntl_finalize( void );
void FLA_Trmm_cntl_finalize( void );
void FLA_Trsm_cntl_finalize( void );


// --- LAPACK-level prototypes -------------------------------------------------
void FLA_Apply_pivots_cntl_init( void );
void FLA_Chol_cntl_init( void );
void FLA_LU_piv_cntl_init( void );
void FLA_LU_nopiv_cntl_init( void );
void FLA_QR_UT_cntl_init( void );
void FLA_QR2_UT_cntl_init( void );
void FLA_LQ_UT_cntl_init( void );
void FLA_CAQR2_UT_cntl_init( void );
void FLA_UDdate_UT_cntl_init( void );
void FLA_Hess_UT_cntl_init( void );
void FLA_Tridiag_UT_cntl_init( void );
void FLA_Bidiag_UT_cntl_init( void );
void FLA_Trinv_cntl_init( void );
void FLA_Ttmm_cntl_init( void );
void FLA_Sylv_cntl_init( void );
void FLA_Lyap_cntl_init( void );
void FLA_SPDinv_cntl_init( void );
void FLA_Apply_Q_UT_cntl_init( void );
void FLA_Apply_Q2_UT_cntl_init( void );
void FLA_Apply_CAQ2_UT_cntl_init( void );
void FLA_Apply_QUD_UT_cntl_init( void );
void FLA_Eig_gest_cntl_init( void );

void FLA_Apply_pivots_cntl_finalize( void );
void FLA_Chol_cntl_finalize( void );
void FLA_LU_piv_cntl_finalize( void );
void FLA_LU_nopiv_cntl_finalize( void );
void FLA_QR_UT_cntl_finalize( void );
void FLA_QR2_UT_cntl_finalize( void );
void FLA_LQ_UT_cntl_finalize( void );
void FLA_CAQR2_UT_cntl_finalize( void );
void FLA_UDdate_UT_cntl_finalize( void );
void FLA_Hess_UT_cntl_finalize( void );
void FLA_Tridiag_UT_cntl_finalize( void );
void FLA_Bidiag_UT_cntl_finalize( void );
void FLA_Trinv_cntl_finalize( void );
void FLA_Ttmm_cntl_finalize( void );
void FLA_Sylv_cntl_finalize( void );
void FLA_Lyap_cntl_finalize( void );
void FLA_SPDinv_cntl_finalize( void );
void FLA_Apply_Q_UT_cntl_finalize( void );
void FLA_Apply_Q2_UT_cntl_finalize( void );
void FLA_Apply_CAQ2_UT_cntl_finalize( void );
void FLA_Apply_QUD_UT_cntl_finalize( void );
void FLA_Eig_gest_cntl_finalize( void );

// end FLA_Cntl_init_flamec.h
// begin FLA_Cntl_init_flash.h


void FLA_Cntl_init_flash( void );
void FLA_Cntl_finalize_flash( void );


// --- Base library prototypes -------------------------------------------------
void FLASH_Transpose_cntl_init( void );

void FLASH_Transpose_cntl_finalize( void );


// --- Level-1 BLAS prototypes -------------------------------------------------
void FLASH_Axpy_cntl_init( void );
void FLASH_Axpyt_cntl_init( void );
void FLASH_Copy_cntl_init( void );
void FLASH_Copyt_cntl_init( void );
void FLASH_Copyr_cntl_init( void );
void FLASH_Scal_cntl_init( void );
void FLASH_Scalr_cntl_init( void );

void FLASH_Axpy_cntl_finalize( void );
void FLASH_Axpyt_cntl_finalize( void );
void FLASH_Copy_cntl_finalize( void );
void FLASH_Copyt_cntl_finalize( void );
void FLASH_Copyr_cntl_finalize( void );
void FLASH_Scal_cntl_finalize( void );
void FLASH_Scalr_cntl_finalize( void );


// --- Level-2 BLAS prototypes -------------------------------------------------
void FLASH_Gemv_cntl_init( void );
void FLASH_Trsv_cntl_init( void );

void FLASH_Gemv_cntl_finalize( void );
void FLASH_Trsv_cntl_finalize( void );


// --- Level-3 BLAS prototypes -------------------------------------------------
void FLASH_Gemm_cntl_init( void );
void FLASH_Hemm_cntl_init( void );
void FLASH_Herk_cntl_init( void );
void FLASH_Her2k_cntl_init( void );
void FLASH_Symm_cntl_init( void );
void FLASH_Syrk_cntl_init( void );
void FLASH_Syr2k_cntl_init( void );
void FLASH_Trmm_cntl_init( void );
void FLASH_Trsm_cntl_init( void );

void FLASH_Gemm_cntl_finalize( void );
void FLASH_Hemm_cntl_finalize( void );
void FLASH_Herk_cntl_finalize( void );
void FLASH_Her2k_cntl_finalize( void );
void FLASH_Symm_cntl_finalize( void );
void FLASH_Syrk_cntl_finalize( void );
void FLASH_Syr2k_cntl_finalize( void );
void FLASH_Trmm_cntl_finalize( void );
void FLASH_Trsm_cntl_finalize( void );


// --- LAPACK-level prototypes -------------------------------------------------
void FLASH_Apply_pivots_cntl_init( void );
void FLASH_Chol_cntl_init( void );
void FLASH_LU_nopiv_cntl_init( void );
void FLASH_LU_piv_cntl_init( void );
void FLASH_LU_incpiv_cntl_init( void );
void FLASH_Trinv_cntl_init( void );
void FLASH_Ttmm_cntl_init( void );
void FLASH_SPDinv_cntl_init( void );
void FLASH_Sylv_cntl_init( void );
void FLASH_Lyap_cntl_init( void );
void FLASH_QR_UT_cntl_init( void );
void FLASH_QR2_UT_cntl_init( void );
void FLASH_LQ_UT_cntl_init( void );
void FLASH_CAQR2_UT_cntl_init( void );
void FLASH_UDdate_UT_cntl_init( void );
void FLASH_QR_UT_inc_cntl_init( void );
void FLASH_CAQR_UT_inc_cntl_init( void );
void FLASH_UDdate_UT_inc_cntl_init( void );
void FLASH_Apply_Q_UT_cntl_init( void );
void FLASH_Apply_Q2_UT_cntl_init( void );
void FLASH_Apply_CAQ2_UT_cntl_init( void );
void FLASH_Apply_QUD_UT_cntl_init( void );
void FLASH_Apply_Q_UT_inc_cntl_init( void );
void FLASH_Apply_CAQ_UT_inc_cntl_init( void );
void FLASH_Apply_QUD_UT_inc_cntl_init( void );
void FLASH_Eig_gest_cntl_init( void );

void FLASH_Apply_pivots_cntl_finalize( void );
void FLASH_Chol_cntl_finalize( void );
void FLASH_LU_nopiv_cntl_finalize( void );
void FLASH_LU_piv_cntl_finalize( void );
void FLASH_LU_incpiv_cntl_finalize( void );
void FLASH_Trinv_cntl_finalize( void );
void FLASH_Ttmm_cntl_finalize( void );
void FLASH_SPDinv_cntl_finalize( void );
void FLASH_Sylv_cntl_finalize( void );
void FLASH_Lyap_cntl_finalize( void );
void FLASH_QR_UT_cntl_finalize( void );
void FLASH_QR2_UT_cntl_finalize( void );
void FLASH_LQ_UT_cntl_finalize( void );
void FLASH_CAQR2_UT_cntl_finalize( void );
void FLASH_UDdate_UT_cntl_finalize( void );
void FLASH_QR_UT_inc_cntl_finalize( void );
void FLASH_CAQR_UT_inc_cntl_finalize( void );
void FLASH_UDdate_UT_inc_cntl_finalize( void );
void FLASH_Apply_Q_UT_cntl_finalize( void );
void FLASH_Apply_Q2_UT_cntl_finalize( void );
void FLASH_Apply_CAQ2_UT_cntl_finalize( void );
void FLASH_Apply_QUD_UT_cntl_finalize( void );
void FLASH_Apply_Q_UT_inc_cntl_finalize( void );
void FLASH_Apply_CAQ_UT_inc_cntl_finalize( void );
void FLASH_Apply_QUD_UT_inc_cntl_finalize( void );
void FLASH_Eig_gest_cntl_finalize( void );

// end FLA_Cntl_init_flash.h

void FLA_Cntl_init( void );
void FLA_Cntl_finalize( void );

// end FLA_Cntl_init.h

  // Include prototypes for base FLAME routines.
// begin FLA_main_prototypes.h


// -----------------------------------------------------------------------------

fla_blocksize_t* FLA_Blocksize_create( fla_dim_t b_s, fla_dim_t b_d, fla_dim_t b_c, fla_dim_t b_z );
fla_blocksize_t* FLA_Blocksize_create_copy( fla_blocksize_t* bp );
void             FLA_Blocksize_set( fla_blocksize_t* bp, fla_dim_t b_s, fla_dim_t b_d, fla_dim_t b_c, fla_dim_t b_z );
void             FLA_Blocksize_scale( fla_blocksize_t* bp, double factor );
void             FLA_Blocksize_free( fla_blocksize_t* bp );
fla_dim_t            FLA_Blocksize_extract( FLA_Datatype dt, fla_blocksize_t* bp );

fla_blocksize_t* FLA_Query_blocksizes( FLA_Dimension dim );
fla_dim_t            FLA_Query_blocksize( FLA_Datatype dt, FLA_Dimension dim );

fla_dim_t            FLA_Determine_blocksize( FLA_Obj A_unproc, FLA_Quadrant to_dir, fla_blocksize_t* cntl_blocksizes );
fla_dim_t            FLA_determine_matrix_size( FLA_Obj A_unproc, FLA_Quadrant to_dir );



// -----------------------------------------------------------------------------

unsigned int  FLA_Check_error_level( void );
unsigned int  FLA_Check_error_level_set( unsigned int level );
FLA_Error     FLA_Check_error_code_helper( int code, char* file, int line );
FLA_Error     FLA_Check_valid_side( FLA_Side side );
FLA_Error     FLA_Check_valid_uplo( FLA_Uplo uplo );
FLA_Error     FLA_Check_valid_trans( FLA_Trans trans );
FLA_Error     FLA_Check_valid_diag( FLA_Diag diag );
FLA_Error     FLA_Check_valid_conj( FLA_Conj conj );
FLA_Error     FLA_Check_valid_direct( FLA_Conj direct );
FLA_Error     FLA_Check_valid_storev( FLA_Conj storev );
FLA_Error     FLA_Check_valid_inverse( FLA_Inv inv );
FLA_Error     FLA_Check_valid_datatype( FLA_Datatype datatype );
FLA_Error     FLA_Check_valid_object_datatype( FLA_Obj A );
FLA_Error     FLA_Check_valid_evd_type( FLA_Evd_type evd_type );
FLA_Error     FLA_Check_valid_svd_type( FLA_Svd_type svd_type );
FLA_Error     FLA_Check_valid_svd_type_combination( FLA_Svd_type svd_type_u, FLA_Svd_type svd_type_v );
FLA_Error     FLA_Check_valid_svd_type_and_trans_combination( FLA_Svd_type svd_type_u, FLA_Trans transu,
                                                              FLA_Svd_type svd_type_v, FLA_Trans transv );
FLA_Error     FLA_Check_floating_datatype( FLA_Datatype datatype );
FLA_Error     FLA_Check_int_datatype( FLA_Datatype datatype );
FLA_Error     FLA_Check_real_datatype( FLA_Datatype datatype );
FLA_Error     FLA_Check_complex_datatype( FLA_Datatype datatype );
FLA_Error     FLA_Check_floating_object( FLA_Obj A );
FLA_Error     FLA_Check_int_object( FLA_Obj A );
FLA_Error     FLA_Check_real_object( FLA_Obj A );
FLA_Error     FLA_Check_comparable_object( FLA_Obj A );
FLA_Error     FLA_Check_complex_object( FLA_Obj A );
FLA_Error     FLA_Check_consistent_datatype( FLA_Datatype datatype, FLA_Obj A );
FLA_Error     FLA_Check_consistent_object_datatype( FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Check_identical_object_precision( FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Check_square( FLA_Obj A );
FLA_Error     FLA_Check_if_scalar( FLA_Obj A );
FLA_Error     FLA_Check_if_vector( FLA_Obj A );
FLA_Error     FLA_Check_conformal_dims( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Check_matrix_matrix_dims( FLA_Trans transa, FLA_Trans transb, FLA_Obj A, FLA_Obj B, FLA_Obj C );
FLA_Error     FLA_Check_matrix_vector_dims( FLA_Trans trans, FLA_Obj A, FLA_Obj x, FLA_Obj y );
FLA_Error     FLA_Check_equal_vector_dims( FLA_Obj x, FLA_Obj y );
FLA_Error     FLA_Check_conj1_trans_and_datatype( FLA_Trans trans, FLA_Obj A );
FLA_Error     FLA_Check_hess_indices( FLA_Obj A, int ilo, int ihi );
FLA_Error     FLA_Check_null_pointer( void* ptr );
FLA_Error     FLA_Check_object_dims( FLA_Trans trans, fla_dim_t m, fla_dim_t n, FLA_Obj A );
FLA_Error     FLA_Check_valid_pivot_type( FLA_Pivot_type ptype );
FLA_Error     FLA_Check_malloc_pointer( void* ptr );
FLA_Error     FLA_Check_base_buffer_mismatch( FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Check_adjacent_objects_2x2( FLA_Obj A11, FLA_Obj A12,
                                              FLA_Obj A21, FLA_Obj A22 );
FLA_Error     FLA_Check_adjacent_objects_2x1( FLA_Obj AT,
                                              FLA_Obj AB );
FLA_Error     FLA_Check_adjacent_objects_1x2( FLA_Obj AL, FLA_Obj AR );
FLA_Error     FLA_Check_blocksize_value( fla_dim_t b );
FLA_Error     FLA_Check_blocksize_object( FLA_Datatype datatype, fla_blocksize_t* bp );
FLA_Error     FLA_Check_file_descriptor( int fd );
FLA_Error     FLA_Check_lseek_result( int requested_offset, int lseek_r_val );
FLA_Error     FLA_Check_close_result( int close_r_val );
FLA_Error     FLA_Check_unlink_result( int unlink_r_val );
FLA_Error     FLA_Check_read_result( int requested_size, int read_r_val );
FLA_Error     FLA_Check_write_result( int requested_size, int write_r_val );
FLA_Error     FLA_Check_valid_quadrant( FLA_Quadrant quad );
FLA_Error     FLA_Check_vector_dim_min( FLA_Obj x, fla_dim_t min_dim );
FLA_Error     FLA_Check_pthread_create_result( int pthread_create_r_val );
FLA_Error     FLA_Check_pthread_join_result( int pthread_join_r_val );
FLA_Error     FLA_Check_valid_isgn_value( FLA_Obj isgn );
FLA_Error     FLA_Check_sylv_matrix_dims( FLA_Obj A, FLA_Obj B, FLA_Obj C );
FLA_Error     FLA_Check_chol_failure( FLA_Error r_val );
FLA_Error     FLA_Check_valid_elemtype( FLA_Elemtype elemtype );
FLA_Error     FLA_Check_posix_memalign_failure( int r_val );
FLA_Error     FLA_Check_submatrix_dims_and_offset( fla_dim_t m, fla_dim_t n, fla_dim_t i, fla_dim_t j, FLA_Obj A );
FLA_Error     FLA_Check_object_scalar_elemtype( FLA_Obj A );
FLA_Error     FLA_Check_object_matrix_elemtype( FLA_Obj A );
FLA_Error     FLA_Check_num_threads( unsigned int n_threads );
FLA_Error     FLA_Check_conj_and_datatype( FLA_Conj conj, FLA_Obj A );
FLA_Error     FLA_Check_valid_complex_trans( FLA_Trans trans );
FLA_Error     FLA_Check_valid_real_trans( FLA_Trans trans );
FLA_Error     FLA_Check_valid_blas_trans( FLA_Trans trans );
FLA_Error     FLA_Check_nonconstant_datatype( FLA_Datatype datatype );
FLA_Error     FLA_Check_nonconstant_object( FLA_Obj A );
FLA_Error     FLA_Check_identical_object_datatype( FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Check_divide_by_zero( FLA_Obj alpha );
FLA_Error     FLA_Check_identical_object_elemtype( FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Check_pivot_index_range( FLA_Obj p, fla_dim_t k1, fla_dim_t k2 );
FLA_Error     FLA_Check_householder_panel_dims( FLA_Obj A, FLA_Obj T );
FLA_Error     FLA_Check_object_length_equals( FLA_Obj A, fla_dim_t m );
FLA_Error     FLA_Check_object_width_equals( FLA_Obj A, fla_dim_t n );
FLA_Error     FLA_Check_object_length_min( FLA_Obj A, fla_dim_t m );
FLA_Error     FLA_Check_object_width_min( FLA_Obj A, fla_dim_t n );
FLA_Error     FLA_Check_valid_error_level( unsigned int level );
FLA_Error     FLA_Check_attempted_repart_2x2( FLA_Obj A_quad, fla_dim_t b_m, fla_dim_t b_n );
FLA_Error     FLA_Check_attempted_repart_2x1( FLA_Obj A_side, fla_dim_t b_m );
FLA_Error     FLA_Check_attempted_repart_1x2( FLA_Obj A_side, fla_dim_t b_n );
FLA_Error     FLA_Check_valid_leftright_side( FLA_Side side );
FLA_Error     FLA_Check_valid_topbottom_side( FLA_Side side );
FLA_Error     FLA_Check_matrix_strides( fla_dim_t m, fla_dim_t n, fla_dim_t rs, fla_dim_t cs );
FLA_Error     FLA_Check_vector_dim( FLA_Obj x, fla_dim_t expected_length );
FLA_Error     FLA_Check_row_vector( FLA_Obj x );
FLA_Error     FLA_Check_col_vector( FLA_Obj x );
FLA_Error     FLA_Check_valid_machval( FLA_Machval val );
FLA_Error     FLA_Check_valid_evd_type( FLA_Evd_type evd_type );
FLA_Error     FLA_Check_valid_svd_type( FLA_Svd_type svd_type );
FLA_Error     FLA_Check_valid_diag_offset( FLA_Obj A, FLA_Diag_off offset );
FLA_Error     FLA_Check_col_storage( FLA_Obj A );
FLA_Error     FLA_Check_row_storage( FLA_Obj A );




// -----------------------------------------------------------------------------

char*         FLA_Error_string_for_code( int code );
void          FLA_Error_messages_init( void );
void          FLA_Print_message( char *str, char *file, int line );
void          FLA_Abort( void );



// -----------------------------------------------------------------------------

void          FLA_Init( void );
void          FLA_Finalize( void );
FLA_Bool      FLA_Initialized( void );

void          FLA_Init_safe( FLA_Error* init_result );
void          FLA_Finalize_safe( FLA_Error init_result );

void          FLA_Init_constants( void );
void          FLA_Finalize_constants( void );

void          FLA_Init_numerical_constants( void );
void          FLA_Finalize_numerical_constants( void );

char*         FLA_Get_AOCL_Version( void );

//------------------------------------------------------------------------------

void          FLA_Lock_init( FLA_Lock* fla_lock_ptr );
void          FLA_Lock_destroy( FLA_Lock* fla_lock_ptr );
void          FLA_Lock_acquire( FLA_Lock* fla_lock_ptr );
void          FLA_Lock_release( FLA_Lock* fla_lock_ptr );



// -----------------------------------------------------------------------------

void          FLA_Memory_leak_counter_init( void );
void          FLA_Memory_leak_counter_finalize( void );
FLA_Bool      FLA_Memory_leak_counter_status( void );
FLA_Bool      FLA_Memory_leak_counter_set( FLA_Bool new_status );

void*         FLA_malloc( size_t size );
void*         FLA_realloc( void* old_ptr, size_t size );
void          FLA_free( void *ptr );
 


// -----------------------------------------------------------------------------

FLA_Error     FLA_Obj_copy_view( FLA_Obj A, FLA_Obj* B );
void          FLA_Obj_extract_real_scalar( FLA_Obj alpha, double* alpha_value );
void          FLA_Obj_extract_complex_scalar( FLA_Obj alpha, dcomplex* alpha_value );
void          FLA_Obj_extract_real_part( FLA_Obj alpha, FLA_Obj beta );
void          FLA_Obj_extract_imag_part( FLA_Obj alpha, FLA_Obj beta );
void          FLA_Obj_set_real_part( FLA_Obj alpha, FLA_Obj beta );
void          FLA_Obj_set_imag_part( FLA_Obj alpha, FLA_Obj beta );
FLA_Error     FLA_Obj_show( char *s1, FLA_Obj A, char *format, char *s2 );
FLA_Error     FLA_Obj_fshow( FILE* file, char *s1, FLA_Obj A, char *format, char *s2 );

FLA_Error     FLA_Obj_copy_view_check( FLA_Obj A, FLA_Obj* B );
FLA_Error     FLA_Obj_extract_real_scalar_check( FLA_Obj alpha, double* alpha_value );
FLA_Error     FLA_Obj_extract_complex_scalar_check( FLA_Obj alpha, dcomplex* alpha_value );
FLA_Error     FLA_Obj_extract_real_part_check( FLA_Obj alpha, FLA_Obj beta );
FLA_Error     FLA_Obj_extract_imag_part_check( FLA_Obj alpha, FLA_Obj beta );
FLA_Error     FLA_Obj_set_real_part_check( FLA_Obj alpha, FLA_Obj beta );
FLA_Error     FLA_Obj_set_imag_part_check( FLA_Obj alpha, FLA_Obj beta );
FLA_Error     FLA_Obj_show_check( char* s1, FLA_Obj obj, char* format, char* s2 );
FLA_Error     FLA_Obj_fshow_check( FILE* file, char* s1, FLA_Obj obj, char* format, char* s2 );


// -----------------------------------------------------------------------------

FLA_Error     FLA_Copy_buffer_to_object( FLA_Trans trans, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs, fla_dim_t i, fla_dim_t j, FLA_Obj obj );
FLA_Error     FLA_Copy_object_to_buffer( FLA_Trans trans, fla_dim_t i, fla_dim_t j, FLA_Obj obj, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs );
FLA_Error     FLA_Copy_buffer_to_object_check( FLA_Trans trans, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs, fla_dim_t i, fla_dim_t j, FLA_Obj obj );
FLA_Error     FLA_Copy_object_to_buffer_check( FLA_Trans trans, fla_dim_t i, fla_dim_t j, FLA_Obj obj, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs );



// -----------------------------------------------------------------------------

FLA_Error     FLA_Axpy_buffer_to_object( FLA_Trans trans, FLA_Obj alpha, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs, fla_dim_t i, fla_dim_t j, FLA_Obj C );
FLA_Error     FLA_Axpy_object_to_buffer( FLA_Trans trans, FLA_Obj alpha, fla_dim_t i, fla_dim_t j, FLA_Obj C, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs );

FLA_Error     FLA_Axpy_buffer_to_object_check( FLA_Trans trans, FLA_Obj alpha, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs, fla_dim_t i, fla_dim_t j, FLA_Obj C );
FLA_Error     FLA_Axpy_object_to_buffer_check( FLA_Trans trans, FLA_Obj alpha, fla_dim_t i, fla_dim_t j, FLA_Obj C, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs );



// -----------------------------------------------------------------------------

#ifdef FLA_ENABLE_SCC
void*         FLA_shmalloc( size_t size );
void          FLA_shfree( void* ptr );
FLA_Bool      FLA_is_owner( void );
#endif
FLA_Error     FLA_Obj_nullify( FLA_Obj *obj );
FLA_Error     FLA_Obj_create( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_ext( FLA_Datatype datatype, FLA_Elemtype elemtype, fla_dim_t m, fla_dim_t n, fla_dim_t m_inner, fla_dim_t n_inner, fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_conf_to( FLA_Trans trans, FLA_Obj old, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_copy_of( FLA_Trans trans, FLA_Obj old, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_without_buffer( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_constant( double const_real, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_constant_ext( float const_s, double const_d, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_complex_constant( double const_real, double const_imag, FLA_Obj *obj );
FLA_Error     FLA_Obj_attach_buffer( void *buffer, fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_buffer( fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_free( FLA_Obj *obj );
FLA_Error     FLA_Obj_free_without_buffer( FLA_Obj *obj );
FLA_Error     FLA_Obj_free_buffer( FLA_Obj *obj );
fla_dim_t         FLA_align_ldim( fla_dim_t ldim, fla_dim_t elem_size );
fla_dim_t         FLA_compute_num_elem( fla_dim_t elem_size, fla_dim_t m, fla_dim_t n, fla_dim_t* rs, fla_dim_t* cs );
void          FLA_adjust_strides( fla_dim_t m, fla_dim_t n, fla_dim_t* rs, fla_dim_t* cs );

FLA_Error     FLA_Obj_flip_base( FLA_Obj *obj );
FLA_Error     FLA_Obj_flip_view( FLA_Obj *obj );

FLA_Error     FLA_Obj_create_ext_check( FLA_Datatype datatype, FLA_Elemtype elemtype, fla_dim_t m, fla_dim_t n, fla_dim_t m_inner, fla_dim_t n_inner, fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_conf_to_check( FLA_Trans trans, FLA_Obj obj_old, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_without_buffer_check( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_constant_check( double const_real, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_constant_ext_check( float const_s, double const_d, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_complex_constant_check( double const_real, double const_imag, FLA_Obj *obj );
FLA_Error     FLA_Obj_attach_buffer_check( void *buffer, fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_create_buffer_check( fla_dim_t rs, fla_dim_t cs, FLA_Obj *obj );
FLA_Error     FLA_Obj_free_check( FLA_Obj *obj );
FLA_Error     FLA_Obj_free_without_buffer_check( FLA_Obj *obj );
FLA_Error     FLA_Obj_free_buffer_check( FLA_Obj *obj );

FLA_Error     FLA_Obj_create_buffer_task( fla_dim_t rs, fla_dim_t cs, FLA_Obj obj, void* cntl );
FLA_Error     FLA_Obj_free_buffer_task( FLA_Obj obj, void* cntl );


// -----------------------------------------------------------------------------

FLA_Datatype  FLA_Obj_datatype( FLA_Obj obj );
FLA_Datatype  FLA_Obj_datatype_proj_to_real( FLA_Obj A );
FLA_Datatype  FLA_Obj_datatype_proj_to_complex( FLA_Obj A );
FLA_Elemtype  FLA_Obj_elemtype( FLA_Obj obj );
fla_dim_t         FLA_Obj_datatype_size( FLA_Datatype datatype );
fla_dim_t         FLA_Obj_elem_size( FLA_Obj obj );
fla_dim_t         FLA_Obj_length( FLA_Obj obj );
fla_dim_t         FLA_Obj_width( FLA_Obj obj );
FLA_Uplo      FLA_Obj_structure( FLA_Obj obj );
fla_dim_t         FLA_Obj_vector_dim( FLA_Obj obj );
fla_dim_t         FLA_Obj_vector_inc( FLA_Obj obj );
fla_dim_t         FLA_Obj_min_dim( FLA_Obj obj );
fla_dim_t         FLA_Obj_max_dim( FLA_Obj obj );
fla_dim_t         FLA_Obj_row_stride( FLA_Obj obj );
fla_dim_t         FLA_Obj_col_stride( FLA_Obj obj );
fla_dim_t         FLA_Obj_row_offset( FLA_Obj obj );
fla_dim_t         FLA_Obj_col_offset( FLA_Obj obj );
fla_dim_t         FLA_Obj_base_length( FLA_Obj obj );
fla_dim_t         FLA_Obj_base_width( FLA_Obj obj );
fla_dim_t         FLA_Obj_num_elem_alloc( FLA_Obj obj );
void*         FLA_Obj_base_buffer( FLA_Obj obj );
void*         FLA_Obj_buffer_at_view( FLA_Obj obj );
FLA_Bool      FLA_Obj_buffer_is_null( FLA_Obj obj );
FLA_Bool      FLA_Obj_is_int( FLA_Obj A );
FLA_Bool      FLA_Obj_is_floating_point( FLA_Obj A );
FLA_Bool      FLA_Obj_is_constant( FLA_Obj A );
FLA_Bool      FLA_Obj_is_real( FLA_Obj A );
FLA_Bool      FLA_Obj_is_complex( FLA_Obj A );
FLA_Bool      FLA_Obj_is_single_precision( FLA_Obj A );
FLA_Bool      FLA_Obj_is_double_precision( FLA_Obj A );
FLA_Bool      FLA_Obj_is_scalar( FLA_Obj A );
FLA_Bool      FLA_Obj_is_vector( FLA_Obj A );
FLA_Bool      FLA_Obj_has_zero_dim( FLA_Obj A );
FLA_Bool      FLA_Obj_is_row_major( FLA_Obj A );
FLA_Bool      FLA_Obj_is_col_major( FLA_Obj A );
FLA_Bool      FLA_Obj_is_conformal_to( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_is( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_is_identical( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_is_overlapped( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_equals( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_gt( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_ge( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_lt( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_le( FLA_Obj A, FLA_Obj B );
void*         FLA_Submatrix_at( FLA_Datatype datatype, void* buffer, fla_dim_t i, fla_dim_t j, fla_dim_t rs, fla_dim_t cs );
FLA_Bool      FLA_Obj_has_nan( FLA_Obj A );

FLA_Error     FLA_Obj_datatype_check( FLA_Obj obj );
FLA_Error     FLA_Obj_datatype_proj_to_real_check( FLA_Obj obj );
FLA_Error     FLA_Obj_elemtype_check( FLA_Obj obj );
FLA_Error     FLA_Obj_datatype_size_check( FLA_Datatype datatype );
FLA_Error     FLA_Obj_elem_size_check( FLA_Obj obj );
FLA_Error     FLA_Obj_buffer_at_view_check( FLA_Obj obj );
FLA_Error     FLA_Obj_equals_check( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_gt_check( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_ge_check( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_lt_check( FLA_Obj A, FLA_Obj B );
FLA_Bool      FLA_Obj_le_check( FLA_Obj A, FLA_Obj B );
FLA_Error     FLA_Submatrix_at_check( FLA_Datatype datatype, void* buffer, fla_dim_t i, fla_dim_t j, fla_dim_t rs, fla_dim_t cs );
FLA_Error     FLA_Obj_has_nan_check( FLA_Obj A );


// ------------------------------------------------------------------------------

void          FLA_Param_map_flame_to_netlib_trans( FLA_Trans trans, void* blas_trans );
void          FLA_Param_map_flame_to_netlib_uplo( FLA_Uplo uplo, void* blas_uplo );
void          FLA_Param_map_flame_to_netlib_side( FLA_Uplo side, void* blas_side );
void          FLA_Param_map_flame_to_netlib_diag( FLA_Diag diag, void* blas_diag );
void          FLA_Param_map_flame_to_netlib_direct( FLA_Direct direct, void* lapack_direct );
void          FLA_Param_map_flame_to_netlib_storev( FLA_Store storev, void* lapack_storev );
void          FLA_Param_map_flame_to_netlib_evd_type( FLA_Evd_type evd_type, void* lapack_evd_type );
void          FLA_Param_map_flame_to_netlib_svd_type( FLA_Svd_type svd_type, void* lapack_svd_type );
void          FLA_Param_map_flame_to_netlib_machval( FLA_Machval machval, void* blas_machval );

void          FLA_Param_map_flame_to_blis_trans( FLA_Trans trans, trans1_t* blis_trans );
void          FLA_Param_map_flame_to_blis_conj( FLA_Conj conj, conj1_t* blis_conj );
void          FLA_Param_map_flame_to_blis_uplo( FLA_Uplo uplo, uplo1_t* blis_uplo );
void          FLA_Param_map_flame_to_blis_side( FLA_Uplo side, side1_t* blis_side );
void          FLA_Param_map_flame_to_blis_diag( FLA_Diag diag, diag1_t* blis_diag );
#if 0
void          FLA_Param_map_flame_to_blis2_trans( FLA_Trans trans, trans_t* blis_trans );
void          FLA_Param_map_flame_to_blis2_conj( FLA_Conj conj, conj_t* blis_conj );
void          FLA_Param_map_flame_to_blis2_uplo( FLA_Uplo uplo, uplo_t* blis_uplo );
void          FLA_Param_map_flame_to_blis2_side( FLA_Uplo side, side_t* blis_side );
void          FLA_Param_map_flame_to_blis2_diag( FLA_Diag diag, diag_t* blis_diag );
#endif

void          FLA_Param_map_blis_to_flame_trans( trans1_t trans, FLA_Trans* flame_trans );
void          FLA_Param_map_blis_to_flame_uplo( uplo1_t uplo, FLA_Uplo* flame_uplo );
void          FLA_Param_map_blis_to_flame_side( side1_t side, FLA_Side* flame_side );
void          FLA_Param_map_blis_to_flame_diag( diag1_t diag, FLA_Diag* flame_diag );

void          FLA_Param_map_char_to_flame_trans( char* trans, FLA_Trans* flame_trans );
void          FLA_Param_map_char_to_flame_uplo( char* uplo, FLA_Uplo* flame_uplo );
void          FLA_Param_map_char_to_flame_side( char* side, FLA_Side* flame_side );
void          FLA_Param_map_char_to_flame_diag( char* diag, FLA_Diag* flame_diag );
void          FLA_Param_map_char_to_flame_storev( char* storev, FLA_Direct* flame_storev );
void          FLA_Param_map_char_to_flame_direct( char* direct, FLA_Direct* flame_direct );
void          FLA_Param_map_char_to_flame_inv( char* inv, FLA_Inv* flame_inv );



void          FLA_Param_map_netlib_to_flame_trans( char* trans, FLA_Trans* flame_trans );
void          FLA_Param_map_netlib_to_flame_uplo( char* uplo, FLA_Uplo* flame_uplo );
void          FLA_Param_map_netlib_to_flame_side( char* side, FLA_Side* flame_side );
void          FLA_Param_map_netlib_to_flame_diag( char* diag, FLA_Diag* flame_diag );
void          FLA_Param_map_netlib_to_flame_inv( int* itype, FLA_Inv* flame_inv );
void          FLA_Param_map_netlib_to_flame_svd_type( char* svd, FLA_Svd_type* flame_svd );




// -----------------------------------------------------------------------------

FLA_Error     FLA_Part_2x2( FLA_Obj A,  FLA_Obj *A11, FLA_Obj *A12,
                                        FLA_Obj *A21, FLA_Obj *A22,
                            fla_dim_t  mb,  fla_dim_t     nb, FLA_Quadrant quadrant );

FLA_Error     FLA_Part_2x1 ( FLA_Obj A,  FLA_Obj *A1,
                                         FLA_Obj *A2,
                             fla_dim_t  mb,  FLA_Side side );

FLA_Error     FLA_Part_1x2( FLA_Obj A,  FLA_Obj *A1, FLA_Obj *A2,
                                        fla_dim_t    nb, FLA_Side side );
 
FLA_Error     FLA_Merge_2x2( FLA_Obj A11, FLA_Obj A12,
                             FLA_Obj A21, FLA_Obj A22,  FLA_Obj *A );
 
FLA_Error     FLA_Merge_2x1( FLA_Obj AT,
                             FLA_Obj AB,  FLA_Obj *A );

FLA_Error     FLA_Merge_1x2( FLA_Obj AL, FLA_Obj AR,  FLA_Obj *A );

FLA_Error     FLA_Repart_2x2_to_3x3( FLA_Obj ATL, FLA_Obj ATR,  FLA_Obj *A00, FLA_Obj *A01, FLA_Obj *A02,
                                                                FLA_Obj *A10, FLA_Obj *A11, FLA_Obj *A12,
                                     FLA_Obj ABL, FLA_Obj ABR,  FLA_Obj *A20, FLA_Obj *A21, FLA_Obj *A22,
                                     fla_dim_t   mb,  fla_dim_t    nb,  FLA_Quadrant quadrant );

FLA_Error     FLA_Repart_2x1_to_3x1( FLA_Obj AT,  FLA_Obj *A0,
                                                  FLA_Obj *A1,
                                     FLA_Obj AB,  FLA_Obj *A2,
                                     fla_dim_t   mb,  FLA_Side side );

FLA_Error     FLA_Repart_1x2_to_1x3( FLA_Obj  AL,              FLA_Obj  AR,
                                     FLA_Obj *A0, FLA_Obj *A1, FLA_Obj *A2,
                                                  fla_dim_t    nb, FLA_Side side );

FLA_Error     FLA_Cont_with_3x3_to_2x2( FLA_Obj *ATL, FLA_Obj *ATR,  FLA_Obj A00, FLA_Obj A01, FLA_Obj A02,
                                                                     FLA_Obj A10, FLA_Obj A11, FLA_Obj A12,
                                        FLA_Obj *ABL, FLA_Obj *ABR,  FLA_Obj A20, FLA_Obj A21, FLA_Obj A22,
                                                                     FLA_Quadrant quadrant );

FLA_Error     FLA_Cont_with_3x1_to_2x1( FLA_Obj *AT,  FLA_Obj A0,
                                                      FLA_Obj A1,
                                        FLA_Obj *AB,  FLA_Obj A2,
                                                      FLA_Side side );

FLA_Error     FLA_Cont_with_1x3_to_1x2( FLA_Obj *AL,              FLA_Obj *AR,
                                        FLA_Obj  A0, FLA_Obj  A1, FLA_Obj  A2,
                                                                  FLA_Side side );

FLA_Error     FLA_Repart_3x3_to_5x5( FLA_Obj ATL, FLA_Obj ATM, FLA_Obj ATR,
                                     FLA_Obj AML, FLA_Obj AMM, FLA_Obj AMR,
                                     FLA_Obj ABL, FLA_Obj ABM, FLA_Obj ABR,
                                     FLA_Obj *A00, FLA_Obj *A01, FLA_Obj *A02, FLA_Obj *A03, FLA_Obj *A04,
                                     FLA_Obj *A10, FLA_Obj *A11, FLA_Obj *A12, FLA_Obj *A13, FLA_Obj *A14,
                                     FLA_Obj *A20, FLA_Obj *A21, FLA_Obj *A22, FLA_Obj *A23, FLA_Obj *A24,
                                     FLA_Obj *A30, FLA_Obj *A31, FLA_Obj *A32, FLA_Obj *A33, FLA_Obj *A34,
                                     FLA_Obj *A40, FLA_Obj *A41, FLA_Obj *A42, FLA_Obj *A43, FLA_Obj *A44,
                                     fla_dim_t b, FLA_Quadrant quadrant );

FLA_Error     FLA_Cont_with_5x5_to_3x3( FLA_Obj *ATL, FLA_Obj *ATM, FLA_Obj *ATR,
                                        FLA_Obj *AML, FLA_Obj *AMM, FLA_Obj *AMR,
                                        FLA_Obj *ABL, FLA_Obj *ABM, FLA_Obj *ABR,
                                        FLA_Obj A00, FLA_Obj A01, FLA_Obj A02, FLA_Obj A03, FLA_Obj A04,
                                        FLA_Obj A10, FLA_Obj A11, FLA_Obj A12, FLA_Obj A13, FLA_Obj A14,
                                        FLA_Obj A20, FLA_Obj A21, FLA_Obj A22, FLA_Obj A23, FLA_Obj A24,
                                        FLA_Obj A30, FLA_Obj A31, FLA_Obj A32, FLA_Obj A33, FLA_Obj A34,
                                        FLA_Obj A40, FLA_Obj A41, FLA_Obj A42, FLA_Obj A43, FLA_Obj A44,
                                        FLA_Quadrant quadrant );



FLA_Error     FLA_Part_2x2_check( FLA_Obj A,  FLA_Obj *A11, FLA_Obj *A12,
                                              FLA_Obj *A21, FLA_Obj *A22,
                                  fla_dim_t  mb,  fla_dim_t     nb, FLA_Quadrant quadrant );

FLA_Error     FLA_Part_2x1_check( FLA_Obj A,  FLA_Obj *A1,
                                               FLA_Obj *A2,
                                   fla_dim_t  mb,  FLA_Side side );

FLA_Error     FLA_Part_1x2_check( FLA_Obj A,  FLA_Obj *A1, FLA_Obj *A2,
                                              fla_dim_t    nb, FLA_Side side );
 
FLA_Error     FLA_Merge_2x2_check( FLA_Obj A11, FLA_Obj A12,
                                   FLA_Obj A21, FLA_Obj A22,  FLA_Obj *A );
 
FLA_Error     FLA_Merge_2x1_check( FLA_Obj AT,
                                   FLA_Obj AB,  FLA_Obj *A );

FLA_Error     FLA_Merge_1x2_check( FLA_Obj AL, FLA_Obj AR,  FLA_Obj *A );

FLA_Error     FLA_Repart_2x2_to_3x3_check( FLA_Obj ATL, FLA_Obj ATR,  FLA_Obj *A00, FLA_Obj *A01, FLA_Obj *A02,
                                                                      FLA_Obj *A10, FLA_Obj *A11, FLA_Obj *A12,
                                           FLA_Obj ABL, FLA_Obj ABR,  FLA_Obj *A20, FLA_Obj *A21, FLA_Obj *A22,
                                           fla_dim_t   mb,  fla_dim_t    nb,  FLA_Quadrant quadrant );

FLA_Error     FLA_Repart_2x1_to_3x1_check( FLA_Obj AT,  FLA_Obj *A0,
                                                        FLA_Obj *A1,
                                           FLA_Obj AB,  FLA_Obj *A2,
                                           fla_dim_t   mb,  FLA_Side side );

FLA_Error     FLA_Repart_1x2_to_1x3_check( FLA_Obj  AL,              FLA_Obj  AR,
                                           FLA_Obj *A0, FLA_Obj *A1, FLA_Obj *A2,
                                                        fla_dim_t    nb, FLA_Side side );

FLA_Error     FLA_Cont_with_3x3_to_2x2_check( FLA_Obj *ATL, FLA_Obj *ATR,  FLA_Obj A00, FLA_Obj A01, FLA_Obj A02,
                                                                           FLA_Obj A10, FLA_Obj A11, FLA_Obj A12,
                                              FLA_Obj *ABL, FLA_Obj *ABR,  FLA_Obj A20, FLA_Obj A21, FLA_Obj A22,
                                                                           FLA_Quadrant quadrant );

FLA_Error     FLA_Cont_with_3x1_to_2x1_check( FLA_Obj *AT,  FLA_Obj A0,
                                                            FLA_Obj A1,
                                              FLA_Obj *AB,  FLA_Obj A2,
                                                            FLA_Side side );

FLA_Error     FLA_Cont_with_1x3_to_1x2_check( FLA_Obj *AL,              FLA_Obj *AR,
                                              FLA_Obj  A0, FLA_Obj  A1, FLA_Obj  A2,
                                                                        FLA_Side side );
// end FLA_main_prototypes.h
// begin FLA_util_base_prototypes.h


float     FLA_random_float( void );
double    FLA_random_double( void );
scomplex  FLA_random_scomplex( void );
dcomplex  FLA_random_dcomplex( void );

FLA_Error FLA_Absolute_square( FLA_Obj alpha );
FLA_Error FLA_Absolute_value( FLA_Obj alpha );
double    FLA_Clock( void );
FLA_Error FLA_Conjugate( FLA_Obj A );
FLA_Error FLA_Conjugate_r( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Fill_with_linear_dist( FLA_Obj shift, FLA_Obj delta, FLA_Obj x );
FLA_Error FLA_Fill_with_inverse_dist( FLA_Obj alpha, FLA_Obj x );
FLA_Error FLA_Fill_with_geometric_dist( FLA_Obj alpha, FLA_Obj x );
FLA_Error FLA_Fill_with_random_dist( FLA_Obj shift, FLA_Obj max, FLA_Obj x );
FLA_Error FLA_Fill_with_logarithmic_dist( FLA_Obj max, FLA_Obj x );
FLA_Error FLA_Fill_with_cluster_dist( FLA_Obj n_clusters, FLA_Obj cluster_width, FLA_Obj x );
FLA_Error FLA_Hermitianize( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Invert( FLA_Conj conj, FLA_Obj x );
FLA_Error FLA_Inv_scal_elemwise( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Max_abs_value( FLA_Obj A, FLA_Obj amax );
FLA_Error FLA_Max_abs_value_herm( FLA_Uplo uplo, FLA_Obj A, FLA_Obj maxabs );
double    FLA_Max_elemwise_diff( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Mult_add( FLA_Obj alpha, FLA_Obj beta, FLA_Obj gamma );
FLA_Error FLA_Negate( FLA_Obj x );
FLA_Error FLA_Norm1( FLA_Obj A, FLA_Obj norm );
FLA_Error FLA_Norm_inf( FLA_Obj A, FLA_Obj norm );
FLA_Error FLA_Norm_frob( FLA_Obj A, FLA_Obj norm );
FLA_Error FLA_Pow( FLA_Obj base, FLA_Obj exp, FLA_Obj btoe );
FLA_Error FLA_Random_matrix( FLA_Obj A );
FLA_Error FLA_Random_herm_matrix( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Random_symm_matrix( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Random_spd_matrix( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Random_tri_matrix( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Random_unitary_matrix( FLA_Obj A );
FLA_Error FLA_Scal_elemwise( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Setr( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Shift_pivots_to_check( FLA_Pivot_type ptype, FLA_Obj p );
FLA_Error FLA_Sqrt( FLA_Obj alpha );
FLA_Error FLA_Symmetrize( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Triangularize( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Transpose( FLA_Obj A );

FLA_Error FLA_Set( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Set_diag( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Set_offdiag( integer offset, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Set_to_identity( FLA_Obj A );
FLA_Error FLA_Add_to_diag( void *diag_value, FLA_Obj A );
FLA_Error FLA_Shift_diag( FLA_Conj conj, FLA_Obj sigma, FLA_Obj A );
FLA_Error FLA_Scale_diag( FLA_Conj conj, FLA_Obj alpha, FLA_Obj A );

FLA_Error FLA_Set_diagonal_vector( FLA_Obj A, FLA_Obj d );
FLA_Error FLA_Set_diagonal_matrix( FLA_Obj d, FLA_Obj A );

// -----------------------------------------------------------------------------

FLA_Error FLA_Absolute_square_check( FLA_Obj alpha );
FLA_Error FLA_Absolute_value_check( FLA_Obj alpha );
FLA_Error FLA_Conjugate_check( FLA_Obj A );
FLA_Error FLA_Conjugate_r_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Fill_with_linear_dist_check( FLA_Obj shift, FLA_Obj delta, FLA_Obj x );
FLA_Error FLA_Fill_with_inverse_dist_check( FLA_Obj alpha, FLA_Obj x );
FLA_Error FLA_Fill_with_geometric_dist_check( FLA_Obj alpha, FLA_Obj x );
FLA_Error FLA_Fill_with_random_dist_check( FLA_Obj shift, FLA_Obj max, FLA_Obj x );
FLA_Error FLA_Fill_with_logarithmic_dist_check( FLA_Obj alpha, FLA_Obj x );
FLA_Error FLA_Fill_with_cluster_dist_check( FLA_Obj n_clusters, FLA_Obj cluster_width, FLA_Obj x );
FLA_Error FLA_Hermitianize_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Invert_check( FLA_Conj conj, FLA_Obj x );
FLA_Error FLA_Inv_scal_elemwise_check( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Max_abs_value_check( FLA_Obj A, FLA_Obj amax );
FLA_Error FLA_Max_abs_value_herm_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj maxabs );
FLA_Error FLA_Max_elemwise_diff_check( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Mult_add_check( FLA_Obj alpha, FLA_Obj beta, FLA_Obj gamma );
FLA_Error FLA_Negate_check( FLA_Obj x );
FLA_Error FLA_Norm1_check( FLA_Obj A, FLA_Obj norm );
FLA_Error FLA_Norm_inf_check( FLA_Obj A, FLA_Obj norm );
FLA_Error FLA_Norm_frob_check( FLA_Obj A, FLA_Obj norm );
FLA_Error FLA_Pow_check( FLA_Obj base, FLA_Obj exp, FLA_Obj btoe );
FLA_Error FLA_Random_matrix_check( FLA_Obj A );
FLA_Error FLA_Random_herm_matrix_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Random_symm_matrix_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Random_spd_matrix_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Random_tri_matrix_check( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Random_unitary_matrix_check( FLA_Obj A );
FLA_Error FLA_Scal_elemwise_check( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Setr_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Sort_check( FLA_Direct direct, FLA_Obj x );
FLA_Error FLA_Sqrt_check( FLA_Obj alpha );
FLA_Error FLA_Symmetrize_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Triangularize_check( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Transpose_check( FLA_Obj A );

FLA_Error FLA_Set_check( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Set_diag_check( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Set_to_identity_check( FLA_Obj A );
FLA_Error FLA_Add_to_diag_check( void *diag_value, FLA_Obj A );
FLA_Error FLA_Shift_diag_check( FLA_Conj conj, FLA_Obj sigma, FLA_Obj A );
FLA_Error FLA_Scale_diag_check( FLA_Conj conj, FLA_Obj alpha, FLA_Obj A );

// -----------------------------------------------------------------------------

FLA_Error FLA_Transpose_blk_var1( FLA_Obj A, fla_tpose_t* cntl );
FLA_Error FLA_Transpose_blk_var2( FLA_Obj A, fla_tpose_t* cntl );
FLA_Error FLA_Transpose_unb_var1( FLA_Obj A );
FLA_Error FLA_Transpose_unb_var2( FLA_Obj A );
FLA_Error FLA_Swap_t_blk_var1( FLA_Obj A, FLA_Obj B, fla_swap_t* cntl );
FLA_Error FLA_Swap_t_blk_var2( FLA_Obj A, FLA_Obj B, fla_swap_t* cntl );

FLA_Error FLA_Sort( FLA_Direct direct, FLA_Obj x );
FLA_Error FLA_Sort_f_ops( integer     m_x,
                          float*  x, integer inc_x );
FLA_Error FLA_Sort_b_ops( integer     m_x,
                          float*  x, integer inc_x );
FLA_Error FLA_Sort_f_opd( integer     m_x,
                          double* x, integer inc_x );
FLA_Error FLA_Sort_b_opd( integer     m_x,
                          double* x, integer inc_x );

// end FLA_util_base_prototypes.h
// begin FLA_util_lapack_prototypes.h


// --- LAPACK-related utility prototypes ---------------------------------------

FLA_Error FLA_Househ2_UT( FLA_Side side, FLA_Obj chi_1, FLA_Obj x2, FLA_Obj tau );
FLA_Error FLA_Househ2_UT_l_ops( integer m_x2,
                                float* chi_1,
                                float* x2, integer inc_x2,
                                float* tau );
FLA_Error FLA_Househ2_UT_l_opd( integer m_x2,
                                double* chi_1,
                                double* x2, integer inc_x2,
                                double* tau );
FLA_Error FLA_Househ2_UT_l_opc( integer m_x2,
                                scomplex* chi_1,
                                scomplex* x2, integer inc_x2,
                                scomplex* tau );
FLA_Error FLA_Househ2_UT_l_opz( integer m_x2,
                                dcomplex* chi_1,
                                dcomplex* x2, integer inc_x2,
                                dcomplex* tau );
FLA_Error FLA_Househ2_UT_r_ops( integer m_x2,
                                float* chi_1,
                                float* x2, integer inc_x2,
                                float* tau );
FLA_Error FLA_Househ2_UT_r_opd( integer m_x2,
                                double* chi_1,
                                double* x2, integer inc_x2,
                                double* tau );
FLA_Error FLA_Househ2_UT_r_opc( integer m_x2,
                                scomplex* chi_1,
                                scomplex* x2, integer inc_x2,
                                scomplex* tau );
FLA_Error FLA_Househ2_UT_r_opz( integer m_x2,
                                dcomplex* chi_1,
                                dcomplex* x2, integer inc_x2,
                                dcomplex* tau );

FLA_Error FLA_Househ3UD_UT( FLA_Obj chi_1, FLA_Obj x2, FLA_Obj y2, FLA_Obj tau );
FLA_Error FLA_Househ3UD_UT_ops( integer m_x2,
                                integer m_y2,
                                float* chi_1,
                                float* x2, integer inc_x2,
                                float* y2, integer inc_y2,
                                float* tau );
FLA_Error FLA_Househ3UD_UT_opd( integer m_x2,
                                integer m_y2,
                                double* chi_1,
                                double* x2, integer inc_x2,
                                double* y2, integer inc_y2,
                                double* tau );
FLA_Error FLA_Househ3UD_UT_opc( integer m_x2,
                                integer m_y2,
                                scomplex* chi_1,
                                scomplex* x2, integer inc_x2,
                                scomplex* y2, integer inc_y2,
                                scomplex* tau );
FLA_Error FLA_Househ3UD_UT_opz( integer m_x2,
                                integer m_y2,
                                dcomplex* chi_1,
                                dcomplex* x2, integer inc_x2,
                                dcomplex* y2, integer inc_y2,
                                dcomplex* tau );

FLA_Error FLA_Househ2s_UT( FLA_Side side, FLA_Obj chi_1, FLA_Obj x2, FLA_Obj alpha, FLA_Obj chi_1_minus_alpha, FLA_Obj tau );
FLA_Error FLA_Househ2s_UT_l_ops( integer    m_x2,
                                 float* chi_1,
                                 float* x2, integer inc_x2,
                                 float* alpha,
                                 float* chi_1_minus_alpha,
                                 float* tau );
FLA_Error FLA_Househ2s_UT_l_opd( integer     m_x2,
                                 double* chi_1,
                                 double* x2, integer inc_x2,
                                 double* alpha,
                                 double* chi_1_minus_alpha,
                                 double* tau );
FLA_Error FLA_Househ2s_UT_l_opc( integer       m_x2,
                                 scomplex* chi_1,
                                 scomplex* x2, integer inc_x2,
                                 scomplex* alpha,
                                 scomplex* chi_1_minus_alpha,
                                 scomplex* tau );
FLA_Error FLA_Househ2s_UT_l_opz( integer       m_x2,
                                 dcomplex* chi_1,
                                 dcomplex* x2, integer inc_x2,
                                 dcomplex* alpha,
                                 dcomplex* chi_1_minus_alpha,
                                 dcomplex* tau );
FLA_Error FLA_Househ2s_UT_r_ops( integer    m_x2,
                                 float* chi_1,
                                 float* x2, integer inc_x2,
                                 float* alpha,
                                 float* chi_1_minus_alpha,
                                 float* tau );
FLA_Error FLA_Househ2s_UT_r_opd( integer     m_x2,
                                 double* chi_1,
                                 double* x2, integer inc_x2,
                                 double* alpha,
                                 double* chi_1_minus_alpha,
                                 double* tau );
FLA_Error FLA_Househ2s_UT_r_opc( integer       m_x2,
                                 scomplex* chi_1,
                                 scomplex* x2, integer inc_x2,
                                 scomplex* alpha,
                                 scomplex* chi_1_minus_alpha,
                                 scomplex* tau );
FLA_Error FLA_Househ2s_UT_r_opz( integer       m_x2,
                                 dcomplex* chi_1,
                                 dcomplex* x2, integer inc_x2,
                                 dcomplex* alpha,
                                 dcomplex* chi_1_minus_alpha,
                                 dcomplex* tau );

FLA_Error FLA_Hev_2x2( FLA_Obj alpha11, FLA_Obj alpha21, FLA_Obj alpha22,
                       FLA_Obj lambda1, FLA_Obj lambda2 );
FLA_Error FLA_Hev_2x2_ops( float*    buff_alpha11,
                           float*    buff_alpha21,
                           float*    buff_alpha22,
                           float*    buff_lambda1,
                           float*    buff_lambda2 );
FLA_Error FLA_Hev_2x2_opd( double*   buff_alpha11,
                           double*   buff_alpha21,
                           double*   buff_alpha22,
                           double*   buff_lambda1,
                           double*   buff_lambda2 );

FLA_Error FLA_Hevv_2x2( FLA_Obj alpha11, FLA_Obj alpha21, FLA_Obj alpha22,
                        FLA_Obj lambda1, FLA_Obj lambda2,
                        FLA_Obj gamma1,  FLA_Obj sigma1 );
FLA_Error FLA_Hevv_2x2_ops( float*    alpha11,
                            float*    alpha21,
                            float*    alpha22,
                            float*    lambda1,
                            float*    lambda2,
                            float*    gamma1,
                            float*    sigma1 );
FLA_Error FLA_Hevv_2x2_opd( double*   alpha11,
                            double*   alpha21,
                            double*   alpha22,
                            double*   lambda1,
                            double*   lambda2,
                            double*   gamma1,
                            double*   sigma1 );
FLA_Error FLA_Hevv_2x2_opc( scomplex* alpha11,
                            scomplex* alpha21,
                            scomplex* alpha22,
                            float*    lambda1,
                            float*    lambda2,
                            float*    gamma1,
                            scomplex* sigma1 );
FLA_Error FLA_Hevv_2x2_opz( dcomplex* alpha11,
                            dcomplex* alpha21,
                            dcomplex* alpha22,
                            double*   lambda1,
                            double*   lambda2,
                            double*   gamma1,
                            dcomplex* sigma1 );

FLA_Error FLA_Wilkshift_tridiag( FLA_Obj delta1, FLA_Obj epsilon, FLA_Obj delta2, FLA_Obj kappa );
FLA_Error FLA_Wilkshift_tridiag_ops( float   delta1,
                                     float   epsilon,
                                     float   delta2,
                                     float*  kappa );
FLA_Error FLA_Wilkshift_tridiag_opd( double  delta1,
                                     double  epsilon,
                                     double  delta2,
                                     double* kappa );

FLA_Error FLA_Pythag2( FLA_Obj chi, FLA_Obj psi, FLA_Obj rho );
FLA_Error FLA_Pythag2_ops( float*    chi,
                           float*    psi,
                           float*    rho );
FLA_Error FLA_Pythag2_opd( double*   chi,
                           double*   psi,
                           double*   rho );

FLA_Error FLA_Pythag3( FLA_Obj chi, FLA_Obj psi, FLA_Obj zeta, FLA_Obj rho );
FLA_Error FLA_Pythag3_ops( float*    chi,
                           float*    psi,
                           float*    zeta,
                           float*    rho );
FLA_Error FLA_Pythag3_opd( double*   chi,
                           double*   psi,
                           double*   zeta,
                           double*   rho );

FLA_Error FLA_Sort_evd( FLA_Direct direct, FLA_Obj l, FLA_Obj V );
FLA_Error FLA_Sort_evd_f_ops( integer       m_A,
                              float*    l, integer inc_l,
                              float*    V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_b_ops( integer       m_A,
                              float*    l, integer inc_l,
                              float*    V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_f_opd( integer       m_A,
                              double*   l, integer inc_l,
                              double*   V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_b_opd( integer       m_A,
                              double*   l, integer inc_l,
                              double*   V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_f_opc( integer       m_A,
                              float*    l, integer inc_l,
                              scomplex* V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_b_opc( integer       m_A,
                              float*    l, integer inc_l,
                              scomplex* V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_f_opz( integer       m_A,
                              double*   l, integer inc_l,
                              dcomplex* V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_evd_b_opz( integer       m_A,
                              double*   l, integer inc_l,
                              dcomplex* V, integer rs_V, integer cs_V );

FLA_Error FLA_Sort_bsvd_ext( FLA_Direct direct, FLA_Obj s,
                             FLA_Bool apply_U, FLA_Obj U,
                             FLA_Bool apply_V, FLA_Obj V,
                             FLA_Bool apply_C, FLA_Obj C );
FLA_Error FLA_Sort_bsvd_ext_f_ops( integer m_s, float* s, integer inc_s,
                                   integer m_U, float* U, integer rs_U, integer cs_U,
                                   integer m_V, float* V, integer rs_V, integer cs_V,
                                   integer n_C, float* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_b_ops( integer m_s, float* s, integer inc_s,
                                   integer m_U, float* U, integer rs_U, integer cs_U,
                                   integer m_V, float* V, integer rs_V, integer cs_V,
                                   integer n_C, float* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_f_opd( integer m_s, double* s, integer inc_s,
                                   integer m_U, double* U, integer rs_U, integer cs_U,
                                   integer m_V, double* V, integer rs_V, integer cs_V,
                                   integer n_C, double* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_b_opd( integer m_s, double* s, integer inc_s,
                                   integer m_U, double* U, integer rs_U, integer cs_U,
                                   integer m_V, double* V, integer rs_V, integer cs_V,
                                   integer n_C, double* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_f_opc( integer m_s, float*    s, integer inc_s,
                                   integer m_U, scomplex* U, integer rs_U, integer cs_U,
                                   integer m_V, scomplex* V, integer rs_V, integer cs_V,
                                   integer n_C, scomplex* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_b_opc( integer m_s, float*    s, integer inc_s,
                                   integer m_U, scomplex* U, integer rs_U, integer cs_U,
                                   integer m_V, scomplex* V, integer rs_V, integer cs_V,
                                   integer n_C, scomplex* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_f_opz( integer m_s, double*   s, integer inc_s,
                                   integer m_U, dcomplex* U, integer rs_U, integer cs_U,
                                   integer m_V, dcomplex* V, integer rs_V, integer cs_V,
                                   integer n_C, dcomplex* C, integer rs_C, integer cs_C );
FLA_Error FLA_Sort_bsvd_ext_b_opz( integer m_s, double*   s, integer inc_s,
                                   integer m_U, dcomplex* U, integer rs_U, integer cs_U,
                                   integer m_V, dcomplex* V, integer rs_V, integer cs_V,
                                   integer n_C, dcomplex* C, integer rs_C, integer cs_C );

FLA_Error FLA_Sort_svd( FLA_Direct direct, FLA_Obj s, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Sort_svd_f_ops( integer       m_U,
                              integer       n_V,
                              float*    s, integer inc_s,
                              float*    U, integer rs_U, integer cs_U,
                              float*    V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_b_ops( integer       m_U,
                              integer       n_V,
                              float*    s, integer inc_s,
                              float*    U, integer rs_U, integer cs_U,
                              float*    V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_f_opd( integer       m_U,
                              integer       n_V,
                              double*   s, integer inc_s,
                              double*   U, integer rs_U, integer cs_U,
                              double*   V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_b_opd( integer       m_U,
                              integer       n_V,
                              double*   s, integer inc_s,
                              double*   U, integer rs_U, integer cs_U,
                              double*   V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_f_opc( integer       m_U,
                              integer       n_V,
                              float*    s, integer inc_s,
                              scomplex* U, integer rs_U, integer cs_U,
                              scomplex* V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_b_opc( integer       m_U,
                              integer       n_V,
                              float*    s, integer inc_s,
                              scomplex* U, integer rs_U, integer cs_U,
                              scomplex* V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_f_opz( integer       m_U,
                              integer       n_V,
                              double*   s, integer inc_s,
                              dcomplex* U, integer rs_U, integer cs_U,
                              dcomplex* V, integer rs_V, integer cs_V );
FLA_Error FLA_Sort_svd_b_opz( integer       m_U,
                              integer       n_V,
                              double*   s, integer inc_s,
                              dcomplex* U, integer rs_U, integer cs_U,
                              dcomplex* V, integer rs_V, integer cs_V );

FLA_Error FLA_Sv_2x2( FLA_Obj alpha11, FLA_Obj alpha12, FLA_Obj alpha22,
                      FLA_Obj sigma1, FLA_Obj sigma2 );
FLA_Error FLA_Sv_2x2_ops( float*    alpha11,
                          float*    alpha12,
                          float*    alpha22,
                          float*    sigma1,
                          float*    sigma2 );
FLA_Error FLA_Sv_2x2_opd( double*   alpha11,
                          double*   alpha12,
                          double*   alpha22,
                          double*   sigma1,
                          double*   sigma2 );

FLA_Error FLA_Svv_2x2( FLA_Obj alpha11, FLA_Obj alpha12, FLA_Obj alpha22,
                       FLA_Obj sigma1, FLA_Obj sigma2,
                       FLA_Obj gammaL, FLA_Obj sigmaL,
                       FLA_Obj gammaR, FLA_Obj sigmaR );
FLA_Error FLA_Svv_2x2_ops( float*    alpha11,
                           float*    alpha12,
                           float*    alpha22,
                           float*    sigma1,
                           float*    sigma2,
                           float*    gammaL,
                           float*    sigmaL,
                           float*    gammaR,
                           float*    sigmaR );
FLA_Error FLA_Svv_2x2_opd( double*   alpha11,
                           double*   alpha12,
                           double*   alpha22,
                           double*   sigma1,
                           double*   sigma2,
                           double*   gammaL,
                           double*   sigmaL,
                           double*   gammaR,
                           double*   sigmaR );

FLA_Error FLA_Mach_params( FLA_Machval machval, FLA_Obj val );
float     FLA_Mach_params_ops( FLA_Machval machval );
double    FLA_Mach_params_opd( FLA_Machval machval );

FLA_Error FLA_Apply_diag_matrix( FLA_Side side, FLA_Conj conj, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Shift_pivots_to( FLA_Pivot_type ptype, FLA_Obj p );
FLA_Error FLA_Form_perm_matrix( FLA_Obj p, FLA_Obj A );
FLA_Error FLA_LU_find_zero_on_diagonal( FLA_Obj A );

// --- f2c-converted routine prototypes ----------------------------------------

doublereal fla_dlamch( char* cmach, ftnlen cmach_len );
real       fla_slamch( char* cmach, ftnlen cmach_len );
logical    fla_lsame( char* ca, char* cb, ftnlen ca_len, ftnlen cb_len );
double     fla_pow_di( doublereal* a, integer* n );
real       fla_pow_ri( real* a, integer* n );

// --- LAPACK-related utility check routine prototypes -------------------------

FLA_Error FLA_Househ2_UT_check( FLA_Side side, FLA_Obj chi_1, FLA_Obj x2, FLA_Obj tau );
FLA_Error FLA_Househ3UD_UT_check( FLA_Obj chi_1, FLA_Obj x2, FLA_Obj y2, FLA_Obj tau );
FLA_Error FLA_Househ2s_UT_check( FLA_Side side, FLA_Obj chi_1, FLA_Obj x2, FLA_Obj alpha, FLA_Obj chi_1_minus_alpha, FLA_Obj tau );

FLA_Error FLA_Givens2_check( FLA_Obj chi_1, FLA_Obj chi_2, FLA_Obj gamma, FLA_Obj sigma, FLA_Obj chi_1_new );
FLA_Error FLA_Apply_GTG_check( FLA_Obj gamma, FLA_Obj sigma, FLA_Obj delta1, FLA_Obj epsilon1, FLA_Obj delta2 );
FLA_Error FLA_Apply_G_1x2_check( FLA_Obj gamma, FLA_Obj sigma, FLA_Obj beta, FLA_Obj epsilon );
FLA_Error FLA_Apply_G_mx2_check( FLA_Obj gamma, FLA_Obj sigma, FLA_Obj a1, FLA_Obj a2 );
FLA_Error FLA_Apply_G_check( FLA_Side side, FLA_Direct direct, FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Wilkshift_tridiag_check( FLA_Obj delta1, FLA_Obj epsilon, FLA_Obj delta2, FLA_Obj kappa );
FLA_Error FLA_Wilkshift_bidiag_check( FLA_Obj epsilon1, FLA_Obj delta1, FLA_Obj epsilon2, FLA_Obj delta2, FLA_Obj kappa );
FLA_Error FLA_Introduce_bulge_check( FLA_Obj shift, FLA_Obj gamma, FLA_Obj sigma, FLA_Obj delta1, FLA_Obj epsilon1, FLA_Obj delta2, FLA_Obj beta, FLA_Obj epsilon2 );
FLA_Error FLA_Mach_params_check( FLA_Machval machval, FLA_Obj val );

FLA_Error FLA_Sort_evd_check( FLA_Direct direct, FLA_Obj l, FLA_Obj V );
FLA_Error FLA_Sort_svd_check( FLA_Direct direct, FLA_Obj s, FLA_Obj U, FLA_Obj V );

FLA_Error FLA_Apply_diag_matrix_check( FLA_Side side, FLA_Conj conj, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Shift_pivots_to_check( FLA_Pivot_type ptype, FLA_Obj p );
FLA_Error FLA_Form_perm_matrix_check( FLA_Obj p, FLA_Obj A );
FLA_Error FLA_LU_find_zero_on_diagonal_check( FLA_Obj A );

// end FLA_util_lapack_prototypes.h

  // Include prototypes for FLAME interfaces to BLAS and LAPACK operations.
// begin FLA_blas1_prototypes.h


// --- top-level wrapper prototypes --------------------------------------------

FLA_Error FLA_Asum( FLA_Obj x, FLA_Obj asum_x );
FLA_Error FLA_Axpy( FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Axpys( FLA_Obj alpha0, FLA_Obj alpha1, FLA_Obj A, FLA_Obj beta, FLA_Obj B );
FLA_Error FLA_Axpyt( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Axpyrt( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copy( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyr( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyrt( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyt( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyr( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Dot( FLA_Obj x, FLA_Obj y, FLA_Obj rho );
FLA_Error FLA_Dot2cs( FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dot2s( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dotc( FLA_Conj conj, FLA_Obj x, FLA_Obj y, FLA_Obj rho );
FLA_Error FLA_Dotcs( FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dots( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Amax( FLA_Obj x, FLA_Obj index );
FLA_Error FLA_Inv_scal( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Inv_scalc( FLA_Conj conjalpha, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Nrm2( FLA_Obj x, FLA_Obj norm_x );
FLA_Error FLA_Scal( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Scalc( FLA_Conj conjalpha, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Scalr( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Swap( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Swapt( FLA_Trans trans, FLA_Obj A, FLA_Obj B );


// --- task wrapper prototypes -------------------------------------------------

FLA_Error FLA_Axpy_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );
FLA_Error FLA_Axpyt_task( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Copy_task( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );
FLA_Error FLA_Copyt_task( FLA_Trans trans, FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyr_task( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Scal_task( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );
FLA_Error FLA_Scalr_task( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );

FLA_Error FLA_Axpyt_n_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_t_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_c_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_h_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );

FLA_Error FLA_Copyt_n_task( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_t_task( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_c_task( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_h_task( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );

FLA_Error FLA_Copyr_l_task( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_u_task( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );

FLA_Error FLA_Scalr_l_task( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_u_task( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );


// --- external wrapper prototypes ---------------------------------------------

FLA_Error FLA_Asum_external( FLA_Obj x, FLA_Obj asum_x );
FLA_Error FLA_Axpy_external( FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Axpys_external( FLA_Obj alpha0, FLA_Obj alpha1, FLA_Obj A, FLA_Obj beta, FLA_Obj B );
FLA_Error FLA_Axpyt_external( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Axpyrt_external( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copy_external( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyr_external( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyrt_external( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyt_external( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Dot_external( FLA_Obj x, FLA_Obj y, FLA_Obj rho );
FLA_Error FLA_Dotc_external( FLA_Conj conj, FLA_Obj x, FLA_Obj y, FLA_Obj rho );
FLA_Error FLA_Dots_external( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dotcs_external( FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dot2s_external( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dot2cs_external( FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Amax_external( FLA_Obj x, FLA_Obj index );
FLA_Error FLA_Inv_scal_external( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Inv_scalc_external( FLA_Conj conjalpha, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Nrm2_external( FLA_Obj x, FLA_Obj nrm_x );
FLA_Error FLA_Scal_external( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Scalc_external( FLA_Conj conjalpha, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Scalr_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Swap_external( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Swapt_external( FLA_Trans trans, FLA_Obj A, FLA_Obj B );


// --- gpu wrapper prototypes --------------------------------------------------

FLA_Error FLA_Axpy_external_gpu( FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu );
FLA_Error FLA_Copy_external_gpu( FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu );
FLA_Error FLA_Scal_external_gpu( FLA_Obj alpha, FLA_Obj A, void* A_gpu );
FLA_Error FLA_Scalr_external_gpu( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, void* A_gpu );


// --- check routine prototypes ------------------------------------------------

// front-ends
FLA_Error FLA_Asum_check( FLA_Obj x, FLA_Obj asum_x );
FLA_Error FLA_Axpy_check( FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Axpys_check( FLA_Obj alpha0, FLA_Obj alpha1, FLA_Obj A, FLA_Obj beta, FLA_Obj B );
FLA_Error FLA_Axpyt_check( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Axpyrt_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copy_check( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyr_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyrt_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Copyt_check( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Dot_check( FLA_Obj x, FLA_Obj y, FLA_Obj rho );
FLA_Error FLA_Dotc_check( FLA_Conj conj, FLA_Obj x, FLA_Obj y, FLA_Obj rho );
FLA_Error FLA_Dots_check( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dotcs_check( FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dot2s_check( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Dot2cs_check( FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj beta, FLA_Obj rho );
FLA_Error FLA_Amax_check( FLA_Obj x, FLA_Obj index );
FLA_Error FLA_Inv_scal_check( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Inv_scalc_check( FLA_Conj conjalpha, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Nrm2_check( FLA_Obj x, FLA_Obj nrm_x );
FLA_Error FLA_Scal_check( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Scalc_check( FLA_Conj conjalpha, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Scalr_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Swap_check( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Swapt_check( FLA_Trans trans, FLA_Obj A, FLA_Obj B );

// internal back-ends
FLA_Error FLA_Axpy_internal_check( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );
FLA_Error FLA_Axpyt_internal_check( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Copy_internal_check( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );
FLA_Error FLA_Copyt_internal_check( FLA_Trans trans, FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyr_internal_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Scal_internal_check( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );
FLA_Error FLA_Scalr_internal_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );

// end FLA_blas1_prototypes.h
// begin FLA_blas2_prototypes.h


// --- top-level wrapper prototypes --------------------------------------------

FLA_Error FLA_Gemv( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Gemvc( FLA_Trans transa, FLA_Conj conjx, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Ger( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Gerc( FLA_Conj conjx, FLA_Conj conjy, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Hemv( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Hemvc( FLA_Uplo uplo, FLA_Conj conja, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Her( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Herc( FLA_Uplo uplo, FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Her2( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Her2c( FLA_Uplo uplo, FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Symv( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Syr( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Syr2( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Trmv( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );
FLA_Error FLA_Trmvsx( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Trsv( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );
FLA_Error FLA_Trsvsx( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );


// --- task wrapper prototypes -------------------------------------------------

FLA_Error FLA_Gemv_task( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Trsv_task( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

FLA_Error FLA_Gemv_h_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_n_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_t_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );

FLA_Error FLA_Trsv_lc_task( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_ln_task( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_lt_task( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_uc_task( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_un_task( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_ut_task( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );


// --- external wrapper prototypes ---------------------------------------------

FLA_Error FLA_Gemv_external( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Gemvc_external( FLA_Trans transa, FLA_Conj conjx, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Ger_external( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Gerc_external( FLA_Conj conjx, FLA_Conj conjy, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Hemv_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Hemvc_external( FLA_Uplo uplo, FLA_Conj conja, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Her_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Herc_external( FLA_Uplo uplo, FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Her2_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Her2c_external( FLA_Uplo uplo, FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Symv_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Syr_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Syr2_external( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Trmv_external( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );
FLA_Error FLA_Trmvsx_external( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Trsv_external( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );
FLA_Error FLA_Trsvsx_external( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );


// --- gpu wrapper prototypes --------------------------------------------------

FLA_Error FLA_Gemv_external_gpu( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj x, void* x_gpu, FLA_Obj beta, FLA_Obj y, void* y_gpu );
FLA_Error FLA_Trsv_external_gpu( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, void* A_gpu, FLA_Obj x, void* x_gpu );


// --- check routine prototypes ------------------------------------------------

// front-ends
FLA_Error FLA_Gemv_check( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Gemvc_check( FLA_Trans transa, FLA_Conj conjx, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Ger_check( FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Gerc_check( FLA_Conj conjx, FLA_Conj conjy, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Hemv_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Hemvc_check( FLA_Uplo uplo, FLA_Conj conja, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Her_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Herc_check( FLA_Uplo uplo, FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Her2_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Her2c_check( FLA_Uplo uplo, FLA_Conj conj, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Symv_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Syr_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj A );
FLA_Error FLA_Syr2_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj x, FLA_Obj y, FLA_Obj A );
FLA_Error FLA_Trmv_check( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );
FLA_Error FLA_Trmvsx_check( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLA_Trsv_check( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );
FLA_Error FLA_Trsvsx_check( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );

// internal back-ends
FLA_Error FLA_Gemv_internal_check( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Trsv_internal_check( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_blas2_prototypes.h
// begin FLA_blas3_prototypes.h


// --- top-level wrapper prototypes --------------------------------------------

FLA_Error FLA_Gemm( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Trmm( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmmsx( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Trsm( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsmsx( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

FLA_Error FLA_Gemp( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gepm( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gepp( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );


// --- task wrapper prototypes -------------------------------------------------

FLA_Error FLA_Gemm_task( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Hemm_task( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Herk_task( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Her2k_task( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Symm_task( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Syrk_task( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syr2k_task( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Trmm_task( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trsm_task( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );

FLA_Error FLA_Gemm_cc_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Hemm_ll_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

FLA_Error FLA_Her2k_ln_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

FLA_Error FLA_Herk_ln_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_lh_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

FLA_Error FLA_Symm_ll_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

FLA_Error FLA_Syr2k_ln_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

FLA_Error FLA_Syrk_ln_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut_task( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

FLA_Error FLA_Trmm_llc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lln_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llt_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lun_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lut_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rln_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlt_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_run_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rut_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );

FLA_Error FLA_Trsm_llc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lln_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llt_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lun_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lut_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rln_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlt_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruc_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruh_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_run_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rut_task( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );


// --- external wrapper prototypes ---------------------------------------------

FLA_Error FLA_Gemm_external( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_external( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_external( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_external( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_external( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_external( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_external( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Trmm_external( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_external( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

FLA_Error FLA_Trmmsx_external( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Trsmsx_external( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );


// --- gpu wrapper prototypes --------------------------------------------------

FLA_Error FLA_Gemm_external_gpu( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Hemm_external_gpu( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Herk_external_gpu( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Her2k_external_gpu( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Symm_external_gpu( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Syrk_external_gpu( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Syr2k_external_gpu( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu, FLA_Obj beta, FLA_Obj C, void* C_gpu );
FLA_Error FLA_Trmm_external_gpu( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu );
FLA_Error FLA_Trsm_external_gpu( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, void* A_gpu, FLA_Obj B, void* B_gpu );


// --- check routine prototypes ------------------------------------------------

// front-ends
FLA_Error FLA_Gemm_check( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj  beta, FLA_Obj C );
FLA_Error FLA_Hemm_check( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta,  FLA_Obj C );
FLA_Error FLA_Her2k_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta,  FLA_Obj C );
FLA_Error FLA_Herk_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta,  FLA_Obj C );
FLA_Error FLA_Symm_check( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta,  FLA_Obj C );
FLA_Error FLA_Syrk_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta,  FLA_Obj C );
FLA_Error FLA_Trmm_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmmsx_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Trsm_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsmsx_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// internal back-ends
FLA_Error FLA_Gemm_internal_check( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Hemm_internal_check( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Herk_internal_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Her2k_internal_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Symm_internal_check( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Syrk_internal_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syr2k_internal_check( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Trmm_internal_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trsm_internal_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );

// end FLA_blas3_prototypes.h
// begin FLA_lapack_prototypes.h


// --- top-level wrapper prototypes --------------------------------------------

FLA_Error FLA_Chol( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_LU_nopiv( FLA_Obj A );
FLA_Error FLA_LU_piv( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_QR_UT( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_QR_UT_piv( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p );
FLA_Error FLA_LQ_UT( FLA_Obj A, FLA_Obj S );
FLA_Error FLA_Trinv( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Ttmm( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Sylv( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_SPDinv( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Hess_UT( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Eig_gest( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );

FLA_Error FLA_Accum_T_UT( FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj tau, FLA_Obj T );
FLA_Error FLA_Apply_H2_UT( FLA_Side side, FLA_Obj tau, FLA_Obj u2, FLA_Obj a1, FLA_Obj A2 );
FLA_Error FLA_Apply_HUD_UT( FLA_Side side, FLA_Obj tau, FLA_Obj w12t, FLA_Obj u2, FLA_Obj v2, FLA_Obj r12t, FLA_Obj C2, FLA_Obj D2 );
FLA_Error FLA_Apply_Q_UT( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B );
FLA_Error FLA_Apply_pivots( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A );

// --- task wrapper prototypes -------------------------------------------------

FLA_Error FLA_Chol_task( FLA_Uplo uplo, FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_l_task( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_u_task( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_LU_piv_macro_task( FLA_Obj A, FLA_Obj p, fla_lu_t* cntl );
FLA_Error FLA_Apply_pivots_task( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_Apply_pivots_ln_task( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_Apply_pivots_macro_task( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_LU_nopiv_task( FLA_Obj A, fla_lu_t* cntl );
FLA_Error FLA_LU_piv_task( FLA_Obj A, FLA_Obj p, fla_lu_t* cntl );
FLA_Error FLA_LU_piv_copy_task( FLA_Obj A, FLA_Obj p, FLA_Obj U, fla_lu_t* cntl );
FLA_Error FLA_Trsm_piv_task( FLA_Obj A, FLA_Obj B, FLA_Obj p, fla_trsm_t* cntl );
FLA_Error FLA_SA_LU_task( FLA_Obj U, FLA_Obj D, FLA_Obj p, FLA_Obj L, fla_dim_t nb_alg, fla_lu_t* cntl );
FLA_Error FLA_SA_FS_task( FLA_Obj L, FLA_Obj D, FLA_Obj p, FLA_Obj C, FLA_Obj E, fla_dim_t nb_alg, fla_gemm_t* cntl );
FLA_Error FLA_Trinv_task( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_ln_task( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_lu_task( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_un_task( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_uu_task( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Ttmm_task( FLA_Uplo uplo, FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_l_task( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_u_task( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Sylv_task( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_task( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_task( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_task( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_task( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Lyap_task( FLA_Trans trans, FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_n_task( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_h_task( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Apply_Q_UT_task( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfc_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfr_task( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_task( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_lhfc_task( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_CAQ2_UT_task( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E, fla_apcaq2ut_t* cntl );
FLA_Error FLA_Apply_CAQ2_UT_lhfc_task( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E, fla_apcaq2ut_t* cntl );
FLA_Error FLA_QR2_UT_task( FLA_Obj B, FLA_Obj D, FLA_Obj T, fla_qr2ut_t* cntl );
FLA_Error FLA_CAQR2_UT_task( FLA_Obj B, FLA_Obj D, FLA_Obj T, fla_caqr2ut_t* cntl );
FLA_Error FLA_QR_UT_macro_task( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_task( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_copy_task( FLA_Obj A, FLA_Obj T, FLA_Obj U, fla_qrut_t* cntl );
FLA_Error FLA_LQ_UT_macro_task( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );
FLA_Error FLA_LQ_UT_task( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );
FLA_Error FLA_UDdate_UT_task( FLA_Obj R, FLA_Obj C, FLA_Obj D, FLA_Obj T, fla_uddateut_t* cntl );
FLA_Error FLA_Apply_QUD_UT_task( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj T, FLA_Obj W, FLA_Obj R, FLA_Obj U, FLA_Obj C, FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );
FLA_Error FLA_Apply_QUD_UT_lhfc_task( FLA_Obj T, FLA_Obj W, FLA_Obj R, FLA_Obj U, FLA_Obj C, FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );
FLA_Error FLA_Eig_gest_task( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_il_task( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_iu_task( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nl_task( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nu_task( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );

// --- external wrapper prototypes ---------------------------------------------

FLA_Error FLA_Apply_Q_blk_external( FLA_Side side, FLA_Trans trans, FLA_Store storev, FLA_Obj A, FLA_Obj t, FLA_Obj B );

FLA_Error FLA_Apply_pivots_unb_external( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A );
FLA_Error FLA_Apply_pivots_ln_unb_ext( FLA_Obj p, FLA_Obj A );

FLA_Error FLA_Apply_pivots_macro_external( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A );

FLA_Error FLA_Chol_blk_external( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Chol_l_blk_ext( FLA_Obj A );
FLA_Error FLA_Chol_u_blk_ext( FLA_Obj A );
FLA_Error FLA_Chol_unb_external( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Chol_l_unb_ext( FLA_Obj A );
FLA_Error FLA_Chol_u_unb_ext( FLA_Obj A );

FLA_Error FLA_LU_piv_blk_external( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_blk_ext( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_unb_external( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_unb_ext( FLA_Obj A, FLA_Obj p );

FLA_Error FLA_QR_blk_external( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_QR_unb_external( FLA_Obj A, FLA_Obj t );

FLA_Error FLA_LQ_blk_external( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_LQ_unb_external( FLA_Obj A, FLA_Obj t );

FLA_Error FLA_Hess_blk_external( FLA_Obj A, FLA_Obj t, integer ilo, integer ihi );
FLA_Error FLA_Hess_unb_external( FLA_Obj A, FLA_Obj t, integer ilo, integer ihi );

FLA_Error FLA_Tridiag_blk_external( FLA_Uplo uplo, FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Tridiag_unb_external( FLA_Uplo uplo, FLA_Obj A, FLA_Obj t );

FLA_Error FLA_Bidiag_blk_external( FLA_Obj A, FLA_Obj tu, FLA_Obj tv );
FLA_Error FLA_Bidiag_unb_external( FLA_Obj A, FLA_Obj tu, FLA_Obj tv );

FLA_Error FLA_QR_form_Q_external( FLA_Obj A, FLA_Obj t );

FLA_Error FLA_Tridiag_form_Q_external( FLA_Uplo uplo, FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Tridiag_apply_Q_external( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Obj A, FLA_Obj t, FLA_Obj B );

FLA_Error FLA_Bidiag_form_U_external( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Bidiag_form_V_external( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Bidiag_apply_U_external( FLA_Side side, FLA_Trans trans, FLA_Obj A, FLA_Obj t, FLA_Obj B );
FLA_Error FLA_Bidiag_apply_V_external( FLA_Side side, FLA_Trans trans, FLA_Obj A, FLA_Obj t, FLA_Obj B );

FLA_Error FLA_Trinv_blk_external( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Trinv_ln_blk_ext( FLA_Obj A );
FLA_Error FLA_Trinv_lu_blk_ext( FLA_Obj A );
FLA_Error FLA_Trinv_un_blk_ext( FLA_Obj A );
FLA_Error FLA_Trinv_uu_blk_ext( FLA_Obj A );
FLA_Error FLA_Trinv_unb_external( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Trinv_ln_unb_ext( FLA_Obj A );
FLA_Error FLA_Trinv_lu_unb_ext( FLA_Obj A );
FLA_Error FLA_Trinv_un_unb_ext( FLA_Obj A );
FLA_Error FLA_Trinv_uu_unb_ext( FLA_Obj A );

FLA_Error FLA_Ttmm_blk_external( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Ttmm_l_blk_ext( FLA_Obj A );
FLA_Error FLA_Ttmm_u_blk_ext( FLA_Obj A );
FLA_Error FLA_Ttmm_unb_external( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Ttmm_l_unb_ext( FLA_Obj A );
FLA_Error FLA_Ttmm_u_unb_ext( FLA_Obj A );

FLA_Error FLA_Sylv_blk_external( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_blk_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_blk_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_blk_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_blk_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_unb_external( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_unb_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_unb_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_unb_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_unb_ext( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_SPDinv_blk_external( FLA_Uplo uplo, FLA_Obj A );

FLA_Error FLA_Eig_gest_blk_external( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_blk_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_blk_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_blk_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_blk_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_unb_external( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_unb_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_unb_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_unb_ext( FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_unb_ext( FLA_Obj A, FLA_Obj B );

FLA_Error FLA_Tevd_external( FLA_Evd_type jobz, FLA_Obj d, FLA_Obj e, FLA_Obj A );
FLA_Error FLA_Tevdd_external( FLA_Evd_type jobz, FLA_Obj d, FLA_Obj e, FLA_Obj A );
FLA_Error FLA_Tevdr_external( FLA_Evd_type jobz, FLA_Obj d, FLA_Obj e, FLA_Obj l, FLA_Obj A );
FLA_Error FLA_Hevd_external( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l );
FLA_Error FLA_Hevdd_external( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l );
FLA_Error FLA_Hevdr_external( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l, FLA_Obj Z );
FLA_Error FLA_Bsvd_external( FLA_Uplo uplo, FLA_Obj d, FLA_Obj e, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Bsvdd_external( FLA_Uplo uplo, FLA_Obj d, FLA_Obj e, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Svd_external( FLA_Svd_type jobu, FLA_Svd_type jobv, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Svdd_external( FLA_Svd_type jobz, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );

// --- check routine prototypes ------------------------------------------------

FLA_Error FLA_Chol_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Chol_solve_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_LU_nopiv_check( FLA_Obj A );
FLA_Error FLA_LU_nopiv_solve_check( FLA_Obj A, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_LU_piv_check( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_solve_check( FLA_Obj A, FLA_Obj p, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_LU_incpiv_check( FLA_Obj A, FLA_Obj p, FLA_Obj L );
FLA_Error FLA_LU_incpiv_solve_check( FLA_Obj A, FLA_Obj p, FLA_Obj L, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_FS_incpiv_check( FLA_Obj A, FLA_Obj p, FLA_Obj L, FLA_Obj b );
FLA_Error FLA_QR_check( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_QR_UT_check( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_QR_UT_solve_check( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_QR_UT_recover_tau_check( FLA_Obj T, FLA_Obj tau );
FLA_Error FLA_QR_UT_form_Q_check( FLA_Obj A, FLA_Obj T, FLA_Obj Q );
FLA_Error FLA_LQ_check( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_LQ_UT_check( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_LQ_UT_solve_check( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_LQ_UT_recover_tau_check( FLA_Obj T, FLA_Obj tau );
FLA_Error FLA_LQ_UT_form_Q_check( FLA_Obj A, FLA_Obj T, FLA_Obj Q );
FLA_Error FLA_Hess_check( FLA_Obj A, FLA_Obj t, integer ilo, integer ihi );
FLA_Error FLA_Hess_UT_check( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_recover_tau_check( FLA_Obj T, FLA_Obj tau );
FLA_Error FLA_Tridiag_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Tridiag_UT_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_recover_tau_check( FLA_Obj T, FLA_Obj tau );
FLA_Error FLA_Tridiag_UT_scale_diagonals_check( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Tridiag_UT_extract_diagonals_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Tridiag_UT_extract_real_diagonals_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Tridiag_UT_realify_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_realify_subdiagonal_check( FLA_Obj b, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_shift_U_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Tridiag_UT_form_Q_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T, FLA_Obj Q );
FLA_Error FLA_Trinv_check( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLA_Bidiag_check( FLA_Obj A, FLA_Obj tu, FLA_Obj tv );
FLA_Error FLA_Bidiag_UT_check( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_recover_tau_check( FLA_Obj TU, FLA_Obj TV, FLA_Obj tu, FLA_Obj tv );
FLA_Error FLA_Bidiag_UT_extract_diagonals_check( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_extract_real_diagonals_check( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_scale_diagonals_check( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Bidiag_UT_realify_check( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_realify_diagonals_check( FLA_Uplo uplo, FLA_Obj a, FLA_Obj b, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_form_U_check( FLA_Obj A, FLA_Obj T, FLA_Obj U );
FLA_Error FLA_Bidiag_UT_form_V_check( FLA_Obj A, FLA_Obj S, FLA_Obj V );
FLA_Error FLA_Ttmm_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Sylv_check( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Lyap_check( FLA_Trans trans, FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_SPDinv_check( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Eig_gest_check( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );

FLA_Error FLA_Apply_Q_check( FLA_Side side, FLA_Trans trans, FLA_Store storev, FLA_Obj A, FLA_Obj t, FLA_Obj B );

FLA_Error FLA_QR_form_Q_check( FLA_Obj A, FLA_Obj t );

FLA_Error FLA_Tridiag_form_Q_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Tridiag_apply_Q_check( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Obj A, FLA_Obj t, FLA_Obj B );

FLA_Error FLA_Bidiag_form_U_check( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Bidiag_form_V_check( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_Bidiag_apply_U_check( FLA_Side side, FLA_Trans trans, FLA_Obj A, FLA_Obj t, FLA_Obj B );
FLA_Error FLA_Bidiag_apply_V_check( FLA_Side side, FLA_Trans trans, FLA_Obj A, FLA_Obj t, FLA_Obj B );

FLA_Error FLA_Apply_Q_UT_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B );
FLA_Error FLA_Apply_Q2_UT_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E );
FLA_Error FLA_Apply_QUD_UT_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj T, FLA_Obj W, FLA_Obj R, FLA_Obj U, FLA_Obj C, FLA_Obj V, FLA_Obj D );
FLA_Error FLA_Apply_pivots_check( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A );
FLA_Error FLA_QR2_UT_check( FLA_Obj B, FLA_Obj D, FLA_Obj T );
FLA_Error FLA_CAQR2_UT_check( FLA_Obj B, FLA_Obj D, FLA_Obj T );
FLA_Error FLA_QR_UT_inc_check( FLA_Obj A, FLA_Obj TW );
FLA_Error FLA_Apply_Q_UT_inc_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B );
FLA_Error FLA_Apply_CAQ_UT_inc_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj ATW, FLA_Obj R, FLA_Obj RTW, FLA_Obj W1, FLA_Obj B );

FLA_Error FLA_QR_UT_inc_solve_check( FLA_Obj A, FLA_Obj TW, FLA_Obj B, FLA_Obj X );
FLA_Error FLA_CAQR_UT_inc_solve_check( fla_dim_t p, FLA_Obj A, FLA_Obj ATW, FLA_Obj R, FLA_Obj RTW, FLA_Obj B, FLA_Obj X );

FLA_Error FLA_UDdate_UT_check( FLA_Obj R, FLA_Obj C, FLA_Obj D, FLA_Obj T );
FLA_Error FLA_UDdate_UT_update_rhs_check( FLA_Obj T, FLA_Obj bR, FLA_Obj C, FLA_Obj bC, FLA_Obj D, FLA_Obj bD );
FLA_Error FLA_UDdate_UT_solve_check( FLA_Obj R, FLA_Obj bR, FLA_Obj x );

FLA_Error FLA_UDdate_UT_inc_check( FLA_Obj R, FLA_Obj C, FLA_Obj D, FLA_Obj T, FLA_Obj W );
FLA_Error FLA_UDdate_UT_inc_update_rhs_check( FLA_Obj T, FLA_Obj bR, FLA_Obj C, FLA_Obj bC, FLA_Obj D, FLA_Obj bD );
FLA_Error FLA_UDdate_UT_inc_solve_check( FLA_Obj R, FLA_Obj bR, FLA_Obj x );

FLA_Error FLA_CAQR_UT_inc_check( fla_dim_t p, FLA_Obj A, FLA_Obj ATW, FLA_Obj R, FLA_Obj RTW );

FLA_Error FLA_Apply_QUD_UT_inc_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj T, FLA_Obj W, FLA_Obj R, FLA_Obj U, FLA_Obj C, FLA_Obj V, FLA_Obj D );

FLA_Error FLA_Apply_H2_UT_check( FLA_Side side, FLA_Obj tau, FLA_Obj u2, FLA_Obj a1t, FLA_Obj A2 );
FLA_Error FLA_Apply_HUD_UT_check( FLA_Side side, FLA_Obj tau, FLA_Obj w12t, FLA_Obj u2, FLA_Obj v2, FLA_Obj r12t, FLA_Obj C2, FLA_Obj D2 );
FLA_Error FLA_Accum_T_UT_check( FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj tau, FLA_Obj T );

FLA_Error FLA_Tevd_compute_scaling_check( FLA_Obj d, FLA_Obj e, FLA_Obj sigma );
FLA_Error FLA_Hevd_compute_scaling_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj sigma );
FLA_Error FLA_Hevd_check( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l );
FLA_Error FLA_Hevdd_check( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l );
FLA_Error FLA_Hevdr_check( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l, FLA_Obj Z );

FLA_Error FLA_Bsvd_check( FLA_Uplo uplo, FLA_Obj d, FLA_Obj e,
                          FLA_Obj G, FLA_Obj H,
                          FLA_Svd_type jobu, FLA_Obj U,
                          FLA_Svd_type jobv, FLA_Obj V );
FLA_Error FLA_Bsvd_ext_check( FLA_Uplo uplo, FLA_Obj d, FLA_Obj e,
                              FLA_Obj G, FLA_Obj H,
                              FLA_Svd_type jobu, FLA_Obj U,
                              FLA_Svd_type jobv, FLA_Obj V,
                              FLA_Bool apply_Uh2C, FLA_Obj C );
FLA_Error FLA_Bsvd_compute_scaling_check( FLA_Obj d, FLA_Obj e, FLA_Obj sigma );
FLA_Error FLA_Svd_compute_scaling_check( FLA_Obj A, FLA_Obj sigma );
FLA_Error FLA_Svd_check( FLA_Svd_type jobu, FLA_Svd_type jobv, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Svd_ext_check( FLA_Svd_type jobu, FLA_Trans transu, FLA_Svd_type jobv, FLA_Trans transv,
                             FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Svdd_check( FLA_Svd_type jobz, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );

FLA_Error FLA_Chol_internal_check( FLA_Uplo uplo, FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_LU_nopiv_internal_check( FLA_Obj A, fla_lu_t* cntl );
FLA_Error FLA_Trinv_internal_check( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Ttmm_internal_check( FLA_Uplo uplo, FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_SPDinv_internal_check( FLA_Uplo uplo, FLA_Obj A, fla_spdinv_t* cntl );
FLA_Error FLA_Sylv_internal_check( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Lyap_internal_check( FLA_Trans trans, FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_QR_UT_internal_check( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_copy_internal_check( FLA_Obj A, FLA_Obj T, FLA_Obj U, fla_qrut_t* cntl );
FLA_Error FLA_QR2_UT_internal_check( FLA_Obj B, FLA_Obj D, FLA_Obj T, fla_qr2ut_t* cntl );
FLA_Error FLA_CAQR2_UT_internal_check( FLA_Obj B, FLA_Obj D, FLA_Obj T, fla_caqr2ut_t* cntl );
FLA_Error FLA_LQ_UT_internal_check( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );
FLA_Error FLA_Hess_UT_internal_check( FLA_Obj A, FLA_Obj T, fla_hessut_t* cntl );
FLA_Error FLA_Tridiag_UT_internal_check( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T, fla_tridiagut_t* cntl );
FLA_Error FLA_Bidiag_UT_internal_check( FLA_Obj A, FLA_Obj TU, FLA_Obj TV, fla_bidiagut_t* cntl );

FLA_Error FLA_UDdate_UT_internal_check( FLA_Obj R, FLA_Obj C, FLA_Obj D, FLA_Obj T, fla_uddateut_t* cntl );

FLA_Error FLA_Apply_Q_UT_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_CAQ2_UT_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E, fla_apcaq2ut_t* cntl );
FLA_Error FLA_Apply_QUD_UT_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj T, FLA_Obj W, FLA_Obj R, FLA_Obj U, FLA_Obj C, FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );

FLA_Error FLA_Apply_Q_UT_inc_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B, fla_apqutinc_t* cntl );
FLA_Error FLA_Apply_CAQ_UT_inc_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj R, FLA_Obj TW, FLA_Obj W, FLA_Obj B, fla_apcaqutinc_t* cntl );
FLA_Error FLA_Apply_QUD_UT_inc_internal_check( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj T, FLA_Obj W, FLA_Obj R, FLA_Obj U, FLA_Obj C, FLA_Obj V, FLA_Obj D, fla_apqudutinc_t* cntl );

FLA_Error FLA_Eig_gest_internal_check( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
// end FLA_lapack_prototypes.h

  // Include prototypes for FLAME implementations of BLAS and LAPACK operations.
// begin FLA_blas_var_prototypes.h


// Level-1 BLAS
// begin FLA_Axpy.h


// begin FLA_Axpy_vars.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Axpy_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );
FLA_Error FLA_Axpy_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );
FLA_Error FLA_Axpy_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );
FLA_Error FLA_Axpy_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );

// end FLA_Axpy_vars.h

FLA_Error FLA_Axpy_internal( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpy_t* cntl );

// end FLA_Axpy.h
// begin FLA_Axpyt.h


// begin FLA_Axpyt_n.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Axpyt_n_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_n_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_n_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_n_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );

// end FLA_Axpyt_n.h
// begin FLA_Axpyt_t.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Axpyt_t_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_t_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_t_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_t_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );

// end FLA_Axpyt_t.h
// begin FLA_Axpyt_c.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Axpyt_c_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_c_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_c_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_c_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );

// end FLA_Axpyt_c.h
// begin FLA_Axpyt_h.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Axpyt_h_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_h_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_h_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_h_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );

// end FLA_Axpyt_h.h

FLA_Error FLA_Axpyt_internal( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_n( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_t( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_c( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );
FLA_Error FLA_Axpyt_h( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_axpyt_t* cntl );

// end FLA_Axpyt.h
// begin FLA_Copy.h


// begin FLA_Copy_vars.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copy_blk_var1( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );
FLA_Error FLA_Copy_blk_var2( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );
FLA_Error FLA_Copy_blk_var3( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );
FLA_Error FLA_Copy_blk_var4( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );

// end FLA_Copy_vars.h

FLA_Error FLA_Copy_internal( FLA_Obj A, FLA_Obj B, fla_copy_t* cntl );

// end FLA_Copy.h
// begin FLA_Copyt.h


// begin FLA_Copyt_n.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copyt_n_blk_var1( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_n_blk_var2( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_n_blk_var3( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_n_blk_var4( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );

// end FLA_Copyt_n.h
// begin FLA_Copyt_t.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copyt_t_blk_var1( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_t_blk_var2( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_t_blk_var3( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_t_blk_var4( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );

// end FLA_Copyt_t.h
// begin FLA_Copyt_c.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copyt_c_blk_var1( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_c_blk_var2( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_c_blk_var3( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_c_blk_var4( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );

// end FLA_Copyt_c.h
// begin FLA_Copyt_h.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copyt_h_blk_var1( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_h_blk_var2( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_h_blk_var3( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_h_blk_var4( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );

// end FLA_Copyt_h.h

FLA_Error FLA_Copyt_internal( FLA_Trans trans, FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_n( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_t( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_c( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );
FLA_Error FLA_Copyt_h( FLA_Obj A, FLA_Obj B, fla_copyt_t* cntl );

// end FLA_Copyt.h
// begin FLA_Copyr.h


// begin FLA_Copyr_l.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copyr_l_blk_var1( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_l_blk_var2( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_l_blk_var3( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_l_blk_var4( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );

// end FLA_Copyr_l.h
// begin FLA_Copyr_u.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Copyr_u_blk_var1( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_u_blk_var2( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_u_blk_var3( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_u_blk_var4( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );

// end FLA_Copyr_u.h

FLA_Error FLASH_Copyr( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );

FLA_Error FLA_Copyr_internal( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_l( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );
FLA_Error FLA_Copyr_u( FLA_Obj A, FLA_Obj B, fla_copyr_t* cntl );

// end FLA_Copyr.h
// begin FLA_Scal.h


// begin FLA_Scal_vars.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Scal_blk_var1( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );
FLA_Error FLA_Scal_blk_var2( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );
FLA_Error FLA_Scal_blk_var3( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );
FLA_Error FLA_Scal_blk_var4( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );

// end FLA_Scal_vars.h

FLA_Error FLA_Scal_internal( FLA_Obj alpha, FLA_Obj A, fla_scal_t* cntl );

// end FLA_Scal.h
// begin FLA_Scalr.h


// begin FLA_Scalr_l.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Scalr_l_blk_var1( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_l_blk_var2( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_l_blk_var3( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_l_blk_var4( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );

// end FLA_Scalr_l.h
// begin FLA_Scalr_u.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Scalr_u_blk_var1( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_u_blk_var2( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_u_blk_var3( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_u_blk_var4( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );

// end FLA_Scalr_u.h

FLA_Error FLA_Scalr_internal( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );

FLA_Error FLA_Scalr_l( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );
FLA_Error FLA_Scalr_u( FLA_Obj alpha, FLA_Obj A, fla_scalr_t* cntl );

// end FLA_Scalr.h

// Level-2 BLAS
// begin FLA_Gemv.h


// begin FLA_Gemv_h.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemv_h_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_h_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_h_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_h_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );

// end FLA_Gemv_h.h
// begin FLA_Gemv_n.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemv_n_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_n_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_n_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_n_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );

// end FLA_Gemv_n.h
// begin FLA_Gemv_t.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemv_t_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_t_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_t_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_t_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );

// end FLA_Gemv_t.h

FLA_Error FLA_Gemv_internal( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );

FLA_Error FLA_Gemv_h( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_n( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );
FLA_Error FLA_Gemv_t( FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y, fla_gemv_t* cntl );

// end FLA_Gemv.h
// begin FLA_Trsv.h


// begin FLA_Trsv_lc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsv_lc_blk_var1( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_lc_blk_var2( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv_lc.h
// begin FLA_Trsv_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsv_ln_blk_var1( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_ln_blk_var2( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv_ln.h
// begin FLA_Trsv_lt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsv_lt_blk_var1( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_lt_blk_var2( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv_lt.h
// begin FLA_Trsv_uc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsv_uc_blk_var1( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_uc_blk_var2( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv_uc.h
// begin FLA_Trsv_un.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsv_un_blk_var1( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_un_blk_var2( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv_un.h
// begin FLA_Trsv_ut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsv_ut_blk_var1( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_ut_blk_var2( FLA_Diag diagA, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv_ut.h

FLA_Error FLA_Trsv_internal( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

FLA_Error FLA_Trsv_lc( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_ln( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_lt( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_uc( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_un( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );
FLA_Error FLA_Trsv_ut( FLA_Diag diag, FLA_Obj A, FLA_Obj x, fla_trsv_t* cntl );

// end FLA_Trsv.h

// Level-3 BLAS
// begin FLA_Gemm.h


// begin FLA_Gemm_cc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_cc_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cc_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cc_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cc_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cc_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cc_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_cc_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cc_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cc_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cc_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cc_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cc_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_cc.h
// begin FLA_Gemm_ch.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_ch_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_ch_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ch_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ch_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ch_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ch_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ch_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_ch.h
// begin FLA_Gemm_cn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_cn_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_cn_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cn_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cn_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cn_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cn_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_cn_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_cn.h
// begin FLA_Gemm_ct.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_ct_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_ct_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ct_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ct_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ct_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ct_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ct_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_ct.h
// begin FLA_Gemm_hc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_hc_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_hc_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hc_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hc_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hc_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hc_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hc_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_hc.h
// begin FLA_Gemm_hh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_hh_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_hh_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hh_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hh_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hh_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hh_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hh_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_hh.h
// begin FLA_Gemm_hn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_hn_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_hn_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hn_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hn_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hn_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hn_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_hn_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_hn.h
// begin FLA_Gemm_ht.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_ht_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_ht_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ht_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ht_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ht_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ht_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_ht_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_ht.h
// begin FLA_Gemm_nc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_nc_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_nc_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nc_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nc_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nc_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nc_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nc_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_nc.h
// begin FLA_Gemm_nh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_nh_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_nh_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nh_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nh_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nh_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nh_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nh_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_nh.h
// begin FLA_Gemm_nn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_nn_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_nn_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nn_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nn_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nn_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nn_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nn_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_nn.h
// begin FLA_Gemm_nt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_nt_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_nt_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nt_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nt_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nt_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nt_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_nt_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_nt.h
// begin FLA_Gemm_tc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_tc_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_tc_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tc_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tc_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tc_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tc_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tc_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_tc.h
// begin FLA_Gemm_th.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_th_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_th_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_th_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_th_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_th_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_th_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_th_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_th.h
// begin FLA_Gemm_tn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_tn_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_tn_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tn_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tn_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tn_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tn_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tn_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_tn.h
// begin FLA_Gemm_tt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Gemm_tt_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_tt_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tt_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tt_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tt_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tt_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Gemm_tt_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Gemm_tt.h

FLA_Error FLA_Gemm_internal( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

FLA_Error FLA_Gemm_cc( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ch( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_cn( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ct( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hc( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hh( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_hn( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_ht( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nc( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nh( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nn( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_nt( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tc( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_th( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tn( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );
FLA_Error FLA_Gemm_tt( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_gemm_t* cntl );

// end FLA_Gemm.h
// begin FLA_Hemm.h


// begin FLA_Hemm_ll.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Hemm_ll_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ll_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

FLA_Error FLA_Hemm_ll_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ll_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Hemm_ll.h
// begin FLA_Hemm_lu.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Hemm_lu_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

FLA_Error FLA_Hemm_lu_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_lu_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Hemm_lu.h
// begin FLA_Hemm_rl.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Hemm_rl_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

FLA_Error FLA_Hemm_rl_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_rl_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Hemm_rl.h
// begin FLA_Hemm_ru.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Hemm_ru_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

FLA_Error FLA_Hemm_ru_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Hemm_ru_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Hemm_ru.h

FLA_Error FLA_Hemm_internal( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

FLA_Error FLA_Hemm_ll( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_lu( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_rl( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );
FLA_Error FLA_Hemm_ru( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_hemm_t* cntl );

// end FLA_Hemm.h
// begin FLA_Herk.h


// begin FLA_Herk_lh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Herk_lh_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_lh_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_lh_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_lh_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_lh_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_lh_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

FLA_Error FLA_Herk_lh_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_lh_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_lh_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_lh_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_lh_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_lh_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Herk_lh.h
// begin FLA_Herk_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Herk_ln_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_ln_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_ln_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_ln_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_ln_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_ln_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

FLA_Error FLA_Herk_ln_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_ln_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_ln_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_ln_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_ln_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_ln_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Herk_ln.h
// begin FLA_Herk_uh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Herk_uh_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

FLA_Error FLA_Herk_uh_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_uh_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_uh_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_uh_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_uh_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_uh_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Herk_uh.h
// begin FLA_Herk_un.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Herk_un_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

FLA_Error FLA_Herk_un_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_un_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_un_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_un_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_un_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Herk_un_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Herk_un.h

FLA_Error FLA_Herk_internal( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

FLA_Error FLA_Herk_lh( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_ln( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_uh( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );
FLA_Error FLA_Herk_un( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_herk_t* cntl );

// end FLA_Herk.h
// begin FLA_Her2k.h


// begin FLA_Her2k_lh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Her2k_lh_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_lh_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

FLA_Error FLA_Her2k_lh_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_lh_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Her2k_lh.h
// begin FLA_Her2k_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Her2k_ln_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

FLA_Error FLA_Her2k_ln_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_ln_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Her2k_ln.h
// begin FLA_Her2k_uh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Her2k_uh_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

FLA_Error FLA_Her2k_uh_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_uh_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Her2k_uh.h
// begin FLA_Her2k_un.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Her2k_un_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

FLA_Error FLA_Her2k_un_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Her2k_un_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Her2k_un.h

FLA_Error FLA_Her2k_internal( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

FLA_Error FLA_Her2k_lh( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_ln( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_uh( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );
FLA_Error FLA_Her2k_un( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_her2k_t* cntl );

// end FLA_Her2k.h
// begin FLA_Symm.h


// begin FLA_Symm_ll.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Symm_ll_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ll_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

FLA_Error FLA_Symm_ll_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ll_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Symm_ll.h
// begin FLA_Symm_lu.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Symm_lu_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

FLA_Error FLA_Symm_lu_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_lu_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Symm_lu.h
// begin FLA_Symm_rl.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Symm_rl_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

FLA_Error FLA_Symm_rl_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_rl_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Symm_rl.h
// begin FLA_Symm_ru.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Symm_ru_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

FLA_Error FLA_Symm_ru_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Symm_ru_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Symm_ru.h

FLA_Error FLA_Symm_internal( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

FLA_Error FLA_Symm_ll( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_lu( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_rl( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );
FLA_Error FLA_Symm_ru( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_symm_t* cntl );

// end FLA_Symm.h
// begin FLA_Syrk.h


// begin FLA_Syrk_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syrk_ln_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ln_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ln_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ln_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ln_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ln_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

FLA_Error FLA_Syrk_ln_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ln_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ln_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ln_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ln_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ln_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Syrk_ln.h
// begin FLA_Syrk_lt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syrk_lt_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

FLA_Error FLA_Syrk_lt_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_lt_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_lt_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_lt_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_lt_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_lt_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Syrk_lt.h
// begin FLA_Syrk_un.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syrk_un_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

FLA_Error FLA_Syrk_un_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_un_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_un_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_un_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_un_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_un_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Syrk_un.h
// begin FLA_Syrk_ut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syrk_ut_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

FLA_Error FLA_Syrk_ut_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ut_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ut_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ut_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ut_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syrk_ut_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );

// end FLA_Syrk_ut.h

FLA_Error FLA_Syrk_internal( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

FLA_Error FLA_Syrk_ln( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_lt( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_un( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );
FLA_Error FLA_Syrk_ut( FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C, fla_syrk_t* cntl );

// end FLA_Syrk.h
// begin FLA_Syr2k.h


// begin FLA_Syr2k_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syr2k_ln_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ln_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

FLA_Error FLA_Syr2k_ln_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ln_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Syr2k_ln.h
// begin FLA_Syr2k_lt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syr2k_lt_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

FLA_Error FLA_Syr2k_lt_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_lt_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Syr2k_lt.h
// begin FLA_Syr2k_un.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syr2k_un_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

FLA_Error FLA_Syr2k_un_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_un_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Syr2k_un.h
// begin FLA_Syr2k_ut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Syr2k_ut_blk_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut_blk_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

FLA_Error FLA_Syr2k_ut_unb_var1( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var2( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var3( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var4( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var5( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var6( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var7( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var8( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var9( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLA_Syr2k_ut_unb_var10( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );

// end FLA_Syr2k_ut.h

FLA_Error FLA_Syr2k_internal( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

FLA_Error FLA_Syr2k_ln( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_lt( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_un( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );
FLA_Error FLA_Syr2k_ut( FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C, fla_syr2k_t* cntl );

// end FLA_Syr2k.h
// begin FLA_Trmm.h


// begin FLA_Trmm_llc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_llc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_llc.h
// begin FLA_Trmm_llh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_llh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_llh.h
// begin FLA_Trmm_lln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_lln_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lln_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lln_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lln_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lln_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lln_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lln_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lln_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_lln.h
// begin FLA_Trmm_llt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_llt_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llt_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llt_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llt_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llt_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llt_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llt_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_llt_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_llt.h
// begin FLA_Trmm_luc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_luc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_luc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_luc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_luc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_luc.h
// begin FLA_Trmm_luh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_luh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_luh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_luh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_luh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_luh.h
// begin FLA_Trmm_lun.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_lun_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lun_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lun_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lun_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lun_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lun_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lun_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lun_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_lun.h
// begin FLA_Trmm_lut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_lut_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lut_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lut_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lut_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lut_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lut_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lut_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_lut_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_lut.h
// begin FLA_Trmm_rlc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_rlc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_rlc.h
// begin FLA_Trmm_rlh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_rlh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_rlh.h
// begin FLA_Trmm_rln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_rln_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rln_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rln_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rln_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rln_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rln_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rln_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rln_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_rln.h
// begin FLA_Trmm_rlt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_rlt_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlt_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlt_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlt_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlt_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlt_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlt_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rlt_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_rlt.h
// begin FLA_Trmm_ruc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_ruc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_ruc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_ruc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_ruc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_ruc.h
// begin FLA_Trmm_ruh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_ruh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_ruh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_ruh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_ruh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_ruh.h
// begin FLA_Trmm_run.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_run_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_run_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_run_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_run_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_run_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_run_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_run_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_run_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_run.h
// begin FLA_Trmm_rut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trmm_rut_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rut_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rut_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rut_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rut_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rut_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rut_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trmm_rut_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trmm_rut.h

FLA_Error FLA_Trmm_internal( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );

FLA_Error FLA_Trmm_llc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lln( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_llt( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_luh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lun( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_lut( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rln( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rlt( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_ruh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_run( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );
FLA_Error FLA_Trmm_rut( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trmm_t* cntl );

// end FLA_Trmm.h
// begin FLA_Trsm.h


// begin FLA_Trsm_llc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_llc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_llc.h
// begin FLA_Trsm_llh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_llh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_llh.h
// begin FLA_Trsm_lln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_lln_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lln_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lln_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lln_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lln_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lln_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lln_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lln_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_lln.h
// begin FLA_Trsm_llt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_llt_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llt_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llt_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llt_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llt_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llt_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llt_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_llt_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_llt.h
// begin FLA_Trsm_luc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_luc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_luc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_luc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_luc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_luc.h
// begin FLA_Trsm_luh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_luh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_luh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_luh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_luh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_luh.h
// begin FLA_Trsm_lun.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_lun_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lun_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lun_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lun_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lun_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lun_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lun_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lun_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_lun.h
// begin FLA_Trsm_lut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_lut_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lut_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lut_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lut_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lut_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lut_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lut_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_lut_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_lut.h
// begin FLA_Trsm_rlc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_rlc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_rlc.h
// begin FLA_Trsm_rlh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_rlh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_rlh.h
// begin FLA_Trsm_rln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_rln_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rln_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rln_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rln_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rln_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rln_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rln_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rln_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_rln.h
// begin FLA_Trsm_rlt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_rlt_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlt_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlt_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlt_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlt_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlt_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlt_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rlt_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_rlt.h
// begin FLA_Trsm_ruc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_ruc_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruc_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruc_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruc_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruc_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_ruc_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_ruc_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_ruc_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_ruc.h
// begin FLA_Trsm_ruh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_ruh_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruh_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruh_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruh_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruh_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_ruh_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_ruh_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_ruh_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_ruh.h
// begin FLA_Trsm_run.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_run_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_run_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_run_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_run_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_run_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_run_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_run_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_run_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_run.h
// begin FLA_Trsm_rut.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trsm_rut_blk_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rut_blk_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rut_blk_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rut_blk_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rut_unb_var1( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rut_unb_var2( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rut_unb_var3( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLA_Trsm_rut_unb_var4( FLA_Diag diagA, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLA_Trsm_rut.h

FLA_Error FLA_Trsm_internal( FLA_Side side, FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );

FLA_Error FLA_Trsm_llc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lln( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_llt( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_luh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lun( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_lut( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rln( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rlt( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruc( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_ruh( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_run( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );
FLA_Error FLA_Trsm_rut( FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, fla_trsm_t* cntl );

// end FLA_Trsm.h

// end FLA_blas_var_prototypes.h
// begin FLA_lapack_var_prototypes.h


// Factorizations
// begin FLA_Chol.h


// begin FLA_Chol_l.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Chol_l_blk_var1( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_l_blk_var2( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_l_blk_var3( FLA_Obj A, fla_chol_t* cntl );

FLA_Error FLA_Chol_l_unb_var1( FLA_Obj A );
FLA_Error FLA_Chol_l_unb_var2( FLA_Obj A );
FLA_Error FLA_Chol_l_unb_var3( FLA_Obj A );

FLA_Error FLA_Chol_l_opt_var1( FLA_Obj A );
FLA_Error FLA_Chol_l_ops_var1( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opd_var1( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opc_var1( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opz_var1( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Chol_l_opt_var2( FLA_Obj A );
FLA_Error FLA_Chol_l_ops_var2( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opd_var2( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opc_var2( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opz_var2( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Chol_l_opt_var3( FLA_Obj A );
FLA_Error FLA_Chol_l_ops_var3( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opd_var3( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opc_var3( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_l_opz_var3( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

// end FLA_Chol_l.h
// begin FLA_Chol_u.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Chol_u_blk_var1( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_u_blk_var2( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_u_blk_var3( FLA_Obj A, fla_chol_t* cntl );

FLA_Error FLA_Chol_u_unb_var1( FLA_Obj A );
FLA_Error FLA_Chol_u_unb_var2( FLA_Obj A );
FLA_Error FLA_Chol_u_unb_var3( FLA_Obj A );

FLA_Error FLA_Chol_u_opt_var1( FLA_Obj A );
FLA_Error FLA_Chol_u_ops_var1( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opd_var1( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opc_var1( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opz_var1( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Chol_u_opt_var2( FLA_Obj A );
FLA_Error FLA_Chol_u_ops_var2( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opd_var2( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opc_var2( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opz_var2( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Chol_u_opt_var3( FLA_Obj A );
FLA_Error FLA_Chol_u_ops_var3( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opd_var3( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opc_var3( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Chol_u_opz_var3( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

// end FLA_Chol_u.h

FLA_Error FLA_Chol_internal( FLA_Uplo uplo, FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_l( FLA_Obj A, fla_chol_t* cntl );
FLA_Error FLA_Chol_u( FLA_Obj A, fla_chol_t* cntl );

FLA_Error FLA_Chol_solve( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_Chol_solve( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, FLA_Obj X );
// end FLA_Chol.h
// begin FLA_LU_nopiv.h


// begin FLA_LU_nopiv_vars.h




// skipped #include "FLAME.h" 

FLA_Error FLA_LU_nopiv_blk_var1( FLA_Obj A, fla_lu_t* cntl );
FLA_Error FLA_LU_nopiv_blk_var2( FLA_Obj A, fla_lu_t* cntl );
FLA_Error FLA_LU_nopiv_blk_var3( FLA_Obj A, fla_lu_t* cntl );
FLA_Error FLA_LU_nopiv_blk_var4( FLA_Obj A, fla_lu_t* cntl );
FLA_Error FLA_LU_nopiv_blk_var5( FLA_Obj A, fla_lu_t* cntl );

FLA_Error FLA_LU_nopiv_unb_var1( FLA_Obj A );
FLA_Error FLA_LU_nopiv_unb_var2( FLA_Obj A );
FLA_Error FLA_LU_nopiv_unb_var3( FLA_Obj A );
FLA_Error FLA_LU_nopiv_unb_var4( FLA_Obj A );
FLA_Error FLA_LU_nopiv_unb_var5( FLA_Obj A );

FLA_Error FLA_LU_nopiv_opt_var1( FLA_Obj A );
FLA_Error FLA_LU_nopiv_ops_var1( integer m_A,
                                 integer n_A,
                                 float* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opd_var1( integer m_A,
                                 integer n_A,
                                 double* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opc_var1( integer m_A,
                                 integer n_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opz_var1( integer m_A,
                                 integer n_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_LU_nopiv_opt_var2( FLA_Obj A );
FLA_Error FLA_LU_nopiv_ops_var2( integer m_A,
                                 integer n_A,
                                 float* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opd_var2( integer m_A,
                                 integer n_A,
                                 double* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opc_var2( integer m_A,
                                 integer n_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opz_var2( integer m_A,
                                 integer n_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_LU_nopiv_opt_var3( FLA_Obj A );
FLA_Error FLA_LU_nopiv_ops_var3( integer m_A,
                                 integer n_A,
                                 float* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opd_var3( integer m_A,
                                 integer n_A,
                                 double* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opc_var3( integer m_A,
                                 integer n_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opz_var3( integer m_A,
                                 integer n_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_LU_nopiv_opt_var4( FLA_Obj A );
FLA_Error FLA_LU_nopiv_ops_var4( integer m_A,
                                 integer n_A,
                                 float* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opd_var4( integer m_A,
                                 integer n_A,
                                 double* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opc_var4( integer m_A,
                                 integer n_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opz_var4( integer m_A,
                                 integer n_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_LU_nopiv_opt_var5( FLA_Obj A );
FLA_Error FLA_LU_nopiv_ops_var5( integer m_A,
                                 integer n_A,
                                 float* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opd_var5( integer m_A,
                                 integer n_A,
                                 double* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opc_var5( integer m_A,
                                 integer n_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_opz_var5( integer m_A,
                                 integer n_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_LU_nopiv_is_blk_var1( integer m_A, integer n_A,FLA_Obj A, float* buff_A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_id_blk_var1( integer m_A, integer n_A,FLA_Obj A, double* buff_A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_ic_blk_var1( integer m_A, integer n_A,FLA_Obj A, scomplex* buff_A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_iz_blk_var1( integer m_A, integer n_A,FLA_Obj A, dcomplex* buff_A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_is_unblk_var1( integer m_A,
                                      integer n_A,
                                      float* A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_id_unblk_var1( integer m_A,
                                      integer n_A,
                                      double* A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_ic_unblk_var1( integer m_A,
                                      integer n_A,
                                      scomplex* A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_iz_unblk_var1( integer m_A,
                                      integer n_A,
                                      dcomplex* A, integer nfact, integer rs_A, integer cs_A );
FLA_Error FLA_LU_nopiv_id_unblk_var2( integer m_A,
                                      integer n_A,
                                      double* A, integer nfact, integer rs_A, integer cs_A );
// end FLA_LU_nopiv_vars.h

FLA_Error FLA_LU_nopiv_internal( FLA_Obj A, fla_lu_t* cntl );

FLA_Error FLA_LU_nopiv_solve( FLA_Obj A, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_LU_nopiv_solve( FLA_Obj A, FLA_Obj B, FLA_Obj X );
// end FLA_LU_nopiv.h
// begin FLA_LU_piv.h




// begin FLA_LU_piv_vars.h


// skipped #include "FLAME.h" 

FLA_Error FLA_LU_piv_blk_var3( FLA_Obj A, FLA_Obj p, fla_lu_t* cntl );
FLA_Error FLA_LU_piv_blk_var4( FLA_Obj A, FLA_Obj p, fla_lu_t* cntl );
FLA_Error FLA_LU_piv_blk_var5( FLA_Obj A, FLA_Obj p, fla_lu_t* cntl );

FLA_Error FLA_LU_piv_unb_var3( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_unb_var3b( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_unb_var4( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_unb_var5( FLA_Obj A, FLA_Obj p );

FLA_Error FLA_LU_piv_opt_var3( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_ops_var3( integer m_A,
                               integer n_A,
                               float*    buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opd_var3( integer m_A,
                               integer n_A,
                               double*   buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opc_var3( integer m_A,
                               integer n_A,
                               scomplex* buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opz_var3( integer m_A,
                               integer n_A,
                               dcomplex* buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );

FLA_Error FLA_LU_piv_opt_var4( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_ops_var4( integer m_A,
                               integer n_A,
                               float*    buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opd_var4( integer m_A,
                               integer n_A,
                               double*   buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opc_var4( integer m_A,
                               integer n_A,
                               scomplex* buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opz_var4( integer m_A,
                               integer n_A,
                               dcomplex* buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );

FLA_Error FLA_LU_piv_opt_var5( FLA_Obj A, FLA_Obj p );
FLA_Error FLA_LU_piv_ops_var5( integer m_A,
                               integer n_A,
                               float*    buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opd_var5( integer m_A,
                               integer n_A,
                               double*   buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opc_var5( integer m_A,
                               integer n_A,
                               scomplex* buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
FLA_Error FLA_LU_piv_opz_var5( integer m_A,
                               integer n_A,
                               dcomplex* buff_A, integer rs_A, integer cs_A,
                               integer*      buff_p, integer inc_p );
// end FLA_LU_piv_vars.h

FLA_Error FLA_LU_piv_internal( FLA_Obj A, FLA_Obj p, fla_lu_t* cntl );
integer   FLA_LU_piv_small_s_var0( integer *m, integer *n, real *a, integer *lda,
                                   integer *ipiv, integer *info );
integer   FLA_LU_piv_small_s_var1( integer *m, integer *n, real *a, integer *lda,
                                   integer *ipiv, integer *info );
integer   FLA_LU_piv_small_d_var0( integer *m, integer *n, doublereal *a, integer *lda,
                                   integer *ipiv, integer *info );
integer   FLA_LU_piv_small_d_var1( integer *m, integer *n, doublereal *a, integer *lda,
                                   integer *ipiv, integer *info );
integer   FLA_LU_piv_small_d_var2( integer *m, integer *n, doublereal *a, integer *lda,
                                   integer *ipiv, integer *info );
int   FLA_LU_piv_small_z_var0( integer *m, integer *n, dcomplex *a, integer *lda,
                                   integer *ipiv, integer *info);
int   FLA_LU_piv_z_var0(integer *m, integer *n, dcomplex *a, integer *lda, integer *ipiv, integer *info);
int   FLA_LU_piv_z_parallel( integer *m, integer *n, dcomplex *a, integer *lda, integer *ipiv, integer *info);
int   FLA_LU_piv_z_var1_parallel(integer* m, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
integer   FLA_LU_piv_small_s_var0( integer *m, integer *n, real *a, integer *lda,
                                   integer *ipiv, integer *info );
integer   FLA_LU_piv_small_s_var1( integer *m, integer *n, real *a, integer *lda,
                                   integer *ipiv, integer *info );
int FLA_LU_piv_d_parallel( integer *m, integer *n, doublereal *a, integer *lda, integer *ipiv, integer *info);

int FLA_LU_piv_s_parallel( integer *m, integer *n, real *a, integer *lda, integer *ipiv, integer *info);

FLA_Error FLA_LU_piv_solve( FLA_Obj A, FLA_Obj p, FLA_Obj B, FLA_Obj X );

FLA_Error FLASH_LU_piv_solve( FLA_Obj A, FLA_Obj p, FLA_Obj B, FLA_Obj X );

integer lapack_cgetf2(integer *m, integer *n, scomplex *a, integer *lda,
	 integer *ipiv, integer *info);
integer lapack_cgetrf(integer *m, integer *n, scomplex *a, integer *lda,
	 integer *ipiv, integer *info);
integer lapack_dgetrf(integer *m, integer *n, doublereal *a, integer *
	lda, integer *ipiv, integer *info);
integer lapack_sgetf2(integer *m, integer *n, real *a, integer *lda,
	integer *ipiv, integer *info);
integer lapack_sgetrf(integer *m, integer *n, real *a, integer *lda,
	integer *ipiv, integer *info);
integer lapack_zgetf2(integer *m, integer *n, dcomplex *a,
	integer *lda, integer *ipiv, integer *info);
integer lapack_zgetrf(integer *m, integer *n, dcomplex *a,
	integer *lda, integer *ipiv, integer *info);
// end FLA_LU_piv.h
// begin FLA_LU_incpiv.h


// begin FLA_LU_incpiv_aux.h


// skipped #include "FLAME.h" 

FLA_Error FLA_SA_Apply_pivots( FLA_Obj C, FLA_Obj E, FLA_Obj p );
FLA_Error FLA_SA_LU_blk( FLA_Obj U,
                         FLA_Obj D, FLA_Obj p, FLA_Obj L, fla_dim_t nb_alg );
FLA_Error FLA_SA_LU_unb( FLA_Obj U, 
                         FLA_Obj D, FLA_Obj p, FLA_Obj L );
FLA_Error FLA_SA_FS_blk( FLA_Obj L,
                         FLA_Obj D, FLA_Obj p, FLA_Obj C,
                                               FLA_Obj E, fla_dim_t nb_alg );

FLA_Error FLASH_LU_incpiv_var1( FLA_Obj A, FLA_Obj p, FLA_Obj L, fla_dim_t nb_alg, fla_lu_t* cntl );
FLA_Error FLASH_LU_incpiv_var2( FLA_Obj A, FLA_Obj p, FLA_Obj L, FLA_Obj U, fla_dim_t nb_alg, fla_lu_t* cntl );
FLA_Error FLASH_Trsm_piv( FLA_Obj A, FLA_Obj B, FLA_Obj p, fla_trsm_t* cntl );
FLA_Error FLASH_SA_LU( FLA_Obj B, FLA_Obj C,
                       FLA_Obj D, FLA_Obj E, FLA_Obj p, FLA_Obj L, fla_dim_t nb_alg, fla_lu_t* cntl );
FLA_Error FLASH_SA_FS( FLA_Obj L,
                       FLA_Obj D, FLA_Obj p, FLA_Obj C,
                                             FLA_Obj E, fla_dim_t nb_alg, fla_gemm_t* cntl );

FLA_Error FLASH_FS_incpiv_aux1( FLA_Obj A, FLA_Obj p, FLA_Obj L, FLA_Obj b, fla_dim_t nb_alg );
FLA_Error FLASH_FS_incpiv_aux2( FLA_Obj L,
                                FLA_Obj D, FLA_Obj p, FLA_Obj C,
                                                      FLA_Obj E, fla_dim_t nb_alg );

// end FLA_LU_incpiv_aux.h

FLA_Error FLASH_LU_incpiv_create_hier_matrices( FLA_Obj A_flat, fla_dim_t depth, fla_dim_t* b_flash, fla_dim_t b_alg, FLA_Obj* A, FLA_Obj* p, FLA_Obj* L );
fla_dim_t     FLASH_LU_incpiv_determine_alg_blocksize( FLA_Obj A );

FLA_Error FLASH_LU_incpiv_noopt( FLA_Obj A, FLA_Obj p, FLA_Obj L );
FLA_Error FLASH_LU_incpiv_opt1( FLA_Obj A, FLA_Obj p, FLA_Obj L );

FLA_Error FLASH_LU_incpiv_solve( FLA_Obj A, FLA_Obj p, FLA_Obj L, FLA_Obj B, FLA_Obj X );
// end FLA_LU_incpiv.h
// begin FLA_QR_UT.h


// begin FLA_QR_UT_vars.h


FLA_Error FLA_QR_UT_unb_var1( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_QR_UT_blk_var1( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_opt_var1( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_QR_UT_ops_var1( integer m_A,
                              integer n_A,
                              float* A, integer rs_A, integer cs_A,
                              float* t, integer inc_t );
FLA_Error FLA_QR_UT_opd_var1( integer m_A,
                              integer n_A,
                              double* A, integer rs_A, integer cs_A,
                              double* t, integer inc_t );
FLA_Error FLA_QR_UT_opc_var1( integer m_A,
                              integer n_A,
                              scomplex* A, integer rs_A, integer cs_A,
                              scomplex* t, integer inc_t );
FLA_Error FLA_QR_UT_opz_var1( integer m_A,
                              integer n_A,
                              dcomplex* A, integer rs_A, integer cs_A,
                              dcomplex* t, integer inc_t );

FLA_Error FLA_QR_UT_unb_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_QR_UT_blk_var2( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_opt_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_QR_UT_ops_var2( integer m_A,
                              integer n_A,
                              float* A, integer rs_A, integer cs_A,
                              float* T, integer rs_T, integer cs_T );
FLA_Error FLA_QR_UT_opd_var2( integer m_A,
                              integer n_A,
                              double* A, integer rs_A, integer cs_A,
                              double* T, integer rs_T, integer cs_T );
FLA_Error FLA_QR_UT_opc_var2( integer m_A,
                              integer n_A,
                              scomplex* A, integer rs_A, integer cs_A,
                              scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_QR_UT_opz_var2( integer m_A,
                              integer n_A,
                              dcomplex* A, integer rs_A, integer cs_A,
                              dcomplex* T, integer rs_T, integer cs_T );

FLA_Error FLA_QR_UT_blk_var3( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );

// end FLA_QR_UT_vars.h

FLA_Error FLA_QR_UT( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_QR_UT_internal( FLA_Obj A, FLA_Obj T, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_copy_internal( FLA_Obj A, FLA_Obj T, FLA_Obj U, fla_qrut_t* cntl );

FLA_Error FLA_QR_UT_create_T( FLA_Obj A, FLA_Obj* T );

FLA_Error FLA_QR_UT_recover_tau( FLA_Obj T, FLA_Obj tau );

FLA_Error FLA_QR_UT_solve( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );

FLA_Error FLASH_QR_UT( FLA_Obj A, FLA_Obj TW );
FLA_Error FLASH_QR_UT_create_hier_matrices( FLA_Obj A_flat, fla_dim_t depth, fla_dim_t* b_flash, FLA_Obj* A, FLA_Obj* TW );
FLA_Error FLASH_QR_UT_solve( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );


FLA_Error FLA_QR_UT_form_Q( FLA_Obj A, FLA_Obj T, FLA_Obj Q );
FLA_Error FLA_QR_UT_form_Q_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W );
FLA_Error FLA_QR_UT_form_Q_opt_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_QR_UT_form_Q_ops_var1( integer       m_A,
                                     integer       n_AT,
                                     float*    buff_A, integer rs_A, integer cs_A,
                                     float*    buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_QR_UT_form_Q_opd_var1( integer       m_A,
                                     integer       n_AT,
                                     double*   buff_A, integer rs_A, integer cs_A,
                                     double*   buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_QR_UT_form_Q_opc_var1( integer       m_A,
                                     integer       n_AT,
                                     scomplex* buff_A, integer rs_A, integer cs_A,
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_QR_UT_form_Q_opz_var1( integer       m_A,
                                     integer       n_AT,
                                     dcomplex* buff_A, integer rs_A, integer cs_A,
                                     dcomplex* buff_T, integer rs_T, integer cs_T );
// end FLA_QR_UT.h
// begin FLA_QR_UT_piv.h


// begin FLA_QR_UT_piv_vars.h



// BLAS 2 version
FLA_Error FLA_QR_UT_piv_unb_var1( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p );
FLA_Error FLA_QR_UT_piv_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p, fla_qrut_t* cntl );

// BLAS 3 version
FLA_Error FLA_QR_UT_piv_unb_var2( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p );
FLA_Error FLA_QR_UT_piv_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p, fla_qrut_t* cntl );
FLA_Error FLA_Apply_H2_UT_piv_row( FLA_Obj tau, FLA_Obj a1t, FLA_Obj u1t, FLA_Obj W,
                                   FLA_Obj u2,  FLA_Obj A2,  FLA_Obj U2,  FLA_Obj w1t,
                                   FLA_Obj vt );

// end FLA_QR_UT_piv_vars.h

FLA_Error FLA_QR_UT_piv( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p );

FLA_Error FLA_QR_UT_piv_internal( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_piv_colnorm( FLA_Obj alpha, FLA_Obj A, FLA_Obj b );

// The source files are located at src/base/flamec/check/lapack
FLA_Error FLA_QR_UT_piv_check( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p );
FLA_Error FLA_QR_UT_piv_internal_check( FLA_Obj A, FLA_Obj T, FLA_Obj w, FLA_Obj p, fla_qrut_t* cntl );
FLA_Error FLA_QR_UT_piv_colnorm_check( FLA_Obj alpha, FLA_Obj A, FLA_Obj b );
// end FLA_QR_UT_piv.h
// begin FLA_EXT_geqrf.h


FLA_Error FLA_EXT_sgeqrf( integer m_A, integer n_A,
                          float* buff_A, integer cs_A,
                          float* buff_t,
                          float* buff_w,
                          integer* lwork,
                          integer* info );
FLA_Error FLA_EXT_dgeqrf( integer m_A, integer n_A,
                          double* buff_A, integer cs_A,
                          double* buff_t,
                          double* buff_w,
                          integer* lwork,
                          integer* info );
// end FLA_EXT_geqrf.h
// begin FLA_QR2_UT.h


// begin FLA_QR2_UT_vars.h


FLA_Error FLA_QR2_UT_blk_var1( FLA_Obj U,
                               FLA_Obj D, FLA_Obj T, fla_qr2ut_t* cntl );
FLA_Error FLA_QR2_UT_blk_var2( FLA_Obj U,
                               FLA_Obj D, FLA_Obj T, fla_qr2ut_t* cntl );

FLA_Error FLA_QR2_UT_unb_var1( FLA_Obj U,
                               FLA_Obj D, FLA_Obj T );

FLA_Error FLA_QR2_UT_opt_var1( FLA_Obj U,
                               FLA_Obj D, FLA_Obj T );

FLA_Error FLA_QR2_UT_ops_var1( integer m_UT,
                               integer m_D,
                               float* U, integer rs_U, integer cs_U,
                               float* D, integer rs_D, integer cs_D,
                               float* T, integer rs_T, integer cs_T );
FLA_Error FLA_QR2_UT_opd_var1( integer m_UT,
                               integer m_D,
                               double* U, integer rs_U, integer cs_U,
                               double* D, integer rs_D, integer cs_D,
                               double* T, integer rs_T, integer cs_T );
FLA_Error FLA_QR2_UT_opc_var1( integer m_UT,
                               integer m_D,
                               scomplex* U, integer rs_U, integer cs_U,
                               scomplex* D, integer rs_D, integer cs_D,
                               scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_QR2_UT_opz_var1( integer m_UT,
                               integer m_D,
                               dcomplex* U, integer rs_U, integer cs_U,
                               dcomplex* D, integer rs_D, integer cs_D,
                               dcomplex* T, integer rs_T, integer cs_T );
// end FLA_QR2_UT_vars.h

FLA_Error FLASH_QR2_UT( FLA_Obj U,
                        FLA_Obj D, FLA_Obj T );

FLA_Error FLA_QR2_UT_internal( FLA_Obj U,
                               FLA_Obj D, FLA_Obj T, fla_qr2ut_t* cntl );

// end FLA_QR2_UT.h
// begin FLA_QR_UT_inc.h


FLA_Error FLASH_QR_UT_inc( FLA_Obj A, FLA_Obj TW );

FLA_Error FLASH_QR_UT_inc_noopt( FLA_Obj A, FLA_Obj TW );
FLA_Error FLASH_QR_UT_inc_opt1( FLA_Obj A, FLA_Obj TW );

FLA_Error FLA_QR_UT_inc_blk_var1( FLA_Obj A, FLA_Obj TW, fla_qrutinc_t* cntl );
FLA_Error FLA_QR_UT_inc_blk_var2( FLA_Obj A, FLA_Obj TW, FLA_Obj U, fla_qrutinc_t* cntl );

FLA_Error FLASH_QR_UT_inc_create_hier_matrices( FLA_Obj A_flat, fla_dim_t depth, fla_dim_t* b_flash, fla_dim_t b_alg, FLA_Obj* A, FLA_Obj* TW );
fla_dim_t     FLASH_QR_UT_inc_determine_alg_blocksize( FLA_Obj A );

FLA_Error FLASH_QR_UT_inc_solve( FLA_Obj A, FLA_Obj TW, FLA_Obj B, FLA_Obj X );

// end FLA_QR_UT_inc.h
// begin FLA_LQ_UT.h


// begin FLA_LQ_UT_vars.h


// skipped #include "FLAME.h" 

FLA_Error FLA_LQ_UT_unb_var1( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_LQ_UT_blk_var1( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );
FLA_Error FLA_LQ_UT_opt_var1( FLA_Obj A, FLA_Obj t );
FLA_Error FLA_LQ_UT_ops_var1( integer m_A,
                              integer n_A,
                              float* A, integer rs_A, integer cs_A,
                              float* t, integer inc_t );
FLA_Error FLA_LQ_UT_opd_var1( integer m_A,
                              integer n_A,
                              double* A, integer rs_A, integer cs_A,
                              double* t, integer inc_t );
FLA_Error FLA_LQ_UT_opc_var1( integer m_A,
                              integer n_A,
                              scomplex* A, integer rs_A, integer cs_A,
                              scomplex* t, integer inc_t );
FLA_Error FLA_LQ_UT_opz_var1( integer m_A,
                              integer n_A,
                              dcomplex* A, integer rs_A, integer cs_A,
                              dcomplex* t, integer inc_t );

FLA_Error FLA_LQ_UT_unb_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_LQ_UT_blk_var2( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );
FLA_Error FLA_LQ_UT_opt_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_LQ_UT_ops_var2( integer m_A,
                              integer n_A,
                              float* A, integer rs_A, integer cs_A,
                              float* T, integer rs_T, integer cs_T );
FLA_Error FLA_LQ_UT_opd_var2( integer m_A,
                              integer n_A,
                              double* A, integer rs_A, integer cs_A,
                              double* T, integer rs_T, integer cs_T );
FLA_Error FLA_LQ_UT_opc_var2( integer m_A,
                              integer n_A,
                              scomplex* A, integer rs_A, integer cs_A,
                              scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_LQ_UT_opz_var2( integer m_A,
                              integer n_A,
                              dcomplex* A, integer rs_A, integer cs_A,
                              dcomplex* T, integer rs_T, integer cs_T );

FLA_Error FLA_LQ_UT_blk_var3( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );

// end FLA_LQ_UT_vars.h

FLA_Error FLA_LQ_UT( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_LQ_UT_internal( FLA_Obj A, FLA_Obj T, fla_lqut_t* cntl );

FLA_Error FLA_LQ_UT_create_T( FLA_Obj A, FLA_Obj* T );

FLA_Error FLA_LQ_UT_recover_tau( FLA_Obj T, FLA_Obj tau );

FLA_Error FLA_LQ_UT_solve( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );

FLA_Error FLASH_LQ_UT( FLA_Obj A, FLA_Obj TW );
FLA_Error FLASH_LQ_UT_create_hier_matrices( FLA_Obj A_flat, fla_dim_t depth, fla_dim_t* b_flash, FLA_Obj* A, FLA_Obj* TW );
FLA_Error FLASH_LQ_UT_solve( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );

FLA_Error FLA_LQ_UT_form_Q( FLA_Obj A, FLA_Obj T, FLA_Obj Q );
//FLA_Error FLA_LQ_UT_form_Q_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W );
//FLA_Error FLA_LQ_UT_form_Q_opt_var1( FLA_Obj A, FLA_Obj T );
//FLA_Error FLA_LQ_UT_form_Q_ops_var1( integer       m_A,
//                                     integer       n_A,
//                                     float*    buff_A, integer rs_A, integer cs_A,
//                                     float*    buff_T, integer rs_T, integer cs_T );
//FLA_Error FLA_LQ_UT_form_Q_opd_var1( integer       m_A,
//                                     integer       n_A,
//                                     double*   buff_A, integer rs_A, integer cs_A,
//                                     double*   buff_T, integer rs_T, integer cs_T );
//FLA_Error FLA_LQ_UT_form_Q_opc_var1( integer       m_A,
//                                     integer       n_A,
//                                     scomplex* buff_A, integer rs_A, integer cs_A,
//                                     scomplex* buff_T, integer rs_T, integer cs_T );
//FLA_Error FLA_LQ_UT_form_Q_opz_var1( integer       m_A,
//                                     integer       n_A,
//                                     dcomplex* buff_A, integer rs_A, integer cs_A,
//                                     dcomplex* buff_T, integer rs_T, integer cs_T );
// end FLA_LQ_UT.h
// begin FLA_CAQR2_UT.h


// begin FLA_CAQR2_UT_vars.h


FLA_Error FLA_CAQR2_UT_blk_var1( FLA_Obj U,
                                 FLA_Obj D, FLA_Obj T, fla_caqr2ut_t* cntl );
FLA_Error FLA_CAQR2_UT_blk_var2( FLA_Obj U,
                                 FLA_Obj D, FLA_Obj T, fla_caqr2ut_t* cntl );

FLA_Error FLA_CAQR2_UT_unb_var1( FLA_Obj U,
                                 FLA_Obj D, FLA_Obj T );

FLA_Error FLA_CAQR2_UT_opt_var1( FLA_Obj U,
                                 FLA_Obj D, FLA_Obj T );
FLA_Error FLA_CAQR2_UT_ops_var1( integer m_UT,
                                 integer m_D,
                                 float* U, integer rs_U, integer cs_U,
                                 float* D, integer rs_D, integer cs_D,
                                 float* T, integer rs_T, integer cs_T );
FLA_Error FLA_CAQR2_UT_opd_var1( integer m_UT,
                                 integer m_D,
                                 double* U, integer rs_U, integer cs_U,
                                 double* D, integer rs_D, integer cs_D,
                                 double* T, integer rs_T, integer cs_T );
FLA_Error FLA_CAQR2_UT_opc_var1( integer m_UT,
                                 integer m_D,
                                 scomplex* U, integer rs_U, integer cs_U,
                                 scomplex* D, integer rs_D, integer cs_D,
                                 scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_CAQR2_UT_opz_var1( integer m_UT,
                                 integer m_D,
                                 dcomplex* U, integer rs_U, integer cs_U,
                                 dcomplex* D, integer rs_D, integer cs_D,
                                 dcomplex* T, integer rs_T, integer cs_T );

// end FLA_CAQR2_UT_vars.h

FLA_Error FLA_CAQR2_UT_internal( FLA_Obj U,
                                 FLA_Obj D, FLA_Obj T, fla_caqr2ut_t* cntl );

// end FLA_CAQR2_UT.h
// begin FLA_CAQR_UT_inc.h


FLA_Error FLASH_CAQR_UT_inc( fla_dim_t p, FLA_Obj A, FLA_Obj ATW, FLA_Obj R, FLA_Obj RTW );

FLA_Error FLASH_CAQR_UT_inc_noopt( fla_dim_t p, FLA_Obj A, FLA_Obj ATW, FLA_Obj R, FLA_Obj RTW );

FLA_Error FLASH_CAQR_UT_inc_create_hier_matrices( fla_dim_t p, FLA_Obj A_flat, fla_dim_t depth, fla_dim_t* b_flash, fla_dim_t b_alg, FLA_Obj* A, FLA_Obj* ATW, FLA_Obj* R, FLA_Obj* RTW );
fla_dim_t     FLASH_CAQR_UT_inc_determine_alg_blocksize( FLA_Obj A );
FLA_Error FLASH_CAQR_UT_inc_adjust_views( FLA_Obj A, FLA_Obj TW );

void      FLA_CAQR_UT_inc_init_structure( fla_dim_t p, fla_dim_t nb_part, FLA_Obj R );

fla_dim_t     FLA_CAQR_UT_inc_compute_blocks_per_part( fla_dim_t p, FLA_Obj A );

FLA_Error FLA_CAQR_UT_inc_factorize_panels( fla_dim_t nb_part, FLA_Obj A, FLA_Obj ATW );

FLA_Error FLA_CAQR_UT_inc_copy_triangles( fla_dim_t nb_part, FLA_Obj A, FLA_Obj R );

FLA_Error FLA_CAQR_UT_inc_blk_var1( FLA_Obj R, FLA_Obj TW, fla_caqrutinc_t* cntl );

FLA_Error FLASH_CAQR_UT_inc_solve( fla_dim_t p, FLA_Obj A, FLA_Obj ATW, FLA_Obj R, FLA_Obj RTW, FLA_Obj B, FLA_Obj X );

// end FLA_CAQR_UT_inc.h


// Other Decompositions
// begin FLA_Hevd.h


// begin FLA_Hevd_ln.h


FLA_Error FLA_Hevd_ln_unb_var1( FLA_Obj A, FLA_Obj l );
// end FLA_Hevd_ln.h
// begin FLA_Hevd_lv.h


FLA_Error FLA_Hevd_lv_unb_var1( fla_dim_t n_iter_max, FLA_Obj A, FLA_Obj l, fla_dim_t k_accum, fla_dim_t b_alg );
FLA_Error FLA_Hevd_lv_unb_var2( fla_dim_t n_iter_max, FLA_Obj A, FLA_Obj l, fla_dim_t k_accum, fla_dim_t b_alg );

// end FLA_Hevd_lv.h
//#include "FLA_Hevd_un.h"
//#include "FLA_Hevd_uv.h"

FLA_Error FLA_Hevd_compute_scaling( FLA_Uplo uplo, FLA_Obj A, FLA_Obj sigma );

FLA_Error FLA_Hevd( FLA_Evd_type jobz, FLA_Uplo uplo, FLA_Obj A, FLA_Obj l );

// end FLA_Hevd.h
// begin FLA_Tevd.h


// begin FLA_Tevd_n.h


// begin FLA_Tevd_iteracc_n.h


// --- FLA_Tevd_iteracc_n_opt_var1() -------------------------------------------

FLA_Error FLA_Tevd_iteracc_n_ops_var1( integer       m_A,
                                       integer       n_G,
                                       integer       ijTL,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       integer*      n_iter_perf );
FLA_Error FLA_Tevd_iteracc_n_opd_var1( integer       m_A,
                                       integer       n_G,
                                       integer       ijTL,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       integer*      n_iter_perf );

// end FLA_Tevd_iteracc_n.h
// begin FLA_Tevd_eigval_n.h


// --- FLA_Tevd_eigval_n_opt_var1() --------------------------------------------

FLA_Error FLA_Tevd_eigval_n_opt_var1( FLA_Obj G, FLA_Obj d, FLA_Obj e, FLA_Obj n_iter );
FLA_Error FLA_Tevd_eigval_n_ops_var1( integer       m_A,
                                      integer       n_G,
                                      float*    buff_d, integer inc_d, 
                                      float*    buff_e, integer inc_e,
                                      integer*      n_iter );
FLA_Error FLA_Tevd_eigval_n_opd_var1( integer       m_A,
                                      integer       n_G,
                                      double*   buff_d, integer inc_d, 
                                      double*   buff_e, integer inc_e,
                                      integer*      n_iter );

// end FLA_Tevd_eigval_n.h
// begin FLA_Tevd_francis_n.h


// --- FLA_Tevd_francis_n_opt_var1() -------------------------------------------

FLA_Error FLA_Tevd_francis_n_opt_var1( FLA_Obj shift, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Tevd_francis_n_ops_var1( integer       m_A,
                                       float*    buff_shift,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e ); 
FLA_Error FLA_Tevd_francis_n_opd_var1( integer       m_A,
                                       double*   buff_shift,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e ); 

// end FLA_Tevd_francis_n.h

// --- FLA_Tevd_find_submatrix() -----------------------------------------------

FLA_Error FLA_Tevd_find_submatrix_ops( integer       m_A,
                                       integer       ij_begin,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       integer*      ijTL,
                                       integer*      ijBR );
FLA_Error FLA_Tevd_find_submatrix_opd( integer       m_A,
                                       integer       ij_begin,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       integer*      ijTL,
                                       integer*      ijBR );

// --- FLA_Norm1_tridiag() -----------------------------------------------------

FLA_Error FLA_Norm1_tridiag( FLA_Obj d, FLA_Obj e, FLA_Obj norm );
FLA_Error FLA_Norm1_tridiag_ops( integer       m_A,
                                 float*    buff_d, integer inc_d, 
                                 float*    buff_e, integer inc_e,
                                 float*    norm );
FLA_Error FLA_Norm1_tridiag_opd( integer       m_A,
                                 double*   buff_d, integer inc_d, 
                                 double*   buff_e, integer inc_e,
                                 double*   norm );

// --- FLA_Tevd_n_opt_var1() ---------------------------------------------------

FLA_Error FLA_Tevd_n_opt_var1( fla_dim_t n_iter_max, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj U );
FLA_Error FLA_Tevd_n_ops_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G );
FLA_Error FLA_Tevd_n_opd_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G );
FLA_Error FLA_Tevd_n_opc_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G );
FLA_Error FLA_Tevd_n_opz_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G );


// end FLA_Tevd_n.h
// begin FLA_Tevd_v.h


// begin FLA_Tevd_iteracc_v.h


// --- FLA_Tevd_iteracc_v_opt_var1() -------------------------------------------

FLA_Error FLA_Tevd_iteracc_v_ops_var1( integer       m_A,
                                       integer       n_G,
                                       integer       ijTL,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       scomplex* buff_G, integer rs_G, integer cs_G,
                                       integer*      n_iter_perf );
FLA_Error FLA_Tevd_iteracc_v_opd_var1( integer       m_A,
                                       integer       n_G,
                                       integer       ijTL,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       dcomplex* buff_G, integer rs_G, integer cs_G,
                                       integer*      n_iter_perf );

FLA_Error FLA_Tevd_iteracc_v_ops_var3( integer       m_A,
                                       integer       m_U,
                                       integer       n_G,
                                       integer       ijTL,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       float*    buff_l, integer inc_l,
                                       integer*      buff_ls, integer inc_ls,
                                       float*    buff_pu, integer inc_pu,
                                       scomplex* buff_G, integer rs_G, integer cs_G,
                                       integer*      n_iter_perf );
FLA_Error FLA_Tevd_iteracc_v_opd_var3( integer       m_A,
                                       integer       m_U,
                                       integer       n_G,
                                       integer       ijTL,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       double*   buff_l, integer inc_l,
                                       integer*      buff_ls, integer inc_ls,
                                       double*   buff_pu, integer inc_pu,
                                       dcomplex* buff_G, integer rs_G, integer cs_G,
                                       integer*      n_iter_perf );

// end FLA_Tevd_iteracc_v.h
// begin FLA_Tevd_eigval_v.h


// --- FLA_Tevd_eigval_v_opt_var1() --------------------------------------------

FLA_Error FLA_Tevd_eigval_v_opt_var1( FLA_Obj G, FLA_Obj d, FLA_Obj e, FLA_Obj n_iter );
FLA_Error FLA_Tevd_eigval_v_ops_var1( integer       m_A,
                                      integer       n_G,
                                      scomplex* buff_G, integer rs_G, integer cs_G,
                                      float*    buff_d, integer inc_d, 
                                      float*    buff_e, integer inc_e,
                                      integer*      n_iter );
FLA_Error FLA_Tevd_eigval_v_opd_var1( integer       m_A,
                                      integer       n_G,
                                      dcomplex* buff_G, integer rs_G, integer cs_G,
                                      double*   buff_d, integer inc_d, 
                                      double*   buff_e, integer inc_e,
                                      integer*      n_iter );

FLA_Error FLA_Tevd_eigval_v_ops_var3( integer       m_A,
                                      integer       m_U,
                                      integer       n_G,
                                      scomplex* buff_G, integer rs_G, integer cs_G,
                                      float*    buff_d, integer inc_d, 
                                      float*    buff_e, integer inc_e,
                                      float*    buff_l, integer inc_l,
                                      integer*      buff_ls, integer inc_ls,
                                      float*    buff_pu, integer inc_pu,
                                      integer*      n_iter );
FLA_Error FLA_Tevd_eigval_v_opd_var3( integer       m_A,
                                      integer       m_U,
                                      integer       n_G,
                                      dcomplex* buff_G, integer rs_G, integer cs_G,
                                      double*   buff_d, integer inc_d, 
                                      double*   buff_e, integer inc_e,
                                      double*   buff_l, integer inc_l,
                                      integer*      buff_ls, integer inc_ls,
                                      double*   buff_pu, integer inc_pu,
                                      integer*      n_iter );

// end FLA_Tevd_eigval_v.h
// begin FLA_Tevd_francis_v.h


// --- FLA_Tevd_francis_v_opt_var1() -------------------------------------------

FLA_Error FLA_Tevd_francis_v_opt_var1( FLA_Obj shift, FLA_Obj g, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Tevd_francis_v_ops_var1( integer       m_A,
                                       float*    buff_shift,
                                       scomplex* buff_g, integer inc_g, 
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e ); 
FLA_Error FLA_Tevd_francis_v_opd_var1( integer       m_A,
                                       double*   buff_shift,
                                       dcomplex* buff_g, integer inc_g, 
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e ); 

// end FLA_Tevd_francis_v.h

// --- FLA_Tevd_compute_scaling() ----------------------------------------------

FLA_Error FLA_Tevd_compute_scaling_ops( integer       m_A,
                                        float*    buff_d, integer inc_d, 
                                        float*    buff_e, integer inc_e,
                                        float*    sigma );
FLA_Error FLA_Tevd_compute_scaling_opd( integer       m_A,
                                        double*   buff_d, integer inc_d, 
                                        double*   buff_e, integer inc_e,
                                        double*   sigma );

// --- FLA_Tevd_find_submatrix() -----------------------------------------------

FLA_Error FLA_Tevd_find_submatrix_ops( integer       m_A,
                                       integer       ij_begin,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       integer*      ijTL,
                                       integer*      ijBR );
FLA_Error FLA_Tevd_find_submatrix_opd( integer       m_A,
                                       integer       ij_begin,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       integer*      ijTL,
                                       integer*      ijBR );

// --- FLA_Tevd_find_perfshift() -----------------------------------------------

FLA_Error FLA_Tevd_find_perfshift_ops( integer       m_d,
                                       integer       m_l,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e, 
                                       float*    buff_l, integer inc_l, 
                                       integer*      buff_lstat, integer inc_lstat, 
                                       float*    buff_pu, integer inc_pu, 
                                       integer*      ij_shift );
FLA_Error FLA_Tevd_find_perfshift_opd( integer       m_d,
                                       integer       m_l,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e, 
                                       double*   buff_l, integer inc_l, 
                                       integer*      buff_lstat, integer inc_lstat, 
                                       double*   buff_pu, integer inc_pu, 
                                       integer*      ij_shift );

// --- FLA_Norm1_tridiag() -----------------------------------------------------

FLA_Error FLA_Norm1_tridiag( FLA_Obj d, FLA_Obj e, FLA_Obj norm );
FLA_Error FLA_Norm1_tridiag_ops( integer       m_A,
                                 float*    buff_d, integer inc_d, 
                                 float*    buff_e, integer inc_e,
                                 float*    norm );
FLA_Error FLA_Norm1_tridiag_opd( integer       m_A,
                                 double*   buff_d, integer inc_d, 
                                 double*   buff_e, integer inc_e,
                                 double*   norm );

// --- FLA_Tevd_v_opt_var1() ---------------------------------------------------

FLA_Error FLA_Tevd_v_opt_var1( fla_dim_t n_iter_max, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj U, fla_dim_t b_alg );
FLA_Error FLA_Tevd_v_ops_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               float*    buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );
FLA_Error FLA_Tevd_v_opd_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               double*   buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );
FLA_Error FLA_Tevd_v_opc_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               scomplex* buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );
FLA_Error FLA_Tevd_v_opz_var1( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               dcomplex* buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );

// --- FLA_Tevd_v_opt_var2() ---------------------------------------------------

FLA_Error FLA_Tevd_v_opt_var2( fla_dim_t n_iter_max, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj R, FLA_Obj W, FLA_Obj U, fla_dim_t b_alg );
FLA_Error FLA_Tevd_v_ops_var2( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_G_extra,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               float*    buff_R, integer rs_R, integer cs_R,
                               float*    buff_W, integer rs_W, integer cs_W,
                               float*    buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );
FLA_Error FLA_Tevd_v_opd_var2( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_G_extra,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               double*   buff_R, integer rs_R, integer cs_R,
                               double*   buff_W, integer rs_W, integer cs_W,
                               double*   buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );
FLA_Error FLA_Tevd_v_opc_var2( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_G_extra,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               float*    buff_R, integer rs_R, integer cs_R,
                               scomplex* buff_W, integer rs_W, integer cs_W,
                               scomplex* buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );
FLA_Error FLA_Tevd_v_opz_var2( integer       m_A,
                               integer       m_U,
                               integer       n_G,
                               integer       n_G_extra,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               double*   buff_R, integer rs_R, integer cs_R,
                               dcomplex* buff_W, integer rs_W, integer cs_W,
                               dcomplex* buff_U, integer rs_U, integer cs_U,
                               integer       b_alg );

// end FLA_Tevd_v.h

// --- MAC_Tevd_eigval_converged() ---------------------------------------------

#define MAC_Tevd_eigval_converged_ops( eps, safmin, d1, e1, d2 ) \
	fabsf( e1 ) <= (eps) * sqrt( fabsf( d1 ) ) * sqrt( fabsf( d2 ) ) + (safmin)

#define MAC_Tevd_eigval_converged_opd( eps, safmin, d1, e1, d2 ) \
	fabs( e1 )  <= (eps) * sqrt( fabs( d1 ) )  * sqrt( fabs( d2 ) )  + (safmin)

// --- MAC_Tevd_eigval_converged2() ---------------------------------------------

#define MAC_Tevd_eigval_converged2_ops( eps2, safmin, d1, e1, d2 ) \
	(e1) * (e1) <=        (eps2) * fabsf( (d1) * (d2) ) + (safmin)

#define MAC_Tevd_eigval_converged2_opd( eps2, safmin, d1, e1, d2 ) \
	(e1) * (e1) <=        (eps2) * fabs( (d1) * (d2) ) + (safmin)

FLA_Error FLA_Tevd( FLA_Evd_type jobz, FLA_Obj U, FLA_Obj d, FLA_Obj e, FLA_Obj l );

// end FLA_Tevd.h
// begin FLA_Svd.h


// begin FLA_Svd_ext.h



FLA_Error FLA_Svd_ext_u_unb_var1( FLA_Svd_type jobu, FLA_Svd_type jobv, 
                                  fla_dim_t n_iter_max,
                                  FLA_Obj A, FLA_Obj s, FLA_Obj V, FLA_Obj U,
                                  fla_dim_t k_accum,
                                  fla_dim_t b_alg );
int lapack_dbdsqr(char *uplo, integer *n, integer *ncvt, integer *
	          nru, integer *ncc, doublereal *d__, doublereal *e, doublereal *vt, 
	          integer *ldvt, doublereal *u, integer *ldu, doublereal *c__, integer *
	          ldc, doublereal *work, integer *info);
int lapack_dbdsqr_small(char *uplo, integer *n, integer *ncvt, integer *nru,
                                doublereal *d__, doublereal *e,
                                doublereal *vt, integer *ldvt,
                                doublereal *u, integer *ldu,
                                integer *info);
int lapack_dgebd2(integer *m, integer *n, doublereal *a, integer *
	          lda, doublereal *d__, doublereal *e, doublereal *tauq, doublereal *
	          taup, doublereal *work, integer *info);
int lapack_dgebrd(integer *m, integer *n, doublereal *a, integer *
	          lda, doublereal *d__, doublereal *e, doublereal *tauq, doublereal *
	          taup, doublereal *work, integer *lwork, integer *info);
int lapack_dgelqf(integer *m, integer *n, doublereal *a, integer *
	          lda, doublereal *tau, doublereal *work, integer *lwork, integer *info);
int lapack_dgelq2(integer *m, integer *n, doublereal *a, integer * lda, 
                  doublereal *tau, doublereal *work, integer *info);
int lapack_dgesvd(char *jobu, char *jobvt, integer *m, integer *n, 
	          doublereal *a, integer *lda, doublereal *s, doublereal *u, integer *
	          ldu, doublereal *vt, integer *ldvt, doublereal *work, integer *lwork, 
	          integer *info);
int lapack_dorg2r(integer *m, integer *n, integer *k, doublereal *
	          a, integer *lda, doublereal *tau, doublereal *work, integer *info);
int lapack_dorgbr(char *vect, integer *m, integer *n, integer *k, 
	          doublereal *a, integer *lda, doublereal *tau, doublereal *work, 
	          integer *lwork, integer *info);
int lapack_dorgl2(integer *m, integer *n, integer *k, doublereal *
	          a, integer *lda, doublereal *tau, doublereal *work, integer *info);
int lapack_dorglq(integer *m, integer *n, integer *k, doublereal *
	          a, integer *lda, doublereal *tau, doublereal *work, integer *lwork, 
	          integer *info);
int lapack_dorgqr(integer *m, integer *n, integer *k, doublereal *
	          a, integer *lda, doublereal *tau, doublereal *work, integer *lwork, 
	          integer *info);
int lapack_dorm2r(char *side, char *trans, integer *m, integer *n, integer *k, 
                  doublereal *a, integer *lda, doublereal *tau, doublereal * c__, 
                  integer *ldc, doublereal *work, integer *info);
int lapack_dormbr(char *vect, char *side, char *trans, integer *m, 
	          integer *n, integer *k, doublereal *a, integer *lda, doublereal *tau, 
	          doublereal *c__, integer *ldc, doublereal *work, integer *lwork, 
	          integer *info);
int lapack_dormlq(char *side, char *trans, integer *m, integer *n, 
                  integer *k, doublereal *a, integer *lda, doublereal *tau, doublereal *
	          c__, integer *ldc, doublereal *work, integer *lwork, integer *info);
int lapack_dorml2(char *side, char *trans, integer *m, integer *n, integer *k, 
                  doublereal *a, integer *lda, doublereal *tau, doublereal * c__, 
                  integer *ldc, doublereal *work, integer *info); 
int lapack_dormqr(char *side, char *trans, integer *m, integer *n, 
	          integer *k, doublereal *a, integer *lda, doublereal *tau, doublereal *
	          c__, integer *ldc, doublereal *work, integer *lwork, integer *info);
int  dgesvd2x2(   char *jobu, char *jobvt, integer *m, integer *n,
                  doublereal *a, integer *lda, doublereal *s, doublereal *u, integer *
                  ldu, doublereal *vt, integer *ldvt, doublereal *work, integer *lwork,
                  integer *info);



// end FLA_Svd_ext.h
// begin FLA_Svd_uv.h


FLA_Error FLA_Svd_uv_unb_var1( fla_dim_t n_iter_max, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V, fla_dim_t k_accum, fla_dim_t b_alg );
FLA_Error FLA_Svd_uv_unb_var2( fla_dim_t n_iter_max, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V, fla_dim_t k_accum, fla_dim_t b_alg );
// end FLA_Svd_uv.h

FLA_Error FLA_Svd_compute_scaling( FLA_Obj A, FLA_Obj sigma );

FLA_Error FLA_Svd( FLA_Svd_type jobu, FLA_Svd_type jobv, FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );
FLA_Error FLA_Svd_ext( FLA_Svd_type jobu, FLA_Trans transu,
                       FLA_Svd_type jobv, FLA_Trans transv,
                       FLA_Obj A, FLA_Obj s, FLA_Obj U, FLA_Obj V );
// end FLA_Svd.h
// begin FLA_Bsvd.h


// begin FLA_Bsvd_n.h



// end FLA_Bsvd_n.h
// begin FLA_Bsvd_v.h


// begin FLA_Bsvd_iteracc_v.h


// --- FLA_Bsvd_iteracc_v_opt_var1() -------------------------------------------

FLA_Error FLA_Bsvd_iteracc_v_ops_var1( integer       m_A,
                                       integer       n_GH,
                                       integer       ijTL,
                                       float     tol,
                                       float     thresh,
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       scomplex* buff_G, integer rs_G, integer cs_G,
                                       scomplex* buff_H, integer rs_H, integer cs_H,
                                       integer*      n_iter_perf );
FLA_Error FLA_Bsvd_iteracc_v_opd_var1( integer       m_A,
                                       integer       n_GH,
                                       integer       ijTL,
                                       double    tol,
                                       double    thresh,
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       dcomplex* buff_G, integer rs_G, integer cs_G,
                                       dcomplex* buff_H, integer rs_H, integer cs_H,
                                       integer*      n_iter_perf );
// end FLA_Bsvd_iteracc_v.h
// begin FLA_Bsvd_sinval_v.h


// --- MAC_Bsvd_sinval_is_converged() ------------------------------------------

#define MAC_Bsvd_sinval_is_converged_ops( tol, d1, e1 ) \
	fabsf( (e1) ) <= fabsf( (tol) * (d1) )

#define MAC_Bsvd_sinval_is_converged_opd( tol, d1, e1 ) \
	fabs(  (e1) ) <= fabs(  (tol) * (d1) )

// --- FLA_Bsvd_sinval_v_opt_var1() --------------------------------------------

FLA_Error FLA_Bsvd_sinval_v_opt_var1( FLA_Obj tol, FLA_Obj thresh, FLA_Obj G, FLA_Obj H, FLA_Obj d, FLA_Obj e, FLA_Obj n_iter );
FLA_Error FLA_Bsvd_sinval_v_ops_var1( integer       m_A,
                                      integer       n_GH,
                                      integer       n_iter_allowed,
                                      float     tol, 
                                      float     thresh, 
                                      scomplex* buff_G, integer rs_G, integer cs_G,
                                      scomplex* buff_H, integer rs_H, integer cs_H,
                                      float*    buff_d, integer inc_d, 
                                      float*    buff_e, integer inc_e,
                                      integer*      n_iter );
FLA_Error FLA_Bsvd_sinval_v_opd_var1( integer       m_A,
                                      integer       n_GH,
                                      integer       n_iter_allowed,
                                      double    tol, 
                                      double    thresh, 
                                      dcomplex* buff_G, integer rs_G, integer cs_G,
                                      dcomplex* buff_H, integer rs_H, integer cs_H,
                                      double*   buff_d, integer inc_d, 
                                      double*   buff_e, integer inc_e,
                                      integer*      n_iter );

// end FLA_Bsvd_sinval_v.h
// begin FLA_Bsvd_francis_v.h


// --- FLA_Bsvd_francis_v_opt_var1() -------------------------------------------

FLA_Error FLA_Bsvd_francis_v_opt_var1( FLA_Obj shift, FLA_Obj g, FLA_Obj h, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bsvd_francis_v_ops_var1( integer       m_A,
                                       float     shift,
                                       scomplex* buff_g, integer inc_g, 
                                       scomplex* buff_h, integer inc_h, 
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e ); 
FLA_Error FLA_Bsvd_francis_v_opd_var1( integer       m_A,
                                       double    shift,
                                       dcomplex* buff_g, integer inc_g, 
                                       dcomplex* buff_h, integer inc_h, 
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e ); 

// end FLA_Bsvd_francis_v.h

// --- FLA_Bsvd_compute_shift() ------------------------------------------------

FLA_Error FLA_Bsvd_compute_shift( FLA_Obj tol, FLA_Obj sminl, FLA_Obj smax, FLA_Obj d, FLA_Obj e, FLA_Obj shift );
FLA_Error FLA_Bsvd_compute_shift_ops( integer       m_A,
                                      float     tol,
                                      float     sminl,
                                      float     smax,
                                      float*    buff_d, integer inc_d,
                                      float*    buff_e, integer inc_e,
                                      float*    shift );
FLA_Error FLA_Bsvd_compute_shift_opd( integer       m_A,
                                      double    tol,
                                      double    sminl,
                                      double    smax,
                                      double*   buff_d, integer inc_d,
                                      double*   buff_e, integer inc_e,
                                      double*   shift );

// --- FLA_Bsvd_compute_tol_thresh() -------------------------------------------

FLA_Error FLA_Bsvd_compute_tol_thresh( FLA_Obj tolmul, FLA_Obj maxit, FLA_Obj d, FLA_Obj e, FLA_Obj tol, FLA_Obj thresh );
FLA_Error FLA_Bsvd_compute_tol_thresh_ops( integer       m_A,
                                           float     tolmul,
                                           float     maxit,
                                           float*    buff_d, integer inc_d, 
                                           float*    buff_e, integer inc_e, 
                                           float*    tol,
                                           float*    thresh );
FLA_Error FLA_Bsvd_compute_tol_thresh_opd( integer       m_A,
                                           double    tolmul,
                                           double    maxit,
                                           double*   buff_d, integer inc_d, 
                                           double*   buff_e, integer inc_e, 
                                           double*   tol,
                                           double*   thresh );

// --- FLA_Bsvd_find_converged() -----------------------------------------------

FLA_Error FLA_Bsvd_find_converged( FLA_Obj tol, FLA_Obj d, FLA_Obj e, FLA_Obj sminl );
FLA_Error FLA_Bsvd_find_converged_ops( integer       m_A,
                                       float     tol, 
                                       float*    buff_d, integer inc_d, 
                                       float*    buff_e, integer inc_e,
                                       float*    sminl );
FLA_Error FLA_Bsvd_find_converged_opd( integer       m_A,
                                       double    tol, 
                                       double*   buff_d, integer inc_d, 
                                       double*   buff_e, integer inc_e,
                                       double*   sminl );

// --- FLA_Bsvd_find_max_fla_min() -------------------------------------------------

FLA_Error FLA_Bsvd_find_max_fla_min( FLA_Obj d, FLA_Obj e, FLA_Obj smax, FLA_Obj smin );
FLA_Error FLA_Bsvd_find_max_min_ops( integer       m_A,
                                     float*    buff_d, integer inc_d, 
                                     float*    buff_e, integer inc_e, 
                                     float*    smax,
                                     float*    smin );
FLA_Error FLA_Bsvd_find_max_min_opd( integer       m_A,
                                     double*   buff_d, integer inc_d, 
                                     double*   buff_e, integer inc_e, 
                                     double*   smax,
                                     double*   smin );

// --- FLA_Bsvd_find_submatrix() -----------------------------------------------

FLA_Error FLA_Bsvd_find_submatrix_ops( integer       mn_A,
                                       integer       ij_begin,
                                       float*    buff_d, integer inc_d,
                                       float*    buff_e, integer inc_e,
                                       integer*      ijTL,
                                       integer*      ijBR );
FLA_Error FLA_Bsvd_find_submatrix_opd( integer       mn_A,
                                       integer       ij_begin,
                                       double*   buff_d, integer inc_d,
                                       double*   buff_e, integer inc_e,
                                       integer*      ijTL,
                                       integer*      ijBR );

// --- FLA_Bsvd_v_opt_var1() ---------------------------------------------------

FLA_Error FLA_Bsvd_v_opt_var1( fla_dim_t n_iter_max, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj H, FLA_Obj U, FLA_Obj V, fla_dim_t b_alg );
FLA_Error FLA_Bsvd_v_ops_var1( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               scomplex* buff_H, integer rs_H, integer cs_H,
                               float*    buff_U, integer rs_U, integer cs_U,
                               float*    buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );
FLA_Error FLA_Bsvd_v_opd_var1( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               dcomplex* buff_H, integer rs_H, integer cs_H,
                               double*   buff_U, integer rs_U, integer cs_U,
                               double*   buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );
FLA_Error FLA_Bsvd_v_opc_var1( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               scomplex* buff_H, integer rs_H, integer cs_H,
                               scomplex* buff_U, integer rs_U, integer cs_U,
                               scomplex* buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );
FLA_Error FLA_Bsvd_v_opz_var1( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               dcomplex* buff_H, integer rs_H, integer cs_H,
                               dcomplex* buff_U, integer rs_U, integer cs_U,
                               dcomplex* buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );

// --- FLA_Bsvd_v_opt_var2() ---------------------------------------------------

FLA_Error FLA_Bsvd_v_opt_var2( fla_dim_t n_iter_max, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj H, FLA_Obj RG, FLA_Obj RH, FLA_Obj W, FLA_Obj U, FLA_Obj V, fla_dim_t b_alg );
FLA_Error FLA_Bsvd_v_ops_var2( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               scomplex* buff_H, integer rs_H, integer cs_H,
                               float*    buff_RG, integer rs_RG, integer cs_RG,
                               float*    buff_RH, integer rs_RH, integer cs_RH,
                               float*    buff_W, integer rs_W, integer cs_W,
                               float*    buff_U, integer rs_U, integer cs_U,
                               float*    buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );
FLA_Error FLA_Bsvd_v_opd_var2( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               dcomplex* buff_H, integer rs_H, integer cs_H,
                               double*   buff_RG, integer rs_RG, integer cs_RG,
                               double*   buff_RH, integer rs_RH, integer cs_RH,
                               double*   buff_W, integer rs_W, integer cs_W,
                               double*   buff_U, integer rs_U, integer cs_U,
                               double*   buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );
FLA_Error FLA_Bsvd_v_opc_var2( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               float*    buff_d, integer inc_d, 
                               float*    buff_e, integer inc_e,
                               scomplex* buff_G, integer rs_G, integer cs_G,
                               scomplex* buff_H, integer rs_H, integer cs_H,
                               float*    buff_RG, integer rs_RG, integer cs_RG,
                               float*    buff_RH, integer rs_RH, integer cs_RH,
                               scomplex* buff_W, integer rs_W, integer cs_W,
                               scomplex* buff_U, integer rs_U, integer cs_U,
                               scomplex* buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );
FLA_Error FLA_Bsvd_v_opz_var2( integer       min_m_n,
                               integer       m_U,
                               integer       m_V,
                               integer       n_GH,
                               integer       n_iter_max,
                               double*   buff_d, integer inc_d, 
                               double*   buff_e, integer inc_e,
                               dcomplex* buff_G, integer rs_G, integer cs_G,
                               dcomplex* buff_H, integer rs_H, integer cs_H,
                               double*   buff_RG, integer rs_RG, integer cs_RG,
                               double*   buff_RH, integer rs_RH, integer cs_RH,
                               dcomplex* buff_W, integer rs_W, integer cs_W,
                               dcomplex* buff_U, integer rs_U, integer cs_U,
                               dcomplex* buff_V, integer rs_V, integer cs_V,
                               integer       b_alg );

// end FLA_Bsvd_v.h
// begin FLA_Bsvd_ext.h


// --- FLA_Bsvd_ext_opt_var1() ---------------------------------------------------

FLA_Error FLA_Bsvd_ext_opt_var1( fla_dim_t n_iter_max, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj H, 
                                 FLA_Svd_type jobu, FLA_Obj U, 
                                 FLA_Svd_type jobv, FLA_Obj V, 
                                 FLA_Bool apply_Uh2C, FLA_Obj C,
                                 fla_dim_t b_alg );
FLA_Error FLA_Bsvd_ext_ops_var1( integer       m_d,
                                 integer       m_U,
                                 integer       m_V,
                                 integer       m_C,
                                 integer       n_C,
                                 integer       n_GH,
                                 integer       n_iter_max,
                                 float*    buff_d, integer inc_d, 
                                 float*    buff_e, integer inc_e,
                                 scomplex* buff_G, integer rs_G, integer cs_G,
                                 scomplex* buff_H, integer rs_H, integer cs_H,
                                 float*    buff_U, integer rs_U, integer cs_U,
                                 float*    buff_V, integer rs_V, integer cs_V,
                                 float*    buff_C, integer rs_C, integer cs_C,
                                 integer       b_alg );
FLA_Error FLA_Bsvd_ext_opd_var1( integer       m_d,
                                 integer       m_U,
                                 integer       m_V,
                                 integer       m_C,
                                 integer       n_C,
                                 integer       n_GH,
                                 integer       n_iter_max,
                                 double*   buff_d, integer inc_d, 
                                 double*   buff_e, integer inc_e,
                                 dcomplex* buff_G, integer rs_G, integer cs_G,
                                 dcomplex* buff_H, integer rs_H, integer cs_H,
                                 double*   buff_U, integer rs_U, integer cs_U,
                                 double*   buff_V, integer rs_V, integer cs_V,
                                 double*   buff_C, integer rs_C, integer cs_C,
                                 integer       b_alg );
FLA_Error FLA_Bsvd_ext_opc_var1( integer       m_d,
                                 integer       m_U,
                                 integer       m_V,
                                 integer       m_C,
                                 integer       n_C,
                                 integer       n_GH,
                                 integer       n_iter_max,
                                 float*    buff_d, integer inc_d, 
                                 float*    buff_e, integer inc_e,
                                 scomplex* buff_G, integer rs_G, integer cs_G,
                                 scomplex* buff_H, integer rs_H, integer cs_H,
                                 scomplex* buff_U, integer rs_U, integer cs_U,
                                 scomplex* buff_V, integer rs_V, integer cs_V,
                                 scomplex* buff_C, integer rs_C, integer cs_C,
                                 integer       b_alg );
FLA_Error FLA_Bsvd_ext_opz_var1( integer       m_d,
                                 integer       m_U,
                                 integer       m_V,
                                 integer       m_C,
                                 integer       n_C,
                                 integer       n_GH,
                                 integer       n_iter_max,
                                 double*   buff_d, integer inc_d, 
                                 double*   buff_e, integer inc_e,
                                 dcomplex* buff_G, integer rs_G, integer cs_G,
                                 dcomplex* buff_H, integer rs_H, integer cs_H,
                                 dcomplex* buff_U, integer rs_U, integer cs_U,
                                 dcomplex* buff_V, integer rs_V, integer cs_V,
                                 dcomplex* buff_C, integer rs_C, integer cs_C,
                                 integer       b_alg );

// end FLA_Bsvd_ext.h

FLA_Error FLA_Bsvd_create_workspace( FLA_Obj d, FLA_Obj *G, FLA_Obj *H );
FLA_Error FLA_Bsvd( FLA_Uplo uplo, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj H, 
                    FLA_Svd_type jobu, FLA_Obj U, 
                    FLA_Svd_type jobv, FLA_Obj V );
FLA_Error FLA_Bsvd_ext( FLA_Uplo uplo, FLA_Obj d, FLA_Obj e, FLA_Obj G, FLA_Obj H,
                        FLA_Svd_type jobu, FLA_Obj U,
                        FLA_Svd_type jobv, FLA_Obj V,
                        FLA_Bool apply_Uh2C, FLA_Obj C );
// end FLA_Bsvd.h

// Inversions
// begin FLA_Trinv.h


// begin FLA_Trinv_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trinv_ln_blk_var1( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_ln_blk_var2( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_ln_blk_var3( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_ln_blk_var4( FLA_Obj A, fla_trinv_t* cntl );

FLA_Error FLA_Trinv_ln_unb_var1( FLA_Obj A );
FLA_Error FLA_Trinv_ln_unb_var2( FLA_Obj A );
FLA_Error FLA_Trinv_ln_unb_var3( FLA_Obj A );
FLA_Error FLA_Trinv_ln_unb_var4( FLA_Obj A );

FLA_Error FLA_Trinv_ln_opt_var1( FLA_Obj A );
FLA_Error FLA_Trinv_ln_ops_var1( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opd_var1( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opc_var1( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opz_var1( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_ln_opt_var2( FLA_Obj A );
FLA_Error FLA_Trinv_ln_ops_var2( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opd_var2( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opc_var2( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opz_var2( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_ln_opt_var3( FLA_Obj A );
FLA_Error FLA_Trinv_ln_ops_var3( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opd_var3( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opc_var3( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opz_var3( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_ln_opt_var4( FLA_Obj A );
FLA_Error FLA_Trinv_ln_ops_var4( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opd_var4( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opc_var4( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_ln_opz_var4( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );
// end FLA_Trinv_ln.h
// begin FLA_Trinv_lu.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trinv_lu_blk_var1( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_lu_blk_var2( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_lu_blk_var3( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_lu_blk_var4( FLA_Obj A, fla_trinv_t* cntl );

FLA_Error FLA_Trinv_lu_unb_var1( FLA_Obj A );
FLA_Error FLA_Trinv_lu_unb_var2( FLA_Obj A );
FLA_Error FLA_Trinv_lu_unb_var3( FLA_Obj A );
FLA_Error FLA_Trinv_lu_unb_var4( FLA_Obj A );

FLA_Error FLA_Trinv_lu_opt_var1( FLA_Obj A );
FLA_Error FLA_Trinv_lu_ops_var1( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opd_var1( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opc_var1( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opz_var1( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_lu_opt_var2( FLA_Obj A );
FLA_Error FLA_Trinv_lu_ops_var2( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opd_var2( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opc_var2( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opz_var2( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_lu_opt_var3( FLA_Obj A );
FLA_Error FLA_Trinv_lu_ops_var3( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opd_var3( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opc_var3( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opz_var3( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_lu_opt_var4( FLA_Obj A );
FLA_Error FLA_Trinv_lu_ops_var4( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opd_var4( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opc_var4( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_lu_opz_var4( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );
void lapack_dtrtri(char *uplo, char *diag, integer *n, doublereal *a, integer *lda, integer *info);
void lapack_dtrti2(char *uplo, char *diag, integer *n, doublereal *a, integer *lda, integer *info);
// end FLA_Trinv_lu.h
// begin FLA_Trinv_un.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trinv_un_blk_var1( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_un_blk_var2( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_un_blk_var3( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_un_blk_var4( FLA_Obj A, fla_trinv_t* cntl );

FLA_Error FLA_Trinv_un_unb_var1( FLA_Obj A );
FLA_Error FLA_Trinv_un_unb_var2( FLA_Obj A );
FLA_Error FLA_Trinv_un_unb_var3( FLA_Obj A );
FLA_Error FLA_Trinv_un_unb_var4( FLA_Obj A );

FLA_Error FLA_Trinv_un_opt_var1( FLA_Obj A );
FLA_Error FLA_Trinv_un_ops_var1( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opd_var1( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opc_var1( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opz_var1( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_un_opt_var2( FLA_Obj A );
FLA_Error FLA_Trinv_un_ops_var2( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opd_var2( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opc_var2( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opz_var2( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_un_opt_var3( FLA_Obj A );
FLA_Error FLA_Trinv_un_ops_var3( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opd_var3( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opc_var3( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opz_var3( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_un_opt_var4( FLA_Obj A );
FLA_Error FLA_Trinv_un_ops_var4( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opd_var4( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opc_var4( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_un_opz_var4( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );
// end FLA_Trinv_un.h
// begin FLA_Trinv_uu.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Trinv_uu_blk_var1( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_uu_blk_var2( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_uu_blk_var3( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_uu_blk_var4( FLA_Obj A, fla_trinv_t* cntl );

FLA_Error FLA_Trinv_uu_unb_var1( FLA_Obj A );
FLA_Error FLA_Trinv_uu_unb_var2( FLA_Obj A );
FLA_Error FLA_Trinv_uu_unb_var3( FLA_Obj A );
FLA_Error FLA_Trinv_uu_unb_var4( FLA_Obj A );

FLA_Error FLA_Trinv_uu_opt_var1( FLA_Obj A );
FLA_Error FLA_Trinv_uu_ops_var1( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opd_var1( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opc_var1( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opz_var1( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_uu_opt_var2( FLA_Obj A );
FLA_Error FLA_Trinv_uu_ops_var2( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opd_var2( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opc_var2( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opz_var2( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_uu_opt_var3( FLA_Obj A );
FLA_Error FLA_Trinv_uu_ops_var3( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opd_var3( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opc_var3( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opz_var3( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Trinv_uu_opt_var4( FLA_Obj A );
FLA_Error FLA_Trinv_uu_ops_var4( integer mn_A,
                                 float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opd_var4( integer mn_A,
                                 double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opc_var4( integer mn_A,
                                 scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Trinv_uu_opz_var4( integer mn_A,
                                 dcomplex* A, integer rs_A, integer cs_A );
// end FLA_Trinv_uu.h

FLA_Error FLA_Trinv_internal( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A, fla_trinv_t* cntl );

FLA_Error FLA_Trinv_ln( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_lu( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_un( FLA_Obj A, fla_trinv_t* cntl );
FLA_Error FLA_Trinv_uu( FLA_Obj A, fla_trinv_t* cntl );

// end FLA_Trinv.h
// begin FLA_SPDinv.h


// skipped #include "FLAME.h" 

FLA_Error FLA_SPDinv_internal( FLA_Uplo uplo, FLA_Obj A, fla_spdinv_t* cntl );
// end FLA_SPDinv.h

// Reductions
// begin FLA_Hess_UT.h


// begin FLA_Hess_UT_vars.h


FLA_Error FLA_Hess_UT_blk_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_unb_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_unb_var1( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Hess_UT_blk_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_blf_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_unb_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_unb_var2( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Hess_UT_blk_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_blf_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_unb_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_unb_var3( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Hess_UT_blk_var4( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_blf_var4( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_unb_var4( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_unb_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj T );

FLA_Error FLA_Hess_UT_blk_var5( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_unb_var5( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_unb_var5( FLA_Obj A, FLA_Obj U, FLA_Obj Z, FLA_Obj T );


FLA_Error FLA_Hess_UT_opt_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_opt_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ops_var1( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opd_var1( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opc_var1( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opz_var1( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_opt_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_opt_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ops_var2( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opd_var2( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opc_var2( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opz_var2( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_opt_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_opt_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ops_var3( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opd_var3( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opc_var3( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opz_var3( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_opt_var4( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_opt_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ops_var4( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_Y, integer rs_Y, integer cs_Y, 
                                     float* buff_Z, integer rs_Z, integer cs_Z, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opd_var4( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_Y, integer rs_Y, integer cs_Y, 
                                     double* buff_Z, integer rs_Z, integer cs_Z, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opc_var4( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                     scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opz_var4( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                     dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_opt_var5( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_opt_var5( FLA_Obj A, FLA_Obj U, FLA_Obj Z, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ops_var5( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_U, integer rs_U, integer cs_U, 
                                     float* buff_Z, integer rs_Z, integer cs_Z, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opd_var5( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_U, integer rs_U, integer cs_U, 
                                     double* buff_Z, integer rs_Z, integer cs_Z, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opc_var5( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_U, integer rs_U, integer cs_U, 
                                     scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_opz_var5( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_U, integer rs_U, integer cs_U, 
                                     dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_ofu_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofu_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofs_var1( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofd_var1( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofc_var1( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofz_var1( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_ofu_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofu_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofs_var2( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofd_var2( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofc_var2( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofz_var2( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_ofu_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofu_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofs_var3( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofd_var3( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofc_var3( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofz_var3( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


FLA_Error FLA_Hess_UT_ofu_var4( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofu_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj T );
FLA_Error FLA_Hess_UT_step_ofs_var4( integer m_A,
                                     integer m_T,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_Y, integer rs_Y, integer cs_Y,
                                     float* buff_Z, integer rs_Z, integer cs_Z,
                                     float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofd_var4( integer m_A,
                                     integer m_T,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_Y, integer rs_Y, integer cs_Y,
                                     double* buff_Z, integer rs_Z, integer cs_Z,
                                     double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofc_var4( integer m_A,
                                     integer m_T,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_Y, integer rs_Y, integer cs_Y,
                                     scomplex* buff_Z, integer rs_Z, integer cs_Z,
                                     scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Hess_UT_step_ofz_var4( integer m_A,
                                     integer m_T,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_Y, integer rs_Y, integer cs_Y,
                                     dcomplex* buff_Z, integer rs_Z, integer cs_Z,
                                     dcomplex* buff_T, integer rs_T, integer cs_T );


// --- Fused operations --------------------------------------------------------

FLA_Error FLA_Fused_Ahx_Ax_ops_var1( integer m_A,
                                     integer n_A,
                                     float* buff_A, integer rs_A, integer cs_A, 
                                     float* buff_x, integer inc_x, 
                                     float* buff_v, integer inc_v, 
                                     float* buff_w, integer inc_w );
FLA_Error FLA_Fused_Ahx_Ax_opd_var1( integer m_A,
                                     integer n_A,
                                     double* buff_A, integer rs_A, integer cs_A, 
                                     double* buff_x, integer inc_x, 
                                     double* buff_v, integer inc_v, 
                                     double* buff_w, integer inc_w );
FLA_Error FLA_Fused_Ahx_Ax_opc_var1( integer m_A,
                                     integer n_A,
                                     scomplex* buff_A, integer rs_A, integer cs_A, 
                                     scomplex* buff_x, integer inc_x, 
                                     scomplex* buff_v, integer inc_v, 
                                     scomplex* buff_w, integer inc_w );
FLA_Error FLA_Fused_Ahx_Ax_opz_var1( integer m_A,
                                     integer n_A,
                                     dcomplex* buff_A, integer rs_A, integer cs_A, 
                                     dcomplex* buff_x, integer inc_x, 
                                     dcomplex* buff_v, integer inc_v, 
                                     dcomplex* buff_w, integer inc_w );


FLA_Error FLA_Fused_Gerc2_Ahx_Ax_ops_var1( integer m_A,
                                           integer n_A,
                                           float* buff_alpha, 
                                           float* buff_u, integer inc_u, 
                                           float* buff_y, integer inc_y, 
                                           float* buff_z, integer inc_z, 
                                           float* buff_A, integer rs_A, integer cs_A, 
                                           float* buff_x, integer inc_x, 
                                           float* buff_v, integer inc_v, 
                                           float* buff_w, integer inc_w );
FLA_Error FLA_Fused_Gerc2_Ahx_Ax_opd_var1( integer m_A,
                                           integer n_A,
                                           double* buff_alpha, 
                                           double* buff_u, integer inc_u, 
                                           double* buff_y, integer inc_y, 
                                           double* buff_z, integer inc_z, 
                                           double* buff_A, integer rs_A, integer cs_A, 
                                           double* buff_x, integer inc_x, 
                                           double* buff_v, integer inc_v, 
                                           double* buff_w, integer inc_w );
FLA_Error FLA_Fused_Gerc2_Ahx_Ax_opc_var1( integer m_A,
                                           integer n_A,
                                           scomplex* buff_alpha, 
                                           scomplex* buff_u, integer inc_u, 
                                           scomplex* buff_y, integer inc_y, 
                                           scomplex* buff_z, integer inc_z, 
                                           scomplex* buff_A, integer rs_A, integer cs_A, 
                                           scomplex* buff_x, integer inc_x, 
                                           scomplex* buff_v, integer inc_v, 
                                           scomplex* buff_w, integer inc_w );
FLA_Error FLA_Fused_Gerc2_Ahx_Ax_opz_var1( integer m_A,
                                           integer n_A,
                                           dcomplex* buff_alpha, 
                                           dcomplex* buff_u, integer inc_u, 
                                           dcomplex* buff_y, integer inc_y, 
                                           dcomplex* buff_z, integer inc_z, 
                                           dcomplex* buff_A, integer rs_A, integer cs_A, 
                                           dcomplex* buff_x, integer inc_x, 
                                           dcomplex* buff_v, integer inc_v, 
                                           dcomplex* buff_w, integer inc_w );


FLA_Error FLA_Fused_Uhu_Yhu_Zhu_ops_var1( integer m_U,
                                          integer n_U,
                                          float* buff_delta,
                                          float* buff_U, integer rs_U, integer cs_U,
                                          float* buff_Y, integer rs_Y, integer cs_Y,
                                          float* buff_Z, integer rs_Z, integer cs_Z,
                                          float* buff_t, integer inc_t,
                                          float* buff_u, integer inc_u,
                                          float* buff_y, integer inc_y,
                                          float* buff_z, integer inc_z );
FLA_Error FLA_Fused_Uhu_Yhu_Zhu_opd_var1( integer m_U,
                                          integer n_U,
                                          double* buff_delta,
                                          double* buff_U, integer rs_U, integer cs_U,
                                          double* buff_Y, integer rs_Y, integer cs_Y,
                                          double* buff_Z, integer rs_Z, integer cs_Z,
                                          double* buff_t, integer inc_t,
                                          double* buff_u, integer inc_u,
                                          double* buff_y, integer inc_y,
                                          double* buff_z, integer inc_z );
FLA_Error FLA_Fused_Uhu_Yhu_Zhu_opc_var1( integer m_U,
                                          integer n_U,
                                          scomplex* buff_delta,
                                          scomplex* buff_U, integer rs_U, integer cs_U,
                                          scomplex* buff_Y, integer rs_Y, integer cs_Y,
                                          scomplex* buff_Z, integer rs_Z, integer cs_Z,
                                          scomplex* buff_t, integer inc_t,
                                          scomplex* buff_u, integer inc_u,
                                          scomplex* buff_y, integer inc_y,
                                          scomplex* buff_z, integer inc_z );
FLA_Error FLA_Fused_Uhu_Yhu_Zhu_opz_var1( integer m_U,
                                          integer n_U,
                                          dcomplex* buff_delta,
                                          dcomplex* buff_U, integer rs_U, integer cs_U,
                                          dcomplex* buff_Y, integer rs_Y, integer cs_Y,
                                          dcomplex* buff_Z, integer rs_Z, integer cs_Z,
                                          dcomplex* buff_t, integer inc_t,
                                          dcomplex* buff_u, integer inc_u,
                                          dcomplex* buff_y, integer inc_y,
                                          dcomplex* buff_z, integer inc_z );

// end FLA_Hess_UT_vars.h

FLA_Error FLA_Hess_UT( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Hess_UT_internal( FLA_Obj A, FLA_Obj T, fla_hessut_t* cntl );

FLA_Error FLA_Hess_UT_create_T( FLA_Obj A, FLA_Obj* T );

FLA_Error FLA_Hess_UT_recover_tau( FLA_Obj T, FLA_Obj t );
// end FLA_Hess_UT.h
// begin FLA_Tridiag_UT.h


// begin FLA_Tridiag_UT_l.h


FLA_Error FLA_Tridiag_UT_l_blk_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_unb_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_unb_var1( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Tridiag_UT_l_blk_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_blf_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_unb_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_unb_var2( FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Tridiag_UT_l_blk_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_blf_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_unb_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_unb_var3( FLA_Obj A, FLA_Obj Z, FLA_Obj T );

FLA_Error FLA_Tridiag_UT_l_opt_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_opt_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ops_var1( integer m_A,
                                          integer m_T,
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opd_var1( integer m_A,
                                          integer m_T,
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opc_var1( integer m_A,
                                          integer m_T,
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opz_var1( integer m_A,
                                          integer m_T,
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_T, integer rs_T, integer cs_T );

FLA_Error FLA_Tridiag_UT_l_opt_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_opt_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ops_var2( integer m_A,
                                          integer m_T,
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opd_var2( integer m_A,
                                          integer m_T,
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opc_var2( integer m_A,
                                          integer m_T,
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opz_var2( integer m_A,
                                          integer m_T,
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_T, integer rs_T, integer cs_T );

FLA_Error FLA_Tridiag_UT_l_opt_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_opt_var3( FLA_Obj A, FLA_Obj Z, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ops_var3( integer m_A,
                                          integer m_T,
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_Z, integer rs_Z, integer cs_Z, 
                                          float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opd_var3( integer m_A,
                                          integer m_T,
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_Z, integer rs_Z, integer cs_Z, 
                                          double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opc_var3( integer m_A,
                                          integer m_T,
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                          scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_opz_var3( integer m_A,
                                          integer m_T,
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                          dcomplex* buff_T, integer rs_T, integer cs_T );

FLA_Error FLA_Tridiag_UT_l_ofu_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ofu_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ofs_var1( integer m_A,
                                          integer m_T,
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofd_var1( integer m_A,
                                          integer m_T,
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofc_var1( integer m_A,
                                          integer m_T,
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofz_var1( integer m_A,
                                          integer m_T,
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_T, integer rs_T, integer cs_T );

FLA_Error FLA_Tridiag_UT_l_ofu_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ofu_var2( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ofs_var2( integer m_A,
                                          integer m_T,
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofd_var2( integer m_A,
                                          integer m_T,
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofc_var2( integer m_A,
                                          integer m_T,
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofz_var2( integer m_A,
                                          integer m_T,
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_T, integer rs_T, integer cs_T );

FLA_Error FLA_Tridiag_UT_l_ofu_var3( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ofu_var3( FLA_Obj A, FLA_Obj Z, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_l_step_ofs_var3( integer m_A,
                                          integer m_T,
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_Z, integer rs_Z, integer cs_Z,
                                          float* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofd_var3( integer m_A,
                                          integer m_T,
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_Z, integer rs_Z, integer cs_Z,
                                          double* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofc_var3( integer m_A,
                                          integer m_T,
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_Z, integer rs_Z, integer cs_Z,
                                          scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_l_step_ofz_var3( integer m_A,
                                          integer m_T,
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_Z, integer rs_Z, integer cs_Z,
                                          dcomplex* buff_T, integer rs_T, integer cs_T );

// --- Fused operations ---

FLA_Error FLA_Fused_Her2_Ax_l_opt_var1( FLA_Obj alpha, FLA_Obj u, FLA_Obj z, FLA_Obj A, FLA_Obj x, FLA_Obj w );
FLA_Error FLA_Fused_Her2_Ax_l_ops_var1( integer m_A,
                                        float* buff_alpha, 
                                        float* buff_u, integer inc_u, 
                                        float* buff_z, integer inc_z, 
                                        float* buff_A, integer rs_A, integer cs_A, 
                                        float* buff_x, integer inc_x, 
                                        float* buff_w, integer inc_w );
FLA_Error FLA_Fused_Her2_Ax_l_opd_var1( integer m_A,
                                        double* buff_alpha, 
                                        double* buff_u, integer inc_u, 
                                        double* buff_z, integer inc_z, 
                                        double* buff_A, integer rs_A, integer cs_A, 
                                        double* buff_x, integer inc_x, 
                                        double* buff_w, integer inc_w );
FLA_Error FLA_Fused_Her2_Ax_l_opc_var1( integer m_A,
                                        scomplex* buff_alpha, 
                                        scomplex* buff_u, integer inc_u, 
                                        scomplex* buff_z, integer inc_z, 
                                        scomplex* buff_A, integer rs_A, integer cs_A, 
                                        scomplex* buff_x, integer inc_x, 
                                        scomplex* buff_w, integer inc_w );
FLA_Error FLA_Fused_Her2_Ax_l_opz_var1( integer m_A,
                                        dcomplex* buff_alpha, 
                                        dcomplex* buff_u, integer inc_u, 
                                        dcomplex* buff_z, integer inc_z, 
                                        dcomplex* buff_A, integer rs_A, integer cs_A, 
                                        dcomplex* buff_x, integer inc_x, 
                                        dcomplex* buff_w, integer inc_w );

FLA_Error FLA_Fused_UZhu_ZUhu_opt_var1( FLA_Obj delta, FLA_Obj U, FLA_Obj Z, FLA_Obj t, FLA_Obj u, FLA_Obj w );
FLA_Error FLA_Fused_UZhu_ZUhu_ops_var1( integer m_U,
                                        integer n_U,
                                        float* buff_delta, 
                                        float* buff_U, integer rs_U, integer cs_U, 
                                        float* buff_Z, integer rs_Z, integer cs_Z, 
                                        float* buff_t, integer inc_t, 
                                        float* buff_u, integer inc_u, 
                                        float* buff_w, integer inc_w );
FLA_Error FLA_Fused_UZhu_ZUhu_opd_var1( integer m_U,
                                        integer n_U,
                                        double* buff_delta, 
                                        double* buff_U, integer rs_U, integer cs_U, 
                                        double* buff_Z, integer rs_Z, integer cs_Z, 
                                        double* buff_t, integer inc_t, 
                                        double* buff_u, integer inc_u, 
                                        double* buff_w, integer inc_w );
FLA_Error FLA_Fused_UZhu_ZUhu_opc_var1( integer m_U,
                                        integer n_U,
                                        scomplex* buff_delta, 
                                        scomplex* buff_U, integer rs_U, integer cs_U, 
                                        scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                        scomplex* buff_t, integer inc_t, 
                                        scomplex* buff_u, integer inc_u, 
                                        scomplex* buff_w, integer inc_w );
FLA_Error FLA_Fused_UZhu_ZUhu_opz_var1( integer m_U,
                                        integer n_U,
                                        dcomplex* buff_delta, 
                                        dcomplex* buff_U, integer rs_U, integer cs_U, 
                                        dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                        dcomplex* buff_t, integer inc_t, 
                                        dcomplex* buff_u, integer inc_u, 
                                        dcomplex* buff_w, integer inc_w );
// end FLA_Tridiag_UT_l.h
//#include "FLA_Tridiag_UT_u.h"

FLA_Error FLA_Tridiag_UT( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T );

FLA_Error FLA_Tridiag_UT_internal( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T, fla_tridiagut_t* cntl );

FLA_Error FLA_Tridiag_UT_l( FLA_Obj A, FLA_Obj T, fla_tridiagut_t* cntl );
FLA_Error FLA_Tridiag_UT_u( FLA_Obj A, FLA_Obj T, fla_tridiagut_t* cntl );

FLA_Error FLA_Tridiag_UT_create_T( FLA_Obj A, FLA_Obj* T );
FLA_Error FLA_Tridiag_UT_recover_tau( FLA_Obj T, FLA_Obj t );

FLA_Error FLA_Tridiag_UT_scale_diagonals( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );

FLA_Error FLA_Tridiag_UT_extract_diagonals( FLA_Uplo uplo, FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Tridiag_UT_extract_real_diagonals( FLA_Uplo uplo, FLA_Obj A, FLA_Obj d, FLA_Obj e );
//// FLA_Error FLA_Tridiag_UT_l_extract_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );
//// FLA_Error FLA_Tridiag_UT_u_extract_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );

FLA_Error FLA_Tridiag_UT_realify( FLA_Uplo uplo, FLA_Obj A, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_l_realify_unb( FLA_Obj A, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_l_realify_opt( FLA_Obj A, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_u_realify_unb( FLA_Obj A, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_u_realify_opt( FLA_Obj A, FLA_Obj d );

FLA_Error FLA_Tridiag_UT_realify_subdiagonal( FLA_Obj b, FLA_Obj d );
FLA_Error FLA_Tridiag_UT_realify_subdiagonal_opt( FLA_Obj b, FLA_Obj d );

FLA_Error FLA_Tridiag_UT_shift_U( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLA_Tridiag_UT_shift_U_l_ops( integer       m_A,
                                        float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_u_ops( integer       m_A,
                                        float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_l_opd( integer       m_A,
                                        double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_u_opd( integer       m_A,
                                        double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_l_opc( integer       m_A,
                                        scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_u_opc( integer       m_A,
                                        scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_l_opz( integer       m_A,
                                        dcomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Tridiag_UT_shift_U_u_opz( integer       m_A,
                                        dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Tridiag_UT_form_Q( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T, FLA_Obj Q );
FLA_Error FLA_Tridiag_UT_form_Q_l_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W );
FLA_Error FLA_Tridiag_UT_form_Q_u_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W );
FLA_Error FLA_Tridiag_UT_form_Q_l_opt_var1( FLA_Obj A, FLA_Obj T );
FLA_Error FLA_Tridiag_UT_form_Q_l_ops_var1( integer       m_A,
                                            integer       n_AT,
                                            float*    buff_A, integer rs_A, integer cs_A,
                                            float*    buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_form_Q_l_opd_var1( integer       m_A,
                                            integer       n_AT,
                                            double*   buff_A, integer rs_A, integer cs_A,
                                            double*   buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_form_Q_l_opc_var1( integer       m_A,
                                            integer       n_AT,
                                            scomplex* buff_A, integer rs_A, integer cs_A,
                                            scomplex* buff_T, integer rs_T, integer cs_T );
FLA_Error FLA_Tridiag_UT_form_Q_l_opz_var1( integer       m_A,
                                            integer       n_AT,
                                            dcomplex* buff_A, integer rs_A, integer cs_A,
                                            dcomplex* buff_T, integer rs_T, integer cs_T );
// end FLA_Tridiag_UT.h
// begin FLA_Bidiag_UT.h


//#include "FLA_Bidiag_UT_l.h"
// begin FLA_Bidiag_UT_u.h


FLA_Error FLA_Bidiag_UT_u_unb_var1( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blk_var1( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_step_unb_var1( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );

FLA_Error FLA_Bidiag_UT_u_unb_var2( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blk_var2( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blf_var2( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_step_unb_var2( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );

FLA_Error FLA_Bidiag_UT_u_unb_var3( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blk_var3( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blf_var3( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_step_unb_var3( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );

FLA_Error FLA_Bidiag_UT_u_unb_var4( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blk_var4( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blf_var4( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_step_unb_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj TU, FLA_Obj TV );

FLA_Error FLA_Bidiag_UT_u_unb_var5( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_blk_var5( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );
FLA_Error FLA_Bidiag_UT_u_step_unb_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj TU, FLA_Obj TV );

FLA_Error FLA_Bidiag_UT_u_opt_var1( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_opt_var1( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ops_var1( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opd_var1( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opc_var1( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opz_var1( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

FLA_Error FLA_Bidiag_UT_u_opt_var2( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_opt_var2( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ops_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opd_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opc_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opz_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

FLA_Error FLA_Bidiag_UT_u_opt_var3( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_opt_var3( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ops_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opd_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opc_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opz_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

FLA_Error FLA_Bidiag_UT_u_opt_var4( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_opt_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ops_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_Y, integer rs_Y, integer cs_Y, 
                                         float* buff_Z, integer rs_Z, integer cs_Z, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opd_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_Y, integer rs_Y, integer cs_Y, 
                                         double* buff_Z, integer rs_Z, integer cs_Z, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opc_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                         scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opz_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                         dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

FLA_Error FLA_Bidiag_UT_u_opt_var5( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_opt_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ops_var5( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_Y, integer rs_Y, integer cs_Y, 
                                         float* buff_Z, integer rs_Z, integer cs_Z, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opd_var5( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_Y, integer rs_Y, integer cs_Y, 
                                         double* buff_Z, integer rs_Z, integer cs_Z, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opc_var5( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                         scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_opz_var5( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                         dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );


FLA_Error FLA_Bidiag_UT_u_ofu_var2( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ofu_var2( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ofs_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofd_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofc_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofz_var2( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

FLA_Error FLA_Bidiag_UT_u_ofu_var3( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ofu_var3( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ofs_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofd_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofc_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofz_var3( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

FLA_Error FLA_Bidiag_UT_u_ofu_var4( FLA_Obj A, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ofu_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj Z, FLA_Obj T, FLA_Obj S );
FLA_Error FLA_Bidiag_UT_u_step_ofs_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         float* buff_A, integer rs_A, integer cs_A, 
                                         float* buff_Y, integer rs_Y, integer cs_Y, 
                                         float* buff_Z, integer rs_Z, integer cs_Z, 
                                         float* buff_T, integer rs_T, integer cs_T, 
                                         float* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofd_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         double* buff_A, integer rs_A, integer cs_A, 
                                         double* buff_Y, integer rs_Y, integer cs_Y, 
                                         double* buff_Z, integer rs_Z, integer cs_Z, 
                                         double* buff_T, integer rs_T, integer cs_T, 
                                         double* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofc_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         scomplex* buff_A, integer rs_A, integer cs_A, 
                                         scomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                         scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                         scomplex* buff_T, integer rs_T, integer cs_T, 
                                         scomplex* buff_S, integer rs_S, integer cs_S );
FLA_Error FLA_Bidiag_UT_u_step_ofz_var4( integer m_A,
                                         integer n_A,
                                         integer m_TS,
                                         dcomplex* buff_A, integer rs_A, integer cs_A, 
                                         dcomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                         dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                         dcomplex* buff_T, integer rs_T, integer cs_T, 
                                         dcomplex* buff_S, integer rs_S, integer cs_S );

// --- Fused operations ---

FLA_Error FLA_Fused_Gerc2_opt_var1( FLA_Obj alpha, FLA_Obj u, FLA_Obj y, FLA_Obj z, FLA_Obj v, FLA_Obj A );
FLA_Error FLA_Fused_Gerc2_ops_var1( integer m_A,
                                    integer n_A,
                                    float* buff_alpha, 
                                    float* buff_u, integer inc_u, 
                                    float* buff_y, integer inc_y, 
                                    float* buff_z, integer inc_z, 
                                    float* buff_v, integer inc_v, 
                                    float* buff_A, integer rs_A, integer cs_A ); 
FLA_Error FLA_Fused_Gerc2_opd_var1( integer m_A,
                                    integer n_A,
                                    double* buff_alpha, 
                                    double* buff_u, integer inc_u, 
                                    double* buff_y, integer inc_y, 
                                    double* buff_z, integer inc_z, 
                                    double* buff_v, integer inc_v, 
                                    double* buff_A, integer rs_A, integer cs_A ); 
FLA_Error FLA_Fused_Gerc2_opc_var1( integer m_A,
                                    integer n_A,
                                    scomplex* buff_alpha, 
                                    scomplex* buff_u, integer inc_u, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_z, integer inc_z, 
                                    scomplex* buff_v, integer inc_v, 
                                    scomplex* buff_A, integer rs_A, integer cs_A ); 
FLA_Error FLA_Fused_Gerc2_opz_var1( integer m_A,
                                    integer n_A,
                                    dcomplex* buff_alpha, 
                                    dcomplex* buff_u, integer inc_u, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_z, integer inc_z, 
                                    dcomplex* buff_v, integer inc_v, 
                                    dcomplex* buff_A, integer rs_A, integer cs_A ); 


FLA_Error FLA_Fused_Ahx_Axpy_Ax_opt_var1( FLA_Obj A, FLA_Obj u, FLA_Obj tau, FLA_Obj a, FLA_Obj beta, FLA_Obj y, FLA_Obj w );
FLA_Error FLA_Fused_Ahx_Axpy_Ax_ops_var1( integer m_A,
                                          integer n_A,
                                          float* buff_tau, 
                                          float* buff_beta, 
                                          float* buff_A, integer rs_A, integer cs_A, 
                                          float* buff_u, integer inc_u, 
                                          float* buff_a, integer inc_a, 
                                          float* buff_y, integer inc_y, 
                                          float* buff_w, integer inc_w );
FLA_Error FLA_Fused_Ahx_Axpy_Ax_opd_var1( integer m_A,
                                          integer n_A,
                                          double* buff_tau, 
                                          double* buff_beta, 
                                          double* buff_A, integer rs_A, integer cs_A, 
                                          double* buff_u, integer inc_u, 
                                          double* buff_a, integer inc_a, 
                                          double* buff_y, integer inc_y, 
                                          double* buff_w, integer inc_w );
FLA_Error FLA_Fused_Ahx_Axpy_Ax_opc_var1( integer m_A,
                                          integer n_A,
                                          scomplex* buff_tau, 
                                          scomplex* buff_beta, 
                                          scomplex* buff_A, integer rs_A, integer cs_A, 
                                          scomplex* buff_u, integer inc_u, 
                                          scomplex* buff_a, integer inc_a, 
                                          scomplex* buff_y, integer inc_y, 
                                          scomplex* buff_w, integer inc_w );
FLA_Error FLA_Fused_Ahx_Axpy_Ax_opz_var1( integer m_A,
                                          integer n_A,
                                          dcomplex* buff_tau, 
                                          dcomplex* buff_beta, 
                                          dcomplex* buff_A, integer rs_A, integer cs_A, 
                                          dcomplex* buff_u, integer inc_u, 
                                          dcomplex* buff_a, integer inc_a, 
                                          dcomplex* buff_y, integer inc_y, 
                                          dcomplex* buff_w, integer inc_w );

FLA_Error FLA_Fused_Gerc2_Ahx_Axpy_Ax_opt_var1( FLA_Obj alpha, FLA_Obj tau, FLA_Obj u, FLA_Obj y, FLA_Obj z, FLA_Obj v, FLA_Obj A, FLA_Obj up, FLA_Obj a, FLA_Obj w );
FLA_Error FLA_Fused_Gerc2_Ahx_Axpy_Ax_ops_var1( integer m_A,
                                                integer n_A,
                                                float* buff_tau, 
                                                float* buff_alpha, 
                                                float* buff_u, integer inc_u, 
                                                float* buff_y, integer inc_y, 
                                                float* buff_z, integer inc_z, 
                                                float* buff_v, integer inc_v, 
                                                float* buff_A, integer rs_A, integer cs_A, 
                                                float* buff_up, integer inc_up, 
                                                float* buff_a, integer inc_a, 
                                                float* buff_w, integer inc_w );
FLA_Error FLA_Fused_Gerc2_Ahx_Axpy_Ax_opd_var1( integer m_A,
                                                integer n_A,
                                                double* buff_tau, 
                                                double* buff_alpha, 
                                                double* buff_u, integer inc_u, 
                                                double* buff_y, integer inc_y, 
                                                double* buff_z, integer inc_z, 
                                                double* buff_v, integer inc_v, 
                                                double* buff_A, integer rs_A, integer cs_A, 
                                                double* buff_up, integer inc_up, 
                                                double* buff_a, integer inc_a, 
                                                double* buff_w, integer inc_w );
FLA_Error FLA_Fused_Gerc2_Ahx_Axpy_Ax_opc_var1( integer m_A,
                                                integer n_A,
                                                scomplex* buff_tau, 
                                                scomplex* buff_alpha, 
                                                scomplex* buff_u, integer inc_u, 
                                                scomplex* buff_y, integer inc_y, 
                                                scomplex* buff_z, integer inc_z, 
                                                scomplex* buff_v, integer inc_v, 
                                                scomplex* buff_A, integer rs_A, integer cs_A, 
                                                scomplex* buff_up, integer inc_up, 
                                                scomplex* buff_a, integer inc_a, 
                                                scomplex* buff_w, integer inc_w );
FLA_Error FLA_Fused_Gerc2_Ahx_Axpy_Ax_opz_var1( integer m_A,
                                                integer n_A,
                                                dcomplex* buff_tau, 
                                                dcomplex* buff_alpha, 
                                                dcomplex* buff_u, integer inc_u, 
                                                dcomplex* buff_y, integer inc_y, 
                                                dcomplex* buff_z, integer inc_z, 
                                                dcomplex* buff_v, integer inc_v, 
                                                dcomplex* buff_A, integer rs_A, integer cs_A, 
                                                dcomplex* buff_up, integer inc_up, 
                                                dcomplex* buff_a, integer inc_a, 
                                                dcomplex* buff_w, integer inc_w );

FLA_Error FLA_Fused_UYx_ZVx_opt_var1( FLA_Obj delta, FLA_Obj a, FLA_Obj U, FLA_Obj Y, FLA_Obj Z, FLA_Obj V, FLA_Obj A, FLA_Obj temp, FLA_Obj t, FLA_Obj w, FLA_Obj al );
FLA_Error FLA_Fused_UYx_ZVx_ops_var1( integer m_U,
                                      integer n_U,
                                      integer m_V,
                                      integer n_V,
                                      float* buff_delta, 
                                      float* buff_U, integer rs_U, integer cs_U, 
                                      float* buff_Y, integer rs_Y, integer cs_Y, 
                                      float* buff_Z, integer rs_Z, integer cs_Z, 
                                      float* buff_V, integer rs_V, integer cs_V, 
                                      float* buff_A, integer rs_A, integer cs_A, 
                                      float* buff_temp, integer inc_temp, 
                                      float* buff_t, integer inc_t, 
                                      float* buff_a, integer inc_a, 
                                      float* buff_w, integer inc_w, 
                                      float* buff_al, integer inc_al );
FLA_Error FLA_Fused_UYx_ZVx_opd_var1( integer m_U,
                                      integer n_U,
                                      integer m_V,
                                      integer n_V,
                                      double* buff_delta, 
                                      double* buff_U, integer rs_U, integer cs_U, 
                                      double* buff_Y, integer rs_Y, integer cs_Y, 
                                      double* buff_Z, integer rs_Z, integer cs_Z, 
                                      double* buff_V, integer rs_V, integer cs_V, 
                                      double* buff_A, integer rs_A, integer cs_A, 
                                      double* buff_temp, integer inc_temp, 
                                      double* buff_t, integer inc_t, 
                                      double* buff_a, integer inc_a, 
                                      double* buff_w, integer inc_w, 
                                      double* buff_al, integer inc_al );
FLA_Error FLA_Fused_UYx_ZVx_opc_var1( integer m_U,
                                      integer n_U,
                                      integer m_V,
                                      integer n_V,
                                      scomplex* buff_delta, 
                                      scomplex* buff_U, integer rs_U, integer cs_U, 
                                      scomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                      scomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                      scomplex* buff_V, integer rs_V, integer cs_V, 
                                      scomplex* buff_A, integer rs_A, integer cs_A, 
                                      scomplex* buff_temp, integer inc_temp, 
                                      scomplex* buff_t, integer inc_t, 
                                      scomplex* buff_a, integer inc_a, 
                                      scomplex* buff_w, integer inc_w, 
                                      scomplex* buff_al, integer inc_al );
FLA_Error FLA_Fused_UYx_ZVx_opz_var1( integer m_U,
                                      integer n_U,
                                      integer m_V,
                                      integer n_V,
                                      dcomplex* buff_delta, 
                                      dcomplex* buff_U, integer rs_U, integer cs_U, 
                                      dcomplex* buff_Y, integer rs_Y, integer cs_Y, 
                                      dcomplex* buff_Z, integer rs_Z, integer cs_Z, 
                                      dcomplex* buff_V, integer rs_V, integer cs_V, 
                                      dcomplex* buff_A, integer rs_A, integer cs_A, 
                                      dcomplex* buff_temp, integer inc_temp, 
                                      dcomplex* buff_t, integer inc_t, 
                                      dcomplex* buff_a, integer inc_a, 
                                      dcomplex* buff_w, integer inc_w, 
                                      dcomplex* buff_al, integer inc_al );
// end FLA_Bidiag_UT_u.h

FLA_Error FLA_Bidiag_UT( FLA_Obj A, FLA_Obj TU, FLA_Obj TV );

FLA_Error FLA_Bidiag_UT_internal( FLA_Obj A, FLA_Obj TU, FLA_Obj TV, fla_bidiagut_t* cntl );

FLA_Error FLA_Bidiag_UT_l( FLA_Obj A, FLA_Obj TU, FLA_Obj TV, fla_bidiagut_t* cntl );
FLA_Error FLA_Bidiag_UT_u( FLA_Obj A, FLA_Obj TU, FLA_Obj TV, fla_bidiagut_t* cntl );

FLA_Error FLA_Bidiag_UT_create_T( FLA_Obj A, FLA_Obj* TU, FLA_Obj* TV );

FLA_Error FLA_Bidiag_UT_recover_tau( FLA_Obj TU, FLA_Obj TV, FLA_Obj tu, FLA_Obj tv );

FLA_Error FLA_Bidiag_UT_extract_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_u_extract_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_l_extract_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );

FLA_Error FLA_Bidiag_UT_extract_real_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_u_extract_real_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_l_extract_real_diagonals( FLA_Obj A, FLA_Obj d, FLA_Obj e );

FLA_Error FLA_Bidiag_UT_scale_diagonals( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Bidiag_UT_u_scale_diagonals( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLA_Bidiag_UT_l_scale_diagonals( FLA_Obj alpha, FLA_Obj A );

FLA_Error FLA_Bidiag_UT_realify( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_l_realify_unb( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_l_realify_opt( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_u_realify_unb( FLA_Obj A, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_u_realify_opt( FLA_Obj A, FLA_Obj d, FLA_Obj e );

FLA_Error FLA_Bidiag_UT_realify_diagonals( FLA_Uplo uplo, FLA_Obj a, FLA_Obj b, FLA_Obj d, FLA_Obj e );
FLA_Error FLA_Bidiag_UT_realify_diagonals_opt( FLA_Obj a, FLA_Obj b, FLA_Obj d, FLA_Obj e );

FLA_Error FLA_Bidiag_UT_form_U( FLA_Obj A, FLA_Obj T, FLA_Obj U );
FLA_Error FLA_Bidiag_UT_form_V( FLA_Obj A, FLA_Obj S, FLA_Obj V );

FLA_Error FLA_Bidiag_UT_form_U_ext( FLA_Uplo uplo, FLA_Obj A, FLA_Obj T, FLA_Trans transu, FLA_Obj U );
FLA_Error FLA_Bidiag_UT_form_V_ext( FLA_Uplo uplo, FLA_Obj A, FLA_Obj S, FLA_Trans transv, FLA_Obj V );

// end FLA_Bidiag_UT.h

// Solves
// begin FLA_Lyap.h


// begin FLA_Lyap_n.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Lyap_n_unb_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_unb_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_unb_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_unb_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );

FLA_Error FLA_Lyap_n_blk_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_n_blk_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_n_blk_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_n_blk_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );

FLA_Error FLA_Lyap_n_opt_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_ops_var1( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opd_var1( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opc_var1( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opz_var1( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );

FLA_Error FLA_Lyap_n_opt_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_ops_var2( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opd_var2( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opc_var2( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opz_var2( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );

FLA_Error FLA_Lyap_n_opt_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_ops_var3( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opd_var3( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opc_var3( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opz_var3( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );

FLA_Error FLA_Lyap_n_opt_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_n_ops_var4( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opd_var4( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opc_var4( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_n_opz_var4( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );
// end FLA_Lyap_n.h
// begin FLA_Lyap_h.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Lyap_h_unb_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_unb_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_unb_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_unb_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );

FLA_Error FLA_Lyap_h_blk_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_h_blk_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_h_blk_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_h_blk_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );

FLA_Error FLA_Lyap_h_opt_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_ops_var1( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opd_var1( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opc_var1( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opz_var1( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );

FLA_Error FLA_Lyap_h_opt_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_ops_var2( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opd_var2( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opc_var2( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opz_var2( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );

FLA_Error FLA_Lyap_h_opt_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_ops_var3( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opd_var3( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opc_var3( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opz_var3( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );

FLA_Error FLA_Lyap_h_opt_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj C );
FLA_Error FLA_Lyap_h_ops_var4( integer m_AC,
                               float* buff_sgn,
                               float* buff_A, integer rs_A, integer cs_A, 
                               float* buff_W, integer rs_W, integer cs_W, 
                               float* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opd_var4( integer m_AC,
                               double* buff_sgn,
                               double* buff_A, integer rs_A, integer cs_A, 
                               double* buff_W, integer rs_W, integer cs_W, 
                               double* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opc_var4( integer m_AC,
                               scomplex* buff_sgn,
                               scomplex* buff_A, integer rs_A, integer cs_A, 
                               scomplex* buff_W, integer rs_W, integer cs_W, 
                               scomplex* buff_C, integer rs_C, integer cs_C );
FLA_Error FLA_Lyap_h_opz_var4( integer m_AC,
                               dcomplex* buff_sgn,
                               dcomplex* buff_A, integer rs_A, integer cs_A, 
                               dcomplex* buff_W, integer rs_W, integer cs_W, 
                               dcomplex* buff_C, integer rs_C, integer cs_C );
// end FLA_Lyap_h.h

FLA_Error FLASH_Lyap( FLA_Trans trans, FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_Lyap( FLA_Trans trans, FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_Lyap_internal( FLA_Trans trans, FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_n( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );
FLA_Error FLA_Lyap_h( FLA_Obj isgn, FLA_Obj A, FLA_Obj C, FLA_Obj scale, fla_lyap_t* cntl );

// end FLA_Lyap.h
// begin FLA_Sylv.h


// begin FLA_Sylv_nn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Sylv_nn_blk_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn_blk_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );

FLA_Error FLA_Sylv_nn_opt_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nn_opt_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_Sylv_nn_ops_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                float* buff_A, integer rs_A, integer cs_A,
                                float* buff_B, integer rs_B, integer cs_B,
                                float* buff_C, integer rs_C, integer cs_C,
                                float* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_nn_opd_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                double* buff_A, integer rs_A, integer cs_A,
                                double* buff_B, integer rs_B, integer cs_B,
                                double* buff_C, integer rs_C, integer cs_C,
                                double* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_nn_opc_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                scomplex* buff_A, integer rs_A, integer cs_A,
                                scomplex* buff_B, integer rs_B, integer cs_B,
                                scomplex* buff_C, integer rs_C, integer cs_C,
                                scomplex* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_nn_opz_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                dcomplex* buff_A, integer rs_A, integer cs_A,
                                dcomplex* buff_B, integer rs_B, integer cs_B,
                                dcomplex* buff_C, integer rs_C, integer cs_C,
                                dcomplex* buff_scale,
                                integer* info );
// end FLA_Sylv_nn.h
// begin FLA_Sylv_nh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Sylv_nh_blk_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh_blk_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );

FLA_Error FLA_Sylv_nh_opt_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_nh_opt_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_Sylv_nh_ops_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                float* buff_A, integer rs_A, integer cs_A,
                                float* buff_B, integer rs_B, integer cs_B,
                                float* buff_C, integer rs_C, integer cs_C,
                                float* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_nh_opd_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                double* buff_A, integer rs_A, integer cs_A,
                                double* buff_B, integer rs_B, integer cs_B,
                                double* buff_C, integer rs_C, integer cs_C,
                                double* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_nh_opc_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                scomplex* buff_A, integer rs_A, integer cs_A,
                                scomplex* buff_B, integer rs_B, integer cs_B,
                                scomplex* buff_C, integer rs_C, integer cs_C,
                                scomplex* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_nh_opz_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                dcomplex* buff_A, integer rs_A, integer cs_A,
                                dcomplex* buff_B, integer rs_B, integer cs_B,
                                dcomplex* buff_C, integer rs_C, integer cs_C,
                                dcomplex* buff_scale,
                                integer* info );
// end FLA_Sylv_nh.h
// begin FLA_Sylv_hn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Sylv_hn_blk_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn_blk_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );

FLA_Error FLA_Sylv_hn_opt_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hn_opt_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_Sylv_hn_ops_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                float* buff_A, integer rs_A, integer cs_A,
                                float* buff_B, integer rs_B, integer cs_B,
                                float* buff_C, integer rs_C, integer cs_C,
                                float* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_hn_opd_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                double* buff_A, integer rs_A, integer cs_A,
                                double* buff_B, integer rs_B, integer cs_B,
                                double* buff_C, integer rs_C, integer cs_C,
                                double* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_hn_opc_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                scomplex* buff_A, integer rs_A, integer cs_A,
                                scomplex* buff_B, integer rs_B, integer cs_B,
                                scomplex* buff_C, integer rs_C, integer cs_C,
                                scomplex* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_hn_opz_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                dcomplex* buff_A, integer rs_A, integer cs_A,
                                dcomplex* buff_B, integer rs_B, integer cs_B,
                                dcomplex* buff_C, integer rs_C, integer cs_C,
                                dcomplex* buff_scale,
                                integer* info );
// end FLA_Sylv_hn.h
// begin FLA_Sylv_hh.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Sylv_hh_blk_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh_blk_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );

FLA_Error FLA_Sylv_hh_opt_var1( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var2( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var3( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var4( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var5( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var6( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var7( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var8( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var9( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var10( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var11( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var12( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var13( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var14( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var15( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var16( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var17( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLA_Sylv_hh_opt_var18( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );

FLA_Error FLA_Sylv_hh_ops_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                float* buff_A, integer rs_A, integer cs_A,
                                float* buff_B, integer rs_B, integer cs_B,
                                float* buff_C, integer rs_C, integer cs_C,
                                float* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_hh_opd_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                double* buff_A, integer rs_A, integer cs_A,
                                double* buff_B, integer rs_B, integer cs_B,
                                double* buff_C, integer rs_C, integer cs_C,
                                double* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_hh_opc_var1( float sgn,
                                integer m_C,
                                integer n_C,
                                scomplex* buff_A, integer rs_A, integer cs_A,
                                scomplex* buff_B, integer rs_B, integer cs_B,
                                scomplex* buff_C, integer rs_C, integer cs_C,
                                scomplex* buff_scale,
                                integer* info );
FLA_Error FLA_Sylv_hh_opz_var1( double sgn,
                                integer m_C,
                                integer n_C,
                                dcomplex* buff_A, integer rs_A, integer cs_A,
                                dcomplex* buff_B, integer rs_B, integer cs_B,
                                dcomplex* buff_C, integer rs_C, integer cs_C,
                                dcomplex* buff_scale,
                                integer* info );
// end FLA_Sylv_hh.h

FLA_Error FLA_Sylv_internal( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nn( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_nh( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hn( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );
FLA_Error FLA_Sylv_hh( FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale, fla_sylv_t* cntl );

// end FLA_Sylv.h

// Miscellaneous
// begin FLA_Ttmm.h


// begin FLA_Ttmm_l.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Ttmm_l_blk_var1( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_l_blk_var2( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_l_blk_var3( FLA_Obj A, fla_ttmm_t* cntl );

FLA_Error FLA_Ttmm_l_unb_var1( FLA_Obj A );
FLA_Error FLA_Ttmm_l_unb_var2( FLA_Obj A );
FLA_Error FLA_Ttmm_l_unb_var3( FLA_Obj A );

FLA_Error FLA_Ttmm_l_opt_var1( FLA_Obj A );
FLA_Error FLA_Ttmm_l_ops_var1( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opd_var1( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opc_var1( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opz_var1( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Ttmm_l_opt_var2( FLA_Obj A );
FLA_Error FLA_Ttmm_l_ops_var2( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opd_var2( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opc_var2( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opz_var2( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Ttmm_l_opt_var3( FLA_Obj A );
FLA_Error FLA_Ttmm_l_ops_var3( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opd_var3( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opc_var3( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_l_opz_var3( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

// end FLA_Ttmm_l.h
// begin FLA_Ttmm_u.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Ttmm_u_blk_var1( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_u_blk_var2( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_u_blk_var3( FLA_Obj A, fla_ttmm_t* cntl );

FLA_Error FLA_Ttmm_u_unb_var1( FLA_Obj A );
FLA_Error FLA_Ttmm_u_unb_var2( FLA_Obj A );
FLA_Error FLA_Ttmm_u_unb_var3( FLA_Obj A );

FLA_Error FLA_Ttmm_u_opt_var1( FLA_Obj A );
FLA_Error FLA_Ttmm_u_ops_var1( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opd_var1( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opc_var1( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opz_var1( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Ttmm_u_opt_var2( FLA_Obj A );
FLA_Error FLA_Ttmm_u_ops_var2( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opd_var2( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opc_var2( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opz_var2( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

FLA_Error FLA_Ttmm_u_opt_var3( FLA_Obj A );
FLA_Error FLA_Ttmm_u_ops_var3( integer mn_A,
                               float*    A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opd_var3( integer mn_A,
                               double*   A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opc_var3( integer mn_A,
                               scomplex* A, integer rs_A, integer cs_A );
FLA_Error FLA_Ttmm_u_opz_var3( integer mn_A,
                               dcomplex* A, integer rs_A, integer cs_A );

// end FLA_Ttmm_u.h

FLA_Error FLA_Ttmm_internal( FLA_Uplo uplo, FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_l( FLA_Obj A, fla_ttmm_t* cntl );
FLA_Error FLA_Ttmm_u( FLA_Obj A, fla_ttmm_t* cntl );
// end FLA_Ttmm.h
// begin FLA_UDdate_UT.h


// begin FLA_UDdate_UT_vars.h


FLA_Error FLA_UDdate_UT_blk_var1( FLA_Obj R,
                                  FLA_Obj C,
                                  FLA_Obj D, FLA_Obj T, fla_uddateut_t* cntl );
FLA_Error FLA_UDdate_UT_blk_var2( FLA_Obj R,
                                  FLA_Obj C,
                                  FLA_Obj D, FLA_Obj T, fla_uddateut_t* cntl );

FLA_Error FLA_UDdate_UT_unb_var1( FLA_Obj R,
                                  FLA_Obj C,
                                  FLA_Obj D, FLA_Obj T );

FLA_Error FLA_UDdate_UT_opt_var1( FLA_Obj R,
                                  FLA_Obj C,
                                  FLA_Obj D, FLA_Obj T );
FLA_Error FLA_UDdate_UT_ops_var1( integer mn_RT,
                                  integer m_C,
                                  integer m_D,
                                  float* R, integer rs_R, integer cs_R,
                                  float* C, integer rs_C, integer cs_C,
                                  float* D, integer rs_D, integer cs_D,
                                  float* T, integer rs_T, integer cs_T );
FLA_Error FLA_UDdate_UT_opd_var1( integer mn_RT,
                                  integer m_C,
                                  integer m_D,
                                  double* R, integer rs_R, integer cs_R,
                                  double* C, integer rs_C, integer cs_C,
                                  double* D, integer rs_D, integer cs_D,
                                  double* T, integer rs_T, integer cs_T );
FLA_Error FLA_UDdate_UT_opc_var1( integer mn_RT,
                                  integer m_C,
                                  integer m_D,
                                  scomplex* R, integer rs_R, integer cs_R,
                                  scomplex* C, integer rs_C, integer cs_C,
                                  scomplex* D, integer rs_D, integer cs_D,
                                  scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_UDdate_UT_opz_var1( integer mn_RT,
                                  integer m_C,
                                  integer m_D,
                                  dcomplex* R, integer rs_R, integer cs_R,
                                  dcomplex* C, integer rs_C, integer cs_C,
                                  dcomplex* D, integer rs_D, integer cs_D,
                                  dcomplex* T, integer rs_T, integer cs_T );

// end FLA_UDdate_UT_vars.h

FLA_Error FLA_UDdate_UT( FLA_Obj R,
                         FLA_Obj C,
                         FLA_Obj D, FLA_Obj T );

FLA_Error FLA_UDdate_UT_internal( FLA_Obj R,
                                  FLA_Obj C,
                                  FLA_Obj D, FLA_Obj T, fla_uddateut_t* cntl );

FLA_Error FLA_UDdate_UT_create_T( FLA_Obj R, FLA_Obj* T );

FLA_Error FLA_UDdate_UT_update_rhs( FLA_Obj T, FLA_Obj bR,
                                    FLA_Obj C, FLA_Obj bC,
                                    FLA_Obj D, FLA_Obj bD );

FLA_Error FLA_UDdate_UT_solve( FLA_Obj R, FLA_Obj bR, FLA_Obj x );
// end FLA_UDdate_UT.h
// begin FLA_UDdate_UT_inc.h


FLA_Error FLASH_UDdate_UT_inc( FLA_Obj R,
                               FLA_Obj C,
                               FLA_Obj D, FLA_Obj T, FLA_Obj W );

FLA_Error FLA_UDdate_UT_inc_blk_var1( FLA_Obj R,
                                      FLA_Obj C,
                                      FLA_Obj D, FLA_Obj T, FLA_Obj W, fla_uddateutinc_t* cntl );

FLA_Error FLASH_UDdate_UT_inc_create_hier_matrices( FLA_Obj R_flat, FLA_Obj C_flat, FLA_Obj D_flat, fla_dim_t depth, fla_dim_t* b_flash, fla_dim_t b_alg, FLA_Obj* R, FLA_Obj* C, FLA_Obj* D, FLA_Obj* T, FLA_Obj* W );
fla_dim_t     FLASH_UDdate_UT_inc_determine_alg_blocksize( FLA_Obj R );

FLA_Error FLASH_UDdate_UT_inc_update_rhs( FLA_Obj T, FLA_Obj bR,
                                          FLA_Obj C, FLA_Obj bC,
                                          FLA_Obj D, FLA_Obj bD );
FLA_Error FLASH_UDdate_UT_inc_solve( FLA_Obj R, FLA_Obj bR, FLA_Obj x );
// end FLA_UDdate_UT_inc.h

// BLAS kernels
// begin fla_lapack_fblas_common.h




#ifdef FLA_ENABLE_AMD_OPT
integer fla_idamax(integer *n, doublereal *dx, integer *incx);
#endif
// end fla_lapack_fblas_common.h
// begin fla_lapack_fblas_kernels.h




#ifdef FLA_ENABLE_AMD_OPT
integer fla_idamax_small(integer *n, doublereal *dx, integer *incx);
#endif

// end fla_lapack_fblas_kernels.h

// Utility
// begin FLA_Accum_T_UT.h


// begin FLA_Accum_T_UT_fc.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Accum_T_UT_fc_unb_var1( FLA_Obj A, FLA_Obj t, FLA_Obj T );
FLA_Error FLA_Accum_T_UT_fc_blk_var2( FLA_Obj A, FLA_Obj t, FLA_Obj T );

FLA_Error FLA_Accum_T_UT_fc_opt_var1( FLA_Obj A, FLA_Obj t, FLA_Obj T );

FLA_Error FLA_Accum_T_UT_fc_ops_var1( integer m_A,
                                      integer n_AT,
                                      float* A, integer rs_A, integer cs_A,
                                      integer m_t, 
                                      float* t, integer inc_t,
                                      float* T, integer rs_T, integer cs_T );
FLA_Error FLA_Accum_T_UT_fc_opd_var1( integer m_A,
                                      integer n_AT,
                                      double* A, integer rs_A, integer cs_A,
                                      integer m_t, 
                                      double* t, integer inc_t,
                                      double* T, integer rs_T, integer cs_T );
FLA_Error FLA_Accum_T_UT_fc_opc_var1( integer m_A,
                                      integer n_AT,
                                      scomplex* A, integer rs_A, integer cs_A,
                                      integer m_t, 
                                      scomplex* t, integer inc_t,
                                      scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_Accum_T_UT_fc_opz_var1( integer m_A,
                                      integer n_AT,
                                      dcomplex* A, integer rs_A, integer cs_A,
                                      integer m_t, 
                                      dcomplex* t, integer inc_t,
                                      dcomplex* T, integer rs_T, integer cs_T );
// end FLA_Accum_T_UT_fc.h
// begin FLA_Accum_T_UT_fr.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Accum_T_UT_fr_unb_var1( FLA_Obj A, FLA_Obj t, FLA_Obj T );
FLA_Error FLA_Accum_T_UT_fr_blk_var2( FLA_Obj A, FLA_Obj t, FLA_Obj T );

FLA_Error FLA_Accum_T_UT_fr_opt_var1( FLA_Obj A, FLA_Obj t, FLA_Obj T );

FLA_Error FLA_Accum_T_UT_fr_ops_var1( integer m_A,
                                      integer n_A,
                                      float* A, integer rs_A, integer cs_A,
                                      integer m_t,
                                      float* t, integer inc_t,
                                      float* T, integer rs_T, integer cs_T );
FLA_Error FLA_Accum_T_UT_fr_opd_var1( integer m_A,
                                      integer n_A,
                                      double* A, integer rs_A, integer cs_A,
                                      integer m_t,
                                      double* t, integer inc_t,
                                      double* T, integer rs_T, integer cs_T );
FLA_Error FLA_Accum_T_UT_fr_opc_var1( integer m_A,
                                      integer n_A,
                                      scomplex* A, integer rs_A, integer cs_A,
                                      integer m_t,
                                      scomplex* t, integer inc_t,
                                      scomplex* T, integer rs_T, integer cs_T );
FLA_Error FLA_Accum_T_UT_fr_opz_var1( integer m_A,
                                      integer n_A,
                                      dcomplex* A, integer rs_A, integer cs_A,
                                      integer m_t,
                                      dcomplex* t, integer inc_t,
                                      dcomplex* T, integer rs_T, integer cs_T );
// end FLA_Accum_T_UT_fr.h

FLA_Error FLA_Accum_T_UT_internal( FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj tau, FLA_Obj T );
// end FLA_Accum_T_UT.h
// begin FLA_Apply_G.h


// begin FLA_Apply_G_lf.h


FLA_Error FLA_Apply_G_lf_opt_var1( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_lf_blk_var3( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
// end FLA_Apply_G_lf.h
// begin FLA_Apply_G_lb.h


FLA_Error FLA_Apply_G_lb_opt_var1( FLA_Obj c, FLA_Obj s, FLA_Obj A );
FLA_Error FLA_Apply_G_lb_ops_var1( integer       m_A,
                                   integer       n_A,
                                   float*    buff_c, integer inc_c,
                                   float*    buff_s, integer inc_s,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_lb_opd_var1( integer       m_A,
                                   integer       n_A,
                                   double*   buff_c, integer inc_c,
                                   double*   buff_s, integer inc_s,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_lb_opc_var1( integer       m_A,
                                   integer       n_A,
                                   float*    buff_c, integer inc_c,
                                   float*    buff_s, integer inc_s,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_lb_opz_var1( integer       m_A,
                                   integer       n_A,
                                   double*   buff_c, integer inc_c,
                                   double*   buff_s, integer inc_s,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

// end FLA_Apply_G_lb.h
// begin FLA_Apply_G_rf.h


// Variant 1

FLA_Error FLA_Apply_G_rf_opt_var1( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var1( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var1( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var1( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 2

FLA_Error FLA_Apply_G_rf_opt_var2( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var2( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var2( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var2( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 3

FLA_Error FLA_Apply_G_rf_opt_var3( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var3( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var3( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 4

FLA_Error FLA_Apply_G_rf_opt_var4( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var4( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var4( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var4( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 5

FLA_Error FLA_Apply_G_rf_opt_var5( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var5( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var5( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var5( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 6

FLA_Error FLA_Apply_G_rf_opt_var6( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var6( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var6( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var6( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 7

FLA_Error FLA_Apply_G_rf_opt_var7( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var7( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var7( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var7( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 8

FLA_Error FLA_Apply_G_rf_opt_var8( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var8( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var8( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var8( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

// Variant 9

FLA_Error FLA_Apply_G_rf_opt_var9( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ops_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opd_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opc_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_opz_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_asm_var9( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var9( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var9( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );







// Variant 3b

FLA_Error FLA_Apply_G_rf_asm_var3b( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var3b( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var3b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );


// Variant 5b

FLA_Error FLA_Apply_G_rf_asm_var5b( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var5b( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var5b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );


// Variant 6b

FLA_Error FLA_Apply_G_rf_asm_var6b( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var6b( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var6b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );


// Variant 8b

FLA_Error FLA_Apply_G_rf_asm_var8b( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var8b( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var8b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );

FLA_Error FLA_Apply_G_rf_bhs_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bhd_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bhc_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bhz_var3( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   FLA_Obj*  buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );


// Variant 9b

FLA_Error FLA_Apply_G_rf_asm_var9b( FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_rf_ass_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asd_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asc_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rf_asz_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   integer       iTL,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

FLA_Error FLA_Apply_G_rf_blk_var9b( FLA_Obj G, FLA_Obj A, fla_dim_t b_alg );
FLA_Error FLA_Apply_G_rf_bls_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   float*    buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_bld_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   double*   buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blc_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   scomplex* buff_G, integer rs_G, integer cs_G,
                                   scomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );
FLA_Error FLA_Apply_G_rf_blz_var9b( integer       k_G,
                                   integer       m_A,
                                   integer       n_A,
                                   integer       i_k,
                                   dcomplex* buff_G, integer rs_G, integer cs_G,
                                   dcomplex* buff_A, integer rs_A, integer cs_A,
                                   integer       b_alg );


// end FLA_Apply_G_rf.h
// begin FLA_Apply_G_rb.h


FLA_Error FLA_Apply_G_rb_opt_var1( FLA_Obj c, FLA_Obj s, FLA_Obj A );
FLA_Error FLA_Apply_G_rb_ops_var1( integer       m_A,
                                   integer       n_A,
                                   float*    buff_c, integer inc_c,
                                   float*    buff_s, integer inc_s,
                                   float*    buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rb_opd_var1( integer       m_A,
                                   integer       n_A,
                                   double*   buff_c, integer inc_c,
                                   double*   buff_s, integer inc_s,
                                   double*   buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rb_opc_var1( integer       m_A,
                                   integer       n_A,
                                   float*    buff_c, integer inc_c,
                                   float*    buff_s, integer inc_s,
                                   scomplex* buff_A, integer rs_A, integer cs_A );
FLA_Error FLA_Apply_G_rb_opz_var1( integer       m_A,
                                   integer       n_A,
                                   double*   buff_c, integer inc_c,
                                   double*   buff_s, integer inc_s,
                                   dcomplex* buff_A, integer rs_A, integer cs_A );

// end FLA_Apply_G_rb.h

FLA_Error FLA_Apply_G( FLA_Side side, FLA_Direct direct, FLA_Obj G, FLA_Obj A );
FLA_Error FLA_Apply_G_internal( FLA_Side side, FLA_Direct direct, FLA_Obj G, FLA_Obj A );

// begin FLA_Givens2.h


FLA_Error FLA_Givens2( FLA_Obj chi_1, FLA_Obj chi_2, FLA_Obj gamma, FLA_Obj sigma, FLA_Obj chi_1_new );
FLA_Error FLA_Givens2_ops( float*  chi_1,
                           float*  chi_2,
                           float*  gamma,
                           float*  sigma,
                           float*  chi_1_new );
FLA_Error FLA_Givens2_opd( double* chi_1,
                           double* chi_2,
                           double* gamma,
                           double* sigma,
                           double* chi_1_new );
#define MAC_Givens2_ops( chi_1, chi_2, gamma, sigma, chi_1_new ) \
{ \
	float  chi_1_orig = *(chi_1); \
	float  chi_2_orig = *(chi_2); \
	float  g, s; \
	float  norm_x; \
	float  nscl; \
\
  nscl = fabs( chi_1_orig ) + fabs( chi_2_orig ); \
  if ( nscl == 0.0F ) \
  { \
    g = 1.0F; \
    s = 0.0F; \
    norm_x = 0.0F; \
  } \
  else \
  { \
    norm_x = ( float ) nscl * sqrt( (chi_1_orig / nscl) * (chi_1_orig / nscl) + \
                                    (chi_2_orig / nscl) * (chi_2_orig / nscl) ); \
    g = chi_1_orig / norm_x; \
    s = chi_2_orig / norm_x; \
\
    if ( fabs( chi_1_orig ) > fabs( chi_2_orig ) && g < 0.0F) \
    { \
      g      = -g; \
      s      = -s; \
      norm_x = -norm_x; \
    } \
  } \
\
	*(gamma)     = g; \
	*(sigma)     = s; \
	*(chi_1_new) = norm_x; \
\
}

#define MAC_Givens2_opd( chi_1, chi_2, gamma, sigma, chi_1_new ) \
{ \
	double chi_1_orig = *(chi_1); \
	double chi_2_orig = *(chi_2); \
	double g, s; \
	double norm_x; \
	double nscl; \
\
  nscl = fabs( chi_1_orig ) + fabs( chi_2_orig ); \
  if ( nscl == 0.0 ) \
  { \
    g = 1.0; \
    s = 0.0; \
    norm_x = 0.0; \
  } \
  else \
  { \
    norm_x = ( double ) nscl * sqrt( (chi_1_orig / nscl) * (chi_1_orig / nscl) + \
                                     (chi_2_orig / nscl) * (chi_2_orig / nscl) ); \
    g = chi_1_orig / norm_x; \
    s = chi_2_orig / norm_x; \
\
    if ( fabs( chi_1_orig ) > fabs( chi_2_orig ) && g < 0.0 ) \
    { \
      g      = -g; \
      s      = -s; \
      norm_x = -norm_x; \
    } \
  } \
\
	*(gamma)     = g; \
	*(sigma)     = s; \
	*(chi_1_new) = norm_x; \
\
}

#define MAC_Givens2_slartgp slartgp_
#define MAC_Givens2_dlartgp dlartgp_

// end FLA_Givens2.h

// begin FLA_Apply_GTG.h


FLA_Error FLA_Apply_GTG( FLA_Obj gamma, FLA_Obj sigma, FLA_Obj delta1, FLA_Obj epsilon1, FLA_Obj delta2 );
FLA_Error FLA_Apply_GTG_ops( float*  gamma,
                             float*  sigma,
                             float*  delta1,
                             float*  epsilon1,
                             float*  delta2 );
FLA_Error FLA_Apply_GTG_opd( double* gamma,
                             double* sigma,
                             double* delta1,
                             double* epsilon1,
                             double* delta2 );

#define MAC_Apply_GTG_ops( gamma, sigma, delta1, epsilon, delta2 ) \
{ \
	float  g, s; \
	float  d1, e, d2; \
	float  g2, s2, tgse; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	d1 = *(delta1); \
	e  = *(epsilon); \
	d2 = *(delta2); \
\
	g2 = g * g; \
	s2 = s * s; \
	tgse = 2.0 * g * s * e; \
\
	*(delta1)  = g2 * d1 + tgse + s2 * d2; \
	*(delta2)  = s2 * d1 - tgse + g2 * d2; \
	*(epsilon) = g * s * (d2 - d1) + e * (g2 - s2); \
}

#define MAC_Apply_GTG_opd( gamma, sigma, delta1, epsilon, delta2 ) \
{ \
 \
	double g, s; \
	double d1, e, d2; \
	double g2, s2, tgse; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	d1 = *(delta1); \
	e  = *(epsilon); \
	d2 = *(delta2); \
\
	g2 = g * g; \
	s2 = s * s; \
	tgse = 2.0 * g * s * e; \
\
	*(delta1)  = g2 * d1 + tgse + s2 * d2; \
	*(delta2)  = s2 * d1 - tgse + g2 * d2; \
	*(epsilon) = g * s * (d2 - d1) + e * (g2 - s2); \
\
 \
}

// end FLA_Apply_GTG.h

// begin FLA_Apply_GT_2x2.h


#define MAC_Apply_GT_2x2_ops( gamma, sigma, epsilon1, delta2, beta, epsilon2 ) \
{ \
	float g, s; \
	float e1, d2, e2; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	e1 = *(epsilon1); \
	d2 = *(delta2); \
	e2 = *(epsilon2); \
\
	*(epsilon1)  =  g * e1 + s * d2; \
	*(delta2)    = -s * e1 + g * d2; \
\
	*(beta)      = s * e2; \
	*(epsilon2)  = g * e2; \
}

#define MAC_Apply_GT_2x2_opd( gamma, sigma, epsilon1, delta2, beta, epsilon2 ) \
{ \
	double g, s; \
	double e1, d2, e2; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	e1 = *(epsilon1); \
	d2 = *(delta2); \
	e2 = *(epsilon2); \
\
	*(epsilon1)  =  g * e1 + s * d2; \
	*(delta2)    = -s * e1 + g * d2; \
\
	*(beta)      = s * e2; \
	*(epsilon2)  = g * e2; \
}

#define MAC_Apply_GT_2x1_ops( gamma, sigma, epsilon1, delta2 ) \
{ \
	float g, s; \
	float e1, d2; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	e1 = *(epsilon1); \
	d2 = *(delta2); \
\
	*(epsilon1)  =  g * e1 + s * d2; \
	*(delta2)    = -s * e1 + g * d2; \
}

#define MAC_Apply_GT_2x1_opd( gamma, sigma, epsilon1, delta2 ) \
{ \
	double g, s; \
	double e1, d2; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	e1 = *(epsilon1); \
	d2 = *(delta2); \
\
	*(epsilon1)  =  g * e1 + s * d2; \
	*(delta2)    = -s * e1 + g * d2; \
}

// end FLA_Apply_GT_2x2.h
// begin FLA_Apply_G_2x2.h


#define MAC_Apply_G_2x2_ops( gamma, sigma, delta1, beta, epsilon1, delta2 ) \
{ \
	float g, s; \
	float d1, e1, d2; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	d1 = *(delta1); \
	e1 = *(epsilon1); \
	d2 = *(delta2); \
\
	*(delta1)    =  g * d1 + s * e1; \
	*(epsilon1)  = -s * d1 + g * e1; \
\
	*(beta)      = s * d2; \
	*(delta2)    = g * d2; \
}

#define MAC_Apply_G_2x2_opd( gamma, sigma, delta1, beta, epsilon1, delta2 ) \
{ \
	double g, s; \
	double d1, e1, d2; \
\
	g = *(gamma); \
	s = *(sigma); \
\
	d1 = *(delta1); \
	e1 = *(epsilon1); \
	d2 = *(delta2); \
\
	*(delta1)    =  g * d1 + s * e1; \
	*(epsilon1)  = -s * d1 + g * e1; \
\
	*(beta)      = s * d2; \
	*(delta2)    = g * d2; \
}

// end FLA_Apply_G_2x2.h
// begin FLA_Apply_G_1x2.h


#define MAC_Apply_G_1x2_ops( gamma, sigma, beta, epsilon ) \
{ \
	*(beta)    = *(epsilon) * *(sigma); \
	*(epsilon) = *(epsilon) * *(gamma); \
}

#define MAC_Apply_G_1x2_opd( gamma, sigma, beta, epsilon ) \
{ \
	*(beta)    = *(epsilon) * *(sigma); \
	*(epsilon) = *(epsilon) * *(gamma); \
}

// end FLA_Apply_G_1x2.h

// begin FLA_Apply_G_mx2_opt.h


#define MAC_Apply_G_mx2_ops( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{ \
	float             ga     = *gamma12; \
	float             si     = *sigma12; \
	float*  restrict  alpha1 = a1; \
	float*  restrict  alpha2 = a2; \
	float             temp1; \
	float             temp2; \
	integer               i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 =  ga * temp1 + si * temp2; \
		*alpha2 = -si * temp1 + ga * temp2; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
	} \
}

#define MAC_Apply_G_mx2_opc( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{ \
	float              ga12   = *gamma12; \
	float              si12   = *sigma12; \
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex           temp1; \
	scomplex           temp2; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real =  ga12 * temp1.real + si12 * temp2.real; \
		alpha1->imag =  ga12 * temp1.imag + si12 * temp2.imag; \
\
		alpha2->real = -si12 * temp1.real + ga12 * temp2.real; \
		alpha2->imag = -si12 * temp1.imag + ga12 * temp2.imag; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
	} \
}

#define MAC_Apply_G_mx2_opd( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{ \
	double            ga     = *gamma12; \
	double            si     = *sigma12; \
	double* restrict  alpha1 = a1; \
	double* restrict  alpha2 = a2; \
	double            temp1; \
	double            temp2; \
	integer               i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 =  ga * temp1 + si * temp2; \
		*alpha2 = -si * temp1 + ga * temp2; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
	} \
}

#define MAC_Apply_G_mx2_opz( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{\
	double             ga12   = *gamma12; \
	double             si12   = *sigma12; \
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex           temp1; \
	dcomplex           temp2; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real =  ga12 * temp1.real + si12 * temp2.real; \
		alpha1->imag =  ga12 * temp1.imag + si12 * temp2.imag; \
\
		alpha2->real = -si12 * temp1.real + ga12 * temp2.real; \
		alpha2->imag = -si12 * temp1.imag + ga12 * temp2.imag; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
	} \
}

// end FLA_Apply_G_mx2_opt.h
// begin FLA_Apply_G_mx2_asm.h



#if FLA_VECTOR_INTRINSIC_TYPE == FLA_NO_INTRINSICS

#define MAC_Apply_G_mx2_ass MAC_Apply_G_mx2_ops
#define MAC_Apply_G_mx2_asd MAC_Apply_G_mx2_opd
#define MAC_Apply_G_mx2_asc MAC_Apply_G_mx2_opc
#define MAC_Apply_G_mx2_asz MAC_Apply_G_mx2_opz

#elif FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#define MAC_Apply_G_mx2_ass( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{\
	integer              n_iter32  = m_A / ( 4 * 8 ); \
	integer              n_left32  = m_A % ( 4 * 8 ); \
	integer              n_iter4   = n_left32 / ( 4 * 1 ); \
	integer              n_left    = n_left32 % ( 4 * 1 ); \
	integer              i; \
\
	const integer        step_a1 = inc_a1 * 4; \
	const integer        step_a2 = inc_a2 * 4; \
\
	float*  restrict alpha1 = a1; \
	float*  restrict alpha2 = a2; \
\
	v4sf_t           a1v, a2v; \
	v4sf_t           g12v, s12v; \
	v4sf_t           t1v; \
\
	g12v.v = _mm_load1_ps( gamma12 ); \
	s12v.v = _mm_load1_ps( sigma12 ); \
\
	for ( i = 0; i < n_iter32; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_iter4; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
		float ga12 = *gamma12; \
		float si12 = *sigma12; \
		float temp1; \
		float temp2; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		alpha1 += 1; \
		alpha2 += 1; \
	} \
}

#define MAC_Apply_G_mx2_asd( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{\
	integer              n_iter16  = m_A / ( 2 * 8 ); \
	integer              n_left16  = m_A % ( 2 * 8 ); \
	integer              n_iter2   = n_left16 / ( 2 * 1 ); \
	integer              n_left    = n_left16 % ( 2 * 1 ); \
	integer              i; \
\
	const integer        step_a1 = inc_a1 * 2; \
	const integer        step_a2 = inc_a2 * 2; \
\
	double* restrict alpha1 = a1; \
	double* restrict alpha2 = a2; \
\
	v2df_t           a1v, a2v; \
	v2df_t           g12v, s12v; \
	v2df_t           t1v; \
\
	g12v.v = _mm_loaddup_pd( gamma12 ); \
	s12v.v = _mm_loaddup_pd( sigma12 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		double ga12 = *gamma12; \
		double si12 = *sigma12; \
		double temp1; \
		double temp2; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
	} \
}

#define MAC_Apply_G_mx2_asc( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{\
	integer                n_iter16  = m_A / ( 2 * 8 ); \
	integer                n_left16  = m_A % ( 2 * 8 ); \
	integer                n_iter2   = n_left16 / ( 2 * 1 ); \
	integer                n_left    = n_left16 % ( 2 * 1 ); \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 2; \
	const integer          step_a2 = inc_a2 * 2; \
\
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
\
	v4sf_t             a1v, a2v; \
	v4sf_t             g12v, s12v; \
	v4sf_t             t1v; \
\
	g12v.v = _mm_load1_ps( gamma12 ); \
	s12v.v = _mm_load1_ps( sigma12 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		float    ga12 = *gamma12; \
		float    si12 = *sigma12; \
		scomplex temp1; \
		scomplex temp2; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real = temp1.real * ga12 + temp2.real * si12; \
		alpha2->real = temp2.real * ga12 - temp1.real * si12; \
\
		alpha1->imag = temp1.imag * ga12 + temp2.imag * si12; \
		alpha2->imag = temp2.imag * ga12 - temp1.imag * si12; \
	} \
}

#define MAC_Apply_G_mx2_asz( m_A, \
                             gamma12, \
                             sigma12, \
                             a1, inc_a1, \
                             a2, inc_a2 ) \
{\
	integer                n_iter  = m_A / 8; \
	integer                n_left  = m_A % 8; \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 1; \
	const integer          step_a2 = inc_a2 * 1; \
\
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
\
	v2df_t             a1v, a2v; \
	v2df_t             g12v, s12v; \
	v2df_t             t1v; \
\
	g12v.v = _mm_loaddup_pd( gamma12 ); \
	s12v.v = _mm_loaddup_pd( sigma12 ); \
\
	for ( i = 0; i < n_iter; ++i ) \
	{ \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
\
		alpha1 += step_a1; \
		alpha2 += step_a2; \
	} \
}

#endif
// end FLA_Apply_G_mx2_asm.h

// begin FLA_Apply_G_mx3_opt.h


#define MAC_Apply_G_mx3_ops( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{ \
	float              ga12   = *gamma12; \
	float              si12   = *sigma12; \
	float              ga23   = *gamma23; \
	float              si23   = *sigma23; \
	float*    restrict alpha1 = a1; \
	float*    restrict alpha2 = a2; \
	float*    restrict alpha3 = a3; \
	float              temp1; \
	float              temp2; \
	float              temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

#define MAC_Apply_G_mx3_opd( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{ \
	double             ga12   = *gamma12; \
	double             si12   = *sigma12; \
	double             ga23   = *gamma23; \
	double             si23   = *sigma23; \
	double*   restrict alpha1 = a1; \
	double*   restrict alpha2 = a2; \
	double*   restrict alpha3 = a3; \
	double             temp1; \
	double             temp2; \
	double             temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

#define MAC_Apply_G_mx3_opc( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{ \
	float              ga12   = *gamma12; \
	float              si12   = *sigma12; \
	float              ga23   = *gamma23; \
	float              si23   = *sigma23; \
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex* restrict alpha3 = a3; \
	scomplex           temp1; \
	scomplex           temp2; \
	scomplex           temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real =  ga12 * temp1.real + si12 * temp2.real; \
		alpha1->imag =  ga12 * temp1.imag + si12 * temp2.imag; \
\
		alpha2->real = -si12 * temp1.real + ga12 * temp2.real; \
		alpha2->imag = -si12 * temp1.imag + ga12 * temp2.imag; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real =  ga23 * temp2.real + si23 * temp3.real; \
		alpha2->imag =  ga23 * temp2.imag + si23 * temp3.imag; \
\
		alpha3->real = -si23 * temp2.real + ga23 * temp3.real; \
		alpha3->imag = -si23 * temp2.imag + ga23 * temp3.imag; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

#define MAC_Apply_G_mx3_opz( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{ \
	double             ga12   = *gamma12; \
	double             si12   = *sigma12; \
	double             ga23   = *gamma23; \
	double             si23   = *sigma23; \
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex* restrict alpha3 = a3; \
	dcomplex           temp1; \
	dcomplex           temp2; \
	dcomplex           temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real =  ga12 * temp1.real + si12 * temp2.real; \
		alpha1->imag =  ga12 * temp1.imag + si12 * temp2.imag; \
\
		alpha2->real = -si12 * temp1.real + ga12 * temp2.real; \
		alpha2->imag = -si12 * temp1.imag + ga12 * temp2.imag; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real =  ga23 * temp2.real + si23 * temp3.real; \
		alpha2->imag =  ga23 * temp2.imag + si23 * temp3.imag; \
\
		alpha3->real = -si23 * temp2.real + ga23 * temp3.real; \
		alpha3->imag = -si23 * temp2.imag + ga23 * temp3.imag; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

// end FLA_Apply_G_mx3_opt.h
// begin FLA_Apply_G_mx3b_opt.h


#define MAC_Apply_G_mx3b_ops( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{ \
	float              ga12   = *gamma12; \
	float              si12   = *sigma12; \
	float              ga23   = *gamma23; \
	float              si23   = *sigma23; \
	float*    restrict alpha1 = a1; \
	float*    restrict alpha2 = a2; \
	float*    restrict alpha3 = a3; \
	float              temp1; \
	float              temp2; \
	float              temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

#define MAC_Apply_G_mx3b_opc( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{ \
	float              ga12   = *gamma12; \
	float              si12   = *sigma12; \
	float              ga23   = *gamma23; \
	float              si23   = *sigma23; \
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex* restrict alpha3 = a3; \
	scomplex           temp1; \
	scomplex           temp2; \
	scomplex           temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real =  ga23 * temp2.real + si23 * temp3.real; \
		alpha2->imag =  ga23 * temp2.imag + si23 * temp3.imag; \
\
		alpha3->real = -si23 * temp2.real + ga23 * temp3.real; \
		alpha3->imag = -si23 * temp2.imag + ga23 * temp3.imag; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real =  ga12 * temp1.real + si12 * temp2.real; \
		alpha1->imag =  ga12 * temp1.imag + si12 * temp2.imag; \
\
		alpha2->real = -si12 * temp1.real + ga12 * temp2.real; \
		alpha2->imag = -si12 * temp1.imag + ga12 * temp2.imag; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

#define MAC_Apply_G_mx3b_opd( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{ \
	double             ga12   = *gamma12; \
	double             si12   = *sigma12; \
	double             ga23   = *gamma23; \
	double             si23   = *sigma23; \
	double*   restrict alpha1 = a1; \
	double*   restrict alpha2 = a2; \
	double*   restrict alpha3 = a3; \
	double             temp1; \
	double             temp2; \
	double             temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

#define MAC_Apply_G_mx3b_opz( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{ \
	double             ga12   = *gamma12; \
	double             si12   = *sigma12; \
	double             ga23   = *gamma23; \
	double             si23   = *sigma23; \
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex* restrict alpha3 = a3; \
	dcomplex           temp1; \
	dcomplex           temp2; \
	dcomplex           temp3; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real =  ga23 * temp2.real + si23 * temp3.real; \
		alpha2->imag =  ga23 * temp2.imag + si23 * temp3.imag; \
\
		alpha3->real = -si23 * temp2.real + ga23 * temp3.real; \
		alpha3->imag = -si23 * temp2.imag + ga23 * temp3.imag; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real =  ga12 * temp1.real + si12 * temp2.real; \
		alpha1->imag =  ga12 * temp1.imag + si12 * temp2.imag; \
\
		alpha2->real = -si12 * temp1.real + ga12 * temp2.real; \
		alpha2->imag = -si12 * temp1.imag + ga12 * temp2.imag; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
	} \
}

// end FLA_Apply_G_mx3b_opt.h
// begin FLA_Apply_G_mx3_asm.h



#if FLA_VECTOR_INTRINSIC_TYPE == FLA_NO_INTRINSICS

#define MAC_Apply_G_mx3_ass MAC_Apply_G_mx3_ops
#define MAC_Apply_G_mx3_asd MAC_Apply_G_mx3_opd
#define MAC_Apply_G_mx3_asc MAC_Apply_G_mx3_opc
#define MAC_Apply_G_mx3_asz MAC_Apply_G_mx3_opz

#elif FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#define MAC_Apply_G_mx3_ass( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{\
	integer              n_iter32 = m_A / ( 4 * 8 ); \
	integer              n_left32 = m_A % ( 4 * 8 ); \
	integer              n_iter4  = n_left32 / ( 4 * 1 ); \
	integer              n_left   = n_left32 % ( 4 * 1 ); \
	integer              i; \
\
	const integer        step_a1 = inc_a1 * 4; \
	const integer        step_a2 = inc_a1 * 4; \
	const integer        step_a3 = inc_a1 * 4; \
\
	float* restrict alpha1 = a1; \
	float* restrict alpha2 = a2; \
	float* restrict alpha3 = a3; \
\
	v4sf_t    a1v, a2v, a3v; \
	v4sf_t    g12v, s12v; \
	v4sf_t    g23v, s23v; \
	v4sf_t    t1v, t2v; \
\
	g12v.v = _mm_load1_ps( gamma12 ); \
	s12v.v = _mm_load1_ps( sigma12 ); \
	g23v.v = _mm_load1_ps( gamma23 ); \
	s23v.v = _mm_load1_ps( sigma23 ); \
\
	for ( i = 0; i < n_iter32; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	for ( i = 0; i < n_iter4; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
		float ga12 = *gamma12; \
		float si12 = *sigma12; \
		float ga23 = *gamma23; \
		float si23 = *sigma23; \
		float temp1; \
		float temp2; \
		float temp3; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		alpha1 += 1; \
		alpha2 += 1; \
		alpha3 += 1; \
	} \
}

#define MAC_Apply_G_mx3_asd( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{\
	integer              n_iter16 = m_A / ( 2 * 8 ); \
	integer              n_left16 = m_A % ( 2 * 8 ); \
	integer              n_iter2  = n_left16 / ( 2 * 1 ); \
	integer              n_left   = n_left16 % ( 2 * 1 ); \
	integer              i; \
\
	const integer        step_a1 = inc_a1 * 2; \
	const integer        step_a2 = inc_a1 * 2; \
	const integer        step_a3 = inc_a1 * 2; \
\
	double* restrict alpha1 = a1; \
	double* restrict alpha2 = a2; \
	double* restrict alpha3 = a3; \
\
	v2df_t           a1v, a2v, a3v; \
	v2df_t           g12v, s12v; \
	v2df_t           g23v, s23v; \
	v2df_t           t1v, t2v; \
\
	g12v.v = _mm_loaddup_pd( gamma12 ); \
	s12v.v = _mm_loaddup_pd( sigma12 ); \
	g23v.v = _mm_loaddup_pd( gamma23 ); \
	s23v.v = _mm_loaddup_pd( sigma23 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		double ga12 = *gamma12; \
		double si12 = *sigma12; \
		double ga23 = *gamma23; \
		double si23 = *sigma23; \
		double temp1; \
		double temp2; \
		double temp3; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
	} \
}

#define MAC_Apply_G_mx3_asc( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{ \
	integer                n_iter16 = m_A / ( 2 * 8 ); \
	integer                n_left16 = m_A % ( 2 * 8 ); \
	integer                n_iter2  = n_left16 / ( 2 * 1 ); \
	integer                n_left   = n_left16 % ( 2 * 1 ); \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 2; \
	const integer          step_a2 = inc_a1 * 2; \
	const integer          step_a3 = inc_a1 * 2; \
\
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex* restrict alpha3 = a3; \
\
	v4sf_t             a1v, a2v, a3v; \
	v4sf_t             g12v, s12v; \
	v4sf_t             g23v, s23v; \
	v4sf_t             t1v, t2v; \
\
	g12v.v = _mm_load1_ps( gamma12 ); \
	s12v.v = _mm_load1_ps( sigma12 ); \
	g23v.v = _mm_load1_ps( gamma23 ); \
	s23v.v = _mm_load1_ps( sigma23 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		float ga12 = *gamma12; \
		float si12 = *sigma12; \
		float ga23 = *gamma23; \
		float si23 = *sigma23; \
		scomplex temp1; \
		scomplex temp2; \
		scomplex temp3; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real = temp1.real * ga12 + temp2.real * si12; \
		alpha2->real = temp2.real * ga12 - temp1.real * si12; \
\
		alpha1->imag = temp1.imag * ga12 + temp2.imag * si12; \
		alpha2->imag = temp2.imag * ga12 - temp1.imag * si12; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23 + temp3.real * si23; \
		alpha3->real = temp3.real * ga23 - temp2.real * si23; \
\
		alpha2->imag = temp2.imag * ga23 + temp3.imag * si23; \
		alpha3->imag = temp3.imag * ga23 - temp2.imag * si23; \
	} \
}

#define MAC_Apply_G_mx3_asz( m_A, \
                             gamma12, \
                             sigma12, \
                             gamma23, \
                             sigma23, \
                             a1, inc_a1, \
                             a2, inc_a2, \
                             a3, inc_a3 ) \
{\
	integer                n_iter = m_A / 8; \
	integer                n_left = m_A % 8; \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 1; \
	const integer          step_a2 = inc_a1 * 1; \
	const integer          step_a3 = inc_a1 * 1; \
\
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex* restrict alpha3 = a3; \
\
	v2df_t             a1v, a2v, a3v; \
	v2df_t             g12v, s12v; \
	v2df_t             g23v, s23v; \
	v2df_t             t1v, t2v; \
\
	g12v.v = _mm_loaddup_pd( gamma12 ); \
	s12v.v = _mm_loaddup_pd( sigma12 ); \
	g23v.v = _mm_loaddup_pd( gamma23 ); \
	s23v.v = _mm_loaddup_pd( sigma23 ); \
\
	for ( i = 0; i < n_iter; ++i ) \
	{ \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha2 += step_a2; \
		alpha3 += step_a3; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
}

#endif
// end FLA_Apply_G_mx3_asm.h
// begin FLA_Apply_G_mx3b_asm.h



#if FLA_VECTOR_INTRINSIC_TYPE == FLA_NO_INTRINSICS

#define MAC_Apply_G_mx3b_ass MAC_Apply_G_mx3b_ops
#define MAC_Apply_G_mx3b_asd MAC_Apply_G_mx3b_opd
#define MAC_Apply_G_mx3b_asc MAC_Apply_G_mx3b_opc
#define MAC_Apply_G_mx3b_asz MAC_Apply_G_mx3b_opz

#elif FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#define MAC_Apply_G_mx3b_ass( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{\
	integer              n_iter32 = m_A / ( 4 * 8 ); \
	integer              n_left32 = m_A % ( 4 * 8 ); \
	integer              n_iter4  = n_left32 / ( 4 * 1 ); \
	integer              n_left   = n_left32 % ( 4 * 1 ); \
	integer              i; \
\
	const integer        step_a1 = inc_a1 * 4; \
	const integer        step_a2 = inc_a2 * 4; \
	const integer        step_a3 = inc_a3 * 4; \
\
	float*  restrict alpha1 = a1; \
	float*  restrict alpha2 = a2; \
	float*  restrict alpha3 = a3; \
\
	v4sf_t           a1v, a2v, a3v; \
	v4sf_t           g12v, s12v; \
	v4sf_t           g23v, s23v; \
	v4sf_t           t1v, t2v; \
\
	g12v.v = _mm_load1_ps( gamma12 ); \
	s12v.v = _mm_load1_ps( sigma12 ); \
	g23v.v = _mm_load1_ps( gamma23 ); \
	s23v.v = _mm_load1_ps( sigma23 ); \
\
	for ( i = 0; i < n_iter32; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_iter4; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
		float ga12 = *gamma12; \
		float si12 = *sigma12; \
		float ga23 = *gamma23; \
		float si23 = *sigma23; \
		float temp1; \
		float temp2; \
		float temp3; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
\
		alpha1 += 1; \
		alpha2 += 1; \
		alpha3 += 1; \
	} \
}

#define MAC_Apply_G_mx3b_asd( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{\
	integer              n_iter16 = m_A / ( 2 * 8 ); \
	integer              n_left16 = m_A % ( 2 * 8 ); \
	integer              n_iter2  = n_left16 / ( 2 * 1 ); \
	integer              n_left   = n_left16 % ( 2 * 1 ); \
	integer              i; \
\
	const integer        step_a1 = inc_a1 * 2; \
	const integer        step_a2 = inc_a2 * 2; \
	const integer        step_a3 = inc_a3 * 2; \
\
	double* restrict alpha1 = a1; \
	double* restrict alpha2 = a2; \
	double* restrict alpha3 = a3; \
\
	v2df_t           a1v, a2v, a3v; \
	v2df_t           g12v, s12v; \
	v2df_t           g23v, s23v; \
	v2df_t           t1v, t2v; \
\
	g12v.v = _mm_loaddup_pd( gamma12 ); \
	s12v.v = _mm_loaddup_pd( sigma12 ); \
	g23v.v = _mm_loaddup_pd( gamma23 ); \
	s23v.v = _mm_loaddup_pd( sigma23 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		double ga12 = *gamma12; \
		double si12 = *sigma12; \
		double ga23 = *gamma23; \
		double si23 = *sigma23; \
		double temp1; \
		double temp2; \
		double temp3; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23 + temp3 * si23; \
		*alpha3 = temp3 * ga23 - temp2 * si23; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12 + temp2 * si12; \
		*alpha2 = temp2 * ga12 - temp1 * si12; \
	} \
}

#define MAC_Apply_G_mx3b_asc( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{\
	integer                n_iter16 = m_A / ( 2 * 8 ); \
	integer                n_left16 = m_A % ( 2 * 8 ); \
	integer                n_iter2  = n_left16 / ( 2 * 1 ); \
	integer                n_left   = n_left16 % ( 2 * 1 ); \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 2; \
	const integer          step_a2 = inc_a2 * 2; \
	const integer          step_a3 = inc_a3 * 2; \
\
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex* restrict alpha3 = a3; \
\
	v4sf_t             a1v, a2v, a3v; \
	v4sf_t             g12v, s12v; \
	v4sf_t             g23v, s23v; \
	v4sf_t             t1v, t2v; \
\
	g12v.v = _mm_load1_ps( gamma12 ); \
	s12v.v = _mm_load1_ps( sigma12 ); \
	g23v.v = _mm_load1_ps( gamma23 ); \
	s23v.v = _mm_load1_ps( sigma23 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		float ga12 = *gamma12; \
		float si12 = *sigma12; \
		float ga23 = *gamma23; \
		float si23 = *sigma23; \
		scomplex temp1; \
		scomplex temp2; \
		scomplex temp3; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real = temp1.real * ga12 + temp2.real * si12; \
		alpha2->real = temp2.real * ga12 - temp1.real * si12; \
\
		alpha1->imag = temp1.imag * ga12 + temp2.imag * si12; \
		alpha2->imag = temp2.imag * ga12 - temp1.imag * si12; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23 + temp3.real * si23; \
		alpha3->real = temp3.real * ga23 - temp2.real * si23; \
\
		alpha2->imag = temp2.imag * ga23 + temp3.imag * si23; \
		alpha3->imag = temp3.imag * ga23 - temp2.imag * si23; \
	} \
}

#define MAC_Apply_G_mx3b_asz( m_A, \
                              gamma12, \
                              sigma12, \
                              gamma23, \
                              sigma23, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3 ) \
{\
	integer                n_iter = m_A / 8; \
	integer                n_left = m_A % 8; \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 1; \
	const integer          step_a2 = inc_a2 * 1; \
	const integer          step_a3 = inc_a3 * 1; \
\
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex* restrict alpha3 = a3; \
\
	v2df_t             a1v, a2v, a3v; \
	v2df_t             g12v, s12v; \
	v2df_t             g23v, s23v; \
	v2df_t             t1v, t2v; \
\
	g12v.v = _mm_loaddup_pd( gamma12 ); \
	s12v.v = _mm_loaddup_pd( sigma12 ); \
	g23v.v = _mm_loaddup_pd( gamma23 ); \
	s23v.v = _mm_loaddup_pd( sigma23 ); \
\
	for ( i = 0; i < n_iter; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23v.v + a3v.v * s23v.v; \
		a3v.v = a3v.v * g23v.v - t2v.v * s23v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12v.v + a2v.v * s12v.v; \
		a2v.v = a2v.v * g12v.v - t1v.v * s12v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
	} \
}

#endif
// end FLA_Apply_G_mx3b_asm.h

// begin FLA_Apply_G_mx4s_opt.h


#define MAC_Apply_G_mx4s_ops( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{ \
	float              ga23_k1 = *gamma23_k1; \
	float              si23_k1 = *sigma23_k1; \
	float              ga34_k1 = *gamma34_k1; \
	float              si34_k1 = *sigma34_k1; \
	float              ga12_k2 = *gamma12_k2; \
	float              si12_k2 = *sigma12_k2; \
	float              ga23_k2 = *gamma23_k2; \
	float              si23_k2 = *sigma23_k2; \
	float*    restrict alpha1 = a1; \
	float*    restrict alpha2 = a2; \
	float*    restrict alpha3 = a3; \
	float*    restrict alpha4 = a4; \
	float              temp1; \
	float              temp2; \
	float              temp3; \
	float              temp4; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k1 + temp3 * si23_k1; \
		*alpha3 = temp3 * ga23_k1 - temp2 * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		*alpha3 = temp3 * ga34_k1 + temp4 * si34_k1; \
		*alpha4 = temp4 * ga34_k1 - temp3 * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12_k2 + temp2 * si12_k2; \
		*alpha2 = temp2 * ga12_k2 - temp1 * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k2 + temp3 * si23_k2; \
		*alpha3 = temp3 * ga23_k2 - temp2 * si23_k2; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
		alpha4 += inc_a4; \
	} \
}

#define MAC_Apply_G_mx4s_opc( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{ \
	float              ga23_k1 = *gamma23_k1; \
	float              si23_k1 = *sigma23_k1; \
	float              ga34_k1 = *gamma34_k1; \
	float              si34_k1 = *sigma34_k1; \
	float              ga12_k2 = *gamma12_k2; \
	float              si12_k2 = *sigma12_k2; \
	float              ga23_k2 = *gamma23_k2; \
	float              si23_k2 = *sigma23_k2; \
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex* restrict alpha3 = a3; \
	scomplex* restrict alpha4 = a4; \
	scomplex           temp1; \
	scomplex           temp2; \
	scomplex           temp3; \
	scomplex           temp4; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23_k1 + temp3.real * si23_k1; \
		alpha2->imag = temp2.imag * ga23_k1 + temp3.imag * si23_k1; \
\
		alpha3->real = temp3.real * ga23_k1 - temp2.real * si23_k1; \
		alpha3->imag = temp3.imag * ga23_k1 - temp2.imag * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		alpha3->real = temp3.real * ga34_k1 + temp4.real * si34_k1; \
		alpha3->imag = temp3.imag * ga34_k1 + temp4.imag * si34_k1; \
\
		alpha4->real = temp4.real * ga34_k1 - temp3.real * si34_k1; \
		alpha4->imag = temp4.imag * ga34_k1 - temp3.imag * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real = temp1.real * ga12_k2 + temp2.real * si12_k2; \
		alpha1->imag = temp1.imag * ga12_k2 + temp2.imag * si12_k2; \
\
		alpha2->real = temp2.real * ga12_k2 - temp1.real * si12_k2; \
		alpha2->imag = temp2.imag * ga12_k2 - temp1.imag * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23_k2 + temp3.real * si23_k2; \
		alpha2->imag = temp2.imag * ga23_k2 + temp3.imag * si23_k2; \
\
		alpha3->real = temp3.real * ga23_k2 - temp2.real * si23_k2; \
		alpha3->imag = temp3.imag * ga23_k2 - temp2.imag * si23_k2; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
		alpha4 += inc_a4; \
	} \
}

#define MAC_Apply_G_mx4s_opd( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{ \
	double             ga23_k1 = *gamma23_k1; \
	double             si23_k1 = *sigma23_k1; \
	double             ga34_k1 = *gamma34_k1; \
	double             si34_k1 = *sigma34_k1; \
	double             ga12_k2 = *gamma12_k2; \
	double             si12_k2 = *sigma12_k2; \
	double             ga23_k2 = *gamma23_k2; \
	double             si23_k2 = *sigma23_k2; \
	double*   restrict alpha1 = a1; \
	double*   restrict alpha2 = a2; \
	double*   restrict alpha3 = a3; \
	double*   restrict alpha4 = a4; \
	double             temp1; \
	double             temp2; \
	double             temp3; \
	double             temp4; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k1 + temp3 * si23_k1; \
		*alpha3 = temp3 * ga23_k1 - temp2 * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		*alpha3 = temp3 * ga34_k1 + temp4 * si34_k1; \
		*alpha4 = temp4 * ga34_k1 - temp3 * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12_k2 + temp2 * si12_k2; \
		*alpha2 = temp2 * ga12_k2 - temp1 * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k2 + temp3 * si23_k2; \
		*alpha3 = temp3 * ga23_k2 - temp2 * si23_k2; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
		alpha4 += inc_a4; \
	} \
}

#define MAC_Apply_G_mx4s_opz( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{ \
	double             ga23_k1 = *gamma23_k1; \
	double             si23_k1 = *sigma23_k1; \
	double             ga34_k1 = *gamma34_k1; \
	double             si34_k1 = *sigma34_k1; \
	double             ga12_k2 = *gamma12_k2; \
	double             si12_k2 = *sigma12_k2; \
	double             ga23_k2 = *gamma23_k2; \
	double             si23_k2 = *sigma23_k2; \
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex* restrict alpha3 = a3; \
	dcomplex* restrict alpha4 = a4; \
	dcomplex           temp1; \
	dcomplex           temp2; \
	dcomplex           temp3; \
	dcomplex           temp4; \
	integer                i; \
\
	for ( i = 0; i < m_A; ++i ) \
	{ \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23_k1 + temp3.real * si23_k1; \
		alpha2->imag = temp2.imag * ga23_k1 + temp3.imag * si23_k1; \
\
		alpha3->real = temp3.real * ga23_k1 - temp2.real * si23_k1; \
		alpha3->imag = temp3.imag * ga23_k1 - temp2.imag * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		alpha3->real = temp3.real * ga34_k1 + temp4.real * si34_k1; \
		alpha3->imag = temp3.imag * ga34_k1 + temp4.imag * si34_k1; \
\
		alpha4->real = temp4.real * ga34_k1 - temp3.real * si34_k1; \
		alpha4->imag = temp4.imag * ga34_k1 - temp3.imag * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real = temp1.real * ga12_k2 + temp2.real * si12_k2; \
		alpha1->imag = temp1.imag * ga12_k2 + temp2.imag * si12_k2; \
\
		alpha2->real = temp2.real * ga12_k2 - temp1.real * si12_k2; \
		alpha2->imag = temp2.imag * ga12_k2 - temp1.imag * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23_k2 + temp3.real * si23_k2; \
		alpha2->imag = temp2.imag * ga23_k2 + temp3.imag * si23_k2; \
\
		alpha3->real = temp3.real * ga23_k2 - temp2.real * si23_k2; \
		alpha3->imag = temp3.imag * ga23_k2 - temp2.imag * si23_k2; \
\
		alpha1 += inc_a1; \
		alpha2 += inc_a2; \
		alpha3 += inc_a3; \
		alpha4 += inc_a4; \
	} \
}

// end FLA_Apply_G_mx4s_opt.h
// begin FLA_Apply_G_mx4s_asm.h



#if FLA_VECTOR_INTRINSIC_TYPE == FLA_NO_INTRINSICS

#define MAC_Apply_G_mx4s_ass MAC_Apply_G_mx4s_ops
#define MAC_Apply_G_mx4s_asd MAC_Apply_G_mx4s_opd
#define MAC_Apply_G_mx4s_asc MAC_Apply_G_mx4s_opc
#define MAC_Apply_G_mx4s_asz MAC_Apply_G_mx4s_opz

#elif FLA_VECTOR_INTRINSIC_TYPE == FLA_SSE_INTRINSICS

#define MAC_Apply_G_mx4s_ass( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{\
	integer                n_iter32 = m_A / ( 4 * 8 ); \
	integer                n_left32 = m_A % ( 4 * 8 ); \
	integer                n_iter4  = n_left32 / ( 4 * 1 ); \
	integer                n_left   = n_left32 % ( 4 * 1 ); \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 4; \
	const integer          step_a2 = inc_a2 * 4; \
	const integer          step_a3 = inc_a3 * 4; \
	const integer          step_a4 = inc_a4 * 4; \
\
	float*    restrict alpha1 = a1; \
	float*    restrict alpha2 = a2; \
	float*    restrict alpha3 = a3; \
	float*    restrict alpha4 = a4; \
\
	v4sf_t             a1v, a2v, a3v, a4v; \
	v4sf_t             b1v, b2v, b3v, b4v; \
	v4sf_t             g23_k1v, s23_k1v; \
	v4sf_t             g34_k1v, s34_k1v; \
	v4sf_t             g12_k2v, s12_k2v; \
	v4sf_t             g23_k2v, s23_k2v; \
	v4sf_t             t1v, t2v, t3v; \
\
	g23_k1v.v = _mm_load1_ps( gamma23_k1 ); \
	s23_k1v.v = _mm_load1_ps( sigma23_k1 ); \
	g34_k1v.v = _mm_load1_ps( gamma34_k1 ); \
	s34_k1v.v = _mm_load1_ps( sigma34_k1 ); \
	g12_k2v.v = _mm_load1_ps( gamma12_k2 ); \
	s12_k2v.v = _mm_load1_ps( sigma12_k2 ); \
	g23_k2v.v = _mm_load1_ps( gamma23_k2 ); \
	s23_k2v.v = _mm_load1_ps( sigma23_k2 ); \
\
	for ( i = 0; i < n_iter32; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_ps( ( float* )(alpha2 + step_a3) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
\
 \
\
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
\
 \
	} \
\
	for ( i = 0; i < n_iter4; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
		float              ga23_k1 = *gamma23_k1; \
		float              si23_k1 = *sigma23_k1; \
		float              ga34_k1 = *gamma34_k1; \
		float              si34_k1 = *sigma34_k1; \
		float              ga12_k2 = *gamma12_k2; \
		float              si12_k2 = *sigma12_k2; \
		float              ga23_k2 = *gamma23_k2; \
		float              si23_k2 = *sigma23_k2; \
		float              temp1; \
		float              temp2; \
		float              temp3; \
		float              temp4; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k1 + temp3 * si23_k1; \
		*alpha3 = temp3 * ga23_k1 - temp2 * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		*alpha3 = temp3 * ga34_k1 + temp4 * si34_k1; \
		*alpha4 = temp4 * ga34_k1 - temp3 * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12_k2 + temp2 * si12_k2; \
		*alpha2 = temp2 * ga12_k2 - temp1 * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k2 + temp3 * si23_k2; \
		*alpha3 = temp3 * ga23_k2 - temp2 * si23_k2; \
\
		alpha1 += 1; \
		alpha2 += 1; \
		alpha3 += 1; \
		alpha4 += 1; \
	} \
}

#define MAC_Apply_G_mx4s_asd( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{\
	integer                n_iter16 = m_A / ( 2 * 8 ); \
	integer                n_left16 = m_A % ( 2 * 8 ); \
	integer                n_iter2  = n_left16 / ( 2 * 1 ); \
	integer                n_left   = n_left16 % ( 2 * 1 ); \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 2; \
	const integer          step_a2 = inc_a2 * 2; \
	const integer          step_a3 = inc_a3 * 2; \
	const integer          step_a4 = inc_a4 * 2; \
\
	double*   restrict alpha1 = a1; \
	double*   restrict alpha2 = a2; \
	double*   restrict alpha3 = a3; \
	double*   restrict alpha4 = a4; \
\
	v2df_t             a1v, a2v, a3v, a4v; \
	v2df_t             b1v, b2v, b3v, b4v; \
	v2df_t             g23_k1v, s23_k1v; \
	v2df_t             g34_k1v, s34_k1v; \
	v2df_t             g12_k2v, s12_k2v; \
	v2df_t             g23_k2v, s23_k2v; \
	v2df_t             t1v, t2v, t3v; \
\
	g23_k1v.v = _mm_loaddup_pd( gamma23_k1 ); \
	s23_k1v.v = _mm_loaddup_pd( sigma23_k1 ); \
	g34_k1v.v = _mm_loaddup_pd( gamma34_k1 ); \
	s34_k1v.v = _mm_loaddup_pd( sigma34_k1 ); \
	g12_k2v.v = _mm_loaddup_pd( gamma12_k2 ); \
	s12_k2v.v = _mm_loaddup_pd( sigma12_k2 ); \
	g23_k2v.v = _mm_loaddup_pd( gamma23_k2 ); \
	s23_k2v.v = _mm_loaddup_pd( sigma23_k2 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_pd( ( double* )(alpha2 + step_a3) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
\
 \
\
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
\
 \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		double             ga23_k1 = *gamma23_k1; \
		double             si23_k1 = *sigma23_k1; \
		double             ga34_k1 = *gamma34_k1; \
		double             si34_k1 = *sigma34_k1; \
		double             ga12_k2 = *gamma12_k2; \
		double             si12_k2 = *sigma12_k2; \
		double             ga23_k2 = *gamma23_k2; \
		double             si23_k2 = *sigma23_k2; \
		double             temp1; \
		double             temp2; \
		double             temp3; \
		double             temp4; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k1 + temp3 * si23_k1; \
		*alpha3 = temp3 * ga23_k1 - temp2 * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		*alpha3 = temp3 * ga34_k1 + temp4 * si34_k1; \
		*alpha4 = temp4 * ga34_k1 - temp3 * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		*alpha1 = temp1 * ga12_k2 + temp2 * si12_k2; \
		*alpha2 = temp2 * ga12_k2 - temp1 * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		*alpha2 = temp2 * ga23_k2 + temp3 * si23_k2; \
		*alpha3 = temp3 * ga23_k2 - temp2 * si23_k2; \
\
	} \
}

#define MAC_Apply_G_mx4s_asc( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{\
	integer                n_iter16 = m_A / ( 2 * 8 ); \
	integer                n_left16 = m_A % ( 2 * 8 ); \
	integer                n_iter2  = n_left16 / ( 2 * 1 ); \
	integer                n_left   = n_left16 % ( 2 * 1 ); \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 2; \
	const integer          step_a2 = inc_a2 * 2; \
	const integer          step_a3 = inc_a3 * 2; \
	const integer          step_a4 = inc_a4 * 2; \
\
	scomplex* restrict alpha1 = a1; \
	scomplex* restrict alpha2 = a2; \
	scomplex* restrict alpha3 = a3; \
	scomplex* restrict alpha4 = a4; \
\
	v4sf_t             a1v, a2v, a3v, a4v; \
	v4sf_t             b1v, b2v, b3v, b4v; \
	v4sf_t             g23_k1v, s23_k1v; \
	v4sf_t             g34_k1v, s34_k1v; \
	v4sf_t             g12_k2v, s12_k2v; \
	v4sf_t             g23_k2v, s23_k2v; \
	v4sf_t             t1v, t2v, t3v; \
\
	g23_k1v.v = _mm_load1_ps( gamma23_k1 ); \
	s23_k1v.v = _mm_load1_ps( sigma23_k1 ); \
	g34_k1v.v = _mm_load1_ps( gamma34_k1 ); \
	s34_k1v.v = _mm_load1_ps( sigma34_k1 ); \
	g12_k2v.v = _mm_load1_ps( gamma12_k2 ); \
	s12_k2v.v = _mm_load1_ps( sigma12_k2 ); \
	g23_k2v.v = _mm_load1_ps( gamma23_k2 ); \
	s23_k2v.v = _mm_load1_ps( sigma23_k2 ); \
\
	for ( i = 0; i < n_iter16; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_ps( ( float* )(alpha2 + step_a3) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
\
 \
\
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_ps( ( float* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_ps( ( float* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
\
		_mm_store_ps( ( float* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
\
 \
	} \
\
	for ( i = 0; i < n_iter2; ++i ) \
	{ \
\
		a2v.v = _mm_load_ps( ( float* )alpha2 ); \
		a3v.v = _mm_load_ps( ( float* )alpha3 ); \
		a4v.v = _mm_load_ps( ( float* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_ps( ( float* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_ps( ( float* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_ps( ( float* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_ps( ( float* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_ps( ( float* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
\
	if ( n_left == 1 ) \
	{ \
		float             ga23_k1 = *gamma23_k1; \
		float             si23_k1 = *sigma23_k1; \
		float             ga34_k1 = *gamma34_k1; \
		float             si34_k1 = *sigma34_k1; \
		float             ga12_k2 = *gamma12_k2; \
		float             si12_k2 = *sigma12_k2; \
		float             ga23_k2 = *gamma23_k2; \
		float             si23_k2 = *sigma23_k2; \
		scomplex          temp1; \
		scomplex          temp2; \
		scomplex          temp3; \
		scomplex          temp4; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23_k1 + temp3.real * si23_k1; \
		alpha3->real = temp3.real * ga23_k1 - temp2.real * si23_k1; \
\
		alpha2->imag = temp2.imag * ga23_k1 + temp3.imag * si23_k1; \
		alpha3->imag = temp3.imag * ga23_k1 - temp2.imag * si23_k1; \
\
		temp3 = *alpha3; \
		temp4 = *alpha4; \
\
		alpha3->real = temp3.real * ga34_k1 + temp4.real * si34_k1; \
		alpha4->real = temp4.real * ga34_k1 - temp3.real * si34_k1; \
\
		alpha3->imag = temp3.imag * ga34_k1 + temp4.imag * si34_k1; \
		alpha4->imag = temp4.imag * ga34_k1 - temp3.imag * si34_k1; \
\
		temp1 = *alpha1; \
		temp2 = *alpha2; \
\
		alpha1->real = temp1.real * ga12_k2 + temp2.real * si12_k2; \
		alpha2->real = temp2.real * ga12_k2 - temp1.real * si12_k2; \
\
		alpha1->imag = temp1.imag * ga12_k2 + temp2.imag * si12_k2; \
		alpha2->imag = temp2.imag * ga12_k2 - temp1.imag * si12_k2; \
\
		temp2 = *alpha2; \
		temp3 = *alpha3; \
\
		alpha2->real = temp2.real * ga23_k2 + temp3.real * si23_k2; \
		alpha3->real = temp3.real * ga23_k2 - temp2.real * si23_k2; \
\
		alpha2->imag = temp2.imag * ga23_k2 + temp3.imag * si23_k2; \
		alpha3->imag = temp3.imag * ga23_k2 - temp2.imag * si23_k2; \
\
	} \
}

#define MAC_Apply_G_mx4s_asz( m_A, \
                              gamma23_k1, \
                              sigma23_k1, \
                              gamma34_k1, \
                              sigma34_k1, \
                              gamma12_k2, \
                              sigma12_k2, \
                              gamma23_k2, \
                              sigma23_k2, \
                              a1, inc_a1, \
                              a2, inc_a2, \
                              a3, inc_a3, \
                              a4, inc_a4 ) \
{\
	integer                n_iter = m_A / 8; \
	integer                n_left = m_A % 8; \
	integer                i; \
\
	const integer          step_a1 = inc_a1 * 1; \
	const integer          step_a2 = inc_a2 * 1; \
	const integer          step_a3 = inc_a3 * 1; \
	const integer          step_a4 = inc_a4 * 1; \
\
	dcomplex* restrict alpha1 = a1; \
	dcomplex* restrict alpha2 = a2; \
	dcomplex* restrict alpha3 = a3; \
	dcomplex* restrict alpha4 = a4; \
\
	v2df_t             a1v, a2v, a3v, a4v; \
	v2df_t             b1v, b2v, b3v, b4v; \
	v2df_t             g23_k1v, s23_k1v; \
	v2df_t             g34_k1v, s34_k1v; \
	v2df_t             g12_k2v, s12_k2v; \
	v2df_t             g23_k2v, s23_k2v; \
	v2df_t             t1v, t2v, t3v; \
\
	g23_k1v.v = _mm_loaddup_pd( gamma23_k1 ); \
	s23_k1v.v = _mm_loaddup_pd( sigma23_k1 ); \
	g34_k1v.v = _mm_loaddup_pd( gamma34_k1 ); \
	s34_k1v.v = _mm_loaddup_pd( sigma34_k1 ); \
	g12_k2v.v = _mm_loaddup_pd( gamma12_k2 ); \
	s12_k2v.v = _mm_loaddup_pd( sigma12_k2 ); \
	g23_k2v.v = _mm_loaddup_pd( gamma23_k2 ); \
	s23_k2v.v = _mm_loaddup_pd( sigma23_k2 ); \
\
	for ( i = 0; i < n_iter; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_pd( ( double* )(alpha2 + step_a3) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
		a2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
		a3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
		b2v.v = _mm_load_pd( ( double* )(alpha2 + step_a2) ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		b3v.v = _mm_load_pd( ( double* )(alpha3 + step_a3) ); \
\
 \
\
		b4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k1v.v + b3v.v * s23_k1v.v; \
		b3v.v = b3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
		b1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = b3v.v; \
		b3v.v = t3v.v * g34_k1v.v + b4v.v * s34_k1v.v; \
		b4v.v = b4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, b4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = b1v.v; \
		b1v.v = t1v.v * g12_k2v.v + b2v.v * s12_k2v.v; \
		b2v.v = b2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, b1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = b2v.v; \
		b2v.v = t2v.v * g23_k2v.v + b3v.v * s23_k2v.v; \
		b3v.v = b3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, b2v.v ); \
		alpha2 += step_a2; \
\
		_mm_store_pd( ( double* )alpha3, b3v.v ); \
		alpha3 += step_a3; \
\
 \
	} \
\
	for ( i = 0; i < n_left; ++i ) \
	{ \
\
		a2v.v = _mm_load_pd( ( double* )alpha2 ); \
		a3v.v = _mm_load_pd( ( double* )alpha3 ); \
		a4v.v = _mm_load_pd( ( double* )alpha4 ); \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k1v.v + a3v.v * s23_k1v.v; \
		a3v.v = a3v.v * g23_k1v.v - t2v.v * s23_k1v.v; \
\
		a1v.v = _mm_load_pd( ( double* )alpha1 ); \
\
		t3v.v = a3v.v; \
		a3v.v = t3v.v * g34_k1v.v + a4v.v * s34_k1v.v; \
		a4v.v = a4v.v * g34_k1v.v - t3v.v * s34_k1v.v; \
\
		_mm_store_pd( ( double* )alpha4, a4v.v ); \
		alpha4 += step_a4; \
\
		t1v.v = a1v.v; \
		a1v.v = t1v.v * g12_k2v.v + a2v.v * s12_k2v.v; \
		a2v.v = a2v.v * g12_k2v.v - t1v.v * s12_k2v.v; \
\
		_mm_store_pd( ( double* )alpha1, a1v.v ); \
		alpha1 += step_a1; \
\
		t2v.v = a2v.v; \
		a2v.v = t2v.v * g23_k2v.v + a3v.v * s23_k2v.v; \
		a3v.v = a3v.v * g23_k2v.v - t2v.v * s23_k2v.v; \
\
		_mm_store_pd( ( double* )alpha2, a2v.v ); \
		alpha2 += step_a2; \
		_mm_store_pd( ( double* )alpha3, a3v.v ); \
		alpha3 += step_a3; \
	} \
}

#endif
// end FLA_Apply_G_mx4s_asm.h

// end FLA_Apply_G.h
// begin FLA_Apply_H2_UT.h


// begin FLA_Apply_H2_UT_l.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_H2_UT_l_unb_var1( FLA_Obj tau, FLA_Obj u2, FLA_Obj a1t,
                                                               FLA_Obj A2 );

FLA_Error FLA_Apply_H2_UT_l_opt_var1( FLA_Obj tau, FLA_Obj u2, FLA_Obj a1t,
                                                               FLA_Obj A2 );

FLA_Error FLA_Apply_H2_UT_l_ops_var1( integer m_u2_A2,
                                      integer n_a1t,
                                      float* tau,
                                      float* u2, integer inc_u2,
                                      float* a1t, integer inc_a1t,
                                      float* A2, integer rs_A2, integer cs_A2 );

FLA_Error FLA_Apply_H2_UT_l_opd_var1( integer m_u2_A2,
                                      integer n_a1t,
                                      double* tau,
                                      double* u2, integer inc_u2,
                                      double* a1t, integer inc_a1t,
                                      double* A2, integer rs_A2, integer cs_A2 );

FLA_Error FLA_Apply_H2_UT_l_opc_var1( integer m_u2_A2,
                                      integer n_a1t,
                                      scomplex* tau,
                                      scomplex* u2, integer inc_u2,
                                      scomplex* a1t, integer inc_a1t,
                                      scomplex* A2, integer rs_A2, integer cs_A2 );

FLA_Error FLA_Apply_H2_UT_l_opz_var1( integer m_u2_A2,
                                      integer n_a1t,
                                      dcomplex* tau,
                                      dcomplex* u2, integer inc_u2,
                                      dcomplex* a1t, integer inc_a1t,
                                      dcomplex* A2, integer rs_A2, integer cs_A2 );

// end FLA_Apply_H2_UT_l.h
// begin FLA_Apply_H2_UT_r.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_H2_UT_r_unb_var1( FLA_Obj tau, FLA_Obj u2h,
                                      FLA_Obj a1, FLA_Obj A2 );

FLA_Error FLA_Apply_H2_UT_r_opt_var1( FLA_Obj tau, FLA_Obj u2h,
                                      FLA_Obj a1, FLA_Obj A2 );

FLA_Error FLA_Apply_H2_UT_r_ops_var1( integer n_u2h_A2,
                                      integer m_a1,
                                      float* tau,
                                      float* u2h, integer inc_u2h,
                                      float* a1, integer inc_a1,
                                      float* A2, integer rs_A2, integer cs_A2 );

FLA_Error FLA_Apply_H2_UT_r_opd_var1( integer n_u2h_A2,
                                      integer m_a1,
                                      double* tau,
                                      double* u2h, integer inc_u2h,
                                      double* a1, integer inc_a1,
                                      double* A2, integer rs_A2, integer cs_A2 );

FLA_Error FLA_Apply_H2_UT_r_opc_var1( integer n_u2h_A2,
                                      integer m_a1,
                                      scomplex* tau,
                                      scomplex* u2h, integer inc_u2h,
                                      scomplex* a1, integer inc_a1,
                                      scomplex* A2, integer rs_A2, integer cs_A2 );

FLA_Error FLA_Apply_H2_UT_r_opz_var1( integer n_u2h_A2,
                                      integer m_a1,
                                      dcomplex* tau,
                                      dcomplex* u2h, integer inc_u2h,
                                      dcomplex* a1, integer inc_a1,
                                      dcomplex* A2, integer rs_A2, integer cs_A2 );

// end FLA_Apply_H2_UT_r.h

FLA_Error FLA_Apply_H2_UT_internal( FLA_Side side, FLA_Obj tau, FLA_Obj u2, FLA_Obj a1, FLA_Obj A2 );

// end FLA_Apply_H2_UT.h
// begin FLA_Apply_HUD_UT.h


// begin FLA_Apply_HUD_UT_l.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_HUD_UT_l_unb_var1( FLA_Obj tau, FLA_Obj w12t,
                                                    FLA_Obj r12t,
                                       FLA_Obj u1,  FLA_Obj C2,
                                       FLA_Obj v1,  FLA_Obj D2 );

FLA_Error FLA_Apply_HUD_UT_l_opt_var1( FLA_Obj tau, FLA_Obj w12t,
                                                    FLA_Obj r12t,
                                       FLA_Obj u1,  FLA_Obj C2,
                                       FLA_Obj v1,  FLA_Obj D2 );

FLA_Error FLA_Apply_HUD_UT_l_ops_var1( integer m_u1_C2,
                                       integer m_v1_D2,
                                       integer n_r12t,
                                       float* tau,
                                       float* w12t, integer inc_w12t,
                                       float* r12t, integer inc_r12t,
                                       float* u1, integer inc_u1,
                                       float* C2, integer rs_C2, integer cs_C2,
                                       float* v1, integer inc_v1,
                                       float* D2, integer rs_D2, integer cs_D2 );

FLA_Error FLA_Apply_HUD_UT_l_opd_var1( integer m_u1_C2,
                                       integer m_v1_D2,
                                       integer n_r12t,
                                       double* tau,
                                       double* w12t, integer inc_w12t,
                                       double* r12t, integer inc_r12t,
                                       double* u1, integer inc_u1,
                                       double* C2, integer rs_C2, integer cs_C2,
                                       double* v1, integer inc_v1,
                                       double* D2, integer rs_D2, integer cs_D2 );

FLA_Error FLA_Apply_HUD_UT_l_opc_var1( integer m_u1_C2,
                                       integer m_v1_D2,
                                       integer n_r12t,
                                       scomplex* tau,
                                       scomplex* w12t, integer inc_w12t,
                                       scomplex* r12t, integer inc_r12t,
                                       scomplex* u1, integer inc_u1,
                                       scomplex* C2, integer rs_C2, integer cs_C2,
                                       scomplex* v1, integer inc_v1,
                                       scomplex* D2, integer rs_D2, integer cs_D2 );

FLA_Error FLA_Apply_HUD_UT_l_opz_var1( integer m_u1_C2,
                                       integer m_v1_D2,
                                       integer n_r12t,
                                       dcomplex* tau,
                                       dcomplex* w12t, integer inc_w12t,
                                       dcomplex* r12t, integer inc_r12t,
                                       dcomplex* u1, integer inc_u1,
                                       dcomplex* C2, integer rs_C2, integer cs_C2,
                                       dcomplex* v1, integer inc_v1,
                                       dcomplex* D2, integer rs_D2, integer cs_D2 );

// end FLA_Apply_HUD_UT_l.h
//#include "FLA_Apply_HUD_UT_r.h"

FLA_Error FLA_Apply_HUD_UT_internal( FLA_Side side,
                                     FLA_Obj tau, FLA_Obj w12t,
                                                  FLA_Obj r12t,
                                     FLA_Obj u1,  FLA_Obj C2,
                                     FLA_Obj v1,  FLA_Obj D2 );

// end FLA_Apply_HUD_UT.h
// begin FLA_Apply_Q_UT.h


// begin FLA_Apply_Q_UT_lnfc.h


FLA_Error FLA_Apply_Q_UT_lnfc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lnfc.h
// begin FLA_Apply_Q_UT_lnfr.h


FLA_Error FLA_Apply_Q_UT_lnfr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lnfr.h
// begin FLA_Apply_Q_UT_lnbc.h


FLA_Error FLA_Apply_Q_UT_lnbc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lnbc.h
// begin FLA_Apply_Q_UT_lnbr.h


FLA_Error FLA_Apply_Q_UT_lnbr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lnbr.h
// begin FLA_Apply_Q_UT_lhfc.h


FLA_Error FLA_Apply_Q_UT_lhfc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lhfc.h
// begin FLA_Apply_Q_UT_lhfr.h


FLA_Error FLA_Apply_Q_UT_lhfr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lhfr.h
// begin FLA_Apply_Q_UT_lhbc.h


FLA_Error FLA_Apply_Q_UT_lhbc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lhbc.h
// begin FLA_Apply_Q_UT_lhbr.h


FLA_Error FLA_Apply_Q_UT_lhbr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_lhbr.h

// begin FLA_Apply_Q_UT_rhbc.h


FLA_Error FLA_Apply_Q_UT_rhbc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rhbc.h
// begin FLA_Apply_Q_UT_rhbr.h


FLA_Error FLA_Apply_Q_UT_rhbr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rhbr.h
// begin FLA_Apply_Q_UT_rhfc.h


FLA_Error FLA_Apply_Q_UT_rhfc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rhfc.h
// begin FLA_Apply_Q_UT_rhfr.h


FLA_Error FLA_Apply_Q_UT_rhfr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rhfr.h
// begin FLA_Apply_Q_UT_rnbc.h


FLA_Error FLA_Apply_Q_UT_rnbc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rnbc.h
// begin FLA_Apply_Q_UT_rnbr.h


FLA_Error FLA_Apply_Q_UT_rnbr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rnbr.h
// begin FLA_Apply_Q_UT_rnfc.h


FLA_Error FLA_Apply_Q_UT_rnfc_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfc_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfc_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rnfc.h
// begin FLA_Apply_Q_UT_rnfr.h


FLA_Error FLA_Apply_Q_UT_rnfr_blk_var1( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfr_blk_var2( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfr_blk_var3( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

// end FLA_Apply_Q_UT_rnfr.h

FLA_Error FLA_Apply_Q_UT_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

FLA_Error FLA_Apply_Q_UT_lnfc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnfr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lnbr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhfr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_lhbr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

FLA_Error FLA_Apply_Q_UT_rhbc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhbr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rhfr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnbr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfc( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );
FLA_Error FLA_Apply_Q_UT_rnfr( FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B, fla_apqut_t* cntl );

FLA_Error FLA_Apply_Q_UT_create_workspace( FLA_Obj T, FLA_Obj B, FLA_Obj* W );
FLA_Error FLA_Apply_Q_UT_create_workspace_side( FLA_Side side, FLA_Obj T, FLA_Obj B, FLA_Obj* W );

FLA_Error FLASH_Apply_Q_UT( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B );
FLA_Error FLASH_Apply_Q_UT_create_workspace( FLA_Obj TW, FLA_Obj B, FLA_Obj* W );

// end FLA_Apply_Q_UT.h
// begin FLA_Apply_Q2_UT.h


// begin FLA_Apply_Q2_UT_lhfc.h


FLA_Error FLA_Apply_Q2_UT_lhfc_blk_var1( FLA_Obj D, FLA_Obj T, FLA_Obj W1, FLA_Obj C, 
                                                                           FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_lhfc_blk_var2( FLA_Obj D, FLA_Obj T, FLA_Obj W1, FLA_Obj C, 
                                                                           FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_lhfc_blk_var3( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, 
                                                                          FLA_Obj E, fla_apq2ut_t* cntl );

// end FLA_Apply_Q2_UT_lhfc.h
// begin FLA_Apply_Q2_UT_lnfc.h


FLA_Error FLA_Apply_Q2_UT_lnfc_blk_var1( FLA_Obj D, FLA_Obj T, FLA_Obj W1, FLA_Obj C, 
                                                                           FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_lnfc_blk_var2( FLA_Obj D, FLA_Obj T, FLA_Obj W1, FLA_Obj C, 
                                                                           FLA_Obj E, fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_lnfc_blk_var3( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, 
                                                                          FLA_Obj E, fla_apq2ut_t* cntl );

// end FLA_Apply_Q2_UT_lnfc.h

FLA_Error FLASH_Apply_Q2_UT( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                             FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C,
                                                              FLA_Obj E );

FLA_Error FLA_Apply_Q2_UT_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                    FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C,
                                                                     FLA_Obj E,
                                    fla_apq2ut_t* cntl );

FLA_Error FLA_Apply_Q2_UT_lhfc( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C,
                                                                 FLA_Obj E,
                                fla_apq2ut_t* cntl );
FLA_Error FLA_Apply_Q2_UT_lnfc( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C,
                                                                 FLA_Obj E,
                                fla_apq2ut_t* cntl );
// end FLA_Apply_Q2_UT.h
// begin FLA_Apply_CAQ2_UT.h


// begin FLA_Apply_CAQ2_UT_lhfc.h


FLA_Error FLA_Apply_CAQ2_UT_lhfc_blk_var1( FLA_Obj D, FLA_Obj T, FLA_Obj W1, FLA_Obj C, 
                                                                             FLA_Obj E, fla_apcaq2ut_t* cntl );
FLA_Error FLA_Apply_CAQ2_UT_lhfc_blk_var2( FLA_Obj D, FLA_Obj T, FLA_Obj W1, FLA_Obj C, 
                                                                             FLA_Obj E, fla_apcaq2ut_t* cntl );
FLA_Error FLA_Apply_CAQ2_UT_lhfc_blk_var3( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, 
                                                                            FLA_Obj E, fla_apcaq2ut_t* cntl );

// end FLA_Apply_CAQ2_UT_lhfc.h

FLA_Error FLA_Apply_CAQ2_UT_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                      FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C,
                                                                       FLA_Obj E,
                                      fla_apcaq2ut_t* cntl );

FLA_Error FLA_Apply_CAQ2_UT_lhfc( FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C,
                                                                   FLA_Obj E,
                                  fla_apcaq2ut_t* cntl );
// end FLA_Apply_CAQ2_UT.h
// begin FLA_Apply_QUD_UT.h


// begin FLA_Apply_QUD_UT_lhfc.h


FLA_Error FLA_Apply_QUD_UT_lhfc_blk_var1( FLA_Obj T, FLA_Obj W,
                                                     FLA_Obj R,
                                          FLA_Obj U, FLA_Obj C,
                                          FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );

FLA_Error FLA_Apply_QUD_UT_lhfc_blk_var2( FLA_Obj T, FLA_Obj W,
                                                     FLA_Obj R,
                                          FLA_Obj U, FLA_Obj C,
                                          FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );

FLA_Error FLA_Apply_QUD_UT_lhfc_blk_var3( FLA_Obj T, FLA_Obj W,
                                                     FLA_Obj R,
                                          FLA_Obj U, FLA_Obj C,
                                          FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );

// end FLA_Apply_QUD_UT_lhfc.h

FLA_Error FLA_Apply_QUD_UT( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                            FLA_Obj T, FLA_Obj W,
                                       FLA_Obj R,
                            FLA_Obj U, FLA_Obj C,
                            FLA_Obj V, FLA_Obj D );

FLA_Error FLA_Apply_QUD_UT_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                     FLA_Obj T, FLA_Obj W,
                                                FLA_Obj R,
                                     FLA_Obj U, FLA_Obj C,
                                     FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );

FLA_Error FLA_Apply_QUD_UT_lhfc( FLA_Obj T, FLA_Obj W,
                                            FLA_Obj R,
                                 FLA_Obj U, FLA_Obj C,
                                 FLA_Obj V, FLA_Obj D, fla_apqudut_t* cntl );

FLA_Error FLA_Apply_QUD_UT_create_workspace( FLA_Obj T, FLA_Obj R, FLA_Obj* W );

// end FLA_Apply_QUD_UT.h
// begin FLA_Apply_Q_UT_inc.h


// begin FLA_Apply_Q_UT_inc_lhfc.h


FLA_Error FLA_Apply_Q_UT_inc_lhfc_blk_var1( FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B, fla_apqutinc_t* cntl );

// end FLA_Apply_Q_UT_inc_lhfc.h
// begin FLA_Apply_Q_UT_inc_lnfc.h


FLA_Error FLA_Apply_Q_UT_inc_lnfc_blk_var1( FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B, fla_apqutinc_t* cntl );

// end FLA_Apply_Q_UT_inc_lnfc.h

FLA_Error FLASH_Apply_Q_UT_inc( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B );

FLA_Error FLASH_Apply_Q_UT_inc_create_workspace( FLA_Obj TW, FLA_Obj B, FLA_Obj* W );

FLA_Error FLA_Apply_Q_UT_inc_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                       FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B,
                                       fla_apqutinc_t* cntl );

FLA_Error FLA_Apply_Q_UT_inc_lhfc( FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B,
                                   fla_apqutinc_t* cntl );
FLA_Error FLA_Apply_Q_UT_inc_lnfc( FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B,
                                   fla_apqutinc_t* cntl );

// end FLA_Apply_Q_UT_inc.h
// begin FLA_Apply_CAQ_UT_inc.h


// begin FLA_Apply_CAQ_UT_inc_lhfc.h


FLA_Error FLA_Apply_CAQ_UT_inc_lhfc_blk_var1( FLA_Obj R, FLA_Obj TW, FLA_Obj W1, FLA_Obj B, fla_apcaqutinc_t* cntl );

// end FLA_Apply_CAQ_UT_inc_lhfc.h

FLA_Error FLASH_Apply_CAQ_UT_inc( fla_dim_t p,
                                  FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                  FLA_Obj A, FLA_Obj ATW,
                                  FLA_Obj R, FLA_Obj RTW, FLA_Obj W, FLA_Obj B );

FLA_Error FLA_Apply_CAQ_UT_inc_apply_panels( fla_dim_t nb_part, FLA_Obj A, FLA_Obj ATW, FLA_Obj W, FLA_Obj B );

FLA_Error FLASH_Apply_CAQ_UT_inc_create_workspace( fla_dim_t p, FLA_Obj TW, FLA_Obj B, FLA_Obj* W );

FLA_Error FLA_Apply_CAQ_UT_inc_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                         FLA_Obj R, FLA_Obj TW, FLA_Obj W1, FLA_Obj B,
                                         fla_apcaqutinc_t* cntl );

FLA_Error FLA_Apply_CAQ_UT_inc_lhfc( FLA_Obj R, FLA_Obj TW, FLA_Obj W1, FLA_Obj B,
                                     fla_apcaqutinc_t* cntl );

// end FLA_Apply_CAQ_UT_inc.h
// begin FLA_Apply_QUD_UT_inc.h


// begin FLA_Apply_QUD_UT_inc_lhfc.h


FLA_Error FLA_Apply_QUD_UT_inc_lhfc_blk_var1( FLA_Obj T, FLA_Obj W,
                                                         FLA_Obj B,
                                              FLA_Obj U, FLA_Obj C,
                                              FLA_Obj V, FLA_Obj D, fla_apqudutinc_t* cntl );
// end FLA_Apply_QUD_UT_inc_lhfc.h

FLA_Error FLASH_Apply_QUD_UT_inc( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                  FLA_Obj T, FLA_Obj W,
                                             FLA_Obj R,
                                  FLA_Obj U, FLA_Obj C,
                                  FLA_Obj V, FLA_Obj D );

FLA_Error FLA_Apply_QUD_UT_inc_internal( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev,
                                         FLA_Obj T, FLA_Obj W,
                                                    FLA_Obj R,
                                         FLA_Obj U, FLA_Obj C,
                                         FLA_Obj V, FLA_Obj D, fla_apqudutinc_t* cntl );

FLA_Error FLA_Apply_QUD_UT_inc_lhfc( FLA_Obj T, FLA_Obj W,
                                                FLA_Obj R,
                                     FLA_Obj U, FLA_Obj C,
                                     FLA_Obj V, FLA_Obj D, fla_apqudutinc_t* cntl );

FLA_Error FLASH_Apply_QUD_UT_inc_create_workspace( FLA_Obj T, FLA_Obj R, FLA_Obj* W );

// end FLA_Apply_QUD_UT_inc.h
// begin FLA_Apply_pivots.h


// begin FLA_Apply_pivots_ln.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_pivots_ln_blk_var1( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_Apply_pivots_ln_blk_var2( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );

FLA_Error FLA_Apply_pivots_ln_opt_var1( FLA_Obj p, FLA_Obj A );
FLA_Error FLA_Apply_pivots_ln_opi_var1( integer n, 
                                        integer*      a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_ln_ops_var1( integer n, 
                                        float*    a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_ln_opd_var1( integer n, 
                                        double*   a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_ln_opc_var1( integer n, 
                                        scomplex* a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_ln_opz_var1( integer n, 
                                        dcomplex* a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
// end FLA_Apply_pivots_ln.h
// begin FLA_Apply_pivots_lt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_pivots_lt_opt_var1( FLA_Obj p, FLA_Obj A );

// end FLA_Apply_pivots_lt.h
// begin FLA_Apply_pivots_rn.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_pivots_rn_opt_var1( FLA_Obj p, FLA_Obj A );
FLA_Error FLA_Apply_pivots_rn_ops_var1( integer n, 
                                        float*    a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_rn_opd_var1( integer n, 
                                        double*   a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_rn_opc_var1( integer n, 
                                        scomplex* a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
FLA_Error FLA_Apply_pivots_rn_opz_var1( integer n, 
                                        dcomplex* a, integer a_rs, integer a_cs, 
                                        integer k1, 
                                        integer k2, 
                                        integer* p, integer incp );
// end FLA_Apply_pivots_rn.h
// begin FLA_Apply_pivots_rt.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Apply_pivots_rt_opt_var1( FLA_Obj p, FLA_Obj A );

// end FLA_Apply_pivots_rt.h

FLA_Error FLA_Apply_pivots_internal( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );

FLA_Error FLA_Apply_pivots_ln( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_Apply_pivots_lt( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_Apply_pivots_rn( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );
FLA_Error FLA_Apply_pivots_rt( FLA_Obj p, FLA_Obj A, fla_appiv_t* cntl );

// end FLA_Apply_pivots.h

// Eigensolvers
// begin FLA_Eig_gest.h


// begin FLA_Eig_gest_il.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Eig_gest_il_blk_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_il_blk_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_il_blk_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_il_blk_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_il_blk_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );

FLA_Error FLA_Eig_gest_il_unb_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_unb_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_unb_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_unb_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_unb_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );

FLA_Error FLA_Eig_gest_il_opt_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_ops_var1( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opd_var1( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opc_var1( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opz_var1( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_il_opt_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_ops_var2( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opd_var2( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opc_var2( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opz_var2( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_il_opt_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_ops_var3( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_Y, integer rs_Y, integer cs_Y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opd_var3( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_Y, integer rs_Y, integer cs_Y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opc_var3( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_Y, integer rs_Y, integer cs_Y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opz_var3( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_Y, integer rs_Y, integer cs_Y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_il_opt_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_ops_var4( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opd_var4( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opc_var4( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opz_var4( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_il_opt_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_il_ops_var5( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opd_var5( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opc_var5( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_il_opz_var5( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );
// end FLA_Eig_gest_il.h
// begin FLA_Eig_gest_iu.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Eig_gest_iu_blk_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_iu_blk_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_iu_blk_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_iu_blk_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_iu_blk_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );

FLA_Error FLA_Eig_gest_iu_unb_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_unb_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_unb_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_unb_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_unb_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );

FLA_Error FLA_Eig_gest_iu_opt_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_ops_var1( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opd_var1( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opc_var1( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opz_var1( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_iu_opt_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_ops_var2( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opd_var2( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opc_var2( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opz_var2( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_iu_opt_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_ops_var3( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_Y, integer rs_Y, integer cs_Y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opd_var3( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_Y, integer rs_Y, integer cs_Y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opc_var3( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_Y, integer rs_Y, integer cs_Y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opz_var3( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_Y, integer rs_Y, integer cs_Y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_iu_opt_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_ops_var4( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opd_var4( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opc_var4( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opz_var4( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_iu_opt_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_iu_ops_var5( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opd_var5( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opc_var5( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_iu_opz_var5( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );
// end FLA_Eig_gest_iu.h
// begin FLA_Eig_gest_nl.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Eig_gest_nl_blk_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nl_blk_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nl_blk_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nl_blk_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nl_blk_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );

FLA_Error FLA_Eig_gest_nl_unb_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_unb_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_unb_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_unb_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_unb_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );

FLA_Error FLA_Eig_gest_nl_opt_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_ops_var1( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opd_var1( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opc_var1( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opz_var1( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nl_opt_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_ops_var2( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opd_var2( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opc_var2( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opz_var2( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nl_opt_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_ops_var3( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opd_var3( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opc_var3( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opz_var3( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nl_opt_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_ops_var4( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opd_var4( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opc_var4( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opz_var4( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nl_opt_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nl_ops_var5( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opd_var5( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opc_var5( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nl_opz_var5( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

// end FLA_Eig_gest_nl.h
// begin FLA_Eig_gest_nu.h


// skipped #include "FLAME.h" 

FLA_Error FLA_Eig_gest_nu_blk_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nu_blk_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nu_blk_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nu_blk_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nu_blk_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );

FLA_Error FLA_Eig_gest_nu_unb_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_unb_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_unb_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_unb_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_unb_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );

FLA_Error FLA_Eig_gest_nu_opt_var1( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_ops_var1( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opd_var1( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opc_var1( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opz_var1( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nu_opt_var2( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_ops_var2( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y,
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opd_var2( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y,
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opc_var2( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y,
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opz_var2( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y,
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nu_opt_var3( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_ops_var3( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opd_var3( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opc_var3( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opz_var3( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nu_opt_var4( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_ops_var4( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opd_var4( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opc_var4( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opz_var4( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

FLA_Error FLA_Eig_gest_nu_opt_var5( FLA_Obj A, FLA_Obj Y, FLA_Obj B );
FLA_Error FLA_Eig_gest_nu_ops_var5( integer m_AB,
                                    float*    buff_A, integer rs_A, integer cs_A, 
                                    float*    buff_y, integer inc_y, 
                                    float*    buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opd_var5( integer m_AB,
                                    double*   buff_A, integer rs_A, integer cs_A, 
                                    double*   buff_y, integer inc_y, 
                                    double*   buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opc_var5( integer m_AB,
                                    scomplex* buff_A, integer rs_A, integer cs_A, 
                                    scomplex* buff_y, integer inc_y, 
                                    scomplex* buff_B, integer rs_B, integer cs_B );
FLA_Error FLA_Eig_gest_nu_opz_var5( integer m_AB,
                                    dcomplex* buff_A, integer rs_A, integer cs_A, 
                                    dcomplex* buff_y, integer inc_y, 
                                    dcomplex* buff_B, integer rs_B, integer cs_B );

// end FLA_Eig_gest_nu.h

FLA_Error FLA_Eig_gest_internal( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_il( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_iu( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nl( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );
FLA_Error FLA_Eig_gest_nu( FLA_Obj A, FLA_Obj Y, FLA_Obj B, fla_eig_gest_t* cntl );

// end FLA_Eig_gest.h
// end FLA_lapack_var_prototypes.h

  // Include FLASH headers.
// begin FLASH.h


#ifndef FLASH_H
#define FLASH_H

// begin FLASH_macro_defs.h


#ifndef FLASH_MACRO_DEFS_H
#define FLASH_MACRO_DEFS_H

#define FLASH_OBJ_PTR_AT( A )  ( (FLA_Obj *) FLA_Obj_buffer_at_view( A ) )

#define FLA_FLAT_TO_HIER 4000
#define FLA_HIER_TO_FLAT 4001

#endif
// end FLASH_macro_defs.h

// begin FLASH_main_prototypes.h


// -----------------------------------------------------------------------------

FLA_Error    FLASH_Obj_blocksizes_check( FLA_Obj H, fla_dim_t* b_m, fla_dim_t* b_n );

FLA_Error    FLASH_Obj_create_helper_check( FLA_Bool without_buffer, FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_hierarchy_check( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* elem_sizes_m, fla_dim_t* elem_sizes_n, FLA_Obj flat_matrix, FLA_Obj* H, unsigned long id, fla_dim_t depth_overall, fla_dim_t* depth_sizes_m, fla_dim_t* depth_sizes_n, fla_dim_t* m_offsets, fla_dim_t* n_offsets );

FLA_Error    FLASH_Obj_create_conf_to_check( FLA_Trans trans, FLA_Obj H_cur, FLA_Obj* H_new );

FLA_Error    FLASH_Obj_create_hier_conf_to_flat_check( FLA_Trans trans, FLA_Obj F, fla_dim_t depth, fla_dim_t* b_mn, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_hier_conf_to_flat_ext_check( FLA_Trans trans, FLA_Obj F, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_flat_conf_to_hier_check( FLA_Trans trans, FLA_Obj H, FLA_Obj* F );
FLA_Error    FLASH_Obj_create_hier_copy_of_flat_check( FLA_Obj F, fla_dim_t depth, fla_dim_t* b_mn, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_hier_copy_of_flat_ext_check( FLA_Obj F, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_flat_copy_of_hier_check( FLA_Obj H, FLA_Obj* F );

FLA_Error    FLASH_Obj_free_check( FLA_Obj* H );
FLA_Error    FLASH_Obj_free_without_buffer_check( FLA_Obj* H );
FLA_Error    FLASH_Obj_free_hierarchy_check( FLA_Obj* H );

FLA_Error    FLASH_Obj_attach_buffer_check( void *buffer, fla_dim_t rs, fla_dim_t cs, FLA_Obj* H );
FLA_Error    FLASH_Obj_attach_buffer_hierarchy_check( FLA_Obj F, FLA_Obj* H );

// -----------------------------------------------------------------------------

FLA_Error FLASH_Part_create_2x1( FLA_Obj A,    FLA_Obj* AT,
                                               FLA_Obj* AB,
                                 fla_dim_t n_rows, FLA_Side side );
FLA_Error FLASH_Part_create_1x2( FLA_Obj A,    FLA_Obj* AL, FLA_Obj* AR,
                                 fla_dim_t n_cols, FLA_Side side );
FLA_Error FLASH_Part_create_2x2( FLA_Obj A,    FLA_Obj* ATL, FLA_Obj* ATR,
                                               FLA_Obj* ABL, FLA_Obj* ABR,
                                 fla_dim_t n_rows, fla_dim_t n_cols, FLA_Side side );

FLA_Error FLASH_Part_free_2x1( FLA_Obj* AT,
                               FLA_Obj* AB );
FLA_Error FLASH_Part_free_1x2( FLA_Obj* AL, FLA_Obj* AR );
FLA_Error FLASH_Part_free_2x2( FLA_Obj* ATL, FLA_Obj* ATR,
                               FLA_Obj* ABL, FLA_Obj* ABR );

FLA_Error FLASH_Obj_adjust_views( FLA_Bool attach_buffer, fla_dim_t offm, fla_dim_t offn, fla_dim_t m, fla_dim_t n, FLA_Obj A, FLA_Obj* S );
FLA_Error FLASH_Obj_adjust_views_hierarchy( FLA_Bool attach_buffer, fla_dim_t offm, fla_dim_t offn, fla_dim_t m, fla_dim_t n, FLA_Obj A, FLA_Obj* S );

fla_dim_t FLASH_Obj_scalar_length( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_width( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_min_dim( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_max_dim( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_vector_dim( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_row_offset( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_col_offset( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_length_tl( FLA_Obj H );
fla_dim_t FLASH_Obj_scalar_width_tl( FLA_Obj H );
fla_dim_t FLASH_Obj_base_scalar_length( FLA_Obj H );
fla_dim_t FLASH_Obj_base_scalar_width( FLA_Obj H );

FLA_Error FLASH_Obj_show( char* header, FLA_Obj H, char* elem_format, char* footer );
FLA_Error FLASH_Obj_show_hierarchy( FLA_Obj H, fla_dim_t i, char* elem_format );

// -----------------------------------------------------------------------------

FLA_Error    FLASH_Axpy_buffer_to_hier( FLA_Obj alpha, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs, fla_dim_t i, fla_dim_t j, FLA_Obj H );
FLA_Error    FLASH_Axpy_hier_to_buffer( FLA_Obj alpha, fla_dim_t i, fla_dim_t j, FLA_Obj H, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs );
FLA_Error    FLASH_Axpy_flat_to_hier( FLA_Obj alpha, FLA_Obj F, fla_dim_t i, fla_dim_t j, FLA_Obj H );
FLA_Error    FLASH_Axpy_hier_to_flat( FLA_Obj alpha, fla_dim_t i, fla_dim_t j, FLA_Obj H, FLA_Obj F );

FLA_Error    FLASH_Axpy_hierarchy( int direction, FLA_Obj alpha, FLA_Obj F, FLA_Obj* H );

// -----------------------------------------------------------------------------

FLA_Error    FLASH_Copy_buffer_to_hier( fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs, fla_dim_t i, fla_dim_t j, FLA_Obj H );
FLA_Error    FLASH_Copy_hier_to_buffer( fla_dim_t i, fla_dim_t j, FLA_Obj H, fla_dim_t m, fla_dim_t n, void* buffer, fla_dim_t rs, fla_dim_t cs );
FLA_Error    FLASH_Copy_flat_to_hier( FLA_Obj F, fla_dim_t i, fla_dim_t j, FLA_Obj H );
FLA_Error    FLASH_Copy_hier_to_flat( fla_dim_t i, fla_dim_t j, FLA_Obj H, FLA_Obj F );

FLA_Error    FLASH_Copy_hierarchy( int direction, FLA_Obj F, FLA_Obj* H );

// -----------------------------------------------------------------------------

FLA_Datatype FLASH_Obj_datatype( FLA_Obj H );
fla_dim_t        FLASH_Obj_depth( FLA_Obj H );
fla_dim_t        FLASH_Obj_blocksizes( FLA_Obj H, fla_dim_t* b_m, fla_dim_t* b_n );

FLA_Error    FLASH_Obj_create( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* b_mn, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_ext( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_without_buffer( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* b_mn, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_without_buffer_ext( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );

FLA_Error    FLASH_Obj_create_helper( FLA_Bool without_buffer, FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_hierarchy( FLA_Datatype datatype, fla_dim_t m, fla_dim_t n, fla_dim_t depth, fla_dim_t* elem_sizes_m, fla_dim_t* elem_sizes_n, FLA_Obj flat_matrix, FLA_Obj* H, unsigned long id, fla_dim_t depth_overall, fla_dim_t* depth_sizes_m, fla_dim_t* depth_sizes_n, fla_dim_t* m_offsets, fla_dim_t* n_offsets );

FLA_Error    FLASH_Obj_create_conf_to( FLA_Trans trans, FLA_Obj H_cur, FLA_Obj* H_new );
FLA_Error    FLASH_Obj_create_hier_conf_to_flat( FLA_Trans trans, FLA_Obj F, fla_dim_t depth, fla_dim_t* b_mn, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_hier_conf_to_flat_ext( FLA_Trans trans, FLA_Obj F, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_flat_conf_to_hier( FLA_Trans trans, FLA_Obj H, FLA_Obj* F );
FLA_Error    FLASH_Obj_create_copy_of( FLA_Trans trans, FLA_Obj H_cur, FLA_Obj* H_new );
FLA_Error    FLASH_Obj_create_hier_copy_of_flat( FLA_Obj F, fla_dim_t depth, fla_dim_t* b_mn, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_hier_copy_of_flat_ext( FLA_Obj F, fla_dim_t depth, fla_dim_t* b_m, fla_dim_t* b_n, FLA_Obj* H );
FLA_Error    FLASH_Obj_create_flat_copy_of_hier( FLA_Obj H, FLA_Obj* F );

void         FLASH_Obj_free( FLA_Obj* H );
void         FLASH_Obj_free_hierarchy( FLA_Obj* H );
void         FLASH_Obj_free_without_buffer( FLA_Obj* H );

FLA_Error    FLASH_Obj_attach_buffer( void* buffer, fla_dim_t rs, fla_dim_t cs, FLA_Obj* H );
FLA_Error    FLASH_Obj_attach_buffer_hierarchy( FLA_Obj F, FLA_Obj* H );

FLA_Error    FLASH_Obj_flatten( FLA_Obj H, FLA_Obj F );
FLA_Error    FLASH_Obj_hierarchify( FLA_Obj F, FLA_Obj H );

void*        FLASH_Obj_extract_buffer( FLA_Obj H );

FLA_Error    FLASH_Obj_show( char* header, FLA_Obj H, char* elem_format, char* footer );

void         FLASH_print_struct( FLA_Obj H );
void         FLASH_print_struct_helper( FLA_Obj H, int indent );
// end FLASH_main_prototypes.h
// begin FLASH_util_prototypes.h


// --- FLASH utility routine prototypes ----------------------------------------

double    FLASH_Max_elemwise_diff( FLA_Obj A, FLA_Obj B );

FLA_Error FLASH_Random_matrix( FLA_Obj H );
FLA_Error FLASH_Random_spd_matrix( FLA_Uplo uplo, FLA_Obj H );

FLA_Error FLASH_Norm1( FLA_Obj H, FLA_Obj norm );
FLA_Error FLASH_Obj_shift_diagonal( FLA_Conj conj, FLA_Obj sigma, FLA_Obj H );

FLA_Error FLASH_Set( FLA_Obj alpha, FLA_Obj H );

FLA_Error FLASH_Obj_create_diag_panel( FLA_Obj A, FLA_Obj* U );

FLA_Error FLASH_LU_find_zero_on_diagonal( FLA_Obj A );

FLA_Error FLASH_Triangularize( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLASH_Hermitianize( FLA_Uplo uplo, FLA_Obj A );

// --- FLASH utility check routine prototypes ----------------------------------

FLA_Error FLASH_LU_find_zero_on_diagonal_check( FLA_Obj A );

// end FLASH_util_prototypes.h
// begin FLASH_blas1_prototypes.h


// --- top-level front-end prototypes ------------------------------------------

FLA_Error FLASH_Axpy( FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLASH_Axpyt( FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLASH_Copy( FLA_Obj A, FLA_Obj B );
FLA_Error FLASH_Copyt( FLA_Trans trans, FLA_Obj A, FLA_Obj B );
FLA_Error FLASH_Scal( FLA_Obj alpha, FLA_Obj A );
FLA_Error FLASH_Scalr( FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A );

// end FLASH_blas1_prototypes.h
// begin FLASH_blas2_prototypes.h


// --- top-level front-end prototypes ------------------------------------------

FLA_Error FLASH_Gemv( FLA_Trans transa, FLA_Obj alpha, FLA_Obj A, FLA_Obj x, FLA_Obj beta, FLA_Obj y );
FLA_Error FLASH_Trsv( FLA_Uplo uplo, FLA_Trans transa, FLA_Diag diag, FLA_Obj A, FLA_Obj x );

// end FLASH_blas2_prototypes.h
// begin FLASH_blas3_prototypes.h


// --- top-level front-end prototypes ------------------------------------------

FLA_Error FLASH_Gemm( FLA_Trans transa, FLA_Trans transb, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Hemm( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Herk( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Her2k( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Symm( FLA_Side side, FLA_Uplo uplo, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Syrk( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Syr2k( FLA_Uplo uplo, FLA_Trans trans, FLA_Obj alpha, FLA_Obj A, FLA_Obj B, FLA_Obj beta, FLA_Obj C );
FLA_Error FLASH_Trmm( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );
FLA_Error FLASH_Trsm( FLA_Side side, FLA_Uplo uplo, FLA_Trans trans, FLA_Diag diag, FLA_Obj alpha, FLA_Obj A, FLA_Obj B );

// end FLASH_blas3_prototypes.h
// begin FLASH_lapack_prototypes.h


// --- top-level wrapper prototypes --------------------------------------------

// Implemented:
FLA_Error FLASH_Chol( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLASH_Chol_solve( FLA_Uplo uplo, FLA_Obj A, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_LU_nopiv( FLA_Obj A );
FLA_Error FLASH_LU_nopiv_solve( FLA_Obj A, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_LU_piv( FLA_Obj A, FLA_Obj p );
FLA_Error FLASH_LU_piv_solve( FLA_Obj A, FLA_Obj p, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_LU_incpiv( FLA_Obj A, FLA_Obj p, FLA_Obj L );
FLA_Error FLASH_FS_incpiv( FLA_Obj A, FLA_Obj p, FLA_Obj L, FLA_Obj b );
FLA_Error FLASH_Trinv( FLA_Uplo uplo, FLA_Diag diag, FLA_Obj A );
FLA_Error FLASH_Ttmm( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLASH_SPDinv( FLA_Uplo uplo, FLA_Obj A );
FLA_Error FLASH_Sylv( FLA_Trans transa, FLA_Trans transb, FLA_Obj isgn, FLA_Obj A, FLA_Obj B, FLA_Obj C, FLA_Obj scale );
FLA_Error FLASH_Apply_Q_UT( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj T, FLA_Obj W, FLA_Obj B );
FLA_Error FLASH_Apply_Q2_UT( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj D, FLA_Obj T, FLA_Obj W, FLA_Obj C, FLA_Obj E );
FLA_Error FLASH_QR2_UT( FLA_Obj B, FLA_Obj D, FLA_Obj T );
FLA_Error FLASH_QR_UT( FLA_Obj A, FLA_Obj TW );
FLA_Error FLASH_QR_UT_solve( FLA_Obj A, FLA_Obj T, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_QR_UT_inc( FLA_Obj A, FLA_Obj TW );
FLA_Error FLASH_QR_UT_inc_solve( FLA_Obj A, FLA_Obj TW, FLA_Obj B, FLA_Obj X );
FLA_Error FLASH_Apply_Q_UT_inc( FLA_Side side, FLA_Trans trans, FLA_Direct direct, FLA_Store storev, FLA_Obj A, FLA_Obj TW, FLA_Obj W1, FLA_Obj B );
FLA_Error FLASH_Apply_pivots( FLA_Side side, FLA_Trans trans, FLA_Obj p, FLA_Obj A );
FLA_Error FLASH_Eig_gest( FLA_Inv inv, FLA_Uplo uplo, FLA_Obj A, FLA_Obj B );

// Not yet implemented:
FLA_Error FLASH_LQ_UT_inv( FLA_Obj A, FLA_Obj TW );
FLA_Error FLASH_LQ2_UT( FLA_Obj B, FLA_Obj C, FLA_Obj T );
// end FLASH_lapack_prototypes.h

#endif
// end FLASH.h

  // Include SuperMatrix headers.
// begin FLASH_Queue.h


#ifndef FLASH_QUEUE_H
#define FLASH_QUEUE_H


// begin FLASH_Queue_main_prototypes.h


#ifndef FLASH_QUEUE_MAIN_PROTOTYPES_H
#define FLASH_QUEUE_MAIN_PROTOTYPES_H


void           FLASH_Queue_begin( void );
void           FLASH_Queue_end( void );
uinteger   FLASH_Queue_stack_depth( void );

FLA_Error      FLASH_Queue_enable( void );
FLA_Error      FLASH_Queue_disable( void );
FLA_Bool       FLASH_Queue_get_enabled( void );

void           FLASH_Queue_set_num_threads( uinteger n_threads );
uinteger   FLASH_Queue_get_num_threads( void );


#ifdef FLA_ENABLE_SUPERMATRIX


void           FLASH_Queue_init( void );
void           FLASH_Queue_finalize( void );

uinteger   FLASH_Queue_get_num_tasks( void );

void           FLASH_Queue_set_verbose_output( FLASH_Verbose verbose );
FLASH_Verbose  FLASH_Queue_get_verbose_output( void );
void           FLASH_Queue_set_sorting( FLA_Bool sorting );
FLA_Bool       FLASH_Queue_get_sorting( void );
void           FLASH_Queue_set_caching( FLA_Bool caching );
FLA_Bool       FLASH_Queue_get_caching( void );
void           FLASH_Queue_set_work_stealing( FLA_Bool work_stealing );
FLA_Bool       FLASH_Queue_get_work_stealing( void );
void           FLASH_Queue_set_data_affinity( FLASH_Data_aff data_affinity );
FLASH_Data_aff FLASH_Queue_get_data_affinity( void );
double         FLASH_Queue_get_total_time( void );
double         FLASH_Queue_get_parallel_time( void );

void           FLASH_Queue_exec( void );


// --- helper functions -------------------------------------------------------

void           FLASH_Queue_set_parallel_time( double dtime );
void           FLASH_Queue_set_block_size( fla_dim_t size );
fla_dim_t          FLASH_Queue_get_block_size( void );
void           FLASH_Queue_set_cache_size( fla_dim_t size );
fla_dim_t          FLASH_Queue_get_cache_size( void );
void           FLASH_Queue_set_cache_line_size( fla_dim_t size );
fla_dim_t          FLASH_Queue_get_cache_line_size( void );
void           FLASH_Queue_set_cores_per_cache( integer cores );
integer            FLASH_Queue_get_cores_per_cache( void );
void           FLASH_Queue_set_cores_per_queue( integer cores );
integer            FLASH_Queue_get_cores_per_queue( void );
void           FLASH_Queue_reset( void );
FLASH_Task*    FLASH_Queue_get_head_task( void );
FLASH_Task*    FLASH_Queue_get_tail_task( void );
void           FLASH_Queue_push( void *func, void *cntl, char *name,
                                 FLA_Bool enabled_gpu,
                                 integer n_int_args, integer n_fla_args,
                                 integer n_input_args, integer n_output_args, ... );
void           FLASH_Queue_push_input( FLA_Obj obj, FLASH_Task* t );
void           FLASH_Queue_push_output( FLA_Obj obj, FLASH_Task* t );
FLASH_Task*    FLASH_Task_alloc( void *func, void *cntl, char *name,
                                 FLA_Bool enabled_gpu,
                                 integer n_int_args, integer n_fla_args,
                                 integer n_input_args, integer n_output_args );
void           FLASH_Task_free( FLASH_Task *t );
void           FLASH_Queue_exec_task( FLASH_Task *t );
void           FLASH_Queue_verbose_output( void );

void           FLASH_Queue_init_tasks( void *arg );
void           FLASH_Queue_wait_enqueue( FLASH_Task *t, void *arg );
FLASH_Task*    FLASH_Queue_wait_dequeue( integer queue, integer cache, void *arg );
FLASH_Task*    FLASH_Queue_wait_dequeue_block( integer queue, integer cache, void *arg );
void           FLASH_Queue_update_cache( FLASH_Task *t, void *arg );
void           FLASH_Queue_update_cache_block( FLA_Obj obj, integer cache, FLA_Bool output, void *arg );
void           FLASH_Queue_prefetch( integer cache, void *arg );
void           FLASH_Queue_prefetch_block( FLA_Obj obj );
FLASH_Task*    FLASH_Queue_work_stealing( integer queue, void *arg );
#ifdef FLA_ENABLE_GPU
void           FLASH_Queue_create_gpu( integer thread, void *arg );
void           FLASH_Queue_destroy_gpu( integer thread, void *arg );
FLA_Bool       FLASH_Queue_exec_gpu( FLASH_Task *t, void *arg );
FLA_Bool       FLASH_Queue_check_gpu( FLASH_Task *t, void *arg );
FLA_Bool       FLASH_Queue_check_block_gpu( FLA_Obj obj, integer thread, void *arg );
void           FLASH_Queue_update_gpu( FLASH_Task *t, void **input_arg, void **output_arg, void *arg );
void           FLASH_Queue_update_block_gpu( FLA_Obj obj, void **buffer_gpu, integer thread, void *arg );
void           FLASH_Queue_mark_gpu( FLASH_Task *t, void *arg );
void           FLASH_Queue_invalidate_block_gpu( FLA_Obj obj, integer thread, void *arg );
void           FLASH_Queue_flush_block_gpu( FLA_Obj obj, integer thread, void *arg );
void           FLASH_Queue_flush_gpu( integer thread, void *arg );
#endif
void           FLASH_Queue_exec_parallel( void *arg );
void*          FLASH_Queue_exec_parallel_function( void *arg );
FLASH_Task*    FLASH_Task_update_dependencies( FLASH_Task *t, void *arg );
FLASH_Task*    FLASH_Task_update_binding( FLASH_Task *t, FLASH_Task *r, void *arg );
void           FLASH_Task_free_parallel( FLASH_Task *t, void *arg );

void           FLASH_Queue_exec_simulation( void *arg );


#endif // FLA_ENABLE_SUPERMATRIX


#endif // FLASH_QUEUE_MAIN_PROTOTYPES_H
// end FLASH_Queue_main_prototypes.h
// begin FLASH_Queue_macro_defs.h


#ifndef FLASH_QUEUE_MACRO_DEFS_H
#define FLASH_QUEUE_MACRO_DEFS_H


#ifdef FLA_ENABLE_SUPERMATRIX


#define FLASH_OBJ_PTR_ID( A )  ( A ).base->id

// FLASH_Verbose
#define FLASH_QUEUE_VERBOSE_NONE                     0
#define FLASH_QUEUE_VERBOSE_READABLE                 1
#define FLASH_QUEUE_VERBOSE_GRAPHVIZ                 2

// FLASH_Data_aff
#define FLASH_QUEUE_AFFINITY_NONE                    0
#define FLASH_QUEUE_AFFINITY_2D_BLOCK_CYCLIC         1
#define FLASH_QUEUE_AFFINITY_1D_ROW_BLOCK_CYCLIC     2
#define FLASH_QUEUE_AFFINITY_1D_COLUMN_BLOCK_CYCLIC  3
#define FLASH_QUEUE_AFFINITY_ROUND_ROBIN             4



// LAPACK-level

#define ENQUEUE_FLASH_LU_piv_macro( A, p, cntl ) \
        FLASH_Queue_push( (void *) FLA_LU_piv_macro_task, \
                          (void *) cntl, \
                          "LU   ", \
                          FALSE, \
                          0, 0, 0, 2, \
                          A, p )

#define ENQUEUE_FLASH_Apply_pivots_macro( side, trans, p, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Apply_pivots_macro_task, \
                          (void *) cntl, \
                          "Pivot", \
                          FALSE, \
                          2, 0, 1, 1, \
                          side, trans, \
                          p, A )

#define ENQUEUE_FLASH_LU_piv( A, p, cntl ) \
        FLASH_Queue_push( (void *) FLA_LU_piv_task, \
                          (void *) cntl, \
                          "LU   ", \
                          FALSE, \
                          0, 1, 0, 1, \
                          p, A )

#define ENQUEUE_FLASH_LU_piv_copy( A, p, U, cntl ) \
        FLASH_Queue_push( (void *) FLA_LU_piv_copy_task, \
                          (void *) cntl, \
                          "LU   ", \
                          FALSE, \
                          0, 1, 0, 2, \
                          p, A, U )

#define ENQUEUE_FLASH_Trsm_piv( A, C, p, cntl ) \
        FLASH_Queue_push( (void *) FLA_Trsm_piv_task, \
                          (void *) cntl, \
                          "Trsm ", \
                          FALSE, \
                          0, 1, 1, 1, \
                          p, A, C )

#define ENQUEUE_FLASH_SA_LU( U, D, p, L, nb_alg, cntl ) \
        FLASH_Queue_push( (void *) FLA_SA_LU_task, \
                          (void *) cntl, \
                          "SA_LU", \
                          FALSE, \
                          1, 2, 0, 2, \
                          nb_alg, \
                          p, L, D, U )

#define ENQUEUE_FLASH_SA_FS( L, D, p, C, E, nb_alg, cntl ) \
        FLASH_Queue_push( (void *) FLA_SA_FS_task, \
                          (void *) cntl, \
                          "SA_FS", \
                          FALSE, \
                          1, 2, 1, 2, \
                          nb_alg, \
                          L, p, D, E, C )

#define ENQUEUE_FLASH_LU_nopiv( A, cntl ) \
        FLASH_Queue_push( (void *) FLA_LU_nopiv_task, \
                          (void *) cntl, \
                          "LU   ", \
                          FALSE, \
                          0, 0, 0, 1, \
                          A )

#define ENQUEUE_FLASH_Trinv( uplo, diag, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Trinv_task, \
                          (void *) cntl, \
                          "Trinv", \
                          FALSE, \
                          2, 0, 0, 1, \
                          uplo, diag, \
                          A )

#define ENQUEUE_FLASH_Ttmm( uplo, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Ttmm_task, \
                          (void *) cntl, \
                          "Ttmm ", \
                          FALSE, \
                          1, 0, 0, 1, \
                          uplo, \
                          A )

#define ENQUEUE_FLASH_Chol( uplo, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Chol_task, \
                          (void *) cntl, \
                          "Chol ", \
                          FALSE, \
                          1, 0, 0, 1, \
                          uplo, \
                          A )

#define ENQUEUE_FLASH_Sylv( transA, transB, isgn, A, B, C, scale, cntl ) \
        FLASH_Queue_push( (void *) FLA_Sylv_task, \
                          (void *) cntl, \
                          "Sylv ", \
                          FALSE, \
                          2, 2, 2, 1, \
                          transA, transB, \
                          isgn, scale, \
                          A, B, C )

#define ENQUEUE_FLASH_Lyap( trans, isgn, A, C, scale, cntl ) \
        FLASH_Queue_push( (void *) FLA_Lyap_task, \
                          (void *) cntl, \
                          "Lyap ", \
                          FALSE, \
                          1, 2, 1, 1, \
                          trans, \
                          isgn, scale, \
                          A, C )

#define ENQUEUE_FLASH_QR_UT_macro( A, T, cntl ) \
        FLASH_Queue_push( (void *) FLA_QR_UT_macro_task, \
                          (void *) cntl, \
                          "QR   ", \
                          FALSE, \
                          0, 0, 0, 2, \
                          A, T )

#define ENQUEUE_FLASH_QR_UT( A, T, cntl ) \
        FLASH_Queue_push( (void *) FLA_QR_UT_task, \
                          (void *) cntl, \
                          "QR   ", \
                          FALSE, \
                          0, 1, 0, 1, \
                          T, A )

#define ENQUEUE_FLASH_QR_UT_copy( A, T, U, cntl ) \
        FLASH_Queue_push( (void *) FLA_QR_UT_copy_task, \
                          (void *) cntl, \
                          "QR   ", \
                          FALSE, \
                          0, 1, 0, 2, \
                          T, A, U )

#define ENQUEUE_FLASH_QR2_UT( B, D, T, cntl ) \
        FLASH_Queue_push( (void *) FLA_QR2_UT_task, \
                          (void *) cntl, \
                          "QR2  ", \
                          FALSE, \
                          0, 1, 0, 2, \
                          T, D, B )

#define ENQUEUE_FLASH_LQ_UT_macro( A, T, cntl ) \
        FLASH_Queue_push( (void *) FLA_LQ_UT_macro_task, \
                          (void *) cntl, \
                          "LQ   ", \
                          FALSE, \
                          0, 0, 0, 2, \
                          A, T )

#define ENQUEUE_FLASH_CAQR2_UT( B, D, T, cntl ) \
        FLASH_Queue_push( (void *) FLA_CAQR2_UT_task, \
                          (void *) cntl, \
                          "CAQR2", \
                          FALSE, \
                          0, 1, 0, 2, \
                          T, D, B )

#define ENQUEUE_FLASH_Apply_Q_UT( side, trans, direct, storev, A, T, W, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Apply_Q_UT_task, \
                          (void *) cntl, \
                          "ApQ  ", \
                          FALSE, \
                          4, 1, 1, 2, \
                          side, trans, direct, storev, \
                          T, A, B, W )

#define ENQUEUE_FLASH_Apply_Q2_UT( side, trans, direct, storev, D, T, W, C, E, cntl ) \
        FLASH_Queue_push( (void *) FLA_Apply_Q2_UT_task, \
                          (void *) cntl, \
                          "ApQ2 ", \
                          FALSE, \
                          4, 1, 1, 3, \
                          side, trans, direct, storev, \
                          T, D, E, C, W )

#define ENQUEUE_FLASH_Apply_CAQ2_UT( side, trans, direct, storev, D, T, W, C, E, cntl ) \
        FLASH_Queue_push( (void *) FLA_Apply_CAQ2_UT_task, \
                          (void *) cntl, \
                          "ApCQ2", \
                          FALSE, \
                          4, 1, 1, 3, \
                          side, trans, direct, storev, \
                          T, D, E, C, W )

#define ENQUEUE_FLASH_UDdate_UT( R, C, D, T, cntl ) \
        FLASH_Queue_push( (void *) FLA_UDdate_UT_task, \
                          (void *) cntl, \
                          "UD   ", \
                          FALSE, \
                          0, 0, 0, 4, \
                          R, C, D, T )

#define ENQUEUE_FLASH_Apply_QUD_UT( side, trans, direct, storev, T, W, R, U, C, V, D, cntl ) \
        FLASH_Queue_push( (void *) FLA_Apply_QUD_UT_task, \
                          (void *) cntl, \
                          "ApQUD", \
                          FALSE, \
                          4, 0, 3, 4, \
                          side, trans, direct, storev, \
                          T, U, V, W, R, C, D )

#define ENQUEUE_FLASH_Eig_gest( inv, uplo, A, Y, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Eig_gest_task, \
                          (void *) cntl, \
                          "Eig  ", \
                          FALSE, \
                          2, 0, 1, 2, \
                          inv, uplo, \
                          B, Y, A )

// Level-3 BLAS

#define ENQUEUE_FLASH_Gemm( transA, transB, alpha, A, B, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Gemm_task, \
                          (void *) cntl, \
                          "Gemm ", \
                          TRUE, \
                          2, 2, 2, 1, \
                          transA, transB, \
                          alpha, beta, \
                          A, B, C )

#define ENQUEUE_FLASH_Hemm( side, uplo, alpha, A, B, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Hemm_task, \
                          (void *) cntl, \
                          "Hemm ", \
                          TRUE, \
                          2, 2, 2, 1, \
                          side, uplo, \
                          alpha, beta, \
                          A, B, C )

#define ENQUEUE_FLASH_Herk( uplo, transA, alpha, A, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Herk_task, \
                          (void *) cntl, \
                          "Herk ", \
                          TRUE, \
                          2, 2, 1, 1, \
                          uplo, transA, \
                          alpha, beta, \
                          A, C )

#define ENQUEUE_FLASH_Her2k( uplo, transA, alpha, A, B, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Her2k_task, \
                          (void *) cntl, \
                          "Her2k", \
                          TRUE, \
                          2, 2, 2, 1, \
                          uplo, transA, \
                          alpha, beta, \
                          A, B, C )

#define ENQUEUE_FLASH_Symm( side, uplo, alpha, A, B, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Symm_task, \
                          (void *) cntl, \
                          "Symm ", \
                          TRUE, \
                          2, 2, 2, 1, \
                          side, uplo, \
                          alpha, beta, \
                          A, B, C )

#define ENQUEUE_FLASH_Syrk( uplo, transA, alpha, A, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Syrk_task, \
                          (void *) cntl, \
                          "Syrk ", \
                          TRUE, \
                          2, 2, 1, 1, \
                          uplo, transA, \
                          alpha, beta, \
                          A, C )

#define ENQUEUE_FLASH_Syr2k( uplo, transA, alpha, A, B, beta, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Syr2k_task, \
                          (void *) cntl, \
                          "Syr2k", \
                          TRUE, \
                          2, 2, 2, 1, \
                          uplo, transA, \
                          alpha, beta, \
                          A, B, C )

#define ENQUEUE_FLASH_Trmm( side, uplo, trans, diag, alpha, A, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Trmm_task, \
                          (void *) cntl, \
                          "Trmm ", \
                          TRUE, \
                          4, 1, 1, 1, \
                          side, uplo, trans, diag, \
                          alpha, \
                          A, C )

#define ENQUEUE_FLASH_Trsm( side, uplo, trans, diag, alpha, A, C, cntl ) \
        FLASH_Queue_push( (void *) FLA_Trsm_task, \
                          (void *) cntl, \
                          "Trsm ", \
                          TRUE, \
                          4, 1, 1, 1, \
                          side, uplo, trans, diag, \
                          alpha, \
                          A, C )

// Level-2 BLAS

#define ENQUEUE_FLASH_Gemv( trans, alpha, A, x, beta, y, cntl ) \
        FLASH_Queue_push( (void *) FLA_Gemv_task, \
                          (void *) cntl, \
                          "Gemv ", \
                          TRUE, \
                          1, 2, 2, 1, \
                          trans, \
                          alpha, beta, \
                          A, x, y )

#define ENQUEUE_FLASH_Trsv( uplo, trans, diag, A, x, cntl ) \
        FLASH_Queue_push( (void *) FLA_Trsv_task, \
                          (void *) cntl, \
                          "Trsv ", \
                          TRUE, \
                          3, 0, 1, 1, \
                          uplo, trans, diag, \
                          A, x )

// Level-1 BLAS

#define ENQUEUE_FLASH_Axpy( alpha, A, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Axpy_task, \
                          (void *) cntl, \
                          "Axpy ", \
                          TRUE, \
                          0, 1, 1, 1, \
                          alpha, \
                          A, B )

#define ENQUEUE_FLASH_Axpyt( trans, alpha, A, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Axpyt_task, \
                          (void *) cntl, \
                          "Axpyt", \
                          FALSE, \
                          1, 1, 1, 1, \
                          trans, \
                          alpha, \
                          A, B )

#define ENQUEUE_FLASH_Copy( A, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Copy_task, \
                          (void *) cntl, \
                          "Copy ", \
                          TRUE, \
                          0, 0, 1, 1, \
                          A, B )

#define ENQUEUE_FLASH_Copyt( trans, A, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Copyt_task, \
                          (void *) cntl, \
                          "Copyt", \
                          FALSE, \
                          1, 0, 1, 1, \
                          trans, \
                          A, B )

#define ENQUEUE_FLASH_Copyr( uplo, A, B, cntl ) \
        FLASH_Queue_push( (void *) FLA_Copyr_task, \
                          (void *) cntl, \
                          "Copyt", \
                          FALSE, \
                          1, 0, 1, 1, \
                          uplo, \
                          A, B )

#define ENQUEUE_FLASH_Scal( alpha, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Scal_task, \
                          (void *) cntl, \
                          "Scal ", \
                          TRUE, \
                          0, 1, 0, 1, \
                          alpha, \
                          A )

#define ENQUEUE_FLASH_Scalr( uplo, alpha, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Scalr_task, \
                          (void *) cntl, \
                          "Scalr", \
                          TRUE, \
                          1, 1, 0, 1, \
                          uplo, \
                          alpha, \
                          A )

// Base

#define ENQUEUE_FLASH_Obj_create_buffer( rs, cs, A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Obj_create_buffer_task, \
                          (void *) cntl, \
                          "Buff ", \
                          FALSE, \
                          2, 0, 0, 1, \
                          rs, cs, \
                          A )

#define ENQUEUE_FLASH_Obj_free_buffer( A, cntl ) \
        FLASH_Queue_push( (void *) FLA_Obj_free_buffer_task, \
                          (void *) cntl, \
                          "Free ", \
                          FALSE, \
                          0, 0, 0, 1, \
                          A )

#else

// LAPACK-level

#define ENQUEUE_FLASH_LU_piv_macro( A, p, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Apply_pivots_macro( side, trans, p, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_LU_piv( A, p, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_LU_piv_copy( A, p, U, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Trsm_piv( A, C, p, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_SA_LU( U, D, p, L, nb_alg, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_SA_FS( L, D, p, C, E, nb_alg, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_LU_nopiv( A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Trinv( uplo, diag, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Ttmm( uplo, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Chol( uplo, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Sylv( transA, transB, isgn, A, B, C, scale, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Lyap( trans, isgn, A, C, scale, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_QR_UT_macro( A, T, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_QR_UT( A, T, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_QR_UT_copy( A, T, U, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_QR2_UT( B, D, T, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_LQ_UT_macro( A, T, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_CAQR2_UT( B, D, T, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_UDdate_UT( R, C, D, T, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Apply_Q_UT( side, trans, direct, storev, A, T, W, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Apply_Q2_UT( side, trans, direct, storev, D, T, W, C, E, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Apply_CAQ2_UT( side, trans, direct, storev, D, T, W, C, E, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Apply_QUD_UT( side, trans, direct, storev, T, W, R, U, C, V, D, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Eig_gest( inv, uplo, A, Y, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

// Level-3 BLAS

#define ENQUEUE_FLASH_Gemm( transA, transB, alpha, A, B, beta, C, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Hemm( side, uplo, alpha, A, B, beta, C, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Herk( uplo, transA, alpha, A, beta, C, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Her2k( uplo, transA, alpha, A, B, beta, C, cntl  ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Symm( side, uplo, alpha, A, B, beta, C, cntl  ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Syrk( uplo, transA, alpha, A, beta, C, cntl  ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Syr2k( uplo, transA, alpha, A, B, beta, C, cntl  ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Trmm( side, uplo, trans, diag, alpha, A, C, cntl  ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Trsm( side, uplo, trans, diag, alpha, A, C, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

// Level-2 BLAS

#define ENQUEUE_FLASH_Gemv( transA, alpha, A, x, beta, y, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Trsv( uplo, trans, diag, A, x, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

// Level-1 BLAS

#define ENQUEUE_FLASH_Axpy( alpha, A, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Axpyt( trans, alpha, A, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Copy( A, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Copyt( trans, A, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Copyr( uplo, A, B, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Scal( alpha, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Scalr( uplo, alpha, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

// Base

#define ENQUEUE_FLASH_Obj_create_buffer( rs, cs, A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#define ENQUEUE_FLASH_Obj_free_buffer( A, cntl ) \
        FLA_Check_error_code( FLA_SUPERMATRIX_NOT_ENABLED )

#endif // FLA_ENABLE_SUPERMATRIX


#endif // FLASH_QUEUE_MACRO_DEFS_H
// end FLASH_Queue_macro_defs.h

// begin FLASH_Queue_gpu.h


#ifndef FLASH_QUEUE_GPU_H
#define FLASH_QUEUE_GPU_H

#ifdef FLA_ENABLE_GPU


void           FLASH_Queue_init_gpu( void );
void           FLASH_Queue_finalize_gpu( void );

FLA_Error      FLASH_Queue_enable_gpu( void );
FLA_Error      FLASH_Queue_disable_gpu( void );
FLA_Bool       FLASH_Queue_get_enabled_gpu( void );


// --- helper functions -------------------------------------------------------

void           FLASH_Queue_set_gpu_num_blocks( fla_dim_t n_blocks );
fla_dim_t          FLASH_Queue_get_gpu_num_blocks( void );

FLA_Error      FLASH_Queue_bind_gpu( integer thread );
FLA_Error      FLASH_Queue_alloc_gpu( fla_dim_t size, FLA_Datatype datatype, void** buffer_gpu );
FLA_Error      FLASH_Queue_free_gpu( void* buffer_gpu );
FLA_Error      FLASH_Queue_write_gpu( FLA_Obj obj, void* buffer_gpu );
FLA_Error      FLASH_Queue_read_gpu( FLA_Obj obj, void* buffer_gpu );

void           FLASH_Queue_exec_task_gpu( FLASH_Task* t, void** input_arg, void** output_arg );


#endif

#endif // FLASH_QUEUE_GPU_H
// end FLASH_Queue_gpu.h


#endif // FLASH_QUEUE_H
// end FLASH_Queue.h

  // Include Fortran name-mangling macro (if not already defined).
// begin FLA_f77_name_mangling.h


// --- Define Fortran name-mangling macro --------------------------------------

// If the F77_FUNC name-mangling macro is undefined, then we we need to define
// it ourselves.
#ifndef F77_FUNC

  // Case 1: F77_FUNC is undefined because we're building for Windows.
  #ifdef FLA_ENABLE_WINDOWS_BUILD

    // Check whether we need to use uppercase BLAS routine names; otherwise
    // default to lowercase.
    #ifdef FLA_ENABLE_UPPERCASE_BLAS

      // Use uppercase routine names (no underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_upper
    #else

      // Use lowercase routine names (no underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_lower
    #endif

  // Case 2: F77_FUNC is undefined because we're in a Linux-like environment
  // that did not define it for us.
  #else

    // Check whether we need to use uppercase BLAS routine names; otherwise
    // default to lowercase.
    #ifdef FLA_ENABLE_UPPERCASE_BLAS

      // Use uppercase routine names (single underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_upper ## _
    #else

      // Use lowercase routine names (single underscore).
      #define F77_FUNC( name_lower, name_upper ) \
              name_lower ## _
    #endif

  #endif // #ifdef FLA_ENABLE_WINDOWS_BUILD

#endif // #ifndef F77_FUNC

// end FLA_f77_name_mangling.h

  // Include prototypes for LAPACK routines.
// begin FLA_lapack_f77_prototypes.h


// --- Name-mangling macro definitions -----------------------------------------

// --- Define Fortran name-mangling macro --------------------------
#define F77_cgelst F77_FUNC( cgelst , CGELST )
#define F77_clatrs3 F77_FUNC( clatrs3 , CLATRS3 )
#define F77_ctrsyl3 F77_FUNC( ctrsyl3 , CTRSYL3 )
#define F77_dlarmm F77_FUNC( dlarmm , DLARMM )
#define F77_dgelst F77_FUNC( dgelst , DGELST )
#define F77_dlatrs3 F77_FUNC( dlatrs3 , DLATRS3 )
#define F77_dtrsyl3 F77_FUNC( dtrsyl3 , DTRSYL3 )
#define F77_slarmm F77_FUNC( slarmm , SLARMM )
#define F77_sgelst F77_FUNC( sgelst , SGELST )
#define F77_slatrs3 F77_FUNC( slatrs3 , SLATRS3 )
#define F77_strsyl3 F77_FUNC( strsyl3 , STRSYL3 )
#define F77_zgelst F77_FUNC( zgelst , ZGELST )
#define F77_zlatrs3 F77_FUNC( zlatrs3 , ZLATRS3 )
#define F77_ztrsyl3 F77_FUNC( ztrsyl3 , ZTRSYL3 )
#define F77_dlamch F77_FUNC( dlamch , DLAMCH )
#define F77_dlamc3 F77_FUNC( dlamc3 , DLAMC3 )
#define F77_dladiv2 F77_FUNC( dladiv2 , DLADIV2 )
#define F77_dladiv1 F77_FUNC(dladiv1 , DLADIV1 )
#define F77_sladiv2 F77_FUNC( sladiv2 , SLADIV2 )
#define F77_sladiv1 F77_FUNC( sladiv1 , SLADIV1 )
#define F77_iparmq F77_FUNC( iparmq, IPARMQ )
#define F77_ilaenv F77_FUNC( ilaenv , ILAENV )
#define F77_ieeeck F77_FUNC( ieeeck , IEEECK )
#define F77_lsamen F77_FUNC( lsamen , LSAMEN )
#define F77_slamc3 F77_FUNC( slamc3 , SLAMC3 )
#define F77_slamch F77_FUNC( slamch, SLAMCH )
#define F77_cgetsqrhrt F77_FUNC( cgetsqrhrt , CGETSQRHRT )
#define F77_claqz0 F77_FUNC( claqz0 , CLAQZ0 )
#define F77_claqz1 F77_FUNC( claqz1 , CLAQZ1 )
#define F77_claqz2 F77_FUNC( claqz2 , CLAQZ2 )
#define F77_claqz3 F77_FUNC( claqz3 , CLAQZ3 )
#define F77_clarfb_gett F77_FUNC( clarfb_gett , CLARFB_GETT )
#define F77_cungtsqr_row F77_FUNC( cungtsqr_row , CUNGTSQR_ROW )
#define F77_dgetsqrhrt F77_FUNC( dgetsqrhrt , DGETSQRHRT )
#define F77_dlaqz0 F77_FUNC( dlaqz0 , DLAQZ0 )
#define F77_dlaqz1 F77_FUNC( dlaqz1 , DLAQZ1 )
#define F77_dlaqz2 F77_FUNC( dlaqz2 , DLAQZ2 )
#define F77_dlaqz3 F77_FUNC( dlaqz3 , DLAQZ3 )
#define F77_dlaqz4 F77_FUNC( dlaqz4 , DLAQZ4 )
#define F77_dlarfb_gett F77_FUNC( dlarfb_gett , DLARFB_GETT )
#define F77_dorgtsqr_row F77_FUNC( dorgtsqr_row , DORGTSQR_ROW )
#define F77_sgetsqrhrt F77_FUNC( sgetsqrhrt , SGETSQRHRT )
#define F77_slaqz0 F77_FUNC( slaqz0 , SLAQZ0 )
#define F77_slaqz1 F77_FUNC( slaqz1 , SLAQZ1 )
#define F77_slaqz2 F77_FUNC( slaqz2 , SLAQZ2 )
#define F77_slaqz3 F77_FUNC( slaqz3 , SLAQZ3 )
#define F77_slaqz4 F77_FUNC( slaqz4 , SLAQZ4 )
#define F77_slarfb_gett F77_FUNC( slarfb_gett , SLARFB_GETT )
#define F77_sorgtsqr_row F77_FUNC( sorgtsqr_row , SORGTSQR_ROW )
#define F77_zgetsqrhrt F77_FUNC( zgetsqrhrt , ZGETSQRHRT )
#define F77_zlaqz0 F77_FUNC( zlaqz0 , ZLAQZ0 )
#define F77_zlaqz1 F77_FUNC( zlaqz1 , ZLAQZ1 )
#define F77_zlaqz2 F77_FUNC( zlaqz2 , ZLAQZ2 )
#define F77_zlaqz3 F77_FUNC( zlaqz3 , ZLAQZ3 )
#define F77_zlarfb_gett F77_FUNC( zlarfb_gett , ZLARFB_GETT )
#define F77_zungtsqr_row F77_FUNC( zungtsqr_row , ZUNGTSQR_ROW )
#define F77_cbbcsd F77_FUNC( cbbcsd , CBBCSD )
#define F77_cbdsqr F77_FUNC( cbdsqr , CBDSQR )
#define F77_cgbbrd F77_FUNC( cgbbrd , CGBBRD )
#define F77_cgbcon F77_FUNC( cgbcon , CGBCON )
#define F77_cgbequb F77_FUNC( cgbequb , CGBEQUB )
#define F77_cgbequ F77_FUNC( cgbequ , CGBEQU )
#define F77_cgbrfs F77_FUNC( cgbrfs , CGBRFS )
#define F77_cgbrfsx F77_FUNC( cgbrfsx , CGBRFSX )
#define F77_cgbsv F77_FUNC( cgbsv , CGBSV )
#define F77_cgbsvx F77_FUNC( cgbsvx , CGBSVX )
#define F77_cgbsvxx F77_FUNC( cgbsvxx , CGBSVXX )
#define F77_cgbtf2 F77_FUNC( cgbtf2 , CGBTF2 )
#define F77_cgbtrf F77_FUNC( cgbtrf , CGBTRF )
#define F77_cgbtrs F77_FUNC( cgbtrs , CGBTRS )
#define F77_cgebak F77_FUNC( cgebak , CGEBAK )
#define F77_cgebal F77_FUNC( cgebal , CGEBAL )
#define F77_cgebd2 F77_FUNC( cgebd2 , CGEBD2 )
#define F77_cgebrd F77_FUNC( cgebrd , CGEBRD )
#define F77_cgecon F77_FUNC( cgecon , CGECON )
#define F77_cgeequb F77_FUNC( cgeequb , CGEEQUB )
#define F77_cgeequ F77_FUNC( cgeequ , CGEEQU )
#define F77_cgees F77_FUNC( cgees , CGEES )
#define F77_cgeesx F77_FUNC( cgeesx , CGEESX )
#define F77_cgeev F77_FUNC( cgeev , CGEEV )
#define F77_cgeevx F77_FUNC( cgeevx , CGEEVX )
#define F77_cgegs F77_FUNC( cgegs , CGEGS )
#define F77_cgegv F77_FUNC( cgegv , CGEGV )
#define F77_cgehd2 F77_FUNC( cgehd2 , CGEHD2 )
#define F77_cgehrd F77_FUNC( cgehrd , CGEHRD )
#define F77_cgejsv F77_FUNC( cgejsv , CGEJSV )
#define F77_cgelq2 F77_FUNC( cgelq2 , CGELQ2 )
#define F77_cgelq F77_FUNC( cgelq , CGELQ )
#define F77_cgelqf F77_FUNC( cgelqf , CGELQF )
#define F77_cgelqt3 F77_FUNC( cgelqt3 , CGELQT3 )
#define F77_cgelqt F77_FUNC( cgelqt , CGELQT )
#define F77_cgelsd F77_FUNC( cgelsd , CGELSD )
#define F77_cgels F77_FUNC( cgels , CGELS )
#define F77_cgelss F77_FUNC( cgelss , CGELSS )
#define F77_cgelsx F77_FUNC( cgelsx , CGELSX )
#define F77_cgelsy F77_FUNC( cgelsy , CGELSY )
#define F77_cgemlq F77_FUNC( cgemlq , CGEMLQ )
#define F77_cgemlqt F77_FUNC( cgemlqt , CGEMLQT )
#define F77_cgemqr F77_FUNC( cgemqr , CGEMQR )
#define F77_cgemqrt F77_FUNC( cgemqrt , CGEMQRT )
#define F77_cgeql2 F77_FUNC( cgeql2 , CGEQL2 )
#define F77_cgeqlf F77_FUNC( cgeqlf , CGEQLF )
#define F77_cgeqp3 F77_FUNC( cgeqp3 , CGEQP3 )
#define F77_cgeqpf F77_FUNC( cgeqpf , CGEQPF )
#define F77_cgeqr2 F77_FUNC( cgeqr2 , CGEQR2 )
#define F77_cgeqr2p F77_FUNC( cgeqr2p , CGEQR2P )
#define F77_cgeqr F77_FUNC( cgeqr , CGEQR )
#define F77_cgeqrf F77_FUNC( cgeqrf , CGEQRF )
#define F77_cgeqrfp F77_FUNC( cgeqrfp , CGEQRFP )
#define F77_cgeqrt2 F77_FUNC( cgeqrt2 , CGEQRT2 )
#define F77_cgeqrt3 F77_FUNC( cgeqrt3 , CGEQRT3 )
#define F77_cgeqrt F77_FUNC( cgeqrt , CGEQRT )
#define F77_cgerfs F77_FUNC( cgerfs , CGERFS )
#define F77_cgerfsx F77_FUNC( cgerfsx , CGERFSX )
#define F77_cgerq2 F77_FUNC( cgerq2 , CGERQ2 )
#define F77_cgerqf F77_FUNC( cgerqf , CGERQF )
#define F77_cgesc2 F77_FUNC( cgesc2 , CGESC2 )
#define F77_cgesdd F77_FUNC( cgesdd , CGESDD )
#define F77_cgesvd F77_FUNC( cgesvd , CGESVD )
#define F77_cgesvdq F77_FUNC( cgesvdq , CGESVDQ )
#define F77_cgesvdx F77_FUNC( cgesvdx , CGESVDX )
#define F77_cgesv F77_FUNC( cgesv , CGESV )
#define F77_cgesvj F77_FUNC( cgesvj , CGESVJ )
#define F77_cgesvx F77_FUNC( cgesvx , CGESVX )
#define F77_cgesvxx F77_FUNC( cgesvxx , CGESVXX )
#define F77_cgetc2 F77_FUNC( cgetc2 , CGETC2 )
#define F77_cgetf2 F77_FUNC( cgetf2 , CGETF2 )
#define F77_cgetrf2 F77_FUNC( cgetrf2 , CGETRF2 )
#define F77_cgetrf F77_FUNC( cgetrf , CGETRF )
#define F77_cgetri F77_FUNC( cgetri , CGETRI )
#define F77_cgetrs F77_FUNC( cgetrs , CGETRS )
#define F77_cgetsls F77_FUNC( cgetsls , CGETSLS )
#define F77_cggbak F77_FUNC( cggbak , CGGBAK )
#define F77_cggbal F77_FUNC( cggbal , CGGBAL )
#define F77_cgges3 F77_FUNC( cgges3 , CGGES3 )
#define F77_cgges F77_FUNC( cgges , CGGES )
#define F77_cggesx F77_FUNC( cggesx , CGGESX )
#define F77_cggev3 F77_FUNC( cggev3 , CGGEV3 )
#define F77_cggev F77_FUNC( cggev , CGGEV )
#define F77_cggevx F77_FUNC( cggevx , CGGEVX )
#define F77_cggglm F77_FUNC( cggglm , CGGGLM )
#define F77_cgghd3 F77_FUNC( cgghd3 , CGGHD3 )
#define F77_cgghrd F77_FUNC( cgghrd , CGGHRD )
#define F77_cgglse F77_FUNC( cgglse , CGGLSE )
#define F77_cggqrf F77_FUNC( cggqrf , CGGQRF )
#define F77_cggrqf F77_FUNC( cggrqf , CGGRQF )
#define F77_cggsvd3 F77_FUNC( cggsvd3 , CGGSVD3 )
#define F77_cggsvd F77_FUNC( cggsvd , CGGSVD )
#define F77_cggsvp3 F77_FUNC( cggsvp3 , CGGSVP3 )
#define F77_cggsvp F77_FUNC( cggsvp , CGGSVP )
#define F77_cgsvj0 F77_FUNC( cgsvj0 , CGSVJ0 )
#define F77_cgsvj1 F77_FUNC( cgsvj1 , CGSVJ1 )
#define F77_cgtcon F77_FUNC( cgtcon , CGTCON )
#define F77_cgtrfs F77_FUNC( cgtrfs , CGTRFS )
#define F77_cgtsv F77_FUNC( cgtsv , CGTSV )
#define F77_cgtsvx F77_FUNC( cgtsvx , CGTSVX )
#define F77_cgttrf F77_FUNC( cgttrf , CGTTRF )
#define F77_cgttrs F77_FUNC( cgttrs , CGTTRS )
#define F77_cgtts2 F77_FUNC( cgtts2 , CGTTS2 )
#define F77_chb2st_kernels F77_FUNC( chb2st_kernels , CHB2ST_KERNELS )
#define F77_chbev_2stage F77_FUNC( chbev_2stage , CHBEV_2STAGE )
#define F77_chbevd_2stage F77_FUNC( chbevd_2stage , CHBEVD_2STAGE )
#define F77_chbevd F77_FUNC( chbevd , CHBEVD )
#define F77_chbev F77_FUNC( chbev , CHBEV )
#define F77_chbevx_2stage F77_FUNC( chbevx_2stage , CHBEVX_2STAGE )
#define F77_chbevx F77_FUNC( chbevx , CHBEVX )
#define F77_chbgst F77_FUNC( chbgst , CHBGST )
#define F77_chbgvd F77_FUNC( chbgvd , CHBGVD )
#define F77_chbgv F77_FUNC( chbgv , CHBGV )
#define F77_chbgvx F77_FUNC( chbgvx , CHBGVX )
#define F77_chbtrd F77_FUNC( chbtrd , CHBTRD )
#define F77_checon_3 F77_FUNC( checon_3 , CHECON_3 )
#define F77_checon F77_FUNC( checon , CHECON )
#define F77_checon_rook F77_FUNC( checon_rook , CHECON_ROOK )
#define F77_cheequb F77_FUNC( cheequb , CHEEQUB )
#define F77_cheev_2stage F77_FUNC( cheev_2stage , CHEEV_2STAGE )
#define F77_cheevd_2stage F77_FUNC( cheevd_2stage , CHEEVD_2STAGE )
#define F77_cheevd F77_FUNC( cheevd , CHEEVD )
#define F77_cheev  F77_FUNC( cheev  , CHEEV  )
#define F77_cheev F77_FUNC( cheev , CHEEV )
#define F77_cheevr_2stage F77_FUNC( cheevr_2stage , CHEEVR_2STAGE )
#define F77_cheevr F77_FUNC( cheevr , CHEEVR )
#define F77_cheevx_2stage F77_FUNC( cheevx_2stage , CHEEVX_2STAGE )
#define F77_cheevx F77_FUNC( cheevx , CHEEVX )
#define F77_chegs2 F77_FUNC( chegs2 , CHEGS2 )
#define F77_chegst F77_FUNC( chegst , CHEGST )
#define F77_chegv_2stage F77_FUNC( chegv_2stage , CHEGV_2STAGE )
#define F77_chegvd F77_FUNC( chegvd , CHEGVD )
#define F77_chegv F77_FUNC( chegv , CHEGV )
#define F77_chegvx F77_FUNC( chegvx , CHEGVX )
#define F77_cherfs F77_FUNC( cherfs , CHERFS )
#define F77_cherfsx F77_FUNC( cherfsx , CHERFSX )
#define F77_chesv_aa_2stage F77_FUNC( chesv_aa_2stage , CHESV_AA_2STAGE )
#define F77_chesv_aa F77_FUNC( chesv_aa , CHESV_AA )
#define F77_chesv F77_FUNC( chesv , CHESV )
#define F77_chesv_rk F77_FUNC( chesv_rk , CHESV_RK )
#define F77_chesv_rook F77_FUNC( chesv_rook , CHESV_ROOK )
#define F77_chesvx F77_FUNC( chesvx , CHESVX )
#define F77_chesvxx F77_FUNC( chesvxx , CHESVXX )
#define F77_cheswapr F77_FUNC( cheswapr , CHESWAPR )
#define F77_chetd2 F77_FUNC( chetd2 , CHETD2 )
#define F77_chetf2 F77_FUNC( chetf2 , CHETF2 )
#define F77_chetf2_rk F77_FUNC( chetf2_rk , CHETF2_RK )
#define F77_chetf2_rook F77_FUNC( chetf2_rook , CHETF2_ROOK )
#define F77_chetrd_2stage F77_FUNC( chetrd_2stage , CHETRD_2STAGE )
#define F77_chetrd F77_FUNC( chetrd , CHETRD )
#define F77_chetrd_hb2st F77_FUNC( chetrd_hb2st , CHETRD_HB2ST )
#define F77_chetrd_he2hb F77_FUNC( chetrd_he2hb , CHETRD_HE2HB )
#define F77_chetrf_aa_2stage F77_FUNC( chetrf_aa_2stage , CHETRF_AA_2STAGE )
#define F77_chetrf_aa F77_FUNC( chetrf_aa , CHETRF_AA )
#define F77_chetrf F77_FUNC( chetrf , CHETRF )
#define F77_chetrf_rk F77_FUNC( chetrf_rk , CHETRF_RK )
#define F77_chetrf_rook F77_FUNC( chetrf_rook , CHETRF_ROOK )
#define F77_chetri2 F77_FUNC( chetri2 , CHETRI2 )
#define F77_chetri2x F77_FUNC( chetri2x , CHETRI2X )
#define F77_chetri_3 F77_FUNC( chetri_3 , CHETRI_3 )
#define F77_chetri_3x F77_FUNC( chetri_3x , CHETRI_3X )
#define F77_chetri F77_FUNC( chetri , CHETRI )
#define F77_chetri_rook F77_FUNC( chetri_rook , CHETRI_ROOK )
#define F77_chetrs2 F77_FUNC( chetrs2 , CHETRS2 )
#define F77_chetrs_3 F77_FUNC( chetrs_3 , CHETRS_3 )
#define F77_chetrs_aa_2stage F77_FUNC( chetrs_aa_2stage , CHETRS_AA_2STAGE )
#define F77_chetrs_aa F77_FUNC( chetrs_aa , CHETRS_AA )
#define F77_chetrs F77_FUNC( chetrs , CHETRS )
#define F77_chetrs_rook F77_FUNC( chetrs_rook , CHETRS_ROOK )
#define F77_chfrk F77_FUNC( chfrk , CHFRK )
#define F77_chgeqz F77_FUNC( chgeqz , CHGEQZ )
#define F77_chla_transtype F77_FUNC( chla_transtype , CHLA_TRANSTYPE )
#define F77_chpcon F77_FUNC( chpcon , CHPCON )
#define F77_chpevd F77_FUNC( chpevd , CHPEVD )
#define F77_chpev F77_FUNC( chpev , CHPEV )
#define F77_chpevx F77_FUNC( chpevx , CHPEVX )
#define F77_chpgst F77_FUNC( chpgst , CHPGST )
#define F77_chpgvd F77_FUNC( chpgvd , CHPGVD )
#define F77_chpgv F77_FUNC( chpgv , CHPGV )
#define F77_chpgvx F77_FUNC( chpgvx , CHPGVX )
#define F77_chprfs F77_FUNC( chprfs , CHPRFS )
#define F77_chpsv F77_FUNC( chpsv , CHPSV )
#define F77_chpsvx F77_FUNC( chpsvx , CHPSVX )
#define F77_chptrd F77_FUNC( chptrd , CHPTRD )
#define F77_chptrf F77_FUNC( chptrf , CHPTRF )
#define F77_chptri F77_FUNC( chptri , CHPTRI )
#define F77_chptrs F77_FUNC( chptrs , CHPTRS )
#define F77_chsein F77_FUNC( chsein , CHSEIN )
#define F77_chseqr F77_FUNC( chseqr , CHSEQR )
#define F77_clabrd F77_FUNC( clabrd , CLABRD )
#define F77_clacgv F77_FUNC( clacgv , CLACGV )
#define F77_clacn2 F77_FUNC( clacn2 , CLACN2 )
#define F77_clacon F77_FUNC( clacon , CLACON )
#define F77_clacp2 F77_FUNC( clacp2 , CLACP2 )
#define F77_clacpy F77_FUNC( clacpy , CLACPY )
#define F77_clacrm F77_FUNC( clacrm , CLACRM )
#define F77_clacrt F77_FUNC( clacrt , CLACRT )
#define F77_cladiv F77_FUNC( cladiv , CLADIV )
#define F77_claed0 F77_FUNC( claed0 , CLAED0 )
#define F77_claed7 F77_FUNC( claed7 , CLAED7 )
#define F77_claed8 F77_FUNC( claed8 , CLAED8 )
#define F77_claein F77_FUNC( claein , CLAEIN )
#define F77_claesy F77_FUNC( claesy , CLAESY )
#define F77_claev2 F77_FUNC( claev2 , CLAEV2 )
#define F77_clag2z F77_FUNC( clag2z , CLAG2Z )
#define F77_cla_gbamv F77_FUNC( cla_gbamv , CLA_GBAMV )
#define F77_cla_gbrcond_c F77_FUNC( cla_gbrcond_c , CLA_GBRCOND_C )
#define F77_cla_gbrcond_x F77_FUNC( cla_gbrcond_x , CLA_GBRCOND_X )
#define F77_cla_gbrfsx_extended F77_FUNC( cla_gbrfsx_extended , CLA_GBRFSX_EXTENDED )
#define F77_cla_gbrpvgrw F77_FUNC( cla_gbrpvgrw , CLA_GBRPVGRW )
#define F77_cla_geamv F77_FUNC( cla_geamv , CLA_GEAMV )
#define F77_cla_gercond_c F77_FUNC( cla_gercond_c , CLA_GERCOND_C )
#define F77_cla_gercond_x F77_FUNC( cla_gercond_x , CLA_GERCOND_X )
#define F77_cla_gerfsx_extended F77_FUNC( cla_gerfsx_extended , CLA_GERFSX_EXTENDED )
#define F77_cla_gerpvgrw F77_FUNC( cla_gerpvgrw , CLA_GERPVGRW )
#define F77_clags2 F77_FUNC( clags2 , CLAGS2 )
#define F77_clagtm F77_FUNC( clagtm , CLAGTM )
#define F77_cla_heamv F77_FUNC( cla_heamv , CLA_HEAMV )
#define F77_clahef_aa F77_FUNC( clahef_aa , CLAHEF_AA )
#define F77_clahef F77_FUNC( clahef , CLAHEF )
#define F77_clahef_rk F77_FUNC( clahef_rk , CLAHEF_RK )
#define F77_clahef_rook F77_FUNC( clahef_rook , CLAHEF_ROOK )
#define F77_cla_hercond_c F77_FUNC( cla_hercond_c , CLA_HERCOND_C )
#define F77_cla_hercond_x F77_FUNC( cla_hercond_x , CLA_HERCOND_X )
#define F77_cla_herfsx_extended F77_FUNC( cla_herfsx_extended , CLA_HERFSX_EXTENDED )
#define F77_cla_herpvgrw F77_FUNC( cla_herpvgrw , CLA_HERPVGRW )
#define F77_clahqr F77_FUNC( clahqr , CLAHQR )
#define F77_clahr2 F77_FUNC( clahr2 , CLAHR2 )
#define F77_clahrd F77_FUNC( clahrd , CLAHRD )
#define F77_claic1 F77_FUNC( claic1 , CLAIC1 )
#define F77_cla_lin_berr F77_FUNC( cla_lin_berr , CLA_LIN_BERR )
#define F77_clals0 F77_FUNC( clals0 , CLALS0 )
#define F77_clalsa F77_FUNC( clalsa , CLALSA )
#define F77_clalsd F77_FUNC( clalsd , CLALSD )
#define F77_clamswlq F77_FUNC( clamswlq , CLAMSWLQ )
#define F77_clamtsqr F77_FUNC( clamtsqr , CLAMTSQR )
#define F77_clangb F77_FUNC( clangb , CLANGB )
#define F77_clange F77_FUNC( clange , CLANGE )
#define F77_clangt F77_FUNC( clangt , CLANGT )
#define F77_clanhb F77_FUNC( clanhb , CLANHB )
#define F77_clanhe F77_FUNC( clanhe , CLANHE )
#define F77_clanhf F77_FUNC( clanhf , CLANHF )
#define F77_clanhp F77_FUNC( clanhp , CLANHP )
#define F77_clanhs F77_FUNC( clanhs , CLANHS )
#define F77_clanht F77_FUNC( clanht , CLANHT )
#define F77_clansb F77_FUNC( clansb , CLANSB )
#define F77_clansp F77_FUNC( clansp , CLANSP )
#define F77_clansy F77_FUNC( clansy , CLANSY )
#define F77_clantb F77_FUNC( clantb , CLANTB )
#define F77_clantp F77_FUNC( clantp , CLANTP )
#define F77_clantr F77_FUNC( clantr , CLANTR )
#define F77_clapll F77_FUNC( clapll , CLAPLL )
#define F77_clapmr F77_FUNC( clapmr , CLAPMR )
#define F77_clapmt F77_FUNC( clapmt , CLAPMT )
#define F77_cla_porcond_c F77_FUNC( cla_porcond_c , CLA_PORCOND_C )
#define F77_cla_porcond_x F77_FUNC( cla_porcond_x , CLA_PORCOND_X )
#define F77_cla_porfsx_extended F77_FUNC( cla_porfsx_extended , CLA_PORFSX_EXTENDED )
#define F77_cla_porpvgrw F77_FUNC( cla_porpvgrw , CLA_PORPVGRW )
#define F77_claqgb F77_FUNC( claqgb , CLAQGB )
#define F77_claqge F77_FUNC( claqge , CLAQGE )
#define F77_claqhb F77_FUNC( claqhb , CLAQHB )
#define F77_claqhe F77_FUNC( claqhe , CLAQHE )
#define F77_claqhp F77_FUNC( claqhp , CLAQHP )
#define F77_claqp2 F77_FUNC( claqp2 , CLAQP2 )
#define F77_claqps F77_FUNC( claqps , CLAQPS )
#define F77_claqr0 F77_FUNC( claqr0 , CLAQR0 )
#define F77_claqr1 F77_FUNC( claqr1 , CLAQR1 )
#define F77_claqr2 F77_FUNC( claqr2 , CLAQR2 )
#define F77_claqr3 F77_FUNC( claqr3 , CLAQR3 )
#define F77_claqr4 F77_FUNC( claqr4 , CLAQR4 )
#define F77_claqr5 F77_FUNC( claqr5 , CLAQR5 )
#define F77_claqsb F77_FUNC( claqsb , CLAQSB )
#define F77_claqsp F77_FUNC( claqsp , CLAQSP )
#define F77_claqsy F77_FUNC( claqsy , CLAQSY )
#define F77_clar1v F77_FUNC( clar1v , CLAR1V )
#define F77_clar2v F77_FUNC( clar2v , CLAR2V )
#define F77_clarcm F77_FUNC( clarcm , CLARCM )
#define F77_clarfb F77_FUNC( clarfb , CLARFB )
#define F77_clarf F77_FUNC( clarf , CLARF )
#define F77_clarfg F77_FUNC( clarfg , CLARFG )
#define F77_clarfgp F77_FUNC( clarfgp , CLARFGP )
#define F77_clarft F77_FUNC( clarft , CLARFT )
#define F77_clarfx F77_FUNC( clarfx , CLARFX )
#define F77_clarfy F77_FUNC( clarfy , CLARFY )
#define F77_clargv F77_FUNC( clargv , CLARGV )
#define F77_clarnv F77_FUNC( clarnv , CLARNV )
#define F77_clarrv F77_FUNC( clarrv , CLARRV )
#define F77_clarscl2 F77_FUNC( clarscl2 , CLARSCL2 )
#define F77_clartg F77_FUNC( clartg , CLARTG )
#define F77_clartv F77_FUNC( clartv , CLARTV )
#define F77_clarzb F77_FUNC( clarzb , CLARZB )
#define F77_clarz F77_FUNC( clarz , CLARZ )
#define F77_clarzt F77_FUNC( clarzt , CLARZT )
#define F77_clascl2 F77_FUNC( clascl2 , CLASCL2 )
#define F77_clascl F77_FUNC( clascl , CLASCL )
#define F77_claset F77_FUNC( claset , CLASET )
#define F77_clasr F77_FUNC( clasr , CLASR )
#define F77_classq F77_FUNC( classq , CLASSQ )
#define F77_claswlq F77_FUNC( claswlq , CLASWLQ )
#define F77_claswp F77_FUNC( claswp , CLASWP )
#define F77_cla_syamv F77_FUNC( cla_syamv , CLA_SYAMV )
#define F77_clasyf_aa F77_FUNC( clasyf_aa , CLASYF_AA )
#define F77_clasyf F77_FUNC( clasyf , CLASYF )
#define F77_clasyf_rk F77_FUNC( clasyf_rk , CLASYF_RK )
#define F77_clasyf_rook F77_FUNC( clasyf_rook , CLASYF_ROOK )
#define F77_cla_syrcond_c F77_FUNC( cla_syrcond_c , CLA_SYRCOND_C )
#define F77_cla_syrcond_x F77_FUNC( cla_syrcond_x , CLA_SYRCOND_X )
#define F77_cla_syrfsx_extended F77_FUNC( cla_syrfsx_extended , CLA_SYRFSX_EXTENDED )
#define F77_cla_syrpvgrw F77_FUNC( cla_syrpvgrw , CLA_SYRPVGRW )
#define F77_clatbs F77_FUNC( clatbs , CLATBS )
#define F77_clatdf F77_FUNC( clatdf , CLATDF )
#define F77_clatps F77_FUNC( clatps , CLATPS )
#define F77_clatrd F77_FUNC( clatrd , CLATRD )
#define F77_clatrs F77_FUNC( clatrs , CLATRS )
#define F77_clatrz F77_FUNC( clatrz , CLATRZ )
#define F77_clatsqr F77_FUNC( clatsqr , CLATSQR )
#define F77_clatzm F77_FUNC( clatzm , CLATZM )
#define F77_claunhr_col_getrfnp2 F77_FUNC( claunhr_col_getrfnp2 , CLAUNHR_COL_GETRFNP2 )
#define F77_claunhr_col_getrfnp F77_FUNC( claunhr_col_getrfnp , CLAUNHR_COL_GETRFNP )
#define F77_clauu2 F77_FUNC( clauu2 , CLAUU2 )
#define F77_clauum F77_FUNC( clauum , CLAUUM )
#define F77_cla_wwaddw F77_FUNC( cla_wwaddw , CLA_WWADDW )
#define F77_cpbcon F77_FUNC( cpbcon , CPBCON )
#define F77_cpbequ F77_FUNC( cpbequ , CPBEQU )
#define F77_cpbrfs F77_FUNC( cpbrfs , CPBRFS )
#define F77_cpbstf F77_FUNC( cpbstf , CPBSTF )
#define F77_cpbsv F77_FUNC( cpbsv , CPBSV )
#define F77_cpbsvx F77_FUNC( cpbsvx , CPBSVX )
#define F77_cpbtf2 F77_FUNC( cpbtf2 , CPBTF2 )
#define F77_cpbtrf F77_FUNC( cpbtrf , CPBTRF )
#define F77_cpbtrs F77_FUNC( cpbtrs , CPBTRS )
#define F77_cpftrf F77_FUNC( cpftrf , CPFTRF )
#define F77_cpftri F77_FUNC( cpftri , CPFTRI )
#define F77_cpftrs F77_FUNC( cpftrs , CPFTRS )
#define F77_cpocon F77_FUNC( cpocon , CPOCON )
#define F77_cpoequb F77_FUNC( cpoequb , CPOEQUB )
#define F77_cpoequ F77_FUNC( cpoequ , CPOEQU )
#define F77_cporfs F77_FUNC( cporfs , CPORFS )
#define F77_cporfsx F77_FUNC( cporfsx , CPORFSX )
#define F77_cposv F77_FUNC( cposv , CPOSV )
#define F77_cposvx F77_FUNC( cposvx , CPOSVX )
#define F77_cposvxx F77_FUNC( cposvxx , CPOSVXX )
#define F77_cpotf2 F77_FUNC( cpotf2 , CPOTF2 )
#define F77_cpotrf2 F77_FUNC( cpotrf2 , CPOTRF2 )
#define F77_cpotrf F77_FUNC( cpotrf , CPOTRF )
#define F77_cpotri F77_FUNC( cpotri , CPOTRI )
#define F77_cpotrs F77_FUNC( cpotrs , CPOTRS )
#define F77_cppcon F77_FUNC( cppcon , CPPCON )
#define F77_cppequ F77_FUNC( cppequ , CPPEQU )
#define F77_cpprfs F77_FUNC( cpprfs , CPPRFS )
#define F77_cppsv F77_FUNC( cppsv , CPPSV )
#define F77_cppsvx F77_FUNC( cppsvx , CPPSVX )
#define F77_cpptrf F77_FUNC( cpptrf , CPPTRF )
#define F77_cpptri F77_FUNC( cpptri , CPPTRI )
#define F77_cpptrs F77_FUNC( cpptrs , CPPTRS )
#define F77_cpstf2 F77_FUNC( cpstf2 , CPSTF2 )
#define F77_cpstrf F77_FUNC( cpstrf , CPSTRF )
#define F77_cptcon F77_FUNC( cptcon , CPTCON )
#define F77_cpteqr F77_FUNC( cpteqr , CPTEQR )
#define F77_cptrfs F77_FUNC( cptrfs , CPTRFS )
#define F77_cptsv F77_FUNC( cptsv , CPTSV )
#define F77_cptsvx F77_FUNC( cptsvx , CPTSVX )
#define F77_cpttrf F77_FUNC( cpttrf , CPTTRF )
#define F77_cpttrs F77_FUNC( cpttrs , CPTTRS )
#define F77_cptts2 F77_FUNC( cptts2 , CPTTS2 )
#define F77_crot F77_FUNC( crot , CROT )
#define F77_cspcon F77_FUNC( cspcon , CSPCON )
#define F77_cspmv F77_FUNC( cspmv , CSPMV )
#define F77_cspr F77_FUNC( cspr , CSPR )
#define F77_csprfs F77_FUNC( csprfs , CSPRFS )
#define F77_cspsv F77_FUNC( cspsv , CSPSV )
#define F77_cspsvx F77_FUNC( cspsvx , CSPSVX )
#define F77_csptrf F77_FUNC( csptrf , CSPTRF )
#define F77_csptri F77_FUNC( csptri , CSPTRI )
#define F77_csptrs F77_FUNC( csptrs , CSPTRS )
#define F77_csrscl F77_FUNC( csrscl , CSRSCL )
#define F77_cstedc F77_FUNC( cstedc , CSTEDC )
#define F77_cstegr F77_FUNC( cstegr , CSTEGR )
#define F77_cstein F77_FUNC( cstein , CSTEIN )
#define F77_cstemr F77_FUNC( cstemr , CSTEMR )
#define F77_csteqr F77_FUNC( csteqr , CSTEQR )
#define F77_csycon_3 F77_FUNC( csycon_3 , CSYCON_3 )
#define F77_csycon F77_FUNC( csycon , CSYCON )
#define F77_csycon_rook F77_FUNC( csycon_rook , CSYCON_ROOK )
#define F77_csyconv F77_FUNC( csyconv , CSYCONV )
#define F77_csyconvf F77_FUNC( csyconvf , CSYCONVF )
#define F77_csyconvf_rook F77_FUNC( csyconvf_rook , CSYCONVF_ROOK )
#define F77_csyequb F77_FUNC( csyequb , CSYEQUB )
#define F77_csymv F77_FUNC( csymv , CSYMV )
#define F77_csyr F77_FUNC( csyr , CSYR )
#define F77_csyrfs F77_FUNC( csyrfs , CSYRFS )
#define F77_csyrfsx F77_FUNC( csyrfsx , CSYRFSX )
#define F77_csysv_aa_2stage F77_FUNC( csysv_aa_2stage , CSYSV_AA_2STAGE )
#define F77_csysv_aa F77_FUNC( csysv_aa , CSYSV_AA )
#define F77_csysv F77_FUNC( csysv , CSYSV )
#define F77_csysv_rk F77_FUNC( csysv_rk , CSYSV_RK )
#define F77_csysv_rook F77_FUNC( csysv_rook , CSYSV_ROOK )
#define F77_csysvx F77_FUNC( csysvx , CSYSVX )
#define F77_csysvxx F77_FUNC( csysvxx , CSYSVXX )
#define F77_csyswapr F77_FUNC( csyswapr , CSYSWAPR )
#define F77_csytf2 F77_FUNC( csytf2 , CSYTF2 )
#define F77_csytf2_rk F77_FUNC( csytf2_rk , CSYTF2_RK )
#define F77_csytf2_rook F77_FUNC( csytf2_rook , CSYTF2_ROOK )
#define F77_csytrf_aa_2stage F77_FUNC( csytrf_aa_2stage , CSYTRF_AA_2STAGE )
#define F77_csytrf_aa F77_FUNC( csytrf_aa , CSYTRF_AA )
#define F77_csytrf F77_FUNC( csytrf , CSYTRF )
#define F77_csytrf_rk F77_FUNC( csytrf_rk , CSYTRF_RK )
#define F77_csytrf_rook F77_FUNC( csytrf_rook , CSYTRF_ROOK )
#define F77_csytri2 F77_FUNC( csytri2 , CSYTRI2 )
#define F77_csytri2x F77_FUNC( csytri2x , CSYTRI2X )
#define F77_csytri_3 F77_FUNC( csytri_3 , CSYTRI_3 )
#define F77_csytri_3x F77_FUNC( csytri_3x , CSYTRI_3X )
#define F77_csytri F77_FUNC( csytri , CSYTRI )
#define F77_csytri_rook F77_FUNC( csytri_rook , CSYTRI_ROOK )
#define F77_csytrs2 F77_FUNC( csytrs2 , CSYTRS2 )
#define F77_csytrs_3 F77_FUNC( csytrs_3 , CSYTRS_3 )
#define F77_csytrs_aa_2stage F77_FUNC( csytrs_aa_2stage , CSYTRS_AA_2STAGE )
#define F77_csytrs_aa F77_FUNC( csytrs_aa , CSYTRS_AA )
#define F77_csytrs F77_FUNC( csytrs , CSYTRS )
#define F77_csytrs_rook F77_FUNC( csytrs_rook , CSYTRS_ROOK )
#define F77_ctbcon F77_FUNC( ctbcon , CTBCON )
#define F77_ctbrfs F77_FUNC( ctbrfs , CTBRFS )
#define F77_ctbtrs F77_FUNC( ctbtrs , CTBTRS )
#define F77_ctfsm F77_FUNC( ctfsm , CTFSM )
#define F77_ctftri F77_FUNC( ctftri , CTFTRI )
#define F77_ctfttp F77_FUNC( ctfttp , CTFTTP )
#define F77_ctfttr F77_FUNC( ctfttr , CTFTTR )
#define F77_ctgevc F77_FUNC( ctgevc , CTGEVC )
#define F77_ctgex2 F77_FUNC( ctgex2 , CTGEX2 )
#define F77_ctgexc F77_FUNC( ctgexc , CTGEXC )
#define F77_ctgsen F77_FUNC( ctgsen , CTGSEN )
#define F77_ctgsja F77_FUNC( ctgsja , CTGSJA )
#define F77_ctgsna F77_FUNC( ctgsna , CTGSNA )
#define F77_ctgsy2 F77_FUNC( ctgsy2 , CTGSY2 )
#define F77_ctgsyl F77_FUNC( ctgsyl , CTGSYL )
#define F77_ctpcon F77_FUNC( ctpcon , CTPCON )
#define F77_ctplqt2 F77_FUNC( ctplqt2 , CTPLQT2 )
#define F77_ctplqt F77_FUNC( ctplqt , CTPLQT )
#define F77_ctpmlqt F77_FUNC( ctpmlqt , CTPMLQT )
#define F77_ctpmqrt F77_FUNC( ctpmqrt , CTPMQRT )
#define F77_ctpqrt2 F77_FUNC( ctpqrt2 , CTPQRT2 )
#define F77_ctpqrt F77_FUNC( ctpqrt , CTPQRT )
#define F77_ctprfb F77_FUNC( ctprfb , CTPRFB )
#define F77_ctprfs F77_FUNC( ctprfs , CTPRFS )
#define F77_ctptri F77_FUNC( ctptri , CTPTRI )
#define F77_ctptrs F77_FUNC( ctptrs , CTPTRS )
#define F77_ctpttf F77_FUNC( ctpttf , CTPTTF )
#define F77_ctpttr F77_FUNC( ctpttr , CTPTTR )
#define F77_ctrcon F77_FUNC( ctrcon , CTRCON )
#define F77_ctrevc3 F77_FUNC( ctrevc3 , CTREVC3 )
#define F77_ctrevc F77_FUNC( ctrevc , CTREVC )
#define F77_ctrexc F77_FUNC( ctrexc , CTREXC )
#define F77_ctrrfs F77_FUNC( ctrrfs , CTRRFS )
#define F77_ctrsen F77_FUNC( ctrsen , CTRSEN )
#define F77_ctrsna F77_FUNC( ctrsna , CTRSNA )
#define F77_ctrsyl F77_FUNC( ctrsyl , CTRSYL )
#define F77_ctrti2 F77_FUNC( ctrti2 , CTRTI2 )
#define F77_ctrtri F77_FUNC( ctrtri , CTRTRI )
#define F77_ctrtrs F77_FUNC( ctrtrs , CTRTRS )
#define F77_ctrttf F77_FUNC( ctrttf , CTRTTF )
#define F77_ctrttp F77_FUNC( ctrttp , CTRTTP )
#define F77_ctzrqf F77_FUNC( ctzrqf , CTZRQF )
#define F77_ctzrzf F77_FUNC( ctzrzf , CTZRZF )
#define F77_cunbdb1 F77_FUNC( cunbdb1 , CUNBDB1 )
#define F77_cunbdb2 F77_FUNC( cunbdb2 , CUNBDB2 )
#define F77_cunbdb3 F77_FUNC( cunbdb3 , CUNBDB3 )
#define F77_cunbdb4 F77_FUNC( cunbdb4 , CUNBDB4 )
#define F77_cunbdb5 F77_FUNC( cunbdb5 , CUNBDB5 )
#define F77_cunbdb6 F77_FUNC( cunbdb6 , CUNBDB6 )
#define F77_cunbdb F77_FUNC( cunbdb , CUNBDB )
#define F77_cuncsd2by1 F77_FUNC( cuncsd2by1 , CUNCSD2BY1 )
#define F77_cuncsd F77_FUNC( cuncsd , CUNCSD )
#define F77_cung2l F77_FUNC( cung2l , CUNG2L )
#define F77_cung2r F77_FUNC( cung2r , CUNG2R )
#define F77_cungbr F77_FUNC( cungbr , CUNGBR )
#define F77_cunghr F77_FUNC( cunghr , CUNGHR )
#define F77_cungl2 F77_FUNC( cungl2 , CUNGL2 )
#define F77_cunglq F77_FUNC( cunglq , CUNGLQ )
#define F77_cungql F77_FUNC( cungql , CUNGQL )
#define F77_cungqr F77_FUNC( cungqr , CUNGQR )
#define F77_cungr2 F77_FUNC( cungr2 , CUNGR2 )
#define F77_cungrq F77_FUNC( cungrq , CUNGRQ )
#define F77_cungtr F77_FUNC( cungtr , CUNGTR )
#define F77_cungtsqr F77_FUNC( cungtsqr , CUNGTSQR )
#define F77_cunhr_col F77_FUNC( cunhr_col , CUNHR_COL )
#define F77_cunm22 F77_FUNC( cunm22 , CUNM22 )
#define F77_cunm2l F77_FUNC( cunm2l , CUNM2L )
#define F77_cunm2r F77_FUNC( cunm2r , CUNM2R )
#define F77_cunmbr F77_FUNC( cunmbr , CUNMBR )
#define F77_cunmhr F77_FUNC( cunmhr , CUNMHR )
#define F77_cunml2 F77_FUNC( cunml2 , CUNML2 )
#define F77_cunmlq F77_FUNC( cunmlq , CUNMLQ )
#define F77_cunmql F77_FUNC( cunmql , CUNMQL )
#define F77_cunmqr F77_FUNC( cunmqr , CUNMQR )
#define F77_cunmr2 F77_FUNC( cunmr2 , CUNMR2 )
#define F77_cunmr3 F77_FUNC( cunmr3 , CUNMR3 )
#define F77_cunmrq F77_FUNC( cunmrq , CUNMRQ )
#define F77_cunmrz F77_FUNC( cunmrz , CUNMRZ )
#define F77_cunmtr F77_FUNC( cunmtr , CUNMTR )
#define F77_cupgtr F77_FUNC( cupgtr , CUPGTR )
#define F77_cupmtr F77_FUNC( cupmtr , CUPMTR )
#define F77_dbbcsd F77_FUNC( dbbcsd , DBBCSD )
#define F77_dbdsdc F77_FUNC( dbdsdc , DBDSDC )
#define F77_dbdsqr F77_FUNC( dbdsqr , DBDSQR )
#define F77_dbdsvdx F77_FUNC( dbdsvdx , DBDSVDX )
#define F77_dcombssq F77_FUNC( dcombssq , DCOMBSSQ )
#define F77_ddisna F77_FUNC( ddisna , DDISNA )
#define F77_dgbbrd F77_FUNC( dgbbrd , DGBBRD )
#define F77_dgbcon F77_FUNC( dgbcon , DGBCON )
#define F77_dgbequb F77_FUNC( dgbequb , DGBEQUB )
#define F77_dgbequ F77_FUNC( dgbequ , DGBEQU )
#define F77_dgbrfs F77_FUNC( dgbrfs , DGBRFS )
#define F77_dgbrfsx F77_FUNC( dgbrfsx , DGBRFSX )
#define F77_dgbsv F77_FUNC( dgbsv , DGBSV )
#define F77_dgbsvx F77_FUNC( dgbsvx , DGBSVX )
#define F77_dgbsvxx F77_FUNC( dgbsvxx , DGBSVXX )
#define F77_dgbtf2 F77_FUNC( dgbtf2 , DGBTF2 )
#define F77_dgbtrf F77_FUNC( dgbtrf , DGBTRF )
#define F77_dgbtrs F77_FUNC( dgbtrs , DGBTRS )
#define F77_dgebak F77_FUNC( dgebak , DGEBAK )
#define F77_dgebal F77_FUNC( dgebal , DGEBAL )
#define F77_dgebd2 F77_FUNC( dgebd2 , DGEBD2 )
#define F77_dgebrd F77_FUNC( dgebrd , DGEBRD )
#define F77_dgecon F77_FUNC( dgecon , DGECON )
#define F77_dgeequb F77_FUNC( dgeequb , DGEEQUB )
#define F77_dgeequ F77_FUNC( dgeequ , DGEEQU )
#define F77_dgees F77_FUNC( dgees , DGEES )
#define F77_dgeesx F77_FUNC( dgeesx , DGEESX )
#define F77_dgeev F77_FUNC( dgeev , DGEEV )
#define F77_dgeevx F77_FUNC( dgeevx , DGEEVX )
#define F77_dgegs F77_FUNC( dgegs , DGEGS )
#define F77_dgegv F77_FUNC( dgegv , DGEGV )
#define F77_dgehd2 F77_FUNC( dgehd2 , DGEHD2 )
#define F77_dgehrd F77_FUNC( dgehrd , DGEHRD )
#define F77_dgejsv F77_FUNC( dgejsv , DGEJSV )
#define F77_dgelq2 F77_FUNC( dgelq2 , DGELQ2 )
#define F77_dgelq F77_FUNC( dgelq , DGELQ )
#define F77_dgelqf F77_FUNC( dgelqf , DGELQF )
#define F77_dgelqt3 F77_FUNC( dgelqt3 , DGELQT3 )
#define F77_dgelqt F77_FUNC( dgelqt , DGELQT )
#define F77_dgelsd F77_FUNC( dgelsd , DGELSD )
#define F77_dgels F77_FUNC( dgels , DGELS )
#define F77_dgelss F77_FUNC( dgelss , DGELSS )
#define F77_dgelsx F77_FUNC( dgelsx , DGELSX )
#define F77_dgelsy F77_FUNC( dgelsy , DGELSY )
#define F77_dgemlq F77_FUNC( dgemlq , DGEMLQ )
#define F77_dgemlqt F77_FUNC( dgemlqt , DGEMLQT )
#define F77_dgemqr F77_FUNC( dgemqr , DGEMQR )
#define F77_dgemqrt F77_FUNC( dgemqrt , DGEMQRT )
#define F77_dgeql2 F77_FUNC( dgeql2 , DGEQL2 )
#define F77_dgeqlf F77_FUNC( dgeqlf , DGEQLF )
#define F77_dgeqp3 F77_FUNC( dgeqp3 , DGEQP3 )
#define F77_dgeqpf F77_FUNC( dgeqpf , DGEQPF )
#define F77_dgeqr2 F77_FUNC( dgeqr2 , DGEQR2 )
#define F77_dgeqr2p F77_FUNC( dgeqr2p , DGEQR2P )
#define F77_dgeqr F77_FUNC( dgeqr , DGEQR )
#define F77_dgeqrf F77_FUNC( dgeqrf , DGEQRF )
#define F77_dgeqrfp F77_FUNC( dgeqrfp , DGEQRFP )
#define F77_dgeqrt2 F77_FUNC( dgeqrt2 , DGEQRT2 )
#define F77_dgeqrt3 F77_FUNC( dgeqrt3 , DGEQRT3 )
#define F77_dgeqrt F77_FUNC( dgeqrt , DGEQRT )
#define F77_dgerfs F77_FUNC( dgerfs , DGERFS )
#define F77_dgerfsx F77_FUNC( dgerfsx , DGERFSX )
#define F77_dgerq2 F77_FUNC( dgerq2 , DGERQ2 )
#define F77_dgerqf F77_FUNC( dgerqf , DGERQF )
#define F77_dgesc2 F77_FUNC( dgesc2 , DGESC2 )
#define F77_dgesdd F77_FUNC( dgesdd , DGESDD )
#define F77_dgesvd F77_FUNC( dgesvd , DGESVD )
#define F77_dgesvdq F77_FUNC( dgesvdq , DGESVDQ )
#define F77_dgesvdx F77_FUNC( dgesvdx , DGESVDX )
#define F77_dgesv F77_FUNC( dgesv , DGESV )
#define F77_dgesvj F77_FUNC( dgesvj , DGESVJ )
#define F77_dgesvx F77_FUNC( dgesvx , DGESVX )
#define F77_dgesvxx F77_FUNC( dgesvxx , DGESVXX )
#define F77_dgetc2 F77_FUNC( dgetc2 , DGETC2 )
#define F77_dgetf2 F77_FUNC( dgetf2 , DGETF2 )
#define F77_dgetrf2 F77_FUNC( dgetrf2 , DGETRF2 )
#define F77_dgetrf F77_FUNC( dgetrf , DGETRF )
#define F77_dgetri F77_FUNC( dgetri , DGETRI )
#define F77_dgetrs F77_FUNC( dgetrs , DGETRS )
#define F77_dgetsls F77_FUNC( dgetsls , DGETSLS )
#define F77_dggbak F77_FUNC( dggbak , DGGBAK )
#define F77_dggbal F77_FUNC( dggbal , DGGBAL )
#define F77_dgges3 F77_FUNC( dgges3 , DGGES3 )
#define F77_dgges F77_FUNC( dgges , DGGES )
#define F77_dggesx F77_FUNC( dggesx , DGGESX )
#define F77_dggev3 F77_FUNC( dggev3 , DGGEV3 )
#define F77_dggev F77_FUNC( dggev , DGGEV )
#define F77_dggevx F77_FUNC( dggevx , DGGEVX )
#define F77_dggglm F77_FUNC( dggglm , DGGGLM )
#define F77_dgghd3 F77_FUNC( dgghd3 , DGGHD3 )
#define F77_dgghrd F77_FUNC( dgghrd , DGGHRD )
#define F77_dgglse F77_FUNC( dgglse , DGGLSE )
#define F77_dggqrf F77_FUNC( dggqrf , DGGQRF )
#define F77_dggrqf F77_FUNC( dggrqf , DGGRQF )
#define F77_dggsvd3 F77_FUNC( dggsvd3 , DGGSVD3 )
#define F77_dggsvd F77_FUNC( dggsvd , DGGSVD )
#define F77_dggsvp3 F77_FUNC( dggsvp3 , DGGSVP3 )
#define F77_dggsvp F77_FUNC( dggsvp , DGGSVP )
#define F77_dgsvj0 F77_FUNC( dgsvj0 , DGSVJ0 )
#define F77_dgsvj1 F77_FUNC( dgsvj1 , DGSVJ1 )
#define F77_dgtcon F77_FUNC( dgtcon , DGTCON )
#define F77_dgtrfs F77_FUNC( dgtrfs , DGTRFS )
#define F77_dgtsv F77_FUNC( dgtsv , DGTSV )
#define F77_dgtsvx F77_FUNC( dgtsvx , DGTSVX )
#define F77_dgttrf F77_FUNC( dgttrf , DGTTRF )
#define F77_dgttrs F77_FUNC( dgttrs , DGTTRS )
#define F77_dgtts2 F77_FUNC( dgtts2 , DGTTS2 )
#define F77_dhgeqz F77_FUNC( dhgeqz , DHGEQZ )
#define F77_dhsein F77_FUNC( dhsein , DHSEIN )
#define F77_dhseqr F77_FUNC( dhseqr , DHSEQR )
#define F77_disnan F77_FUNC( disnan , DISNAN )
#define F77_dlabad F77_FUNC( dlabad , DLABAD )
#define F77_dlabrd F77_FUNC( dlabrd , DLABRD )
#define F77_dlacn2 F77_FUNC( dlacn2 , DLACN2 )
#define F77_dlacon F77_FUNC( dlacon , DLACON )
#define F77_dlacpy F77_FUNC( dlacpy , DLACPY )
#define F77_dladiv F77_FUNC( dladiv , DLADIV )
#define F77_dlae2 F77_FUNC( dlae2 , DLAE2 )
#define F77_dlaebz F77_FUNC( dlaebz , DLAEBZ )
#define F77_dlaed0 F77_FUNC( dlaed0 , DLAED0 )
#define F77_dlaed1 F77_FUNC( dlaed1 , DLAED1 )
#define F77_dlaed2 F77_FUNC( dlaed2 , DLAED2 )
#define F77_dlaed3 F77_FUNC( dlaed3 , DLAED3 )
#define F77_dlaed4 F77_FUNC( dlaed4 , DLAED4 )
#define F77_dlaed5 F77_FUNC( dlaed5 , DLAED5 )
#define F77_dlaed6 F77_FUNC( dlaed6 , DLAED6 )
#define F77_dlaed7 F77_FUNC( dlaed7 , DLAED7 )
#define F77_dlaed8 F77_FUNC( dlaed8 , DLAED8 )
#define F77_dlaed9 F77_FUNC( dlaed9 , DLAED9 )
#define F77_dlaeda F77_FUNC( dlaeda , DLAEDA )
#define F77_dlaein F77_FUNC( dlaein , DLAEIN )
#define F77_dlaev2 F77_FUNC( dlaev2 , DLAEV2 )
#define F77_dlaexc F77_FUNC( dlaexc , DLAEXC )
#define F77_dlag2 F77_FUNC( dlag2 , DLAG2 )
#define F77_dlag2s F77_FUNC( dlag2s , DLAG2S )
#define F77_dla_gbamv F77_FUNC( dla_gbamv , DLA_GBAMV )
#define F77_dla_gbrcond F77_FUNC( dla_gbrcond , DLA_GBRCOND )
#define F77_dla_gbrfsx_extended F77_FUNC( dla_gbrfsx_extended , DLA_GBRFSX_EXTENDED )
#define F77_dla_gbrpvgrw F77_FUNC( dla_gbrpvgrw , DLA_GBRPVGRW )
#define F77_dla_geamv F77_FUNC( dla_geamv , DLA_GEAMV )
#define F77_dla_gercond F77_FUNC( dla_gercond , DLA_GERCOND )
#define F77_dla_gerfsx_extended F77_FUNC( dla_gerfsx_extended , DLA_GERFSX_EXTENDED )
#define F77_dla_gerpvgrw F77_FUNC( dla_gerpvgrw , DLA_GERPVGRW )
#define F77_dlags2 F77_FUNC( dlags2 , DLAGS2 )
#define F77_dlagtf F77_FUNC( dlagtf , DLAGTF )
#define F77_dlagtm F77_FUNC( dlagtm , DLAGTM )
#define F77_dlagts F77_FUNC( dlagts , DLAGTS )
#define F77_dlagv2 F77_FUNC( dlagv2 , DLAGV2 )
#define F77_dlahqr F77_FUNC( dlahqr , DLAHQR )
#define F77_dlahr2 F77_FUNC( dlahr2 , DLAHR2 )
#define F77_dlahrd F77_FUNC( dlahrd , DLAHRD )
#define F77_dlaic1 F77_FUNC( dlaic1 , DLAIC1 )
#define F77_dlaisnan F77_FUNC( dlaisnan , DLAISNAN )
#define F77_dla_lin_berr F77_FUNC( dla_lin_berr , DLA_LIN_BERR )
#define F77_dlaln2 F77_FUNC( dlaln2 , DLALN2 )
#define F77_dlals0 F77_FUNC( dlals0 , DLALS0 )
#define F77_dlalsa F77_FUNC( dlalsa , DLALSA )
#define F77_dlalsd F77_FUNC( dlalsd , DLALSD )
#define F77_dlamrg F77_FUNC( dlamrg , DLAMRG )
#define F77_dlamswlq F77_FUNC( dlamswlq , DLAMSWLQ )
#define F77_dlamtsqr F77_FUNC( dlamtsqr , DLAMTSQR )
#define F77_dlaneg F77_FUNC( dlaneg , DLANEG )
#define F77_dlangb F77_FUNC( dlangb , DLANGB )
#define F77_dlange F77_FUNC( dlange , DLANGE )
#define F77_dlangt F77_FUNC( dlangt , DLANGT )
#define F77_dlanhs F77_FUNC( dlanhs , DLANHS )
#define F77_dlansb F77_FUNC( dlansb , DLANSB )
#define F77_dlansf F77_FUNC( dlansf , DLANSF )
#define F77_dlansp F77_FUNC( dlansp , DLANSP )
#define F77_dlanst F77_FUNC( dlanst , DLANST )
#define F77_dlansy F77_FUNC( dlansy , DLANSY )
#define F77_dlantb F77_FUNC( dlantb , DLANTB )
#define F77_dlantp F77_FUNC( dlantp , DLANTP )
#define F77_dlantr F77_FUNC( dlantr , DLANTR )
#define F77_dlanv2 F77_FUNC( dlanv2 , DLANV2 )
#define F77_dlaorhr_col_getrfnp2 F77_FUNC( dlaorhr_col_getrfnp2 , DLAORHR_COL_GETRFNP2 )
#define F77_dlaorhr_col_getrfnp F77_FUNC( dlaorhr_col_getrfnp , DLAORHR_COL_GETRFNP )
#define F77_dlapll F77_FUNC( dlapll , DLAPLL )
#define F77_dlapmr F77_FUNC( dlapmr , DLAPMR )
#define F77_dlapmt F77_FUNC( dlapmt , DLAPMT )
#define F77_dla_porcond F77_FUNC( dla_porcond , DLA_PORCOND )
#define F77_dla_porfsx_extended F77_FUNC( dla_porfsx_extended , DLA_PORFSX_EXTENDED )
#define F77_dla_porpvgrw F77_FUNC( dla_porpvgrw , DLA_PORPVGRW )
#define F77_dlapy2 F77_FUNC( dlapy2 , DLAPY2 )
#define F77_dlapy3 F77_FUNC( dlapy3 , DLAPY3 )
#define F77_dlaqgb F77_FUNC( dlaqgb , DLAQGB )
#define F77_dlaqge F77_FUNC( dlaqge , DLAQGE )
#define F77_dlaqp2 F77_FUNC( dlaqp2 , DLAQP2 )
#define F77_dlaqps F77_FUNC( dlaqps , DLAQPS )
#define F77_dlaqr0 F77_FUNC( dlaqr0 , DLAQR0 )
#define F77_dlaqr1 F77_FUNC( dlaqr1 , DLAQR1 )
#define F77_dlaqr2 F77_FUNC( dlaqr2 , DLAQR2 )
#define F77_dlaqr3 F77_FUNC( dlaqr3 , DLAQR3 )
#define F77_dlaqr4 F77_FUNC( dlaqr4 , DLAQR4 )
#define F77_dlaqr5 F77_FUNC( dlaqr5 , DLAQR5 )
#define F77_dlaqsb F77_FUNC( dlaqsb , DLAQSB )
#define F77_dlaqsp F77_FUNC( dlaqsp , DLAQSP )
#define F77_dlaqsy F77_FUNC( dlaqsy , DLAQSY )
#define F77_dlaqtr F77_FUNC( dlaqtr , DLAQTR )
#define F77_dlar1v F77_FUNC( dlar1v , DLAR1V )
#define F77_dlar2v F77_FUNC( dlar2v , DLAR2V )
#define F77_dlarfb F77_FUNC( dlarfb , DLARFB )
#define F77_dlarf F77_FUNC( dlarf , DLARF )
#define F77_dlarfg F77_FUNC( dlarfg , DLARFG )
#define F77_dlarfgp F77_FUNC( dlarfgp , DLARFGP )
#define F77_dlarft F77_FUNC( dlarft , DLARFT )
#define F77_dlarfx F77_FUNC( dlarfx , DLARFX )
#define F77_dlarfy F77_FUNC( dlarfy , DLARFY )
#define F77_dlargv F77_FUNC( dlargv , DLARGV )
#define F77_dlarnv F77_FUNC( dlarnv , DLARNV )
#define F77_dlarra F77_FUNC( dlarra , DLARRA )
#define F77_dlarrb F77_FUNC( dlarrb , DLARRB )
#define F77_dlarrc F77_FUNC( dlarrc , DLARRC )
#define F77_dlarrd F77_FUNC( dlarrd , DLARRD )
#define F77_dlarre F77_FUNC( dlarre , DLARRE )
#define F77_dlarrf F77_FUNC( dlarrf , DLARRF )
#define F77_dlarrj F77_FUNC( dlarrj , DLARRJ )
#define F77_dlarrk F77_FUNC( dlarrk , DLARRK )
#define F77_dlarrr F77_FUNC( dlarrr , DLARRR )
#define F77_dlarrv F77_FUNC( dlarrv , DLARRV )
#define F77_dlarscl2 F77_FUNC( dlarscl2 , DLARSCL2 )
#define F77_dlartg F77_FUNC( dlartg , DLARTG )
#define F77_dlartgp F77_FUNC( dlartgp , DLARTGP )
#define F77_dlartgs F77_FUNC( dlartgs , DLARTGS )
#define F77_dlartv F77_FUNC( dlartv , DLARTV )
#define F77_dlaruv F77_FUNC( dlaruv , DLARUV )
#define F77_dlarzb F77_FUNC( dlarzb , DLARZB )
#define F77_dlarz F77_FUNC( dlarz , DLARZ )
#define F77_dlarzt F77_FUNC( dlarzt , DLARZT )
#define F77_dlas2 F77_FUNC( dlas2 , DLAS2 )
#define F77_dlascl2 F77_FUNC( dlascl2 , DLASCL2 )
#define F77_dlascl F77_FUNC( dlascl , DLASCL )
#define F77_dlasd0 F77_FUNC( dlasd0 , DLASD0 )
#define F77_dlasd1 F77_FUNC( dlasd1 , DLASD1 )
#define F77_dlasd2 F77_FUNC( dlasd2 , DLASD2 )
#define F77_dlasd3 F77_FUNC( dlasd3 , DLASD3 )
#define F77_dlasd4 F77_FUNC( dlasd4 , DLASD4 )
#define F77_dlasd5 F77_FUNC( dlasd5 , DLASD5 )
#define F77_dlasd6 F77_FUNC( dlasd6 , DLASD6 )
#define F77_dlasd7 F77_FUNC( dlasd7 , DLASD7 )
#define F77_dlasd8 F77_FUNC( dlasd8 , DLASD8 )
#define F77_dlasda F77_FUNC( dlasda , DLASDA )
#define F77_dlasdq F77_FUNC( dlasdq , DLASDQ )
#define F77_dlasdt F77_FUNC( dlasdt , DLASDT )
#define F77_dlaset F77_FUNC( dlaset , DLASET )
#define F77_dlasq1 F77_FUNC( dlasq1 , DLASQ1 )
#define F77_dlasq2 F77_FUNC( dlasq2 , DLASQ2 )
#define F77_dlasq3 F77_FUNC( dlasq3 , DLASQ3 )
#define F77_dlasq4 F77_FUNC( dlasq4 , DLASQ4 )
#define F77_dlasq5 F77_FUNC( dlasq5 , DLASQ5 )
#define F77_dlasq6 F77_FUNC( dlasq6 , DLASQ6 )
#define F77_dlasr F77_FUNC( dlasr , DLASR )
#define F77_dlasrt F77_FUNC( dlasrt , DLASRT )
#define F77_dlassq F77_FUNC( dlassq , DLASSQ )
#define F77_dlasv2 F77_FUNC( dlasv2 , DLASV2 )
#define F77_dlaswlq F77_FUNC( dlaswlq , DLASWLQ )
#define F77_dlaswp F77_FUNC( dlaswp , DLASWP )
#define F77_dlasy2 F77_FUNC( dlasy2 , DLASY2 )
#define F77_dla_syamv F77_FUNC( dla_syamv , DLA_SYAMV )
#define F77_dlasyf_aa F77_FUNC( dlasyf_aa , DLASYF_AA )
#define F77_dlasyf F77_FUNC( dlasyf , DLASYF )
#define F77_dlasyf_rk F77_FUNC( dlasyf_rk , DLASYF_RK )
#define F77_dlasyf_rook F77_FUNC( dlasyf_rook , DLASYF_ROOK )
#define F77_dla_syrcond F77_FUNC( dla_syrcond , DLA_SYRCOND )
#define F77_dla_syrfsx_extended F77_FUNC( dla_syrfsx_extended , DLA_SYRFSX_EXTENDED )
#define F77_dla_syrpvgrw F77_FUNC( dla_syrpvgrw , DLA_SYRPVGRW )
#define F77_dlat2s F77_FUNC( dlat2s , DLAT2S )
#define F77_dlatbs F77_FUNC( dlatbs , DLATBS )
#define F77_dlatdf F77_FUNC( dlatdf , DLATDF )
#define F77_dlatps F77_FUNC( dlatps , DLATPS )
#define F77_dlatrd F77_FUNC( dlatrd , DLATRD )
#define F77_dlatrs F77_FUNC( dlatrs , DLATRS )
#define F77_dlatrz F77_FUNC( dlatrz , DLATRZ )
#define F77_dlatsqr F77_FUNC( dlatsqr , DLATSQR )
#define F77_dlatzm F77_FUNC( dlatzm , DLATZM )
#define F77_dlauu2 F77_FUNC( dlauu2 , DLAUU2 )
#define F77_dlauum F77_FUNC( dlauum , DLAUUM )
#define F77_dla_wwaddw F77_FUNC( dla_wwaddw , DLA_WWADDW )
#define F77_dopmtr F77_FUNC( dopmtr , DOPMTR )
#define F77_dorbdb1 F77_FUNC( dorbdb1 , DORBDB1 )
#define F77_dorbdb2 F77_FUNC( dorbdb2 , DORBDB2 )
#define F77_dorbdb3 F77_FUNC( dorbdb3 , DORBDB3 )
#define F77_dorbdb4 F77_FUNC( dorbdb4 , DORBDB4 )
#define F77_dorbdb5 F77_FUNC( dorbdb5 , DORBDB5 )
#define F77_dorbdb6 F77_FUNC( dorbdb6 , DORBDB6 )
#define F77_dorbdb F77_FUNC( dorbdb , DORBDB )
#define F77_dorg2l F77_FUNC( dorg2l , DORG2L )
#define F77_dorg2r F77_FUNC( dorg2r , DORG2R )
#define F77_dorgbr F77_FUNC( dorgbr , DORGBR )
#define F77_dorgl2 F77_FUNC( dorgl2 , DORGL2 )
#define F77_dorglq F77_FUNC( dorglq , DORGLQ )
#define F77_dorgql F77_FUNC( dorgql , DORGQL )
#define F77_dorgqr F77_FUNC( dorgqr , DORGQR )
#define F77_dorgr2 F77_FUNC( dorgr2 , DORGR2 )
#define F77_dorgrq F77_FUNC( dorgrq , DORGRQ )
#define F77_dorgtr F77_FUNC( dorgtr , DORGTR )
#define F77_dorgtsqr F77_FUNC( dorgtsqr , DORGTSQR )
#define F77_dorhr_col F77_FUNC( dorhr_col , DORHR_COL )
#define F77_dorm22 F77_FUNC( dorm22 , DORM22 )
#define F77_dorm2l F77_FUNC( dorm2l , DORM2L )
#define F77_dorm2r F77_FUNC( dorm2r , DORM2R )
#define F77_dormbr F77_FUNC( dormbr , DORMBR )
#define F77_dorml2 F77_FUNC( dorml2 , DORML2 )
#define F77_dormlq F77_FUNC( dormlq , DORMLQ )
#define F77_dormql F77_FUNC( dormql , DORMQL )
#define F77_dormqr F77_FUNC( dormqr , DORMQR )
#define F77_dormr2 F77_FUNC( dormr2 , DORMR2 )
#define F77_dormr3 F77_FUNC( dormr3 , DORMR3 )
#define F77_dormrq F77_FUNC( dormrq , DORMRQ )
#define F77_dormrz F77_FUNC( dormrz , DORMRZ )
#define F77_dormtr F77_FUNC( dormtr , DORMTR )
#define F77_dpbcon F77_FUNC( dpbcon , DPBCON )
#define F77_dpbequ F77_FUNC( dpbequ , DPBEQU )
#define F77_dpbrfs F77_FUNC( dpbrfs , DPBRFS )
#define F77_dpbstf F77_FUNC( dpbstf , DPBSTF )
#define F77_dpbsv F77_FUNC( dpbsv , DPBSV )
#define F77_dpbsvx F77_FUNC( dpbsvx , DPBSVX )
#define F77_dpbtf2 F77_FUNC( dpbtf2 , DPBTF2 )
#define F77_dpbtrf F77_FUNC( dpbtrf , DPBTRF )
#define F77_dpbtrs F77_FUNC( dpbtrs , DPBTRS )
#define F77_dpftrf F77_FUNC( dpftrf , DPFTRF )
#define F77_dpftri F77_FUNC( dpftri , DPFTRI )
#define F77_dpftrs F77_FUNC( dpftrs , DPFTRS )
#define F77_dpocon F77_FUNC( dpocon , DPOCON )
#define F77_dpoequb F77_FUNC( dpoequb , DPOEQUB )
#define F77_dpoequ F77_FUNC( dpoequ , DPOEQU )
#define F77_dporfs F77_FUNC( dporfs , DPORFS )
#define F77_dporfsx F77_FUNC( dporfsx , DPORFSX )
#define F77_dposv F77_FUNC( dposv , DPOSV )
#define F77_dposvx F77_FUNC( dposvx , DPOSVX )
#define F77_dposvxx F77_FUNC( dposvxx , DPOSVXX )
#define F77_dpotf2 F77_FUNC( dpotf2 , DPOTF2 )
#define F77_dpotrf2 F77_FUNC( dpotrf2 , DPOTRF2 )
#define F77_dpotrf F77_FUNC( dpotrf , DPOTRF )
#define F77_dpotri F77_FUNC( dpotri , DPOTRI )
#define F77_dpotrs F77_FUNC( dpotrs , DPOTRS )
#define F77_dppcon F77_FUNC( dppcon , DPPCON )
#define F77_dppequ F77_FUNC( dppequ , DPPEQU )
#define F77_dpprfs F77_FUNC( dpprfs , DPPRFS )
#define F77_dppsv F77_FUNC( dppsv , DPPSV )
#define F77_dppsvx F77_FUNC( dppsvx , DPPSVX )
#define F77_dpptrf F77_FUNC( dpptrf , DPPTRF )
#define F77_dpptri F77_FUNC( dpptri , DPPTRI )
#define F77_dpptrs F77_FUNC( dpptrs , DPPTRS )
#define F77_dpstf2 F77_FUNC( dpstf2 , DPSTF2 )
#define F77_dpstrf F77_FUNC( dpstrf , DPSTRF )
#define F77_dptcon F77_FUNC( dptcon , DPTCON )
#define F77_dpteqr F77_FUNC( dpteqr , DPTEQR )
#define F77_dptrfs F77_FUNC( dptrfs , DPTRFS )
#define F77_dptsv F77_FUNC( dptsv , DPTSV )
#define F77_dptsvx F77_FUNC( dptsvx , DPTSVX )
#define F77_dpttrf F77_FUNC( dpttrf , DPTTRF )
#define F77_dpttrs F77_FUNC( dpttrs , DPTTRS )
#define F77_dptts2 F77_FUNC( dptts2 , DPTTS2 )
#define F77_drscl F77_FUNC( drscl , DRSCL )
#define F77_dsb2st_kernels F77_FUNC( dsb2st_kernels , DSB2ST_KERNELS )
#define F77_dsbev_2stage F77_FUNC( dsbev_2stage , DSBEV_2STAGE )
#define F77_dsbevd_2stage F77_FUNC( dsbevd_2stage , DSBEVD_2STAGE )
#define F77_dsbevd F77_FUNC( dsbevd , DSBEVD )
#define F77_dsbev F77_FUNC( dsbev , DSBEV )
#define F77_dsbevx_2stage F77_FUNC( dsbevx_2stage , DSBEVX_2STAGE )
#define F77_dsbevx F77_FUNC( dsbevx , DSBEVX )
#define F77_dsbgst F77_FUNC( dsbgst , DSBGST )
#define F77_dsbgvd F77_FUNC( dsbgvd , DSBGVD )
#define F77_dsbgv F77_FUNC( dsbgv , DSBGV )
#define F77_dsbgvx F77_FUNC( dsbgvx , DSBGVX )
#define F77_dsbtrd F77_FUNC( dsbtrd , DSBTRD )
#define F77_dsfrk F77_FUNC( dsfrk , DSFRK )
#define F77_dsgesv F77_FUNC( dsgesv , DSGESV )
#define F77_dspcon F77_FUNC( dspcon , DSPCON )
#define F77_dspevd F77_FUNC( dspevd , DSPEVD )
#define F77_dspev F77_FUNC( dspev , DSPEV )
#define F77_dspevx F77_FUNC( dspevx , DSPEVX )
#define F77_dspgst F77_FUNC( dspgst , DSPGST )
#define F77_dspgvd F77_FUNC( dspgvd , DSPGVD )
#define F77_dspgv F77_FUNC( dspgv , DSPGV )
#define F77_dspgvx F77_FUNC( dspgvx , DSPGVX )
#define F77_dsposv F77_FUNC( dsposv , DSPOSV )
#define F77_dsprfs F77_FUNC( dsprfs , DSPRFS )
#define F77_dspsv F77_FUNC( dspsv , DSPSV )
#define F77_dspsvx F77_FUNC( dspsvx , DSPSVX )
#define F77_dsptrd F77_FUNC( dsptrd , DSPTRD )
#define F77_dsptrf F77_FUNC( dsptrf , DSPTRF )
#define F77_dsptri F77_FUNC( dsptri , DSPTRI )
#define F77_dsptrs F77_FUNC( dsptrs , DSPTRS )
#define F77_dstebz F77_FUNC( dstebz , DSTEBZ )
#define F77_dstedc F77_FUNC( dstedc , DSTEDC )
#define F77_dstegr F77_FUNC( dstegr , DSTEGR )
#define F77_dstein F77_FUNC( dstein , DSTEIN )
#define F77_dstemr F77_FUNC( dstemr , DSTEMR )
#define F77_dsteqr F77_FUNC( dsteqr , DSTEQR )
#define F77_dsterf F77_FUNC( dsterf , DSTERF )
#define F77_dstevd F77_FUNC( dstevd , DSTEVD )
#define F77_dstev F77_FUNC( dstev , DSTEV )
#define F77_dstevr F77_FUNC( dstevr , DSTEVR )
#define F77_dstevx F77_FUNC( dstevx , DSTEVX )
#define F77_dsycon_3 F77_FUNC( dsycon_3 , DSYCON_3 )
#define F77_dsycon F77_FUNC( dsycon , DSYCON )
#define F77_dsycon_rook F77_FUNC( dsycon_rook , DSYCON_ROOK )
#define F77_dsyconv F77_FUNC( dsyconv , DSYCONV )
#define F77_dsyconvf F77_FUNC( dsyconvf , DSYCONVF )
#define F77_dsyconvf_rook F77_FUNC( dsyconvf_rook , DSYCONVF_ROOK )
#define F77_dsyequb F77_FUNC( dsyequb , DSYEQUB )
#define F77_dsyev_2stage F77_FUNC( dsyev_2stage , DSYEV_2STAGE )
#define F77_dsyevd_2stage F77_FUNC( dsyevd_2stage , DSYEVD_2STAGE )
#define F77_dsyevd F77_FUNC( dsyevd , DSYEVD )
#define F77_dsyev  F77_FUNC( dsyev  , DSYEV  )
#define F77_dsyev F77_FUNC( dsyev , DSYEV )
#define F77_dsyevr_2stage F77_FUNC( dsyevr_2stage , DSYEVR_2STAGE )
#define F77_dsyevr F77_FUNC( dsyevr , DSYEVR )
#define F77_dsyevx_2stage F77_FUNC( dsyevx_2stage , DSYEVX_2STAGE )
#define F77_dsyevx F77_FUNC( dsyevx , DSYEVX )
#define F77_dsygs2 F77_FUNC( dsygs2 , DSYGS2 )
#define F77_dsygst F77_FUNC( dsygst , DSYGST )
#define F77_dsygv_2stage F77_FUNC( dsygv_2stage , DSYGV_2STAGE )
#define F77_dsygvd F77_FUNC( dsygvd , DSYGVD )
#define F77_dsygv F77_FUNC( dsygv , DSYGV )
#define F77_dsygvx F77_FUNC( dsygvx , DSYGVX )
#define F77_dsyrfs F77_FUNC( dsyrfs , DSYRFS )
#define F77_dsyrfsx F77_FUNC( dsyrfsx , DSYRFSX )
#define F77_dsysv_aa_2stage F77_FUNC( dsysv_aa_2stage , DSYSV_AA_2STAGE )
#define F77_dsysv_aa F77_FUNC( dsysv_aa , DSYSV_AA )
#define F77_dsysv F77_FUNC( dsysv , DSYSV )
#define F77_dsysv_rk F77_FUNC( dsysv_rk , DSYSV_RK )
#define F77_dsysv_rook F77_FUNC( dsysv_rook , DSYSV_ROOK )
#define F77_dsysvx F77_FUNC( dsysvx , DSYSVX )
#define F77_dsysvxx F77_FUNC( dsysvxx , DSYSVXX )
#define F77_dsyswapr F77_FUNC( dsyswapr , DSYSWAPR )
#define F77_dsytd2 F77_FUNC( dsytd2 , DSYTD2 )
#define F77_dsytf2 F77_FUNC( dsytf2 , DSYTF2 )
#define F77_dsytf2_rk F77_FUNC( dsytf2_rk , DSYTF2_RK )
#define F77_dsytf2_rook F77_FUNC( dsytf2_rook , DSYTF2_ROOK )
#define F77_dsytrd_2stage F77_FUNC( dsytrd_2stage , DSYTRD_2STAGE )
#define F77_dsytrd F77_FUNC( dsytrd , DSYTRD )
#define F77_dsytrd_sb2st F77_FUNC( dsytrd_sb2st , DSYTRD_SB2ST )
#define F77_dsytrd_sy2sb F77_FUNC( dsytrd_sy2sb , DSYTRD_SY2SB )
#define F77_dsytrf_aa_2stage F77_FUNC( dsytrf_aa_2stage , DSYTRF_AA_2STAGE )
#define F77_dsytrf_aa F77_FUNC( dsytrf_aa , DSYTRF_AA )
#define F77_dsytrf F77_FUNC( dsytrf , DSYTRF )
#define F77_dsytrf_rk F77_FUNC( dsytrf_rk , DSYTRF_RK )
#define F77_dsytrf_rook F77_FUNC( dsytrf_rook , DSYTRF_ROOK )
#define F77_dsytri2 F77_FUNC( dsytri2 , DSYTRI2 )
#define F77_dsytri2x F77_FUNC( dsytri2x , DSYTRI2X )
#define F77_dsytri_3 F77_FUNC( dsytri_3 , DSYTRI_3 )
#define F77_dsytri_3x F77_FUNC( dsytri_3x , DSYTRI_3X )
#define F77_dsytri F77_FUNC( dsytri , DSYTRI )
#define F77_dsytri_rook F77_FUNC( dsytri_rook , DSYTRI_ROOK )
#define F77_dsytrs2 F77_FUNC( dsytrs2 , DSYTRS2 )
#define F77_dsytrs_3 F77_FUNC( dsytrs_3 , DSYTRS_3 )
#define F77_dsytrs_aa_2stage F77_FUNC( dsytrs_aa_2stage , DSYTRS_AA_2STAGE )
#define F77_dsytrs_aa F77_FUNC( dsytrs_aa , DSYTRS_AA )
#define F77_dsytrs F77_FUNC( dsytrs , DSYTRS )
#define F77_dsytrs_rook F77_FUNC( dsytrs_rook , DSYTRS_ROOK )
#define F77_dtbcon F77_FUNC( dtbcon , DTBCON )
#define F77_dtbrfs F77_FUNC( dtbrfs , DTBRFS )
#define F77_dtbtrs F77_FUNC( dtbtrs , DTBTRS )
#define F77_dtfsm F77_FUNC( dtfsm , DTFSM )
#define F77_dtftri F77_FUNC( dtftri , DTFTRI )
#define F77_dtfttp F77_FUNC( dtfttp , DTFTTP )
#define F77_dtfttr F77_FUNC( dtfttr , DTFTTR )
#define F77_dtgevc F77_FUNC( dtgevc , DTGEVC )
#define F77_dtgex2 F77_FUNC( dtgex2 , DTGEX2 )
#define F77_dtgexc F77_FUNC( dtgexc , DTGEXC )
#define F77_dtgsen F77_FUNC( dtgsen , DTGSEN )
#define F77_dtgsja F77_FUNC( dtgsja , DTGSJA )
#define F77_dtgsna F77_FUNC( dtgsna , DTGSNA )
#define F77_dtgsy2 F77_FUNC( dtgsy2 , DTGSY2 )
#define F77_dtgsyl F77_FUNC( dtgsyl , DTGSYL )
#define F77_dtpcon F77_FUNC( dtpcon , DTPCON )
#define F77_dtplqt2 F77_FUNC( dtplqt2 , DTPLQT2 )
#define F77_dtplqt F77_FUNC( dtplqt , DTPLQT )
#define F77_dtpmlqt F77_FUNC( dtpmlqt , DTPMLQT )
#define F77_dtpmqrt F77_FUNC( dtpmqrt , DTPMQRT )
#define F77_dtpqrt2 F77_FUNC( dtpqrt2 , DTPQRT2 )
#define F77_dtpqrt F77_FUNC( dtpqrt , DTPQRT )
#define F77_dtprfb F77_FUNC( dtprfb , DTPRFB )
#define F77_dtprfs F77_FUNC( dtprfs , DTPRFS )
#define F77_dtptri F77_FUNC( dtptri , DTPTRI )
#define F77_dtptrs F77_FUNC( dtptrs , DTPTRS )
#define F77_dtpttf F77_FUNC( dtpttf , DTPTTF )
#define F77_dtpttr F77_FUNC( dtpttr , DTPTTR )
#define F77_dtrcon F77_FUNC( dtrcon , DTRCON )
#define F77_dtrevc3 F77_FUNC( dtrevc3 , DTREVC3 )
#define F77_dtrevc F77_FUNC( dtrevc , DTREVC )
#define F77_dtrexc F77_FUNC( dtrexc , DTREXC )
#define F77_dtrrfs F77_FUNC( dtrrfs , DTRRFS )
#define F77_dtrsen F77_FUNC( dtrsen , DTRSEN )
#define F77_dtrsna F77_FUNC( dtrsna , DTRSNA )
#define F77_dtrsyl F77_FUNC( dtrsyl , DTRSYL )
#define F77_dtrti2 F77_FUNC( dtrti2 , DTRTI2 )
#define F77_dtrtri F77_FUNC( dtrtri , DTRTRI )
#define F77_dtrtrs F77_FUNC( dtrtrs , DTRTRS )
#define F77_dtrttf F77_FUNC( dtrttf , DTRTTF )
#define F77_dtrttp F77_FUNC( dtrttp , DTRTTP )
#define F77_dtzrqf F77_FUNC( dtzrqf , DTZRQF )
#define F77_dtzrzf F77_FUNC( dtzrzf , DTZRZF )
#define F77_dzsum1 F77_FUNC( dzsum1 , DZSUM1 )
#define F77_icmax1 F77_FUNC( icmax1 , ICMAX1 )
#define F77_ilaclc F77_FUNC( ilaclc , ILACLC )
#define F77_ilaclr F77_FUNC( ilaclr , ILACLR )
#define F77_iladiag F77_FUNC( iladiag , ILADIAG )
#define F77_iladlc F77_FUNC( iladlc , ILADLC )
#define F77_iladlr F77_FUNC( iladlr , ILADLR )
#define F77_ilaenv2stage F77_FUNC( ilaenv2stage , ILAENV2STAGE )
#define F77_ilaprec F77_FUNC( ilaprec , ILAPREC )
#define F77_ilaslc F77_FUNC( ilaslc , ILASLC )
#define F77_ilaslr F77_FUNC( ilaslr , ILASLR )
#define F77_ilatrans F77_FUNC( ilatrans , ILATRANS )
#define F77_ilauplo F77_FUNC( ilauplo , ILAUPLO )
#define F77_ilaver F77_FUNC( ilaver , ILAVER )
#define F77_ilazlc F77_FUNC( ilazlc , ILAZLC )
#define F77_ilazlr F77_FUNC( ilazlr , ILAZLR )
#define F77_iparam2stage F77_FUNC( iparam2stage , IPARAM2STAGE )
#define F77_izmax1 F77_FUNC( izmax1 , IZMAX1 )
#define F77_sbbcsd F77_FUNC( sbbcsd , SBBCSD )
#define F77_sbdsdc F77_FUNC( sbdsdc , SBDSDC )
#define F77_sbdsqr F77_FUNC( sbdsqr , SBDSQR )
#define F77_sbdsvdx F77_FUNC( sbdsvdx , SBDSVDX )
#define F77_scombssq F77_FUNC( scombssq , SCOMBSSQ )
#define F77_scsum1 F77_FUNC( scsum1 , SCSUM1 )
#define F77_sdisna F77_FUNC( sdisna , SDISNA )
#define F77_sgbbrd F77_FUNC( sgbbrd , SGBBRD )
#define F77_sgbcon F77_FUNC( sgbcon , SGBCON )
#define F77_sgbequb F77_FUNC( sgbequb , SGBEQUB )
#define F77_sgbequ F77_FUNC( sgbequ , SGBEQU )
#define F77_sgbrfs F77_FUNC( sgbrfs , SGBRFS )
#define F77_sgbrfsx F77_FUNC( sgbrfsx , SGBRFSX )
#define F77_sgbsv F77_FUNC( sgbsv , SGBSV )
#define F77_sgbsvx F77_FUNC( sgbsvx , SGBSVX )
#define F77_sgbsvxx F77_FUNC( sgbsvxx , SGBSVXX )
#define F77_sgbtf2 F77_FUNC( sgbtf2 , SGBTF2 )
#define F77_sgbtrf F77_FUNC( sgbtrf , SGBTRF )
#define F77_sgbtrs F77_FUNC( sgbtrs , SGBTRS )
#define F77_sgebak F77_FUNC( sgebak , SGEBAK )
#define F77_sgebal F77_FUNC( sgebal , SGEBAL )
#define F77_sgebd2 F77_FUNC( sgebd2 , SGEBD2 )
#define F77_sgebrd F77_FUNC( sgebrd , SGEBRD )
#define F77_sgecon F77_FUNC( sgecon , SGECON )
#define F77_sgeequb F77_FUNC( sgeequb , SGEEQUB )
#define F77_sgeequ F77_FUNC( sgeequ , SGEEQU )
#define F77_sgees F77_FUNC( sgees , SGEES )
#define F77_sgeesx F77_FUNC( sgeesx , SGEESX )
#define F77_sgeev F77_FUNC( sgeev , SGEEV )
#define F77_sgeevx F77_FUNC( sgeevx , SGEEVX )
#define F77_sgegs F77_FUNC( sgegs , SGEGS )
#define F77_sgegv F77_FUNC( sgegv , SGEGV )
#define F77_sgehd2 F77_FUNC( sgehd2 , SGEHD2 )
#define F77_sgehrd F77_FUNC( sgehrd , SGEHRD )
#define F77_sgejsv F77_FUNC( sgejsv , SGEJSV )
#define F77_sgelq2 F77_FUNC( sgelq2 , SGELQ2 )
#define F77_sgelq F77_FUNC( sgelq , SGELQ )
#define F77_sgelqf F77_FUNC( sgelqf , SGELQF )
#define F77_sgelqt3 F77_FUNC( sgelqt3 , SGELQT3 )
#define F77_sgelqt F77_FUNC( sgelqt , SGELQT )
#define F77_sgelsd F77_FUNC( sgelsd , SGELSD )
#define F77_sgels F77_FUNC( sgels , SGELS )
#define F77_sgelss F77_FUNC( sgelss , SGELSS )
#define F77_sgelsx F77_FUNC( sgelsx , SGELSX )
#define F77_sgelsy F77_FUNC( sgelsy , SGELSY )
#define F77_sgemlq F77_FUNC( sgemlq , SGEMLQ )
#define F77_sgemlqt F77_FUNC( sgemlqt , SGEMLQT )
#define F77_sgemqr F77_FUNC( sgemqr , SGEMQR )
#define F77_sgemqrt F77_FUNC( sgemqrt , SGEMQRT )
#define F77_sgeql2 F77_FUNC( sgeql2 , SGEQL2 )
#define F77_sgeqlf F77_FUNC( sgeqlf , SGEQLF )
#define F77_sgeqp3 F77_FUNC( sgeqp3 , SGEQP3 )
#define F77_sgeqpf F77_FUNC( sgeqpf , SGEQPF )
#define F77_sgeqr2 F77_FUNC( sgeqr2 , SGEQR2 )
#define F77_sgeqr2p F77_FUNC( sgeqr2p , SGEQR2P )
#define F77_sgeqr F77_FUNC( sgeqr , SGEQR )
#define F77_sgeqrf F77_FUNC( sgeqrf , SGEQRF )
#define F77_sgeqrfp F77_FUNC( sgeqrfp , SGEQRFP )
#define F77_sgeqrt2 F77_FUNC( sgeqrt2 , SGEQRT2 )
#define F77_sgeqrt3 F77_FUNC( sgeqrt3 , SGEQRT3 )
#define F77_sgeqrt F77_FUNC( sgeqrt , SGEQRT )
#define F77_sgerfs F77_FUNC( sgerfs , SGERFS )
#define F77_sgerfsx F77_FUNC( sgerfsx , SGERFSX )
#define F77_sgerq2 F77_FUNC( sgerq2 , SGERQ2 )
#define F77_sgerqf F77_FUNC( sgerqf , SGERQF )
#define F77_sgesc2 F77_FUNC( sgesc2 , SGESC2 )
#define F77_sgesdd F77_FUNC( sgesdd , SGESDD )
#define F77_sgesvd F77_FUNC( sgesvd , SGESVD )
#define F77_sgesvdq F77_FUNC( sgesvdq , SGESVDQ )
#define F77_sgesvdx F77_FUNC( sgesvdx , SGESVDX )
#define F77_sgesv F77_FUNC( sgesv , SGESV )
#define F77_sgesvj F77_FUNC( sgesvj , SGESVJ )
#define F77_sgesvx F77_FUNC( sgesvx , SGESVX )
#define F77_sgesvxx F77_FUNC( sgesvxx , SGESVXX )
#define F77_sgetc2 F77_FUNC( sgetc2 , SGETC2 )
#define F77_sgetf2 F77_FUNC( sgetf2 , SGETF2 )
#define F77_sgetrf2 F77_FUNC( sgetrf2 , SGETRF2 )
#define F77_sgetrf F77_FUNC( sgetrf , SGETRF )
#define F77_sgetri F77_FUNC( sgetri , SGETRI )
#define F77_sgetrs F77_FUNC( sgetrs , SGETRS )
#define F77_sgetsls F77_FUNC( sgetsls , SGETSLS )
#define F77_sggbak F77_FUNC( sggbak , SGGBAK )
#define F77_sggbal F77_FUNC( sggbal , SGGBAL )
#define F77_sgges3 F77_FUNC( sgges3 , SGGES3 )
#define F77_sgges F77_FUNC( sgges , SGGES )
#define F77_sggesx F77_FUNC( sggesx , SGGESX )
#define F77_sggev3 F77_FUNC( sggev3 , SGGEV3 )
#define F77_sggev F77_FUNC( sggev , SGGEV )
#define F77_sggevx F77_FUNC( sggevx , SGGEVX )
#define F77_sggglm F77_FUNC( sggglm , SGGGLM )
#define F77_sgghd3 F77_FUNC( sgghd3 , SGGHD3 )
#define F77_sgghrd F77_FUNC( sgghrd , SGGHRD )
#define F77_sgglse F77_FUNC( sgglse , SGGLSE )
#define F77_sggqrf F77_FUNC( sggqrf , SGGQRF )
#define F77_sggrqf F77_FUNC( sggrqf , SGGRQF )
#define F77_sggsvd3 F77_FUNC( sggsvd3 , SGGSVD3 )
#define F77_sggsvd F77_FUNC( sggsvd , SGGSVD )
#define F77_sggsvp3 F77_FUNC( sggsvp3 , SGGSVP3 )
#define F77_sggsvp F77_FUNC( sggsvp , SGGSVP )
#define F77_sgsvj0 F77_FUNC( sgsvj0 , SGSVJ0 )
#define F77_sgsvj1 F77_FUNC( sgsvj1 , SGSVJ1 )
#define F77_sgtcon F77_FUNC( sgtcon , SGTCON )
#define F77_sgtrfs F77_FUNC( sgtrfs , SGTRFS )
#define F77_sgtsv F77_FUNC( sgtsv , SGTSV )
#define F77_sgtsvx F77_FUNC( sgtsvx , SGTSVX )
#define F77_sgttrf F77_FUNC( sgttrf , SGTTRF )
#define F77_sgttrs F77_FUNC( sgttrs , SGTTRS )
#define F77_sgtts2 F77_FUNC( sgtts2 , SGTTS2 )
#define F77_shgeqz F77_FUNC( shgeqz , SHGEQZ )
#define F77_shsein F77_FUNC( shsein , SHSEIN )
#define F77_shseqr F77_FUNC( shseqr , SHSEQR )
#define F77_sisnan F77_FUNC( sisnan , SISNAN )
#define F77_slabad F77_FUNC( slabad , SLABAD )
#define F77_slabrd F77_FUNC( slabrd , SLABRD )
#define F77_slacn2 F77_FUNC( slacn2 , SLACN2 )
#define F77_slacon F77_FUNC( slacon , SLACON )
#define F77_slacpy F77_FUNC( slacpy , SLACPY )
#define F77_sladiv F77_FUNC( sladiv , SLADIV )
#define F77_slae2 F77_FUNC( slae2 , SLAE2 )
#define F77_slaebz F77_FUNC( slaebz , SLAEBZ )
#define F77_slaed0 F77_FUNC( slaed0 , SLAED0 )
#define F77_slaed1 F77_FUNC( slaed1 , SLAED1 )
#define F77_slaed2 F77_FUNC( slaed2 , SLAED2 )
#define F77_slaed3 F77_FUNC( slaed3 , SLAED3 )
#define F77_slaed4 F77_FUNC( slaed4 , SLAED4 )
#define F77_slaed5 F77_FUNC( slaed5 , SLAED5 )
#define F77_slaed6 F77_FUNC( slaed6 , SLAED6 )
#define F77_slaed7 F77_FUNC( slaed7 , SLAED7 )
#define F77_slaed8 F77_FUNC( slaed8 , SLAED8 )
#define F77_slaed9 F77_FUNC( slaed9 , SLAED9 )
#define F77_slaeda F77_FUNC( slaeda , SLAEDA )
#define F77_slaein F77_FUNC( slaein , SLAEIN )
#define F77_slaev2 F77_FUNC( slaev2 , SLAEV2 )
#define F77_slaexc F77_FUNC( slaexc , SLAEXC )
#define F77_slag2d F77_FUNC( slag2d , SLAG2D )
#define F77_slag2 F77_FUNC( slag2 , SLAG2 )
#define F77_sla_gbamv F77_FUNC( sla_gbamv , SLA_GBAMV )
#define F77_sla_gbrcond F77_FUNC( sla_gbrcond , SLA_GBRCOND )
#define F77_sla_gbrfsx_extended F77_FUNC( sla_gbrfsx_extended , SLA_GBRFSX_EXTENDED )
#define F77_sla_gbrpvgrw F77_FUNC( sla_gbrpvgrw , SLA_GBRPVGRW )
#define F77_sla_geamv F77_FUNC( sla_geamv , SLA_GEAMV )
#define F77_sla_gercond F77_FUNC( sla_gercond , SLA_GERCOND )
#define F77_sla_gerfsx_extended F77_FUNC( sla_gerfsx_extended , SLA_GERFSX_EXTENDED )
#define F77_sla_gerpvgrw F77_FUNC( sla_gerpvgrw , SLA_GERPVGRW )
#define F77_slags2 F77_FUNC( slags2 , SLAGS2 )
#define F77_slagtf F77_FUNC( slagtf , SLAGTF )
#define F77_slagtm F77_FUNC( slagtm , SLAGTM )
#define F77_slagts F77_FUNC( slagts , SLAGTS )
#define F77_slagv2 F77_FUNC( slagv2 , SLAGV2 )
#define F77_slahqr F77_FUNC( slahqr , SLAHQR )
#define F77_slahr2 F77_FUNC( slahr2 , SLAHR2 )
#define F77_slahrd F77_FUNC( slahrd , SLAHRD )
#define F77_slaic1 F77_FUNC( slaic1 , SLAIC1 )
#define F77_slaisnan F77_FUNC( slaisnan , SLAISNAN )
#define F77_sla_lin_berr F77_FUNC( sla_lin_berr , SLA_LIN_BERR )
#define F77_slaln2 F77_FUNC( slaln2 , SLALN2 )
#define F77_slals0 F77_FUNC( slals0 , SLALS0 )
#define F77_slalsa F77_FUNC( slalsa , SLALSA )
#define F77_slalsd F77_FUNC( slalsd , SLALSD )
#define F77_slamrg F77_FUNC( slamrg , SLAMRG )
#define F77_slamswlq F77_FUNC( slamswlq , SLAMSWLQ )
#define F77_slamtsqr F77_FUNC( slamtsqr , SLAMTSQR )
#define F77_slaneg F77_FUNC( slaneg , SLANEG )
#define F77_slangb F77_FUNC( slangb , SLANGB )
#define F77_slange F77_FUNC( slange , SLANGE )
#define F77_slangt F77_FUNC( slangt , SLANGT )
#define F77_slanhs F77_FUNC( slanhs , SLANHS )
#define F77_slansb F77_FUNC( slansb , SLANSB )
#define F77_slansf F77_FUNC( slansf , SLANSF )
#define F77_slansp F77_FUNC( slansp , SLANSP )
#define F77_slanst F77_FUNC( slanst , SLANST )
#define F77_slansy F77_FUNC( slansy , SLANSY )
#define F77_slantb F77_FUNC( slantb , SLANTB )
#define F77_slantp F77_FUNC( slantp , SLANTP )
#define F77_slantr F77_FUNC( slantr , SLANTR )
#define F77_slanv2 F77_FUNC( slanv2 , SLANV2 )
#define F77_slaorhr_col_getrfnp2 F77_FUNC( slaorhr_col_getrfnp2 , SLAORHR_COL_GETRFNP2 )
#define F77_slaorhr_col_getrfnp F77_FUNC( slaorhr_col_getrfnp , SLAORHR_COL_GETRFNP )
#define F77_slapll F77_FUNC( slapll , SLAPLL )
#define F77_slapmr F77_FUNC( slapmr , SLAPMR )
#define F77_slapmt F77_FUNC( slapmt , SLAPMT )
#define F77_sla_porcond F77_FUNC( sla_porcond , SLA_PORCOND )
#define F77_sla_porfsx_extended F77_FUNC( sla_porfsx_extended , SLA_PORFSX_EXTENDED )
#define F77_sla_porpvgrw F77_FUNC( sla_porpvgrw , SLA_PORPVGRW )
#define F77_slapy2 F77_FUNC( slapy2 , SLAPY2 )
#define F77_slapy3 F77_FUNC( slapy3 , SLAPY3 )
#define F77_slaqgb F77_FUNC( slaqgb , SLAQGB )
#define F77_slaqge F77_FUNC( slaqge , SLAQGE )
#define F77_slaqp2 F77_FUNC( slaqp2 , SLAQP2 )
#define F77_slaqps F77_FUNC( slaqps , SLAQPS )
#define F77_slaqr0 F77_FUNC( slaqr0 , SLAQR0 )
#define F77_slaqr1 F77_FUNC( slaqr1 , SLAQR1 )
#define F77_slaqr2 F77_FUNC( slaqr2 , SLAQR2 )
#define F77_slaqr3 F77_FUNC( slaqr3 , SLAQR3 )
#define F77_slaqr4 F77_FUNC( slaqr4 , SLAQR4 )
#define F77_slaqr5 F77_FUNC( slaqr5 , SLAQR5 )
#define F77_slaqsb F77_FUNC( slaqsb , SLAQSB )
#define F77_slaqsp F77_FUNC( slaqsp , SLAQSP )
#define F77_slaqsy F77_FUNC( slaqsy , SLAQSY )
#define F77_slaqtr F77_FUNC( slaqtr , SLAQTR )
#define F77_slar1v F77_FUNC( slar1v , SLAR1V )
#define F77_slar2v F77_FUNC( slar2v , SLAR2V )
#define F77_slarfb F77_FUNC( slarfb , SLARFB )
#define F77_slarf F77_FUNC( slarf , SLARF )
#define F77_slarfg F77_FUNC( slarfg , SLARFG )
#define F77_slarfgp F77_FUNC( slarfgp , SLARFGP )
#define F77_slarft F77_FUNC( slarft , SLARFT )
#define F77_slarfx F77_FUNC( slarfx , SLARFX )
#define F77_slarfy F77_FUNC( slarfy , SLARFY )
#define F77_slargv F77_FUNC( slargv , SLARGV )
#define F77_slarnv F77_FUNC( slarnv , SLARNV )
#define F77_slarra F77_FUNC( slarra , SLARRA )
#define F77_slarrb F77_FUNC( slarrb , SLARRB )
#define F77_slarrc F77_FUNC( slarrc , SLARRC )
#define F77_slarrd F77_FUNC( slarrd , SLARRD )
#define F77_slarre F77_FUNC( slarre , SLARRE )
#define F77_slarrf F77_FUNC( slarrf , SLARRF )
#define F77_slarrj F77_FUNC( slarrj , SLARRJ )
#define F77_slarrk F77_FUNC( slarrk , SLARRK )
#define F77_slarrr F77_FUNC( slarrr , SLARRR )
#define F77_slarrv F77_FUNC( slarrv , SLARRV )
#define F77_slarscl2 F77_FUNC( slarscl2 , SLARSCL2 )
#define F77_slartg F77_FUNC( slartg , SLARTG )
#define F77_slartgp F77_FUNC( slartgp , SLARTGP )
#define F77_slartgs F77_FUNC( slartgs , SLARTGS )
#define F77_slartv F77_FUNC( slartv , SLARTV )
#define F77_slaruv F77_FUNC( slaruv , SLARUV )
#define F77_slarzb F77_FUNC( slarzb , SLARZB )
#define F77_slarz F77_FUNC( slarz , SLARZ )
#define F77_slarzt F77_FUNC( slarzt , SLARZT )
#define F77_slas2 F77_FUNC( slas2 , SLAS2 )
#define F77_slascl2 F77_FUNC( slascl2 , SLASCL2 )
#define F77_slascl F77_FUNC( slascl , SLASCL )
#define F77_slasd0 F77_FUNC( slasd0 , SLASD0 )
#define F77_slasd1 F77_FUNC( slasd1 , SLASD1 )
#define F77_slasd2 F77_FUNC( slasd2 , SLASD2 )
#define F77_slasd3 F77_FUNC( slasd3 , SLASD3 )
#define F77_slasd4 F77_FUNC( slasd4 , SLASD4 )
#define F77_slasd5 F77_FUNC( slasd5 , SLASD5 )
#define F77_slasd6 F77_FUNC( slasd6 , SLASD6 )
#define F77_slasd7 F77_FUNC( slasd7 , SLASD7 )
#define F77_slasd8 F77_FUNC( slasd8 , SLASD8 )
#define F77_slasda F77_FUNC( slasda , SLASDA )
#define F77_slasdq F77_FUNC( slasdq , SLASDQ )
#define F77_slasdt F77_FUNC( slasdt , SLASDT )
#define F77_slaset F77_FUNC( slaset , SLASET )
#define F77_slasq1 F77_FUNC( slasq1 , SLASQ1 )
#define F77_slasq2 F77_FUNC( slasq2 , SLASQ2 )
#define F77_slasq3 F77_FUNC( slasq3 , SLASQ3 )
#define F77_slasq4 F77_FUNC( slasq4 , SLASQ4 )
#define F77_slasq5 F77_FUNC( slasq5 , SLASQ5 )
#define F77_slasq6 F77_FUNC( slasq6 , SLASQ6 )
#define F77_slasr F77_FUNC( slasr , SLASR )
#define F77_slasrt F77_FUNC( slasrt , SLASRT )
#define F77_slassq F77_FUNC( slassq , SLASSQ )
#define F77_slasv2 F77_FUNC( slasv2 , SLASV2 )
#define F77_slaswlq F77_FUNC( slaswlq , SLASWLQ )
#define F77_slaswp F77_FUNC( slaswp , SLASWP )
#define F77_slasy2 F77_FUNC( slasy2 , SLASY2 )
#define F77_sla_syamv F77_FUNC( sla_syamv , SLA_SYAMV )
#define F77_slasyf_aa F77_FUNC( slasyf_aa , SLASYF_AA )
#define F77_slasyf F77_FUNC( slasyf , SLASYF )
#define F77_slasyf_rk F77_FUNC( slasyf_rk , SLASYF_RK )
#define F77_slasyf_rook F77_FUNC( slasyf_rook , SLASYF_ROOK )
#define F77_sla_syrcond F77_FUNC( sla_syrcond , SLA_SYRCOND )
#define F77_sla_syrfsx_extended F77_FUNC( sla_syrfsx_extended , SLA_SYRFSX_EXTENDED )
#define F77_sla_syrpvgrw F77_FUNC( sla_syrpvgrw , SLA_SYRPVGRW )
#define F77_slatbs F77_FUNC( slatbs , SLATBS )
#define F77_slatdf F77_FUNC( slatdf , SLATDF )
#define F77_slatps F77_FUNC( slatps , SLATPS )
#define F77_slatrd F77_FUNC( slatrd , SLATRD )
#define F77_slatrs F77_FUNC( slatrs , SLATRS )
#define F77_slatrz F77_FUNC( slatrz , SLATRZ )
#define F77_slatsqr F77_FUNC( slatsqr , SLATSQR )
#define F77_slatzm F77_FUNC( slatzm , SLATZM )
#define F77_slauu2 F77_FUNC( slauu2 , SLAUU2 )
#define F77_slauum F77_FUNC( slauum , SLAUUM )
#define F77_sla_wwaddw F77_FUNC( sla_wwaddw , SLA_WWADDW )
#define F77_sopmtr F77_FUNC( sopmtr , SOPMTR )
#define F77_sorbdb1 F77_FUNC( sorbdb1 , SORBDB1 )
#define F77_sorbdb2 F77_FUNC( sorbdb2 , SORBDB2 )
#define F77_sorbdb3 F77_FUNC( sorbdb3 , SORBDB3 )
#define F77_sorbdb4 F77_FUNC( sorbdb4 , SORBDB4 )
#define F77_sorbdb5 F77_FUNC( sorbdb5 , SORBDB5 )
#define F77_sorbdb6 F77_FUNC( sorbdb6 , SORBDB6 )
#define F77_sorbdb F77_FUNC( sorbdb , SORBDB )
#define F77_sorg2l F77_FUNC( sorg2l , SORG2L )
#define F77_sorg2r F77_FUNC( sorg2r , SORG2R )
#define F77_sorgbr F77_FUNC( sorgbr , SORGBR )
#define F77_sorgl2 F77_FUNC( sorgl2 , SORGL2 )
#define F77_sorglq F77_FUNC( sorglq , SORGLQ )
#define F77_sorgql F77_FUNC( sorgql , SORGQL )
#define F77_sorgqr F77_FUNC( sorgqr , SORGQR )
#define F77_sorgr2 F77_FUNC( sorgr2 , SORGR2 )
#define F77_sorgrq F77_FUNC( sorgrq , SORGRQ )
#define F77_sorgtr F77_FUNC( sorgtr , SORGTR )
#define F77_sorgtsqr F77_FUNC( sorgtsqr , SORGTSQR )
#define F77_sorhr_col F77_FUNC( sorhr_col , SORHR_COL )
#define F77_sorm22 F77_FUNC( sorm22 , SORM22 )
#define F77_sorm2l F77_FUNC( sorm2l , SORM2L )
#define F77_sorm2r F77_FUNC( sorm2r , SORM2R )
#define F77_sormbr F77_FUNC( sormbr , SORMBR )
#define F77_sorml2 F77_FUNC( sorml2 , SORML2 )
#define F77_sormlq F77_FUNC( sormlq , SORMLQ )
#define F77_sormql F77_FUNC( sormql , SORMQL )
#define F77_sormqr F77_FUNC( sormqr , SORMQR )
#define F77_sormr2 F77_FUNC( sormr2 , SORMR2 )
#define F77_sormr3 F77_FUNC( sormr3 , SORMR3 )
#define F77_sormrq F77_FUNC( sormrq , SORMRQ )
#define F77_sormrz F77_FUNC( sormrz , SORMRZ )
#define F77_sormtr F77_FUNC( sormtr , SORMTR )
#define F77_spbcon F77_FUNC( spbcon , SPBCON )
#define F77_spbequ F77_FUNC( spbequ , SPBEQU )
#define F77_spbrfs F77_FUNC( spbrfs , SPBRFS )
#define F77_spbstf F77_FUNC( spbstf , SPBSTF )
#define F77_spbsv F77_FUNC( spbsv , SPBSV )
#define F77_spbsvx F77_FUNC( spbsvx , SPBSVX )
#define F77_spbtf2 F77_FUNC( spbtf2 , SPBTF2 )
#define F77_spbtrf F77_FUNC( spbtrf , SPBTRF )
#define F77_spbtrs F77_FUNC( spbtrs , SPBTRS )
#define F77_spftrf F77_FUNC( spftrf , SPFTRF )
#define F77_spftri F77_FUNC( spftri , SPFTRI )
#define F77_spftrs F77_FUNC( spftrs , SPFTRS )
#define F77_spocon F77_FUNC( spocon , SPOCON )
#define F77_spoequb F77_FUNC( spoequb , SPOEQUB )
#define F77_spoequ F77_FUNC( spoequ , SPOEQU )
#define F77_sporfs F77_FUNC( sporfs , SPORFS )
#define F77_sporfsx F77_FUNC( sporfsx , SPORFSX )
#define F77_sposv F77_FUNC( sposv , SPOSV )
#define F77_sposvx F77_FUNC( sposvx , SPOSVX )
#define F77_sposvxx F77_FUNC( sposvxx , SPOSVXX )
#define F77_spotf2 F77_FUNC( spotf2 , SPOTF2 )
#define F77_spotrf2 F77_FUNC( spotrf2 , SPOTRF2 )
#define F77_spotrf F77_FUNC( spotrf , SPOTRF )
#define F77_spotri F77_FUNC( spotri , SPOTRI )
#define F77_spotrs F77_FUNC( spotrs , SPOTRS )
#define F77_sppcon F77_FUNC( sppcon , SPPCON )
#define F77_sppequ F77_FUNC( sppequ , SPPEQU )
#define F77_spprfs F77_FUNC( spprfs , SPPRFS )
#define F77_sppsv F77_FUNC( sppsv , SPPSV )
#define F77_sppsvx F77_FUNC( sppsvx , SPPSVX )
#define F77_spptrf F77_FUNC( spptrf , SPPTRF )
#define F77_spptri F77_FUNC( spptri , SPPTRI )
#define F77_spptrs F77_FUNC( spptrs , SPPTRS )
#define F77_spstf2 F77_FUNC( spstf2 , SPSTF2 )
#define F77_spstrf F77_FUNC( spstrf , SPSTRF )
#define F77_sptcon F77_FUNC( sptcon , SPTCON )
#define F77_spteqr F77_FUNC( spteqr , SPTEQR )
#define F77_sptrfs F77_FUNC( sptrfs , SPTRFS )
#define F77_sptsv F77_FUNC( sptsv , SPTSV )
#define F77_sptsvx F77_FUNC( sptsvx , SPTSVX )
#define F77_spttrf F77_FUNC( spttrf , SPTTRF )
#define F77_spttrs F77_FUNC( spttrs , SPTTRS )
#define F77_sptts2 F77_FUNC( sptts2 , SPTTS2 )
#define F77_srscl F77_FUNC( srscl , SRSCL )
#define F77_ssb2st_kernels F77_FUNC( ssb2st_kernels , SSB2ST_KERNELS )
#define F77_ssbev_2stage F77_FUNC( ssbev_2stage , SSBEV_2STAGE )
#define F77_ssbevd_2stage F77_FUNC( ssbevd_2stage , SSBEVD_2STAGE )
#define F77_ssbevd F77_FUNC( ssbevd , SSBEVD )
#define F77_ssbev F77_FUNC( ssbev , SSBEV )
#define F77_ssbevx_2stage F77_FUNC( ssbevx_2stage , SSBEVX_2STAGE )
#define F77_ssbevx F77_FUNC( ssbevx , SSBEVX )
#define F77_ssbgst F77_FUNC( ssbgst , SSBGST )
#define F77_ssbgvd F77_FUNC( ssbgvd , SSBGVD )
#define F77_ssbgv F77_FUNC( ssbgv , SSBGV )
#define F77_ssbgvx F77_FUNC( ssbgvx , SSBGVX )
#define F77_ssbtrd F77_FUNC( ssbtrd , SSBTRD )
#define F77_ssfrk F77_FUNC( ssfrk , SSFRK )
#define F77_sspcon F77_FUNC( sspcon , SSPCON )
#define F77_sspevd F77_FUNC( sspevd , SSPEVD )
#define F77_sspev F77_FUNC( sspev , SSPEV )
#define F77_sspevx F77_FUNC( sspevx , SSPEVX )
#define F77_sspgst F77_FUNC( sspgst , SSPGST )
#define F77_sspgvd F77_FUNC( sspgvd , SSPGVD )
#define F77_sspgv F77_FUNC( sspgv , SSPGV )
#define F77_sspgvx F77_FUNC( sspgvx , SSPGVX )
#define F77_ssprfs F77_FUNC( ssprfs , SSPRFS )
#define F77_sspsv F77_FUNC( sspsv , SSPSV )
#define F77_sspsvx F77_FUNC( sspsvx , SSPSVX )
#define F77_ssptrd F77_FUNC( ssptrd , SSPTRD )
#define F77_ssptrf F77_FUNC( ssptrf , SSPTRF )
#define F77_ssptri F77_FUNC( ssptri , SSPTRI )
#define F77_ssptrs F77_FUNC( ssptrs , SSPTRS )
#define F77_sstebz F77_FUNC( sstebz , SSTEBZ )
#define F77_sstedc F77_FUNC( sstedc , SSTEDC )
#define F77_sstegr F77_FUNC( sstegr , SSTEGR )
#define F77_sstein F77_FUNC( sstein , SSTEIN )
#define F77_sstemr F77_FUNC( sstemr , SSTEMR )
#define F77_ssteqr F77_FUNC( ssteqr , SSTEQR )
#define F77_ssterf F77_FUNC( ssterf , SSTERF )
#define F77_sstevd F77_FUNC( sstevd , SSTEVD )
#define F77_sstev F77_FUNC( sstev , SSTEV )
#define F77_sstevr F77_FUNC( sstevr , SSTEVR )
#define F77_sstevx F77_FUNC( sstevx , SSTEVX )
#define F77_ssycon_3 F77_FUNC( ssycon_3 , SSYCON_3 )
#define F77_ssycon F77_FUNC( ssycon , SSYCON )
#define F77_ssycon_rook F77_FUNC( ssycon_rook , SSYCON_ROOK )
#define F77_ssyconv F77_FUNC( ssyconv , SSYCONV )
#define F77_ssyconvf F77_FUNC( ssyconvf , SSYCONVF )
#define F77_ssyconvf_rook F77_FUNC( ssyconvf_rook , SSYCONVF_ROOK )
#define F77_ssyequb F77_FUNC( ssyequb , SSYEQUB )
#define F77_ssyev_2stage F77_FUNC( ssyev_2stage , SSYEV_2STAGE )
#define F77_ssyevd_2stage F77_FUNC( ssyevd_2stage , SSYEVD_2STAGE )
#define F77_ssyevd F77_FUNC( ssyevd , SSYEVD )
#define F77_ssyev  F77_FUNC( ssyev  , SSYEV  )
#define F77_ssyev F77_FUNC( ssyev , SSYEV )
#define F77_ssyevr_2stage F77_FUNC( ssyevr_2stage , SSYEVR_2STAGE )
#define F77_ssyevr F77_FUNC( ssyevr , SSYEVR )
#define F77_ssyevx_2stage F77_FUNC( ssyevx_2stage , SSYEVX_2STAGE )
#define F77_ssyevx F77_FUNC( ssyevx , SSYEVX )
#define F77_ssygs2 F77_FUNC( ssygs2 , SSYGS2 )
#define F77_ssygst F77_FUNC( ssygst , SSYGST )
#define F77_ssygv_2stage F77_FUNC( ssygv_2stage , SSYGV_2STAGE )
#define F77_ssygvd F77_FUNC( ssygvd , SSYGVD )
#define F77_ssygv F77_FUNC( ssygv , SSYGV )
#define F77_ssygvx F77_FUNC( ssygvx , SSYGVX )
#define F77_ssyrfs F77_FUNC( ssyrfs , SSYRFS )
#define F77_ssyrfsx F77_FUNC( ssyrfsx , SSYRFSX )
#define F77_ssysv_aa_2stage F77_FUNC( ssysv_aa_2stage , SSYSV_AA_2STAGE )
#define F77_ssysv_aa F77_FUNC( ssysv_aa , SSYSV_AA )
#define F77_ssysv F77_FUNC( ssysv , SSYSV )
#define F77_ssysv_rk F77_FUNC( ssysv_rk , SSYSV_RK )
#define F77_ssysv_rook F77_FUNC( ssysv_rook , SSYSV_ROOK )
#define F77_ssysvx F77_FUNC( ssysvx , SSYSVX )
#define F77_ssysvxx F77_FUNC( ssysvxx , SSYSVXX )
#define F77_ssyswapr F77_FUNC( ssyswapr , SSYSWAPR )
#define F77_ssytd2 F77_FUNC( ssytd2 , SSYTD2 )
#define F77_ssytf2 F77_FUNC( ssytf2 , SSYTF2 )
#define F77_ssytf2_rk F77_FUNC( ssytf2_rk , SSYTF2_RK )
#define F77_ssytf2_rook F77_FUNC( ssytf2_rook , SSYTF2_ROOK )
#define F77_ssytrd_2stage F77_FUNC( ssytrd_2stage , SSYTRD_2STAGE )
#define F77_ssytrd F77_FUNC( ssytrd , SSYTRD )
#define F77_ssytrd_sb2st F77_FUNC( ssytrd_sb2st , SSYTRD_SB2ST )
#define F77_ssytrd_sy2sb F77_FUNC( ssytrd_sy2sb , SSYTRD_SY2SB )
#define F77_ssytrf_aa_2stage F77_FUNC( ssytrf_aa_2stage , SSYTRF_AA_2STAGE )
#define F77_ssytrf_aa F77_FUNC( ssytrf_aa , SSYTRF_AA )
#define F77_ssytrf F77_FUNC( ssytrf , SSYTRF )
#define F77_ssytrf_rk F77_FUNC( ssytrf_rk , SSYTRF_RK )
#define F77_ssytrf_rook F77_FUNC( ssytrf_rook , SSYTRF_ROOK )
#define F77_ssytri2 F77_FUNC( ssytri2 , SSYTRI2 )
#define F77_ssytri2x F77_FUNC( ssytri2x , SSYTRI2X )
#define F77_ssytri_3 F77_FUNC( ssytri_3 , SSYTRI_3 )
#define F77_ssytri_3x F77_FUNC( ssytri_3x , SSYTRI_3X )
#define F77_ssytri F77_FUNC( ssytri , SSYTRI )
#define F77_ssytri_rook F77_FUNC( ssytri_rook , SSYTRI_ROOK )
#define F77_ssytrs2 F77_FUNC( ssytrs2 , SSYTRS2 )
#define F77_ssytrs_3 F77_FUNC( ssytrs_3 , SSYTRS_3 )
#define F77_ssytrs_aa_2stage F77_FUNC( ssytrs_aa_2stage , SSYTRS_AA_2STAGE )
#define F77_ssytrs_aa F77_FUNC( ssytrs_aa , SSYTRS_AA )
#define F77_ssytrs F77_FUNC( ssytrs , SSYTRS )
#define F77_ssytrs_rook F77_FUNC( ssytrs_rook , SSYTRS_ROOK )
#define F77_stbcon F77_FUNC( stbcon , STBCON )
#define F77_stbrfs F77_FUNC( stbrfs , STBRFS )
#define F77_stbtrs F77_FUNC( stbtrs , STBTRS )
#define F77_stfsm F77_FUNC( stfsm , STFSM )
#define F77_stftri F77_FUNC( stftri , STFTRI )
#define F77_stfttp F77_FUNC( stfttp , STFTTP )
#define F77_stfttr F77_FUNC( stfttr , STFTTR )
#define F77_stgevc F77_FUNC( stgevc , STGEVC )
#define F77_stgex2 F77_FUNC( stgex2 , STGEX2 )
#define F77_stgexc F77_FUNC( stgexc , STGEXC )
#define F77_stgsen F77_FUNC( stgsen , STGSEN )
#define F77_stgsja F77_FUNC( stgsja , STGSJA )
#define F77_stgsna F77_FUNC( stgsna , STGSNA )
#define F77_stgsy2 F77_FUNC( stgsy2 , STGSY2 )
#define F77_stgsyl F77_FUNC( stgsyl , STGSYL )
#define F77_stpcon F77_FUNC( stpcon , STPCON )
#define F77_stplqt2 F77_FUNC( stplqt2 , STPLQT2 )
#define F77_stplqt F77_FUNC( stplqt , STPLQT )
#define F77_stpmlqt F77_FUNC( stpmlqt , STPMLQT )
#define F77_stpmqrt F77_FUNC( stpmqrt , STPMQRT )
#define F77_stpqrt2 F77_FUNC( stpqrt2 , STPQRT2 )
#define F77_stpqrt F77_FUNC( stpqrt , STPQRT )
#define F77_stprfb F77_FUNC( stprfb , STPRFB )
#define F77_stprfs F77_FUNC( stprfs , STPRFS )
#define F77_stptri F77_FUNC( stptri , STPTRI )
#define F77_stptrs F77_FUNC( stptrs , STPTRS )
#define F77_stpttf F77_FUNC( stpttf , STPTTF )
#define F77_stpttr F77_FUNC( stpttr , STPTTR )
#define F77_strcon F77_FUNC( strcon , STRCON )
#define F77_strevc3 F77_FUNC( strevc3 , STREVC3 )
#define F77_strevc F77_FUNC( strevc , STREVC )
#define F77_strexc F77_FUNC( strexc , STREXC )
#define F77_strrfs F77_FUNC( strrfs , STRRFS )
#define F77_strsen F77_FUNC( strsen , STRSEN )
#define F77_strsna F77_FUNC( strsna , STRSNA )
#define F77_strsyl F77_FUNC( strsyl , STRSYL )
#define F77_strti2 F77_FUNC( strti2 , STRTI2 )
#define F77_strtri F77_FUNC( strtri , STRTRI )
#define F77_strtrs F77_FUNC( strtrs , STRTRS )
#define F77_strttf F77_FUNC( strttf , STRTTF )
#define F77_strttp F77_FUNC( strttp , STRTTP )
#define F77_stzrqf F77_FUNC( stzrqf , STZRQF )
#define F77_stzrzf F77_FUNC( stzrzf , STZRZF )
#define F77_zbbcsd F77_FUNC( zbbcsd , ZBBCSD )
#define F77_zbdsqr F77_FUNC( zbdsqr , ZBDSQR )
#define F77_zcgesv F77_FUNC( zcgesv , ZCGESV )
#define F77_zcposv F77_FUNC( zcposv , ZCPOSV )
#define F77_zdrscl F77_FUNC( zdrscl , ZDRSCL )
#define F77_zgbbrd F77_FUNC( zgbbrd , ZGBBRD )
#define F77_zgbcon F77_FUNC( zgbcon , ZGBCON )
#define F77_zgbequb F77_FUNC( zgbequb , ZGBEQUB )
#define F77_zgbequ F77_FUNC( zgbequ , ZGBEQU )
#define F77_zgbrfs F77_FUNC( zgbrfs , ZGBRFS )
#define F77_zgbrfsx F77_FUNC( zgbrfsx , ZGBRFSX )
#define F77_zgbsv F77_FUNC( zgbsv , ZGBSV )
#define F77_zgbsvx F77_FUNC( zgbsvx , ZGBSVX )
#define F77_zgbsvxx F77_FUNC( zgbsvxx , ZGBSVXX )
#define F77_zgbtf2 F77_FUNC( zgbtf2 , ZGBTF2 )
#define F77_zgbtrf F77_FUNC( zgbtrf , ZGBTRF )
#define F77_zgbtrs F77_FUNC( zgbtrs , ZGBTRS )
#define F77_zgebak F77_FUNC( zgebak , ZGEBAK )
#define F77_zgebal F77_FUNC( zgebal , ZGEBAL )
#define F77_zgebd2 F77_FUNC( zgebd2 , ZGEBD2 )
#define F77_zgebrd F77_FUNC( zgebrd , ZGEBRD )
#define F77_zgecon F77_FUNC( zgecon , ZGECON )
#define F77_zgeequb F77_FUNC( zgeequb , ZGEEQUB )
#define F77_zgeequ F77_FUNC( zgeequ , ZGEEQU )
#define F77_zgees F77_FUNC( zgees , ZGEES )
#define F77_zgeesx F77_FUNC( zgeesx , ZGEESX )
#define F77_zgeev F77_FUNC( zgeev , ZGEEV )
#define F77_zgeevx F77_FUNC( zgeevx , ZGEEVX )
#define F77_zgegs F77_FUNC( zgegs , ZGEGS )
#define F77_zgegv F77_FUNC( zgegv , ZGEGV )
#define F77_zgehd2 F77_FUNC( zgehd2 , ZGEHD2 )
#define F77_zgehrd F77_FUNC( zgehrd , ZGEHRD )
#define F77_zgejsv F77_FUNC( zgejsv , ZGEJSV )
#define F77_zgelq2 F77_FUNC( zgelq2 , ZGELQ2 )
#define F77_zgelq F77_FUNC( zgelq , ZGELQ )
#define F77_zgelqf F77_FUNC( zgelqf , ZGELQF )
#define F77_zgelqt3 F77_FUNC( zgelqt3 , ZGELQT3 )
#define F77_zgelqt F77_FUNC( zgelqt , ZGELQT )
#define F77_zgelsd F77_FUNC( zgelsd , ZGELSD )
#define F77_zgels F77_FUNC( zgels , ZGELS )
#define F77_zgelss F77_FUNC( zgelss , ZGELSS )
#define F77_zgelsx F77_FUNC( zgelsx , ZGELSX )
#define F77_zgelsy F77_FUNC( zgelsy , ZGELSY )
#define F77_zgemlq F77_FUNC( zgemlq , ZGEMLQ )
#define F77_zgemlqt F77_FUNC( zgemlqt , ZGEMLQT )
#define F77_zgemqr F77_FUNC( zgemqr , ZGEMQR )
#define F77_zgemqrt F77_FUNC( zgemqrt , ZGEMQRT )
#define F77_zgeql2 F77_FUNC( zgeql2 , ZGEQL2 )
#define F77_zgeqlf F77_FUNC( zgeqlf , ZGEQLF )
#define F77_zgeqp3 F77_FUNC( zgeqp3 , ZGEQP3 )
#define F77_zgeqpf F77_FUNC( zgeqpf , ZGEQPF )
#define F77_zgeqr2 F77_FUNC( zgeqr2 , ZGEQR2 )
#define F77_zgeqr2p F77_FUNC( zgeqr2p , ZGEQR2P )
#define F77_zgeqr F77_FUNC( zgeqr , ZGEQR )
#define F77_zgeqrf F77_FUNC( zgeqrf , ZGEQRF )
#define F77_zgeqrfp F77_FUNC( zgeqrfp , ZGEQRFP )
#define F77_zgeqrt2 F77_FUNC( zgeqrt2 , ZGEQRT2 )
#define F77_zgeqrt3 F77_FUNC( zgeqrt3 , ZGEQRT3 )
#define F77_zgeqrt F77_FUNC( zgeqrt , ZGEQRT )
#define F77_zgerfs F77_FUNC( zgerfs , ZGERFS )
#define F77_zgerfsx F77_FUNC( zgerfsx , ZGERFSX )
#define F77_zgerq2 F77_FUNC( zgerq2 , ZGERQ2 )
#define F77_zgerqf F77_FUNC( zgerqf , ZGERQF )
#define F77_zgesc2 F77_FUNC( zgesc2 , ZGESC2 )
#define F77_zgesdd F77_FUNC( zgesdd , ZGESDD )
#define F77_zgesvd F77_FUNC( zgesvd , ZGESVD )
#define F77_zgesvdq F77_FUNC( zgesvdq , ZGESVDQ )
#define F77_zgesvdx F77_FUNC( zgesvdx , ZGESVDX )
#define F77_zgesv F77_FUNC( zgesv , ZGESV )
#define F77_zgesvj F77_FUNC( zgesvj , ZGESVJ )
#define F77_zgesvx F77_FUNC( zgesvx , ZGESVX )
#define F77_zgesvxx F77_FUNC( zgesvxx , ZGESVXX )
#define F77_zgetc2 F77_FUNC( zgetc2 , ZGETC2 )
#define F77_zgetf2 F77_FUNC( zgetf2 , ZGETF2 )
#define F77_zgetrf2 F77_FUNC( zgetrf2 , ZGETRF2 )
#define F77_zgetrf F77_FUNC( zgetrf , ZGETRF )
#define F77_zgetri F77_FUNC( zgetri , ZGETRI )
#define F77_zgetrs F77_FUNC( zgetrs , ZGETRS )
#define F77_zgetsls F77_FUNC( zgetsls , ZGETSLS )
#define F77_zggbak F77_FUNC( zggbak , ZGGBAK )
#define F77_zggbal F77_FUNC( zggbal , ZGGBAL )
#define F77_zgges3 F77_FUNC( zgges3 , ZGGES3 )
#define F77_zgges F77_FUNC( zgges , ZGGES )
#define F77_zggesx F77_FUNC( zggesx , ZGGESX )
#define F77_zggev3 F77_FUNC( zggev3 , ZGGEV3 )
#define F77_zggev F77_FUNC( zggev , ZGGEV )
#define F77_zggevx F77_FUNC( zggevx , ZGGEVX )
#define F77_zggglm F77_FUNC( zggglm , ZGGGLM )
#define F77_zgghd3 F77_FUNC( zgghd3 , ZGGHD3 )
#define F77_zgghrd F77_FUNC( zgghrd , ZGGHRD )
#define F77_zgglse F77_FUNC( zgglse , ZGGLSE )
#define F77_zggqrf F77_FUNC( zggqrf , ZGGQRF )
#define F77_zggrqf F77_FUNC( zggrqf , ZGGRQF )
#define F77_zggsvd3 F77_FUNC( zggsvd3 , ZGGSVD3 )
#define F77_zggsvd F77_FUNC( zggsvd , ZGGSVD )
#define F77_zggsvp3 F77_FUNC( zggsvp3 , ZGGSVP3 )
#define F77_zggsvp F77_FUNC( zggsvp , ZGGSVP )
#define F77_zgsvj0 F77_FUNC( zgsvj0 , ZGSVJ0 )
#define F77_zgsvj1 F77_FUNC( zgsvj1 , ZGSVJ1 )
#define F77_zgtcon F77_FUNC( zgtcon , ZGTCON )
#define F77_zgtrfs F77_FUNC( zgtrfs , ZGTRFS )
#define F77_zgtsv F77_FUNC( zgtsv , ZGTSV )
#define F77_zgtsvx F77_FUNC( zgtsvx , ZGTSVX )
#define F77_zgttrf F77_FUNC( zgttrf , ZGTTRF )
#define F77_zgttrs F77_FUNC( zgttrs , ZGTTRS )
#define F77_zgtts2 F77_FUNC( zgtts2 , ZGTTS2 )
#define F77_zhb2st_kernels F77_FUNC( zhb2st_kernels , ZHB2ST_KERNELS )
#define F77_zhbev_2stage F77_FUNC( zhbev_2stage , ZHBEV_2STAGE )
#define F77_zhbevd_2stage F77_FUNC( zhbevd_2stage , ZHBEVD_2STAGE )
#define F77_zhbevd F77_FUNC( zhbevd , ZHBEVD )
#define F77_zhbev F77_FUNC( zhbev , ZHBEV )
#define F77_zhbevx_2stage F77_FUNC( zhbevx_2stage , ZHBEVX_2STAGE )
#define F77_zhbevx F77_FUNC( zhbevx , ZHBEVX )
#define F77_zhbgst F77_FUNC( zhbgst , ZHBGST )
#define F77_zhbgvd F77_FUNC( zhbgvd , ZHBGVD )
#define F77_zhbgv F77_FUNC( zhbgv , ZHBGV )
#define F77_zhbgvx F77_FUNC( zhbgvx , ZHBGVX )
#define F77_zhbtrd F77_FUNC( zhbtrd , ZHBTRD )
#define F77_zhecon_3 F77_FUNC( zhecon_3 , ZHECON_3 )
#define F77_zhecon F77_FUNC( zhecon , ZHECON )
#define F77_zhecon_rook F77_FUNC( zhecon_rook , ZHECON_ROOK )
#define F77_zheequb F77_FUNC( zheequb , ZHEEQUB )
#define F77_zheev_2stage F77_FUNC( zheev_2stage , ZHEEV_2STAGE )
#define F77_zheevd_2stage F77_FUNC( zheevd_2stage , ZHEEVD_2STAGE )
#define F77_zheevd F77_FUNC( zheevd , ZHEEVD )
#define F77_zheev  F77_FUNC( zheev  , ZHEEV  )
#define F77_zheev F77_FUNC( zheev , ZHEEV )
#define F77_zheevr_2stage F77_FUNC( zheevr_2stage , ZHEEVR_2STAGE )
#define F77_zheevr F77_FUNC( zheevr , ZHEEVR )
#define F77_zheevx_2stage F77_FUNC( zheevx_2stage , ZHEEVX_2STAGE )
#define F77_zheevx F77_FUNC( zheevx , ZHEEVX )
#define F77_zhegs2 F77_FUNC( zhegs2 , ZHEGS2 )
#define F77_zhegst F77_FUNC( zhegst , ZHEGST )
#define F77_zhegv_2stage F77_FUNC( zhegv_2stage , ZHEGV_2STAGE )
#define F77_zhegvd F77_FUNC( zhegvd , ZHEGVD )
#define F77_zhegv F77_FUNC( zhegv , ZHEGV )
#define F77_zhegvx F77_FUNC( zhegvx , ZHEGVX )
#define F77_zherfs F77_FUNC( zherfs , ZHERFS )
#define F77_zherfsx F77_FUNC( zherfsx , ZHERFSX )
#define F77_zhesv_aa_2stage F77_FUNC( zhesv_aa_2stage , ZHESV_AA_2STAGE )
#define F77_zhesv_aa F77_FUNC( zhesv_aa , ZHESV_AA )
#define F77_zhesv F77_FUNC( zhesv , ZHESV )
#define F77_zhesv_rk F77_FUNC( zhesv_rk , ZHESV_RK )
#define F77_zhesv_rook F77_FUNC( zhesv_rook , ZHESV_ROOK )
#define F77_zhesvx F77_FUNC( zhesvx , ZHESVX )
#define F77_zhesvxx F77_FUNC( zhesvxx , ZHESVXX )
#define F77_zheswapr F77_FUNC( zheswapr , ZHESWAPR )
#define F77_zhetd2 F77_FUNC( zhetd2 , ZHETD2 )
#define F77_zhetf2 F77_FUNC( zhetf2 , ZHETF2 )
#define F77_zhetf2_rk F77_FUNC( zhetf2_rk , ZHETF2_RK )
#define F77_zhetf2_rook F77_FUNC( zhetf2_rook , ZHETF2_ROOK )
#define F77_zhetrd_2stage F77_FUNC( zhetrd_2stage , ZHETRD_2STAGE )
#define F77_zhetrd F77_FUNC( zhetrd , ZHETRD )
#define F77_zhetrd_hb2st F77_FUNC( zhetrd_hb2st , ZHETRD_HB2ST )
#define F77_zhetrd_he2hb F77_FUNC( zhetrd_he2hb , ZHETRD_HE2HB )
#define F77_zhetrf_aa_2stage F77_FUNC( zhetrf_aa_2stage , ZHETRF_AA_2STAGE )
#define F77_zhetrf_aa F77_FUNC( zhetrf_aa , ZHETRF_AA )
#define F77_zhetrf F77_FUNC( zhetrf , ZHETRF )
#define F77_zhetrf_rk F77_FUNC( zhetrf_rk , ZHETRF_RK )
#define F77_zhetrf_rook F77_FUNC( zhetrf_rook , ZHETRF_ROOK )
#define F77_zhetri2 F77_FUNC( zhetri2 , ZHETRI2 )
#define F77_zhetri2x F77_FUNC( zhetri2x , ZHETRI2X )
#define F77_zhetri_3 F77_FUNC( zhetri_3 , ZHETRI_3 )
#define F77_zhetri_3x F77_FUNC( zhetri_3x , ZHETRI_3X )
#define F77_zhetri F77_FUNC( zhetri , ZHETRI )
#define F77_zhetri_rook F77_FUNC( zhetri_rook , ZHETRI_ROOK )
#define F77_zhetrs2 F77_FUNC( zhetrs2 , ZHETRS2 )
#define F77_zhetrs_3 F77_FUNC( zhetrs_3 , ZHETRS_3 )
#define F77_zhetrs_aa_2stage F77_FUNC( zhetrs_aa_2stage , ZHETRS_AA_2STAGE )
#define F77_zhetrs_aa F77_FUNC( zhetrs_aa , ZHETRS_AA )
#define F77_zhetrs F77_FUNC( zhetrs , ZHETRS )
#define F77_zhetrs_rook F77_FUNC( zhetrs_rook , ZHETRS_ROOK )
#define F77_zhfrk F77_FUNC( zhfrk , ZHFRK )
#define F77_zhgeqz F77_FUNC( zhgeqz , ZHGEQZ )
#define F77_zhpcon F77_FUNC( zhpcon , ZHPCON )
#define F77_zhpevd F77_FUNC( zhpevd , ZHPEVD )
#define F77_zhpev F77_FUNC( zhpev , ZHPEV )
#define F77_zhpevx F77_FUNC( zhpevx , ZHPEVX )
#define F77_zhpgst F77_FUNC( zhpgst , ZHPGST )
#define F77_zhpgvd F77_FUNC( zhpgvd , ZHPGVD )
#define F77_zhpgv F77_FUNC( zhpgv , ZHPGV )
#define F77_zhpgvx F77_FUNC( zhpgvx , ZHPGVX )
#define F77_zhprfs F77_FUNC( zhprfs , ZHPRFS )
#define F77_zhpsv F77_FUNC( zhpsv , ZHPSV )
#define F77_zhpsvx F77_FUNC( zhpsvx , ZHPSVX )
#define F77_zhptrd F77_FUNC( zhptrd , ZHPTRD )
#define F77_zhptrf F77_FUNC( zhptrf , ZHPTRF )
#define F77_zhptri F77_FUNC( zhptri , ZHPTRI )
#define F77_zhptrs F77_FUNC( zhptrs , ZHPTRS )
#define F77_zhsein F77_FUNC( zhsein , ZHSEIN )
#define F77_zhseqr F77_FUNC( zhseqr , ZHSEQR )
#define F77_zlabrd F77_FUNC( zlabrd , ZLABRD )
#define F77_zlacgv F77_FUNC( zlacgv , ZLACGV )
#define F77_zlacn2 F77_FUNC( zlacn2 , ZLACN2 )
#define F77_zlacon F77_FUNC( zlacon , ZLACON )
#define F77_zlacp2 F77_FUNC( zlacp2 , ZLACP2 )
#define F77_zlacpy F77_FUNC( zlacpy , ZLACPY )
#define F77_zlacrm F77_FUNC( zlacrm , ZLACRM )
#define F77_zlacrt F77_FUNC( zlacrt , ZLACRT )
#define F77_zladiv F77_FUNC( zladiv , ZLADIV )
#define F77_zlaed0 F77_FUNC( zlaed0 , ZLAED0 )
#define F77_zlaed7 F77_FUNC( zlaed7 , ZLAED7 )
#define F77_zlaed8 F77_FUNC( zlaed8 , ZLAED8 )
#define F77_zlaein F77_FUNC( zlaein , ZLAEIN )
#define F77_zlaesy F77_FUNC( zlaesy , ZLAESY )
#define F77_zlaev2 F77_FUNC( zlaev2 , ZLAEV2 )
#define F77_zlag2c F77_FUNC( zlag2c , ZLAG2C )
#define F77_zla_gbamv F77_FUNC( zla_gbamv , ZLA_GBAMV )
#define F77_zla_gbrcond_c F77_FUNC( zla_gbrcond_c , ZLA_GBRCOND_C )
#define F77_zla_gbrcond_x F77_FUNC( zla_gbrcond_x , ZLA_GBRCOND_X )
#define F77_zla_gbrfsx_extended F77_FUNC( zla_gbrfsx_extended , ZLA_GBRFSX_EXTENDED )
#define F77_zla_gbrpvgrw F77_FUNC( zla_gbrpvgrw , ZLA_GBRPVGRW )
#define F77_zla_geamv F77_FUNC( zla_geamv , ZLA_GEAMV )
#define F77_zla_gercond_c F77_FUNC( zla_gercond_c , ZLA_GERCOND_C )
#define F77_zla_gercond_x F77_FUNC( zla_gercond_x , ZLA_GERCOND_X )
#define F77_zla_gerfsx_extended F77_FUNC( zla_gerfsx_extended , ZLA_GERFSX_EXTENDED )
#define F77_zla_gerpvgrw F77_FUNC( zla_gerpvgrw , ZLA_GERPVGRW )
#define F77_zlags2 F77_FUNC( zlags2 , ZLAGS2 )
#define F77_zlagtm F77_FUNC( zlagtm , ZLAGTM )
#define F77_zla_heamv F77_FUNC( zla_heamv , ZLA_HEAMV )
#define F77_zlahef_aa F77_FUNC( zlahef_aa , ZLAHEF_AA )
#define F77_zlahef F77_FUNC( zlahef , ZLAHEF )
#define F77_zlahef_rk F77_FUNC( zlahef_rk , ZLAHEF_RK )
#define F77_zlahef_rook F77_FUNC( zlahef_rook , ZLAHEF_ROOK )
#define F77_zla_hercond_c F77_FUNC( zla_hercond_c , ZLA_HERCOND_C )
#define F77_zla_hercond_x F77_FUNC( zla_hercond_x , ZLA_HERCOND_X )
#define F77_zla_herfsx_extended F77_FUNC( zla_herfsx_extended , ZLA_HERFSX_EXTENDED )
#define F77_zla_herpvgrw F77_FUNC( zla_herpvgrw , ZLA_HERPVGRW )
#define F77_zlahqr F77_FUNC( zlahqr , ZLAHQR )
#define F77_zlahr2 F77_FUNC( zlahr2 , ZLAHR2 )
#define F77_zlahrd F77_FUNC( zlahrd , ZLAHRD )
#define F77_zlaic1 F77_FUNC( zlaic1 , ZLAIC1 )
#define F77_zla_lin_berr F77_FUNC( zla_lin_berr , ZLA_LIN_BERR )
#define F77_zlals0 F77_FUNC( zlals0 , ZLALS0 )
#define F77_zlalsa F77_FUNC( zlalsa , ZLALSA )
#define F77_zlalsd F77_FUNC( zlalsd , ZLALSD )
#define F77_zlamswlq F77_FUNC( zlamswlq , ZLAMSWLQ )
#define F77_zlamtsqr F77_FUNC( zlamtsqr , ZLAMTSQR )
#define F77_zlangb F77_FUNC( zlangb , ZLANGB )
#define F77_zlange F77_FUNC( zlange , ZLANGE )
#define F77_zlangt F77_FUNC( zlangt , ZLANGT )
#define F77_zlanhb F77_FUNC( zlanhb , ZLANHB )
#define F77_zlanhe F77_FUNC( zlanhe , ZLANHE )
#define F77_zlanhf F77_FUNC( zlanhf , ZLANHF )
#define F77_zlanhp F77_FUNC( zlanhp , ZLANHP )
#define F77_zlanhs F77_FUNC( zlanhs , ZLANHS )
#define F77_zlanht F77_FUNC( zlanht , ZLANHT )
#define F77_zlansb F77_FUNC( zlansb , ZLANSB )
#define F77_zlansp F77_FUNC( zlansp , ZLANSP )
#define F77_zlansy F77_FUNC( zlansy , ZLANSY )
#define F77_zlantb F77_FUNC( zlantb , ZLANTB )
#define F77_zlantp F77_FUNC( zlantp , ZLANTP )
#define F77_zlantr F77_FUNC( zlantr , ZLANTR )
#define F77_zlapll F77_FUNC( zlapll , ZLAPLL )
#define F77_zlapmr F77_FUNC( zlapmr , ZLAPMR )
#define F77_zlapmt F77_FUNC( zlapmt , ZLAPMT )
#define F77_zla_porcond_c F77_FUNC( zla_porcond_c , ZLA_PORCOND_C )
#define F77_zla_porcond_x F77_FUNC( zla_porcond_x , ZLA_PORCOND_X )
#define F77_zla_porfsx_extended F77_FUNC( zla_porfsx_extended , ZLA_PORFSX_EXTENDED )
#define F77_zla_porpvgrw F77_FUNC( zla_porpvgrw , ZLA_PORPVGRW )
#define F77_zlaqgb F77_FUNC( zlaqgb , ZLAQGB )
#define F77_zlaqge F77_FUNC( zlaqge , ZLAQGE )
#define F77_zlaqhb F77_FUNC( zlaqhb , ZLAQHB )
#define F77_zlaqhe F77_FUNC( zlaqhe , ZLAQHE )
#define F77_zlaqhp F77_FUNC( zlaqhp , ZLAQHP )
#define F77_zlaqp2 F77_FUNC( zlaqp2 , ZLAQP2 )
#define F77_zlaqps F77_FUNC( zlaqps , ZLAQPS )
#define F77_zlaqr0 F77_FUNC( zlaqr0 , ZLAQR0 )
#define F77_zlaqr1 F77_FUNC( zlaqr1 , ZLAQR1 )
#define F77_zlaqr2 F77_FUNC( zlaqr2 , ZLAQR2 )
#define F77_zlaqr3 F77_FUNC( zlaqr3 , ZLAQR3 )
#define F77_zlaqr4 F77_FUNC( zlaqr4 , ZLAQR4 )
#define F77_zlaqr5 F77_FUNC( zlaqr5 , ZLAQR5 )
#define F77_zlaqsb F77_FUNC( zlaqsb , ZLAQSB )
#define F77_zlaqsp F77_FUNC( zlaqsp , ZLAQSP )
#define F77_zlaqsy F77_FUNC( zlaqsy , ZLAQSY )
#define F77_zlar1v F77_FUNC( zlar1v , ZLAR1V )
#define F77_zlar2v F77_FUNC( zlar2v , ZLAR2V )
#define F77_zlarcm F77_FUNC( zlarcm , ZLARCM )
#define F77_zlarfb F77_FUNC( zlarfb , ZLARFB )
#define F77_zlarf F77_FUNC( zlarf , ZLARF )
#define F77_zlarfg F77_FUNC( zlarfg , ZLARFG )
#define F77_zlarfgp F77_FUNC( zlarfgp , ZLARFGP )
#define F77_zlarft F77_FUNC( zlarft , ZLARFT )
#define F77_zlarfx F77_FUNC( zlarfx , ZLARFX )
#define F77_zlarfy F77_FUNC( zlarfy , ZLARFY )
#define F77_zlargv F77_FUNC( zlargv , ZLARGV )
#define F77_zlarnv F77_FUNC( zlarnv , ZLARNV )
#define F77_zlarrv F77_FUNC( zlarrv , ZLARRV )
#define F77_zlarscl2 F77_FUNC( zlarscl2 , ZLARSCL2 )
#define F77_zlartg F77_FUNC( zlartg , ZLARTG )
#define F77_zlartv F77_FUNC( zlartv , ZLARTV )
#define F77_zlarzb F77_FUNC( zlarzb , ZLARZB )
#define F77_zlarz F77_FUNC( zlarz , ZLARZ )
#define F77_zlarzt F77_FUNC( zlarzt , ZLARZT )
#define F77_zlascl2 F77_FUNC( zlascl2 , ZLASCL2 )
#define F77_zlascl F77_FUNC( zlascl , ZLASCL )
#define F77_zlaset F77_FUNC( zlaset , ZLASET )
#define F77_zlasr F77_FUNC( zlasr , ZLASR )
#define F77_zlassq F77_FUNC( zlassq , ZLASSQ )
#define F77_zlaswlq F77_FUNC( zlaswlq , ZLASWLQ )
#define F77_zlaswp F77_FUNC( zlaswp , ZLASWP )
#define F77_zla_syamv F77_FUNC( zla_syamv , ZLA_SYAMV )
#define F77_zlasyf_aa F77_FUNC( zlasyf_aa , ZLASYF_AA )
#define F77_zlasyf F77_FUNC( zlasyf , ZLASYF )
#define F77_zlasyf_rk F77_FUNC( zlasyf_rk , ZLASYF_RK )
#define F77_zlasyf_rook F77_FUNC( zlasyf_rook , ZLASYF_ROOK )
#define F77_zla_syrcond_c F77_FUNC( zla_syrcond_c , ZLA_SYRCOND_C )
#define F77_zla_syrcond_x F77_FUNC( zla_syrcond_x , ZLA_SYRCOND_X )
#define F77_zla_syrfsx_extended F77_FUNC( zla_syrfsx_extended , ZLA_SYRFSX_EXTENDED )
#define F77_zla_syrpvgrw F77_FUNC( zla_syrpvgrw , ZLA_SYRPVGRW )
#define F77_zlat2c F77_FUNC( zlat2c , ZLAT2C )
#define F77_zlatbs F77_FUNC( zlatbs , ZLATBS )
#define F77_zlatdf F77_FUNC( zlatdf , ZLATDF )
#define F77_zlatps F77_FUNC( zlatps , ZLATPS )
#define F77_zlatrd F77_FUNC( zlatrd , ZLATRD )
#define F77_zlatrs F77_FUNC( zlatrs , ZLATRS )
#define F77_zlatrz F77_FUNC( zlatrz , ZLATRZ )
#define F77_zlatsqr F77_FUNC( zlatsqr , ZLATSQR )
#define F77_zlatzm F77_FUNC( zlatzm , ZLATZM )
#define F77_zlaunhr_col_getrfnp2 F77_FUNC( zlaunhr_col_getrfnp2 , ZLAUNHR_COL_GETRFNP2 )
#define F77_zlaunhr_col_getrfnp F77_FUNC( zlaunhr_col_getrfnp , ZLAUNHR_COL_GETRFNP )
#define F77_zlauu2 F77_FUNC( zlauu2 , ZLAUU2 )
#define F77_zlauum F77_FUNC( zlauum , ZLAUUM )
#define F77_zla_wwaddw F77_FUNC( zla_wwaddw , ZLA_WWADDW )
#define F77_zpbcon F77_FUNC( zpbcon , ZPBCON )
#define F77_zpbequ F77_FUNC( zpbequ , ZPBEQU )
#define F77_zpbrfs F77_FUNC( zpbrfs , ZPBRFS )
#define F77_zpbstf F77_FUNC( zpbstf , ZPBSTF )
#define F77_zpbsv F77_FUNC( zpbsv , ZPBSV )
#define F77_zpbsvx F77_FUNC( zpbsvx , ZPBSVX )
#define F77_zpbtf2 F77_FUNC( zpbtf2 , ZPBTF2 )
#define F77_zpbtrf F77_FUNC( zpbtrf , ZPBTRF )
#define F77_zpbtrs F77_FUNC( zpbtrs , ZPBTRS )
#define F77_zpftrf F77_FUNC( zpftrf , ZPFTRF )
#define F77_zpftri F77_FUNC( zpftri , ZPFTRI )
#define F77_zpftrs F77_FUNC( zpftrs , ZPFTRS )
#define F77_zpocon F77_FUNC( zpocon , ZPOCON )
#define F77_zpoequb F77_FUNC( zpoequb , ZPOEQUB )
#define F77_zpoequ F77_FUNC( zpoequ , ZPOEQU )
#define F77_zporfs F77_FUNC( zporfs , ZPORFS )
#define F77_zporfsx F77_FUNC( zporfsx , ZPORFSX )
#define F77_zposv F77_FUNC( zposv , ZPOSV )
#define F77_zposvx F77_FUNC( zposvx , ZPOSVX )
#define F77_zposvxx F77_FUNC( zposvxx , ZPOSVXX )
#define F77_zpotf2 F77_FUNC( zpotf2 , ZPOTF2 )
#define F77_zpotrf2 F77_FUNC( zpotrf2 , ZPOTRF2 )
#define F77_zpotrf F77_FUNC( zpotrf , ZPOTRF )
#define F77_zpotri F77_FUNC( zpotri , ZPOTRI )
#define F77_zpotrs F77_FUNC( zpotrs , ZPOTRS )
#define F77_zppcon F77_FUNC( zppcon , ZPPCON )
#define F77_zppequ F77_FUNC( zppequ , ZPPEQU )
#define F77_zpprfs F77_FUNC( zpprfs , ZPPRFS )
#define F77_zppsv F77_FUNC( zppsv , ZPPSV )
#define F77_zppsvx F77_FUNC( zppsvx , ZPPSVX )
#define F77_zpptrf F77_FUNC( zpptrf , ZPPTRF )
#define F77_zpptri F77_FUNC( zpptri , ZPPTRI )
#define F77_zpptrs F77_FUNC( zpptrs , ZPPTRS )
#define F77_zpstf2 F77_FUNC( zpstf2 , ZPSTF2 )
#define F77_zpstrf F77_FUNC( zpstrf , ZPSTRF )
#define F77_zptcon F77_FUNC( zptcon , ZPTCON )
#define F77_zpteqr F77_FUNC( zpteqr , ZPTEQR )
#define F77_zptrfs F77_FUNC( zptrfs , ZPTRFS )
#define F77_zptsv F77_FUNC( zptsv , ZPTSV )
#define F77_zptsvx F77_FUNC( zptsvx , ZPTSVX )
#define F77_zpttrf F77_FUNC( zpttrf , ZPTTRF )
#define F77_zpttrs F77_FUNC( zpttrs , ZPTTRS )
#define F77_zptts2 F77_FUNC( zptts2 , ZPTTS2 )
#define F77_zrot F77_FUNC( zrot , ZROT )
#define F77_zspcon F77_FUNC( zspcon , ZSPCON )
#define F77_zspmv F77_FUNC( zspmv , ZSPMV )
#define F77_zspr F77_FUNC( zspr , ZSPR )
#define F77_zsprfs F77_FUNC( zsprfs , ZSPRFS )
#define F77_zspsv F77_FUNC( zspsv , ZSPSV )
#define F77_zspsvx F77_FUNC( zspsvx , ZSPSVX )
#define F77_zsptrf F77_FUNC( zsptrf , ZSPTRF )
#define F77_zsptri F77_FUNC( zsptri , ZSPTRI )
#define F77_zsptrs F77_FUNC( zsptrs , ZSPTRS )
#define F77_zstedc F77_FUNC( zstedc , ZSTEDC )
#define F77_zstegr F77_FUNC( zstegr , ZSTEGR )
#define F77_zstein F77_FUNC( zstein , ZSTEIN )
#define F77_zstemr F77_FUNC( zstemr , ZSTEMR )
#define F77_zsteqr F77_FUNC( zsteqr , ZSTEQR )
#define F77_zsycon_3 F77_FUNC( zsycon_3 , ZSYCON_3 )
#define F77_zsycon F77_FUNC( zsycon , ZSYCON )
#define F77_zsycon_rook F77_FUNC( zsycon_rook , ZSYCON_ROOK )
#define F77_zsyconv F77_FUNC( zsyconv , ZSYCONV )
#define F77_zsyconvf F77_FUNC( zsyconvf , ZSYCONVF )
#define F77_zsyconvf_rook F77_FUNC( zsyconvf_rook , ZSYCONVF_ROOK )
#define F77_zsyequb F77_FUNC( zsyequb , ZSYEQUB )
#define F77_zsymv F77_FUNC( zsymv , ZSYMV )
#define F77_zsyr F77_FUNC( zsyr , ZSYR )
#define F77_zsyrfs F77_FUNC( zsyrfs , ZSYRFS )
#define F77_zsyrfsx F77_FUNC( zsyrfsx , ZSYRFSX )
#define F77_zsysv_aa_2stage F77_FUNC( zsysv_aa_2stage , ZSYSV_AA_2STAGE )
#define F77_zsysv_aa F77_FUNC( zsysv_aa , ZSYSV_AA )
#define F77_zsysv F77_FUNC( zsysv , ZSYSV )
#define F77_zsysv_rk F77_FUNC( zsysv_rk , ZSYSV_RK )
#define F77_zsysv_rook F77_FUNC( zsysv_rook , ZSYSV_ROOK )
#define F77_zsysvx F77_FUNC( zsysvx , ZSYSVX )
#define F77_zsysvxx F77_FUNC( zsysvxx , ZSYSVXX )
#define F77_zsyswapr F77_FUNC( zsyswapr , ZSYSWAPR )
#define F77_zsytf2 F77_FUNC( zsytf2 , ZSYTF2 )
#define F77_zsytf2_rk F77_FUNC( zsytf2_rk , ZSYTF2_RK )
#define F77_zsytf2_rook F77_FUNC( zsytf2_rook , ZSYTF2_ROOK )
#define F77_zsytrf_aa_2stage F77_FUNC( zsytrf_aa_2stage , ZSYTRF_AA_2STAGE )
#define F77_zsytrf_aa F77_FUNC( zsytrf_aa , ZSYTRF_AA )
#define F77_zsytrf F77_FUNC( zsytrf , ZSYTRF )
#define F77_zsytrf_rk F77_FUNC( zsytrf_rk , ZSYTRF_RK )
#define F77_zsytrf_rook F77_FUNC( zsytrf_rook , ZSYTRF_ROOK )
#define F77_zsytri2 F77_FUNC( zsytri2 , ZSYTRI2 )
#define F77_zsytri2x F77_FUNC( zsytri2x , ZSYTRI2X )
#define F77_zsytri_3 F77_FUNC( zsytri_3 , ZSYTRI_3 )
#define F77_zsytri_3x F77_FUNC( zsytri_3x , ZSYTRI_3X )
#define F77_zsytri F77_FUNC( zsytri , ZSYTRI )
#define F77_zsytri_rook F77_FUNC( zsytri_rook , ZSYTRI_ROOK )
#define F77_zsytrs2 F77_FUNC( zsytrs2 , ZSYTRS2 )
#define F77_zsytrs_3 F77_FUNC( zsytrs_3 , ZSYTRS_3 )
#define F77_zsytrs_aa_2stage F77_FUNC( zsytrs_aa_2stage , ZSYTRS_AA_2STAGE )
#define F77_zsytrs_aa F77_FUNC( zsytrs_aa , ZSYTRS_AA )
#define F77_zsytrs F77_FUNC( zsytrs , ZSYTRS )
#define F77_zsytrs_rook F77_FUNC( zsytrs_rook , ZSYTRS_ROOK )
#define F77_ztbcon F77_FUNC( ztbcon , ZTBCON )
#define F77_ztbrfs F77_FUNC( ztbrfs , ZTBRFS )
#define F77_ztbtrs F77_FUNC( ztbtrs , ZTBTRS )
#define F77_ztfsm F77_FUNC( ztfsm , ZTFSM )
#define F77_ztftri F77_FUNC( ztftri , ZTFTRI )
#define F77_ztfttp F77_FUNC( ztfttp , ZTFTTP )
#define F77_ztfttr F77_FUNC( ztfttr , ZTFTTR )
#define F77_ztgevc F77_FUNC( ztgevc , ZTGEVC )
#define F77_ztgex2 F77_FUNC( ztgex2 , ZTGEX2 )
#define F77_ztgexc F77_FUNC( ztgexc , ZTGEXC )
#define F77_ztgsen F77_FUNC( ztgsen , ZTGSEN )
#define F77_ztgsja F77_FUNC( ztgsja , ZTGSJA )
#define F77_ztgsna F77_FUNC( ztgsna , ZTGSNA )
#define F77_ztgsy2 F77_FUNC( ztgsy2 , ZTGSY2 )
#define F77_ztgsyl F77_FUNC( ztgsyl , ZTGSYL )
#define F77_ztpcon F77_FUNC( ztpcon , ZTPCON )
#define F77_ztplqt2 F77_FUNC( ztplqt2 , ZTPLQT2 )
#define F77_ztplqt F77_FUNC( ztplqt , ZTPLQT )
#define F77_ztpmlqt F77_FUNC( ztpmlqt , ZTPMLQT )
#define F77_ztpmqrt F77_FUNC( ztpmqrt , ZTPMQRT )
#define F77_ztpqrt2 F77_FUNC( ztpqrt2 , ZTPQRT2 )
#define F77_ztpqrt F77_FUNC( ztpqrt , ZTPQRT )
#define F77_ztprfb F77_FUNC( ztprfb , ZTPRFB )
#define F77_ztprfs F77_FUNC( ztprfs , ZTPRFS )
#define F77_ztptri F77_FUNC( ztptri , ZTPTRI )
#define F77_ztptrs F77_FUNC( ztptrs , ZTPTRS )
#define F77_ztpttf F77_FUNC( ztpttf , ZTPTTF )
#define F77_ztpttr F77_FUNC( ztpttr , ZTPTTR )
#define F77_ztrcon F77_FUNC( ztrcon , ZTRCON )
#define F77_ztrevc3 F77_FUNC( ztrevc3 , ZTREVC3 )
#define F77_ztrevc F77_FUNC( ztrevc , ZTREVC )
#define F77_ztrexc F77_FUNC( ztrexc , ZTREXC )
#define F77_ztrrfs F77_FUNC( ztrrfs , ZTRRFS )
#define F77_ztrsen F77_FUNC( ztrsen , ZTRSEN )
#define F77_ztrsna F77_FUNC( ztrsna , ZTRSNA )
#define F77_ztrsyl F77_FUNC( ztrsyl , ZTRSYL )
#define F77_ztrti2 F77_FUNC( ztrti2 , ZTRTI2 )
#define F77_ztrtri F77_FUNC( ztrtri , ZTRTRI )
#define F77_ztrtrs F77_FUNC( ztrtrs , ZTRTRS )
#define F77_ztrttf F77_FUNC( ztrttf , ZTRTTF )
#define F77_ztrttp F77_FUNC( ztrttp , ZTRTTP )
#define F77_ztzrqf F77_FUNC( ztzrqf , ZTZRQF )
#define F77_ztzrzf F77_FUNC( ztzrzf , ZTZRZF )
#define F77_zunbdb1 F77_FUNC( zunbdb1 , ZUNBDB1 )
#define F77_zunbdb2 F77_FUNC( zunbdb2 , ZUNBDB2 )
#define F77_zunbdb3 F77_FUNC( zunbdb3 , ZUNBDB3 )
#define F77_zunbdb4 F77_FUNC( zunbdb4 , ZUNBDB4 )
#define F77_zunbdb5 F77_FUNC( zunbdb5 , ZUNBDB5 )
#define F77_zunbdb6 F77_FUNC( zunbdb6 , ZUNBDB6 )
#define F77_zunbdb F77_FUNC( zunbdb , ZUNBDB )
#define F77_zuncsd2by1 F77_FUNC( zuncsd2by1 , ZUNCSD2BY1 )
#define F77_zuncsd F77_FUNC( zuncsd , ZUNCSD )
#define F77_zung2l F77_FUNC( zung2l , ZUNG2L )
#define F77_zung2r F77_FUNC( zung2r , ZUNG2R )
#define F77_zungbr F77_FUNC( zungbr , ZUNGBR )
#define F77_zunghr F77_FUNC( zunghr , ZUNGHR )
#define F77_zungl2 F77_FUNC( zungl2 , ZUNGL2 )
#define F77_zunglq F77_FUNC( zunglq , ZUNGLQ )
#define F77_zungql F77_FUNC( zungql , ZUNGQL )
#define F77_zungqr F77_FUNC( zungqr , ZUNGQR )
#define F77_zungr2 F77_FUNC( zungr2 , ZUNGR2 )
#define F77_zungrq F77_FUNC( zungrq , ZUNGRQ )
#define F77_zungtr F77_FUNC( zungtr , ZUNGTR )
#define F77_zungtsqr F77_FUNC( zungtsqr , ZUNGTSQR )
#define F77_zunhr_col F77_FUNC( zunhr_col , ZUNHR_COL )
#define F77_zunm22 F77_FUNC( zunm22 , ZUNM22 )
#define F77_zunm2l F77_FUNC( zunm2l , ZUNM2L )
#define F77_zunm2r F77_FUNC( zunm2r , ZUNM2R )
#define F77_zunmbr F77_FUNC( zunmbr , ZUNMBR )
#define F77_zunmhr F77_FUNC( zunmhr , ZUNMHR )
#define F77_zunml2 F77_FUNC( zunml2 , ZUNML2 )
#define F77_zunmlq F77_FUNC( zunmlq , ZUNMLQ )
#define F77_zunmql F77_FUNC( zunmql , ZUNMQL )
#define F77_zunmqr F77_FUNC( zunmqr , ZUNMQR )
#define F77_zunmr2 F77_FUNC( zunmr2 , ZUNMR2 )
#define F77_zunmr3 F77_FUNC( zunmr3 , ZUNMR3 )
#define F77_zunmrq F77_FUNC( zunmrq , ZUNMRQ )
#define F77_zunmrz F77_FUNC( zunmrz , ZUNMRZ )
#define F77_zunmtr F77_FUNC( zunmtr , ZUNMTR )
#define F77_zupgtr F77_FUNC( zupgtr , ZUPGTR )
#define F77_zupmtr F77_FUNC( zupmtr , ZUPMTR )
#define F77_sgetrfnp F77_FUNC( sgetrfnp , SGETRFNP )
#define F77_dgetrfnp F77_FUNC( dgetrfnp , DGETRFNP )
#define F77_cgetrfnp F77_FUNC( cgetrfnp , CGETRFNP )
#define F77_zgetrfnp F77_FUNC( zgetrfnp , ZGETRFNP )
#define F77_sspffrt2 F77_FUNC( sspffrt2 , SSPFFRT2 )
#define F77_dspffrt2 F77_FUNC( dspffrt2 , DSPFFRT2 )
#define F77_cspffrt2 F77_FUNC( cspffrt2 , CSPFFRT2 )
#define F77_zspffrt2 F77_FUNC( zspffrt2 , ZSPFFRT2 )
#define F77_sspffrtx F77_FUNC( sspffrtx , SSPFFRTX )
#define F77_dspffrtx F77_FUNC( dspffrtx , DSPFFRTX )
#define F77_cspffrtx F77_FUNC( cspffrtx , CSPFFRTX )
#define F77_zspffrtx F77_FUNC( zspffrtx , ZSPFFRTX )
#define F77_cgetrfnpi F77_FUNC( cgetrfnpi , CGETRFNPI )
#define F77_dgetrfnpi F77_FUNC( dgetrfnpi , DGETRFNPI )
#define F77_sgetrfnpi F77_FUNC( sgetrfnpi , SGETRFNPI )
#define F77_zgetrfnpi F77_FUNC( zgetrfnpi , ZGETRFNPI )

#define F77_sopgtr F77_FUNC( sopgtr, SOPGTR )
#define F77_dopgtr F77_FUNC( dopgtr, DOPGTR )
#define F77_sorcsd F77_FUNC( sorcsd, SORCSD )
#define F77_dorcsd F77_FUNC( dorcsd, DORCSD )
#define F77_sorcsd2by1 F77_FUNC( sorcsd2by1, SORCSD2BY1 )
#define F77_dorcsd2by1 F77_FUNC( dorcsd2by1, DORCSD2BY1 )
#define F77_sorghr F77_FUNC( sorghr, SORGHR )
#define F77_dorghr F77_FUNC( dorghr, DORGHR )
#define F77_sormhr F77_FUNC( sormhr, SORMHR )
#define F77_dormhr F77_FUNC( dormhr, DORMHR )

// Function Prototypes declaration
void F77_cgelst(char *trans, integer *m, integer *n, integer * nrhs, scomplex *a, integer *lda, scomplex *b, integer *ldb, scomplex * work, integer *lwork, integer *info);
void F77_clatrs3(char *uplo, char *trans, char *diag, char * normin, integer *n, integer *nrhs, scomplex *a, integer *lda, scomplex * x, integer *ldx, real *scale, real *cnorm, real *work, integer *lwork, integer *info);
void F77_ctrsyl3(char *trana, char *tranb, integer *isgn, integer *m, integer *n, scomplex *a, integer *lda, scomplex *b, integer *ldb, scomplex *c__, integer *ldc, real *scale, real *swork, integer * ldswork, integer *info);
void F77_dgelst(char *trans, integer *m, integer *n, integer * nrhs, doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal *work, integer *lwork, integer *info);
doublereal F77_dlarmm(doublereal *anorm, doublereal *bnorm, doublereal *cnorm);
void F77_dlatrs3(char *uplo, char *trans, char *diag, char * normin, integer *n, integer *nrhs, doublereal *a, integer *lda, doublereal *x, integer *ldx, doublereal *scale, doublereal *cnorm, doublereal *work, integer *lwork, integer *info);
void F77_dtrsyl3(char *trana, char *tranb, integer *isgn, integer *m, integer *n, doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal *c__, integer *ldc, doublereal *scale, integer *iwork, integer *liwork, doublereal *swork, integer *ldswork, integer *info);
void F77_sgelst(char *trans, integer *m, integer *n, integer * nrhs, real *a, integer *lda, real *b, integer *ldb, real *work, integer *lwork, integer *info);
real F77_slarmm(real *anorm, real *bnorm, real *cnorm);
void F77_slatrs3(char *uplo, char *trans, char *diag, char * normin, integer *n, integer *nrhs, real *a, integer *lda, real *x, integer *ldx, real *scale, real *cnorm, real *work, integer *lwork, integer *info);
void F77_strsyl3(char *trana, char *tranb, integer *isgn, integer *m, integer *n, real *a, integer *lda, real *b, integer *ldb, real *c__, integer *ldc, real *scale, integer *iwork, integer *liwork, real *swork, integer *ldswork, integer *info);
void F77_zgelst(char *trans, integer *m, integer *n, integer * nrhs, dcomplex *a, integer *lda, dcomplex *b, integer *ldb, dcomplex *work, integer *lwork, integer *info);
void F77_zlatrs3(char *uplo, char *trans, char *diag, char * normin, integer *n, integer *nrhs, dcomplex *a, integer *lda, dcomplex *x, integer *ldx, doublereal *scale, doublereal *cnorm, doublereal *work, integer *lwork, integer *info);
void F77_ztrsyl3(char *trana, char *tranb, integer *isgn, integer *m, integer *n, dcomplex *a, integer *lda, dcomplex *b, integer *ldb, dcomplex *c__, integer *ldc, doublereal *scale, doublereal *swork, integer *ldswork, integer *info);
double F77_dlamch(char* cmach);
double F77_dlamc3(double* a, double* b);
doublereal F77_dladiv2(doublereal* a, doublereal* b, doublereal* c__, doublereal* d__, doublereal* r__, doublereal* t);
void F77_dladiv1(doublereal* a, doublereal* b, doublereal* c__, doublereal* d__, doublereal* p, doublereal* q);
double F77_sladiv2(float* b, float* c, float* d, float* r, float* t);
void F77_sladiv1(float* a, float* b, float* c, float* d, float* p, float* q);
integer F77_iparmq(integer* ispec, char* name, char* opts, integer* n, integer* ilo, integer* ihi, integer* lwork);
integer F77_ilaenv(integer* ispec, char* name, char* opts, integer* n1, integer* n2, integer* n3, integer* n4);
integer F77_ieeeck(integer* ispec, float* zero, float* one);
logical F77_lsamen(const integer* n, const char* ca, const char* cb, integer ca_len, integer cb_len);
float F77_slamc3(float* a, float* b);
float F77_slamch(char* cmach);
void F77_cgetsqrhrt(integer *m, integer *n, integer *mb1, integer *nb1, integer *nb2, scomplex *a, integer *lda, scomplex *t, integer *ldt, scomplex *work, integer *lwork, integer *info);
void F77_claqz0(char *wants, char *wantq, char *wantz, integer * n, integer *ilo, integer *ihi, scomplex *a, integer *lda, scomplex *b, integer *ldb, scomplex *alpha, scomplex *beta, scomplex *q, integer *ldq, scomplex *z__, integer *ldz, scomplex *work, integer *lwork, real * rwork, integer *rec, integer *info);
void F77_claqz1(logical *ilq, logical *ilz, integer *k, integer * istartm, integer *istopm, integer *ihi, scomplex *a, integer *lda, scomplex *b, integer *ldb, integer *nq, integer *qstart, scomplex *q, integer *ldq, integer *nz, integer *zstart, scomplex *z__, integer * ldz);
void F77_claqz2(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nw, scomplex *a, integer *lda, scomplex *b, integer *ldb, scomplex *q, integer *ldq, scomplex *z__, integer *ldz, integer *ns, integer *nd, scomplex *alpha, scomplex *beta, scomplex *qc, integer *ldqc, scomplex *zc, integer *ldzc, scomplex *work, integer *lwork, real *rwork, integer *rec, integer * info);
void F77_claqz3(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nshifts, integer * nblock_desired__, scomplex *alpha, scomplex *beta, scomplex *a, integer * lda, scomplex *b, integer *ldb, scomplex *q, integer *ldq, scomplex *z__, integer *ldz, scomplex *qc, integer *ldqc, scomplex *zc, integer *ldzc, scomplex *work, integer *lwork, integer *info);
void F77_clarfb_gett(char *ident, integer *m, integer *n, integer *k, scomplex *t, integer *ldt, scomplex *a, integer *lda, scomplex *b, integer *ldb, scomplex *work, integer *ldwork);
void F77_cungtsqr_row(integer *m, integer *n, integer *mb, integer *nb, scomplex *a, integer *lda, scomplex *t, integer *ldt, scomplex *work, integer *lwork, integer *info);
void F77_dgetsqrhrt(integer *m, integer *n, integer *mb1, integer *nb1, integer *nb2, doublereal *a, integer *lda, doublereal * t, integer *ldt, doublereal *work, integer *lwork, integer *info);
void F77_dlaqz0(char *wants, char *wantq, char *wantz, integer * n, integer *ilo, integer *ihi, doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal *alphar, doublereal *alphai, doublereal *beta, doublereal *q, integer *ldq, doublereal *z__, integer *ldz, doublereal *work, integer *lwork, integer *rec, integer *info);
void F77_dlaqz1(doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal *sr1, doublereal *sr2, doublereal *si, doublereal *beta1, doublereal *beta2, doublereal *v);
void F77_dlaqz2(logical *ilq, logical *ilz, integer *k, integer * istartm, integer *istopm, integer *ihi, doublereal *a, integer *lda, doublereal *b, integer *ldb, integer *nq, integer *qstart, doublereal *q, integer *ldq, integer *nz, integer *zstart, doublereal *z__, integer *ldz);
void F77_dlaqz3(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nw, doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal *q, integer * ldq, doublereal *z__, integer *ldz, integer *ns, integer *nd, doublereal *alphar, doublereal *alphai, doublereal *beta, doublereal * qc, integer *ldqc, doublereal *zc, integer *ldzc, doublereal *work, integer *lwork, integer *rec, integer *info);
void F77_dlaqz4(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nshifts, integer * nblock_desired__, doublereal *sr, doublereal *si, doublereal *ss, doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal * q, integer *ldq, doublereal *z__, integer *ldz, doublereal *qc, integer *ldqc, doublereal *zc, integer *ldzc, doublereal *work, integer *lwork, integer *info);
void F77_dlarfb_gett(char *ident, integer *m, integer *n, integer *k, doublereal *t, integer *ldt, doublereal *a, integer *lda, doublereal *b, integer *ldb, doublereal *work, integer *ldwork);
void F77_dorgtsqr_row(integer *m, integer *n, integer *mb, integer *nb, doublereal *a, integer *lda, doublereal *t, integer *ldt, doublereal *work, integer *lwork, integer *info);
void F77_sgetsqrhrt(integer *m, integer *n, integer *mb1, integer *nb1, integer *nb2, real *a, integer *lda, real *t, integer * ldt, real *work, integer *lwork, integer *info);
void F77_slaqz0(char *wants, char *wantq, char *wantz, integer * n, integer *ilo, integer *ihi, real *a, integer *lda, real *b, integer *ldb, real *alphar, real *alphai, real *beta, real *q, integer *ldq, real *z__, integer *ldz, real *work, integer *lwork, integer *rec, integer *info);
void F77_slaqz1(real *a, integer *lda, real *b, integer *ldb, real *sr1, real *sr2, real *si, real *beta1, real *beta2, real *v);
void F77_slaqz2(logical *ilq, logical *ilz, integer *k, integer * istartm, integer *istopm, integer *ihi, real *a, integer *lda, real * b, integer *ldb, integer *nq, integer *qstart, real *q, integer *ldq, integer *nz, integer *zstart, real *z__, integer *ldz);
void F77_slaqz3(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nw, real *a, integer *lda, real *b, integer *ldb, real *q, integer *ldq, real *z__, integer *ldz, integer *ns, integer *nd, real *alphar, real *alphai, real *beta, real *qc, integer *ldqc, real *zc, integer *ldzc, real * work, integer *lwork, integer *rec, integer *info);
void F77_slaqz4(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nshifts, integer * nblock_desired__, real *sr, real *si, real *ss, real *a, integer *lda, real *b, integer *ldb, real *q, integer *ldq, real *z__, integer * ldz, real *qc, integer *ldqc, real *zc, integer *ldzc, real *work, integer *lwork, integer *info);
void F77_slarfb_gett(char *ident, integer *m, integer *n, integer *k, real *t, integer *ldt, real *a, integer *lda, real *b, integer *ldb, real *work, integer *ldwork);
void F77_sorgtsqr_row(integer *m, integer *n, integer *mb, integer *nb, real *a, integer *lda, real *t, integer *ldt, real *work, integer *lwork, integer *info);
void F77_zgetsqrhrt(integer *m, integer *n, integer *mb1, integer *nb1, integer *nb2, dcomplex *a, integer *lda, dcomplex *t, integer *ldt, dcomplex *work, integer *lwork, integer *info);
void F77_zlaqz0(char *wants, char *wantq, char *wantz, integer * n, integer *ilo, integer *ihi, dcomplex *a, integer *lda, dcomplex *b, integer *ldb, dcomplex *alpha, dcomplex * beta, dcomplex *q, integer *ldq, dcomplex *z__, integer * ldz, dcomplex *work, integer *lwork, doublereal *rwork, integer * rec, integer *info);
void F77_zlaqz1(logical *ilq, logical *ilz, integer *k, integer * istartm, integer *istopm, integer *ihi, dcomplex *a, integer * lda, dcomplex *b, integer *ldb, integer *nq, integer *qstart, dcomplex *q, integer *ldq, integer *nz, integer *zstart, dcomplex *z__, integer *ldz);
void F77_zlaqz2(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nw, dcomplex *a, integer *lda, dcomplex *b, integer *ldb, dcomplex *q, integer *ldq, dcomplex *z__, integer *ldz, integer *ns, integer * nd, dcomplex *alpha, dcomplex *beta, dcomplex *qc, integer *ldqc, dcomplex *zc, integer *ldzc, dcomplex *work, integer *lwork, doublereal *rwork, integer *rec, integer *info);
void F77_zlaqz3(logical *ilschur, logical *ilq, logical *ilz, integer *n, integer *ilo, integer *ihi, integer *nshifts, integer * nblock_desired__, dcomplex *alpha, dcomplex *beta, dcomplex *a, integer *lda, dcomplex *b, integer *ldb, dcomplex *q, integer *ldq, dcomplex *z__, integer *ldz, dcomplex *qc, integer *ldqc, dcomplex *zc, integer *ldzc, dcomplex *work, integer *lwork, integer *info);
void F77_zlarfb_gett(char *ident, integer *m, integer *n, integer *k, dcomplex *t, integer *ldt, dcomplex *a, integer *lda, dcomplex *b, integer *ldb, dcomplex *work, integer * ldwork);
void F77_zungtsqr_row(integer *m, integer *n, integer *mb, integer *nb, dcomplex *a, integer *lda, dcomplex *t, integer *ldt, dcomplex *work, integer *lwork, integer *info);
double F77_dla_gbrcond(char* trans, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, double* afb, integer* ldafb, integer* ipiv, integer* cmode, double* c, integer* info, double* work, integer* iwork);
double F77_dla_gbrpvgrw(integer* n, integer* kl, integer* ku, integer* ncols, double* ab, integer* ldab, double* afb, integer* ldafb);
double F77_dla_gercond(char* trans, integer* n, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, integer* cmode, double* c, integer* info, double* work, integer* iwork);
double F77_dla_gerpvgrw(integer* n, integer* ncols, double* a, integer* lda, double* af, integer* ldaf);
double F77_dlangb(char* norm, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, double* work);
double F77_dlange(char* norm, integer* m, integer* n, double* a, integer* lda, double* work);
double F77_dlangt(char* norm, integer* n, double* dl, double* d, double* du);
double F77_dlanhs(char* norm, integer* n, double* a, integer* lda, double* work);
double F77_dlansb(char* norm, char* uplo, integer* n, integer* k, double* ab, integer* ldab, double* work);
double F77_dlansf(char* norm, char* transr, char* uplo, integer* n, double* a, double* work);
double F77_dlansp(char* norm, char* uplo, integer* n, double* ap, double* work);
double F77_dlanst(char* norm, integer* n, double* d, double* e);
double F77_dlansy(char* norm, char* uplo, integer* n, double* a, integer* lda, double* work);
double F77_dlantb(char* norm, char* uplo, char* diag, integer* n, integer* k, double* ab, integer* ldab, double* work);
double F77_dlantp(char* norm, char* uplo, char* diag, integer* n, double* ap, double* work);
double F77_dlantr(char* norm, char* uplo, char* diag, integer* m, integer* n, double* a, integer* lda, double* work);
double F77_dla_porcond(char* uplo, integer* n, double* a, integer* lda, double* af, integer* ldaf, integer* cmode, double* c, integer* info, double* work, integer* iwork);
double F77_dla_porpvgrw(char* uplo, integer* ncols, double* a, integer* lda, double* af, integer* ldaf, double* work);
double F77_dlapy2(double* x, double* y);
double F77_dlapy3(double* x, double* y, double* z__);
double F77_dla_syrcond(char* uplo, integer* n, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, integer* cmode, double* c, integer* info, double* work, integer* iwork);
double F77_dla_syrpvgrw(char* uplo, integer* n, integer* info, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, double* work);
double F77_dzsum1(integer* n, dcomplex* cx, integer* incx);
double F77_zla_gbrcond_c(char* trans, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, double* c, logical* capply, integer* info, dcomplex* work, double* rwork);
double F77_zla_gbrcond_x(char* trans, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, dcomplex* x, integer* info, dcomplex* work, double* rwork);
double F77_zla_gbrpvgrw(integer* n, integer* kl, integer* ku, integer* ncols, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb);
double F77_zla_gercond_c(char* trans, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* c, logical* capply, integer* info, dcomplex* work, double* rwork);
double F77_zla_gercond_x(char* trans, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* x, integer* info, dcomplex* work, double* rwork);
double F77_zla_gerpvgrw(integer* n, integer* ncols, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf);
double F77_zla_hercond_c(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* c, logical* capply, integer* info, dcomplex* work, double* rwork);
double F77_zla_hercond_x(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* x, integer* info, dcomplex* work, double* rwork);
double F77_zla_herpvgrw(char* uplo, integer* n, integer* info, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* work);
double F77_zlangb(char* norm, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, double* work);
double F77_zlange(char* norm, integer* m, integer* n, dcomplex* a, integer* lda, double* work);
double F77_zlangt(char* norm, integer* n, dcomplex* dl, dcomplex* d, dcomplex* du);
double F77_zlanhb(char* norm, char* uplo, integer* n, integer* k, dcomplex* ab, integer* ldab, double* work);
double F77_zlanhe(char* norm, char* uplo, integer* n, dcomplex* a, integer* lda, double* work);
double F77_zlanhf(char* norm, char* transr, char* uplo, integer* n, dcomplex* a, double* work);
double F77_zlanhp(char* norm, char* uplo, integer* n, dcomplex* ap, double* work);
double F77_zlanhs(char* norm, integer* n, dcomplex* a, integer* lda, double* work);
double F77_zlanht(char* norm, integer* n, double* d, dcomplex* e);
double F77_zlansb(char* norm, char* uplo, integer* n, integer* k, dcomplex* ab, integer* ldab, double* work);
double F77_zlansp(char* norm, char* uplo, integer* n, dcomplex* ap, double* work);
double F77_zlansy(char* norm, char* uplo, integer* n, dcomplex* a, integer* lda, double* work);
double F77_zlantb(char* norm, char* uplo, char* diag, integer* n, integer* k, dcomplex* ab, integer* ldab, double* work);
double F77_zlantp(char* norm, char* uplo, char* diag, integer* n, dcomplex* ap, double* work);
double F77_zlantr(char* norm, char* uplo, char* diag, integer* m, integer* n, dcomplex* a, integer* lda, double* work);
double F77_zla_porcond_c(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, double* c, logical* capply, integer* info, dcomplex* work, double* rwork);
double F77_zla_porcond_x(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, dcomplex* x, integer* info, dcomplex* work, double* rwork);
double F77_zla_porpvgrw(char* uplo, integer* ncols, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, double* work);
double F77_zla_syrcond_c(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* c, logical* capply, integer* info, dcomplex* work, double* rwork);
double F77_zla_syrcond_x(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* x, integer* info, dcomplex* work, double* rwork);
double F77_zla_syrpvgrw(char* uplo, integer* n, integer* info, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* work);
float F77_cla_gbrcond_c(char* trans, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, float* c, logical* capply, integer* info, scomplex* work, float* rwork);
float F77_cla_gbrcond_x(char* trans, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, scomplex* x, integer* info, scomplex* work, float* rwork);
float F77_cla_gbrpvgrw(integer* n, integer* kl, integer* ku, integer* ncols, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb);
float F77_cla_gercond_c(char* trans, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* c, logical* capply, integer* info, scomplex* work, float* rwork);
float F77_cla_gercond_x(char* trans, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* x, integer* info, scomplex* work, float* rwork);
float F77_cla_gerpvgrw(integer* n, integer* ncols, scomplex* a, integer* lda, scomplex* af, integer* ldaf);
float F77_cla_hercond_c(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* c, logical* capply, integer* info, scomplex* work, float* rwork);
float F77_cla_hercond_x(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* x, integer* info, scomplex* work, float* rwork);
float F77_cla_herpvgrw(char* uplo, integer* n, integer* info, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* work);
float F77_clangb(char* norm, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, float* work);
float F77_clange(char* norm, integer* m, integer* n, scomplex* a, integer* lda, float* work);
float F77_clangt(char* norm, integer* n, scomplex* dl, scomplex* d, scomplex* du);
float F77_clanhb(char* norm, char* uplo, integer* n, integer* k, scomplex* ab, integer* ldab, float* work);
float F77_clanhe(char* norm, char* uplo, integer* n, scomplex* a, integer* lda, float* work);
float F77_clanhf(char* norm, char* transr, char* uplo, integer* n, scomplex* a, float* work);
float F77_clanhp(char* norm, char* uplo, integer* n, scomplex* ap, float* work);
float F77_clanhs(char* norm, integer* n, scomplex* a, integer* lda, float* work);
float F77_clanht(char* norm, integer* n, float* d, scomplex* e);
float F77_clansb(char* norm, char* uplo, integer* n, integer* k, scomplex* ab, integer* ldab, float* work);
float F77_clansp(char* norm, char* uplo, integer* n, scomplex* ap, float* work);
float F77_clansy(char* norm, char* uplo, integer* n, scomplex* a, integer* lda, float* work);
float F77_clantb(char* norm, char* uplo, char* diag, integer* n, integer* k, scomplex* ab, integer* ldab, float* work);
float F77_clantp(char* norm, char* uplo, char* diag, integer* n, scomplex* ap, float* work);
float F77_clantr(char* norm, char* uplo, char* diag, integer* m, integer* n, scomplex* a, integer* lda, float* work);
float F77_cla_porcond_c(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, float* c, logical* capply, integer* info, scomplex* work, float* rwork);
float F77_cla_porcond_x(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, scomplex* x, integer* info, scomplex* work, float* rwork);
float F77_cla_porpvgrw(char* uplo, integer* ncols, scomplex* a, integer* lda, scomplex* af, integer* ldaf, float* work);
float F77_cla_syrcond_c(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* c, logical* capply, integer* info, scomplex* work, float* rwork);
float F77_cla_syrcond_x(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* x, integer* info, scomplex* work, float* rwork);
float F77_cla_syrpvgrw(char* uplo, integer* n, integer* info, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* work);
float F77_scsum1(integer* n, scomplex* cx, integer* incx);
float F77_sla_gbrcond(char* trans, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, float* afb, integer* ldafb, integer* ipiv, integer* cmode, float* c, integer* info, float* work, integer* iwork);
float F77_sla_gbrpvgrw(integer* n, integer* kl, integer* ku, integer* ncols, float* ab, integer* ldab, float* afb, integer* ldafb);
float F77_sla_gercond(char* trans, integer* n, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, integer* cmode, float* c, integer* info, float* work, integer* iwork);
float F77_sla_gerpvgrw(integer* n, integer* ncols, float* a, integer* lda, float* af, integer* ldaf);
float F77_slangb(char* norm, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, float* work);
float F77_slange(char* norm, integer* m, integer* n, float* a, integer* lda, float* work);
float F77_slangt(char* norm, integer* n, float* dl, float* d, float* du);
float F77_slanhs(char* norm, integer* n, float* a, integer* lda, float* work);
float F77_slansb(char* norm, char* uplo, integer* n, integer* k, float* ab, integer* ldab, float* work);
float F77_slansf(char* norm, char* transr, char* uplo, integer* n, float* a, float* work);
float F77_slansp(char* norm, char* uplo, integer* n, float* ap, float* work);
float F77_slanst(char* norm, integer* n, float* d, float* e);
float F77_slansy(char* norm, char* uplo, integer* n, float* a, integer* lda, float* work);
float F77_slantb(char* norm, char* uplo, char* diag, integer* n, integer* k, float* ab, integer* ldab, float* work);
float F77_slantp(char* norm, char* uplo, char* diag, integer* n, float* ap, float* work);
float F77_slantr(char* norm, char* uplo, char* diag, integer* m, integer* n, float* a, integer* lda, float* work);
float F77_sla_porcond(char* uplo, integer* n, float* a, integer* lda, float* af, integer* ldaf, integer* cmode, float* c, integer* info, float* work, integer* iwork);
float F77_sla_porpvgrw(char* uplo, integer* ncols, float* a, integer* lda, float* af, integer* ldaf, float* work);
float F77_slapy2(float* x, float* y);
float F77_slapy3(float* x, float* y, float* z__);
float F77_sla_syrcond(char* uplo, integer* n, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, integer* cmode, float* c, integer* info, float* work, integer* iwork);
float F77_sla_syrpvgrw(char* uplo, integer* n, integer* info, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, float* work);
void F77_cbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, integer* m, integer* p, integer* q, float* theta, float* phi, scomplex* u1, integer* ldu1, scomplex* u2, integer* ldu2, scomplex* v1t, integer* ldv1t, scomplex* v2t, integer* ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* rwork, integer* lrwork, integer* info);
void F77_cbdsqr(char* uplo, integer* n, integer* ncvt, integer* nru, integer* ncc, float* d, float* e, scomplex* vt, integer* ldvt, scomplex* u, integer* ldu, scomplex* c, integer* ldc, float* rwork, integer* info);
void F77_cgbbrd(char* vect, integer* m, integer* n, integer* ncc, integer* kl, integer* ku, scomplex* ab, integer* ldab, float* d, float* e, scomplex* q, integer* ldq, scomplex* pt, integer* ldpt, scomplex* c, integer* ldc, scomplex* work, float* rwork, integer* info);
void F77_cgbcon(char* norm, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, integer* ipiv, float* anorm, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_cgbequb(integer* m, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_cgbequ(integer* m, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_cgbrfs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cgbrfsx(char* trans, char* equed, integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, float* r, float* c, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cgbsv(integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_cgbsvx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, char* equed, float* r, float* c, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cgbsvxx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, char* equed, float* r, float* c, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cgbtf2(integer* m, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, integer* ipiv, integer* info);
void F77_cgbtrf(integer* m, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, integer* ipiv, integer* info);
void F77_cgbtrs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_cgebak(char* job, char* side, integer* n, integer* ilo, integer* ihi, float* scale, integer* m, scomplex* v, integer* ldv, integer* info);
void F77_cgebal(char* job, integer* n, scomplex* a, integer* lda, integer* ilo, integer* ihi, float* scale, integer* info);
void F77_cgebd2(integer* m, integer* n, scomplex* a, integer* lda, float* d, float* e, scomplex* tauq, scomplex* taup, scomplex* work, integer* info);
void F77_cgebrd(integer* m, integer* n, scomplex* a, integer* lda, float* d, float* e, scomplex* tauq, scomplex* taup, scomplex* work, integer* lwork, integer* info);
void F77_cgecon(char* norm, integer* n, scomplex* a, integer* lda, float* anorm, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_cgeequb(integer* m, integer* n, scomplex* a, integer* lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_cgeequ(integer* m, integer* n, scomplex* a, integer* lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_cgees(char* jobvs, char* sort, L_fp select, integer* n, scomplex* a, integer* lda, integer* sdim, scomplex* w, scomplex* vs, integer* ldvs, scomplex* work, integer* lwork, float* rwork, logical* bwork, integer* info);
void F77_cgeesx(char* jobvs, char* sort, L_fp select, char* sense, integer* n, scomplex* a, integer* lda, integer* sdim, scomplex* w, scomplex* vs, integer* ldvs, float* rconde, float* rcondv, scomplex* work, integer* lwork, float* rwork, logical* bwork, integer* info);
void F77_cgeev(char* jobvl, char* jobvr, integer* n, scomplex* a, integer* lda, scomplex* w, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, scomplex* a, integer* lda, scomplex* w, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, integer* ilo, integer* ihi, float* scale, float* abnrm, float* rconde, float* rcondv, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgegs(char* jobvsl, char* jobvsr, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* alpha, scomplex* beta, scomplex* vsl, integer* ldvsl, scomplex* vsr, integer* ldvsr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgegv(char* jobvl, char* jobvr, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* alpha, scomplex* beta, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgehd2(integer* n, integer* ilo, integer* ihi, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cgehrd(integer* n, integer* ilo, integer* ihi, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, integer* m, integer* n, scomplex* a, integer* lda, float* sva, scomplex* u, integer* ldu, scomplex* v, integer* ldv, scomplex* cwork, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* info);
void F77_cgelq2(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cgelqf(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cgelq(integer* m, integer* n, scomplex* a, integer* lda, scomplex* t, integer* tsize, scomplex* work, integer* lwork, integer* info);
void F77_cgelqt3(integer* m, integer* n, scomplex* a, integer* lda, scomplex* t, integer* ldt, integer* info);
void F77_cgelqt(integer* m, integer* n, integer* mb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* work, integer* info);
void F77_cgels(char* trans, integer* m, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_cgelsd(integer* m, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* s, float* rcond, integer* rank, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* info);
void F77_cgelss(integer* m, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* s, float* rcond, integer* rank, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgelsx(integer* m, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* jpvt, float* rcond, integer* rank, scomplex* work, float* rwork, integer* info);
void F77_cgelsy(integer* m, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* jpvt, float* rcond, integer* rank, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgemlq(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* t, integer* tsize, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cgemlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cgemqr(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* t, integer* tsize, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cgemqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* nb, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cgeql2(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cgeqlf(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cgeqp3(integer* m, integer* n, scomplex* a, integer* lda, integer* jpvt, scomplex* tau, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgeqpf(integer* m, integer* n, scomplex* a, integer* lda, integer* jpvt, scomplex* tau, scomplex* work, float* rwork, integer* info);
void F77_cgeqr2(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cgeqr2p(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cgeqrf(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cgeqrfp(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cgeqr(integer* m, integer* n, scomplex* a, integer* lda, scomplex* t, integer* tsize, scomplex* work, integer* lwork, integer* info);
void F77_cgeqrt2(integer* m, integer* n, scomplex* a, integer* lda, scomplex* t, integer* ldt, integer* info);
void F77_cgeqrt3(integer* m, integer* n, scomplex* a, integer* lda, scomplex* t, integer* ldt, integer* info);
void F77_cgeqrt(integer* m, integer* n, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* work, integer* info);
void F77_cgerfs(char* trans, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cgerfsx(char* trans, char* equed, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* r, float* c, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cgerq2(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cgerqf(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cgesc2(integer* n, scomplex* a, integer* lda, scomplex* rhs, integer* ipiv, integer* jpiv, float* scale);
void F77_cgesdd(char* jobz, integer* m, integer* n, scomplex* a, integer* lda, float* s, scomplex* u, integer* ldu, scomplex* vt, integer* ldvt, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* info);
void F77_cgesvd(char* jobu, char* jobv, integer* m, integer* n, scomplex* a, integer* lda, float* s, scomplex* u, integer* ldu, scomplex* vt, integer* ldvt, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cgesvdq(char* joba, char* jobp, char* jobr, char* jobu, char* jobv, integer* m, integer* n, scomplex* a, integer* lda, float* s, scomplex* u, integer* ldu, scomplex* v, integer* ldv, integer* numrank, integer* iwork, integer* liwork, scomplex* cwork, integer* lcwork, float* rwork, integer* lrwork, integer* info);
void F77_cgesvdx(char* jobu, char* jobvt, char* range, integer* m, integer* n, scomplex* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, integer* ns, float* s, scomplex* u, integer* ldu, scomplex* vt, integer* ldvt, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* info);
void F77_cgesv(integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_cgesvj(char* joba, char* jobu, char* jobv, integer* m, integer* n, scomplex* a, integer* lda, float* sva, integer* mv, scomplex* v, integer* ldv, scomplex* cwork, integer* lwork, float* rwork, integer* lrwork, integer* info);
void F77_cgesvx(char* fact, char* trans, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, char* equed, float* r, float* c, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cgesvxx(char* fact, char* trans, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, char* equed, float* r, float* c, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cgetc2(integer* n, scomplex* a, integer* lda, integer* ipiv, integer* jpiv, integer* info);
void F77_cgetf2(integer* m, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_cgetrf2(integer* m, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_cgetrf(integer* m, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_cgetri(integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_cgetrs(char* trans, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_cgetsls(char* trans, integer* m, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_cggbak(char* job, char* side, integer* n, integer* ilo, integer* ihi, float* lscale, float* rscale, integer* m, scomplex* v, integer* ldv, integer* info);
void F77_cggbal(char* job, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* ilo, integer* ihi, float* lscale, float* rscale, float* work, integer* info);
void F77_cgges3(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* sdim, scomplex* alpha, scomplex* beta, scomplex* vsl, integer* ldvsl, scomplex* vsr, integer* ldvsr, scomplex* work, integer* lwork, float* rwork, logical* bwork, integer* info);
void F77_cgges(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* sdim, scomplex* alpha, scomplex* beta, scomplex* vsl, integer* ldvsl, scomplex* vsr, integer* ldvsr, scomplex* work, integer* lwork, float* rwork, logical* bwork, integer* info);
void F77_cggesx(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, char* sense, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* sdim, scomplex* alpha, scomplex* beta, scomplex* vsl, integer* ldvsl, scomplex* vsr, integer* ldvsr, float* rconde, float* rcondv, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* liwork, logical* bwork, integer* info);
void F77_cggev3(char* jobvl, char* jobvr, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* alpha, scomplex* beta, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cggev(char* jobvl, char* jobvr, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* alpha, scomplex* beta, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cggevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* alpha, scomplex* beta, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, integer* ilo, integer* ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, scomplex* work, integer* lwork, float* rwork, integer* iwork, logical* bwork, integer* info);
void F77_cggglm(integer* n, integer* m, integer* p, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* d, scomplex* x, scomplex* y, scomplex* work, integer* lwork, integer* info);
void F77_cgghd3(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* q, integer* ldq, scomplex* z, integer* ldz, scomplex* work, integer* lwork, integer* info);
void F77_cgghrd(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* q, integer* ldq, scomplex* z, integer* ldz, integer* info);
void F77_cgglse(integer* m, integer* n, integer* p, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* c, scomplex* d, scomplex* x, scomplex* work, integer* lwork, integer* info);
void F77_cggqrf(integer* n, integer* m, integer* p, scomplex* a, integer* lda, scomplex* taua, scomplex* b, integer* ldb, scomplex* taub, scomplex* work, integer* lwork, integer* info);
void F77_cggrqf(integer* m, integer* p, integer* n, scomplex* a, integer* lda, scomplex* taua, scomplex* b, integer* ldb, scomplex* taub, scomplex* work, integer* lwork, integer* info);
void F77_cggsvd3(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* alpha, float* beta, scomplex* u, integer* ldu, scomplex* v, integer* ldv, scomplex* q, integer* ldq, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* info);
void F77_cggsvd(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* alpha, float* beta, scomplex* u, integer* ldu, scomplex* v, integer* ldv, scomplex* q, integer* ldq, scomplex* work, float* rwork, integer* iwork, integer* info);
void F77_cggsvp3(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* tola, float* tolb, integer* k, integer* l, scomplex* u, integer* ldu, scomplex* v, integer* ldv, scomplex* q, integer* ldq, integer* iwork, float* rwork, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cggsvp(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* tola, float* tolb, integer* k, integer* l, scomplex* u, integer* ldu, scomplex* v, integer* ldv, scomplex* q, integer* ldq, integer* iwork, float* rwork, scomplex* tau, scomplex* work, integer* info);
void F77_cgsvj0(char* jobv, integer* m, integer* n, scomplex* a, integer* lda, scomplex* d, float* sva, integer* mv, scomplex* v, integer* ldv, float* eps, float* sfmin, float* tol, integer* nsweep, scomplex* work, integer* lwork, integer* info);
void F77_cgsvj1(char* jobv, integer* m, integer* n, integer* n1, scomplex* a, integer* lda, scomplex* d, float* sva, integer* mv, scomplex* v, integer* ldv, float* eps, float* sfmin, float* tol, integer* nsweep, scomplex* work, integer* lwork, integer* info);
void F77_cgtcon(char* norm, integer* n, scomplex* dl, scomplex* d, scomplex* du, scomplex* du2, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_cgtrfs(char* trans, integer* n, integer* nrhs, scomplex* dl, scomplex* d, scomplex* du, scomplex* dlf, scomplex* df, scomplex* duf, scomplex* du2, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cgtsv(integer* n, integer* nrhs, scomplex* dl, scomplex* d, scomplex* du, scomplex* b, integer* ldb, integer* info);
void F77_cgtsvx(char* fact, char* trans, integer* n, integer* nrhs, scomplex* dl, scomplex* d, scomplex* du, scomplex* dlf, scomplex* df, scomplex* duf, scomplex* du2, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cgttrf(integer* n, scomplex* dl, scomplex* d, scomplex* du, scomplex* du2, integer* ipiv, integer* info);
void F77_cgttrs(char* trans, integer* n, integer* nrhs, scomplex* dl, scomplex* d, scomplex* du, scomplex* du2, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_cgtts2(integer* itrans, integer* n, integer* nrhs, scomplex* dl, scomplex* d, scomplex* du, scomplex* du2, integer* ipiv, scomplex* b, integer* ldb);
void F77_chb2st_kernels(char* uplo, logical* wantz, integer* ttype, integer* st, integer* ed, integer* sweep, integer* n, integer* nb, integer* ib, scomplex* a, integer* lda, scomplex* v, scomplex* tau, integer* ldvt, scomplex* work);
void F77_chbev_2stage(char* jobz, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_chbev(char* jobz, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* info);
void F77_chbevd_2stage(char* jobz, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_chbevd(char* jobz, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_chbevx_2stage(char* jobz, char* range, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, scomplex* q, integer* ldq, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_chbevx(char* jobz, char* range, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, scomplex* q, integer* ldq, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_chbgst(char* vect, char* uplo, integer* n, integer* ka, integer* kb, scomplex* ab, integer* ldab, scomplex* bb, integer* ldbb, scomplex* x, integer* ldx, scomplex* work, float* rwork, integer* info);
void F77_chbgv(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, scomplex* ab, integer* ldab, scomplex* bb, integer* ldbb, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* info);
void F77_chbgvd(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, scomplex* ab, integer* ldab, scomplex* bb, integer* ldbb, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_chbgvx(char* jobz, char* range, char* uplo, integer* n, integer* ka, integer* kb, scomplex* ab, integer* ldab, scomplex* bb, integer* ldbb, scomplex* q, integer* ldq, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_chbtrd(char* vect, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* d, float* e, scomplex* q, integer* ldq, scomplex* work, integer* info);
void F77_checon_3(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_checon(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_checon_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_cheequb(char* uplo, integer* n, scomplex* a, integer* lda, float* s, float* scond, float* amax, scomplex* work, integer* info);
void F77_cheev_2stage(char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, float* w, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cheev(char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, float* w, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_cheevd_2stage(char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, float* w, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_cheevd(char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, float* w, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_cheevr_2stage(char* jobz, char* range, char* uplo, integer* n, scomplex* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, integer* isuppz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_cheevr(char* jobz, char* range, char* uplo, integer* n, scomplex* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, integer* isuppz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_cheevx_2stage(char* jobz, char* range, char* uplo, integer* n, scomplex* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_cheevx(char* jobz, char* range, char* uplo, integer* n, scomplex* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_chegs2(integer* itype, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* info);
void F77_chegst(integer* itype, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* info);
void F77_chegv_2stage(integer* itype, char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* w, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_chegvd(integer* itype, char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* w, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_chegv(integer* itype, char* jobz, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* w, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_chegvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_cherfs(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cherfsx(char* uplo, char* equed, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_chesv_aa_2stage(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_chesv_aa(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_chesv(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_chesv_rk(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_chesv_rook(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_chesvx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_chesvxx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, char* equed, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cheswapr(char* uplo, integer* n, scomplex* a, integer* lda, integer* i1, integer* i2);
void F77_chetd2(char* uplo, integer* n, scomplex* a, integer* lda, float* d, float* e, scomplex* tau, integer* info);
void F77_chetf2(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_chetf2_rk(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, integer* info);
void F77_chetf2_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_chetrd_2stage(char* vect, char* uplo, integer* n, scomplex* a, integer* lda, float* d, float* e, scomplex* tau, scomplex* hous2, integer* lhous2, scomplex* work, integer* lwork, integer* info);
void F77_chetrd(char* uplo, integer* n, scomplex* a, integer* lda, float* d, float* e, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_chetrd_hb2st(char* stage1, char* vect, char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* d, float* e, scomplex* hous, integer* lhous, scomplex* work, integer* lwork, integer* info);
void F77_chetrd_he2hb(char* uplo, integer* n, integer* kd, scomplex* a, integer* lda, scomplex* ab, integer* ldab, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_chetrf_aa_2stage(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, scomplex* work, integer* lwork, integer* info);
void F77_chetrf_aa(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_chetrf(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_chetrf_rk(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_chetrf_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_chetri2(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_chetri2x(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* nb, integer* info);
void F77_chetri_3(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_chetri_3x(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* work, integer* nb, integer* info);
void F77_chetri(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* info);
void F77_chetri_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* info);
void F77_chetrs2(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* info);
void F77_chetrs_3(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_chetrs_aa_2stage(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, scomplex* b, integer* ldb, integer* info);
void F77_chetrs_aa(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_chetrs(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_chetrs_rook(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_chfrk(char* transr, char* uplo, char* trans, integer* n, integer* k, float* alpha, scomplex* a, integer* lda, float* beta, scomplex* c__);
void F77_chgeqz(char* job, char* compq, char* compz, integer* n, integer* ilo, integer* ihi, scomplex* h, integer* ldh, scomplex* t, integer* ldt, scomplex* alpha, scomplex* beta, scomplex* q, integer* ldq, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_chpcon(char* uplo, integer* n, scomplex* ap, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_chpev(char* jobz, char* uplo, integer* n, scomplex* ap, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* info);
void F77_chpevd(char* jobz, char* uplo, integer* n, scomplex* ap, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_chpevx(char* jobz, char* range, char* uplo, integer* n, scomplex* ap, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_chpgst(integer* itype, char* uplo, integer* n, scomplex* ap, scomplex* bp, integer* info);
void F77_chpgvd(integer* itype, char* jobz, char* uplo, integer* n, scomplex* ap, scomplex* bp, float* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_chpgv(integer* itype, char* jobz, char* uplo, integer* n, scomplex* ap, scomplex* bp, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* info);
void F77_chpgvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, scomplex* ap, scomplex* bp, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, scomplex* work, float* rwork, integer* iwork, integer* ifail, integer* info);
void F77_chprfs(char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* afp, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_chpsv(char* uplo, integer* n, integer* nrhs, scomplex* ap, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_chpsvx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* afp, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_chptrd(char* uplo, integer* n, scomplex* ap, float* d, float* e, scomplex* tau, integer* info);
void F77_chptrf(char* uplo, integer* n, scomplex* ap, integer* ipiv, integer* info);
void F77_chptri(char* uplo, integer* n, scomplex* ap, integer* ipiv, scomplex* work, integer* info);
void F77_chptrs(char* uplo, integer* n, integer* nrhs, scomplex* ap, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_chsein(char* side, char* eigsrc, char* initv, logical* select, integer* n, scomplex* h, integer* ldh, scomplex* w, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, integer* mm, integer* m, scomplex* work, float* rwork, integer* ifaill, integer* ifailr, integer* info);
void F77_chseqr(char* job, char* compz, integer* n, integer* ilo, integer* ihi, scomplex* h, integer* ldh, scomplex* w, scomplex* z, integer* ldz, scomplex* work, integer* lwork, integer* info);
void F77_clabrd(integer* m, integer* n, integer* nb, scomplex* a, integer* lda, float* d, float* e, scomplex* tauq, scomplex* taup, scomplex* x, integer* ldx, scomplex* y, integer* ldy);
void F77_clacgv(integer* n, scomplex* x, integer* incx);
void F77_clacn2(integer* n, scomplex* v, scomplex* x, float* est, integer* kase, integer* isave);
void F77_clacon(integer* n, scomplex* v, scomplex* x, float* est, integer* kase);
void F77_clacp2(char* uplo, integer* m, integer* n, float* a, integer* lda, scomplex* b, integer* ldb);
void F77_clacpy(char* uplo, integer* m, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb);
void F77_clacrm(integer* m, integer* n, scomplex* a, integer* lda, float* b, integer* ldb, scomplex* c, integer* ldc, float* rwork);
void F77_clacrt(integer* n, scomplex* cx, integer* incx, scomplex* cy, integer* incy, scomplex* c, scomplex* s);
void F77_claed0(integer* qsiz, integer* n, float* d, float* e, scomplex* q, integer* ldq, scomplex* qstore, integer* ldqs, float* rwork, integer* iwork, integer* info);
void F77_claed7(integer* n, integer* cutpnt, integer* qsiz, integer* tlvls, integer* curlvl, integer* curpbm, float* d, scomplex* q, integer* ldq, float* rho, integer* indxq, float* qstore, integer* qptr, integer* prmptr, integer* perm, integer* givptr, integer* givcol, float* givnum, scomplex* work, float* rwork, integer* iwork, integer* info);
void F77_claed8(integer* k, integer* n, integer* qsiz, scomplex* q, integer* ldq, float* d, float* rho, integer* cutpnt, float* z, float* dlamda, scomplex* q2, integer* ldq2, float* w, integer* indxp, integer* indx, integer* indxq, integer* perm, integer* givptr, integer* givcol, float* givnum, integer* info);
void F77_claein(logical* rightv, logical* noinit, integer* n, scomplex* h, integer* ldh, scomplex* w, scomplex* v, scomplex* b, integer* ldb, float* rwork, float* eps3, float* smlnum, integer* info);
void F77_claesy(scomplex* a, scomplex* b, scomplex* c, scomplex* rt1, scomplex* rt2, scomplex* evscal, scomplex* cs1, scomplex* sn1);
void F77_claev2(scomplex* a, scomplex* b, scomplex* c, float* rt1, float* rt2, float* cs1, scomplex* sn1);
void F77_clag2z(integer* m, integer* n, scomplex* sa, integer* ldsa, dcomplex* a, integer* lda, integer* info);
void F77_cla_gbamv(integer* trans, integer* m, integer* n, integer* kl, integer* ku, float* alpha, scomplex* ab, integer* ldab, scomplex* x, integer* incx, float* beta, float* y, integer* incy);
void F77_cla_gbrfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* kl, integer* ku, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, integer* ipiv, logical* colequ, float* c, scomplex* b, integer* ldb, scomplex* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, scomplex* res, float* ayb, scomplex* dy, scomplex* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_cla_geamv(integer* trans, integer* m, integer* n, float* alpha, scomplex* a, integer* lda, scomplex* x, integer* incx, float* beta, float* y, integer* incy);
void F77_cla_gerfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, logical* colequ, float* c, scomplex* b, integer* ldb, scomplex* y, integer* ldy, float* berr_out, integer* n_norms, float* errs_n, float* errs_c, scomplex* res, float* ayb, scomplex* dy, scomplex* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_clags2(logical* upper, float* a1, scomplex* a2, float* a3, float* b1, scomplex* b2, float* b3, float* csu, scomplex* snu, float* csv, scomplex* snv, float* csq, scomplex* snq);
void F77_clagtm(char* trans, integer* n, integer* nrhs, float* alpha, scomplex* dl, scomplex* d, scomplex* du, scomplex* x, integer* ldx, float* beta, scomplex* b, integer* ldb);
void F77_cla_heamv(integer* uplo, integer* n, float* alpha, scomplex* a, integer* lda, scomplex* x, integer* incx, float* beta, float* y, integer* incy);
void F77_clahef_aa(char* uplo, integer* j1, integer* m, integer* nb, scomplex* a, integer* lda, integer* ipiv, scomplex* h, integer* ldh, scomplex* work);
void F77_clahef(char* uplo, integer* n, integer* nb, integer* kb, scomplex* a, integer* lda, integer* ipiv, scomplex* w, integer* ldw, integer* info);
void F77_clahef_rk(char* uplo, integer* n, integer* nb, integer* kb, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* w, integer* ldw, integer* info);
void F77_clahef_rook(char* uplo, integer* n, integer* nb, integer* kb, scomplex* a, integer* lda, integer* ipiv, scomplex* w, integer* ldw, integer* info);
void F77_cla_herfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, logical* colequ, float* c, scomplex* b, integer* ldb, scomplex* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, scomplex* res, float* ayb, scomplex* dy, scomplex* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_clahqr(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, scomplex* h, integer* ldh, scomplex* w, integer* iloz, integer* ihiz, scomplex* z, integer* ldz, integer* info);
void F77_clahr2(integer* n, integer* k, integer* nb, scomplex* a, integer* lda, scomplex* tau, scomplex* t, integer* ldt, scomplex* y, integer* ldy);
void F77_clahrd(integer* n, integer* k, integer* nb, scomplex* a, integer* lda, scomplex* tau, scomplex* t, integer* ldt, scomplex* y, integer* ldy);
void F77_claic1(integer* job, integer* j, scomplex* x, float* sest, scomplex* w, scomplex* gamma, float* sestpr, scomplex* s, scomplex* c__);
void F77_cla_lin_berr(integer* n, integer* nz, integer* nrhs, scomplex* res, float* ayb, float* berr);
void F77_clals0(integer* icompq, integer* nl, integer* nr, integer* sqre, integer* nrhs, scomplex* b, integer* ldb, scomplex* bx, integer* ldbx, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, float* givnum, integer* ldgnum, float* poles, float* difl, float* difr, float* z, integer* k, float* c, float* s, float* rwork, integer* info);
void F77_clalsa(integer* icompq, integer* smlsiz, integer* n, integer* nrhs, scomplex* b, integer* ldb, scomplex* bx, integer* ldbx, float* u, integer* ldu, float* vt, integer* k, float* difl, float* difr, float* z, float* poles, integer* givptr, integer* givcol, integer* ldgcol, integer* perm, float* givnum, float* c, float* s, float* rwork, integer* iwork, integer* info);
void F77_clalsd(char* uplo, integer* smlsiz, integer* n, integer* nrhs, float* d, float* e, scomplex* b, integer* ldb, float* rcond, integer* rank, scomplex* work, float* rwork, integer* iwork, integer* info);
void F77_clamswlq(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_clamtsqr(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_clapll(integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy, float* ssmin);
void F77_clapmr(logical* forwrd, integer* m, integer* n, scomplex* x, integer* ldx, integer* k);
void F77_clapmt(logical* forwrd, integer* m, integer* n, scomplex* x, integer* ldx, integer* k);
void F77_cla_porfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, logical* colequ, float* c, scomplex* b, integer* ldb, scomplex* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, scomplex* res, float* ayb, scomplex* dy, scomplex* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_claqgb(integer* m, integer* n, integer* kl, integer* ku, scomplex* ab, integer* ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, char* equed);
void F77_claqge(integer* m, integer* n, scomplex* a, integer* lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, char* equed);
void F77_claqhb(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* s, float* scond, float* amax, char* equed);
void F77_claqhe(char* uplo, integer* n, scomplex* a, integer* lda, float* s, float* scond, float* amax, char* equed);
void F77_claqhp(char* uplo, integer* n, scomplex* ap, float* s, float* scond, float* amax, char* equed);
void F77_claqp2(integer* m, integer* n, integer* offset, scomplex* a, integer* lda, integer* jpvt, scomplex* tau, float* vn1, float* vn2, scomplex* work);
void F77_claqps(integer* m, integer* n, integer* offset, integer* nb, integer* kb, scomplex* a, integer* lda, integer* jpvt, scomplex* tau, float* vn1, float* vn2, scomplex* auxv, scomplex* f, integer* ldf);
void F77_claqr0(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, scomplex* h, integer* ldh, scomplex* w, integer* iloz, integer* ihiz, scomplex* z, integer* ldz, scomplex* work, integer* lwork, integer* info);
void F77_claqr1(integer* n, scomplex* h, integer* ldh, scomplex* s1, scomplex* s2, scomplex* v);
void F77_claqr2(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, scomplex* h, integer* ldh, integer* iloz, integer* ihiz, scomplex* z, integer* ldz, integer* ns, integer* nd, scomplex* sh, scomplex* v, integer* ldv, integer* nh, scomplex* t, integer* ldt, integer* nv, scomplex* wv, integer* ldwv, scomplex* work, integer* lwork);
void F77_claqr3(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, scomplex* h, integer* ldh, integer* iloz, integer* ihiz, scomplex* z, integer* ldz, integer* ns, integer* nd, scomplex* sh, scomplex* v, integer* ldv, integer* nh, scomplex* t, integer* ldt, integer* nv, scomplex* wv, integer* ldwv, scomplex* work, integer* lwork);
void F77_claqr4(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, scomplex* h, integer* ldh, scomplex* w, integer* iloz, integer* ihiz, scomplex* z, integer* ldz, scomplex* work, integer* lwork, integer* info);
void F77_claqr5(logical* wantt, logical* wantz, integer* kacc22, integer* n, integer* ktop, integer* kbot, integer* nshfts, scomplex* s, scomplex* h, integer* ldh, integer* iloz, integer* ihiz, scomplex* z, integer* ldz, scomplex* v, integer* ldv, scomplex* u, integer* ldu, integer* nv, scomplex* wv, integer* ldwv, integer* nh, scomplex* wh, integer* ldwh);
void F77_claqsb(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* s, float* scond, float* amax, char* equed);
void F77_claqsp(char* uplo, integer* n, scomplex* ap, float* s, float* scond, float* amax, char* equed);
void F77_claqsy(char* uplo, integer* n, scomplex* a, integer* lda, float* s, float* scond, float* amax, char* equed);
void F77_clar1v(integer* n, integer* b1, integer* bn, float* lambda, float* d, float* l, float* ld, float* lld, float* pivmin, float* gaptol, scomplex* z, logical* wantnc, integer* negcnt, float* ztz, float* mingma, integer* r, integer* isuppz, float* nrminv, float* resid, float* rqcorr, float* work);
void F77_clar2v(integer* n, scomplex* x, scomplex* y, scomplex* z, integer* incx, float* c, scomplex* s, integer* incc);
void F77_clarcm(integer* m, integer* n, float* a, integer* lda, scomplex* b, integer* ldb, scomplex* c, integer* ldc, float* rwork);
void F77_clarfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* c, integer* ldc, scomplex* work, integer* ldwork);
void F77_clarf(char* side, integer* m, integer* n, scomplex* v, integer* incv, scomplex* tau, scomplex* c, integer* ldc, scomplex* work);
void F77_clarfg(integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* tau);
void F77_clarfgp(integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* tau);
void F77_clarft(char* direct, char* storev, integer* n, integer* k, scomplex* v, integer* ldv, scomplex* tau, scomplex* t, integer* ldt);
void F77_clarfx(char* side, integer* m, integer* n, scomplex* v, scomplex* tau, scomplex* c, integer* ldc, scomplex* work);
void F77_clarfy(char* uplo, integer* n, scomplex* v, integer* incv, scomplex* tau, scomplex* c, integer* ldc, scomplex* work);
void F77_clargv(integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy, float* c, integer* incc);
void F77_clarnv(integer* idist, integer* iseed, integer* n, scomplex* x);
void F77_clarrv(integer* n, float* vl, float* vu, float* d, float* l, float* pivmin, integer* isplit, integer* m, integer* dol, integer* dou, float* minrgp, float* rtol1, float* rtol2, float* w, float* werr, float* wgap, integer* iblock, integer* indexw, float* gers, scomplex* z, integer* ldz, integer* isuppz, float* work, integer* iwork, integer* info);
void F77_clarscl2(integer* m, integer* n, float* d, scomplex* x, integer* ldx);
void F77_clartg(scomplex* f, scomplex* g, float* cs, scomplex* sn, scomplex* r__);
void F77_clartv(integer* n, scomplex* x, integer* incx, scomplex* y, integer* incy, float* c, scomplex* s, integer* incc);
void F77_clarzb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* c, integer* ldc, scomplex* work, integer* ldwork);
void F77_clarz(char* side, integer* m, integer* n, integer* l, scomplex* v, integer* incv, scomplex* tau, scomplex* c, integer* ldc, scomplex* work);
void F77_clarzt(char* direct, char* storev, integer* n, integer* k, scomplex* v, integer* ldv, scomplex* tau, scomplex* t, integer* ldt);
void F77_clascl2(integer* m, integer* n, float* d, scomplex* x, integer* ldx);
void F77_clascl(char* type, integer* kl, integer* ku, float* cfrom, float* cto, integer* m, integer* n, scomplex* a, integer* lda, integer* info);
void F77_claset(char* uplo, integer* m, integer* n, scomplex* alpha, scomplex* beta, scomplex* a, integer* lda);
void F77_clasr(char* side, char* pivot, char* direct, integer* m, integer* n, float* c, float* s, scomplex* a, integer* lda);
void F77_classq(integer* n, scomplex* x, integer* incx, float* scale, float* sumsq);
void F77_claswlq(integer* m, integer* n, integer* mb, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* work, integer* lwork, integer* info);
void F77_claswp(integer* n, scomplex* a, integer* lda, integer* k1, integer* k2, integer* ipiv, integer* incx);
void F77_cla_syamv(integer* uplo, integer* n, float* alpha, scomplex* a, integer* lda, scomplex* x, integer* incx, float* beta, float* y, integer* incy);
void F77_clasyf_aa(char* uplo, integer* j1, integer* m, integer* nb, scomplex* a, integer* lda, integer* ipiv, scomplex* h, integer* ldh, scomplex* work);
void F77_clasyf(char* uplo, integer* n, integer* nb, integer* kb, scomplex* a, integer* lda, integer* ipiv, scomplex* w, integer* ldw, integer* info);
void F77_clasyf_rk(char* uplo, integer* n, integer* nb, integer* kb, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* w, integer* ldw, integer* info);
void F77_clasyf_rook(char* uplo, integer* n, integer* nb, integer* kb, scomplex* a, integer* lda, integer* ipiv, scomplex* w, integer* ldw, integer* info);
void F77_cla_syrfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, logical* colequ, float* c, scomplex* b, integer* ldb, scomplex* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, scomplex* res, float* ayb, scomplex* dy, scomplex* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_clatbs(char* uplo, char* trans, char* diag, char* normin, integer* n, integer* kd, scomplex* ab, integer* ldab, scomplex* x, float* scale, float* cnorm, integer* info);
void F77_clatdf(integer* ijob, integer* n, scomplex* z, integer* ldz, scomplex* rhs, float* rdsum, float* rdscal, integer* ipiv, integer* jpiv);
void F77_clatps(char* uplo, char* trans, char* diag, char* normin, integer* n, scomplex* ap, scomplex* x, float* scale, float* cnorm, integer* info);
void F77_clatrd(char* uplo, integer* n, integer* nb, scomplex* a, integer* lda, float* e, scomplex* tau, scomplex* w, integer* ldw);
void F77_clatrs(char* uplo, char* trans, char* diag, char* normin, integer* n, scomplex* a, integer* lda, scomplex* x, float* scale, float* cnorm, integer* info);
void F77_clatrz(integer* m, integer* n, integer* l, scomplex* a, integer* lda, scomplex* tau, scomplex* work);
void F77_clatsqr(integer* m, integer* n, integer* mb, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* work, integer* lwork, integer* info);
void F77_clatzm(char* side, integer* m, integer* n, scomplex* v, integer* incv, scomplex* tau, scomplex* c1, scomplex* c2, integer* ldc, scomplex* work);
void F77_claunhr_col_getrfnp2(integer* m, integer* n, scomplex* a, integer* lda, scomplex* d, integer* info);
void F77_claunhr_col_getrfnp(integer* m, integer* n, scomplex* a, integer* lda, scomplex* d, integer* info);
void F77_clauu2(char* uplo, integer* n, scomplex* a, integer* lda, integer* info);
void F77_clauum(char* uplo, integer* n, scomplex* a, integer* lda, integer* info);
void F77_cla_wwaddw(integer* n, scomplex* x, scomplex* y, scomplex* w);
void F77_cpbcon(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* anorm, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_cpbequ(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, float* s, float* scond, float* amax, integer* info);
void F77_cpbrfs(char* uplo, integer* n, integer* kd, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cpbstf(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, integer* info);
void F77_cpbsv(char* uplo, integer* n, integer* kd, integer* nrhs, scomplex* ab, integer* ldab, scomplex* b, integer* ldb, integer* info);
void F77_cpbsvx(char* fact, char* uplo, integer* n, integer* kd, integer* nrhs, scomplex* ab, integer* ldab, scomplex* afb, integer* ldafb, char* equed, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cpbtf2(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, integer* info);
void F77_cpbtrf(char* uplo, integer* n, integer* kd, scomplex* ab, integer* ldab, integer* info);
void F77_cpbtrs(char* uplo, integer* n, integer* kd, integer* nrhs, scomplex* ab, integer* ldab, scomplex* b, integer* ldb, integer* info);
void F77_cpftrf(char* transr, char* uplo, integer* n, scomplex* a, integer* info);
void F77_cpftri(char* transr, char* uplo, integer* n, scomplex* a, integer* info);
void F77_cpftrs(char* transr, char* uplo, integer* n, integer* nrhs, scomplex* a, scomplex* b, integer* ldb, integer* info);
void F77_cpocon(char* uplo, integer* n, scomplex* a, integer* lda, float* anorm, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_cpoequb(integer* n, scomplex* a, integer* lda, float* s, float* scond, float* amax, integer* info);
void F77_cpoequ(integer* n, scomplex* a, integer* lda, float* s, float* scond, float* amax, integer* info);
void F77_cporfs(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cporfsx(char* uplo, char* equed, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cposv(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* info);
void F77_cposvx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, char* equed, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cposvxx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, char* equed, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_cpotf2(char* uplo, integer* n, scomplex* a, integer* lda, integer* info);
void F77_cpotrf2(char* uplo, integer* n, scomplex* a, integer* lda, integer* info);
void F77_cpotrf(char* uplo, integer* n, scomplex* a, integer* lda, integer* info);
void F77_cpotri(char* uplo, integer* n, scomplex* buff_A, integer* ldim_A, integer* info);
void F77_cpotrs(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* info);
void F77_cppcon(char* uplo, integer* n, scomplex* ap, float* anorm, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_cppequ(char* uplo, integer* n, scomplex* ap, float* s, float* scond, float* amax, integer* info);
void F77_cpprfs(char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* afp, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cppsv(char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* b, integer* ldb, integer* info);
void F77_cppsvx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* afp, char* equed, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cpptrf(char* uplo, integer* n, scomplex* ap, integer* info);
void F77_cpptri(char* uplo, integer* n, scomplex* ap, integer* info);
void F77_cpptrs(char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* b, integer* ldb, integer* info);
void F77_cpstf2(char* uplo, integer* n, scomplex* a, integer* lda, integer* piv, integer* rank, float* tol, float* work, integer* info);
void F77_cpstrf(char* uplo, integer* n, scomplex* a, integer* lda, integer* piv, integer* rank, float* tol, float* work, integer* info);
void F77_cptcon(integer* n, float* d, scomplex* e, float* anorm, float* rcond, float* rwork, integer* info);
void F77_cpteqr(char* compz, integer* n, float* d, float* e, scomplex* z, integer* ldz, float* work, integer* info);
void F77_cptrfs(char* uplo, integer* n, integer* nrhs, float* d, scomplex* e, float* df, scomplex* ef, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cptsv(integer* n, integer* nrhs, float* d, scomplex* e, scomplex* b, integer* ldb, integer* info);
void F77_cptsvx(char* fact, integer* n, integer* nrhs, float* d, scomplex* e, float* df, scomplex* ef, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cpttrf(integer* n, float* d, scomplex* e, integer* info);
void F77_cpttrs(char* uplo, integer* n, integer* nrhs, float* d, scomplex* e, scomplex* b, integer* ldb, integer* info);
void F77_cptts2(integer* iuplo, integer* n, integer* nrhs, float* d, scomplex* e, scomplex* b, integer* ldb);
void F77_crot(integer* n, scomplex* cx, integer* incx, scomplex* cy, integer* incy, float* c, scomplex* s);
void F77_cspcon(char* uplo, integer* n, scomplex* ap, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_cspmv(char* uplo, integer* n, scomplex* alpha, scomplex* ap, scomplex* x, integer* incx, scomplex* beta, scomplex* y, integer* incy);
void F77_cspr(char* uplo, integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* ap);
void F77_csprfs(char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* afp, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_cspsv(char* uplo, integer* n, integer* nrhs, scomplex* ap, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_cspsvx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* ap, scomplex* afp, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_csptrf(char* uplo, integer* n, scomplex* ap, integer* ipiv, integer* info);
void F77_csptri(char* uplo, integer* n, scomplex* ap, integer* ipiv, scomplex* work, integer* info);
void F77_csptrs(char* uplo, integer* n, integer* nrhs, scomplex* ap, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_csrscl(integer* n, float* sa, scomplex* sx, integer* incx);
void F77_cstedc(char* compz, integer* n, float* d, float* e, scomplex* z, integer* ldz, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_cstegr(char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, scomplex* z, integer* ldz, integer* isuppz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_cstein(integer* n, float* d, float* e, integer* m, float* w, integer* iblock, integer* isplit, scomplex* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_cstemr(char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, integer* m, float* w, scomplex* z, integer* ldz, integer* nzc, integer* isuppz, logical* tryrac, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_csteqr(char* compz, integer* n, float* d, float* e, scomplex* z, integer* ldz, float* work, integer* info);
void F77_csteqr(char* jobz, integer* n, float* d, float* e, scomplex* z, integer* ldz, float* work, integer* info);
void F77_csycon_3(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_csycon(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_csycon_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, float* anorm, float* rcond, scomplex* work, integer* info);
void F77_csyconv(char* uplo, char* way, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* info);
void F77_csyconvf(char* uplo, char* way, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, integer* info);
void F77_csyconvf_rook(char* uplo, char* way, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, integer* info);
void F77_csyequb(char* uplo, integer* n, scomplex* a, integer* lda, float* s, float* scond, float* amax, scomplex* work, integer* info);
void F77_csymv(char* uplo, integer* n, scomplex* alpha, scomplex* a, integer* lda, scomplex* x, integer* incx, scomplex* beta, scomplex* y, integer* incy);
void F77_csyr(char* uplo, integer* n, scomplex* alpha, scomplex* x, integer* incx, scomplex* a, integer* lda);
void F77_csyrfs(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_csyrfsx(char* uplo, char* equed, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_csysv_aa_2stage(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_csysv_aa(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_csysv(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_csysv_rk(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_csysv_rook(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_csysvx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* ferr, float* berr, scomplex* work, integer* lwork, float* rwork, integer* info);
void F77_csysvxx(char* fact, char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* af, integer* ldaf, integer* ipiv, char* equed, float* s, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, scomplex* work, float* rwork, integer* info);
void F77_csyswapr(char* uplo, integer* n, scomplex* a, integer* lda, integer* i1, integer* i2);
void F77_csytf2(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_csytf2_rk(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, integer* info);
void F77_csytf2_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_csytrf_aa_2stage(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, scomplex* work, integer* lwork, integer* info);
void F77_csytrf_aa(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_csytrf(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_csytrf_rk(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_csytrf_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_csytri2(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_csytri2x(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* nb, integer* info);
void F77_csytri_3(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* work, integer* lwork, integer* info);
void F77_csytri_3x(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* work, integer* nb, integer* info);
void F77_csytri(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* info);
void F77_csytri_rook(char* uplo, integer* n, scomplex* a, integer* lda, integer* ipiv, scomplex* work, integer* info);
void F77_csytrs2(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* info);
void F77_csytrs_3(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* e, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_csytrs_aa_2stage(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, scomplex* b, integer* ldb, integer* info);
void F77_csytrs_aa(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, scomplex* work, integer* lwork, integer* info);
void F77_csytrs(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_csytrs_rook(char* uplo, integer* n, integer* nrhs, scomplex* a, integer* lda, integer* ipiv, scomplex* b, integer* ldb, integer* info);
void F77_ctbcon(char* norm, char* uplo, char* diag, integer* n, integer* kd, scomplex* ab, integer* ldab, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_ctbrfs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, scomplex* ab, integer* ldab, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_ctbtrs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, scomplex* ab, integer* ldab, scomplex* b, integer* ldb, integer* info);
void F77_ctfsm(char* transr, char* side, char* uplo, char* trans, char* diag, integer* m, integer* n, scomplex* alpha, scomplex* a, scomplex* b, integer* ldb);
void F77_ctftri(char* transr, char* uplo, char* diag, integer* n, scomplex* a, integer* info);
void F77_ctfttp(char* transr, char* uplo, integer* n, scomplex* arf, scomplex* ap, integer* info);
void F77_ctfttr(char* transr, char* uplo, integer* n, scomplex* arf, scomplex* a, integer* lda, integer* info);
void F77_ctgevc(char* side, char* howmny, logical* select, integer* n, scomplex* s, integer* lds, scomplex* p, integer* ldp, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, integer* mm, integer* m, scomplex* work, float* rwork, integer* info);
void F77_ctgex2(logical* wantq, logical* wantz, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* q, integer* ldq, scomplex* z, integer* ldz, integer* j1, integer* info);
void F77_ctgexc(logical* wantq, logical* wantz, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* q, integer* ldq, scomplex* z, integer* ldz, integer* ifst, integer* ilst, integer* info);
void F77_ctgsen(integer* ijob, logical* wantq, logical* wantz, logical* select, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* alpha, scomplex* beta, scomplex* q, integer* ldq, scomplex* z, integer* ldz, integer* m, float* pl, float* pr, float* dif, scomplex* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ctgsja(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, integer* k, integer* l, scomplex* a, integer* lda, scomplex* b, integer* ldb, float* tola, float* tolb, float* alpha, float* beta, scomplex* u, integer* ldu, scomplex* v, integer* ldv, scomplex* q, integer* ldq, scomplex* work, integer* ncycle, integer* info);
void F77_ctgsna(char* job, char* howmny, logical* select, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, float* s, float* dif, integer* mm, integer* m, scomplex* work, integer* lwork, integer* iwork, integer* info);
void F77_ctgsy2(char* trans, integer* ijob, integer* m, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* c, integer* ldc, scomplex* d, integer* ldd, scomplex* e, integer* lde, scomplex* f, integer* ldf, float* scale, float* rdsum, float* rdscal, integer* info);
void F77_ctgsyl(char* trans, integer* ijob, integer* m, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* c, integer* ldc, scomplex* d, integer* ldd, scomplex* e, integer* lde, scomplex* f, integer* ldf, float* scale, float* dif, scomplex* work, integer* lwork, integer* iwork, integer* info);
void F77_ctpcon(char* norm, char* uplo, char* diag, integer* n, scomplex* ap, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_ctplqt2(integer* m, integer* n, integer* l, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* t, integer* ldt, integer* info);
void F77_ctplqt(integer* m, integer* n, integer* l, integer* mb, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* t, integer* ldt, scomplex* work, integer* info);
void F77_ctpmlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* mb, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* work, integer* info);
void F77_ctpmqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* nb, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* work, integer* info);
void F77_ctpqrt2(integer* m, integer* n, integer* l, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* t, integer* ldt, integer* info);
void F77_ctpqrt(integer* m, integer* n, integer* l, integer* nb, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* t, integer* ldt, scomplex* work, integer* info);
void F77_ctprfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, scomplex* v, integer* ldv, scomplex* t, integer* ldt, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* work, integer* ldwork);
void F77_ctprfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, scomplex* ap, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_ctptri(char* uplo, char* diag, integer* n, scomplex* ap, integer* info);
void F77_ctptrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, scomplex* ap, scomplex* b, integer* ldb, integer* info);
void F77_ctpttf(char* transr, char* uplo, integer* n, scomplex* ap, scomplex* arf, integer* info);
void F77_ctpttr(char* uplo, integer* n, scomplex* ap, scomplex* a, integer* lda, integer* info);
void F77_ctrcon(char* norm, char* uplo, char* diag, integer* n, scomplex* a, integer* lda, float* rcond, scomplex* work, float* rwork, integer* info);
void F77_ctrevc3(char* side, char* howmny, logical* select, integer* n, scomplex* t, integer* ldt, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, integer* mm, integer* m, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* info);
void F77_ctrevc(char* side, char* howmny, logical* select, integer* n, scomplex* t, integer* ldt, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, integer* mm, integer* m, scomplex* work, float* rwork, integer* info);
void F77_ctrexc(char* compq, integer* n, scomplex* t, integer* ldt, scomplex* q, integer* ldq, integer* ifst, integer* ilst, integer* info);
void F77_ctrrfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* x, integer* ldx, float* ferr, float* berr, scomplex* work, float* rwork, integer* info);
void F77_ctrsen(char* job, char* compq, logical* select, integer* n, scomplex* t, integer* ldt, scomplex* q, integer* ldq, scomplex* w, integer* m, float* s, float* sep, scomplex* work, integer* lwork, integer* info);
void F77_ctrsna(char* job, char* howmny, logical* select, integer* n, scomplex* t, integer* ldt, scomplex* vl, integer* ldvl, scomplex* vr, integer* ldvr, float* s, float* sep, integer* mm, integer* m, scomplex* work, integer* ldwork, float* rwork, integer* info);
void F77_ctrsyl(char* trana, char* tranb, integer* isgn, integer* m, integer* n, scomplex* a, integer* lda, scomplex* b, integer* ldb, scomplex* c, integer* ldc, float* scale, integer* info);
void F77_ctrti2(char* uplo, char* diag, integer* n, scomplex* a, integer* lda, integer* info);
void F77_ctrtri(char* uplo, char* diag, integer* n, scomplex* a, integer* lda, integer* info);
void F77_ctrtrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, scomplex* a, integer* lda, scomplex* b, integer* ldb, integer* info);
void F77_ctrttf(char* transr, char* uplo, integer* n, scomplex* a, integer* lda, scomplex* arf, integer* info);
void F77_ctrttp(char* uplo, integer* n, scomplex* a, integer* lda, scomplex* ap, integer* info);
void F77_ctzrqf(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, integer* info);
void F77_ctzrzf(integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb1(integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x21, integer* ldx21, float* theta, float* phi, scomplex* taup1, scomplex* taup2, scomplex* tauq1, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb2(integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x21, integer* ldx21, float* theta, float* phi, scomplex* taup1, scomplex* taup2, scomplex* tauq1, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb3(integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x21, integer* ldx21, float* theta, float* phi, scomplex* taup1, scomplex* taup2, scomplex* tauq1, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb4(integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x21, integer* ldx21, float* theta, float* phi, scomplex* taup1, scomplex* taup2, scomplex* tauq1, scomplex* phantom, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb5(integer* m1, integer* m2, integer* n, scomplex* x1, integer* incx1, scomplex* x2, integer* incx2, scomplex* q1, integer* ldq1, scomplex* q2, integer* ldq2, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb6(integer* m1, integer* m2, integer* n, scomplex* x1, integer* incx1, scomplex* x2, integer* incx2, scomplex* q1, integer* ldq1, scomplex* q2, integer* ldq2, scomplex* work, integer* lwork, integer* info);
void F77_cunbdb(char* trans, char* signs, integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x12, integer* ldx12, scomplex* x21, integer* ldx21, scomplex* x22, integer* ldx22, float* theta, float* phi, scomplex* taup1, scomplex* taup2, scomplex* tauq1, scomplex* tauq2, scomplex* work, integer* lwork, integer* info);
void F77_cuncsd2by1(char* jobu1, char* jobu2, char* jobv1t, integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x21, integer* ldx21, float* theta, scomplex* u1, integer* ldu1, scomplex* u2, integer* ldu2, scomplex* v1t, integer* ldv1t, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* info);
void F77_cuncsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, integer* m, integer* p, integer* q, scomplex* x11, integer* ldx11, scomplex* x12, integer* ldx12, scomplex* x21, integer* ldx21, scomplex* x22, integer* ldx22, float* theta, scomplex* u1, integer* ldu1, scomplex* u2, integer* ldu2, scomplex* v1t, integer* ldv1t, scomplex* v2t, integer* ldv2t, scomplex* work, integer* lwork, float* rwork, integer* lrwork, integer* iwork, integer* info);
void F77_cung2l(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cung2r(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cungbr(char* vect, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cunghr(integer* n, integer* ilo, integer* ihi, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cungl2(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cunglq(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cungql(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cungqr(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cungr2(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* info);
void F77_cungrq(integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cungtr(char* uplo, integer* m, scomplex* a, integer* lda, scomplex* tau, scomplex* work, integer* lwork, integer* info);
void F77_cungtsqr(integer* m, integer* n, integer* mb, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* work, integer* lwork, integer* info);
void F77_cunhr_col(integer* m, integer* n, integer* nb, scomplex* a, integer* lda, scomplex* t, integer* ldt, scomplex* d, integer* info);
void F77_cunm22(char* side, char* trans, integer* m, integer* n, integer* n1, integer* n2, scomplex* q, integer* ldq, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunm2l(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cunm2r(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cunmbr(char* vect, char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunmhr(char* side, char* trans, integer* m, integer* n, integer* ilo, integer* ihi, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunml2(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cunmlq(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunmql(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunmqr(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunmr2(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cunmr3(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_cunmrq(char* side, char* trans, integer* m, integer* n, integer* k, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunmrz(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cunmtr(char* side, char* uplo, char* trans, integer* m, integer* n, scomplex* a, integer* lda, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* lwork, integer* info);
void F77_cupgtr(char* uplo, integer* n, scomplex* ap, scomplex* tau, scomplex* q, integer* ldq, scomplex* work, integer* info);
void F77_cupmtr(char* side, char* uplo, char* trans, integer* m, integer* n, scomplex* ap, scomplex* tau, scomplex* c, integer* ldc, scomplex* work, integer* info);
void F77_dbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, integer* m, integer* p, integer* q, double* theta, double* phi, double* u1, integer* ldu1, double* u2, integer* ldu2, double* v1t, integer* ldv1t, double* v2t, integer* ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* work, integer* lwork, integer* info);
void F77_dbdsdc(char* uplo, char* compq, integer* n, double* d, double* e, double* u, integer* ldu, double* vt, integer* ldvt, double* q, double* iq, double* work, integer* iwork, integer* info);
void F77_dbdsqr(char* uplo, integer* n, integer* ncvt, integer* nru, integer* ncc, double* d, double* e, double* vt, integer* ldvt, double* u, integer* ldu, double* c, integer* ldc, double* rwork, integer* info);
void F77_dbdsvdx(char* uplo, char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, integer* ns, double* s, double* z, integer* ldz, double* work, integer* iwork, integer* info);
void F77_dcombssq(double* v1, double* v2);
void F77_ddisna(char* job, integer* m, integer* n, double* d, double* sep, integer* info);
void F77_dgbbrd(char* vect, integer* m, integer* n, integer* ncc, integer* kl, integer* ku, double* ab, integer* ldab, double* d, double* e, double* q, integer* ldq, double* pt, integer* ldpt, double* c, integer* ldc, double* work, integer* info);
void F77_dgbcon(char* norm, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, integer* ipiv, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dgbequb(integer* m, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_dgbequ(integer* m, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_dgbrfs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dgbrfsx(char* trans, char* equed, integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, integer* ipiv, double* r, double* c, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dgbsv(integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dgbsvx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, integer* ipiv, char* equed, double* r, double* c, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dgbsvxx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, integer* ipiv, char* equed, double* r, double* c, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dgbtf2(integer* m, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, integer* ipiv, integer* info);
void F77_dgbtrf(integer* m, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, integer* ipiv, integer* info);
void F77_dgbtrs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dgebak(char* job, char* side, integer* n, integer* ilo, integer* ihi, double* scale, integer* m, double* v, integer* ldv, integer* info);
void F77_dgebal(char* job, integer* n, double* a, integer* lda, integer* ilo, integer* ihi, double* scale, integer* info);
void F77_dgebd2(integer* m, integer* n, double* a, integer* lda, double* d, double* e, double* tauq, double* taup, double* work, integer* info);
void F77_dgebrd(integer* m, integer* n, double* a, integer* lda, double* d, double* e, double* tauq, double* taup, double* work, integer* lwork, integer* info);
void F77_dgecon(char* norm, integer* n, double* a, integer* lda, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dgeequb(integer* m, integer* n, double* a, integer* lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_dgeequ(integer* m, integer* n, double* a, integer* lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_dgees(char* jobvs, char* sort, L_fp select, integer* n, double* a, integer* lda, integer* sdim, double* wr, double* wi, double* vs, integer* ldvs, double* work, integer* lwork, logical* bwork, integer* info);
void F77_dgeesx(char* jobvs, char* sort, L_fp select, char* sense, integer* n, double* a, integer* lda, integer* sdim, double* wr, double* wi, double* vs, integer* ldvs, double* rconde, double* rcondv, double* work, integer* lwork, integer* iwork, integer* liwork, logical* bwork, integer* info);
void F77_dgeev(char* jobvl, char* jobvr, integer* n, double* a, integer* lda, double* wr, double* wi, double* vl, integer* ldvl, double* vr, integer* ldvr, double* work, integer* lwork, integer* info);
void F77_dgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, double* a, integer* lda, double* wr, double* wi, double* vl, integer* ldvl, double* vr, integer* ldvr, integer* ilo, integer* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dgegs(char* jobvsl, char* jobvsr, integer* n, double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* vsl, integer* ldvsl, double* vsr, integer* ldvsr, double* work, integer* lwork, integer* info);
void F77_dgegv(char* jobvl, char* jobvr, integer* n, double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* vl, integer* ldvl, double* vr, integer* ldvr, double* work, integer* lwork, integer* info);
void F77_dgehd2(integer* n, integer* ilo, integer* ihi, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dgehrd(integer* n, integer* ilo, integer* ihi, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, integer* m, integer* n, double* a, integer* lda, double* sva, double* u, integer* ldu, double* v, integer* ldv, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dgelq2(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dgelqf(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dgelq(integer* m, integer* n, double* a, integer* lda, double* t, integer* tsize, double* work, integer* lwork, integer* info);
void F77_dgelqt3(integer* m, integer* n, double* a, integer* lda, double* t, integer* ldt, integer* info);
void F77_dgelqt(integer* m, integer* n, integer* mb, double* a, integer* lda, double* t, integer* ldt, double* work, integer* info);
void F77_dgels(char* trans, integer* m, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dgelsd(integer* m, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, double* s, double* rcond, integer* rank, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dgelss(integer* m, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, double* s, double* rcond, integer* rank, double* work, integer* lwork, integer* info);
void F77_dgelsx(integer* m, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, integer* jpvt, double* rcond, integer* rank, double* work, integer* info);
void F77_dgelsy(integer* m, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, integer* jpvt, double* rcond, integer* rank, double* work, integer* lwork, integer* info);
void F77_dgemlq(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* t, integer* tsize, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dgemlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, double* v, integer* ldv, double* t, integer* ldt, double* c, integer* ldc, double* work, integer* info);
void F77_dgemqr(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* t, integer* tsize, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dgemqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* nb, double* v, integer* ldv, double* t, integer* ldt, double* c, integer* ldc, double* work, integer* info);
void F77_dgeql2(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dgeqlf(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dgeqp3(integer* m, integer* n, double* a, integer* lda, integer* jpvt, double* tau, double* work, integer* lwork, integer* info);
void F77_dgeqpf(integer* m, integer* n, double* a, integer* lda, integer* jpvt, double* tau, double* work, integer* info);
void F77_dgeqr2(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dgeqr2p(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dgeqrf(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dgeqrfp(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dgeqr(integer* m, integer* n, double* a, integer* lda, double* t, integer* tsize, double* work, integer* lwork, integer* info);
void F77_dgeqrt2(integer* m, integer* n, double* a, integer* lda, double* t, integer* ldt, integer* info);
void F77_dgeqrt3(integer* m, integer* n, double* a, integer* lda, double* t, integer* ldt, integer* info);
void F77_dgeqrt(integer* m, integer* n, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* work, integer* info);
void F77_dgerfs(char* trans, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dgerfsx(char* trans, char* equed, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, double* r, double* c, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dgerq2(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dgerqf(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dgesc2(integer* n, double* a, integer* lda, double* rhs, integer* ipiv, integer* jpiv, double* scale);
void F77_dgesdd(char* jobz, integer* m, integer* n, double* a, integer* lda, double* s, double* u, integer* ldu, double* vt, integer* ldvt, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dgesvd(char* jobu, char* jobv, integer* m, integer* n, double* a, integer* lda, double* s, double* u, integer* ldu, double* vt, integer* ldvt, double* work, integer* lwork, integer* info);
void F77_dgesvdq(char* joba, char* jobp, char* jobr, char* jobu, char* jobv, integer* m, integer* n, double* a, integer* lda, double* s, double* u, integer* ldu, double* v, integer* ldv, integer* numrank, integer* iwork, integer* liwork, double* work, integer* lwork, double* rwork, integer* lrwork, integer* info);
void F77_dgesvdx(char* jobu, char* jobvt, char* range, integer* m, integer* n, double* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, integer* ns, double* s, double* u, integer* ldu, double* vt, integer* ldvt, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dgesv(integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dgesvj(char* joba, char* jobu, char* jobv, integer* m, integer* n, double* a, integer* lda, double* sva, integer* mv, double* v, integer* ldv, double* work, integer* lwork, integer* info);
void F77_dgesvx(char* fact, char* trans, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, char* equed, double* r, double* c, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dgesvxx(char* fact, char* trans, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, char* equed, double* r, double* c, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dgetc2(integer* n, double* a, integer* lda, integer* ipiv, integer* jpiv, integer* info);
void F77_dgetf2(integer* m, integer* n, double* a, integer* lda, integer* ipiv, integer* info);
void F77_dgetrf2(integer* m, integer* n, double* a, integer* lda, integer* ipiv, integer* info);
void F77_dgetrf(integer* m, integer* n, double* a, integer* lda, integer* ipiv, integer* info);
void F77_dgetri(integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dgetrs(char* trans, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dgetsls(char* trans, integer* m, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dggbak(char* job, char* side, integer* n, integer* ilo, integer* ihi, double* lscale, double* rscale, integer* m, double* v, integer* ldv, integer* info);
void F77_dggbal(char* job, integer* n, double* a, integer* lda, double* b, integer* ldb, integer* ilo, integer* ihi, double* lscale, double* rscale, double* work, integer* info);
void F77_dgges3(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, double* a, integer* lda, double* b, integer* ldb, integer* sdim, double* alphar, double* alphai, double* beta, double* vsl, integer* ldvsl, double* vsr, integer* ldvsr, double* work, integer* lwork, logical* bwork, integer* info);
void F77_dgges(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, double* a, integer* lda, double* b, integer* ldb, integer* sdim, double* alphar, double* alphai, double* beta, double* vsl, integer* ldvsl, double* vsr, integer* ldvsr, double* work, integer* lwork, logical* bwork, integer* info);
void F77_dggesx(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, char* sense, integer* n, double* a, integer* lda, double* b, integer* ldb, integer* sdim, double* alphar, double* alphai, double* beta, double* vsl, integer* ldvsl, double* vsr, integer* ldvsr, double* rconde, double* rcondv, double* work, integer* lwork, integer* iwork, integer* liwork, logical* bwork, integer* info);
void F77_dggev3(char* jobvl, char* jobvr, integer* n, double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* vl, integer* ldvl, double* vr, integer* ldvr, double* work, integer* lwork, integer* info);
void F77_dggev(char* jobvl, char* jobvr, integer* n, double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* vl, integer* ldvl, double* vr, integer* ldvr, double* work, integer* lwork, integer* info);
void F77_dggevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* vl, integer* ldvl, double* vr, integer* ldvr, integer* ilo, integer* ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, double* work, integer* lwork, integer* iwork, logical* bwork, integer* info);
void F77_dggglm(integer* n, integer* m, integer* p, double* a, integer* lda, double* b, integer* ldb, double* d, double* x, double* y, double* work, integer* lwork, integer* info);
void F77_dgghd3(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, double* a, integer* lda, double* b, integer* ldb, double* q, integer* ldq, double* z, integer* ldz, double* work, integer* lwork, integer* info);
void F77_dgghrd(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, double* a, integer* lda, double* b, integer* ldb, double* q, integer* ldq, double* z, integer* ldz, integer* info);
void F77_dgglse(integer* m, integer* n, integer* p, double* a, integer* lda, double* b, integer* ldb, double* c, double* d, double* x, double* work, integer* lwork, integer* info);
void F77_dggqrf(integer* n, integer* m, integer* p, double* a, integer* lda, double* taua, double* b, integer* ldb, double* taub, double* work, integer* lwork, integer* info);
void F77_dggrqf(integer* m, integer* p, integer* n, double* a, integer* lda, double* taua, double* b, integer* ldb, double* taub, double* work, integer* lwork, integer* info);
void F77_dggsvd3(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, double* a, integer* lda, double* b, integer* ldb, double* alpha, double* beta, double* u, integer* ldu, double* v, integer* ldv, double* q, integer* ldq, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dggsvd(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, double* a, integer* lda, double* b, integer* ldb, double* alpha, double* beta, double* u, integer* ldu, double* v, integer* ldv, double* q, integer* ldq, double* work, integer* iwork, integer* info);
void F77_dggsvp3(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, double* a, integer* lda, double* b, integer* ldb, double* tola, double* tolb, integer* k, integer* l, double* u, integer* ldu, double* v, integer* ldv, double* q, integer* ldq, integer* iwork, double* tau, double* work, integer* lwork, integer* info);
void F77_dggsvp(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, double* a, integer* lda, double* b, integer* ldb, double* tola, double* tolb, integer* k, integer* l, double* u, integer* ldu, double* v, integer* ldv, double* q, integer* ldq, integer* iwork, double* tau, double* work, integer* info);
void F77_dgsvj0(char* jobv, integer* m, integer* n, double* a, integer* lda, double* d, double* sva, integer* mv, double* v, integer* ldv, double* eps, double* sfmin, double* tol, integer* nsweep, double* work, integer* lwork, integer* info);
void F77_dgsvj1(char* jobv, integer* m, integer* n, integer* n1, double* a, integer* lda, double* d, double* sva, integer* mv, double* v, integer* ldv, double* eps, double* sfmin, double* tol, integer* nsweep, double* work, integer* lwork, integer* info);
void F77_dgtcon(char* norm, integer* n, double* dl, double* d, double* du, double* du2, integer* ipiv, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dgtrfs(char* trans, integer* n, integer* nrhs, double* dl, double* d, double* du, double* dlf, double* df, double* duf, double* du2, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dgtsv(integer* n, integer* nrhs, double* dl, double* d, double* du, double* b, integer* ldb, integer* info);
void F77_dgtsvx(char* fact, char* trans, integer* n, integer* nrhs, double* dl, double* d, double* du, double* dlf, double* df, double* duf, double* du2, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dgttrf(integer* n, double* dl, double* d, double* du, double* du2, integer* ipiv, integer* info);
void F77_dgttrs(char* trans, integer* n, integer* nrhs, double* dl, double* d, double* du, double* du2, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dgtts2(integer* itrans, integer* n, integer* nrhs, double* dl, double* d, double* du, double* du2, integer* ipiv, double* b, integer* ldb);
void F77_dhgeqz(char* job, char* compq, char* compz, integer* n, integer* ilo, integer* ihi, double* h, integer* ldh, double* t, integer* ldt, double* alphar, double* alphai, double* beta, double* q, integer* ldq, double* z, integer* ldz, double* work, integer* lwork, integer* info);
void F77_dhsein(char* side, char* eigsrc, char* initv, logical* select, integer* n, double* h, integer* ldh, double* wr, double* wi, double* vl, integer* ldvl, double* vr, integer* ldvr, integer* mm, integer* m, double* work, integer* ifaill, integer* ifailr, integer* info);
void F77_dhseqr(char* job, char* compz, integer* n, integer* ilo, integer* ihi, double* h, integer* ldh, double* wr, double* wi, double* z, integer* ldz, double* work, integer* lwork, integer* info);
void F77_dlabad(double* small_, double* large);
void F77_dlabrd(integer* m, integer* n, integer* nb, double* a, integer* lda, double* d, double* e, double* tauq, double* taup, double* x, integer* ldx, double* y, integer* ldy);
void F77_dlacn2(integer* n, double* v, double* x, integer* isgn, double* est, integer* kase, integer* isave);
void F77_dlacon(integer* n, double* v, double* x, integer* isgn, double* est, integer* kase);
void F77_dlacpy(char* uplo, integer* m, integer* n, double* a, integer* lda, double* b, integer* ldb);
void F77_dladiv(double* a, double* b, double* c, double* d, double* p, double* q);
void F77_dlae2(double* a, double* b, double* c, double* rt1, double* rt2);
void F77_dlaebz(integer* ijob, integer* nitmax, integer* n, integer* mmax, integer* minp, integer* nbmin, double* abstol, double* reltol, double* pivmin, double* d, double* e, double* e2, integer* nval, double* ab, double* c, integer* mout, integer* nab, double* work, integer* iwork, integer* info);
void F77_dlaed0(integer* icompq, integer* qsiz, integer* n, double* d, double* e, double* q, integer* ldq, double* qstore, integer* ldqs, double* work, integer* iwork, integer* info);
void F77_dlaed1(integer* n, double* d, double* q, integer* ldq, integer* indxq, double* rho, integer* cutpnt, double* work, integer* iwork, integer* info);
void F77_dlaed2(integer* k, integer* n, integer* n1, double* d, double* q, integer* ldq, integer* indxq, double* rho, double* z, double* dlamda, double* w, double* q2, integer* indx, integer* indxc, integer* indxp, integer* coltyp, integer* info);
void F77_dlaed3(integer* k, integer* n, integer* n1, double* d, double* q, integer* ldq, double* rho, double* dlamda, double* q2, integer* indx, integer* ctot, double* w, double* s, integer* info);
void F77_dlaed4(integer* n, integer* i, double* d, double* z, double* delta, double* rho, double* dlam, integer* info);
void F77_dlaed5(integer* i, double* d, double* z, double* delta, double* rho, double* dlam);
void F77_dlaed6(integer* kniter, logical* orgati, double* rho, double* d, double* z, double* finit, double* tau, integer* info);
void F77_dlaed7(integer* icompq, integer* n, integer* qsiz, integer* tlvls, integer* curlvl, integer* curpbm, double* d, double* q, integer* ldq, integer* indxq, double* rho, integer* cutpnt, double* qstore, integer* qptr, integer* prmptr, integer* perm, integer* givptr, integer* givcol, double* givnum, double* work, integer* iwork, integer* info);
void F77_dlaed8(integer* icompq, integer* k, integer* n, integer* qsiz, double* d, double* q, integer* ldq, integer* indxq, double* rho, integer* cutpnt, double* z, double* dlamda, double* q2, integer* ldq2, double* w, integer* perm, integer* givptr, integer* givcol, double* givnum, integer* indxp, integer* indx, integer* info);
void F77_dlaed9(integer* k, integer* kstart, integer* kstop, integer* n, double* d, double* q, integer* ldq, double* rho, double* dlamda, double* w, double* s, integer* lds, integer* info);
void F77_dlaeda(integer* n, integer* tlvls, integer* curlvl, integer* curpbm, integer* prmptr, integer* perm, integer* givptr, integer* givcol, double* givnum, double* q, integer* qptr, double* z, double* ztemp, integer* info);
void F77_dlaein(logical* rightv, logical* noinit, integer* n, double* h, integer* ldh, double* wr, double* wi, double* vr, double* vi, double* b, integer* ldb, double* work, double* eps3, double* smlnum, double* bignum, integer* info);
void F77_dlaev2(double* a, double* b, double* c, double* rt1, double* rt2, double* cs1, double* sn1);
void F77_dlaexc(logical* wantq, integer* n, double* t, integer* ldt, double* q, integer* ldq, integer* j1, integer* n1, integer* n2, double* work, integer* info);
void F77_dlag2(double* a, integer* lda, double* b, integer* ldb, double* safmin, double* scale1, double* scale2, double* wr1, double* wr2, double* wi);
void F77_dlag2s(integer* m, integer* n, double* a, integer* lda, float* sa, integer* ldsa, integer* info);
void F77_dla_gbamv(integer* trans, integer* m, integer* n, integer* kl, integer* ku, double* alpha, double* ab, integer* ldab, double* x, integer* incx, double* beta, double* y, integer* incy);
void F77_dla_gbrfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* kl, integer* ku, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, integer* ipiv, logical* colequ, double* c, double* b, integer* ldb, double* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, double* res, double* ayb, double* dy, double* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_dla_geamv(integer* trans, integer* m, integer* n, double* alpha, double* a, integer* lda, double* x, integer* incx, double* beta, double* y, integer* incy);
void F77_dla_gerfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, logical* colequ, double* c, double* b, integer* ldb, double* y, integer* ldy, double* berr_out, integer* n_norms, double* errs_n, double* errs_c, double* res, double* ayb, double* dy, double* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_dlags2(logical* upper, double* a1, double* a2, double* a3, double* b1, double* b2, double* b3, double* csu, double* snu, double* csv, double* snv, double* csq, double* snq);
void F77_dlagtf(integer* n, double* a, double* lambda, double* b, double* c, double* tol, double* d, integer* in, integer* info);
void F77_dlagtm(char* trans, integer* n, integer* nrhs, double* alpha, double* dl, double* d, double* du, double* x, integer* ldx, double* beta, double* b, integer* ldb);
void F77_dlagts(integer* job, integer* n, double* a, double* b, double* c, double* d, integer* in, double* y, double* tol, integer* info);
void F77_dlagv2(double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* csl, double* snl, double* csr, double* snr);
void F77_dlahqr(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, double* h, integer* ldh, double* wr, double* wi, integer* iloz, integer* ihiz, double* z, integer* ldz, integer* info);
void F77_dlahr2(integer* n, integer* k, integer* nb, double* a, integer* lda, double* tau, double* t, integer* ldt, double* y, integer* ldy);
void F77_dlahrd(integer* n, integer* k, integer* nb, double* a, integer* lda, double* tau, double* t, integer* ldt, double* y, integer* ldy);
void F77_dlaic1(integer* job, integer* j, double* x, double* sest, double* w, double* gamma, double* sestpr, double* s, double* c__);
void F77_dla_lin_berr(integer* n, integer* nz, integer* nrhs, double* res, double* ayb, double* berr);
void F77_dlaln2(logical* ltrans, integer* na, integer* nw, double* smin, double* ca, double* a, integer* lda, double* d1, double* d2, double* b, integer* ldb, double* wr, double* wi, double* x, integer* ldx, double* scale, double* xnorm, integer* info);
void F77_dlals0(integer* icompq, integer* nl, integer* nr, integer* sqre, integer* nrhs, double* b, integer* ldb, double* bx, integer* ldbx, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, double* givnum, integer* ldgnum, double* poles, double* difl, double* difr, double* z, integer* k, double* c, double* s, double* work, integer* info);
void F77_dlalsa(integer* icompq, integer* smlsiz, integer* n, integer* nrhs, double* b, integer* ldb, double* bx, integer* ldbx, double* u, integer* ldu, double* vt, integer* k, double* difl, double* difr, double* z, double* poles, integer* givptr, integer* givcol, integer* ldgcol, integer* perm, double* givnum, double* c, double* s, double* work, integer* iwork, integer* info);
void F77_dlalsd(char* uplo, integer* smlsiz, integer* n, integer* nrhs, double* d, double* e, double* b, integer* ldb, double* rcond, integer* rank, double* work, integer* iwork, integer* info);
void F77_dlamrg(integer* n1, integer* n2, double* a, integer* dtrd1, integer* dtrd2, integer* index);
void F77_dlamswlq(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dlamtsqr(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* c, integer* ldc, double* work, integer* lwork, integer* info);
integer F77_dlaneg(integer* n, double* d, double* lld, double* sigma, double* pivmin, integer* r__);
void F77_dlanv2(double* a, double* b, double* c, double* d, double* rt1r, double* rt1i, double* rt2r, double* rt2i, double* cs, double* sn);
void F77_dlaorhr_col_getrfnp2(integer* m, integer* n, double* a, integer* lda, double* d, integer* info);
void F77_dlaorhr_col_getrfnp(integer* m, integer* n, double* a, integer* lda, double* d, integer* info);
void F77_dlapll(integer* n, double* x, integer* incx, double* y, integer* incy, double* ssmin);
void F77_dlapmr(logical* forwrd, integer* m, integer* n, double* x, integer* ldx, integer* k);
void F77_dlapmt(logical* forwrd, integer* m, integer* n, double* x, integer* ldx, integer* k);
void F77_dla_porfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, logical* colequ, double* c, double* b, integer* ldb, double* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, double* res, double* ayb, double* dy, double* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_dlaqgb(integer* m, integer* n, integer* kl, integer* ku, double* ab, integer* ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, char* equed);
void F77_dlaqge(integer* m, integer* n, double* a, integer* lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, char* equed);
void F77_dlaqp2(integer* m, integer* n, integer* offset, double* a, integer* lda, integer* jpvt, double* tau, double* vn1, double* vn2, double* work);
void F77_dlaqps(integer* m, integer* n, integer* offset, integer* nb, integer* kb, double* a, integer* lda, integer* jpvt, double* tau, double* vn1, double* vn2, double* auxv, double* f, integer* ldf);
void F77_dlaqr0(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, double* h, integer* ldh, double* wr, double* wi, integer* iloz, integer* ihiz, double* z, integer* ldz, double* work, integer* lwork, integer* info);
void F77_dlaqr1(integer* n, double* h, integer* ldh, double* sr1, double* si1, double* sr2, double* si2, double* v);
void F77_dlaqr2(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, double* h, integer* ldh, integer* iloz, integer* ihiz, double* z, integer* ldz, integer* ns, integer* nd, double* sr, double* si, double* v, integer* ldv, integer* nh, double* t, integer* ldt, integer* nv, double* wv, integer* ldwv, double* work, integer* lwork);
void F77_dlaqr3(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, double* h, integer* ldh, integer* iloz, integer* ihiz, double* z, integer* ldz, integer* ns, integer* nd, double* sr, double* si, double* v, integer* ldv, integer* nh, double* t, integer* ldt, integer* nv, double* wv, integer* ldwv, double* work, integer* lwork);
void F77_dlaqr4(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, double* h, integer* ldh, double* wr, double* wi, integer* iloz, integer* ihiz, double* z, integer* ldz, double* work, integer* lwork, integer* info);
void F77_dlaqr5(logical* wantt, logical* wantz, integer* kacc22, integer* n, integer* ktop, integer* kbot, integer* nshfts, double* sr, double* si, double* h, integer* ldh, integer* iloz, integer* ihiz, double* z, integer* ldz, double* v, integer* ldv, double* u, integer* ldu, integer* nv, double* wv, integer* ldwv, integer* nh, double* wh, integer* ldwh);
void F77_dlaqsb(char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* s, double* scond, double* amax, char* equed);
void F77_dlaqsp(char* uplo, integer* n, double* ap, double* s, double* scond, double* amax, char* equed);
void F77_dlaqsy(char* uplo, integer* n, double* a, integer* lda, double* s, double* scond, double* amax, char* equed);
void F77_dlaqtr(logical* ltran, logical* lfloat, integer* n, double* t, integer* ldt, double* b, double* w, double* scale, double* x, double* work, integer* info);
void F77_dlar1v(integer* n, integer* b1, integer* bn, double* lambda, double* d, double* l, double* ld, double* lld, double* pivmin, double* gaptol, double* z, logical* wantnc, integer* negcnt, double* ztz, double* mingma, integer* r, integer* isuppz, double* nrminv, double* resid, double* rqcorr, double* work);
void F77_dlar2v(integer* n, double* x, double* y, double* z, integer* incx, double* c, double* s, integer* incc);
void F77_dlarfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, double* v, integer* ldv, double* t, integer* ldt, double* c, integer* ldc, double* work, integer* ldwork);
void F77_dlarf(char* side, integer* m, integer* n, double* v, integer* incv, double* tau, double* c, integer* ldc, double* work);
void F77_dlarfg(integer* n, double* alpha, double* x, integer* incx, double* tau);
void F77_dlarfgp(integer* n, double* alpha, double* x, integer* incx, double* tau);
void F77_dlarft(char* direct, char* storev, integer* n, integer* k, double* v, integer* ldv, double* tau, double* t, integer* ldt);
void F77_dlarfx(char* side, integer* m, integer* n, double* v, double* tau, double* c, integer* ldc, double* work);
void F77_dlarfy(char* uplo, integer* n, double* v, integer* incv, double* tau, double* c, integer* ldc, double* work);
void F77_dlargv(integer* n, double* x, integer* incx, double* y, integer* incy, double* c, integer* incc);
void F77_dlarnv(integer* idist, integer* iseed, integer* n, double* x);
void F77_dlarra(integer* n, double* d, double* e, double* e2, double* spltol, double* tnrm, integer* nsplit, integer* isplit, integer* info);
void F77_dlarrb(integer* n, double* d, double* lld, integer* ifirst, integer* ilast, double* rtol1, double* rtol2, integer* offset, double* w, double* wgap, double* werr, double* work, integer* iwork, double* pivmin, double* spdiam, integer* twist, integer* info);
void F77_dlarrc(char* jobt, integer* n, double* vl, double* vu, double* d, double* e, double* pivmin, integer* eigcnt, integer* lcnt, integer* rcnt, integer* info);
void F77_dlarrd(char* range, char* order, integer* n, double* vl, double* vu, integer* il, integer* iu, double* gers, double* reltol, double* d, double* e, double* e2, double* pivmin, integer* nsplit, integer* isplit, integer* m, double* w, double* werr, double* wl, double* wu, integer* iblock, integer* indexw, double* work, integer* iwork, integer* info);
void F77_dlarre(char* range, integer* n, double* vl, double* vu, integer* il, integer* iu, double* d, double* e, double* e2, double* rtol1, double* rtol2, double* spltol, integer* nsplit, integer* isplit, integer* m, double* w, double* werr, double* wgap, integer* iblock, integer* indexw, double* gers, double* pivmin, double* work, integer* iwork, integer* info);
void F77_dlarrf(integer* n, double* d, double* l, double* ld, integer* clstrt, integer* clend, double* w, double* wgap, double* werr, double* spdiam, double* clgapl, double* clgapr, double* pivmin, double* sigma, double* dplus, double* lplus, double* work, integer* info);
void F77_dlarrj(integer* n, double* d, double* e2, integer* ifirst, integer* ilast, double* rtol, integer* offset, double* w, double* werr, double* work, integer* iwork, double* pivmin, double* spdiam, integer* info);
void F77_dlarrk(integer* n, integer* iw, double* gl, double* gu, double* d, double* e2, double* pivmin, double* reltol, double* w, double* werr, integer* info);
void F77_dlarrr(integer* n, double* d, double* e, integer* info);
void F77_dlarrv(integer* n, double* vl, double* vu, double* d, double* l, double* pivmin, integer* isplit, integer* m, integer* dol, integer* dou, double* minrgp, double* rtol1, double* rtol2, double* w, double* werr, double* wgap, integer* iblock, integer* indexw, double* gers, double* z, integer* ldz, integer* isuppz, double* work, integer* iwork, integer* info);
void F77_dlarscl2(integer* m, integer* n, double* d, double* x, integer* ldx);
void F77_dlartg(double* f, double* g, double* cs, double* sn, double* r__);
void F77_dlartgp(double* f, double* g, double* cs, double* sn, double* r__);
void F77_dlartgs(double* x, double* y, double* sigma, double* cs, double* sn);
void F77_dlartv(integer* n, double* x, integer* incx, double* y, integer* incy, double* c, double* s, integer* incc);
void F77_dlaruv(integer* iseed, integer* n, double* x);
void F77_dlarzb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, double* v, integer* ldv, double* t, integer* ldt, double* c, integer* ldc, double* work, integer* ldwork);
void F77_dlarz(char* side, integer* m, integer* n, integer* l, double* v, integer* incv, double* tau, double* c, integer* ldc, double* work);
void F77_dlarzt(char* direct, char* storev, integer* n, integer* k, double* v, integer* ldv, double* tau, double* t, integer* ldt);
void F77_dlas2(double* f, double* g, double* h, double* ssmin, double* ssmax);
void F77_dlascl2(integer* m, integer* n, double* d, double* x, integer* ldx);
void F77_dlascl(char* type, integer* kl, integer* ku, double* cfrom, double* cto, integer* m, integer* n, double* a, integer* lda, integer* info);
void F77_dlasd0(integer* n, integer* sqre, double* d, double* e, double* u, integer* ldu, double* vt, integer* ldvt, integer* smlsiz, integer* iwork, double* work, integer* info);
void F77_dlasd1(integer* nl, integer* nr, integer* sqre, double* d, double* alpha, double* beta, double* u, integer* ldu, double* vt, integer* ldvt, integer* idxq, integer* iwork, double* work, integer* info);
void F77_dlasd2(integer* nl, integer* nr, integer* sqre, integer* k, double* d, double* z, double* alpha, double* beta, double* u, integer* ldu, double* vt, integer* ldvt, double* dsigma, double* u2, integer* ldu2, double* vt2, integer* ldvt2, integer* idxp, integer* idx, integer* idxc, integer* idxq, integer* coltyp, integer* info);
void F77_dlasd3(integer* nl, integer* nr, integer* sqre, integer* k, double* d, double* q, integer* ldq, double* dsigma, double* u, integer* ldu, double* u2, integer* ldu2, double* vt, integer* ldvt, double* vt2, integer* ldvt2, integer* idxc, integer* ctot, double* z, integer* info);
void F77_dlasd4(integer* n, integer* i, double* d, double* z, double* delta, double* rho, double* sigma, double* work, integer* info);
void F77_dlasd5(integer* i, double* d, double* z, double* delta, double* rho, double* dsigma, double* work);
void F77_dlasd6(integer* icompq, integer* nl, integer* nr, integer* sqre, double* d, double* vf, double* vl, double* alpha, double* beta, integer* idxq, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, double* givnum, integer* ldgnum, double* poles, double* difl, double* difr, double* z, integer* k, double* c, double* s, double* work, integer* iwork, integer* info);
void F77_dlasd7(integer* icompq, integer* nl, integer* nr, integer* sqre, integer* k, double* d, double* z, double* zw, double* vf, double* vfw, double* vl, double* vlw, double* alpha, double* beta, double* dsigma, integer* idx, integer* idxp, integer* idxq, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, double* givnum, integer* ldgnum, double* c, double* s, integer* info);
void F77_dlasd8(integer* icompq, integer* k, double* d, double* z, double* vf, double* vl, double* difl, double* difr, integer* lddifr, double* dsigma, double* work, integer* info);
void F77_dlasda(integer* icompq, integer* smlsiz, integer* n, integer* sqre, double* d, double* e, double* u, integer* ldu, double* vt, integer* k, double* difl, double* difr, double* z, double* poles, integer* givptr, integer* givcol, integer* ldgcol, integer* perm, double* givnum, double* c, double* s, double* work, integer* iwork, integer* info);
void F77_dlasdq(char* uplo, integer* sqre, integer* n, integer* ncvt, integer* nru, integer* ncc, double* d, double* e, double* vt, integer* ldvt, double* u, integer* ldu, double* c, integer* ldc, double* work, integer* info);
void F77_dlasdt(integer* n, integer* lvl, integer* nd, integer* inode, integer* ndiml, integer* ndimr, integer* msub);
void F77_dlaset(char* uplo, integer* m, integer* n, double* alpha, double* beta, double* a, integer* lda);
void F77_dlasq1(integer* n, double* d, double* e, double* work, integer* info);
void F77_dlasq2(integer* n, double* z, integer* info);
void F77_dlasq3(integer* i0, integer* n0, double* z, integer* pp, double* dmin, double* sigma, double* desig, double* qmax, integer* nfail, integer* iter, integer* ndiv, logical* ieee, integer* ttype, double* dmin1, double* dmin2, double* dn, double* dn1, double* dn2, double* g, double* tau);
void F77_dlasq4(integer* i0, integer* n0, double* z, integer* pp, integer* n0in, double* dmin, double* dmin1, double* dmin2, double* dn, double* dn1, double* dn2, double* tau, integer* ttype, double* g);
void F77_dlasq5(integer* i0, integer* n0, double* z, integer* pp, double* tau, double* sigma, double* dmin, double* dmin1, double* dmin2, double* dn, double* dnm1, double* dnm2, logical* ieee, double* eps);
void F77_dlasq6(integer* i0, integer* n0, double* z, integer* pp, double* dmin, double* dmin1, double* dmin2, double* dn, double* dnm1, double* dnm2);
void F77_dlasr(char* side, char* pivot, char* direct, integer* m, integer* n, double* c, double* s, double* a, integer* lda);
void F77_dlasrt(char* id, integer* n, double* d, integer* info);
void F77_dlassq(integer* n, double* x, integer* incx, double* scale, double* sumsq);
void F77_dlasv2(double* f, double* g, double* h, double* ssmin, double* ssmax, double* snr, double* csr, double* snl, double* csl);
void F77_dlaswlq(integer* m, integer* n, integer* mb, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* work, integer* lwork, integer* info);
void F77_dlaswp(integer* n, double* a, integer* lda, integer* k1, integer* k2, integer* ipiv, integer* incx);
void F77_dlasy2(logical* ltranl, logical* ltranr, integer* isgn, integer* n1, integer* n2, double* tl, integer* ldtl, double* tr, integer* ldtr, double* b, integer* ldb, double* scale, double* x, integer* ldx, double* xnorm, integer* info);
void F77_dla_syamv(integer* uplo, integer* n, double* alpha, double* a, integer* lda, double* x, integer* incx, double* beta, double* y, integer* incy);
void F77_dlasyf_aa(char* uplo, integer* j1, integer* m, integer* nb, double* a, integer* lda, integer* ipiv, double* h, integer* ldh, double* work);
void F77_dlasyf(char* uplo, integer* n, integer* nb, integer* kb, double* a, integer* lda, integer* ipiv, double* w, integer* ldw, integer* info);
void F77_dlasyf_rk(char* uplo, integer* n, integer* nb, integer* kb, double* a, integer* lda, double* e, integer* ipiv, double* w, integer* ldw, integer* info);
void F77_dlasyf_rook(char* uplo, integer* n, integer* nb, integer* kb, double* a, integer* lda, integer* ipiv, double* w, integer* ldw, integer* info);
void F77_dla_syrfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, logical* colequ, double* c, double* b, integer* ldb, double* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, double* res, double* ayb, double* dy, double* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_dlat2s(char* uplo, integer* n, double* a, integer* lda, float* sa, integer* ldsa, integer* info);
void F77_dlatbs(char* uplo, char* trans, char* diag, char* normin, integer* n, integer* kd, double* ab, integer* ldab, double* x, double* scale, double* cnorm, integer* info);
void F77_dlatdf(integer* ijob, integer* n, double* z, integer* ldz, double* rhs, double* rdsum, double* rdscal, integer* ipiv, integer* jpiv);
void F77_dlatps(char* uplo, char* trans, char* diag, char* normin, integer* n, double* ap, double* x, double* scale, double* cnorm, integer* info);
void F77_dlatrd(char* uplo, integer* n, integer* nb, double* a, integer* lda, double* e, double* tau, double* w, integer* ldw);
void F77_dlatrs(char* uplo, char* trans, char* diag, char* normin, integer* n, double* a, integer* lda, double* x, double* scale, double* cnorm, integer* info);
void F77_dlatrz(integer* m, integer* n, integer* l, double* a, integer* lda, double* tau, double* work);
void F77_dlatsqr(integer* m, integer* n, integer* mb, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* work, integer* lwork, integer* info);
void F77_dlatzm(char* side, integer* m, integer* n, double* v, integer* incv, double* tau, double* c1, double* c2, integer* ldc, double* work);
void F77_dlauu2(char* uplo, integer* n, double* a, integer* lda, integer* info);
void F77_dlauum(char* uplo, integer* n, double* a, integer* lda, integer* info);
void F77_dla_wwaddw(integer* n, double* x, double* y, double* w);
void F77_dopmtr(char* side, char* uplo, char* trans, integer* m, integer* n, double* ap, double* tau, double* c, integer* ldc, double* work, integer* info);
void F77_dorbdb1(integer* m, integer* p, integer* q, double* x11, integer* ldx11, double* x21, integer* ldx21, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* work, integer* lwork, integer* info);
void F77_dorbdb2(integer* m, integer* p, integer* q, double* x11, integer* ldx11, double* x21, integer* ldx21, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* work, integer* lwork, integer* info);
void F77_dorbdb3(integer* m, integer* p, integer* q, double* x11, integer* ldx11, double* x21, integer* ldx21, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* work, integer* lwork, integer* info);
void F77_dorbdb4(integer* m, integer* p, integer* q, double* x11, integer* ldx11, double* x21, integer* ldx21, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* phantom, double* work, integer* lwork, integer* info);
void F77_dorbdb5(integer* m1, integer* m2, integer* n, double* x1, integer* incx1, double* x2, integer* incx2, double* q1, integer* ldq1, double* q2, integer* ldq2, double* work, integer* lwork, integer* info);
void F77_dorbdb6(integer* m1, integer* m2, integer* n, double* x1, integer* incx1, double* x2, integer* incx2, double* q1, integer* ldq1, double* q2, integer* ldq2, double* work, integer* lwork, integer* info);
void F77_dorbdb(char* trans, char* signs, integer* m, integer* p, integer* q, double* x11, integer* ldx11, double* x12, integer* ldx12, double* x21, integer* ldx21, double* x22, integer* ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2, double* work, integer* lwork, integer* info);
void F77_dorg2l(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dorg2r(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dorgl2(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dorgbr(char* vect, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dorglq(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dorgql(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dorgqr(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dorgr2(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* info);
void F77_dorgrq(integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dorgtr(char* uplo, integer* m, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
void F77_dorgtsqr(integer* m, integer* n, integer* mb, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* work, integer* lwork, integer* info);
void F77_dorhr_col(integer* m, integer* n, integer* nb, double* a, integer* lda, double* t, integer* ldt, double* d, integer* info);
void F77_dorm22(char* side, char* trans, integer* m, integer* n, integer* n1, integer* n2, double* q, integer* ldq, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dorm2l(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* info);
void F77_dorm2r(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* info);
void F77_dormbr(char* vect, char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dorml2(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* info);
void F77_dormlq(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dormql(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dormqr(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dormr2(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* info);
void F77_dormr3(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* info);
void F77_dormrq(char* side, char* trans, integer* m, integer* n, integer* k, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dormrz(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dormtr(char* side, char* uplo, char* trans, integer* m, integer* n, double* a, integer* lda, double* tau, double* c, integer* ldc, double* work, integer* lwork, integer* info);
void F77_dpbcon(char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dpbequ(char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* s, double* scond, double* amax, integer* info);
void F77_dpbrfs(char* uplo, integer* n, integer* kd, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dpbstf(char* uplo, integer* n, integer* kd, double* ab, integer* ldab, integer* info);
void F77_dpbsv(char* uplo, integer* n, integer* kd, integer* nrhs, double* ab, integer* ldab, double* b, integer* ldb, integer* info);
void F77_dpbsvx(char* fact, char* uplo, integer* n, integer* kd, integer* nrhs, double* ab, integer* ldab, double* afb, integer* ldafb, char* equed, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dpbtf2(char* uplo, integer* n, integer* kd, double* ab, integer* ldab, integer* info);
void F77_dpbtrf(char* uplo, integer* n, integer* kd, double* ab, integer* ldab, integer* info);
void F77_dpbtrs(char* uplo, integer* n, integer* kd, integer* nrhs, double* ab, integer* ldab, double* b, integer* ldb, integer* info);
void F77_dpftrf(char* transr, char* uplo, integer* n, double* a, integer* info);
void F77_dpftri(char* transr, char* uplo, integer* n, double* a, integer* info);
void F77_dpftrs(char* transr, char* uplo, integer* n, integer* nrhs, double* a, double* b, integer* ldb, integer* info);
void F77_dpocon(char* uplo, integer* n, double* a, integer* lda, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dpoequb(integer* n, double* a, integer* lda, double* s, double* scond, double* amax, integer* info);
void F77_dpoequ(integer* n, double* a, integer* lda, double* s, double* scond, double* amax, integer* info);
void F77_dporfs(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dporfsx(char* uplo, char* equed, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dposv(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, integer* info);
void F77_dposvx(char* fact, char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, char* equed, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dposvxx(char* fact, char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, char* equed, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dpotf2(char* uplo, integer* n, double* a, integer* lda, integer* info);
void F77_dpotrf2(char* uplo, integer* n, double* a, integer* lda, integer* info);
void F77_dpotrf(char* uplo, integer* n, double* a, integer* lda, integer* info);
void F77_dpotri(char* uplo, integer* n, double* buff_A, integer* ldim_A, integer* info);
void F77_dpotrs(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, integer* info);
void F77_dppcon(char* uplo, integer* n, double* ap, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dppequ(char* uplo, integer* n, double* ap, double* s, double* scond, double* amax, integer* info);
void F77_dpprfs(char* uplo, integer* n, integer* nrhs, double* ap, double* afp, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dppsv(char* uplo, integer* n, integer* nrhs, double* ap, double* b, integer* ldb, integer* info);
void F77_dppsvx(char* fact, char* uplo, integer* n, integer* nrhs, double* ap, double* afp, char* equed, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dpptrf(char* uplo, integer* n, double* ap, integer* info);
void F77_dpptri(char* uplo, integer* n, double* ap, integer* info);
void F77_dpptrs(char* uplo, integer* n, integer* nrhs, double* ap, double* b, integer* ldb, integer* info);
void F77_dpstf2(char* uplo, integer* n, double* a, integer* lda, integer* piv, integer* rank, double* tol, double* work, integer* info);
void F77_dpstrf(char* uplo, integer* n, double* a, integer* lda, integer* piv, integer* rank, double* tol, double* work, integer* info);
void F77_dptcon(integer* n, double* d, double* e, double* anorm, double* rcond, double* work, integer* info);
void F77_dpteqr(char* compz, integer* n, double* d, double* e, double* z, integer* ldz, double* work, integer* info);
void F77_dptrfs(integer* n, integer* nrhs, double* d, double* e, double* df, double* ef, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* info);
void F77_dptsv(integer* n, integer* nrhs, double* d, double* e, double* b, integer* ldb, integer* info);
void F77_dptsvx(char* fact, integer* n, integer* nrhs, double* d, double* e, double* df, double* ef, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* info);
void F77_dpttrf(integer* n, double* d, double* e, integer* info);
void F77_dpttrs(integer* n, integer* nrhs, double* d, double* e, double* b, integer* ldb, integer* info);
void F77_dptts2(integer* n, integer* nrhs, double* d, double* e, double* b, integer* ldb);
void F77_drscl(integer* n, double* sa, double* sx, integer* incx);
void F77_dsb2st_kernels(char* uplo, logical* wantz, integer* ttype, integer* st, integer* ed, integer* sweep, integer* n, integer* nb, integer* ib, double* a, integer* lda, double* v, double* tau, integer* ldvt, double* work);
void F77_dsbev_2stage(char* jobz, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* info);
void F77_dsbev(char* jobz, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* w, double* z, integer* ldz, double* work, integer* info);
void F77_dsbevd_2stage(char* jobz, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsbevd(char* jobz, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsbevx_2stage(char* jobz, char* range, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* q, integer* ldq, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_dsbevx(char* jobz, char* range, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* q, integer* ldq, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_dsbgst(char* vect, char* uplo, integer* n, integer* ka, integer* kb, double* ab, integer* ldab, double* bb, integer* ldbb, double* x, integer* ldx, double* work, integer* info);
void F77_dsbgv(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, double* ab, integer* ldab, double* bb, integer* ldbb, double* w, double* z, integer* ldz, double* work, integer* info);
void F77_dsbgvd(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, double* ab, integer* ldab, double* bb, integer* ldbb, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsbgvx(char* jobz, char* range, char* uplo, integer* n, integer* ka, integer* kb, double* ab, integer* ldab, double* bb, integer* ldbb, double* q, integer* ldq, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_dsbtrd(char* vect, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* d, double* e, double* q, integer* ldq, double* work, integer* info);
void F77_dsfrk(char* transr, char* uplo, char* trans, integer* n, integer* k, double* alpha, double* a, integer* lda, double* beta, double* c__);
void F77_dsgesv(integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* work, float* swork, integer* iter, integer* info);
void F77_dspcon(char* uplo, integer* n, double* ap, integer* ipiv, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dspev(char* jobz, char* uplo, integer* n, double* ap, double* w, double* z, integer* ldz, double* work, integer* info);
void F77_dspevd(char* jobz, char* uplo, integer* n, double* ap, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dspevx(char* jobz, char* range, char* uplo, integer* n, double* ap, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_dspgst(integer* itype, char* uplo, integer* n, double* ap, double* bp, integer* info);
void F77_dspgvd(integer* itype, char* jobz, char* uplo, integer* n, double* ap, double* bp, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dspgv(integer* itype, char* jobz, char* uplo, integer* n, double* ap, double* bp, double* w, double* z, integer* ldz, double* work, integer* info);
void F77_dspgvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, double* ap, double* bp, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_dsposv(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, double* x, integer* ldx, double* work, float* swork, integer* iter, integer* info);
void F77_dsprfs(char* uplo, integer* n, integer* nrhs, double* ap, double* afp, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dspsv(char* uplo, integer* n, integer* nrhs, double* ap, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dspsvx(char* fact, char* uplo, integer* n, integer* nrhs, double* ap, double* afp, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dsptrd(char* uplo, integer* n, double* ap, double* d, double* e, double* tau, integer* info);
void F77_dsptrf(char* uplo, integer* n, double* ap, integer* ipiv, integer* info);
void F77_dsptri(char* uplo, integer* n, double* ap, integer* ipiv, double* work, integer* info);
void F77_dsptrs(char* uplo, integer* n, integer* nrhs, double* ap, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dstebz(char* range, char* order, integer* n, double* vl, double* vu, integer* il, integer* iu, double* abstol, double* d, double* e, integer* m, integer* nsplit, double* w, integer* iblock, integer* isplit, double* work, integer* iwork, integer* info);
void F77_dstedc(char* compz, integer* n, double* d, double* e, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dstegr(char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, integer* isuppz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dstein(integer* n, double* d, double* e, integer* m, double* w, integer* iblock, integer* isplit, double* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_dstemr(char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, integer* m, double* w, double* z, integer* ldz, integer* nzc, integer* isuppz, logical* tryrac, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsteqr(char* compz, integer* n, double* d, double* e, double* z, integer* ldz, double* work, integer* info);
void F77_dsteqr(char* jobz, integer* n, double* d, double* e, double* z, integer* ldz, double* work, integer* info);
void F77_dsterf(integer* n, double* d, double* e, integer* info);
void F77_dstev(char* jobz, integer* n, double* d, double* e, double* z, integer* ldz, double* work, integer* info);
void F77_dstevd(char* jobz, integer* n, double* d, double* e, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dstevr(char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, integer* isuppz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dstevx(char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_dsycon_3(char* uplo, integer* n, double* a, integer* lda, double* e, integer* ipiv, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dsycon(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dsycon_rook(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* anorm, double* rcond, double* work, integer* iwork, integer* info);
void F77_dsyconv(char* uplo, char* way, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* info);
void F77_dsyconvf(char* uplo, char* way, integer* n, double* a, integer* lda, double* e, integer* ipiv, integer* info);
void F77_dsyconvf_rook(char* uplo, char* way, integer* n, double* a, integer* lda, double* e, integer* ipiv, integer* info);
void F77_dsyequb(char* uplo, integer* n, double* a, integer* lda, double* s, double* scond, double* amax, double* work, integer* info);
void F77_dsyev_2stage(char* jobz, char* uplo, integer* n, double* a, integer* lda, double* w, double* work, integer* lwork, integer* info);
void F77_dsyev(char* jobz, char* uplo, integer* n, double* a, integer* lda, double* w, double* work, integer* lwork, integer* info);
void F77_dsyevd_2stage(char* jobz, char* uplo, integer* n, double* a, integer* lda, double* w, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsyevd(char* jobz, char* uplo, integer* n, double* a, integer* lda, double* w, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsyevr_2stage(char* jobz, char* range, char* uplo, integer* n, double* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, integer* isuppz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsyevr(char* jobz, char* range, char* uplo, integer* n, double* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, integer* isuppz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsyevx_2stage(char* jobz, char* range, char* uplo, integer* n, double* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_dsyevx(char* jobz, char* range, char* uplo, integer* n, double* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_dsygs2(integer* itype, char* uplo, integer* n, double* a, integer* lda, double* b, integer* ldb, integer* info);
void F77_dsygst(integer* itype, char* uplo, integer* n, double* a, integer* lda, double* b, integer* ldb, integer* info);
void F77_dsygv_2stage(integer* itype, char* jobz, char* uplo, integer* n, double* a, integer* lda, double* b, integer* ldb, double* w, double* work, integer* lwork, integer* info);
void F77_dsygvd(integer* itype, char* jobz, char* uplo, integer* n, double* a, integer* lda, double* b, integer* ldb, double* w, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dsygv(integer* itype, char* jobz, char* uplo, integer* n, double* a, integer* lda, double* b, integer* ldb, double* w, double* work, integer* lwork, integer* info);
void F77_dsygvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, double* a, integer* lda, double* b, integer* ldb, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, double* z, integer* ldz, double* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_dsyrfs(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dsyrfsx(char* uplo, char* equed, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dsysv_aa_2stage(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* tb, integer* ltb, integer* ipiv, integer* ipiv2, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dsysv_aa(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dsysv(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dsysv_rk(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* e, integer* ipiv, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dsysv_rook(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dsysvx(char* fact, char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* ferr, double* berr, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dsysvxx(char* fact, char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* af, integer* ldaf, integer* ipiv, char* equed, double* s, double* b, integer* ldb, double* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, double* work, integer* iwork, integer* info);
void F77_dsyswapr(char* uplo, integer* n, double* a, integer* lda, integer* i1, integer* i2);
void F77_dsytd2(char* uplo, integer* n, double* a, integer* lda, double* d, double* e, double* tau, integer* info);
void F77_dsytf2(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, integer* info);
void F77_dsytf2_rk(char* uplo, integer* n, double* a, integer* lda, double* e, integer* ipiv, integer* info);
void F77_dsytf2_rook(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, integer* info);
void F77_dsytrd_2stage(char* vect, char* uplo, integer* n, double* a, integer* lda, double* d, double* e, double* tau, double* hous2, integer* lhous2, double* work, integer* lwork, integer* info);
void F77_dsytrd(char* uplo, integer* n, double* a, integer* lda, double* d, double* e, double* tau, double* work, integer* lwork, integer* info);
void F77_dsytrd_sb2st(char* stage1, char* vect, char* uplo, integer* n, integer* kd, double* ab, integer* ldab, double* d, double* e, double* hous, integer* lhous, double* work, integer* lwork, integer* info);
void F77_dsytrd_sy2sb(char* uplo, integer* n, integer* kd, double* a, integer* lda, double* ab, integer* ldab, double* tau, double* work, integer* lwork, integer* info);
void F77_dsytrf_aa_2stage(char* uplo, integer* n, double* a, integer* lda, double* tb, integer* ltb, integer* ipiv, integer* ipiv2, double* work, integer* lwork, integer* info);
void F77_dsytrf_aa(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dsytrf(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dsytrf_rk(char* uplo, integer* n, double* a, integer* lda, double* e, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dsytrf_rook(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dsytri2(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dsytri2x(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* nb, integer* info);
void F77_dsytri_3(char* uplo, integer* n, double* a, integer* lda, double* e, integer* ipiv, double* work, integer* lwork, integer* info);
void F77_dsytri_3x(char* uplo, integer* n, double* a, integer* lda, double* e, integer* ipiv, double* work, integer* nb, integer* info);
void F77_dsytri(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* info);
void F77_dsytri_rook(char* uplo, integer* n, double* a, integer* lda, integer* ipiv, double* work, integer* info);
void F77_dsytrs2(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, double* work, integer* info);
void F77_dsytrs_3(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* e, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dsytrs_aa_2stage(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, double* tb, integer* ltb, integer* ipiv, integer* ipiv2, double* b, integer* ldb, integer* info);
void F77_dsytrs_aa(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, double* work, integer* lwork, integer* info);
void F77_dsytrs(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dsytrs_rook(char* uplo, integer* n, integer* nrhs, double* a, integer* lda, integer* ipiv, double* b, integer* ldb, integer* info);
void F77_dtbcon(char* norm, char* uplo, char* diag, integer* n, integer* kd, double* ab, integer* ldab, double* rcond, double* work, integer* iwork, integer* info);
void F77_dtbrfs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, double* ab, integer* ldab, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dtbtrs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, double* ab, integer* ldab, double* b, integer* ldb, integer* info);
void F77_dtfsm(char* transr, char* side, char* uplo, char* trans, char* diag, integer* m, integer* n, double* alpha, double* a, double* b, integer* ldb);
void F77_dtftri(char* transr, char* uplo, char* diag, integer* n, double* a, integer* info);
void F77_dtfttp(char* transr, char* uplo, integer* n, double* arf, double* ap, integer* info);
void F77_dtfttr(char* transr, char* uplo, integer* n, double* arf, double* a, integer* lda, integer* info);
void F77_dtgevc(char* side, char* howmny, logical* select, integer* n, double* s, integer* lds, double* p, integer* ldp, double* vl, integer* ldvl, double* vr, integer* ldvr, integer* mm, integer* m, double* work, integer* info);
void F77_dtgex2(logical* wantq, logical* wantz, integer* n, double* a, integer* lda, double* b, integer* ldb, double* q, integer* ldq, double* z, integer* ldz, integer* j1, integer* n1, integer* n2, double* work, integer* lwork, integer* info);
void F77_dtgexc(logical* wantq, logical* wantz, integer* n, double* a, integer* lda, double* b, integer* ldb, double* q, integer* ldq, double* z, integer* ldz, integer* ifst, integer* ilst, double* work, integer* lwork, integer* info);
void F77_dtgsen(integer* ijob, logical* wantq, logical* wantz, logical* select, integer* n, double* a, integer* lda, double* b, integer* ldb, double* alphar, double* alphai, double* beta, double* q, integer* ldq, double* z, integer* ldz, integer* m, double* pl, double* pr, double* dif, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dtgsja(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, integer* k, integer* l, double* a, integer* lda, double* b, integer* ldb, double* tola, double* tolb, double* alpha, double* beta, double* u, integer* ldu, double* v, integer* ldv, double* q, integer* ldq, double* work, integer* ncycle, integer* info);
void F77_dtgsna(char* job, char* howmny, logical* select, integer* n, double* a, integer* lda, double* b, integer* ldb, double* vl, integer* ldvl, double* vr, integer* ldvr, double* s, double* dif, integer* mm, integer* m, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dtgsy2(char* trans, integer* ijob, integer* m, integer* n, double* a, integer* lda, double* b, integer* ldb, double* c, integer* ldc, double* d, integer* ldd, double* e, integer* lde, double* f, integer* ldf, double* scale, double* rdsum, double* rdscal, integer* iwork, integer* pq, integer* info);
void F77_dtgsyl(char* trans, integer* ijob, integer* m, integer* n, double* a, integer* lda, double* b, integer* ldb, double* c, integer* ldc, double* d, integer* ldd, double* e, integer* lde, double* f, integer* ldf, double* scale, double* dif, double* work, integer* lwork, integer* iwork, integer* info);
void F77_dtpcon(char* norm, char* uplo, char* diag, integer* n, double* ap, double* rcond, double* work, integer* iwork, integer* info);
void F77_dtplqt2(integer* m, integer* n, integer* l, double* a, integer* lda, double* b, integer* ldb, double* t, integer* ldt, integer* info);
void F77_dtplqt(integer* m, integer* n, integer* l, integer* mb, double* a, integer* lda, double* b, integer* ldb, double* t, integer* ldt, double* work, integer* info);
void F77_dtpmlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* mb, double* v, integer* ldv, double* t, integer* ldt, double* a, integer* lda, double* b, integer* ldb, double* work, integer* info);
void F77_dtpmqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* nb, double* v, integer* ldv, double* t, integer* ldt, double* a, integer* lda, double* b, integer* ldb, double* work, integer* info);
void F77_dtpqrt2(integer* m, integer* n, integer* l, double* a, integer* lda, double* b, integer* ldb, double* t, integer* ldt, integer* info);
void F77_dtpqrt(integer* m, integer* n, integer* l, integer* nb, double* a, integer* lda, double* b, integer* ldb, double* t, integer* ldt, double* work, integer* info);
void F77_dtprfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, double* v, integer* ldv, double* t, integer* ldt, double* a, integer* lda, double* b, integer* ldb, double* work, integer* ldwork);
void F77_dtprfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, double* ap, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dtptri(char* uplo, char* diag, integer* n, double* ap, integer* info);
void F77_dtptrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, double* ap, double* b, integer* ldb, integer* info);
void F77_dtpttf(char* transr, char* uplo, integer* n, double* ap, double* arf, integer* info);
void F77_dtpttr(char* uplo, integer* n, double* ap, double* a, integer* lda, integer* info);
void F77_dtrcon(char* norm, char* uplo, char* diag, integer* n, double* a, integer* lda, double* rcond, double* work, integer* iwork, integer* info);
void F77_dtrevc3(char* side, char* howmny, logical* select, integer* n, double* t, integer* ldt, double* vl, integer* ldvl, double* vr, integer* ldvr, integer* mm, integer* m, double* work, integer* lwork, integer* info);
void F77_dtrevc(char* side, char* howmny, logical* select, integer* n, double* t, integer* ldt, double* vl, integer* ldvl, double* vr, integer* ldvr, integer* mm, integer* m, double* work, integer* info);
void F77_dtrexc(char* compq, integer* n, double* t, integer* ldt, double* q, integer* ldq, integer* ifst, integer* ilst, double* work, integer* info);
void F77_dtrrfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, double* x, integer* ldx, double* ferr, double* berr, double* work, integer* iwork, integer* info);
void F77_dtrsen(char* job, char* compq, logical* select, integer* n, double* t, integer* ldt, double* q, integer* ldq, double* wr, double* wi, integer* m, double* s, double* sep, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_dtrsna(char* job, char* howmny, logical* select, integer* n, double* t, integer* ldt, double* vl, integer* ldvl, double* vr, integer* ldvr, double* s, double* sep, integer* mm, integer* m, double* work, integer* ldwork, integer* iwork, integer* info);
void F77_dtrsyl(char* trana, char* tranb, integer* isgn, integer* m, integer* n, double* a, integer* lda, double* b, integer* ldb, double* c, integer* ldc, double* scale, integer* info);
void F77_dtrti2(char* uplo, char* diag, integer* n, double* a, integer* lda, integer* info);
void F77_dtrtri(char* uplo, char* diag, integer* n, double* a, integer* lda, integer* info);
void F77_dtrtrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, double* a, integer* lda, double* b, integer* ldb, integer* info);
void F77_dtrttf(char* transr, char* uplo, integer* n, double* a, integer* lda, double* arf, integer* info);
void F77_dtrttp(char* uplo, integer* n, double* a, integer* lda, double* ap, integer* info);
void F77_dtzrqf(integer* m, integer* n, double* a, integer* lda, double* tau, integer* info);
void F77_dtzrzf(integer* m, integer* n, double* a, integer* lda, double* tau, double* work, integer* lwork, integer* info);
integer F77_icmax1(integer* n, scomplex* cx, integer* incx);
integer F77_ilaclc(integer* m, integer* n, scomplex* a, integer* lda);
integer F77_ilaclr(integer* m, integer* n, scomplex* a, integer* lda);
integer F77_iladiag(char* diag);
integer F77_iladlc(integer* m, integer* n, double* a, integer* lda);
integer F77_iladlr(integer* m, integer* n, double* a, integer* lda);
integer F77_ilaenv2stage(integer* ispec, char* name, char* opts, integer* n1, integer* n2, integer* n3, integer* n4);
integer F77_ilaprec(char* prec);
integer F77_ilaslc(integer* m, integer* n, float* a, integer* lda);
integer F77_ilaslr(integer* m, integer* n, float* a, integer* lda);
integer F77_ilatrans(char* trans);
integer F77_ilauplo(char* uplo);
void F77_ilaver(integer* vers_major, integer* vers_minor, integer* vers_patch__);
integer F77_ilazlc(integer* m, integer* n, dcomplex* a, integer* lda);
integer F77_ilazlr(integer* m, integer* n, dcomplex* a, integer* lda);
integer F77_iparam2stage(integer* ispec, char* name, char* opts, integer* ni, integer* nbi, integer* ibi, integer* nxi);
integer F77_izmax1(integer* n, dcomplex* cx, integer* incx);
void F77_sbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, integer* m, integer* p, integer* q, float* theta, float* phi, float* u1, integer* ldu1, float* u2, integer* ldu2, float* v1t, integer* ldv1t, float* v2t, integer* ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* work, integer* lwork, integer* info);
void F77_sbdsdc(char* uplo, char* compq, integer* n, float* d, float* e, float* u, integer* ldu, float* vt, integer* ldvt, float* q, float* iq, float* work, integer* iwork, integer* info);
void F77_sbdsqr(char* uplo, integer* n, integer* ncvt, integer* nru, integer* ncc, float* d, float* e, float* vt, integer* ldvt, float* u, integer* ldu, float* c, integer* ldc, float* rwork, integer* info);
void F77_sbdsvdx(char* uplo, char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, integer* ns, float* s, float* z, integer* ldz, float* work, integer* iwork, integer* info);
void F77_scombssq(float* v1, float* v2);
void F77_sdisna(char* job, integer* m, integer* n, float* d, float* sep, integer* info);
void F77_sgbbrd(char* vect, integer* m, integer* n, integer* ncc, integer* kl, integer* ku, float* ab, integer* ldab, float* d, float* e, float* q, integer* ldq, float* pt, integer* ldpt, float* c, integer* ldc, float* work, integer* info);
void F77_sgbcon(char* norm, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, integer* ipiv, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_sgbequb(integer* m, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_sgbequ(integer* m, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_sgbrfs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sgbrfsx(char* trans, char* equed, integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, integer* ipiv, float* r, float* c, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_sgbsv(integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sgbsvx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, integer* ipiv, char* equed, float* r, float* c, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sgbsvxx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, integer* ipiv, char* equed, float* r, float* c, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_sgbtf2(integer* m, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, integer* ipiv, integer* info);
void F77_sgbtrf(integer* m, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, integer* ipiv, integer* info);
void F77_sgbtrs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sgebak(char* job, char* side, integer* n, integer* ilo, integer* ihi, float* scale, integer* m, float* v, integer* ldv, integer* info);
void F77_sgebal(char* job, integer* n, float* a, integer* lda, integer* ilo, integer* ihi, float* scale, integer* info);
void F77_sgebd2(integer* m, integer* n, float* a, integer* lda, float* d, float* e, float* tauq, float* taup, float* work, integer* info);
void F77_sgebrd(integer* m, integer* n, float* a, integer* lda, float* d, float* e, float* tauq, float* taup, float* work, integer* lwork, integer* info);
void F77_sgecon(char* norm, integer* n, float* a, integer* lda, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_sgeequb(integer* m, integer* n, float* a, integer* lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_sgeequ(integer* m, integer* n, float* a, integer* lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, integer* info);
void F77_sgees(char* jobvs, char* sort, L_fp select, integer* n, float* a, integer* lda, integer* sdim, float* wr, float* wi, float* vs, integer* ldvs, float* work, integer* lwork, logical* bwork, integer* info);
void F77_sgeesx(char* jobvs, char* sort, L_fp select, char* sense, integer* n, float* a, integer* lda, integer* sdim, float* wr, float* wi, float* vs, integer* ldvs, float* rconde, float* rcondv, float* work, integer* lwork, integer* iwork, integer* liwork, logical* bwork, integer* info);
void F77_sgeev(char* jobvl, char* jobvr, integer* n, float* a, integer* lda, float* wr, float* wi, float* vl, integer* ldvl, float* vr, integer* ldvr, float* work, integer* lwork, integer* info);
void F77_sgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, float* a, integer* lda, float* wr, float* wi, float* vl, integer* ldvl, float* vr, integer* ldvr, integer* ilo, integer* ihi, float* scale, float* abnrm, float* rconde, float* rcondv, float* work, integer* lwork, integer* iwork, integer* info);
void F77_sgegs(char* jobvsl, char* jobvsr, integer* n, float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* vsl, integer* ldvsl, float* vsr, integer* ldvsr, float* work, integer* lwork, integer* info);
void F77_sgegv(char* jobvl, char* jobvr, integer* n, float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* vl, integer* ldvl, float* vr, integer* ldvr, float* work, integer* lwork, integer* info);
void F77_sgehd2(integer* n, integer* ilo, integer* ihi, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sgehrd(integer* n, integer* ilo, integer* ihi, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, integer* m, integer* n, float* a, integer* lda, float* sva, float* u, integer* ldu, float* v, integer* ldv, float* work, integer* lwork, integer* iwork, integer* info);
void F77_sgelq2(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sgelqf(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sgelq(integer* m, integer* n, float* a, integer* lda, float* t, integer* tsize, float* work, integer* lwork, integer* info);
void F77_sgelqt3(integer* m, integer* n, float* a, integer* lda, float* t, integer* ldt, integer* info);
void F77_sgelqt(integer* m, integer* n, integer* mb, float* a, integer* lda, float* t, integer* ldt, float* work, integer* info);
void F77_sgels(char* trans, integer* m, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_sgelsd(integer* m, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, float* s, float* rcond, integer* rank, float* work, integer* lwork, integer* iwork, integer* info);
void F77_sgelss(integer* m, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, float* s, float* rcond, integer* rank, float* work, integer* lwork, integer* info);
void F77_sgelsx(integer* m, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, integer* jpvt, float* rcond, integer* rank, float* work, integer* info);
void F77_sgelsy(integer* m, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, integer* jpvt, float* rcond, integer* rank, float* work, integer* lwork, integer* info);
void F77_sgemlq(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* t, integer* tsize, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sgemlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, float* v, integer* ldv, float* t, integer* ldt, float* c, integer* ldc, float* work, integer* info);
void F77_sgemqr(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* t, integer* tsize, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sgemqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* nb, float* v, integer* ldv, float* t, integer* ldt, float* c, integer* ldc, float* work, integer* info);
void F77_sgeql2(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sgeqlf(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sgeqp3(integer* m, integer* n, float* a, integer* lda, integer* jpvt, float* tau, float* work, integer* lwork, integer* info);
void F77_sgeqpf(integer* m, integer* n, float* a, integer* lda, integer* jpvt, float* tau, float* work, integer* info);
void F77_sgeqr2(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sgeqr2p(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sgeqrf(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sgeqrfp(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sgeqr(integer* m, integer* n, float* a, integer* lda, float* t, integer* tsize, float* work, integer* lwork, integer* info);
void F77_sgeqrt2(integer* m, integer* n, float* a, integer* lda, float* t, integer* ldt, integer* info);
void F77_sgeqrt3(integer* m, integer* n, float* a, integer* lda, float* t, integer* ldt, integer* info);
void F77_sgeqrt(integer* m, integer* n, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* work, integer* info);
void F77_sgerfs(char* trans, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sgerfsx(char* trans, char* equed, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, float* r, float* c, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_sgerq2(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sgerqf(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sgesc2(integer* n, float* a, integer* lda, float* rhs, integer* ipiv, integer* jpiv, float* scale);
void F77_sgesdd(char* jobz, integer* m, integer* n, float* a, integer* lda, float* s, float* u, integer* ldu, float* vt, integer* ldvt, float* work, integer* lwork, integer* iwork, integer* info);
void F77_sgesvd(char* jobu, char* jobv, integer* m, integer* n, float* a, integer* lda, float* s, float* u, integer* ldu, float* vt, integer* ldvt, float* work, integer* lwork, integer* info);
void F77_sgesvdq(char* joba, char* jobp, char* jobr, char* jobu, char* jobv, integer* m, integer* n, float* a, integer* lda, float* s, float* u, integer* ldu, float* v, integer* ldv, integer* numrank, integer* iwork, integer* liwork, float* work, integer* lwork, float* rwork, integer* lrwork, integer* info);
void F77_sgesvdx(char* jobu, char* jobvt, char* range, integer* m, integer* n, float* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, integer* ns, float* s, float* u, integer* ldu, float* vt, integer* ldvt, float* work, integer* lwork, integer* iwork, integer* info);
void F77_sgesv(integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sgesvj(char* joba, char* jobu, char* jobv, integer* m, integer* n, float* a, integer* lda, float* sva, integer* mv, float* v, integer* ldv, float* work, integer* lwork, integer* info);
void F77_sgesvx(char* fact, char* trans, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, char* equed, float* r, float* c, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sgesvxx(char* fact, char* trans, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, char* equed, float* r, float* c, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_sgetc2(integer* n, float* a, integer* lda, integer* ipiv, integer* jpiv, integer* info);
void F77_sgetf2(integer* m, integer* n, float* a, integer* lda, integer* ipiv, integer* info);
void F77_sgetrf2(integer* m, integer* n, float* a, integer* lda, integer* ipiv, integer* info);
void F77_sgetrf(integer* m, integer* n, float* a, integer* lda, integer* ipiv, integer* info);
void F77_sgetri(integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_sgetrs(char* trans, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sgetsls(char* trans, integer* m, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_sggbak(char* job, char* side, integer* n, integer* ilo, integer* ihi, float* lscale, float* rscale, integer* m, float* v, integer* ldv, integer* info);
void F77_sggbal(char* job, integer* n, float* a, integer* lda, float* b, integer* ldb, integer* ilo, integer* ihi, float* lscale, float* rscale, float* work, integer* info);
void F77_sgges3(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, float* a, integer* lda, float* b, integer* ldb, integer* sdim, float* alphar, float* alphai, float* beta, float* vsl, integer* ldvsl, float* vsr, integer* ldvsr, float* work, integer* lwork, logical* bwork, integer* info);
void F77_sgges(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, float* a, integer* lda, float* b, integer* ldb, integer* sdim, float* alphar, float* alphai, float* beta, float* vsl, integer* ldvsl, float* vsr, integer* ldvsr, float* work, integer* lwork, logical* bwork, integer* info);
void F77_sggesx(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, char* sense, integer* n, float* a, integer* lda, float* b, integer* ldb, integer* sdim, float* alphar, float* alphai, float* beta, float* vsl, integer* ldvsl, float* vsr, integer* ldvsr, float* rconde, float* rcondv, float* work, integer* lwork, integer* iwork, integer* liwork, logical* bwork, integer* info);
void F77_sggev3(char* jobvl, char* jobvr, integer* n, float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* vl, integer* ldvl, float* vr, integer* ldvr, float* work, integer* lwork, integer* info);
void F77_sggev(char* jobvl, char* jobvr, integer* n, float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* vl, integer* ldvl, float* vr, integer* ldvr, float* work, integer* lwork, integer* info);
void F77_sggevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* vl, integer* ldvl, float* vr, integer* ldvr, integer* ilo, integer* ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, float* work, integer* lwork, integer* iwork, logical* bwork, integer* info);
void F77_sggglm(integer* n, integer* m, integer* p, float* a, integer* lda, float* b, integer* ldb, float* d, float* x, float* y, float* work, integer* lwork, integer* info);
void F77_sgghd3(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, float* a, integer* lda, float* b, integer* ldb, float* q, integer* ldq, float* z, integer* ldz, float* work, integer* lwork, integer* info);
void F77_sgghrd(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, float* a, integer* lda, float* b, integer* ldb, float* q, integer* ldq, float* z, integer* ldz, integer* info);
void F77_sgglse(integer* m, integer* n, integer* p, float* a, integer* lda, float* b, integer* ldb, float* c, float* d, float* x, float* work, integer* lwork, integer* info);
void F77_sggqrf(integer* n, integer* m, integer* p, float* a, integer* lda, float* taua, float* b, integer* ldb, float* taub, float* work, integer* lwork, integer* info);
void F77_sggrqf(integer* m, integer* p, integer* n, float* a, integer* lda, float* taua, float* b, integer* ldb, float* taub, float* work, integer* lwork, integer* info);
void F77_sggsvd3(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, float* a, integer* lda, float* b, integer* ldb, float* alpha, float* beta, float* u, integer* ldu, float* v, integer* ldv, float* q, integer* ldq, float* work, integer* lwork, integer* iwork, integer* info);
void F77_sggsvd(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, float* a, integer* lda, float* b, integer* ldb, float* alpha, float* beta, float* u, integer* ldu, float* v, integer* ldv, float* q, integer* ldq, float* work, integer* iwork, integer* info);
void F77_sggsvp3(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, float* a, integer* lda, float* b, integer* ldb, float* tola, float* tolb, integer* k, integer* l, float* u, integer* ldu, float* v, integer* ldv, float* q, integer* ldq, integer* iwork, float* tau, float* work, integer* lwork, integer* info);
void F77_sggsvp(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, float* a, integer* lda, float* b, integer* ldb, float* tola, float* tolb, integer* k, integer* l, float* u, integer* ldu, float* v, integer* ldv, float* q, integer* ldq, integer* iwork, float* tau, float* work, integer* info);
void F77_sgsvj0(char* jobv, integer* m, integer* n, float* a, integer* lda, float* d, float* sva, integer* mv, float* v, integer* ldv, float* eps, float* sfmin, float* tol, integer* nsweep, float* work, integer* lwork, integer* info);
void F77_sgsvj1(char* jobv, integer* m, integer* n, integer* n1, float* a, integer* lda, float* d, float* sva, integer* mv, float* v, integer* ldv, float* eps, float* sfmin, float* tol, integer* nsweep, float* work, integer* lwork, integer* info);
void F77_sgtcon(char* norm, integer* n, float* dl, float* d, float* du, float* du2, integer* ipiv, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_sgtrfs(char* trans, integer* n, integer* nrhs, float* dl, float* d, float* du, float* dlf, float* df, float* duf, float* du2, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sgtsv(integer* n, integer* nrhs, float* dl, float* d, float* du, float* b, integer* ldb, integer* info);
void F77_sgtsvx(char* fact, char* trans, integer* n, integer* nrhs, float* dl, float* d, float* du, float* dlf, float* df, float* duf, float* du2, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sgttrf(integer* n, float* dl, float* d, float* du, float* du2, integer* ipiv, integer* info);
void F77_sgttrs(char* trans, integer* n, integer* nrhs, float* dl, float* d, float* du, float* du2, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sgtts2(integer* itrans, integer* n, integer* nrhs, float* dl, float* d, float* du, float* du2, integer* ipiv, float* b, integer* ldb);
void F77_shgeqz(char* job, char* compq, char* compz, integer* n, integer* ilo, integer* ihi, float* h, integer* ldh, float* t, integer* ldt, float* alphar, float* alphai, float* beta, float* q, integer* ldq, float* z, integer* ldz, float* work, integer* lwork, integer* info);
void F77_shsein(char* side, char* eigsrc, char* initv, logical* select, integer* n, float* h, integer* ldh, float* wr, float* wi, float* vl, integer* ldvl, float* vr, integer* ldvr, integer* mm, integer* m, float* work, integer* ifaill, integer* ifailr, integer* info);
void F77_shseqr(char* job, char* compz, integer* n, integer* ilo, integer* ihi, float* h, integer* ldh, float* wr, float* wi, float* z, integer* ldz, float* work, integer* lwork, integer* info);
void F77_slabad(float* small_, float* large);
void F77_slabrd(integer* m, integer* n, integer* nb, float* a, integer* lda, float* d, float* e, float* tauq, float* taup, float* x, integer* ldx, float* y, integer* ldy);
void F77_slacn2(integer* n, float* v, float* x, integer* isgn, float* est, integer* kase, integer* isave);
void F77_slacon(integer* n, float* v, float* x, integer* isgn, float* est, integer* kase);
void F77_slacpy(char* uplo, integer* m, integer* n, float* a, integer* lda, float* b, integer* ldb);
void F77_sladiv(float* a, float* b, float* c, float* d, float* p, float* q);
void F77_slae2(float* a, float* b, float* c, float* rt1, float* rt2);
void F77_slaebz(integer* ijob, integer* nitmax, integer* n, integer* mmax, integer* minp, integer* nbmin, float* abstol, float* reltol, float* pivmin, float* d, float* e, float* e2, integer* nval, float* ab, float* c, integer* mout, integer* nab, float* work, integer* iwork, integer* info);
void F77_slaed0(integer* icompq, integer* qsiz, integer* n, float* d, float* e, float* q, integer* ldq, float* qstore, integer* ldqs, float* work, integer* iwork, integer* info);
void F77_slaed1(integer* n, float* d, float* q, integer* ldq, integer* indxq, float* rho, integer* cutpnt, float* work, integer* iwork, integer* info);
void F77_slaed2(integer* k, integer* n, integer* n1, float* d, float* q, integer* ldq, integer* indxq, float* rho, float* z, float* dlamda, float* w, float* q2, integer* indx, integer* indxc, integer* indxp, integer* coltyp, integer* info);
void F77_slaed3(integer* k, integer* n, integer* n1, float* d, float* q, integer* ldq, float* rho, float* dlamda, float* q2, integer* indx, integer* ctot, float* w, float* s, integer* info);
void F77_slaed4(integer* n, integer* i, float* d, float* z, float* delta, float* rho, float* dlam, integer* info);
void F77_slaed5(integer* i, float* d, float* z, float* delta, float* rho, float* dlam);
void F77_slaed6(integer* kniter, logical* orgati, float* rho, float* d, float* z, float* finit, float* tau, integer* info);
void F77_slaed7(integer* icompq, integer* n, integer* qsiz, integer* tlvls, integer* curlvl, integer* curpbm, float* d, float* q, integer* ldq, integer* indxq, float* rho, integer* cutpnt, float* qstore, integer* qptr, integer* prmptr, integer* perm, integer* givptr, integer* givcol, float* givnum, float* work, integer* iwork, integer* info);
void F77_slaed8(integer* icompq, integer* k, integer* n, integer* qsiz, float* d, float* q, integer* ldq, integer* indxq, float* rho, integer* cutpnt, float* z, float* dlamda, float* q2, integer* ldq2, float* w, integer* perm, integer* givptr, integer* givcol, float* givnum, integer* indxp, integer* indx, integer* info);
void F77_slaed9(integer* k, integer* kstart, integer* kstop, integer* n, float* d, float* q, integer* ldq, float* rho, float* dlamda, float* w, float* s, integer* lds, integer* info);
void F77_slaeda(integer* n, integer* tlvls, integer* curlvl, integer* curpbm, integer* prmptr, integer* perm, integer* givptr, integer* givcol, float* givnum, float* q, integer* qptr, float* z, float* ztemp, integer* info);
void F77_slaein(logical* rightv, logical* noinit, integer* n, float* h, integer* ldh, float* wr, float* wi, float* vr, float* vi, float* b, integer* ldb, float* work, float* eps3, float* smlnum, float* bignum, integer* info);
void F77_slaev2(float* a, float* b, float* c, float* rt1, float* rt2, float* cs1, float* sn1);
void F77_slaexc(logical* wantq, integer* n, float* t, integer* ldt, float* q, integer* ldq, integer* j1, integer* n1, integer* n2, float* work, integer* info);
void F77_slag2d(integer* m, integer* n, float* sa, integer* ldsa, double* a, integer* lda, integer* info);
void F77_slag2(float* a, integer* lda, float* b, integer* ldb, float* safmin, float* scale1, float* scale2, float* wr1, float* wr2, float* wi);
void F77_sla_gbamv(integer* trans, integer* m, integer* n, integer* kl, integer* ku, float* alpha, float* ab, integer* ldab, float* x, integer* incx, float* beta, float* y, integer* incy);
void F77_sla_gbrfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* kl, integer* ku, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, integer* ipiv, logical* colequ, float* c, float* b, integer* ldb, float* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, float* res, float* ayb, float* dy, float* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_sla_geamv(integer* trans, integer* m, integer* n, float* alpha, float* a, integer* lda, float* x, integer* incx, float* beta, float* y, integer* incy);
void F77_sla_gerfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, logical* colequ, float* c, float* b, integer* ldb, float* y, integer* ldy, float* berr_out, integer* n_norms, float* errs_n, float* errs_c, float* res, float* ayb, float* dy, float* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_slags2(logical* upper, float* a1, float* a2, float* a3, float* b1, float* b2, float* b3, float* csu, float* snu, float* csv, float* snv, float* csq, float* snq);
void F77_slagtf(integer* n, float* a, float* lambda, float* b, float* c, float* tol, float* d, integer* in, integer* info);
void F77_slagtm(char* trans, integer* n, integer* nrhs, float* alpha, float* dl, float* d, float* du, float* x, integer* ldx, float* beta, float* b, integer* ldb);
void F77_slagts(integer* job, integer* n, float* a, float* b, float* c, float* d, integer* in, float* y, float* tol, integer* info);
void F77_slagv2(float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* csl, float* snl, float* csr, float* snr);
void F77_slahqr(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, float* h, integer* ldh, float* wr, float* wi, integer* iloz, integer* ihiz, float* z, integer* ldz, integer* info);
void F77_slahr2(integer* n, integer* k, integer* nb, float* a, integer* lda, float* tau, float* t, integer* ldt, float* y, integer* ldy);
void F77_slahrd(integer* n, integer* k, integer* nb, float* a, integer* lda, float* tau, float* t, integer* ldt, float* y, integer* ldy);
void F77_slaic1(integer* job, integer* j, float* x, float* sest, float* w, float* gamma, float* sestpr, float* s, float* c__);
void F77_sla_lin_berr(integer* n, integer* nz, integer* nrhs, float* res, float* ayb, float* berr);
void F77_slaln2(logical* ltrans, integer* na, integer* nw, float* smin, float* ca, float* a, integer* lda, float* d1, float* d2, float* b, integer* ldb, float* wr, float* wi, float* x, integer* ldx, float* scale, float* xnorm, integer* info);
void F77_slals0(integer* icompq, integer* nl, integer* nr, integer* sqre, integer* nrhs, float* b, integer* ldb, float* bx, integer* ldbx, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, float* givnum, integer* ldgnum, float* poles, float* difl, float* difr, float* z, integer* k, float* c, float* s, float* work, integer* info);
void F77_slalsa(integer* icompq, integer* smlsiz, integer* n, integer* nrhs, float* b, integer* ldb, float* bx, integer* ldbx, float* u, integer* ldu, float* vt, integer* k, float* difl, float* difr, float* z, float* poles, integer* givptr, integer* givcol, integer* ldgcol, integer* perm, float* givnum, float* c, float* s, float* work, integer* iwork, integer* info);
void F77_slalsd(char* uplo, integer* smlsiz, integer* n, integer* nrhs, float* d, float* e, float* b, integer* ldb, float* rcond, integer* rank, float* work, integer* iwork, integer* info);
void F77_slamrg(integer* n1, integer* n2, float* a, integer* strd1, integer* strd2, integer* index);
void F77_slamswlq(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_slamtsqr(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* c, integer* ldc, float* work, integer* lwork, integer* info);
integer F77_slaneg(integer* n, float* d, float* lld, float* sigma, float* pivmin, integer* r__);
void F77_slanv2(float* a, float* b, float* c, float* d, float* rt1r, float* rt1i, float* rt2r, float* rt2i, float* cs, float* sn);
void F77_slaorhr_col_getrfnp2(integer* m, integer* n, float* a, integer* lda, float* d, integer* info);
void F77_slaorhr_col_getrfnp(integer* m, integer* n, float* a, integer* lda, float* d, integer* info);
void F77_slapll(integer* n, float* x, integer* incx, float* y, integer* incy, float* ssmin);
void F77_slapmr(logical* forwrd, integer* m, integer* n, float* x, integer* ldx, integer* k);
void F77_slapmt(logical* forwrd, integer* m, integer* n, float* x, integer* ldx, integer* k);
void F77_sla_porfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, logical* colequ, float* c, float* b, integer* ldb, float* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, float* res, float* ayb, float* dy, float* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_slaqgb(integer* m, integer* n, integer* kl, integer* ku, float* ab, integer* ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax, char* equed);
void F77_slaqge(integer* m, integer* n, float* a, integer* lda, float* r, float* c, float* rowcnd, float* colcnd, float* amax, char* equed);
void F77_slaqp2(integer* m, integer* n, integer* offset, float* a, integer* lda, integer* jpvt, float* tau, float* vn1, float* vn2, float* work);
void F77_slaqps(integer* m, integer* n, integer* offset, integer* nb, integer* kb, float* a, integer* lda, integer* jpvt, float* tau, float* vn1, float* vn2, float* auxv, float* f, integer* ldf);
void F77_slaqr0(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, float* h, integer* ldh, float* wr, float* wi, integer* iloz, integer* ihiz, float* z, integer* ldz, float* work, integer* lwork, integer* info);
void F77_slaqr1(integer* n, float* h, integer* ldh, float* sr1, float* si1, float* sr2, float* si2, float* v);
void F77_slaqr2(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, float* h, integer* ldh, integer* iloz, integer* ihiz, float* z, integer* ldz, integer* ns, integer* nd, float* sr, float* si, float* v, integer* ldv, integer* nh, float* t, integer* ldt, integer* nv, float* wv, integer* ldwv, float* work, integer* lwork);
void F77_slaqr3(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, float* h, integer* ldh, integer* iloz, integer* ihiz, float* z, integer* ldz, integer* ns, integer* nd, float* sr, float* si, float* v, integer* ldv, integer* nh, float* t, integer* ldt, integer* nv, float* wv, integer* ldwv, float* work, integer* lwork);
void F77_slaqr4(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, float* h, integer* ldh, float* wr, float* wi, integer* iloz, integer* ihiz, float* z, integer* ldz, float* work, integer* lwork, integer* info);
void F77_slaqr5(logical* wantt, logical* wantz, integer* kacc22, integer* n, integer* ktop, integer* kbot, integer* nshfts, float* sr, float* si, float* h, integer* ldh, integer* iloz, integer* ihiz, float* z, integer* ldz, float* v, integer* ldv, float* u, integer* ldu, integer* nv, float* wv, integer* ldwv, integer* nh, float* wh, integer* ldwh);
void F77_slaqsb(char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* s, float* scond, float* amax, char* equed);
void F77_slaqsp(char* uplo, integer* n, float* ap, float* s, float* scond, float* amax, char* equed);
void F77_slaqsy(char* uplo, integer* n, float* a, integer* lda, float* s, float* scond, float* amax, char* equed);
void F77_slaqtr(logical* ltran, logical* lfloat, integer* n, float* t, integer* ldt, float* b, float* w, float* scale, float* x, float* work, integer* info);
void F77_slar1v(integer* n, integer* b1, integer* bn, float* lambda, float* d, float* l, float* ld, float* lld, float* pivmin, float* gaptol, float* z, logical* wantnc, integer* negcnt, float* ztz, float* mingma, integer* r, integer* isuppz, float* nrminv, float* resid, float* rqcorr, float* work);
void F77_slar2v(integer* n, float* x, float* y, float* z, integer* incx, float* c, float* s, integer* incc);
void F77_slarfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, float* v, integer* ldv, float* t, integer* ldt, float* c, integer* ldc, float* work, integer* ldwork);
void F77_slarf(char* side, integer* m, integer* n, float* v, integer* incv, float* tau, float* c, integer* ldc, float* work);
void F77_slarfg(integer* n, float* alpha, float* x, integer* incx, float* tau);
void F77_slarfgp(integer* n, float* alpha, float* x, integer* incx, float* tau);
void F77_slarft(char* direct, char* storev, integer* n, integer* k, float* v, integer* ldv, float* tau, float* t, integer* ldt);
void F77_slarfx(char* side, integer* m, integer* n, float* v, float* tau, float* c, integer* ldc, float* work);
void F77_slarfy(char* uplo, integer* n, float* v, integer* incv, float* tau, float* c, integer* ldc, float* work);
void F77_slargv(integer* n, float* x, integer* incx, float* y, integer* incy, float* c, integer* incc);
void F77_slarnv(integer* idist, integer* iseed, integer* n, float* x);
void F77_slarra(integer* n, float* d, float* e, float* e2, float* spltol, float* tnrm, integer* nsplit, integer* isplit, integer* info);
void F77_slarrb(integer* n, float* d, float* lld, integer* ifirst, integer* ilast, float* rtol1, float* rtol2, integer* offset, float* w, float* wgap, float* werr, float* work, integer* iwork, float* pivmin, float* spdiam, integer* twist, integer* info);
void F77_slarrc(char* jobt, integer* n, float* vl, float* vu, float* d, float* e, float* pivmin, integer* eigcnt, integer* lcnt, integer* rcnt, integer* info);
void F77_slarrd(char* range, char* order, integer* n, float* vl, float* vu, integer* il, integer* iu, float* gers, float* reltol, float* d, float* e, float* e2, float* pivmin, integer* nsplit, integer* isplit, integer* m, float* w, float* werr, float* wl, float* wu, integer* iblock, integer* indexw, float* work, integer* iwork, integer* info);
void F77_slarre(char* range, integer* n, float* vl, float* vu, integer* il, integer* iu, float* d, float* e, float* e2, float* rtol1, float* rtol2, float* spltol, integer* nsplit, integer* isplit, integer* m, float* w, float* werr, float* wgap, integer* iblock, integer* indexw, float* gers, float* pivmin, float* work, integer* iwork, integer* info);
void F77_slarrf(integer* n, float* d, float* l, float* ld, integer* clstrt, integer* clend, float* w, float* wgap, float* werr, float* spdiam, float* clgapl, float* clgapr, float* pivmin, float* sigma, float* dplus, float* lplus, float* work, integer* info);
void F77_slarrj(integer* n, float* d, float* e2, integer* ifirst, integer* ilast, float* rtol, integer* offset, float* w, float* werr, float* work, integer* iwork, float* pivmin, float* spdiam, integer* info);
void F77_slarrk(integer* n, integer* iw, float* gl, float* gu, float* d, float* e2, float* pivmin, float* reltol, float* w, float* werr, integer* info);
void F77_slarrr(integer* n, float* d, float* e, integer* info);
void F77_slarrv(integer* n, float* vl, float* vu, float* d, float* l, float* pivmin, integer* isplit, integer* m, integer* dol, integer* dou, float* minrgp, float* rtol1, float* rtol2, float* w, float* werr, float* wgap, integer* iblock, integer* indexw, float* gers, float* z, integer* ldz, integer* isuppz, float* work, integer* iwork, integer* info);
void F77_slarscl2(integer* m, integer* n, float* d, float* x, integer* ldx);
void F77_slartg(float* f, float* g, float* cs, float* sn, float* r__);
void F77_slartgp(float* f, float* g, float* cs, float* sn, float* r__);
void F77_slartgs(float* x, float* y, float* sigma, float* cs, float* sn);
void F77_slartv(integer* n, float* x, integer* incx, float* y, integer* incy, float* c, float* s, integer* incc);
void F77_slaruv(integer* iseed, integer* n, float* x);
void F77_slarzb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, float* v, integer* ldv, float* t, integer* ldt, float* c, integer* ldc, float* work, integer* ldwork);
void F77_slarz(char* side, integer* m, integer* n, integer* l, float* v, integer* incv, float* tau, float* c, integer* ldc, float* work);
void F77_slarzt(char* direct, char* storev, integer* n, integer* k, float* v, integer* ldv, float* tau, float* t, integer* ldt);
void F77_slas2(float* f, float* g, float* h, float* ssmin, float* ssmax);
void F77_slascl2(integer* m, integer* n, float* d, float* x, integer* ldx);
void F77_slascl(char* type, integer* kl, integer* ku, float* cfrom, float* cto, integer* m, integer* n, float* a, integer* lda, integer* info);
void F77_slasd0(integer* n, integer* sqre, float* d, float* e, float* u, integer* ldu, float* vt, integer* ldvt, integer* smlsiz, integer* iwork, float* work, integer* info);
void F77_slasd1(integer* nl, integer* nr, integer* sqre, float* d, float* alpha, float* beta, float* u, integer* ldu, float* vt, integer* ldvt, integer* idxq, integer* iwork, float* work, integer* info);
void F77_slasd2(integer* nl, integer* nr, integer* sqre, integer* k, float* d, float* z, float* alpha, float* beta, float* u, integer* ldu, float* vt, integer* ldvt, float* dsigma, float* u2, integer* ldu2, float* vt2, integer* ldvt2, integer* idxp, integer* idx, integer* idxc, integer* idxq, integer* coltyp, integer* info);
void F77_slasd3(integer* nl, integer* nr, integer* sqre, integer* k, float* d, float* q, integer* ldq, float* dsigma, float* u, integer* ldu, float* u2, integer* ldu2, float* vt, integer* ldvt, float* vt2, integer* ldvt2, integer* idxc, integer* ctot, float* z, integer* info);
void F77_slasd4(integer* n, integer* i, float* d, float* z, float* delta, float* rho, float* sigma, float* work, integer* info);
void F77_slasd5(integer* i, float* d, float* z, float* delta, float* rho, float* dsigma, float* work);
void F77_slasd6(integer* icompq, integer* nl, integer* nr, integer* sqre, float* d, float* vf, float* vl, float* alpha, float* beta, integer* idxq, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, float* givnum, integer* ldgnum, float* poles, float* difl, float* difr, float* z, integer* k, float* c, float* s, float* work, integer* iwork, integer* info);
void F77_slasd7(integer* icompq, integer* nl, integer* nr, integer* sqre, integer* k, float* d, float* z, float* zw, float* vf, float* vfw, float* vl, float* vlw, float* alpha, float* beta, float* dsigma, integer* idx, integer* idxp, integer* idxq, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, float* givnum, integer* ldgnum, float* c, float* s, integer* info);
void F77_slasd8(integer* icompq, integer* k, float* d, float* z, float* vf, float* vl, float* difl, float* difr, integer* lddifr, float* dsigma, float* work, integer* info);
void F77_slasda(integer* icompq, integer* smlsiz, integer* n, integer* sqre, float* d, float* e, float* u, integer* ldu, float* vt, integer* k, float* difl, float* difr, float* z, float* poles, integer* givptr, integer* givcol, integer* ldgcol, integer* perm, float* givnum, float* c, float* s, float* work, integer* iwork, integer* info);
void F77_slasdq(char* uplo, integer* sqre, integer* n, integer* ncvt, integer* nru, integer* ncc, float* d, float* e, float* vt, integer* ldvt, float* u, integer* ldu, float* c, integer* ldc, float* work, integer* info);
void F77_slasdt(integer* n, integer* lvl, integer* nd, integer* inode, integer* ndiml, integer* ndimr, integer* msub);
void F77_slaset(char* uplo, integer* m, integer* n, float* alpha, float* beta, float* a, integer* lda);
void F77_slasq1(integer* n, float* d, float* e, float* work, integer* info);
void F77_slasq2(integer* n, float* z, integer* info);
void F77_slasq3(integer* i0, integer* n0, float* z, integer* pp, float* dmin, float* sigma, float* desig, float* qmax, integer* nfail, integer* iter, integer* ndiv, logical* ieee, integer* ttype, float* dmin1, float* dmin2, float* dn, float* dn1, float* dn2, float* g, float* tau);
void F77_slasq4(integer* i0, integer* n0, float* z, integer* pp, integer* n0in, float* dmin, float* dmin1, float* dmin2, float* dn, float* dn1, float* dn2, float* tau, integer* ttype, float* g);
void F77_slasq5(integer* i0, integer* n0, float* z, integer* pp, float* tau, float* sigma, float* dmin, float* dmin1, float* dmin2, float* dn, float* dnm1, float* dnm2, logical* ieee, float* eps);
void F77_slasq6(integer* i0, integer* n0, float* z, integer* pp, float* dmin, float* dmin1, float* dmin2, float* dn, float* dnm1, float* dnm2);
void F77_slasr(char* side, char* pivot, char* direct, integer* m, integer* n, float* c, float* s, float* a, integer* lda);
void F77_slasrt(char* id, integer* n, float* d, integer* info);
void F77_slassq(integer* n, float* x, integer* incx, float* scale, float* sumsq);
void F77_slasv2(float* f, float* g, float* h, float* ssmin, float* ssmax, float* snr, float* csr, float* snl, float* csl);
void F77_slaswlq(integer* m, integer* n, integer* mb, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* work, integer* lwork, integer* info);
void F77_slaswp(integer* n, float* a, integer* lda, integer* k1, integer* k2, integer* ipiv, integer* incx);
void F77_slasy2(logical* ltranl, logical* ltranr, integer* isgn, integer* n1, integer* n2, float* tl, integer* ldtl, float* tr, integer* ldtr, float* b, integer* ldb, float* scale, float* x, integer* ldx, float* xnorm, integer* info);
void F77_sla_syamv(integer* uplo, integer* n, float* alpha, float* a, integer* lda, float* x, integer* incx, float* beta, float* y, integer* incy);
void F77_slasyf_aa(char* uplo, integer* j1, integer* m, integer* nb, float* a, integer* lda, integer* ipiv, float* h, integer* ldh, float* work);
void F77_slasyf(char* uplo, integer* n, integer* nb, integer* kb, float* a, integer* lda, integer* ipiv, float* w, integer* ldw, integer* info);
void F77_slasyf_rk(char* uplo, integer* n, integer* nb, integer* kb, float* a, integer* lda, float* e, integer* ipiv, float* w, integer* ldw, integer* info);
void F77_slasyf_rook(char* uplo, integer* n, integer* nb, integer* kb, float* a, integer* lda, integer* ipiv, float* w, integer* ldw, integer* info);
void F77_sla_syrfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, logical* colequ, float* c, float* b, integer* ldb, float* y, integer* ldy, float* berr_out, integer* n_norms, float* err_bnds_norm, float* err_bnds_comp, float* res, float* ayb, float* dy, float* y_tail, float* rcond, integer* ithresh, float* rthresh, float* dz_ub, logical* ignore_cwise, integer* info);
void F77_slatbs(char* uplo, char* trans, char* diag, char* normin, integer* n, integer* kd, float* ab, integer* ldab, float* x, float* scale, float* cnorm, integer* info);
void F77_slatdf(integer* ijob, integer* n, float* z, integer* ldz, float* rhs, float* rdsum, float* rdscal, integer* ipiv, integer* jpiv);
void F77_slatps(char* uplo, char* trans, char* diag, char* normin, integer* n, float* ap, float* x, float* scale, float* cnorm, integer* info);
void F77_slatrd(char* uplo, integer* n, integer* nb, float* a, integer* lda, float* e, float* tau, float* w, integer* ldw);
void F77_slatrs(char* uplo, char* trans, char* diag, char* normin, integer* n, float* a, integer* lda, float* x, float* scale, float* cnorm, integer* info);
void F77_slatrz(integer* m, integer* n, integer* l, float* a, integer* lda, float* tau, float* work);
void F77_slatsqr(integer* m, integer* n, integer* mb, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* work, integer* lwork, integer* info);
void F77_slatzm(char* side, integer* m, integer* n, float* v, integer* incv, float* tau, float* c1, float* c2, integer* ldc, float* work);
void F77_slauu2(char* uplo, integer* n, float* a, integer* lda, integer* info);
void F77_slauum(char* uplo, integer* n, float* a, integer* lda, integer* info);
void F77_sla_wwaddw(integer* n, float* x, float* y, float* w);
void F77_sopmtr(char* side, char* uplo, char* trans, integer* m, integer* n, float* ap, float* tau, float* c, integer* ldc, float* work, integer* info);
void F77_sorbdb1(integer* m, integer* p, integer* q, float* x11, integer* ldx11, float* x21, integer* ldx21, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* work, integer* lwork, integer* info);
void F77_sorbdb2(integer* m, integer* p, integer* q, float* x11, integer* ldx11, float* x21, integer* ldx21, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* work, integer* lwork, integer* info);
void F77_sorbdb3(integer* m, integer* p, integer* q, float* x11, integer* ldx11, float* x21, integer* ldx21, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* work, integer* lwork, integer* info);
void F77_sorbdb4(integer* m, integer* p, integer* q, float* x11, integer* ldx11, float* x21, integer* ldx21, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* phantom, float* work, integer* lwork, integer* info);
void F77_sorbdb5(integer* m1, integer* m2, integer* n, float* x1, integer* incx1, float* x2, integer* incx2, float* q1, integer* ldq1, float* q2, integer* ldq2, float* work, integer* lwork, integer* info);
void F77_sorbdb6(integer* m1, integer* m2, integer* n, float* x1, integer* incx1, float* x2, integer* incx2, float* q1, integer* ldq1, float* q2, integer* ldq2, float* work, integer* lwork, integer* info);
void F77_sorbdb(char* trans, char* signs, integer* m, integer* p, integer* q, float* x11, integer* ldx11, float* x12, integer* ldx12, float* x21, integer* ldx21, float* x22, integer* ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2, float* work, integer* lwork, integer* info);
void F77_sorg2l(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sorgl2(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sorg2r(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sorgbr(char* vect, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sorglq(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sorgql(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sorgqr(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sorgr2(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* info);
void F77_sorgrq(integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sorgtr(char* uplo, integer* m, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_sorgtsqr(integer* m, integer* n, integer* mb, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* work, integer* lwork, integer* info);
void F77_sorhr_col(integer* m, integer* n, integer* nb, float* a, integer* lda, float* t, integer* ldt, float* d, integer* info);
void F77_sorm22(char* side, char* trans, integer* m, integer* n, integer* n1, integer* n2, float* q, integer* ldq, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sorm2l(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* info);
void F77_sorm2r(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* info);
void F77_sormbr(char* vect, char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sorml2(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* info);
void F77_sormlq(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sormql(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sormqr(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sormr2(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* info);
void F77_sormr3(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* info);
void F77_sormrq(char* side, char* trans, integer* m, integer* n, integer* k, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sormrz(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_sormtr(char* side, char* uplo, char* trans, integer* m, integer* n, float* a, integer* lda, float* tau, float* c, integer* ldc, float* work, integer* lwork, integer* info);
void F77_spbcon(char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_spbequ(char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* s, float* scond, float* amax, integer* info);
void F77_spbrfs(char* uplo, integer* n, integer* kd, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_spbstf(char* uplo, integer* n, integer* kd, float* ab, integer* ldab, integer* info);
void F77_spbsv(char* uplo, integer* n, integer* kd, integer* nrhs, float* ab, integer* ldab, float* b, integer* ldb, integer* info);
void F77_spbsvx(char* fact, char* uplo, integer* n, integer* kd, integer* nrhs, float* ab, integer* ldab, float* afb, integer* ldafb, char* equed, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_spbtf2(char* uplo, integer* n, integer* kd, float* ab, integer* ldab, integer* info);
void F77_spbtrf(char* uplo, integer* n, integer* kd, float* ab, integer* ldab, integer* info);
void F77_spbtrs(char* uplo, integer* n, integer* kd, integer* nrhs, float* ab, integer* ldab, float* b, integer* ldb, integer* info);
void F77_spftrf(char* transr, char* uplo, integer* n, float* a, integer* info);
void F77_spftri(char* transr, char* uplo, integer* n, float* a, integer* info);
void F77_spftrs(char* transr, char* uplo, integer* n, integer* nrhs, float* a, float* b, integer* ldb, integer* info);
void F77_spocon(char* uplo, integer* n, float* a, integer* lda, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_spoequb(integer* n, float* a, integer* lda, float* s, float* scond, float* amax, integer* info);
void F77_spoequ(integer* n, float* a, integer* lda, float* s, float* scond, float* amax, integer* info);
void F77_sporfs(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sporfsx(char* uplo, char* equed, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_sposv(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, integer* info);
void F77_sposvx(char* fact, char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, char* equed, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sposvxx(char* fact, char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, char* equed, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_spotf2(char* uplo, integer* n, float* a, integer* lda, integer* info);
void F77_spotrf2(char* uplo, integer* n, float* a, integer* lda, integer* info);
void F77_spotrf(char* uplo, integer* n, float* a, integer* lda, integer* info);
void F77_spotri(char* uplo, integer* n, float* buff_A, integer* ldim_A, integer* info);
void F77_spotrs(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, integer* info);
void F77_sppcon(char* uplo, integer* n, float* ap, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_sppequ(char* uplo, integer* n, float* ap, float* s, float* scond, float* amax, integer* info);
void F77_spprfs(char* uplo, integer* n, integer* nrhs, float* ap, float* afp, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sppsv(char* uplo, integer* n, integer* nrhs, float* ap, float* b, integer* ldb, integer* info);
void F77_sppsvx(char* fact, char* uplo, integer* n, integer* nrhs, float* ap, float* afp, char* equed, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_spptrf(char* uplo, integer* n, float* ap, integer* info);
void F77_spptri(char* uplo, integer* n, float* ap, integer* info);
void F77_spptrs(char* uplo, integer* n, integer* nrhs, float* ap, float* b, integer* ldb, integer* info);
void F77_spstf2(char* uplo, integer* n, float* a, integer* lda, integer* piv, integer* rank, float* tol, float* work, integer* info);
void F77_spstrf(char* uplo, integer* n, float* a, integer* lda, integer* piv, integer* rank, float* tol, float* work, integer* info);
void F77_sptcon(integer* n, float* d, float* e, float* anorm, float* rcond, float* work, integer* info);
void F77_spteqr(char* compz, integer* n, float* d, float* e, float* z, integer* ldz, float* work, integer* info);
void F77_sptrfs(integer* n, integer* nrhs, float* d, float* e, float* df, float* ef, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* info);
void F77_sptsv(integer* n, integer* nrhs, float* d, float* e, float* b, integer* ldb, integer* info);
void F77_sptsvx(char* fact, integer* n, integer* nrhs, float* d, float* e, float* df, float* ef, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* info);
void F77_spttrf(integer* n, float* d, float* e, integer* info);
void F77_spttrs(integer* n, integer* nrhs, float* d, float* e, float* b, integer* ldb, integer* info);
void F77_sptts2(integer* n, integer* nrhs, float* d, float* e, float* b, integer* ldb);
void F77_srscl(integer* n, float* sa, float* sx, integer* incx);
void F77_ssb2st_kernels(char* uplo, logical* wantz, integer* ttype, integer* st, integer* ed, integer* sweep, integer* n, integer* nb, integer* ib, float* a, integer* lda, float* v, float* tau, integer* ldvt, float* work);
void F77_ssbev_2stage(char* jobz, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* info);
void F77_ssbev(char* jobz, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* w, float* z, integer* ldz, float* work, integer* info);
void F77_ssbevd_2stage(char* jobz, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssbevd(char* jobz, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssbevx_2stage(char* jobz, char* range, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* q, integer* ldq, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_ssbevx(char* jobz, char* range, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* q, integer* ldq, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_ssbgst(char* vect, char* uplo, integer* n, integer* ka, integer* kb, float* ab, integer* ldab, float* bb, integer* ldbb, float* x, integer* ldx, float* work, integer* info);
void F77_ssbgv(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, float* ab, integer* ldab, float* bb, integer* ldbb, float* w, float* z, integer* ldz, float* work, integer* info);
void F77_ssbgvd(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, float* ab, integer* ldab, float* bb, integer* ldbb, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssbgvx(char* jobz, char* range, char* uplo, integer* n, integer* ka, integer* kb, float* ab, integer* ldab, float* bb, integer* ldbb, float* q, integer* ldq, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_ssbtrd(char* vect, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* d, float* e, float* q, integer* ldq, float* work, integer* info);
void F77_ssfrk(char* transr, char* uplo, char* trans, integer* n, integer* k, float* alpha, float* a, integer* lda, float* beta, float* c__);
void F77_sspcon(char* uplo, integer* n, float* ap, integer* ipiv, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_sspev(char* jobz, char* uplo, integer* n, float* ap, float* w, float* z, integer* ldz, float* work, integer* info);
void F77_sspevd(char* jobz, char* uplo, integer* n, float* ap, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_sspevx(char* jobz, char* range, char* uplo, integer* n, float* ap, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_sspgst(integer* itype, char* uplo, integer* n, float* ap, float* bp, integer* info);
void F77_sspgvd(integer* itype, char* jobz, char* uplo, integer* n, float* ap, float* bp, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_sspgv(integer* itype, char* jobz, char* uplo, integer* n, float* ap, float* bp, float* w, float* z, integer* ldz, float* work, integer* info);
void F77_sspgvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, float* ap, float* bp, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_ssprfs(char* uplo, integer* n, integer* nrhs, float* ap, float* afp, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_sspsv(char* uplo, integer* n, integer* nrhs, float* ap, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sspsvx(char* fact, char* uplo, integer* n, integer* nrhs, float* ap, float* afp, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_ssptrd(char* uplo, integer* n, float* ap, float* d, float* e, float* tau, integer* info);
void F77_ssptrf(char* uplo, integer* n, float* ap, integer* ipiv, integer* info);
void F77_ssptri(char* uplo, integer* n, float* ap, integer* ipiv, float* work, integer* info);
void F77_ssptrs(char* uplo, integer* n, integer* nrhs, float* ap, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_sstebz(char* range, char* order, integer* n, float* vl, float* vu, integer* il, integer* iu, float* abstol, float* d, float* e, integer* m, integer* nsplit, float* w, integer* iblock, integer* isplit, float* work, integer* iwork, integer* info);
void F77_sstedc(char* compz, integer* n, float* d, float* e, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_sstegr(char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, integer* isuppz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_sstein(integer* n, float* d, float* e, integer* m, float* w, integer* iblock, integer* isplit, float* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_sstemr(char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, integer* m, float* w, float* z, integer* ldz, integer* nzc, integer* isuppz, logical* tryrac, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssteqr(char* compz, integer* n, float* d, float* e, float* z, integer* ldz, float* work, integer* info);
void F77_ssteqr(char* jobz, integer* n, float* d, float* e, float* z, integer* ldz, float* work, integer* info);
void F77_ssterf(integer* n, float* d, float* e, integer* info);
void F77_sstev(char* jobz, integer* n, float* d, float* e, float* z, integer* ldz, float* work, integer* info);
void F77_sstevd(char* jobz, integer* n, float* d, float* e, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_sstevr(char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, integer* isuppz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_sstevx(char* jobz, char* range, integer* n, float* d, float* e, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* iwork, integer* ifail, integer* info);
void F77_ssycon_3(char* uplo, integer* n, float* a, integer* lda, float* e, integer* ipiv, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_ssycon(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_ssycon_rook(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* anorm, float* rcond, float* work, integer* iwork, integer* info);
void F77_ssyconv(char* uplo, char* way, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* info);
void F77_ssyconvf(char* uplo, char* way, integer* n, float* a, integer* lda, float* e, integer* ipiv, integer* info);
void F77_ssyconvf_rook(char* uplo, char* way, integer* n, float* a, integer* lda, float* e, integer* ipiv, integer* info);
void F77_ssyequb(char* uplo, integer* n, float* a, integer* lda, float* s, float* scond, float* amax, float* work, integer* info);
void F77_ssyev_2stage(char* jobz, char* uplo, integer* n, float* a, integer* lda, float* w, float* work, integer* lwork, integer* info);
void F77_ssyev(char* jobz, char* uplo, integer* n, float* a, integer* lda, float* w, float* work, integer* lwork, integer* info);
void F77_ssyevd_2stage(char* jobz, char* uplo, integer* n, float* a, integer* lda, float* w, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssyevd(char* jobz, char* uplo, integer* n, float* a, integer* lda, float* w, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssyevr_2stage(char* jobz, char* range, char* uplo, integer* n, float* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, integer* isuppz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssyevr(char* jobz, char* range, char* uplo, integer* n, float* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, integer* isuppz, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssyevx_2stage(char* jobz, char* range, char* uplo, integer* n, float* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_ssyevx(char* jobz, char* range, char* uplo, integer* n, float* a, integer* lda, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_ssygs2(integer* itype, char* uplo, integer* n, float* a, integer* lda, float* b, integer* ldb, integer* info);
void F77_ssygst(integer* itype, char* uplo, integer* n, float* a, integer* lda, float* b, integer* ldb, integer* info);
void F77_ssygv_2stage(integer* itype, char* jobz, char* uplo, integer* n, float* a, integer* lda, float* b, integer* ldb, float* w, float* work, integer* lwork, integer* info);
void F77_ssygvd(integer* itype, char* jobz, char* uplo, integer* n, float* a, integer* lda, float* b, integer* ldb, float* w, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ssygv(integer* itype, char* jobz, char* uplo, integer* n, float* a, integer* lda, float* b, integer* ldb, float* w, float* work, integer* lwork, integer* info);
void F77_ssygvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, float* a, integer* lda, float* b, integer* ldb, float* vl, float* vu, integer* il, integer* iu, float* abstol, integer* m, float* w, float* z, integer* ldz, float* work, integer* lwork, integer* iwork, integer* ifail, integer* info);
void F77_ssyrfs(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_ssyrfsx(char* uplo, char* equed, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_ssysv_aa_2stage(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* tb, integer* ltb, integer* ipiv, integer* ipiv2, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_ssysv_aa(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_ssysv(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_ssysv_rk(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* e, integer* ipiv, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_ssysv_rook(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_ssysvx(char* fact, char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* ferr, float* berr, float* work, integer* lwork, integer* iwork, integer* info);
void F77_ssysvxx(char* fact, char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* af, integer* ldaf, integer* ipiv, char* equed, float* s, float* b, integer* ldb, float* x, integer* ldx, float* rcond, float* rpvgrw, float* berr, integer* n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, integer* nparams, float* params, float* work, integer* iwork, integer* info);
void F77_ssyswapr(char* uplo, integer* n, float* a, integer* lda, integer* i1, integer* i2);
void F77_ssytd2(char* uplo, integer* n, float* a, integer* lda, float* d, float* e, float* tau, integer* info);
void F77_ssytf2(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, integer* info);
void F77_ssytf2_rk(char* uplo, integer* n, float* a, integer* lda, float* e, integer* ipiv, integer* info);
void F77_ssytf2_rook(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, integer* info);
void F77_ssytrd_2stage(char* vect, char* uplo, integer* n, float* a, integer* lda, float* d, float* e, float* tau, float* hous2, integer* lhous2, float* work, integer* lwork, integer* info);
void F77_ssytrd(char* uplo, integer* n, float* a, integer* lda, float* d, float* e, float* tau, float* work, integer* lwork, integer* info);
void F77_ssytrd_sb2st(char* stage1, char* vect, char* uplo, integer* n, integer* kd, float* ab, integer* ldab, float* d, float* e, float* hous, integer* lhous, float* work, integer* lwork, integer* info);
void F77_ssytrd_sy2sb(char* uplo, integer* n, integer* kd, float* a, integer* lda, float* ab, integer* ldab, float* tau, float* work, integer* lwork, integer* info);
void F77_ssytrf_aa_2stage(char* uplo, integer* n, float* a, integer* lda, float* tb, integer* ltb, integer* ipiv, integer* ipiv2, float* work, integer* lwork, integer* info);
void F77_ssytrf_aa(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_ssytrf(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_ssytrf_rk(char* uplo, integer* n, float* a, integer* lda, float* e, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_ssytrf_rook(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_ssytri2(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_ssytri2x(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* nb, integer* info);
void F77_ssytri_3(char* uplo, integer* n, float* a, integer* lda, float* e, integer* ipiv, float* work, integer* lwork, integer* info);
void F77_ssytri_3x(char* uplo, integer* n, float* a, integer* lda, float* e, integer* ipiv, float* work, integer* nb, integer* info);
void F77_ssytri(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* info);
void F77_ssytri_rook(char* uplo, integer* n, float* a, integer* lda, integer* ipiv, float* work, integer* info);
void F77_ssytrs2(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, float* work, integer* info);
void F77_ssytrs_3(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* e, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_ssytrs_aa_2stage(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, float* tb, integer* ltb, integer* ipiv, integer* ipiv2, float* b, integer* ldb, integer* info);
void F77_ssytrs_aa(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, float* work, integer* lwork, integer* info);
void F77_ssytrs(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_ssytrs_rook(char* uplo, integer* n, integer* nrhs, float* a, integer* lda, integer* ipiv, float* b, integer* ldb, integer* info);
void F77_stbcon(char* norm, char* uplo, char* diag, integer* n, integer* kd, float* ab, integer* ldab, float* rcond, float* work, integer* iwork, integer* info);
void F77_stbrfs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, float* ab, integer* ldab, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_stbtrs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, float* ab, integer* ldab, float* b, integer* ldb, integer* info);
void F77_stfsm(char* transr, char* side, char* uplo, char* trans, char* diag, integer* m, integer* n, float* alpha, float* a, float* b, integer* ldb);
void F77_stftri(char* transr, char* uplo, char* diag, integer* n, float* a, integer* info);
void F77_stfttp(char* transr, char* uplo, integer* n, float* arf, float* ap, integer* info);
void F77_stfttr(char* transr, char* uplo, integer* n, float* arf, float* a, integer* lda, integer* info);
void F77_stgevc(char* side, char* howmny, logical* select, integer* n, float* s, integer* lds, float* p, integer* ldp, float* vl, integer* ldvl, float* vr, integer* ldvr, integer* mm, integer* m, float* work, integer* info);
void F77_stgex2(logical* wantq, logical* wantz, integer* n, float* a, integer* lda, float* b, integer* ldb, float* q, integer* ldq, float* z, integer* ldz, integer* j1, integer* n1, integer* n2, float* work, integer* lwork, integer* info);
void F77_stgexc(logical* wantq, logical* wantz, integer* n, float* a, integer* lda, float* b, integer* ldb, float* q, integer* ldq, float* z, integer* ldz, integer* ifst, integer* ilst, float* work, integer* lwork, integer* info);
void F77_stgsen(integer* ijob, logical* wantq, logical* wantz, logical* select, integer* n, float* a, integer* lda, float* b, integer* ldb, float* alphar, float* alphai, float* beta, float* q, integer* ldq, float* z, integer* ldz, integer* m, float* pl, float* pr, float* dif, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_stgsja(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, integer* k, integer* l, float* a, integer* lda, float* b, integer* ldb, float* tola, float* tolb, float* alpha, float* beta, float* u, integer* ldu, float* v, integer* ldv, float* q, integer* ldq, float* work, integer* ncycle, integer* info);
void F77_stgsna(char* job, char* howmny, logical* select, integer* n, float* a, integer* lda, float* b, integer* ldb, float* vl, integer* ldvl, float* vr, integer* ldvr, float* s, float* dif, integer* mm, integer* m, float* work, integer* lwork, integer* iwork, integer* info);
void F77_stgsy2(char* trans, integer* ijob, integer* m, integer* n, float* a, integer* lda, float* b, integer* ldb, float* c, integer* ldc, float* d, integer* ldd, float* e, integer* lde, float* f, integer* ldf, float* scale, float* rdsum, float* rdscal, integer* iwork, integer* pq, integer* info);
void F77_stgsyl(char* trans, integer* ijob, integer* m, integer* n, float* a, integer* lda, float* b, integer* ldb, float* c, integer* ldc, float* d, integer* ldd, float* e, integer* lde, float* f, integer* ldf, float* scale, float* dif, float* work, integer* lwork, integer* iwork, integer* info);
void F77_stpcon(char* norm, char* uplo, char* diag, integer* n, float* ap, float* rcond, float* work, integer* iwork, integer* info);
void F77_stplqt2(integer* m, integer* n, integer* l, float* a, integer* lda, float* b, integer* ldb, float* t, integer* ldt, integer* info);
void F77_stplqt(integer* m, integer* n, integer* l, integer* mb, float* a, integer* lda, float* b, integer* ldb, float* t, integer* ldt, float* work, integer* info);
void F77_stpmlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* mb, float* v, integer* ldv, float* t, integer* ldt, float* a, integer* lda, float* b, integer* ldb, float* work, integer* info);
void F77_stpmqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* nb, float* v, integer* ldv, float* t, integer* ldt, float* a, integer* lda, float* b, integer* ldb, float* work, integer* info);
void F77_stpqrt2(integer* m, integer* n, integer* l, float* a, integer* lda, float* b, integer* ldb, float* t, integer* ldt, integer* info);
void F77_stpqrt(integer* m, integer* n, integer* l, integer* nb, float* a, integer* lda, float* b, integer* ldb, float* t, integer* ldt, float* work, integer* info);
void F77_stprfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, float* v, integer* ldv, float* t, integer* ldt, float* a, integer* lda, float* b, integer* ldb, float* work, integer* ldwork);
void F77_stprfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, float* ap, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_stptri(char* uplo, char* diag, integer* n, float* ap, integer* info);
void F77_stptrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, float* ap, float* b, integer* ldb, integer* info);
void F77_stpttf(char* transr, char* uplo, integer* n, float* ap, float* arf, integer* info);
void F77_stpttr(char* uplo, integer* n, float* ap, float* a, integer* lda, integer* info);
void F77_strcon(char* norm, char* uplo, char* diag, integer* n, float* a, integer* lda, float* rcond, float* work, integer* iwork, integer* info);
void F77_strevc3(char* side, char* howmny, logical* select, integer* n, float* t, integer* ldt, float* vl, integer* ldvl, float* vr, integer* ldvr, integer* mm, integer* m, float* work, integer* lwork, integer* info);
void F77_strevc(char* side, char* howmny, logical* select, integer* n, float* t, integer* ldt, float* vl, integer* ldvl, float* vr, integer* ldvr, integer* mm, integer* m, float* work, integer* info);
void F77_strexc(char* compq, integer* n, float* t, integer* ldt, float* q, integer* ldq, integer* ifst, integer* ilst, float* work, integer* info);
void F77_strrfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, float* x, integer* ldx, float* ferr, float* berr, float* work, integer* iwork, integer* info);
void F77_strsen(char* job, char* compq, logical* select, integer* n, float* t, integer* ldt, float* q, integer* ldq, float* wr, float* wi, integer* m, float* s, float* sep, float* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_strsna(char* job, char* howmny, logical* select, integer* n, float* t, integer* ldt, float* vl, integer* ldvl, float* vr, integer* ldvr, float* s, float* sep, integer* mm, integer* m, float* work, integer* ldwork, integer* iwork, integer* info);
void F77_strsyl(char* trana, char* tranb, integer* isgn, integer* m, integer* n, float* a, integer* lda, float* b, integer* ldb, float* c, integer* ldc, float* scale, integer* info);
void F77_strti2(char* uplo, char* diag, integer* n, float* a, integer* lda, integer* info);
void F77_strtri(char* uplo, char* diag, integer* n, float* a, integer* lda, integer* info);
void F77_strtrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, float* a, integer* lda, float* b, integer* ldb, integer* info);
void F77_strttf(char* transr, char* uplo, integer* n, float* a, integer* lda, float* arf, integer* info);
void F77_strttp(char* uplo, integer* n, float* a, integer* lda, float* ap, integer* info);
void F77_stzrqf(integer* m, integer* n, float* a, integer* lda, float* tau, integer* info);
void F77_stzrzf(integer* m, integer* n, float* a, integer* lda, float* tau, float* work, integer* lwork, integer* info);
void F77_zbbcsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, integer* m, integer* p, integer* q, double* theta, double* phi, dcomplex* u1, integer* ldu1, dcomplex* u2, integer* ldu2, dcomplex* v1t, integer* ldv1t, dcomplex* v2t, integer* ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* rwork, integer* lrwork, integer* info);
void F77_zbdsqr(char* uplo, integer* n, integer* ncvt, integer* nru, integer* ncc, double* d, double* e, dcomplex* vt, integer* ldvt, dcomplex* u, integer* ldu, dcomplex* c, integer* ldc, double* rwork, integer* info);
void F77_zcgesv(integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, dcomplex* work, scomplex* swork, double* rwork, integer* iter, integer* info);
void F77_zcposv(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, dcomplex* work, scomplex* swork, double* rwork, integer* iter, integer* info);
void F77_zdrscl(integer* n, double* sa, dcomplex* sx, integer* incx);
void F77_zgbbrd(char* vect, integer* m, integer* n, integer* ncc, integer* kl, integer* ku, dcomplex* ab, integer* ldab, double* d, double* e, dcomplex* q, integer* ldq, dcomplex* pt, integer* ldpt, dcomplex* c, integer* ldc, dcomplex* work, double* rwork, integer* info);
void F77_zgbcon(char* norm, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, integer* ipiv, double* anorm, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_zgbequb(integer* m, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_zgbequ(integer* m, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_zgbrfs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zgbrfsx(char* trans, char* equed, integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, double* r, double* c, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zgbsv(integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zgbsvx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, char* equed, double* r, double* c, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zgbsvxx(char* fact, char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, char* equed, double* r, double* c, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zgbtf2(integer* m, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, integer* ipiv, integer* info);
void F77_zgbtrf(integer* m, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, integer* ipiv, integer* info);
void F77_zgbtrs(char* trans, integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zgebak(char* job, char* side, integer* n, integer* ilo, integer* ihi, double* scale, integer* m, dcomplex* v, integer* ldv, integer* info);
void F77_zgebal(char* job, integer* n, dcomplex* a, integer* lda, integer* ilo, integer* ihi, double* scale, integer* info);
void F77_zgebd2(integer* m, integer* n, dcomplex* a, integer* lda, double* d, double* e, dcomplex* tauq, dcomplex* taup, dcomplex* work, integer* info);
void F77_zgebrd(integer* m, integer* n, dcomplex* a, integer* lda, double* d, double* e, dcomplex* tauq, dcomplex* taup, dcomplex* work, integer* lwork, integer* info);
void F77_zgecon(char* norm, integer* n, dcomplex* a, integer* lda, double* anorm, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_zgeequb(integer* m, integer* n, dcomplex* a, integer* lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_zgeequ(integer* m, integer* n, dcomplex* a, integer* lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, integer* info);
void F77_zgees(char* jobvs, char* sort, L_fp select, integer* n, dcomplex* a, integer* lda, integer* sdim, dcomplex* w, dcomplex* vs, integer* ldvs, dcomplex* work, integer* lwork, double* rwork, logical* bwork, integer* info);
void F77_zgeesx(char* jobvs, char* sort, L_fp select, char* sense, integer* n, dcomplex* a, integer* lda, integer* sdim, dcomplex* w, dcomplex* vs, integer* ldvs, double* rconde, double* rcondv, dcomplex* work, integer* lwork, double* rwork, logical* bwork, integer* info);
void F77_zgeev(char* jobvl, char* jobvr, integer* n, dcomplex* a, integer* lda, dcomplex* w, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgeevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, dcomplex* a, integer* lda, dcomplex* w, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, integer* ilo, integer* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgegs(char* jobvsl, char* jobvsr, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* alpha, dcomplex* beta, dcomplex* vsl, integer* ldvsl, dcomplex* vsr, integer* ldvsr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgegv(char* jobvl, char* jobvr, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* alpha, dcomplex* beta, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgehd2(integer* n, integer* ilo, integer* ihi, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgehrd(integer* n, integer* ilo, integer* ihi, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zgejsv(char* joba, char* jobu, char* jobv, char* jobr, char* jobt, char* jobp, integer* m, integer* n, dcomplex* a, integer* lda, double* sva, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, dcomplex* cwork, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* info);
void F77_zgelq2(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgelqf(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zgelq(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* t, integer* tsize, dcomplex* work, integer* lwork, integer* info);
void F77_zgelqt3(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, integer* info);
void F77_zgelqt(integer* m, integer* n, integer* mb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* work, integer* info);
void F77_zgels(char* trans, integer* m, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zgelsd(integer* m, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* s, double* rcond, integer* rank, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* info);
void F77_zgelss(integer* m, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* s, double* rcond, integer* rank, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgelsx(integer* m, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* jpvt, double* rcond, integer* rank, dcomplex* work, double* rwork, integer* info);
void F77_zgelsy(integer* m, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* jpvt, double* rcond, integer* rank, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgemlq(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* t, integer* tsize, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zgemlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zgemqr(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* t, integer* tsize, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zgemqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* nb, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zgeql2(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgeqlf(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zgeqp3(integer* m, integer* n, dcomplex* a, integer* lda, integer* jpvt, dcomplex* tau, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgeqpf(integer* m, integer* n, dcomplex* a, integer* lda, integer* jpvt, dcomplex* tau, dcomplex* work, double* rwork, integer* info);
void F77_zgeqr2(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgeqr2p(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgeqrf(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zgeqrfp(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zgeqr(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* t, integer* tsize, dcomplex* work, integer* lwork, integer* info);
void F77_zgeqrt2(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, integer* info);
void F77_zgeqrt3(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, integer* info);
void F77_zgeqrt(integer* m, integer* n, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* work, integer* info);
void F77_zgerfs(char* trans, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zgerfsx(char* trans, char* equed, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* r, double* c, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zgerq2(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgerqf(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zgesc2(integer* n, dcomplex* a, integer* lda, dcomplex* rhs, integer* ipiv, integer* jpiv, double* scale);
void F77_zgesdd(char* jobz, integer* m, integer* n, dcomplex* a, integer* lda, double* s, dcomplex* u, integer* ldu, dcomplex* vt, integer* ldvt, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* info);
void F77_zgesvd(char* jobu, char* jobv, integer* m, integer* n, dcomplex* a, integer* lda, double* s, dcomplex* u, integer* ldu, dcomplex* vt, integer* ldvt, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zgesvdq(char* joba, char* jobp, char* jobr, char* jobu, char* jobv, integer* m, integer* n, dcomplex* a, integer* lda, double* s, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, integer* numrank, integer* iwork, integer* liwork, dcomplex* cwork, integer* lcwork, double* rwork, integer* lrwork, integer* info);
void F77_zgesvdx(char* jobu, char* jobvt, char* range, integer* m, integer* n, dcomplex* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, integer* ns, double* s, dcomplex* u, integer* ldu, dcomplex* vt, integer* ldvt, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* info);
void F77_zgesv(integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zgesvj(char* joba, char* jobu, char* jobv, integer* m, integer* n, dcomplex* a, integer* lda, double* sva, integer* mv, dcomplex* v, integer* ldv, dcomplex* cwork, integer* lwork, double* rwork, integer* lrwork, integer* info);
void F77_zgesvx(char* fact, char* trans, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, char* equed, double* r, double* c, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zgesvxx(char* fact, char* trans, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, char* equed, double* r, double* c, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zgetc2(integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* jpiv, integer* info);
void F77_zgetf2(integer* m, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zgetrf2(integer* m, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zgetrf(integer* m, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zgetri(integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zgetrs(char* trans, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zgetsls(char* trans, integer* m, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zggbak(char* job, char* side, integer* n, integer* ilo, integer* ihi, double* lscale, double* rscale, integer* m, dcomplex* v, integer* ldv, integer* info);
void F77_zggbal(char* job, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* ilo, integer* ihi, double* lscale, double* rscale, double* work, integer* info);
void F77_zgges3(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* sdim, dcomplex* alpha, dcomplex* beta, dcomplex* vsl, integer* ldvsl, dcomplex* vsr, integer* ldvsr, dcomplex* work, integer* lwork, double* rwork, logical* bwork, integer* info);
void F77_zgges(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* sdim, dcomplex* alpha, dcomplex* beta, dcomplex* vsl, integer* ldvsl, dcomplex* vsr, integer* ldvsr, dcomplex* work, integer* lwork, double* rwork, logical* bwork, integer* info);
void F77_zggesx(char* jobvsl, char* jobvsr, char* sort, L_fp selctg, char* sense, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* sdim, dcomplex* alpha, dcomplex* beta, dcomplex* vsl, integer* ldvsl, dcomplex* vsr, integer* ldvsr, double* rconde, double* rcondv, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* liwork, logical* bwork, integer* info);
void F77_zggev3(char* jobvl, char* jobvr, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* alpha, dcomplex* beta, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zggev(char* jobvl, char* jobvr, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* alpha, dcomplex* beta, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zggevx(char* balanc, char* jobvl, char* jobvr, char* sense, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* alpha, dcomplex* beta, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, integer* ilo, integer* ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, dcomplex* work, integer* lwork, double* rwork, integer* iwork, logical* bwork, integer* info);
void F77_zggglm(integer* n, integer* m, integer* p, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* d, dcomplex* x, dcomplex* y, dcomplex* work, integer* lwork, integer* info);
void F77_zgghd3(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* q, integer* ldq, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, integer* info);
void F77_zgghrd(char* compq, char* compz, integer* n, integer* ilo, integer* ihi, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* q, integer* ldq, dcomplex* z, integer* ldz, integer* info);
void F77_zgglse(integer* m, integer* n, integer* p, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* c, dcomplex* d, dcomplex* x, dcomplex* work, integer* lwork, integer* info);
void F77_zggqrf(integer* n, integer* m, integer* p, dcomplex* a, integer* lda, dcomplex* taua, dcomplex* b, integer* ldb, dcomplex* taub, dcomplex* work, integer* lwork, integer* info);
void F77_zggrqf(integer* m, integer* p, integer* n, dcomplex* a, integer* lda, dcomplex* taua, dcomplex* b, integer* ldb, dcomplex* taub, dcomplex* work, integer* lwork, integer* info);
void F77_zggsvd3(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* alpha, double* beta, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, dcomplex* q, integer* ldq, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* info);
void F77_zggsvd(char* jobu, char* jobv, char* jobq, integer* m, integer* n, integer* p, integer* k, integer* l, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* alpha, double* beta, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, dcomplex* q, integer* ldq, dcomplex* work, double* rwork, integer* iwork, integer* info);
void F77_zggsvp3(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* tola, double* tolb, integer* k, integer* l, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, dcomplex* q, integer* ldq, integer* iwork, double* rwork, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zggsvp(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* tola, double* tolb, integer* k, integer* l, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, dcomplex* q, integer* ldq, integer* iwork, double* rwork, dcomplex* tau, dcomplex* work, integer* info);
void F77_zgsvj0(char* jobv, integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* d, double* sva, integer* mv, dcomplex* v, integer* ldv, double* eps, double* sfmin, double* tol, integer* nsweep, dcomplex* work, integer* lwork, integer* info);
void F77_zgsvj1(char* jobv, integer* m, integer* n, integer* n1, dcomplex* a, integer* lda, dcomplex* d, double* sva, integer* mv, dcomplex* v, integer* ldv, double* eps, double* sfmin, double* tol, integer* nsweep, dcomplex* work, integer* lwork, integer* info);
void F77_zgtcon(char* norm, integer* n, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* du2, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zgtrfs(char* trans, integer* n, integer* nrhs, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* dlf, dcomplex* df, dcomplex* duf, dcomplex* du2, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zgtsv(integer* n, integer* nrhs, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* b, integer* ldb, integer* info);
void F77_zgtsvx(char* fact, char* trans, integer* n, integer* nrhs, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* dlf, dcomplex* df, dcomplex* duf, dcomplex* du2, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zgttrf(integer* n, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* du2, integer* ipiv, integer* info);
void F77_zgttrs(char* trans, integer* n, integer* nrhs, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* du2, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zgtts2(integer* itrans, integer* n, integer* nrhs, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* du2, integer* ipiv, dcomplex* b, integer* ldb);
void F77_zhb2st_kernels(char* uplo, logical* wantz, integer* ttype, integer* st, integer* ed, integer* sweep, integer* n, integer* nb, integer* ib, dcomplex* a, integer* lda, dcomplex* v, dcomplex* tau, integer* ldvt, dcomplex* work);
void F77_zhbev_2stage(char* jobz, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zhbev(char* jobz, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* info);
void F77_zhbevd_2stage(char* jobz, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zhbevd(char* jobz, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zhbevx_2stage(char* jobz, char* range, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, dcomplex* q, integer* ldq, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zhbevx(char* jobz, char* range, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, dcomplex* q, integer* ldq, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zhbgst(char* vect, char* uplo, integer* n, integer* ka, integer* kb, dcomplex* ab, integer* ldab, dcomplex* bb, integer* ldbb, dcomplex* x, integer* ldx, dcomplex* work, double* rwork, integer* info);
void F77_zhbgv(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, dcomplex* ab, integer* ldab, dcomplex* bb, integer* ldbb, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* info);
void F77_zhbgvd(char* jobz, char* uplo, integer* n, integer* ka, integer* kb, dcomplex* ab, integer* ldab, dcomplex* bb, integer* ldbb, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zhbgvx(char* jobz, char* range, char* uplo, integer* n, integer* ka, integer* kb, dcomplex* ab, integer* ldab, dcomplex* bb, integer* ldbb, dcomplex* q, integer* ldq, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zhbtrd(char* vect, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* d, double* e, dcomplex* q, integer* ldq, dcomplex* work, integer* info);
void F77_zhecon_3(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zhecon(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zhecon_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zheequb(char* uplo, integer* n, dcomplex* a, integer* lda, double* s, double* scond, double* amax, dcomplex* work, integer* info);
void F77_zheev_2stage(char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, double* w, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zheev(char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, double* w, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zheevd_2stage(char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, double* w, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zheevd(char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, double* w, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zheevr_2stage(char* jobz, char* range, char* uplo, integer* n, dcomplex* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, integer* isuppz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zheevr(char* jobz, char* range, char* uplo, integer* n, dcomplex* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, integer* isuppz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zheevx_2stage(char* jobz, char* range, char* uplo, integer* n, dcomplex* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zheevx(char* jobz, char* range, char* uplo, integer* n, dcomplex* a, integer* lda, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zhegs2(integer* itype, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* info);
void F77_zhegst(integer* itype, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* info);
void F77_zhegv_2stage(integer* itype, char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* w, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zhegvd(integer* itype, char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* w, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zhegv(integer* itype, char* jobz, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* w, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zhegvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zherfs(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zherfsx(char* uplo, char* equed, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zhesv_aa_2stage(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zhesv_aa(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zhesv(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zhesv_rk(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zhesv_rook(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zhesvx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zhesvxx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, char* equed, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zheswapr(char* uplo, integer* n, dcomplex* a, integer* lda, integer* i1, integer* i2);
void F77_zhetd2(char* uplo, integer* n, dcomplex* a, integer* lda, double* d, double* e, dcomplex* tau, integer* info);
void F77_zhetf2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zhetf2_rk(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, integer* info);
void F77_zhetf2_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zhetrd_2stage(char* vect, char* uplo, integer* n, dcomplex* a, integer* lda, double* d, double* e, dcomplex* tau, dcomplex* hous2, integer* lhous2, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrd(char* uplo, integer* n, dcomplex* a, integer* lda, double* d, double* e, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrd_hb2st(char* stage1, char* vect, char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* d, double* e, dcomplex* hous, integer* lhous, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrd_he2hb(char* uplo, integer* n, integer* kd, dcomplex* a, integer* lda, dcomplex* ab, integer* ldab, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrf_aa_2stage(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrf_aa(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrf(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrf_rk(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrf_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zhetri2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zhetri2x(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* nb, integer* info);
void F77_zhetri_3(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zhetri_3x(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* work, integer* nb, integer* info);
void F77_zhetri(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* info);
void F77_zhetri_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* info);
void F77_zhetrs2(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* info);
void F77_zhetrs_3(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zhetrs_aa_2stage(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, dcomplex* b, integer* ldb, integer* info);
void F77_zhetrs_aa(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zhetrs(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zhetrs_rook(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zhfrk(char* transr, char* uplo, char* trans, integer* n, integer* k, double* alpha, dcomplex* a, integer* lda, double* beta, dcomplex* c__);
void F77_zhgeqz(char* job, char* compq, char* compz, integer* n, integer* ilo, integer* ihi, dcomplex* h, integer* ldh, dcomplex* t, integer* ldt, dcomplex* alpha, dcomplex* beta, dcomplex* q, integer* ldq, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zhpcon(char* uplo, integer* n, dcomplex* ap, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zhpev(char* jobz, char* uplo, integer* n, dcomplex* ap, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* info);
void F77_zhpevd(char* jobz, char* uplo, integer* n, dcomplex* ap, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zhpevx(char* jobz, char* range, char* uplo, integer* n, dcomplex* ap, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zhpgst(integer* itype, char* uplo, integer* n, dcomplex* ap, dcomplex* bp, integer* info);
void F77_zhpgvd(integer* itype, char* jobz, char* uplo, integer* n, dcomplex* ap, dcomplex* bp, double* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zhpgv(integer* itype, char* jobz, char* uplo, integer* n, dcomplex* ap, dcomplex* bp, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* info);
void F77_zhpgvx(integer* itype, char* jobz, char* range, char* uplo, integer* n, dcomplex* ap, dcomplex* bp, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, dcomplex* work, double* rwork, integer* iwork, integer* ifail, integer* info);
void F77_zhprfs(char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* afp, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zhpsv(char* uplo, integer* n, integer* nrhs, dcomplex* ap, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zhpsvx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* afp, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zhptrd(char* uplo, integer* n, dcomplex* ap, double* d, double* e, dcomplex* tau, integer* info);
void F77_zhptrf(char* uplo, integer* n, dcomplex* ap, integer* ipiv, integer* info);
void F77_zhptri(char* uplo, integer* n, dcomplex* ap, integer* ipiv, dcomplex* work, integer* info);
void F77_zhptrs(char* uplo, integer* n, integer* nrhs, dcomplex* ap, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zhsein(char* side, char* eigsrc, char* initv, logical* select, integer* n, dcomplex* h, integer* ldh, dcomplex* w, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, integer* mm, integer* m, dcomplex* work, double* rwork, integer* ifaill, integer* ifailr, integer* info);
void F77_zhseqr(char* job, char* compz, integer* n, integer* ilo, integer* ihi, dcomplex* h, integer* ldh, dcomplex* w, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, integer* info);
void F77_zlabrd(integer* m, integer* n, integer* nb, dcomplex* a, integer* lda, double* d, double* e, dcomplex* tauq, dcomplex* taup, dcomplex* x, integer* ldx, dcomplex* y, integer* ldy);
void F77_zlacgv(integer* n, dcomplex* x, integer* incx);
void F77_zlacn2(integer* n, dcomplex* v, dcomplex* x, double* est, integer* kase, integer* isave);
void F77_zlacon(integer* n, dcomplex* v, dcomplex* x, double* est, integer* kase);
void F77_zlacp2(char* uplo, integer* m, integer* n, double* a, integer* lda, dcomplex* b, integer* ldb);
void F77_zlacpy(char* uplo, integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb);
void F77_zlacrm(integer* m, integer* n, dcomplex* a, integer* lda, double* b, integer* ldb, dcomplex* c, integer* ldc, double* rwork);
void F77_zlacrt(integer* n, dcomplex* cx, integer* incx, dcomplex* cy, integer* incy, dcomplex* c, dcomplex* s);
void F77_zlaed0(integer* qsiz, integer* n, double* d, double* e, dcomplex* q, integer* ldq, dcomplex* qstore, integer* ldqs, double* rwork, integer* iwork, integer* info);
void F77_zlaed7(integer* n, integer* cutpnt, integer* qsiz, integer* tlvls, integer* curlvl, integer* curpbm, double* d, dcomplex* q, integer* ldq, double* rho, integer* indxq, double* qstore, integer* qptr, integer* prmptr, integer* perm, integer* givptr, integer* givcol, double* givnum, dcomplex* work, double* rwork, integer* iwork, integer* info);
void F77_zlaed8(integer* k, integer* n, integer* qsiz, dcomplex* q, integer* ldq, double* d, double* rho, integer* cutpnt, double* z, double* dlamda, dcomplex* q2, integer* ldq2, double* w, integer* indxp, integer* indx, integer* indxq, integer* perm, integer* givptr, integer* givcol, double* givnum, integer* info);
void F77_zlaein(logical* rightv, logical* noinit, integer* n, dcomplex* h, integer* ldh, dcomplex* w, dcomplex* v, dcomplex* b, integer* ldb, double* rwork, double* eps3, double* smlnum, integer* info);
void F77_zlaesy(dcomplex* a, dcomplex* b, dcomplex* c, dcomplex* rt1, dcomplex* rt2, dcomplex* evscal, dcomplex* cs1, dcomplex* sn1);
void F77_zlaev2(dcomplex* a, dcomplex* b, dcomplex* c, double* rt1, double* rt2, double* cs1, dcomplex* sn1);
void F77_zlag2c(integer* m, integer* n, dcomplex* a, integer* lda, scomplex* sa, integer* ldsa, integer* info);
void F77_zla_gbamv(integer* trans, integer* m, integer* n, integer* kl, integer* ku, double* alpha, dcomplex* ab, integer* ldab, dcomplex* x, integer* incx, double* beta, double* y, integer* incy);
void F77_zla_gbrfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* kl, integer* ku, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, integer* ipiv, logical* colequ, double* c, dcomplex* b, integer* ldb, dcomplex* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, dcomplex* res, double* ayb, dcomplex* dy, dcomplex* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_zla_geamv(integer* trans, integer* m, integer* n, double* alpha, dcomplex* a, integer* lda, dcomplex* x, integer* incx, double* beta, double* y, integer* incy);
void F77_zla_gerfsx_extended(integer* prec_type, integer* trans_type, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, logical* colequ, double* c, dcomplex* b, integer* ldb, dcomplex* y, integer* ldy, double* berr_out, integer* n_norms, double* errs_n, double* errs_c, dcomplex* res, double* ayb, dcomplex* dy, dcomplex* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_zlags2(logical* upper, double* a1, dcomplex* a2, double* a3, double* b1, dcomplex* b2, double* b3, double* csu, dcomplex* snu, double* csv, dcomplex* snv, double* csq, dcomplex* snq);
void F77_zlagtm(char* trans, integer* n, integer* nrhs, double* alpha, dcomplex* dl, dcomplex* d, dcomplex* du, dcomplex* x, integer* ldx, double* beta, dcomplex* b, integer* ldb);
void F77_zla_heamv(integer* uplo, integer* n, double* alpha, dcomplex* a, integer* lda, dcomplex* x, integer* incx, double* beta, double* y, integer* incy);
void F77_zlahef_aa(char* uplo, integer* j1, integer* m, integer* nb, dcomplex* a, integer* lda, integer* ipiv, dcomplex* h, integer* ldh, dcomplex* work);
void F77_zlahef(char* uplo, integer* n, integer* nb, integer* kb, dcomplex* a, integer* lda, integer* ipiv, dcomplex* w, integer* ldw, integer* info);
void F77_zlahef_rk(char* uplo, integer* n, integer* nb, integer* kb, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* w, integer* ldw, integer* info);
void F77_zlahef_rook(char* uplo, integer* n, integer* nb, integer* kb, dcomplex* a, integer* lda, integer* ipiv, dcomplex* w, integer* ldw, integer* info);
void F77_zla_herfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, logical* colequ, double* c, dcomplex* b, integer* ldb, dcomplex* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, dcomplex* res, double* ayb, dcomplex* dy, dcomplex* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_zlahqr(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, dcomplex* h, integer* ldh, dcomplex* w, integer* iloz, integer* ihiz, dcomplex* z, integer* ldz, integer* info);
void F77_zlahr2(integer* n, integer* k, integer* nb, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* t, integer* ldt, dcomplex* y, integer* ldy);
void F77_zlahrd(integer* n, integer* k, integer* nb, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* t, integer* ldt, dcomplex* y, integer* ldy);
void F77_zlaic1(integer* job, integer* j, dcomplex* x, double* sest, dcomplex* w, dcomplex* gamma, double* sestpr, dcomplex* s, dcomplex* c__);
void F77_zla_lin_berr(integer* n, integer* nz, integer* nrhs, dcomplex* res, double* ayb, double* berr);
void F77_zlals0(integer* icompq, integer* nl, integer* nr, integer* sqre, integer* nrhs, dcomplex* b, integer* ldb, dcomplex* bx, integer* ldbx, integer* perm, integer* givptr, integer* givcol, integer* ldgcol, double* givnum, integer* ldgnum, double* poles, double* difl, double* difr, double* z, integer* k, double* c, double* s, double* rwork, integer* info);
void F77_zlalsa(integer* icompq, integer* smlsiz, integer* n, integer* nrhs, dcomplex* b, integer* ldb, dcomplex* bx, integer* ldbx, double* u, integer* ldu, double* vt, integer* k, double* difl, double* difr, double* z, double* poles, integer* givptr, integer* givcol, integer* ldgcol, integer* perm, double* givnum, double* c, double* s, double* rwork, integer* iwork, integer* info);
void F77_zlalsd(char* uplo, integer* smlsiz, integer* n, integer* nrhs, double* d, double* e, dcomplex* b, integer* ldb, double* rcond, integer* rank, dcomplex* work, double* rwork, integer* iwork, integer* info);
void F77_zlamswlq(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zlamtsqr(char* side, char* trans, integer* m, integer* n, integer* k, integer* mb, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zlapll(integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy, double* ssmin);
void F77_zlapmr(logical* forwrd, integer* m, integer* n, dcomplex* x, integer* ldx, integer* k);
void F77_zlapmt(logical* forwrd, integer* m, integer* n, dcomplex* x, integer* ldx, integer* k);
void F77_zla_porfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, logical* colequ, double* c, dcomplex* b, integer* ldb, dcomplex* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, dcomplex* res, double* ayb, dcomplex* dy, dcomplex* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_zlaqgb(integer* m, integer* n, integer* kl, integer* ku, dcomplex* ab, integer* ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax, char* equed);
void F77_zlaqge(integer* m, integer* n, dcomplex* a, integer* lda, double* r, double* c, double* rowcnd, double* colcnd, double* amax, char* equed);
void F77_zlaqhb(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* s, double* scond, double* amax, char* equed);
void F77_zlaqhe(char* uplo, integer* n, dcomplex* a, integer* lda, double* s, double* scond, double* amax, char* equed);
void F77_zlaqhp(char* uplo, integer* n, dcomplex* ap, double* s, double* scond, double* amax, char* equed);
void F77_zlaqp2(integer* m, integer* n, integer* offset, dcomplex* a, integer* lda, integer* jpvt, dcomplex* tau, double* vn1, double* vn2, dcomplex* work);
void F77_zlaqps(integer* m, integer* n, integer* offset, integer* nb, integer* kb, dcomplex* a, integer* lda, integer* jpvt, dcomplex* tau, double* vn1, double* vn2, dcomplex* auxv, dcomplex* f, integer* ldf);
void F77_zlaqr0(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, dcomplex* h, integer* ldh, dcomplex* w, integer* iloz, integer* ihiz, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, integer* info);
void F77_zlaqr1(integer* n, dcomplex* h, integer* ldh, dcomplex* s1, dcomplex* s2, dcomplex* v);
void F77_zlaqr2(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, dcomplex* h, integer* ldh, integer* iloz, integer* ihiz, dcomplex* z, integer* ldz, integer* ns, integer* nd, dcomplex* sh, dcomplex* v, integer* ldv, integer* nh, dcomplex* t, integer* ldt, integer* nv, dcomplex* wv, integer* ldwv, dcomplex* work, integer* lwork);
void F77_zlaqr3(logical* wantt, logical* wantz, integer* n, integer* ktop, integer* kbot, integer* nw, dcomplex* h, integer* ldh, integer* iloz, integer* ihiz, dcomplex* z, integer* ldz, integer* ns, integer* nd, dcomplex* sh, dcomplex* v, integer* ldv, integer* nh, dcomplex* t, integer* ldt, integer* nv, dcomplex* wv, integer* ldwv, dcomplex* work, integer* lwork);
void F77_zlaqr4(logical* wantt, logical* wantz, integer* n, integer* ilo, integer* ihi, dcomplex* h, integer* ldh, dcomplex* w, integer* iloz, integer* ihiz, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, integer* info);
void F77_zlaqr5(logical* wantt, logical* wantz, integer* kacc22, integer* n, integer* ktop, integer* kbot, integer* nshfts, dcomplex* s, dcomplex* h, integer* ldh, integer* iloz, integer* ihiz, dcomplex* z, integer* ldz, dcomplex* v, integer* ldv, dcomplex* u, integer* ldu, integer* nv, dcomplex* wv, integer* ldwv, integer* nh, dcomplex* wh, integer* ldwh);
void F77_zlaqsb(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* s, double* scond, double* amax, char* equed);
void F77_zlaqsp(char* uplo, integer* n, dcomplex* ap, double* s, double* scond, double* amax, char* equed);
void F77_zlaqsy(char* uplo, integer* n, dcomplex* a, integer* lda, double* s, double* scond, double* amax, char* equed);
void F77_zlar1v(integer* n, integer* b1, integer* bn, double* lambda, double* d, double* l, double* ld, double* lld, double* pivmin, double* gaptol, dcomplex* z, logical* wantnc, integer* negcnt, double* ztz, double* mingma, integer* r, integer* isuppz, double* nrminv, double* resid, double* rqcorr, double* work);
void F77_zlar2v(integer* n, dcomplex* x, dcomplex* y, dcomplex* z, integer* incx, double* c, dcomplex* s, integer* incc);
void F77_zlarcm(integer* m, integer* n, double* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* c, integer* ldc, double* rwork);
void F77_zlarfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* c, integer* ldc, dcomplex* work, integer* ldwork);
void F77_zlarf(char* side, integer* m, integer* n, dcomplex* v, integer* incv, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work);
void F77_zlarfg(integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* tau);
void F77_zlarfgp(integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* tau);
void F77_zlarft(char* direct, char* storev, integer* n, integer* k, dcomplex* v, integer* ldv, dcomplex* tau, dcomplex* t, integer* ldt);
void F77_zlarfx(char* side, integer* m, integer* n, dcomplex* v, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work);
void F77_zlarfy(char* uplo, integer* n, dcomplex* v, integer* incv, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work);
void F77_zlargv(integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy, double* c, integer* incc);
void F77_zlarnv(integer* idist, integer* iseed, integer* n, dcomplex* x);
void F77_zlarrv(integer* n, double* vl, double* vu, double* d, double* l, double* pivmin, integer* isplit, integer* m, integer* dol, integer* dou, double* minrgp, double* rtol1, double* rtol2, double* w, double* werr, double* wgap, integer* iblock, integer* indexw, double* gers, dcomplex* z, integer* ldz, integer* isuppz, double* work, integer* iwork, integer* info);
void F77_zlarscl2(integer* m, integer* n, double* d, dcomplex* x, integer* ldx);
void F77_zlartg(dcomplex* f, dcomplex* g, double* cs, dcomplex* sn, dcomplex* r__);
void F77_zlartv(integer* n, dcomplex* x, integer* incx, dcomplex* y, integer* incy, double* c, dcomplex* s, integer* incc);
void F77_zlarzb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* c, integer* ldc, dcomplex* work, integer* ldwork);
void F77_zlarz(char* side, integer* m, integer* n, integer* l, dcomplex* v, integer* incv, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work);
void F77_zlarzt(char* direct, char* storev, integer* n, integer* k, dcomplex* v, integer* ldv, dcomplex* tau, dcomplex* t, integer* ldt);
void F77_zlascl2(integer* m, integer* n, double* d, dcomplex* x, integer* ldx);
void F77_zlascl(char* type, integer* kl, integer* ku, double* cfrom, double* cto, integer* m, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_zlaset(char* uplo, integer* m, integer* n, dcomplex* alpha, dcomplex* beta, dcomplex* a, integer* lda);
void F77_zlasr(char* side, char* pivot, char* direct, integer* m, integer* n, double* c, double* s, dcomplex* a, integer* lda);
void F77_zlassq(integer* n, dcomplex* x, integer* incx, double* scale, double* sumsq);
void F77_zlaswlq(integer* m, integer* n, integer* mb, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* work, integer* lwork, integer* info);
void F77_zlaswp(integer* n, dcomplex* a, integer* lda, integer* k1, integer* k2, integer* ipiv, integer* incx);
void F77_zla_syamv(integer* uplo, integer* n, double* alpha, dcomplex* a, integer* lda, dcomplex* x, integer* incx, double* beta, double* y, integer* incy);
void F77_zlasyf_aa(char* uplo, integer* j1, integer* m, integer* nb, dcomplex* a, integer* lda, integer* ipiv, dcomplex* h, integer* ldh, dcomplex* work);
void F77_zlasyf(char* uplo, integer* n, integer* nb, integer* kb, dcomplex* a, integer* lda, integer* ipiv, dcomplex* w, integer* ldw, integer* info);
void F77_zlasyf_rk(char* uplo, integer* n, integer* nb, integer* kb, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* w, integer* ldw, integer* info);
void F77_zlasyf_rook(char* uplo, integer* n, integer* nb, integer* kb, dcomplex* a, integer* lda, integer* ipiv, dcomplex* w, integer* ldw, integer* info);
void F77_zla_syrfsx_extended(integer* prec_type, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, logical* colequ, double* c, dcomplex* b, integer* ldb, dcomplex* y, integer* ldy, double* berr_out, integer* n_norms, double* err_bnds_norm, double* err_bnds_comp, dcomplex* res, double* ayb, dcomplex* dy, dcomplex* y_tail, double* rcond, integer* ithresh, double* rthresh, double* dz_ub, logical* ignore_cwise, integer* info);
void F77_zlat2c(char* uplo, integer* n, dcomplex* a, integer* lda, scomplex* sa, integer* ldsa, integer* info);
void F77_zlatbs(char* uplo, char* trans, char* diag, char* normin, integer* n, integer* kd, dcomplex* ab, integer* ldab, dcomplex* x, double* scale, double* cnorm, integer* info);
void F77_zlatdf(integer* ijob, integer* n, dcomplex* z, integer* ldz, dcomplex* rhs, double* rdsum, double* rdscal, integer* ipiv, integer* jpiv);
void F77_zlatps(char* uplo, char* trans, char* diag, char* normin, integer* n, dcomplex* ap, dcomplex* x, double* scale, double* cnorm, integer* info);
void F77_zlatrd(char* uplo, integer* n, integer* nb, dcomplex* a, integer* lda, double* e, dcomplex* tau, dcomplex* w, integer* ldw);
void F77_zlatrs(char* uplo, char* trans, char* diag, char* normin, integer* n, dcomplex* a, integer* lda, dcomplex* x, double* scale, double* cnorm, integer* info);
void F77_zlatrz(integer* m, integer* n, integer* l, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work);
void F77_zlatsqr(integer* m, integer* n, integer* mb, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* work, integer* lwork, integer* info);
void F77_zlatzm(char* side, integer* m, integer* n, dcomplex* v, integer* incv, dcomplex* tau, dcomplex* c1, dcomplex* c2, integer* ldc, dcomplex* work);
void F77_zlaunhr_col_getrfnp2(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* d, integer* info);
void F77_zlaunhr_col_getrfnp(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* d, integer* info);
void F77_zlauu2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_zlauum(char* uplo, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_zla_wwaddw(integer* n, dcomplex* x, dcomplex* y, dcomplex* w);
void F77_zpbcon(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* anorm, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_zpbequ(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* s, double* scond, double* amax, integer* info);
void F77_zpbrfs(char* uplo, integer* n, integer* kd, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zpbstf(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, integer* info);
void F77_zpbsv(char* uplo, integer* n, integer* kd, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* b, integer* ldb, integer* info);
void F77_zpbsvx(char* fact, char* uplo, integer* n, integer* kd, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* afb, integer* ldafb, char* equed, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zpbtf2(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, integer* info);
void F77_zpbtrf(char* uplo, integer* n, integer* kd, dcomplex* ab, integer* ldab, integer* info);
void F77_zpbtrs(char* uplo, integer* n, integer* kd, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* b, integer* ldb, integer* info);
void F77_zpftrf(char* transr, char* uplo, integer* n, dcomplex* a, integer* info);
void F77_zpftri(char* transr, char* uplo, integer* n, dcomplex* a, integer* info);
void F77_zpftrs(char* transr, char* uplo, integer* n, integer* nrhs, dcomplex* a, dcomplex* b, integer* ldb, integer* info);
void F77_zpocon(char* uplo, integer* n, dcomplex* a, integer* lda, double* anorm, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_zpoequb(integer* n, dcomplex* a, integer* lda, double* s, double* scond, double* amax, integer* info);
void F77_zpoequ(integer* n, dcomplex* a, integer* lda, double* s, double* scond, double* amax, integer* info);
void F77_zporfs(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zporfsx(char* uplo, char* equed, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zposv(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* info);
void F77_zposvx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, char* equed, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zposvxx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, char* equed, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zpotf2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_zpotrf2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_zpotrf(char* uplo, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_zpotri(char* uplo, integer* n, dcomplex* buff_A, integer* ldim_A, integer* info);
void F77_zpotrs(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* info);
void F77_zppcon(char* uplo, integer* n, dcomplex* ap, double* anorm, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_zppequ(char* uplo, integer* n, dcomplex* ap, double* s, double* scond, double* amax, integer* info);
void F77_zpprfs(char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* afp, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zppsv(char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* b, integer* ldb, integer* info);
void F77_zppsvx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* afp, char* equed, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zpptrf(char* uplo, integer* n, dcomplex* ap, integer* info);
void F77_zpptri(char* uplo, integer* n, dcomplex* ap, integer* info);
void F77_zpptrs(char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* b, integer* ldb, integer* info);
void F77_zpstf2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* piv, integer* rank, double* tol, double* work, integer* info);
void F77_zpstrf(char* uplo, integer* n, dcomplex* a, integer* lda, integer* piv, integer* rank, double* tol, double* work, integer* info);
void F77_zptcon(integer* n, double* d, dcomplex* e, double* anorm, double* rcond, double* rwork, integer* info);
void F77_zpteqr(char* compz, integer* n, double* d, double* e, dcomplex* z, integer* ldz, double* work, integer* info);
void F77_zptrfs(char* uplo, integer* n, integer* nrhs, double* d, dcomplex* e, double* df, dcomplex* ef, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zptsv(integer* n, integer* nrhs, double* d, dcomplex* e, dcomplex* b, integer* ldb, integer* info);
void F77_zptsvx(char* fact, integer* n, integer* nrhs, double* d, dcomplex* e, double* df, dcomplex* ef, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zpttrf(integer* n, double* d, dcomplex* e, integer* info);
void F77_zpttrs(char* uplo, integer* n, integer* nrhs, double* d, dcomplex* e, dcomplex* b, integer* ldb, integer* info);
void F77_zptts2(integer* iuplo, integer* n, integer* nrhs, double* d, dcomplex* e, dcomplex* b, integer* ldb);
void F77_zrot(integer* n, dcomplex* cx, integer* incx, dcomplex* cy, integer* incy, double* c, dcomplex* s);
void F77_zspcon(char* uplo, integer* n, dcomplex* ap, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zspmv(char* uplo, integer* n, dcomplex* alpha, dcomplex* ap, dcomplex* x, integer* incx, dcomplex* beta, dcomplex* y, integer* incy);
void F77_zspr(char* uplo, integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* ap);
void F77_zsprfs(char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* afp, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zspsv(char* uplo, integer* n, integer* nrhs, dcomplex* ap, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zspsvx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* ap, dcomplex* afp, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zsptrf(char* uplo, integer* n, dcomplex* ap, integer* ipiv, integer* info);
void F77_zsptri(char* uplo, integer* n, dcomplex* ap, integer* ipiv, dcomplex* work, integer* info);
void F77_zsptrs(char* uplo, integer* n, integer* nrhs, dcomplex* ap, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zstedc(char* compz, integer* n, double* d, double* e, dcomplex* z, integer* ldz, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* liwork, integer* info);
void F77_zstegr(char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, double* abstol, integer* m, double* w, dcomplex* z, integer* ldz, integer* isuppz, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_zstein(integer* n, double* d, double* e, integer* m, double* w, integer* iblock, integer* isplit, dcomplex* z, integer* ldz, double* work, integer* iwork, integer* ifail, integer* info);
void F77_zstemr(char* jobz, char* range, integer* n, double* d, double* e, double* vl, double* vu, integer* il, integer* iu, integer* m, double* w, dcomplex* z, integer* ldz, integer* nzc, integer* isuppz, logical* tryrac, double* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_zsteqr(char* compz, integer* n, double* d, double* e, dcomplex* z, integer* ldz, double* work, integer* info);
void F77_zsteqr(char* jobz, integer* n, double* d, double* e, dcomplex* z, integer* ldz, double* work, integer* info);
void F77_zsycon_3(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zsycon(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zsycon_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, double* anorm, double* rcond, dcomplex* work, integer* info);
void F77_zsyconv(char* uplo, char* way, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* info);
void F77_zsyconvf(char* uplo, char* way, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, integer* info);
void F77_zsyconvf_rook(char* uplo, char* way, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, integer* info);
void F77_zsyequb(char* uplo, integer* n, dcomplex* a, integer* lda, double* s, double* scond, double* amax, dcomplex* work, integer* info);
void F77_zsymv(char* uplo, integer* n, dcomplex* alpha, dcomplex* a, integer* lda, dcomplex* x, integer* incx, dcomplex* beta, dcomplex* y, integer* incy);
void F77_zsyr(char* uplo, integer* n, dcomplex* alpha, dcomplex* x, integer* incx, dcomplex* a, integer* lda);
void F77_zsyrfs(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_zsyrfsx(char* uplo, char* equed, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zsysv_aa_2stage(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zsysv_aa(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zsysv(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zsysv_rk(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zsysv_rook(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zsysvx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* ferr, double* berr, dcomplex* work, integer* lwork, double* rwork, integer* info);
void F77_zsysvxx(char* fact, char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* af, integer* ldaf, integer* ipiv, char* equed, double* s, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* rcond, double* rpvgrw, double* berr, integer* n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, integer* nparams, double* params, dcomplex* work, double* rwork, integer* info);
void F77_zsyswapr(char* uplo, integer* n, dcomplex* a, integer* lda, integer* i1, integer* i2);
void F77_zsytf2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zsytf2_rk(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, integer* info);
void F77_zsytf2_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, integer* info);
void F77_zsytrf_aa_2stage(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, dcomplex* work, integer* lwork, integer* info);
void F77_zsytrf_aa(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zsytrf(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zsytrf_rk(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zsytrf_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zsytri2(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zsytri2x(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* nb, integer* info);
void F77_zsytri_3(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* work, integer* lwork, integer* info);
void F77_zsytri_3x(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* work, integer* nb, integer* info);
void F77_zsytri(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* info);
void F77_zsytri_rook(char* uplo, integer* n, dcomplex* a, integer* lda, integer* ipiv, dcomplex* work, integer* info);
void F77_zsytrs2(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* info);
void F77_zsytrs_3(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* e, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zsytrs_aa_2stage(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* tb, integer* ltb, integer* ipiv, integer* ipiv2, dcomplex* b, integer* ldb, integer* info);
void F77_zsytrs_aa(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, dcomplex* work, integer* lwork, integer* info);
void F77_zsytrs(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_zsytrs_rook(char* uplo, integer* n, integer* nrhs, dcomplex* a, integer* lda, integer* ipiv, dcomplex* b, integer* ldb, integer* info);
void F77_ztbcon(char* norm, char* uplo, char* diag, integer* n, integer* kd, dcomplex* ab, integer* ldab, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_ztbrfs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_ztbtrs(char* uplo, char* trans, char* diag, integer* n, integer* kd, integer* nrhs, dcomplex* ab, integer* ldab, dcomplex* b, integer* ldb, integer* info);
void F77_ztfsm(char* transr, char* side, char* uplo, char* trans, char* diag, integer* m, integer* n, dcomplex* alpha, dcomplex* a, dcomplex* b, integer* ldb);
void F77_ztftri(char* transr, char* uplo, char* diag, integer* n, dcomplex* a, integer* info);
void F77_ztfttp(char* transr, char* uplo, integer* n, dcomplex* arf, dcomplex* ap, integer* info);
void F77_ztfttr(char* transr, char* uplo, integer* n, dcomplex* arf, dcomplex* a, integer* lda, integer* info);
void F77_ztgevc(char* side, char* howmny, logical* select, integer* n, dcomplex* s, integer* lds, dcomplex* p, integer* ldp, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, integer* mm, integer* m, dcomplex* work, double* rwork, integer* info);
void F77_ztgex2(logical* wantq, logical* wantz, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* q, integer* ldq, dcomplex* z, integer* ldz, integer* j1, integer* info);
void F77_ztgexc(logical* wantq, logical* wantz, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* q, integer* ldq, dcomplex* z, integer* ldz, integer* ifst, integer* ilst, integer* info);
void F77_ztgsen(integer* ijob, logical* wantq, logical* wantz, logical* select, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* alpha, dcomplex* beta, dcomplex* q, integer* ldq, dcomplex* z, integer* ldz, integer* m, double* pl, double* pr, double* dif, dcomplex* work, integer* lwork, integer* iwork, integer* liwork, integer* info);
void F77_ztgsja(char* jobu, char* jobv, char* jobq, integer* m, integer* p, integer* n, integer* k, integer* l, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, double* tola, double* tolb, double* alpha, double* beta, dcomplex* u, integer* ldu, dcomplex* v, integer* ldv, dcomplex* q, integer* ldq, dcomplex* work, integer* ncycle, integer* info);
void F77_ztgsna(char* job, char* howmny, logical* select, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, double* s, double* dif, integer* mm, integer* m, dcomplex* work, integer* lwork, integer* iwork, integer* info);
void F77_ztgsy2(char* trans, integer* ijob, integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* c, integer* ldc, dcomplex* d, integer* ldd, dcomplex* e, integer* lde, dcomplex* f, integer* ldf, double* scale, double* rdsum, double* rdscal, integer* info);
void F77_ztgsyl(char* trans, integer* ijob, integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* c, integer* ldc, dcomplex* d, integer* ldd, dcomplex* e, integer* lde, dcomplex* f, integer* ldf, double* scale, double* dif, dcomplex* work, integer* lwork, integer* iwork, integer* info);
void F77_ztpcon(char* norm, char* uplo, char* diag, integer* n, dcomplex* ap, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_ztplqt2(integer* m, integer* n, integer* l, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* t, integer* ldt, integer* info);
void F77_ztplqt(integer* m, integer* n, integer* l, integer* mb, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* t, integer* ldt, dcomplex* work, integer* info);
void F77_ztpmlqt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* mb, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* work, integer* info);
void F77_ztpmqrt(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, integer* nb, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* work, integer* info);
void F77_ztpqrt2(integer* m, integer* n, integer* l, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* t, integer* ldt, integer* info);
void F77_ztpqrt(integer* m, integer* n, integer* l, integer* nb, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* t, integer* ldt, dcomplex* work, integer* info);
void F77_ztprfb(char* side, char* trans, char* direct, char* storev, integer* m, integer* n, integer* k, integer* l, dcomplex* v, integer* ldv, dcomplex* t, integer* ldt, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* work, integer* ldwork);
void F77_ztprfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, dcomplex* ap, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_ztptri(char* uplo, char* diag, integer* n, dcomplex* ap, integer* info);
void F77_ztptrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, dcomplex* ap, dcomplex* b, integer* ldb, integer* info);
void F77_ztpttf(char* transr, char* uplo, integer* n, dcomplex* ap, dcomplex* arf, integer* info);
void F77_ztpttr(char* uplo, integer* n, dcomplex* ap, dcomplex* a, integer* lda, integer* info);
void F77_ztrcon(char* norm, char* uplo, char* diag, integer* n, dcomplex* a, integer* lda, double* rcond, dcomplex* work, double* rwork, integer* info);
void F77_ztrevc3(char* side, char* howmny, logical* select, integer* n, dcomplex* t, integer* ldt, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, integer* mm, integer* m, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* info);
void F77_ztrevc(char* side, char* howmny, logical* select, integer* n, dcomplex* t, integer* ldt, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, integer* mm, integer* m, dcomplex* work, double* rwork, integer* info);
void F77_ztrexc(char* compq, integer* n, dcomplex* t, integer* ldt, dcomplex* q, integer* ldq, integer* ifst, integer* ilst, integer* info);
void F77_ztrrfs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* x, integer* ldx, double* ferr, double* berr, dcomplex* work, double* rwork, integer* info);
void F77_ztrsen(char* job, char* compq, logical* select, integer* n, dcomplex* t, integer* ldt, dcomplex* q, integer* ldq, dcomplex* w, integer* m, double* s, double* sep, dcomplex* work, integer* lwork, integer* info);
void F77_ztrsna(char* job, char* howmny, logical* select, integer* n, dcomplex* t, integer* ldt, dcomplex* vl, integer* ldvl, dcomplex* vr, integer* ldvr, double* s, double* sep, integer* mm, integer* m, dcomplex* work, integer* ldwork, double* rwork, integer* info);
void F77_ztrsyl(char* trana, char* tranb, integer* isgn, integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, dcomplex* c, integer* ldc, double* scale, integer* info);
void F77_ztrti2(char* uplo, char* diag, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_ztrtri(char* uplo, char* diag, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_ztrtrs(char* uplo, char* trans, char* diag, integer* n, integer* nrhs, dcomplex* a, integer* lda, dcomplex* b, integer* ldb, integer* info);
void F77_ztrttf(char* transr, char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* arf, integer* info);
void F77_ztrttp(char* uplo, integer* n, dcomplex* a, integer* lda, dcomplex* ap, integer* info);
void F77_ztzrqf(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, integer* info);
void F77_ztzrzf(integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb1(integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x21, integer* ldx21, double* theta, double* phi, dcomplex* taup1, dcomplex* taup2, dcomplex* tauq1, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb2(integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x21, integer* ldx21, double* theta, double* phi, dcomplex* taup1, dcomplex* taup2, dcomplex* tauq1, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb3(integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x21, integer* ldx21, double* theta, double* phi, dcomplex* taup1, dcomplex* taup2, dcomplex* tauq1, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb4(integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x21, integer* ldx21, double* theta, double* phi, dcomplex* taup1, dcomplex* taup2, dcomplex* tauq1, dcomplex* phantom, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb5(integer* m1, integer* m2, integer* n, dcomplex* x1, integer* incx1, dcomplex* x2, integer* incx2, dcomplex* q1, integer* ldq1, dcomplex* q2, integer* ldq2, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb6(integer* m1, integer* m2, integer* n, dcomplex* x1, integer* incx1, dcomplex* x2, integer* incx2, dcomplex* q1, integer* ldq1, dcomplex* q2, integer* ldq2, dcomplex* work, integer* lwork, integer* info);
void F77_zunbdb(char* trans, char* signs, integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x12, integer* ldx12, dcomplex* x21, integer* ldx21, dcomplex* x22, integer* ldx22, double* theta, double* phi, dcomplex* taup1, dcomplex* taup2, dcomplex* tauq1, dcomplex* tauq2, dcomplex* work, integer* lwork, integer* info);
void F77_zuncsd2by1(char* jobu1, char* jobu2, char* jobv1t, integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x21, integer* ldx21, double* theta, dcomplex* u1, integer* ldu1, dcomplex* u2, integer* ldu2, dcomplex* v1t, integer* ldv1t, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* info);
void F77_zuncsd(char* jobu1, char* jobu2, char* jobv1t, char* jobv2t, char* trans, char* signs, integer* m, integer* p, integer* q, dcomplex* x11, integer* ldx11, dcomplex* x12, integer* ldx12, dcomplex* x21, integer* ldx21, dcomplex* x22, integer* ldx22, double* theta, dcomplex* u1, integer* ldu1, dcomplex* u2, integer* ldu2, dcomplex* v1t, integer* ldv1t, dcomplex* v2t, integer* ldv2t, dcomplex* work, integer* lwork, double* rwork, integer* lrwork, integer* iwork, integer* info);
void F77_zung2l(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zung2r(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zungbr(char* vect, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zunghr(integer* n, integer* ilo, integer* ihi, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zungl2(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zunglq(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zungql(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zungqr(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zungr2(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* info);
void F77_zungrq(integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zungtr(char* uplo, integer* m, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* work, integer* lwork, integer* info);
void F77_zungtsqr(integer* m, integer* n, integer* mb, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* work, integer* lwork, integer* info);
void F77_zunhr_col(integer* m, integer* n, integer* nb, dcomplex* a, integer* lda, dcomplex* t, integer* ldt, dcomplex* d, integer* info);
void F77_zunm22(char* side, char* trans, integer* m, integer* n, integer* n1, integer* n2, dcomplex* q, integer* ldq, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunm2l(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zunm2r(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zunmbr(char* vect, char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunmhr(char* side, char* trans, integer* m, integer* n, integer* ilo, integer* ihi, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunml2(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zunmlq(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunmql(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunmqr(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunmr2(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zunmr3(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
void F77_zunmrq(char* side, char* trans, integer* m, integer* n, integer* k, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunmrz(char* side, char* trans, integer* m, integer* n, integer* k, integer* l, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zunmtr(char* side, char* uplo, char* trans, integer* m, integer* n, dcomplex* a, integer* lda, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* lwork, integer* info);
void F77_zupgtr(char* uplo, integer* n, dcomplex* ap, dcomplex* tau, dcomplex* q, integer* ldq, dcomplex* work, integer* info);
void F77_zupmtr(char* side, char* uplo, char* trans, integer* m, integer* n, dcomplex* ap, dcomplex* tau, dcomplex* c, integer* ldc, dcomplex* work, integer* info);
logical F77_disnan(double* din);
logical F77_dlaisnan(double* din1, double* din2);
logical F77_sisnan(float* sin__);
logical F77_slaisnan(float* sin1, float* sin2);
VOID F77_chla_transtype(char* ret_val, integer* trans);
VOID F77_cladiv(scomplex* ret_val, scomplex* x, scomplex* y);
VOID F77_zladiv(dcomplex* ret_val, dcomplex* x, dcomplex* y);
void F77_sgetrfnp(integer* m, integer* n, float* a, integer* lda, integer* info);
void F77_dgetrfnp(integer* m, integer* n, double* a, integer* lda, integer* info);
void F77_cgetrfnp(integer* m, integer* n, scomplex* a, integer* lda, integer* info);
void F77_zgetrfnp(integer* m, integer* n, dcomplex* a, integer* lda, integer* info);
void F77_sspffrt2( float  *ap, integer *n, integer * ncolm, float  *work, float  *work2 );
void F77_dspffrt2( double *ap, integer *n, integer * ncolm, double *work, double *work2 );
void F77_cspffrt2( scomplex *ap, integer *n, integer * ncolm, scomplex *work, scomplex *work2 );
void F77_zspffrt2( dcomplex *ap, integer *n, integer * ncolm, dcomplex *work, dcomplex *work2 );
void F77_sspffrtx( float  *ap, integer *n, integer * ncolm, float  *work, float  *work2 );
void F77_dspffrtx( double *ap, integer *n, integer * ncolm, double *work, double *work2 );
void F77_cspffrtx( scomplex *ap, integer *n, integer * ncolm, scomplex *work, scomplex *work2 );
void F77_zspffrtx( dcomplex *ap, integer *n, integer * ncolm, dcomplex *work, dcomplex *work2 );
void F77_cgetrfnpi(integer *m, integer *n, integer *nfact, scomplex *a, integer *lda, integer *info);
void F77_dgetrfnpi(integer *m, integer *n, integer *nfact, double *a, integer * lda, integer *info);
void F77_sgetrfnpi(integer *m, integer *n, integer *nfact, float *a, integer *lda, integer *info);
void F77_zgetrfnpi(integer *m, integer *n, integer*nfact, dcomplex *a, integer *lda, integer *info);

void F77_sopgtr(char *uplo, integer *n, float *ap, float *tau, float *q, integer *ldq, float *work, integer *info);
void F77_dopgtr(char *uplo, integer *n, double *ap, double *tau, double *q, integer *ldq, double *work, integer *info);
void F77_sorcsd(char *jobu1, char *jobu2, char *jobv1t, char * jobv2t, char *trans, char *signs, integer *m, integer *p, integer *q, float *x11, integer *ldx11, float *x12, integer *ldx12, float *x21, integer *ldx21, float *x22, integer *ldx22, float *theta, float *u1, integer *ldu1, float *u2, integer *ldu2, float *v1t, integer *ldv1t, float *v2t, integer *ldv2t, float *work, integer *lwork, integer *iwork, integer *info);
void F77_dorcsd(char *jobu1, char *jobu2, char *jobv1t, char * jobv2t, char *trans, char *signs, integer *m, integer *p, integer *q, double *x11, integer *ldx11, double *x12, integer *ldx12, double *x21, integer *ldx21, double *x22, integer *ldx22, double *theta, double *u1, integer *ldu1, double *u2, integer *ldu2, double *v1t, integer *ldv1t, double *v2t, integer *ldv2t, double *work, integer *lwork, integer *iwork, integer *info);
void F77_sorcsd2by1(char *jobu1, char *jobu2, char *jobv1t, integer *m, integer *p, integer *q, float *x11, integer *ldx11, float * x21, integer *ldx21, float *theta, float *u1, integer *ldu1, float *u2, integer *ldu2, float *v1t, integer *ldv1t, float *work, integer *lwork, integer *iwork, integer *info);
void F77_dorcsd2by1(char *jobu1, char *jobu2, char *jobv1t, integer *m, integer *p, integer *q, double *x11, integer *ldx11, double *x21, integer *ldx21, double *theta, double *u1, integer *ldu1, double *u2, integer *ldu2, double *v1t, integer *ldv1t, double *work, integer *lwork, integer *iwork, integer *info);
void F77_sorghr(integer *n, integer *ilo, integer *ihi, float *a, integer *lda, float *tau, float *work, integer *lwork, integer *info);
void F77_dorghr(integer *n, integer *ilo, integer *ihi, double *a, integer *lda, double *tau, double *work, integer *lwork, integer *info);
void F77_sormhr(char *side, char *trans, integer *m, integer *n, integer *ilo, integer *ihi, float *a, integer *lda, float *tau, float * c__, integer *ldc, float *work, integer *lwork, integer *info);
void F77_dormhr(char *side, char *trans, integer *m, integer *n, integer *ilo, integer *ihi, double *a, integer *lda, double * tau, double *c__, integer *ldc, double *work, integer *lwork, integer *info);
// end FLA_lapack_f77_prototypes.h

// begin aocldtl.h


#ifndef _AOCLDTL_H_
#define _AOCLDTL_H_

// begin aocldtlcf.h


#ifndef _AOCLDTLCF_H_
#define _AOCLDTLCF_H_


#define AOCL_DTL_TRACE_ENABLE 0


#define AOCL_DTL_DUMP_ENABLE 0


#define AOCL_DTL_LOG_ENABLE 0



#define AOCL_DTL_TRACE_LEVEL AOCL_DTL_LEVEL_TRACE_5

// A workaround for autotools and cmake to work together. To be removed on complete migration to
// cmake and defauilt values of AOCL_DTL_LOG_ENABLE and AOCL_DTL_TRACE_ENABLE to be set to 1. In
// order to fully allow enabling and disbling of logs and trace from cmake commandline
#if AOCL_DTL_LOG_ENABLE
#define LF_AOCL_DTL_LOG_ENABLE 1
#else
#define LF_AOCL_DTL_LOG_ENABLE 0
#endif

#if AOCL_DTL_TRACE_ENABLE
#define LF_AOCL_DTL_TRACE_ENABLE 1
#else
#define LF_AOCL_DTL_TRACE_ENABLE 0
#endif


#define AOCL_DTL_LEVEL_ALL (14)
#define AOCL_DTL_LEVEL_TRACE_8 (13)
#define AOCL_DTL_LEVEL_TRACE_7 (12) 
#define AOCL_DTL_LEVEL_TRACE_6 (11)
#define AOCL_DTL_LEVEL_TRACE_5 (10)
#define AOCL_DTL_LEVEL_TRACE_4 (9)
#define AOCL_DTL_LEVEL_TRACE_3 (8)
#define AOCL_DTL_LEVEL_TRACE_2 (7)
#define AOCL_DTL_LEVEL_TRACE_1 (6) 
#define AOCL_DTL_LEVEL_VERBOSE (5)
#define AOCL_DTL_LEVEL_INFO (4)
#define AOCL_DTL_LEVEL_MINOR (3)
#define AOCL_DTL_LEVEL_MAJOR (2)
#define AOCL_DTL_LEVEL_CRITICAL (1)

#define AOCL_DTL_TRACE_FILE "aocldtl_trace.txt"
#define AOCL_DTL_AUTO_TRACE_FILE "aocldtl_auto_trace.rawfile"
#define AOCL_DTL_LOG_FILE "aocldtl_log.txt"


#define AOCL_CHAR_DATA_TYPE (1)


#define AOCL_UINT16_DATA_TYPE (2)


#define AOCL_STRING_DATA_TYPE (3)


#define AOCL_UINT32_DATA_TYPE (4)


#define AOCL_LOG_HEX_VALUE ('x')


#define AOCL_LOG_DECIMAL_VALUE ('d')

#endif 


// end aocldtlcf.h
// begin aoclflist.h


#ifndef _AOCL_FLIST_H_
#define _AOCL_FLIST_H_

// begin aoclfal.h


#ifndef _AOCL_FAL_H_
#define _AOCL_FAL_H_


#define AOCL_FAL_SUCCESS 0
#define AOCL_FAL_CLOSE_ERROR -1
#define AOCL_FAL_READ_ERROR -2
#define AOCL_FAL_WRITE_ERROR -3
#define AOCL_FAL_EOF_ERROR -6
#define AOCL_FAL_FERROR -7
// begin aocltpdef.h


#ifndef AOCL_TYPEDEF_H_
#define AOCL_TYPEDEF_H_

#include <math.h> // skipped
#include <memory.h> // skipped
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <time.h> // skipped
#ifndef _WIN32
#include <sys/types.h> // skipped
#else
typedef int pid_t;
#endif

typedef double Double;
typedef float Float;
typedef void Void;
typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned int uint32;
typedef unsigned long uint64;
typedef uint8 *STRING;
typedef unsigned char Bool;
typedef char int8;
typedef signed long int int32;
typedef short int int16;

typedef Void *AOCL_HANDLE;
typedef pid_t AOCL_TID;

#endif 


// end aocltpdef.h


#define AOCL_FAL_FILE FILE


int32 AOCL_FAL_Close(AOCL_FAL_FILE *fpFilePointer);

int32 AOCL_FAL_Error(AOCL_FAL_FILE *fpFilePointer);

AOCL_FAL_FILE *AOCL_FAL_Open(const int8 *pchFileName, const int8 *pchMode);

int32 AOCL_FAL_Read(void *pvBuffer, int32 i32Size, int32 i32Count, AOCL_FAL_FILE *fpFilePointer);

int32 AOCL_FAL_Write(const void *pvBuffer, int32 i32Size, int32 iCount,
                     AOCL_FAL_FILE *fpFilePointer);

#endif 


// end aoclfal.h
// begin aocltpdef.h


#ifndef AOCL_TYPEDEF_H_
#define AOCL_TYPEDEF_H_

#include <math.h> // skipped
#include <memory.h> // skipped
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <time.h> // skipped
#ifndef _WIN32
#include <sys/types.h> // skipped
#else
typedef int pid_t;
#endif

typedef double Double;
typedef float Float;
typedef void Void;
typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned int uint32;
typedef unsigned long uint64;
typedef uint8 *STRING;
typedef unsigned char Bool;
typedef char int8;
typedef signed long int int32;
typedef short int int16;

typedef Void *AOCL_HANDLE;
typedef pid_t AOCL_TID;

#endif 


// end aocltpdef.h

typedef struct AOCL_FLIST_Node_t
{
    AOCL_TID tid;
    AOCL_FAL_FILE *fp;
    struct AOCL_FLIST_Node_t *pNext;
} AOCL_FLIST_Node;

Bool AOCL_FLIST_IsEmpty(AOCL_FLIST_Node *plist);

AOCL_FAL_FILE *AOCL_FLIST_GetFile(AOCL_FLIST_Node *plist, AOCL_TID tid);

AOCL_FAL_FILE *AOCL_FLIST_AddFile(const int8 *pchFilePrefix, AOCL_FLIST_Node **plist, AOCL_TID tid);

void AOCL_FLIST_CloseFile(AOCL_FLIST_Node *plist, AOCL_TID tid);

void AOCL_FLIST_CloseAll(AOCL_FLIST_Node *plist);

#endif 


// end aoclflist.h
// begin aocltpdef.h


#ifndef AOCL_TYPEDEF_H_
#define AOCL_TYPEDEF_H_

#include <math.h> // skipped
#include <memory.h> // skipped
#include <stdio.h> // skipped
#include <stdlib.h> // skipped
#include <time.h> // skipped
#ifndef _WIN32
#include <sys/types.h> // skipped
#else
typedef int pid_t;
#endif

typedef double Double;
typedef float Float;
typedef void Void;
typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned int uint32;
typedef unsigned long uint64;
typedef uint8 *STRING;
typedef unsigned char Bool;
typedef char int8;
typedef signed long int int32;
typedef short int int16;

typedef Void *AOCL_HANDLE;
typedef pid_t AOCL_TID;

#endif 


// end aocltpdef.h

#define TRACE_TYPE_FENTRY (1)
#define TRACE_TYPE_FEXIT (2)
#define TRACE_TYPE_LOG (3)
#define TRACE_TYPE_RAW (4)


#define AOCL_DEBUGPRINT printf


#if(LF_AOCL_DTL_TRACE_ENABLE || AOCL_DTL_DUMP_ENABLE || LF_AOCL_DTL_LOG_ENABLE)
#define AOCL_DTL_INITIALIZE_ENABLE
#endif

#if LF_AOCL_DTL_TRACE_ENABLE

#define AOCL_DTL_TRACE_ENTRY(LogLevel) \
    DTL_Trace(LogLevel, TRACE_TYPE_FENTRY, __FILE__, __FUNCTION__, __LINE__, NULL);
#else

#define AOCL_DTL_TRACE_ENTRY(LogLevel)
#endif

#if LF_AOCL_DTL_TRACE_ENABLE

#define AOCL_DTL_TRACE_EXIT(LogLevel) \
    DTL_Trace(LogLevel, TRACE_TYPE_FEXIT, __FILE__, __FUNCTION__, __LINE__, NULL);

#define AOCL_DTL_TRACE_EXIT_ERR(LogLevel, Message) \
    DTL_Trace(LogLevel, TRACE_TYPE_FEXIT, __FILE__, __FUNCTION__, __LINE__, Message);
#else

#define AOCL_DTL_TRACE_EXIT(LogLevel)
#define AOCL_DTL_TRACE_EXIT_ERR(LogLevel, Message)
#endif

#if AOCL_DTL_DUMP_ENABLE

#define AOCL_DTL_DUMP(LogLevel, Buffer, BufferSize, DataType, String, OutputType) \
                                     \
    DTL_DumpData(LogLevel, Buffer, BufferSize, DataType, String, OutputType);
#else

#define AOCL_DTL_DUMP(Buffer, BufferSize, DataType, String, OutputType)

#endif

#if LF_AOCL_DTL_LOG_ENABLE

#define AOCL_DTL_LOG(LogLevel, Message) \
    DTL_Trace(LogLevel, TRACE_TYPE_LOG, __FILE__, __FUNCTION__, __LINE__, Message);
#else

#define AOCL_DTL_LOG(LogLevel, Message)
#endif


#ifdef AOCL_DTL_INITIALIZE_ENABLE
#define AOCL_DTL_INITIALIZE(CURRENT_LOG_LEVEL) DTL_Initialize(CURRENT_LOG_LEVEL);
#else

#define AOCL_DTL_INITIALIZE(CURRENT_LOG_LEVEL)
#endif


#ifdef AOCL_DTL_INITIALIZE_ENABLE
#define AOCL_DTL_UNINITIALIZE() DTL_Uninitialize();
#else

#define AOCL_DTL_UNINITIALIZE()
#endif

#ifdef AOCL_DTL_INITIALIZE_ENABLE

void DTL_Initialize(uint32 ui32CurrentLogLevel);
void DTL_Uninitialize(void);
#endif

#if(LF_AOCL_DTL_TRACE_ENABLE || LF_AOCL_DTL_LOG_ENABLE)

void DTL_Trace(uint8 ui8LogLevel, uint8 ui8LogType, const int8 *pi8FileName,
               const int8 *pi8FunctionName, uint32 ui32LineNumber, const int8 *pi8Message);

#endif

#if AOCL_DTL_DUMP_ENABLE

void DTL_DumpData(uint8 ui8LogLevel, void *pvBuffer, uint32 ui32BufferSize, uint8 ui8DataType,
                  int8 *pi8Message, int8 i8OutputType);
#endif

#endif 


// end aocldtl.h


// End extern "C" construct block.
#ifdef __cplusplus
}
#endif 

#endif

